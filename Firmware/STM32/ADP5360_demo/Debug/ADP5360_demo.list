
ADP5360_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfbc  08000270  08000270  00010270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800e22c  0800e22c  0001e22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e32c  0800e32c  0001e32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e334  0800e334  0001e334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e338  0800e338  0001e338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  0800e33c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000848  2000000c  0800e345  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000854  0800e345  00020854  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY
 11 .debug_info   00030ffc  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000525e  00000000  00000000  0005107e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002880  00000000  00000000  000562e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001f90  00000000  00000000  00058b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00044ffe  00000000  00000000  0005aaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00035df1  00000000  00000000  0009faee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a2724  00000000  00000000  000d58df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000b1b8  00000000  00000000  00278004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  002831bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000270 <__do_global_dtors_aux>:
 8000270:	b510      	push	{r4, lr}
 8000272:	4c05      	ldr	r4, [pc, #20]	; (8000288 <__do_global_dtors_aux+0x18>)
 8000274:	7823      	ldrb	r3, [r4, #0]
 8000276:	b933      	cbnz	r3, 8000286 <__do_global_dtors_aux+0x16>
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <__do_global_dtors_aux+0x1c>)
 800027a:	b113      	cbz	r3, 8000282 <__do_global_dtors_aux+0x12>
 800027c:	4804      	ldr	r0, [pc, #16]	; (8000290 <__do_global_dtors_aux+0x20>)
 800027e:	f3af 8000 	nop.w
 8000282:	2301      	movs	r3, #1
 8000284:	7023      	strb	r3, [r4, #0]
 8000286:	bd10      	pop	{r4, pc}
 8000288:	2000000c 	.word	0x2000000c
 800028c:	00000000 	.word	0x00000000
 8000290:	0800e214 	.word	0x0800e214

08000294 <frame_dummy>:
 8000294:	b508      	push	{r3, lr}
 8000296:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <frame_dummy+0x10>)
 8000298:	b11b      	cbz	r3, 80002a2 <frame_dummy+0xe>
 800029a:	4903      	ldr	r1, [pc, #12]	; (80002a8 <frame_dummy+0x14>)
 800029c:	4803      	ldr	r0, [pc, #12]	; (80002ac <frame_dummy+0x18>)
 800029e:	f3af 8000 	nop.w
 80002a2:	bd08      	pop	{r3, pc}
 80002a4:	00000000 	.word	0x00000000
 80002a8:	20000010 	.word	0x20000010
 80002ac:	0800e214 	.word	0x0800e214

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295
 80008d0:	f000 b982 	b.w	8000bd8 <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80008f2:	460d      	mov	r5, r1
 80008f4:	4604      	mov	r4, r0
 80008f6:	460f      	mov	r7, r1
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d146      	bne.n	800098a <__udivmoddi4+0x9e>
 80008fc:	428a      	cmp	r2, r1
 80008fe:	4694      	mov	ip, r2
 8000900:	d95e      	bls.n	80009c0 <__udivmoddi4+0xd4>
 8000902:	fab2 f382 	clz	r3, r2
 8000906:	b143      	cbz	r3, 800091a <__udivmoddi4+0x2e>
 8000908:	fa02 fc03 	lsl.w	ip, r2, r3
 800090c:	f1c3 0220 	rsb	r2, r3, #32
 8000910:	409f      	lsls	r7, r3
 8000912:	409c      	lsls	r4, r3
 8000914:	fa20 f202 	lsr.w	r2, r0, r2
 8000918:	4317      	orrs	r7, r2
 800091a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800091e:	fa1f f58c 	uxth.w	r5, ip
 8000922:	0c22      	lsrs	r2, r4, #16
 8000924:	fbb7 f1fe 	udiv	r1, r7, lr
 8000928:	fb0e 7711 	mls	r7, lr, r1, r7
 800092c:	fb01 f005 	mul.w	r0, r1, r5
 8000930:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000934:	4290      	cmp	r0, r2
 8000936:	d908      	bls.n	800094a <__udivmoddi4+0x5e>
 8000938:	eb1c 0202 	adds.w	r2, ip, r2
 800093c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000940:	d202      	bcs.n	8000948 <__udivmoddi4+0x5c>
 8000942:	4290      	cmp	r0, r2
 8000944:	f200 8134 	bhi.w	8000bb0 <__udivmoddi4+0x2c4>
 8000948:	4639      	mov	r1, r7
 800094a:	1a12      	subs	r2, r2, r0
 800094c:	b2a4      	uxth	r4, r4
 800094e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000952:	fb0e 2210 	mls	r2, lr, r0, r2
 8000956:	fb00 f505 	mul.w	r5, r0, r5
 800095a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800095e:	42a5      	cmp	r5, r4
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x88>
 8000962:	eb1c 0404 	adds.w	r4, ip, r4
 8000966:	f100 32ff 	add.w	r2, r0, #4294967295
 800096a:	d202      	bcs.n	8000972 <__udivmoddi4+0x86>
 800096c:	42a5      	cmp	r5, r4
 800096e:	f200 8119 	bhi.w	8000ba4 <__udivmoddi4+0x2b8>
 8000972:	4610      	mov	r0, r2
 8000974:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	2100      	movs	r1, #0
 800097c:	b11e      	cbz	r6, 8000986 <__udivmoddi4+0x9a>
 800097e:	40dc      	lsrs	r4, r3
 8000980:	2300      	movs	r3, #0
 8000982:	e9c6 4300 	strd	r4, r3, [r6]
 8000986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800098a:	428b      	cmp	r3, r1
 800098c:	d908      	bls.n	80009a0 <__udivmoddi4+0xb4>
 800098e:	2e00      	cmp	r6, #0
 8000990:	f000 80fc 	beq.w	8000b8c <__udivmoddi4+0x2a0>
 8000994:	2100      	movs	r1, #0
 8000996:	e9c6 0500 	strd	r0, r5, [r6]
 800099a:	4608      	mov	r0, r1
 800099c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009a0:	fab3 f183 	clz	r1, r3
 80009a4:	2900      	cmp	r1, #0
 80009a6:	d14c      	bne.n	8000a42 <__udivmoddi4+0x156>
 80009a8:	42ab      	cmp	r3, r5
 80009aa:	f0c0 80f2 	bcc.w	8000b92 <__udivmoddi4+0x2a6>
 80009ae:	4282      	cmp	r2, r0
 80009b0:	f240 80ef 	bls.w	8000b92 <__udivmoddi4+0x2a6>
 80009b4:	4608      	mov	r0, r1
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d0e5      	beq.n	8000986 <__udivmoddi4+0x9a>
 80009ba:	e9c6 4700 	strd	r4, r7, [r6]
 80009be:	e7e2      	b.n	8000986 <__udivmoddi4+0x9a>
 80009c0:	b902      	cbnz	r2, 80009c4 <__udivmoddi4+0xd8>
 80009c2:	deff      	udf	#255	; 0xff
 80009c4:	fab2 f382 	clz	r3, r2
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f040 809f 	bne.w	8000b0c <__udivmoddi4+0x220>
 80009ce:	1a8a      	subs	r2, r1, r2
 80009d0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009d4:	fa1f f78c 	uxth.w	r7, ip
 80009d8:	2101      	movs	r1, #1
 80009da:	fbb2 f5fe 	udiv	r5, r2, lr
 80009de:	fb0e 2015 	mls	r0, lr, r5, r2
 80009e2:	0c22      	lsrs	r2, r4, #16
 80009e4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009e8:	fb07 f005 	mul.w	r0, r7, r5
 80009ec:	4290      	cmp	r0, r2
 80009ee:	d90f      	bls.n	8000a10 <__udivmoddi4+0x124>
 80009f0:	eb1c 0202 	adds.w	r2, ip, r2
 80009f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80009f8:	bf2c      	ite	cs
 80009fa:	f04f 0901 	movcs.w	r9, #1
 80009fe:	f04f 0900 	movcc.w	r9, #0
 8000a02:	4290      	cmp	r0, r2
 8000a04:	d903      	bls.n	8000a0e <__udivmoddi4+0x122>
 8000a06:	f1b9 0f00 	cmp.w	r9, #0
 8000a0a:	f000 80ce 	beq.w	8000baa <__udivmoddi4+0x2be>
 8000a0e:	4645      	mov	r5, r8
 8000a10:	1a12      	subs	r2, r2, r0
 8000a12:	b2a4      	uxth	r4, r4
 8000a14:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a18:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a1c:	fb00 f707 	mul.w	r7, r0, r7
 8000a20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a24:	42a7      	cmp	r7, r4
 8000a26:	d908      	bls.n	8000a3a <__udivmoddi4+0x14e>
 8000a28:	eb1c 0404 	adds.w	r4, ip, r4
 8000a2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a30:	d202      	bcs.n	8000a38 <__udivmoddi4+0x14c>
 8000a32:	42a7      	cmp	r7, r4
 8000a34:	f200 80b3 	bhi.w	8000b9e <__udivmoddi4+0x2b2>
 8000a38:	4610      	mov	r0, r2
 8000a3a:	1be4      	subs	r4, r4, r7
 8000a3c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a40:	e79c      	b.n	800097c <__udivmoddi4+0x90>
 8000a42:	f1c1 0420 	rsb	r4, r1, #32
 8000a46:	408b      	lsls	r3, r1
 8000a48:	fa05 fc01 	lsl.w	ip, r5, r1
 8000a4c:	fa22 f704 	lsr.w	r7, r2, r4
 8000a50:	40e5      	lsrs	r5, r4
 8000a52:	408a      	lsls	r2, r1
 8000a54:	431f      	orrs	r7, r3
 8000a56:	fa20 f304 	lsr.w	r3, r0, r4
 8000a5a:	4088      	lsls	r0, r1
 8000a5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a60:	ea43 030c 	orr.w	r3, r3, ip
 8000a64:	fa1f fc87 	uxth.w	ip, r7
 8000a68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a6c:	fbb5 fef8 	udiv	lr, r5, r8
 8000a70:	fb08 551e 	mls	r5, r8, lr, r5
 8000a74:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000a78:	fb0e f90c 	mul.w	r9, lr, ip
 8000a7c:	45a9      	cmp	r9, r5
 8000a7e:	d90e      	bls.n	8000a9e <__udivmoddi4+0x1b2>
 8000a80:	197d      	adds	r5, r7, r5
 8000a82:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a86:	bf2c      	ite	cs
 8000a88:	f04f 0b01 	movcs.w	fp, #1
 8000a8c:	f04f 0b00 	movcc.w	fp, #0
 8000a90:	45a9      	cmp	r9, r5
 8000a92:	d903      	bls.n	8000a9c <__udivmoddi4+0x1b0>
 8000a94:	f1bb 0f00 	cmp.w	fp, #0
 8000a98:	f000 808d 	beq.w	8000bb6 <__udivmoddi4+0x2ca>
 8000a9c:	46d6      	mov	lr, sl
 8000a9e:	eba5 0509 	sub.w	r5, r5, r9
 8000aa2:	fa1f f983 	uxth.w	r9, r3
 8000aa6:	fbb5 f3f8 	udiv	r3, r5, r8
 8000aaa:	fb08 5513 	mls	r5, r8, r3, r5
 8000aae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ab2:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000ab6:	45ac      	cmp	ip, r5
 8000ab8:	d906      	bls.n	8000ac8 <__udivmoddi4+0x1dc>
 8000aba:	197d      	adds	r5, r7, r5
 8000abc:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ac0:	d201      	bcs.n	8000ac6 <__udivmoddi4+0x1da>
 8000ac2:	45ac      	cmp	ip, r5
 8000ac4:	d87e      	bhi.n	8000bc4 <__udivmoddi4+0x2d8>
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000acc:	eba5 050c 	sub.w	r5, r5, ip
 8000ad0:	fba3 9802 	umull	r9, r8, r3, r2
 8000ad4:	4545      	cmp	r5, r8
 8000ad6:	46ce      	mov	lr, r9
 8000ad8:	46c4      	mov	ip, r8
 8000ada:	d302      	bcc.n	8000ae2 <__udivmoddi4+0x1f6>
 8000adc:	d106      	bne.n	8000aec <__udivmoddi4+0x200>
 8000ade:	4548      	cmp	r0, r9
 8000ae0:	d204      	bcs.n	8000aec <__udivmoddi4+0x200>
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ae8:	eb68 0c07 	sbc.w	ip, r8, r7
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d06f      	beq.n	8000bd0 <__udivmoddi4+0x2e4>
 8000af0:	ebb0 020e 	subs.w	r2, r0, lr
 8000af4:	eb65 050c 	sbc.w	r5, r5, ip
 8000af8:	40ca      	lsrs	r2, r1
 8000afa:	fa05 f404 	lsl.w	r4, r5, r4
 8000afe:	40cd      	lsrs	r5, r1
 8000b00:	4618      	mov	r0, r3
 8000b02:	4314      	orrs	r4, r2
 8000b04:	2100      	movs	r1, #0
 8000b06:	e9c6 4500 	strd	r4, r5, [r6]
 8000b0a:	e73c      	b.n	8000986 <__udivmoddi4+0x9a>
 8000b0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b10:	f1c3 0220 	rsb	r2, r3, #32
 8000b14:	4099      	lsls	r1, r3
 8000b16:	409c      	lsls	r4, r3
 8000b18:	40d5      	lsrs	r5, r2
 8000b1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000b22:	fa1f f78c 	uxth.w	r7, ip
 8000b26:	fbb5 f0fe 	udiv	r0, r5, lr
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000b30:	0c11      	lsrs	r1, r2, #16
 8000b32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b36:	fb00 f507 	mul.w	r5, r0, r7
 8000b3a:	428d      	cmp	r5, r1
 8000b3c:	d90e      	bls.n	8000b5c <__udivmoddi4+0x270>
 8000b3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b46:	bf2c      	ite	cs
 8000b48:	f04f 0901 	movcs.w	r9, #1
 8000b4c:	f04f 0900 	movcc.w	r9, #0
 8000b50:	428d      	cmp	r5, r1
 8000b52:	d902      	bls.n	8000b5a <__udivmoddi4+0x26e>
 8000b54:	f1b9 0f00 	cmp.w	r9, #0
 8000b58:	d031      	beq.n	8000bbe <__udivmoddi4+0x2d2>
 8000b5a:	4640      	mov	r0, r8
 8000b5c:	1b49      	subs	r1, r1, r5
 8000b5e:	b292      	uxth	r2, r2
 8000b60:	fbb1 f5fe 	udiv	r5, r1, lr
 8000b64:	fb0e 1115 	mls	r1, lr, r5, r1
 8000b68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b6c:	fb05 f107 	mul.w	r1, r5, r7
 8000b70:	4291      	cmp	r1, r2
 8000b72:	d907      	bls.n	8000b84 <__udivmoddi4+0x298>
 8000b74:	eb1c 0202 	adds.w	r2, ip, r2
 8000b78:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b7c:	d201      	bcs.n	8000b82 <__udivmoddi4+0x296>
 8000b7e:	4291      	cmp	r1, r2
 8000b80:	d823      	bhi.n	8000bca <__udivmoddi4+0x2de>
 8000b82:	4645      	mov	r5, r8
 8000b84:	1a52      	subs	r2, r2, r1
 8000b86:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b8a:	e726      	b.n	80009da <__udivmoddi4+0xee>
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	4630      	mov	r0, r6
 8000b90:	e6f9      	b.n	8000986 <__udivmoddi4+0x9a>
 8000b92:	1a84      	subs	r4, r0, r2
 8000b94:	eb65 0203 	sbc.w	r2, r5, r3
 8000b98:	2001      	movs	r0, #1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	e70b      	b.n	80009b6 <__udivmoddi4+0xca>
 8000b9e:	4464      	add	r4, ip
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	e74a      	b.n	8000a3a <__udivmoddi4+0x14e>
 8000ba4:	4464      	add	r4, ip
 8000ba6:	3802      	subs	r0, #2
 8000ba8:	e6e4      	b.n	8000974 <__udivmoddi4+0x88>
 8000baa:	3d02      	subs	r5, #2
 8000bac:	4462      	add	r2, ip
 8000bae:	e72f      	b.n	8000a10 <__udivmoddi4+0x124>
 8000bb0:	3902      	subs	r1, #2
 8000bb2:	4462      	add	r2, ip
 8000bb4:	e6c9      	b.n	800094a <__udivmoddi4+0x5e>
 8000bb6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bba:	443d      	add	r5, r7
 8000bbc:	e76f      	b.n	8000a9e <__udivmoddi4+0x1b2>
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	4461      	add	r1, ip
 8000bc2:	e7cb      	b.n	8000b5c <__udivmoddi4+0x270>
 8000bc4:	3b02      	subs	r3, #2
 8000bc6:	443d      	add	r5, r7
 8000bc8:	e77e      	b.n	8000ac8 <__udivmoddi4+0x1dc>
 8000bca:	3d02      	subs	r5, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	e7d9      	b.n	8000b84 <__udivmoddi4+0x298>
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	4631      	mov	r1, r6
 8000bd4:	e6d7      	b.n	8000986 <__udivmoddi4+0x9a>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_idiv0>:
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <ADP5360_Init>:
 */

#include "ADP5360.h"


ADP5360_StatusTypeDef ADP5360_Init(ADP5360_HandleTypeDef *dev, I2C_HandleTypeDef *i2cHandle, uint8_t batterySOCACMOverflows){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	4613      	mov	r3, r2
 8000be8:	71fb      	strb	r3, [r7, #7]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	75fb      	strb	r3, [r7, #23]
	uint8_t regData;

	/* Assign I2C handle */
	dev->i2cHandle = i2cHandle;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	601a      	str	r2, [r3, #0]

	/* Set default values, can be changed with functions if needed */
	dev->originalBatteryCapacity = ADP5360_DEFAULT_BATTERY_CAPACITY;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bfa:	811a      	strh	r2, [r3, #8]
	dev->buckVoltage = ADP5360_DEFAULT_BUCK_VOLTAGE;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000c02:	821a      	strh	r2, [r3, #16]
	dev->buckBoostVoltage = ADP5360_DEFAULT_BUCK_BOOST_VOLTAGE;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000c0a:	825a      	strh	r2, [r3, #18]
	dev->chargingEnabled = false;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	711a      	strb	r2, [r3, #4]
	dev->buckEnabled = true;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2201      	movs	r2, #1
 8000c16:	751a      	strb	r2, [r3, #20]
	dev->buckBoostEnabled = false;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	755a      	strb	r2, [r3, #21]

	/* Check the manufacturer and model IDs */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_MANUFACTURER_AND_MODEL_ID, &regData);
 8000c1e:	f107 0316 	add.w	r3, r7, #22
 8000c22:	461a      	mov	r2, r3
 8000c24:	2100      	movs	r1, #0
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	f000 fa05 	bl	8001036 <ADP5360_ReadRegister>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	75fb      	strb	r3, [r7, #23]
	if (status != ADP5360_OK){
 8000c30:	7dfb      	ldrb	r3, [r7, #23]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <ADP5360_Init+0x5e>
		return status;
 8000c36:	7dfb      	ldrb	r3, [r7, #23]
 8000c38:	e047      	b.n	8000cca <ADP5360_Init+0xee>
	}

	if (regData != ((ADP5360_MANUFACTURER_ID << 4) | (ADP5360_MODEL_ID))){
 8000c3a:	7dbb      	ldrb	r3, [r7, #22]
 8000c3c:	2b10      	cmp	r3, #16
 8000c3e:	d003      	beq.n	8000c48 <ADP5360_Init+0x6c>
		status = ADP5360_ERROR_WRONG_ID;
 8000c40:	2304      	movs	r3, #4
 8000c42:	75fb      	strb	r3, [r7, #23]
		return status;
 8000c44:	7dfb      	ldrb	r3, [r7, #23]
 8000c46:	e040      	b.n	8000cca <ADP5360_Init+0xee>
	}

	/* Write the battery capacity */
	status = ADP5360_SetBatteryCapacity(dev, dev->originalBatteryCapacity, batterySOCACMOverflows);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	891b      	ldrh	r3, [r3, #8]
 8000c4c:	79fa      	ldrb	r2, [r7, #7]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f000 f919 	bl	8000e88 <ADP5360_SetBatteryCapacity>
 8000c56:	4603      	mov	r3, r0
 8000c58:	75fb      	strb	r3, [r7, #23]
	if (status != ADP5360_OK){
 8000c5a:	7dfb      	ldrb	r3, [r7, #23]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <ADP5360_Init+0x88>
		return status;
 8000c60:	7dfb      	ldrb	r3, [r7, #23]
 8000c62:	e032      	b.n	8000cca <ADP5360_Init+0xee>
	}

	/* Enable interrupts */
	status = ADP5360_EnableInterrupts(dev);
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f000 f9b7 	bl	8000fd8 <ADP5360_EnableInterrupts>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	75fb      	strb	r3, [r7, #23]
	if (status != ADP5360_OK){
 8000c6e:	7dfb      	ldrb	r3, [r7, #23]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <ADP5360_Init+0x9c>
		return status;
 8000c74:	7dfb      	ldrb	r3, [r7, #23]
 8000c76:	e028      	b.n	8000cca <ADP5360_Init+0xee>
	}

	/* Set charging on/off */
	status = ADP5360_UpdateCharging(dev);
 8000c78:	68f8      	ldr	r0, [r7, #12]
 8000c7a:	f000 f888 	bl	8000d8e <ADP5360_UpdateCharging>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	75fb      	strb	r3, [r7, #23]
	if (status != ADP5360_OK){
 8000c82:	7dfb      	ldrb	r3, [r7, #23]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <ADP5360_Init+0xb0>
		return status;
 8000c88:	7dfb      	ldrb	r3, [r7, #23]
 8000c8a:	e01e      	b.n	8000cca <ADP5360_Init+0xee>
	}

	/* Read the battery charge */
	status = ADP5360_GetBatteryCharge(dev);
 8000c8c:	68f8      	ldr	r0, [r7, #12]
 8000c8e:	f000 f955 	bl	8000f3c <ADP5360_GetBatteryCharge>
 8000c92:	4603      	mov	r3, r0
 8000c94:	75fb      	strb	r3, [r7, #23]
	if (status != ADP5360_OK){
 8000c96:	7dfb      	ldrb	r3, [r7, #23]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <ADP5360_Init+0xc4>
		return status;
 8000c9c:	7dfb      	ldrb	r3, [r7, #23]
 8000c9e:	e014      	b.n	8000cca <ADP5360_Init+0xee>
	}

	/* Read the charging status/mode */
	status = ADP5360_GetChargingStatus(dev);
 8000ca0:	68f8      	ldr	r0, [r7, #12]
 8000ca2:	f000 f8b1 	bl	8000e08 <ADP5360_GetChargingStatus>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	75fb      	strb	r3, [r7, #23]
	if (status != ADP5360_OK){
 8000caa:	7dfb      	ldrb	r3, [r7, #23]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <ADP5360_Init+0xd8>
		return status;
 8000cb0:	7dfb      	ldrb	r3, [r7, #23]
 8000cb2:	e00a      	b.n	8000cca <ADP5360_Init+0xee>
	}

	/* Read the battery charger status/mode */
	status = ADP5360_GetBatteryChargerStatus(dev);
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f000 f8c6 	bl	8000e46 <ADP5360_GetBatteryChargerStatus>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	75fb      	strb	r3, [r7, #23]
	if (status != ADP5360_OK){
 8000cbe:	7dfb      	ldrb	r3, [r7, #23]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <ADP5360_Init+0xec>
		return status;
 8000cc4:	7dfb      	ldrb	r3, [r7, #23]
 8000cc6:	e000      	b.n	8000cca <ADP5360_Init+0xee>
	}

	return status;
 8000cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <ADP5360_EnableCharging>:

ADP5360_StatusTypeDef ADP5360_EnableCharging(ADP5360_HandleTypeDef *dev){
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b084      	sub	sp, #16
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000cde:	f107 030e 	add.w	r3, r7, #14
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	2107      	movs	r1, #7
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f000 f9a5 	bl	8001036 <ADP5360_ReadRegister>
 8000cec:	4603      	mov	r3, r0
 8000cee:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <ADP5360_EnableCharging+0x28>
		return status;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	e016      	b.n	8000d28 <ADP5360_EnableCharging+0x56>
	}

	/* Set the "EN_LDO" and "EN_CHG" bits high */
	regData = regData | ADP5360_BIT_EN_LDO | ADP5360_BIT_EN_CHG;
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	f043 0309 	orr.w	r3, r3, #9
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	73bb      	strb	r3, [r7, #14]

	/* Write the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000d04:	f107 030e 	add.w	r3, r7, #14
 8000d08:	461a      	mov	r2, r3
 8000d0a:	2107      	movs	r1, #7
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f000 f9ad 	bl	800106c <ADP5360_WriteRegister>
 8000d12:	4603      	mov	r3, r0
 8000d14:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <ADP5360_EnableCharging+0x4e>
		return status;
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	e003      	b.n	8000d28 <ADP5360_EnableCharging+0x56>
	}

	/* Update the device struct */
	dev->chargingEnabled = true;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2201      	movs	r2, #1
 8000d24:	711a      	strb	r2, [r3, #4]

	return status;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <ADP5360_DisableCharging>:


ADP5360_StatusTypeDef ADP5360_DisableCharging(ADP5360_HandleTypeDef *dev){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000d3c:	f107 030e 	add.w	r3, r7, #14
 8000d40:	461a      	mov	r2, r3
 8000d42:	2107      	movs	r1, #7
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f000 f976 	bl	8001036 <ADP5360_ReadRegister>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <ADP5360_DisableCharging+0x28>
		return status;
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	e016      	b.n	8000d86 <ADP5360_DisableCharging+0x56>
	}

	/* Set the "EN_CHG" bit low */
	regData = regData & ~ADP5360_BIT_EN_CHG;
 8000d58:	7bbb      	ldrb	r3, [r7, #14]
 8000d5a:	f023 0301 	bic.w	r3, r3, #1
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	73bb      	strb	r3, [r7, #14]

	/* Write the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000d62:	f107 030e 	add.w	r3, r7, #14
 8000d66:	461a      	mov	r2, r3
 8000d68:	2107      	movs	r1, #7
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f000 f97e 	bl	800106c <ADP5360_WriteRegister>
 8000d70:	4603      	mov	r3, r0
 8000d72:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <ADP5360_DisableCharging+0x4e>
		return status;
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	e003      	b.n	8000d86 <ADP5360_DisableCharging+0x56>
	}

	/* Update the device struct */
	dev->chargingEnabled = false;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	711a      	strb	r2, [r3, #4]

	return status;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <ADP5360_UpdateCharging>:

ADP5360_StatusTypeDef ADP5360_UpdateCharging(ADP5360_HandleTypeDef *dev){
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b084      	sub	sp, #16
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_PGOOD_STATUS" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_PGOOD_STATUS, &regData);
 8000d9a:	f107 030e 	add.w	r3, r7, #14
 8000d9e:	461a      	mov	r2, r3
 8000da0:	212f      	movs	r1, #47	; 0x2f
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f000 f947 	bl	8001036 <ADP5360_ReadRegister>
 8000da8:	4603      	mov	r3, r0
 8000daa:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <ADP5360_UpdateCharging+0x28>
		return status;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	e024      	b.n	8000e00 <ADP5360_UpdateCharging+0x72>
	}

	/* If VBUS present, enable charging */
	if (regData & ADP5360_BIT_VBUSOK){
 8000db6:	7bbb      	ldrb	r3, [r7, #14]
 8000db8:	f003 0308 	and.w	r3, r3, #8
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d010      	beq.n	8000de2 <ADP5360_UpdateCharging+0x54>
		if (dev->chargingEnabled == false){
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	791b      	ldrb	r3, [r3, #4]
 8000dc4:	f083 0301 	eor.w	r3, r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d017      	beq.n	8000dfe <ADP5360_UpdateCharging+0x70>
			status = ADP5360_EnableCharging(dev);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ff7f 	bl	8000cd2 <ADP5360_EnableCharging>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	73fb      	strb	r3, [r7, #15]
			if (status != ADP5360_OK){
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d00f      	beq.n	8000dfe <ADP5360_UpdateCharging+0x70>
				return status;
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	e00e      	b.n	8000e00 <ADP5360_UpdateCharging+0x72>
			}
		}
	}
	/* If VBUS absent, disable charging */
	else{
		if (dev->chargingEnabled == true){
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	791b      	ldrb	r3, [r3, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d009      	beq.n	8000dfe <ADP5360_UpdateCharging+0x70>
			status = ADP5360_DisableCharging(dev);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ffa0 	bl	8000d30 <ADP5360_DisableCharging>
 8000df0:	4603      	mov	r3, r0
 8000df2:	73fb      	strb	r3, [r7, #15]
			if (status != ADP5360_OK){
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <ADP5360_UpdateCharging+0x70>
				return status;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	e000      	b.n	8000e00 <ADP5360_UpdateCharging+0x72>
			}
		}
	}

	return status;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <ADP5360_GetChargingStatus>:

ADP5360_StatusTypeDef ADP5360_GetChargingStatus(ADP5360_HandleTypeDef *dev){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_CHARGER_STATUS1" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_STATUS1, &regData);
 8000e14:	f107 030e 	add.w	r3, r7, #14
 8000e18:	461a      	mov	r2, r3
 8000e1a:	2108      	movs	r1, #8
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f000 f90a 	bl	8001036 <ADP5360_ReadRegister>
 8000e22:	4603      	mov	r3, r0
 8000e24:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <ADP5360_GetChargingStatus+0x28>
		return status;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	e006      	b.n	8000e3e <ADP5360_GetChargingStatus+0x36>
	}

	/* Extract the "CHARGE_STATUS" bits and update the device struct */
	dev->chargeStatus = regData & ADP5360_BITS_CHARGER_STATUS;
 8000e30:	7bbb      	ldrb	r3, [r7, #14]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	715a      	strb	r2, [r3, #5]

	return status;
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <ADP5360_GetBatteryChargerStatus>:

	return status;
}


ADP5360_StatusTypeDef ADP5360_GetBatteryChargerStatus(ADP5360_HandleTypeDef *dev){
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b084      	sub	sp, #16
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_CHARGER_STATUS2" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_STATUS2, &regData);
 8000e52:	f107 030e 	add.w	r3, r7, #14
 8000e56:	461a      	mov	r2, r3
 8000e58:	2109      	movs	r1, #9
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 f8eb 	bl	8001036 <ADP5360_ReadRegister>
 8000e60:	4603      	mov	r3, r0
 8000e62:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <ADP5360_GetBatteryChargerStatus+0x28>
		return status;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	e006      	b.n	8000e7c <ADP5360_GetBatteryChargerStatus+0x36>
	}

	/* Extract the "BAT_CHG_STATUS" bits and update the device struct */
	dev->batteryChargerStatus = regData & ADP5360_BITS_BAT_CHG_STATUS;
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	719a      	strb	r2, [r3, #6]

	return status;
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	0000      	movs	r0, r0
	...

08000e88 <ADP5360_SetBatteryCapacity>:


ADP5360_StatusTypeDef ADP5360_SetBatteryCapacity(ADP5360_HandleTypeDef *dev, uint16_t originalBatteryCapacity, uint8_t batterySOCACMOverflows){
 8000e88:	b5b0      	push	{r4, r5, r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	807b      	strh	r3, [r7, #2]
 8000e94:	4613      	mov	r3, r2
 8000e96:	707b      	strb	r3, [r7, #1]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]

	/* Update the device struct */
	dev->originalBatteryCapacity = originalBatteryCapacity;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	887a      	ldrh	r2, [r7, #2]
 8000ea0:	811a      	strh	r2, [r3, #8]
	dev->batterySOCACMOverflows = batterySOCACMOverflows;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	787a      	ldrb	r2, [r7, #1]
 8000ea6:	729a      	strb	r2, [r3, #10]
	dev->effectiveBatteryCapacity = (dev->originalBatteryCapacity * (1.0 - (ADP5360_BATTERY_DEGRADATION_PER_OVERFLOW * dev->batterySOCACMOverflows)));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	891b      	ldrh	r3, [r3, #8]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fc7b 	bl	80007a8 <__aeabi_i2d>
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	460d      	mov	r5, r1
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7a9b      	ldrb	r3, [r3, #10]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fc74 	bl	80007a8 <__aeabi_i2d>
 8000ec0:	a31c      	add	r3, pc, #112	; (adr r3, 8000f34 <ADP5360_SetBatteryCapacity+0xac>)
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	f7ff f9f3 	bl	80002b0 <__aeabi_dmul>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	f04f 0000 	mov.w	r0, #0
 8000ed2:	4917      	ldr	r1, [pc, #92]	; (8000f30 <ADP5360_SetBatteryCapacity+0xa8>)
 8000ed4:	f7ff fb1a 	bl	800050c <__aeabi_dsub>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4620      	mov	r0, r4
 8000ede:	4629      	mov	r1, r5
 8000ee0:	f7ff f9e6 	bl	80002b0 <__aeabi_dmul>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	4610      	mov	r0, r2
 8000eea:	4619      	mov	r1, r3
 8000eec:	f7ff fcc6 	bl	800087c <__aeabi_d2uiz>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	819a      	strh	r2, [r3, #12]

	/* Convert  BAT_CAP (p. 46) */
	uint8_t regData = dev->effectiveBatteryCapacity / 2;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	899b      	ldrh	r3, [r3, #12]
 8000efc:	085b      	lsrs	r3, r3, #1
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_BAT_CAP" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_BAT_CAP, &regData);
 8000f04:	f107 030e 	add.w	r3, r7, #14
 8000f08:	461a      	mov	r2, r3
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 f8ad 	bl	800106c <ADP5360_WriteRegister>
 8000f12:	4603      	mov	r3, r0
 8000f14:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <ADP5360_SetBatteryCapacity+0x98>
		return status;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	e000      	b.n	8000f22 <ADP5360_SetBatteryCapacity+0x9a>
	}

	return status;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bdb0      	pop	{r4, r5, r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	f3af 8000 	nop.w
 8000f30:	3ff00000 	.word	0x3ff00000
 8000f34:	eb851eb8 	.word	0xeb851eb8
 8000f38:	3f8eb851 	.word	0x3f8eb851

08000f3c <ADP5360_GetBatteryCharge>:

ADP5360_StatusTypeDef ADP5360_GetBatteryCharge(ADP5360_HandleTypeDef *dev){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_BAT_SOC" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_BAT_SOC, &regData);
 8000f48:	f107 030e 	add.w	r3, r7, #14
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2121      	movs	r1, #33	; 0x21
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 f870 	bl	8001036 <ADP5360_ReadRegister>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <ADP5360_GetBatteryCharge+0x28>
		return status;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	e006      	b.n	8000f72 <ADP5360_GetBatteryCharge+0x36>
	}

	/* Extract "BAT_SOC" bits and update the device struct */
	dev->batteryChargePercentage = regData & ADP5360_BITS_BAT_SOC;
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	71da      	strb	r2, [r3, #7]

	return status;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <ADP5360_EnableBuckBoost>:

	return status;
}


ADP5360_StatusTypeDef ADP5360_EnableBuckBoost(ADP5360_HandleTypeDef *dev){
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b084      	sub	sp, #16
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_BUCK_BOOST_CONFIG" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_BUCK_BOOST_CONFIG, &regData);
 8000f86:	f107 030e 	add.w	r3, r7, #14
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	212b      	movs	r1, #43	; 0x2b
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 f851 	bl	8001036 <ADP5360_ReadRegister>
 8000f94:	4603      	mov	r3, r0
 8000f96:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <ADP5360_EnableBuckBoost+0x28>
		return status;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	e016      	b.n	8000fd0 <ADP5360_EnableBuckBoost+0x56>
	}

	/* Set the "EN_BUCKBST" bit high */
	regData = regData | ADP5360_BIT_EN_BUCKBST;
 8000fa2:	7bbb      	ldrb	r3, [r7, #14]
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_BUCK_BOOST_CONFIG" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_BUCK_BOOST_CONFIG, &regData);
 8000fac:	f107 030e 	add.w	r3, r7, #14
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	212b      	movs	r1, #43	; 0x2b
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 f859 	bl	800106c <ADP5360_WriteRegister>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <ADP5360_EnableBuckBoost+0x4e>
		return status;
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	e003      	b.n	8000fd0 <ADP5360_EnableBuckBoost+0x56>
	}

	/* Update the device struct */
	dev->buckBoostEnabled = true;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	755a      	strb	r2, [r3, #21]

	return status;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <ADP5360_EnableInterrupts>:
	dev->buckBoostEnabled = false;

	return status;
}

ADP5360_StatusTypeDef ADP5360_EnableInterrupts(ADP5360_HandleTypeDef *dev){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
	uint8_t regData = 0x00;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73bb      	strb	r3, [r7, #14]

	/* Configure "ADP5360_REG_INTERRUPT_ENABLE1" */
	regData = ADP5360_VBUS_INT | ADP5360_CHG_INT | ADP5360_BAT_INT | ADP5360_THR_INT | ADP5360_BATPRO_INT | ADP5360_ADPICHG_INT | ADP5360_SOCACM_INT | ADP5360_SOCLOW_INT;
 8000fe8:	23c7      	movs	r3, #199	; 0xc7
 8000fea:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_INTERRUPT_ENABLE1" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_INTERRUPT_ENABLE1, &regData);
 8000fec:	f107 030e 	add.w	r3, r7, #14
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	2132      	movs	r1, #50	; 0x32
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f839 	bl	800106c <ADP5360_WriteRegister>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <ADP5360_EnableInterrupts+0x30>
		return status;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	e012      	b.n	800102e <ADP5360_EnableInterrupts+0x56>
	}

	/* Configure "ADP5360_REG_INTERRUPT_ENABLE2" */
	regData = 0x00;
 8001008:	2300      	movs	r3, #0
 800100a:	73bb      	strb	r3, [r7, #14]
	regData = ADP5360_BUCKBSTPG_INT | ADP5360_BUCKPG_INT | ADP5360_WD_INT | ADP5360_MR_INT;
 800100c:	2300      	movs	r3, #0
 800100e:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_INTERRUPT_ENABLE2" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_INTERRUPT_ENABLE2, &regData);
 8001010:	f107 030e 	add.w	r3, r7, #14
 8001014:	461a      	mov	r2, r3
 8001016:	2133      	movs	r1, #51	; 0x33
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 f827 	bl	800106c <ADP5360_WriteRegister>
 800101e:	4603      	mov	r3, r0
 8001020:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <ADP5360_EnableInterrupts+0x54>
		return status;
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	e000      	b.n	800102e <ADP5360_EnableInterrupts+0x56>
	}

	return status;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <ADP5360_ReadRegister>:
	}

	return status;
}

ADP5360_StatusTypeDef ADP5360_ReadRegister(ADP5360_HandleTypeDef *dev, uint8_t reg, uint8_t *data){
 8001036:	b580      	push	{r7, lr}
 8001038:	b088      	sub	sp, #32
 800103a:	af04      	add	r7, sp, #16
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	460b      	mov	r3, r1
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, ADP5360_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	7afb      	ldrb	r3, [r7, #11]
 800104a:	b29a      	uxth	r2, r3
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2301      	movs	r3, #1
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	218c      	movs	r1, #140	; 0x8c
 800105e:	f004 fdcb 	bl	8005bf8 <HAL_I2C_Mem_Read>
 8001062:	4603      	mov	r3, r0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <ADP5360_WriteRegister>:

ADP5360_StatusTypeDef ADP5360_WriteRegister(ADP5360_HandleTypeDef *dev, uint8_t reg, uint8_t *data){
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af04      	add	r7, sp, #16
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	460b      	mov	r3, r1
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write(dev->i2cHandle, ADP5360_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	7afb      	ldrb	r3, [r7, #11]
 8001080:	b29a      	uxth	r2, r3
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	2301      	movs	r3, #1
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	218c      	movs	r1, #140	; 0x8c
 8001094:	f004 fc9c 	bl	80059d0 <HAL_I2C_Mem_Write>
 8001098:	4603      	mov	r3, r0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a8:	f002 fc9e 	bl	80039e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ac:	f000 f83e 	bl	800112c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80010b0:	f000 f8a6 	bl	8001200 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b4:	f000 ffe8 	bl	8002088 <MX_GPIO_Init>
  MX_DCACHE1_Init();
 80010b8:	f000 f920 	bl	80012fc <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 80010bc:	f000 f934 	bl	8001328 <MX_DCACHE2_Init>
  MX_ICACHE_Init();
 80010c0:	f000 fc26 	bl	8001910 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80010c4:	f000 fc56 	bl	8001974 <MX_LPUART1_UART_Init>
  MX_OCTOSPI1_Init();
 80010c8:	f000 fdbc 	bl	8001c44 <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 80010cc:	f000 f8f4 	bl	80012b8 <MX_CRC_Init>
  MX_DMA2D_Init();
 80010d0:	f000 f940 	bl	8001354 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80010d4:	f000 f97c 	bl	80013d0 <MX_DSIHOST_DSI_Init>
  MX_GFXMMU_Init();
 80010d8:	f000 fa76 	bl	80015c8 <MX_GFXMMU_Init>
  MX_GPU2D_Init();
 80010dc:	f000 fac4 	bl	8001668 <MX_GPU2D_Init>
  MX_LTDC_Init();
 80010e0:	f000 fd2c 	bl	8001b3c <MX_LTDC_Init>
  MX_RTC_Init();
 80010e4:	f000 fee0 	bl	8001ea8 <MX_RTC_Init>
  MX_OCTOSPI2_Init();
 80010e8:	f000 fe46 	bl	8001d78 <MX_OCTOSPI2_Init>
  MX_ADF1_Init();
 80010ec:	f000 f896 	bl	800121c <MX_ADF1_Init>
  MX_I2C1_Init();
 80010f0:	f000 face 	bl	8001690 <MX_I2C1_Init>
  MX_I2C2_Init();
 80010f4:	f000 fb0c 	bl	8001710 <MX_I2C2_Init>
  MX_I2C4_Init();
 80010f8:	f000 fb8a 	bl	8001810 <MX_I2C4_Init>
  MX_I2C6_Init();
 80010fc:	f000 fbc8 	bl	8001890 <MX_I2C6_Init>
  MX_USART1_UART_Init();
 8001100:	f000 fc84 	bl	8001a0c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001104:	f000 fcce 	bl	8001aa4 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8001108:	f000 ff50 	bl	8001fac <MX_SPI1_Init>
  MX_I2C3_Init();
 800110c:	f000 fb40 	bl	8001790 <MX_I2C3_Init>

  /* USER CODE BEGIN 2 */
  ADP5360_Init(&hadp5360, &hi2c2, (uint8_t) 0x00);
 8001110:	2200      	movs	r2, #0
 8001112:	4904      	ldr	r1, [pc, #16]	; (8001124 <main+0x80>)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <main+0x84>)
 8001116:	f7ff fd61 	bl	8000bdc <ADP5360_Init>
  ADP5360_EnableBuckBoost(&hadp5360);
 800111a:	4803      	ldr	r0, [pc, #12]	; (8001128 <main+0x84>)
 800111c:	f7ff ff2d 	bl	8000f7a <ADP5360_EnableBuckBoost>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001120:	e7fe      	b.n	8001120 <main+0x7c>
 8001122:	bf00      	nop
 8001124:	20000298 	.word	0x20000298
 8001128:	200007c4 	.word	0x200007c4

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b09e      	sub	sp, #120	; 0x78
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0318 	add.w	r3, r7, #24
 8001136:	2260      	movs	r2, #96	; 0x60
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f00d f83d 	bl	800e1ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
 800114e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001150:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001154:	f006 ff24 	bl	8007fa0 <HAL_PWREx_ControlVoltageScaling>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800115e:	f001 fa1d 	bl	800259c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001162:	f006 ff0d 	bl	8007f80 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001166:	4b25      	ldr	r3, [pc, #148]	; (80011fc <SystemClock_Config+0xd0>)
 8001168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800116c:	4a23      	ldr	r2, [pc, #140]	; (80011fc <SystemClock_Config+0xd0>)
 800116e:	f023 0318 	bic.w	r3, r3, #24
 8001172:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001176:	2305      	movs	r3, #5
 8001178:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800117a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800117e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001180:	2381      	movs	r3, #129	; 0x81
 8001182:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001184:	2302      	movs	r3, #2
 8001186:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001188:	2303      	movs	r3, #3
 800118a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001190:	2301      	movs	r3, #1
 8001192:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001194:	230a      	movs	r3, #10
 8001196:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001198:	2302      	movs	r3, #2
 800119a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800119c:	2302      	movs	r3, #2
 800119e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80011a4:	230c      	movs	r3, #12
 80011a6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ac:	f107 0318 	add.w	r3, r7, #24
 80011b0:	4618      	mov	r0, r3
 80011b2:	f006 ffe1 	bl	8008178 <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011bc:	f001 f9ee 	bl	800259c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c0:	231f      	movs	r3, #31
 80011c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c4:	2303      	movs	r3, #3
 80011c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011d8:	463b      	mov	r3, r7
 80011da:	2104      	movs	r1, #4
 80011dc:	4618      	mov	r0, r3
 80011de:	f007 fea7 	bl	8008f30 <HAL_RCC_ClockConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011e8:	f001 f9d8 	bl	800259c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80011ec:	f008 fa22 	bl	8009634 <HAL_RCC_EnableCSS>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 80011f0:	f00b f99e 	bl	800c530 <HAL_RCCEx_EnableLSECSS>
}
 80011f4:	bf00      	nop
 80011f6:	3778      	adds	r7, #120	; 0x78
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	46020c00 	.word	0x46020c00

08001200 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8001204:	f006 ffa8 	bl	8008158 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001208:	2002      	movs	r0, #2
 800120a:	f006 ff55 	bl	80080b8 <HAL_PWREx_ConfigSupply>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8001214:	f001 f9c2 	bl	800259c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <MX_ADF1_Init+0x90>)
 8001222:	4a23      	ldr	r2, [pc, #140]	; (80012b0 <MX_ADF1_Init+0x94>)
 8001224:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <MX_ADF1_Init+0x90>)
 8001228:	2201      	movs	r2, #1
 800122a:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_ADF1_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_ADF1_Init+0x90>)
 8001234:	2201      	movs	r2, #1
 8001236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_ADF1_Init+0x90>)
 800123c:	2210      	movs	r2, #16
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_ADF1_Init+0x90>)
 8001242:	2200      	movs	r2, #0
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_ADF1_Init+0x90>)
 8001248:	2204      	movs	r2, #4
 800124a:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_ADF1_Init+0x90>)
 800124e:	2201      	movs	r2, #1
 8001250:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 8001252:	4816      	ldr	r0, [pc, #88]	; (80012ac <MX_ADF1_Init+0x90>)
 8001254:	f005 fd34 	bl	8006cc0 <HAL_MDF_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ADF1_Init+0x46>
  {
    Error_Handler();
 800125e:	f001 f99d 	bl	800259c <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_ADF1_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_ADF1_Init+0x98>)
 800126a:	2200      	movs	r2, #0
 800126c:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_ADF1_Init+0x98>)
 8001270:	2240      	movs	r2, #64	; 0x40
 8001272:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_ADF1_Init+0x98>)
 8001276:	2202      	movs	r2, #2
 8001278:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_ADF1_Init+0x98>)
 800127c:	2200      	movs	r2, #0
 800127e:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_ADF1_Init+0x98>)
 8001282:	2200      	movs	r2, #0
 8001284:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_ADF1_Init+0x98>)
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_ADF1_Init+0x98>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <MX_ADF1_Init+0x98>)
 8001298:	2200      	movs	r2, #0
 800129a:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <MX_ADF1_Init+0x98>)
 800129e:	2200      	movs	r2, #0
 80012a0:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <MX_ADF1_Init+0x98>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000030 	.word	0x20000030
 80012b0:	46024080 	.word	0x46024080
 80012b4:	20000074 	.word	0x20000074

080012b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <MX_CRC_Init+0x3c>)
 80012be:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <MX_CRC_Init+0x40>)
 80012c0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_CRC_Init+0x3c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <MX_CRC_Init+0x3c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_CRC_Init+0x3c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <MX_CRC_Init+0x3c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_CRC_Init+0x3c>)
 80012dc:	2201      	movs	r2, #1
 80012de:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_CRC_Init+0x3c>)
 80012e2:	f002 fcd3 	bl	8003c8c <HAL_CRC_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80012ec:	f001 f956 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200000f0 	.word	0x200000f0
 80012f8:	40023000 	.word	0x40023000

080012fc <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <MX_DCACHE1_Init+0x24>)
 8001302:	4a08      	ldr	r2, [pc, #32]	; (8001324 <MX_DCACHE1_Init+0x28>)
 8001304:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_DCACHE1_Init+0x24>)
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <MX_DCACHE1_Init+0x24>)
 800130e:	f002 fdaf 	bl	8003e70 <HAL_DCACHE_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 8001318:	f001 f940 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000114 	.word	0x20000114
 8001324:	40031400 	.word	0x40031400

08001328 <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <MX_DCACHE2_Init+0x24>)
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <MX_DCACHE2_Init+0x28>)
 8001330:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_DCACHE2_Init+0x24>)
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_DCACHE2_Init+0x24>)
 800133a:	f002 fd99 	bl	8003e70 <HAL_DCACHE_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_DCACHE2_Init+0x20>
  {
    Error_Handler();
 8001344:	f001 f92a 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000140 	.word	0x20000140
 8001350:	40031800 	.word	0x40031800

08001354 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <MX_DMA2D_Init+0x74>)
 800135a:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <MX_DMA2D_Init+0x78>)
 800135c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_DMA2D_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <MX_DMA2D_Init+0x74>)
 8001366:	2201      	movs	r2, #1
 8001368:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <MX_DMA2D_Init+0x74>)
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <MX_DMA2D_Init+0x74>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_DMA2D_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MX_DMA2D_Init+0x74>)
 800137e:	2200      	movs	r2, #0
 8001380:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_DMA2D_Init+0x74>)
 8001384:	2201      	movs	r2, #1
 8001386:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_DMA2D_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_DMA2D_Init+0x74>)
 8001390:	2200      	movs	r2, #0
 8001392:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_DMA2D_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <MX_DMA2D_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80013a0:	4809      	ldr	r0, [pc, #36]	; (80013c8 <MX_DMA2D_Init+0x74>)
 80013a2:	f002 fe8c 	bl	80040be <HAL_DMA2D_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 80013ac:	f001 f8f6 	bl	800259c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80013b0:	2101      	movs	r1, #1
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_DMA2D_Init+0x74>)
 80013b4:	f002 fff4 	bl	80043a0 <HAL_DMA2D_ConfigLayer>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 80013be:	f001 f8ed 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000016c 	.word	0x2000016c
 80013cc:	4002b000 	.word	0x4002b000

080013d0 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0ae      	sub	sp, #184	; 0xb8
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80013d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
 80013e6:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80013e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013ec:	2224      	movs	r2, #36	; 0x24
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f00c fee2 	bl	800e1ba <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80013f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]
 8001406:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8001408:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800140c:	2234      	movs	r2, #52	; 0x34
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f00c fed2 	bl	800e1ba <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	222c      	movs	r2, #44	; 0x2c
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f00c fecc 	bl	800e1ba <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8001422:	4b67      	ldr	r3, [pc, #412]	; (80015c0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8001424:	4a67      	ldr	r2, [pc, #412]	; (80015c4 <MX_DSIHOST_DSI_Init+0x1f4>)
 8001426:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8001428:	4b65      	ldr	r3, [pc, #404]	; (80015c0 <MX_DSIHOST_DSI_Init+0x1f0>)
 800142a:	2200      	movs	r2, #0
 800142c:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800142e:	4b64      	ldr	r3, [pc, #400]	; (80015c0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8001430:	2204      	movs	r2, #4
 8001432:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8001434:	4b62      	ldr	r3, [pc, #392]	; (80015c0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 800143a:	4b61      	ldr	r3, [pc, #388]	; (80015c0 <MX_DSIHOST_DSI_Init+0x1f0>)
 800143c:	2208      	movs	r2, #8
 800143e:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 8001440:	4b5f      	ldr	r3, [pc, #380]	; (80015c0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 8001446:	237d      	movs	r3, #125	; 0x7d
 8001448:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 800144c:	2304      	movs	r3, #4
 800144e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8001452:	2302      	movs	r3, #2
 8001454:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 8001458:	2301      	movs	r3, #1
 800145a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800146a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800146e:	4619      	mov	r1, r3
 8001470:	4853      	ldr	r0, [pc, #332]	; (80015c0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8001472:	f003 f93d 	bl	80046f0 <HAL_DSI_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 800147c:	f001 f88e 	bl	800259c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8001480:	2301      	movs	r3, #1
 8001482:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.HighSpeedReadTimeout = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.LowPowerReadTimeout = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerWriteTimeout = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.BTATimeout = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80014b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80014b8:	4619      	mov	r1, r3
 80014ba:	4841      	ldr	r0, [pc, #260]	; (80015c0 <MX_DSIHOST_DSI_Init+0x1f0>)
 80014bc:	f003 fdc8 	bl	8005050 <HAL_DSI_ConfigHostTimeouts>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_DSIHOST_DSI_Init+0xfa>
  {
    Error_Handler();
 80014c6:	f001 f869 	bl	800259c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 10;
 80014ca:	230a      	movs	r3, #10
 80014cc:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.ClockLaneLP2HSTime = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneHS2LPTime = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneLP2HSTime = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.DataLaneMaxReadTime = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.StopWaitTime = 10;
 80014de:	230a      	movs	r3, #10
 80014e0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80014e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014e6:	4619      	mov	r1, r3
 80014e8:	4835      	ldr	r0, [pc, #212]	; (80015c0 <MX_DSIHOST_DSI_Init+0x1f0>)
 80014ea:	f003 fd1b 	bl	8004f24 <HAL_DSI_ConfigPhyTimer>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 80014f4:	f001 f852 	bl	800259c <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80014f8:	2104      	movs	r1, #4
 80014fa:	4831      	ldr	r0, [pc, #196]	; (80015c0 <MX_DSIHOST_DSI_Init+0x1f0>)
 80014fc:	f003 fcea 	bl	8004ed4 <HAL_DSI_ConfigFlowControl>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8001506:	f001 f849 	bl	800259c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800150a:	2100      	movs	r1, #0
 800150c:	482c      	ldr	r0, [pc, #176]	; (80015c0 <MX_DSIHOST_DSI_Init+0x1f0>)
 800150e:	f003 f9c3 	bl	8004898 <HAL_DSI_ConfigErrorMonitor>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 8001518:	f001 f840 	bl	800259c <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	65fb      	str	r3, [r7, #92]	; 0x5c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8001550:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001554:	4619      	mov	r1, r3
 8001556:	481a      	ldr	r0, [pc, #104]	; (80015c0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8001558:	f003 fc5e 	bl	8004e18 <HAL_DSI_ConfigCommand>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_DSIHOST_DSI_Init+0x196>
  {
    Error_Handler();
 8001562:	f001 f81b 	bl	800259c <Error_Handler>
  }
  CmdCfg.ColorCoding = DSI_RGB888;
 8001566:	2305      	movs	r3, #5
 8001568:	60bb      	str	r3, [r7, #8]
  CmdCfg.CommandSize = 416;
 800156a:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800156e:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8001570:	2310      	movs	r3, #16
 8001572:	613b      	str	r3, [r7, #16]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8001588:	2340      	movs	r3, #64	; 0x40
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	4619      	mov	r1, r3
 8001594:	480a      	ldr	r0, [pc, #40]	; (80015c0 <MX_DSIHOST_DSI_Init+0x1f0>)
 8001596:	f003 fb68 	bl	8004c6a <HAL_DSI_ConfigAdaptedCommandMode>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 80015a0:	f000 fffc 	bl	800259c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80015a4:	2100      	movs	r1, #0
 80015a6:	4806      	ldr	r0, [pc, #24]	; (80015c0 <MX_DSIHOST_DSI_Init+0x1f0>)
 80015a8:	f003 fb34 	bl	8004c14 <HAL_DSI_SetGenericVCID>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 80015b2:	f000 fff3 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	37b8      	adds	r7, #184	; 0xb8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200001cc 	.word	0x200001cc
 80015c4:	40016c00 	.word	0x40016c00

080015c8 <MX_GFXMMU_Init>:
  * @brief GFXMMU Initialization Function
  * @param None
  * @retval None
  */
static void MX_GFXMMU_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END GFXMMU_Init 0 */

  /* USER CODE BEGIN GFXMMU_Init 1 */

  /* USER CODE END GFXMMU_Init 1 */
  hgfxmmu.Instance = GFXMMU;
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <MX_GFXMMU_Init+0x94>)
 80015ce:	4a24      	ldr	r2, [pc, #144]	; (8001660 <MX_GFXMMU_Init+0x98>)
 80015d0:	601a      	str	r2, [r3, #0]
  hgfxmmu.Init.BlocksPerLine = GFXMMU_192BLOCKS;
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <MX_GFXMMU_Init+0x94>)
 80015d4:	2240      	movs	r2, #64	; 0x40
 80015d6:	605a      	str	r2, [r3, #4]
  hgfxmmu.Init.DefaultValue = 0;
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <MX_GFXMMU_Init+0x94>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  hgfxmmu.Init.Buffers.Buf0Address = 0;
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <MX_GFXMMU_Init+0x94>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	60da      	str	r2, [r3, #12]
  hgfxmmu.Init.Buffers.Buf1Address = 0;
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <MX_GFXMMU_Init+0x94>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  hgfxmmu.Init.Buffers.Buf2Address = 0;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <MX_GFXMMU_Init+0x94>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	615a      	str	r2, [r3, #20]
  hgfxmmu.Init.Buffers.Buf3Address = 0;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_GFXMMU_Init+0x94>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
  hgfxmmu.Init.CachePrefetch.Activation = ENABLE;
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <MX_GFXMMU_Init+0x94>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	771a      	strb	r2, [r3, #28]
  hgfxmmu.Init.CachePrefetch.CacheLock = GFXMMU_CACHE_LOCK_ENABLE;
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <MX_GFXMMU_Init+0x94>)
 80015fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001602:	621a      	str	r2, [r3, #32]
  hgfxmmu.Init.CachePrefetch.CacheLockBuffer = GFXMMU_CACHE_LOCK_BUFFER0;
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <MX_GFXMMU_Init+0x94>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	; 0x24
  hgfxmmu.Init.CachePrefetch.CacheForce = GFXMMU_CACHE_FORCE_ENABLE;
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <MX_GFXMMU_Init+0x94>)
 800160c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001610:	629a      	str	r2, [r3, #40]	; 0x28
  hgfxmmu.Init.CachePrefetch.OutterBufferability = GFXMMU_OUTTER_BUFFERABILITY_ENABLE;
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <MX_GFXMMU_Init+0x94>)
 8001614:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001618:	62da      	str	r2, [r3, #44]	; 0x2c
  hgfxmmu.Init.CachePrefetch.OutterCachability = GFXMMU_OUTTER_CACHABILITY_ENABLE;
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <MX_GFXMMU_Init+0x94>)
 800161c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001620:	631a      	str	r2, [r3, #48]	; 0x30
  hgfxmmu.Init.CachePrefetch.Prefetch = GFXMMU_PREFETCH_ENABLE;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <MX_GFXMMU_Init+0x94>)
 8001624:	2200      	movs	r2, #0
 8001626:	635a      	str	r2, [r3, #52]	; 0x34
  hgfxmmu.Init.Interrupts.Activation = ENABLE;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_GFXMMU_Init+0x94>)
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_GFXMMU_Init(&hgfxmmu) != HAL_OK)
 8001630:	480a      	ldr	r0, [pc, #40]	; (800165c <MX_GFXMMU_Init+0x94>)
 8001632:	f003 fdd3 	bl	80051dc <HAL_GFXMMU_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_GFXMMU_Init+0x78>
  {
    Error_Handler();
 800163c:	f000 ffae 	bl	800259c <Error_Handler>
  }
  if (HAL_GFXMMU_ConfigLut(&hgfxmmu, GFXMMU_LUT_FIRST, GFXMMU_LUT_SIZE, (uint32_t)gfxmmu_lut_config) != HAL_OK)
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MX_GFXMMU_Init+0x9c>)
 8001642:	2201      	movs	r2, #1
 8001644:	2100      	movs	r1, #0
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_GFXMMU_Init+0x94>)
 8001648:	f003 fe48 	bl	80052dc <HAL_GFXMMU_ConfigLut>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_GFXMMU_Init+0x8e>
  {
    Error_Handler();
 8001652:	f000 ffa3 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN GFXMMU_Init 2 */

  /* USER CODE END GFXMMU_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200001f0 	.word	0x200001f0
 8001660:	4002c000 	.word	0x4002c000
 8001664:	20000028 	.word	0x20000028

08001668 <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_GPU2D_Init+0x20>)
 800166e:	4a07      	ldr	r2, [pc, #28]	; (800168c <MX_GPU2D_Init+0x24>)
 8001670:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_GPU2D_Init+0x20>)
 8001674:	f004 f8a6 	bl	80057c4 <HAL_GPU2D_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 800167e:	f000 ff8d 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000238 	.word	0x20000238
 800168c:	4002f000 	.word	0x4002f000

08001690 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <MX_I2C1_Init+0x74>)
 8001696:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <MX_I2C1_Init+0x78>)
 8001698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_I2C1_Init+0x74>)
 800169c:	4a1b      	ldr	r2, [pc, #108]	; (800170c <MX_I2C1_Init+0x7c>)
 800169e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <MX_I2C1_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <MX_I2C1_Init+0x74>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <MX_I2C1_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <MX_I2C1_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <MX_I2C1_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_I2C1_Init+0x74>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_I2C1_Init+0x74>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ca:	480e      	ldr	r0, [pc, #56]	; (8001704 <MX_I2C1_Init+0x74>)
 80016cc:	f004 f8e5 	bl	800589a <HAL_I2C_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016d6:	f000 ff61 	bl	800259c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016da:	2100      	movs	r1, #0
 80016dc:	4809      	ldr	r0, [pc, #36]	; (8001704 <MX_I2C1_Init+0x74>)
 80016de:	f004 fe5d 	bl	800639c <HAL_I2CEx_ConfigAnalogFilter>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016e8:	f000 ff58 	bl	800259c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016ec:	2100      	movs	r1, #0
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_I2C1_Init+0x74>)
 80016f0:	f004 fe9f 	bl	8006432 <HAL_I2CEx_ConfigDigitalFilter>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016fa:	f000 ff4f 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000244 	.word	0x20000244
 8001708:	40005400 	.word	0x40005400
 800170c:	30909dec 	.word	0x30909dec

08001710 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <MX_I2C2_Init+0x74>)
 8001716:	4a1c      	ldr	r2, [pc, #112]	; (8001788 <MX_I2C2_Init+0x78>)
 8001718:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_I2C2_Init+0x74>)
 800171c:	4a1b      	ldr	r2, [pc, #108]	; (800178c <MX_I2C2_Init+0x7c>)
 800171e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <MX_I2C2_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_I2C2_Init+0x74>)
 8001728:	2201      	movs	r2, #1
 800172a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <MX_I2C2_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_I2C2_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_I2C2_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_I2C2_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_I2C2_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800174a:	480e      	ldr	r0, [pc, #56]	; (8001784 <MX_I2C2_Init+0x74>)
 800174c:	f004 f8a5 	bl	800589a <HAL_I2C_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001756:	f000 ff21 	bl	800259c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800175a:	2100      	movs	r1, #0
 800175c:	4809      	ldr	r0, [pc, #36]	; (8001784 <MX_I2C2_Init+0x74>)
 800175e:	f004 fe1d 	bl	800639c <HAL_I2CEx_ConfigAnalogFilter>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001768:	f000 ff18 	bl	800259c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800176c:	2100      	movs	r1, #0
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_I2C2_Init+0x74>)
 8001770:	f004 fe5f 	bl	8006432 <HAL_I2CEx_ConfigDigitalFilter>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800177a:	f000 ff0f 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000298 	.word	0x20000298
 8001788:	40005800 	.word	0x40005800
 800178c:	30909dec 	.word	0x30909dec

08001790 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <MX_I2C3_Init+0x74>)
 8001796:	4a1c      	ldr	r2, [pc, #112]	; (8001808 <MX_I2C3_Init+0x78>)
 8001798:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <MX_I2C3_Init+0x74>)
 800179c:	4a1b      	ldr	r2, [pc, #108]	; (800180c <MX_I2C3_Init+0x7c>)
 800179e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <MX_I2C3_Init+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <MX_I2C3_Init+0x74>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <MX_I2C3_Init+0x74>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <MX_I2C3_Init+0x74>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <MX_I2C3_Init+0x74>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_I2C3_Init+0x74>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <MX_I2C3_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017ca:	480e      	ldr	r0, [pc, #56]	; (8001804 <MX_I2C3_Init+0x74>)
 80017cc:	f004 f865 	bl	800589a <HAL_I2C_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80017d6:	f000 fee1 	bl	800259c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017da:	2100      	movs	r1, #0
 80017dc:	4809      	ldr	r0, [pc, #36]	; (8001804 <MX_I2C3_Init+0x74>)
 80017de:	f004 fddd 	bl	800639c <HAL_I2CEx_ConfigAnalogFilter>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80017e8:	f000 fed8 	bl	800259c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80017ec:	2100      	movs	r1, #0
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_I2C3_Init+0x74>)
 80017f0:	f004 fe1f 	bl	8006432 <HAL_I2CEx_ConfigDigitalFilter>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80017fa:	f000 fecf 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200002ec 	.word	0x200002ec
 8001808:	46002800 	.word	0x46002800
 800180c:	30909dec 	.word	0x30909dec

08001810 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <MX_I2C4_Init+0x74>)
 8001816:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <MX_I2C4_Init+0x78>)
 8001818:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30909DEC;
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <MX_I2C4_Init+0x74>)
 800181c:	4a1b      	ldr	r2, [pc, #108]	; (800188c <MX_I2C4_Init+0x7c>)
 800181e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <MX_I2C4_Init+0x74>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <MX_I2C4_Init+0x74>)
 8001828:	2201      	movs	r2, #1
 800182a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <MX_I2C4_Init+0x74>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <MX_I2C4_Init+0x74>)
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <MX_I2C4_Init+0x74>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <MX_I2C4_Init+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <MX_I2C4_Init+0x74>)
 8001846:	2200      	movs	r2, #0
 8001848:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800184a:	480e      	ldr	r0, [pc, #56]	; (8001884 <MX_I2C4_Init+0x74>)
 800184c:	f004 f825 	bl	800589a <HAL_I2C_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001856:	f000 fea1 	bl	800259c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800185a:	2100      	movs	r1, #0
 800185c:	4809      	ldr	r0, [pc, #36]	; (8001884 <MX_I2C4_Init+0x74>)
 800185e:	f004 fd9d 	bl	800639c <HAL_I2CEx_ConfigAnalogFilter>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001868:	f000 fe98 	bl	800259c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800186c:	2100      	movs	r1, #0
 800186e:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_I2C4_Init+0x74>)
 8001870:	f004 fddf 	bl	8006432 <HAL_I2CEx_ConfigDigitalFilter>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800187a:	f000 fe8f 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000340 	.word	0x20000340
 8001888:	40008400 	.word	0x40008400
 800188c:	30909dec 	.word	0x30909dec

08001890 <MX_I2C6_Init>:
  * @brief I2C6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C6_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C6_Init 0 */

  /* USER CODE BEGIN I2C6_Init 1 */

  /* USER CODE END I2C6_Init 1 */
  hi2c6.Instance = I2C6;
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <MX_I2C6_Init+0x74>)
 8001896:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <MX_I2C6_Init+0x78>)
 8001898:	601a      	str	r2, [r3, #0]
  hi2c6.Init.Timing = 0x30909DEC;
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <MX_I2C6_Init+0x74>)
 800189c:	4a1b      	ldr	r2, [pc, #108]	; (800190c <MX_I2C6_Init+0x7c>)
 800189e:	605a      	str	r2, [r3, #4]
  hi2c6.Init.OwnAddress1 = 0;
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <MX_I2C6_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  hi2c6.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <MX_I2C6_Init+0x74>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	60da      	str	r2, [r3, #12]
  hi2c6.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <MX_I2C6_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  hi2c6.Init.OwnAddress2 = 0;
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <MX_I2C6_Init+0x74>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  hi2c6.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <MX_I2C6_Init+0x74>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  hi2c6.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_I2C6_Init+0x74>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	61da      	str	r2, [r3, #28]
  hi2c6.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_I2C6_Init+0x74>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c6) != HAL_OK)
 80018ca:	480e      	ldr	r0, [pc, #56]	; (8001904 <MX_I2C6_Init+0x74>)
 80018cc:	f003 ffe5 	bl	800589a <HAL_I2C_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_I2C6_Init+0x4a>
  {
    Error_Handler();
 80018d6:	f000 fe61 	bl	800259c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c6, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018da:	2100      	movs	r1, #0
 80018dc:	4809      	ldr	r0, [pc, #36]	; (8001904 <MX_I2C6_Init+0x74>)
 80018de:	f004 fd5d 	bl	800639c <HAL_I2CEx_ConfigAnalogFilter>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_I2C6_Init+0x5c>
  {
    Error_Handler();
 80018e8:	f000 fe58 	bl	800259c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c6, 0) != HAL_OK)
 80018ec:	2100      	movs	r1, #0
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_I2C6_Init+0x74>)
 80018f0:	f004 fd9f 	bl	8006432 <HAL_I2CEx_ConfigDigitalFilter>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_I2C6_Init+0x6e>
  {
    Error_Handler();
 80018fa:	f000 fe4f 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN I2C6_Init 2 */

  /* USER CODE END I2C6_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000394 	.word	0x20000394
 8001908:	40009c00 	.word	0x40009c00
 800190c:	30909dec 	.word	0x30909dec

08001910 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8001924:	f004 fde2 	bl	80064ec <HAL_ICACHE_Disable>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800192e:	f000 fe35 	bl	800259c <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 8001932:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001936:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8001938:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800193c:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 800193e:	2301      	movs	r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	4619      	mov	r1, r3
 800194e:	2000      	movs	r0, #0
 8001950:	f004 fdfc 	bl	800654c <HAL_ICACHE_EnableRemapRegion>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 800195a:	f000 fe1f 	bl	800259c <Error_Handler>
  }

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 800195e:	f004 fdb5 	bl	80064cc <HAL_ICACHE_Enable>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_ICACHE_Init+0x5c>
  {
    Error_Handler();
 8001968:	f000 fe18 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001978:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <MX_LPUART1_UART_Init+0x8c>)
 800197a:	4a22      	ldr	r2, [pc, #136]	; (8001a04 <MX_LPUART1_UART_Init+0x90>)
 800197c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <MX_LPUART1_UART_Init+0x8c>)
 8001980:	4a21      	ldr	r2, [pc, #132]	; (8001a08 <MX_LPUART1_UART_Init+0x94>)
 8001982:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001984:	4b1e      	ldr	r3, [pc, #120]	; (8001a00 <MX_LPUART1_UART_Init+0x8c>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800198a:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <MX_LPUART1_UART_Init+0x8c>)
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <MX_LPUART1_UART_Init+0x8c>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <MX_LPUART1_UART_Init+0x8c>)
 8001998:	220c      	movs	r2, #12
 800199a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <MX_LPUART1_UART_Init+0x8c>)
 800199e:	f44f 7240 	mov.w	r2, #768	; 0x300
 80019a2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <MX_LPUART1_UART_Init+0x8c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <MX_LPUART1_UART_Init+0x8c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <MX_LPUART1_UART_Init+0x8c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80019b6:	4812      	ldr	r0, [pc, #72]	; (8001a00 <MX_LPUART1_UART_Init+0x8c>)
 80019b8:	f00b fec6 	bl	800d748 <HAL_UART_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80019c2:	f000 fdeb 	bl	800259c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c6:	2100      	movs	r1, #0
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <MX_LPUART1_UART_Init+0x8c>)
 80019ca:	f00c fb0d 	bl	800dfe8 <HAL_UARTEx_SetTxFifoThreshold>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80019d4:	f000 fde2 	bl	800259c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d8:	2100      	movs	r1, #0
 80019da:	4809      	ldr	r0, [pc, #36]	; (8001a00 <MX_LPUART1_UART_Init+0x8c>)
 80019dc:	f00c fb42 	bl	800e064 <HAL_UARTEx_SetRxFifoThreshold>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80019e6:	f000 fdd9 	bl	800259c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_LPUART1_UART_Init+0x8c>)
 80019ec:	f00c fac3 	bl	800df76 <HAL_UARTEx_DisableFifoMode>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80019f6:	f000 fdd1 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200003e8 	.word	0x200003e8
 8001a04:	46002400 	.word	0x46002400
 8001a08:	00033324 	.word	0x00033324

08001a0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a10:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <MX_USART1_UART_Init+0x90>)
 8001a12:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <MX_USART1_UART_Init+0x94>)
 8001a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a16:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <MX_USART1_UART_Init+0x90>)
 8001a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1e:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <MX_USART1_UART_Init+0x90>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <MX_USART1_UART_Init+0x90>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <MX_USART1_UART_Init+0x90>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a30:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <MX_USART1_UART_Init+0x90>)
 8001a32:	220c      	movs	r2, #12
 8001a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <MX_USART1_UART_Init+0x90>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a3c:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <MX_USART1_UART_Init+0x90>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <MX_USART1_UART_Init+0x90>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <MX_USART1_UART_Init+0x90>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <MX_USART1_UART_Init+0x90>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a54:	4811      	ldr	r0, [pc, #68]	; (8001a9c <MX_USART1_UART_Init+0x90>)
 8001a56:	f00b fe77 	bl	800d748 <HAL_UART_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a60:	f000 fd9c 	bl	800259c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a64:	2100      	movs	r1, #0
 8001a66:	480d      	ldr	r0, [pc, #52]	; (8001a9c <MX_USART1_UART_Init+0x90>)
 8001a68:	f00c fabe 	bl	800dfe8 <HAL_UARTEx_SetTxFifoThreshold>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a72:	f000 fd93 	bl	800259c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a76:	2100      	movs	r1, #0
 8001a78:	4808      	ldr	r0, [pc, #32]	; (8001a9c <MX_USART1_UART_Init+0x90>)
 8001a7a:	f00c faf3 	bl	800e064 <HAL_UARTEx_SetRxFifoThreshold>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a84:	f000 fd8a 	bl	800259c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a88:	4804      	ldr	r0, [pc, #16]	; (8001a9c <MX_USART1_UART_Init+0x90>)
 8001a8a:	f00c fa74 	bl	800df76 <HAL_UARTEx_DisableFifoMode>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a94:	f000 fd82 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	2000047c 	.word	0x2000047c
 8001aa0:	40013800 	.word	0x40013800

08001aa4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001aa8:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <MX_USART6_UART_Init+0x90>)
 8001aaa:	4a23      	ldr	r2, [pc, #140]	; (8001b38 <MX_USART6_UART_Init+0x94>)
 8001aac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001aae:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <MX_USART6_UART_Init+0x90>)
 8001ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <MX_USART6_UART_Init+0x90>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001abc:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <MX_USART6_UART_Init+0x90>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <MX_USART6_UART_Init+0x90>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <MX_USART6_UART_Init+0x90>)
 8001aca:	220c      	movs	r2, #12
 8001acc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <MX_USART6_UART_Init+0x90>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <MX_USART6_UART_Init+0x90>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <MX_USART6_UART_Init+0x90>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <MX_USART6_UART_Init+0x90>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <MX_USART6_UART_Init+0x90>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001aec:	4811      	ldr	r0, [pc, #68]	; (8001b34 <MX_USART6_UART_Init+0x90>)
 8001aee:	f00b fe2b 	bl	800d748 <HAL_UART_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001af8:	f000 fd50 	bl	800259c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001afc:	2100      	movs	r1, #0
 8001afe:	480d      	ldr	r0, [pc, #52]	; (8001b34 <MX_USART6_UART_Init+0x90>)
 8001b00:	f00c fa72 	bl	800dfe8 <HAL_UARTEx_SetTxFifoThreshold>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001b0a:	f000 fd47 	bl	800259c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4808      	ldr	r0, [pc, #32]	; (8001b34 <MX_USART6_UART_Init+0x90>)
 8001b12:	f00c faa7 	bl	800e064 <HAL_UARTEx_SetRxFifoThreshold>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001b1c:	f000 fd3e 	bl	800259c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001b20:	4804      	ldr	r0, [pc, #16]	; (8001b34 <MX_USART6_UART_Init+0x90>)
 8001b22:	f00c fa28 	bl	800df76 <HAL_UARTEx_DisableFifoMode>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001b2c:	f000 fd36 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000510 	.word	0x20000510
 8001b38:	40006400 	.word	0x40006400

08001b3c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08e      	sub	sp, #56	; 0x38
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	2234      	movs	r2, #52	; 0x34
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f00c fb36 	bl	800e1ba <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b50:	4a3b      	ldr	r2, [pc, #236]	; (8001c40 <MX_LTDC_Init+0x104>)
 8001b52:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8001b54:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b5a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8001b5c:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b62:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b64:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b6a:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001b70:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8001b76:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 0;
 8001b7c:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 0;
 8001b82:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 416;
 8001b88:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b8a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 416;
 8001b90:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b92:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 416;
 8001b98:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001b9a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 416;
 8001ba0:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001ba2:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001ba8:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001bb8:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001bc0:	481e      	ldr	r0, [pc, #120]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001bc2:	f004 fd15 	bl	80065f0 <HAL_LTDC_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8001bcc:	f000 fce6 	bl	800259c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 416;
 8001bd4:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001bd8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 416;
 8001bde:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001be2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001be8:	23ff      	movs	r3, #255	; 0xff
 8001bea:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = GFXMMU_VIRTUAL_BUFFER0_BASE;
 8001bfa:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 416;
 8001c00:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 416;
 8001c06:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	2200      	movs	r2, #0
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_LTDC_Init+0x100>)
 8001c26:	f004 fe75 	bl	8006914 <HAL_LTDC_ConfigLayer>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8001c30:	f000 fcb4 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	3738      	adds	r7, #56	; 0x38
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	200005a4 	.word	0x200005a4
 8001c40:	40016800 	.word	0x40016800

08001c44 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08c      	sub	sp, #48	; 0x30
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001c4a:	f107 0318 	add.w	r3, r7, #24
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001c72:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001c74:	4a3d      	ldr	r2, [pc, #244]	; (8001d6c <MX_OCTOSPI1_Init+0x128>)
 8001c76:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001c78:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001c7e:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8001c84:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001c86:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c8a:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8001c8c:	4b36      	ldr	r3, [pc, #216]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001c8e:	221a      	movs	r2, #26
 8001c90:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001c92:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001c98:	4b33      	ldr	r3, [pc, #204]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001c9e:	4b32      	ldr	r3, [pc, #200]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_64_BYTES;
 8001ca4:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001ca6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001caa:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 16;
 8001cac:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001cae:	2210      	movs	r2, #16
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001cc4:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 16;
 8001cca:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001ccc:	2210      	movs	r2, #16
 8001cce:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8001cd0:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001cd6:	4824      	ldr	r0, [pc, #144]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001cd8:	f005 f99e 	bl	8007018 <HAL_OSPI_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_OCTOSPI1_Init+0xa2>
  {
    Error_Handler();
 8001ce2:	f000 fc5b 	bl	800259c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 1;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <MX_OCTOSPI1_Init+0x12c>)
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001cf6:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <MX_OCTOSPI1_Init+0x130>)
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cfe:	f107 0318 	add.w	r3, r7, #24
 8001d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d06:	4619      	mov	r1, r3
 8001d08:	4817      	ldr	r0, [pc, #92]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001d0a:	f005 fb05 	bl	8007318 <HAL_OSPIM_Config>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_OCTOSPI1_Init+0xd4>
  {
    Error_Handler();
 8001d14:	f000 fc42 	bl	800259c <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001d20:	2302      	movs	r3, #2
 8001d22:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi1, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d28:	f107 0308 	add.w	r3, r7, #8
 8001d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d30:	4619      	mov	r1, r3
 8001d32:	480d      	ldr	r0, [pc, #52]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001d34:	f005 fa2c 	bl	8007190 <HAL_OSPI_HyperbusCfg>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_OCTOSPI1_Init+0xfe>
  {
    Error_Handler();
 8001d3e:	f000 fc2d 	bl	800259c <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001d4a:	463b      	mov	r3, r7
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4806      	ldr	r0, [pc, #24]	; (8001d68 <MX_OCTOSPI1_Init+0x124>)
 8001d50:	f006 f8ce 	bl	8007ef0 <HAL_OSPI_DLYB_SetConfig>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_OCTOSPI1_Init+0x11a>
  {
    Error_Handler();
 8001d5a:	f000 fc1f 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	3730      	adds	r7, #48	; 0x30
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2000064c 	.word	0x2000064c
 8001d6c:	420d1400 	.word	0x420d1400
 8001d70:	00010002 	.word	0x00010002
 8001d74:	01000002 	.word	0x01000002

08001d78 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08c      	sub	sp, #48	; 0x30
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001d7e:	f107 0318 	add.w	r3, r7, #24
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]
 8001d8e:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8001d90:	f107 0308 	add.w	r3, r7, #8
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001d9e:	463b      	mov	r3, r7
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8001da6:	4b3c      	ldr	r3, [pc, #240]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001da8:	4a3c      	ldr	r2, [pc, #240]	; (8001e9c <MX_OCTOSPI2_Init+0x124>)
 8001daa:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8001dac:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001db2:	4b39      	ldr	r3, [pc, #228]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8001db8:	4b37      	ldr	r3, [pc, #220]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001dba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dbe:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8001dc0:	4b35      	ldr	r3, [pc, #212]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8001dc6:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001dcc:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001dd2:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001dd8:	4b2f      	ldr	r3, [pc, #188]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 8001dde:	4b2e      	ldr	r3, [pc, #184]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001de4:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001dea:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8001df0:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001df6:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001df8:	2208      	movs	r2, #8
 8001dfa:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.MaxTran = 0;
 8001dfc:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.Refresh = 0;
 8001e02:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8001e08:	4823      	ldr	r0, [pc, #140]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001e0a:	f005 f905 	bl	8007018 <HAL_OSPI_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_OCTOSPI2_Init+0xa0>
  {
    Error_Handler();
 8001e14:	f000 fbc2 	bl	800259c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 2;
 8001e20:	2302      	movs	r3, #2
 8001e22:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001e24:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <MX_OCTOSPI2_Init+0x128>)
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <MX_OCTOSPI2_Init+0x12c>)
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e30:	f107 0318 	add.w	r3, r7, #24
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4817      	ldr	r0, [pc, #92]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001e3c:	f005 fa6c 	bl	8007318 <HAL_OSPIM_Config>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_OCTOSPI2_Init+0xd2>
  {
    Error_Handler();
 8001e46:	f000 fba9 	bl	800259c <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001e52:	2302      	movs	r3, #2
 8001e54:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e5a:	f107 0308 	add.w	r3, r7, #8
 8001e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e62:	4619      	mov	r1, r3
 8001e64:	480c      	ldr	r0, [pc, #48]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001e66:	f005 f993 	bl	8007190 <HAL_OSPI_HyperbusCfg>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_OCTOSPI2_Init+0xfc>
  {
    Error_Handler();
 8001e70:	f000 fb94 	bl	800259c <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4805      	ldr	r0, [pc, #20]	; (8001e98 <MX_OCTOSPI2_Init+0x120>)
 8001e82:	f006 f835 	bl	8007ef0 <HAL_OSPI_DLYB_SetConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_OCTOSPI2_Init+0x118>
  {
    Error_Handler();
 8001e8c:	f000 fb86 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8001e90:	bf00      	nop
 8001e92:	3730      	adds	r7, #48	; 0x30
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	200006a8 	.word	0x200006a8
 8001e9c:	420d2400 	.word	0x420d2400
 8001ea0:	00010002 	.word	0x00010002
 8001ea4:	01000002 	.word	0x01000002

08001ea8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08e      	sub	sp, #56	; 0x38
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	60da      	str	r2, [r3, #12]
 8001ebc:	611a      	str	r2, [r3, #16]
 8001ebe:	615a      	str	r2, [r3, #20]
 8001ec0:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
 8001ed0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ed6:	4b33      	ldr	r3, [pc, #204]	; (8001fa4 <MX_RTC_Init+0xfc>)
 8001ed8:	4a33      	ldr	r2, [pc, #204]	; (8001fa8 <MX_RTC_Init+0x100>)
 8001eda:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001edc:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <MX_RTC_Init+0xfc>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ee2:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <MX_RTC_Init+0xfc>)
 8001ee4:	227f      	movs	r2, #127	; 0x7f
 8001ee6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ee8:	4b2e      	ldr	r3, [pc, #184]	; (8001fa4 <MX_RTC_Init+0xfc>)
 8001eea:	22ff      	movs	r2, #255	; 0xff
 8001eec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001eee:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <MX_RTC_Init+0xfc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <MX_RTC_Init+0xfc>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001efa:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <MX_RTC_Init+0xfc>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f00:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <MX_RTC_Init+0xfc>)
 8001f02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f06:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001f08:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <MX_RTC_Init+0xfc>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001f0e:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <MX_RTC_Init+0xfc>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f14:	4823      	ldr	r0, [pc, #140]	; (8001fa4 <MX_RTC_Init+0xfc>)
 8001f16:	f00a fc4d 	bl	800c7b4 <HAL_RTC_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001f20:	f000 fb3c 	bl	800259c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	4619      	mov	r1, r3
 8001f3a:	481a      	ldr	r0, [pc, #104]	; (8001fa4 <MX_RTC_Init+0xfc>)
 8001f3c:	f00a feaa 	bl	800cc94 <HAL_RTCEx_PrivilegeModeSet>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001f46:	f000 fb29 	bl	800259c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001f5e:	f107 0308 	add.w	r3, r7, #8
 8001f62:	2201      	movs	r2, #1
 8001f64:	4619      	mov	r1, r3
 8001f66:	480f      	ldr	r0, [pc, #60]	; (8001fa4 <MX_RTC_Init+0xfc>)
 8001f68:	f00a fca6 	bl	800c8b8 <HAL_RTC_SetTime>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001f72:	f000 fb13 	bl	800259c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f76:	2301      	movs	r3, #1
 8001f78:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	2201      	movs	r2, #1
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4805      	ldr	r0, [pc, #20]	; (8001fa4 <MX_RTC_Init+0xfc>)
 8001f8e:	f00a fd2f 	bl	800c9f0 <HAL_RTC_SetDate>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8001f98:	f000 fb00 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f9c:	bf00      	nop
 8001f9e:	3738      	adds	r7, #56	; 0x38
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000704 	.word	0x20000704
 8001fa8:	46007800 	.word	0x46007800

08001fac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fbc:	4b30      	ldr	r3, [pc, #192]	; (8002080 <MX_SPI1_Init+0xd4>)
 8001fbe:	4a31      	ldr	r2, [pc, #196]	; (8002084 <MX_SPI1_Init+0xd8>)
 8001fc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fc2:	4b2f      	ldr	r3, [pc, #188]	; (8002080 <MX_SPI1_Init+0xd4>)
 8001fc4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001fc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fca:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <MX_SPI1_Init+0xd4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001fd0:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <MX_SPI1_Init+0xd4>)
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fd6:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <MX_SPI1_Init+0xd4>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fdc:	4b28      	ldr	r3, [pc, #160]	; (8002080 <MX_SPI1_Init+0xd4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001fe2:	4b27      	ldr	r3, [pc, #156]	; (8002080 <MX_SPI1_Init+0xd4>)
 8001fe4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001fe8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fea:	4b25      	ldr	r3, [pc, #148]	; (8002080 <MX_SPI1_Init+0xd4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ff0:	4b23      	ldr	r3, [pc, #140]	; (8002080 <MX_SPI1_Init+0xd4>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ff6:	4b22      	ldr	r3, [pc, #136]	; (8002080 <MX_SPI1_Init+0xd4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ffc:	4b20      	ldr	r3, [pc, #128]	; (8002080 <MX_SPI1_Init+0xd4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8002002:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <MX_SPI1_Init+0xd4>)
 8002004:	2207      	movs	r2, #7
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002008:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <MX_SPI1_Init+0xd4>)
 800200a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800200e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <MX_SPI1_Init+0xd4>)
 8002012:	2200      	movs	r2, #0
 8002014:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <MX_SPI1_Init+0xd4>)
 8002018:	2200      	movs	r2, #0
 800201a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800201c:	4b18      	ldr	r3, [pc, #96]	; (8002080 <MX_SPI1_Init+0xd4>)
 800201e:	2200      	movs	r2, #0
 8002020:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <MX_SPI1_Init+0xd4>)
 8002024:	2200      	movs	r2, #0
 8002026:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002028:	4b15      	ldr	r3, [pc, #84]	; (8002080 <MX_SPI1_Init+0xd4>)
 800202a:	2200      	movs	r2, #0
 800202c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800202e:	4b14      	ldr	r3, [pc, #80]	; (8002080 <MX_SPI1_Init+0xd4>)
 8002030:	2200      	movs	r2, #0
 8002032:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <MX_SPI1_Init+0xd4>)
 8002036:	2200      	movs	r2, #0
 8002038:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <MX_SPI1_Init+0xd4>)
 800203c:	2200      	movs	r2, #0
 800203e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <MX_SPI1_Init+0xd4>)
 8002042:	2200      	movs	r2, #0
 8002044:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002046:	480e      	ldr	r0, [pc, #56]	; (8002080 <MX_SPI1_Init+0xd4>)
 8002048:	f00a fe52 	bl	800ccf0 <HAL_SPI_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8002052:	f000 faa3 	bl	800259c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800205a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800205e:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	4619      	mov	r1, r3
 8002068:	4805      	ldr	r0, [pc, #20]	; (8002080 <MX_SPI1_Init+0xd4>)
 800206a:	f00a ff72 	bl	800cf52 <HAL_SPIEx_SetConfigAutonomousMode>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8002074:	f000 fa92 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002078:	bf00      	nop
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000734 	.word	0x20000734
 8002084:	40013000 	.word	0x40013000

08002088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b090      	sub	sp, #64	; 0x40
 800208c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800209e:	4bbf      	ldr	r3, [pc, #764]	; (800239c <MX_GPIO_Init+0x314>)
 80020a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020a4:	4abd      	ldr	r2, [pc, #756]	; (800239c <MX_GPIO_Init+0x314>)
 80020a6:	f043 0302 	orr.w	r3, r3, #2
 80020aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020ae:	4bbb      	ldr	r3, [pc, #748]	; (800239c <MX_GPIO_Init+0x314>)
 80020b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020bc:	4bb7      	ldr	r3, [pc, #732]	; (800239c <MX_GPIO_Init+0x314>)
 80020be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020c2:	4ab6      	ldr	r2, [pc, #728]	; (800239c <MX_GPIO_Init+0x314>)
 80020c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020cc:	4bb3      	ldr	r3, [pc, #716]	; (800239c <MX_GPIO_Init+0x314>)
 80020ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020da:	4bb0      	ldr	r3, [pc, #704]	; (800239c <MX_GPIO_Init+0x314>)
 80020dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020e0:	4aae      	ldr	r2, [pc, #696]	; (800239c <MX_GPIO_Init+0x314>)
 80020e2:	f043 0308 	orr.w	r3, r3, #8
 80020e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020ea:	4bac      	ldr	r3, [pc, #688]	; (800239c <MX_GPIO_Init+0x314>)
 80020ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	623b      	str	r3, [r7, #32]
 80020f6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f8:	4ba8      	ldr	r3, [pc, #672]	; (800239c <MX_GPIO_Init+0x314>)
 80020fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020fe:	4aa7      	ldr	r2, [pc, #668]	; (800239c <MX_GPIO_Init+0x314>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002108:	4ba4      	ldr	r3, [pc, #656]	; (800239c <MX_GPIO_Init+0x314>)
 800210a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002116:	4ba1      	ldr	r3, [pc, #644]	; (800239c <MX_GPIO_Init+0x314>)
 8002118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800211c:	4a9f      	ldr	r2, [pc, #636]	; (800239c <MX_GPIO_Init+0x314>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002126:	4b9d      	ldr	r3, [pc, #628]	; (800239c <MX_GPIO_Init+0x314>)
 8002128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002134:	4b99      	ldr	r3, [pc, #612]	; (800239c <MX_GPIO_Init+0x314>)
 8002136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800213a:	4a98      	ldr	r2, [pc, #608]	; (800239c <MX_GPIO_Init+0x314>)
 800213c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002140:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002144:	4b95      	ldr	r3, [pc, #596]	; (800239c <MX_GPIO_Init+0x314>)
 8002146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800214a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002152:	4b92      	ldr	r3, [pc, #584]	; (800239c <MX_GPIO_Init+0x314>)
 8002154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002158:	4a90      	ldr	r2, [pc, #576]	; (800239c <MX_GPIO_Init+0x314>)
 800215a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002162:	4b8e      	ldr	r3, [pc, #568]	; (800239c <MX_GPIO_Init+0x314>)
 8002164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002170:	4b8a      	ldr	r3, [pc, #552]	; (800239c <MX_GPIO_Init+0x314>)
 8002172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002176:	4a89      	ldr	r2, [pc, #548]	; (800239c <MX_GPIO_Init+0x314>)
 8002178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002180:	4b86      	ldr	r3, [pc, #536]	; (800239c <MX_GPIO_Init+0x314>)
 8002182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800218e:	4b83      	ldr	r3, [pc, #524]	; (800239c <MX_GPIO_Init+0x314>)
 8002190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002194:	4a81      	ldr	r2, [pc, #516]	; (800239c <MX_GPIO_Init+0x314>)
 8002196:	f043 0320 	orr.w	r3, r3, #32
 800219a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800219e:	4b7f      	ldr	r3, [pc, #508]	; (800239c <MX_GPIO_Init+0x314>)
 80021a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ac:	4b7b      	ldr	r3, [pc, #492]	; (800239c <MX_GPIO_Init+0x314>)
 80021ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021b2:	4a7a      	ldr	r2, [pc, #488]	; (800239c <MX_GPIO_Init+0x314>)
 80021b4:	f043 0310 	orr.w	r3, r3, #16
 80021b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021bc:	4b77      	ldr	r3, [pc, #476]	; (800239c <MX_GPIO_Init+0x314>)
 80021be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, GPIO_PIN_RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021d0:	4873      	ldr	r0, [pc, #460]	; (80023a0 <MX_GPIO_Init+0x318>)
 80021d2:	f003 fadf 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SDMMC_EN_Pin|LRA_EN_Pin, GPIO_PIN_RESET);
 80021d6:	2200      	movs	r2, #0
 80021d8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80021dc:	4871      	ldr	r0, [pc, #452]	; (80023a4 <MX_GPIO_Init+0x31c>)
 80021de:	f003 fad9 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO3_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 80021e2:	2200      	movs	r2, #0
 80021e4:	f248 0120 	movw	r1, #32800	; 0x8020
 80021e8:	486f      	ldr	r0, [pc, #444]	; (80023a8 <MX_GPIO_Init+0x320>)
 80021ea:	f003 fad3 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GNSS_RST_Pin|TP_RST_Pin|GNSS_WAKEUP_Pin, GPIO_PIN_RESET);
 80021ee:	2200      	movs	r2, #0
 80021f0:	21c8      	movs	r1, #200	; 0xc8
 80021f2:	486e      	ldr	r0, [pc, #440]	; (80023ac <MX_GPIO_Init+0x324>)
 80021f4:	f003 face 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_RST_GPIO_Port, FLASH_RST_Pin, GPIO_PIN_RESET);
 80021f8:	2200      	movs	r2, #0
 80021fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021fe:	486c      	ldr	r0, [pc, #432]	; (80023b0 <MX_GPIO_Init+0x328>)
 8002200:	f003 fac8 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, GPIO_PIN_RESET);
 8002204:	2200      	movs	r2, #0
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	486a      	ldr	r0, [pc, #424]	; (80023b4 <MX_GPIO_Init+0x32c>)
 800220a:	f003 fac3 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 800220e:	2200      	movs	r2, #0
 8002210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002214:	4868      	ldr	r0, [pc, #416]	; (80023b8 <MX_GPIO_Init+0x330>)
 8002216:	f003 fabd 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPLAY_SWIRE_IN_Pin DISPLAY_SWIRE_OUT_Pin */
  GPIO_InitStruct.Pin = DISPLAY_SWIRE_IN_Pin|DISPLAY_SWIRE_OUT_Pin;
 800221a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002220:	2300      	movs	r3, #0
 8002222:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800222c:	4619      	mov	r1, r3
 800222e:	485c      	ldr	r0, [pc, #368]	; (80023a0 <MX_GPIO_Init+0x318>)
 8002230:	f003 f8d8 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AVDDEN_Pin */
  GPIO_InitStruct.Pin = AVDDEN_Pin;
 8002234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223a:	2301      	movs	r3, #1
 800223c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800223e:	2302      	movs	r3, #2
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(AVDDEN_GPIO_Port, &GPIO_InitStruct);
 8002246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800224a:	4619      	mov	r1, r3
 800224c:	4854      	ldr	r0, [pc, #336]	; (80023a0 <MX_GPIO_Init+0x318>)
 800224e:	f003 f8c9 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_EN_Pin */
  GPIO_InitStruct.Pin = SDMMC_EN_Pin;
 8002252:	2310      	movs	r3, #16
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002256:	2301      	movs	r3, #1
 8002258:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SDMMC_EN_GPIO_Port, &GPIO_InitStruct);
 8002262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002266:	4619      	mov	r1, r3
 8002268:	484e      	ldr	r0, [pc, #312]	; (80023a4 <MX_GPIO_Init+0x31c>)
 800226a:	f003 f8bb 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_CD_Pin PWR_INT_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|PWR_INT_Pin;
 800226e:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002274:	2300      	movs	r3, #0
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002278:	2301      	movs	r3, #1
 800227a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800227c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002280:	4619      	mov	r1, r3
 8002282:	4848      	ldr	r0, [pc, #288]	; (80023a4 <MX_GPIO_Init+0x31c>)
 8002284:	f003 f8ae 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC8 PC11 PC12
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
 8002288:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002296:	2302      	movs	r3, #2
 8002298:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800229a:	230c      	movs	r3, #12
 800229c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800229e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022a2:	4619      	mov	r1, r3
 80022a4:	4845      	ldr	r0, [pc, #276]	; (80023bc <MX_GPIO_Init+0x334>)
 80022a6:	f003 f89d 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|PWR_ENCHG_Pin;
 80022aa:	f248 0320 	movw	r3, #32800	; 0x8020
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022b4:	2302      	movs	r3, #2
 80022b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022c0:	4619      	mov	r1, r3
 80022c2:	4839      	ldr	r0, [pc, #228]	; (80023a8 <MX_GPIO_Init+0x320>)
 80022c4:	f003 f88e 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022c8:	2304      	movs	r3, #4
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022d4:	2302      	movs	r3, #2
 80022d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80022d8:	230c      	movs	r3, #12
 80022da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022e0:	4619      	mov	r1, r3
 80022e2:	4830      	ldr	r0, [pc, #192]	; (80023a4 <MX_GPIO_Init+0x31c>)
 80022e4:	f003 f87e 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80022e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022fe:	4619      	mov	r1, r3
 8002300:	482f      	ldr	r0, [pc, #188]	; (80023c0 <MX_GPIO_Init+0x338>)
 8002302:	f003 f86f 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT2_Pin */
  GPIO_InitStruct.Pin = BT_INT2_Pin;
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230a:	2300      	movs	r3, #0
 800230c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800230e:	2302      	movs	r3, #2
 8002310:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BT_INT2_GPIO_Port, &GPIO_InitStruct);
 8002312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002316:	4619      	mov	r1, r3
 8002318:	4828      	ldr	r0, [pc, #160]	; (80023bc <MX_GPIO_Init+0x334>)
 800231a:	f003 f863 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800231e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800232c:	2302      	movs	r3, #2
 800232e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8002330:	2308      	movs	r3, #8
 8002332:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002334:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002338:	4619      	mov	r1, r3
 800233a:	481b      	ldr	r0, [pc, #108]	; (80023a8 <MX_GPIO_Init+0x320>)
 800233c:	f003 f852 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_Pin GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO1_Pin;
 8002340:	2303      	movs	r3, #3
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002344:	2300      	movs	r3, #0
 8002346:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002348:	2302      	movs	r3, #2
 800234a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800234c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002350:	4619      	mov	r1, r3
 8002352:	4814      	ldr	r0, [pc, #80]	; (80023a4 <MX_GPIO_Init+0x31c>)
 8002354:	f003 f846 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT1_Pin */
  GPIO_InitStruct.Pin = BT_INT1_Pin;
 8002358:	2340      	movs	r3, #64	; 0x40
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <MX_GPIO_Init+0x33c>)
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002360:	2302      	movs	r3, #2
 8002362:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BT_INT1_GPIO_Port, &GPIO_InitStruct);
 8002364:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002368:	4619      	mov	r1, r3
 800236a:	4814      	ldr	r0, [pc, #80]	; (80023bc <MX_GPIO_Init+0x334>)
 800236c:	f003 f83a 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin|TP_RST_Pin;
 8002370:	2388      	movs	r3, #136	; 0x88
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002374:	2301      	movs	r3, #1
 8002376:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002378:	2301      	movs	r3, #1
 800237a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002384:	4619      	mov	r1, r3
 8002386:	4809      	ldr	r0, [pc, #36]	; (80023ac <MX_GPIO_Init+0x324>)
 8002388:	f003 f82c 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_PPS_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin;
 800238c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <MX_GPIO_Init+0x33c>)
 8002394:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	637b      	str	r3, [r7, #52]	; 0x34
 800239a:	e015      	b.n	80023c8 <MX_GPIO_Init+0x340>
 800239c:	46020c00 	.word	0x46020c00
 80023a0:	42021800 	.word	0x42021800
 80023a4:	42020c00 	.word	0x42020c00
 80023a8:	42020400 	.word	0x42020400
 80023ac:	42022400 	.word	0x42022400
 80023b0:	42022000 	.word	0x42022000
 80023b4:	42021400 	.word	0x42021400
 80023b8:	42021000 	.word	0x42021000
 80023bc:	42020800 	.word	0x42020800
 80023c0:	42020000 	.word	0x42020000
 80023c4:	10110000 	.word	0x10110000
  HAL_GPIO_Init(GNSS_PPS_GPIO_Port, &GPIO_InitStruct);
 80023c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023cc:	4619      	mov	r1, r3
 80023ce:	4860      	ldr	r0, [pc, #384]	; (8002550 <MX_GPIO_Init+0x4c8>)
 80023d0:	f003 f808 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_WAKEUP_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin;
 80023d4:	2340      	movs	r3, #64	; 0x40
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d8:	2301      	movs	r3, #1
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GNSS_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80023e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e8:	4619      	mov	r1, r3
 80023ea:	485a      	ldr	r0, [pc, #360]	; (8002554 <MX_GPIO_Init+0x4cc>)
 80023ec:	f002 fffa 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 80023f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023f6:	4b58      	ldr	r3, [pc, #352]	; (8002558 <MX_GPIO_Init+0x4d0>)
 80023f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023fa:	2301      	movs	r3, #1
 80023fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 80023fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002402:	4619      	mov	r1, r3
 8002404:	4853      	ldr	r0, [pc, #332]	; (8002554 <MX_GPIO_Init+0x4cc>)
 8002406:	f002 ffed 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RST_Pin */
  GPIO_InitStruct.Pin = FLASH_RST_Pin;
 800240a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002410:	2301      	movs	r3, #1
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002414:	2301      	movs	r3, #1
 8002416:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FLASH_RST_GPIO_Port, &GPIO_InitStruct);
 800241c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002420:	4619      	mov	r1, r3
 8002422:	484e      	ldr	r0, [pc, #312]	; (800255c <MX_GPIO_Init+0x4d4>)
 8002424:	f002 ffde 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_INT_Pin */
  GPIO_InitStruct.Pin = FLASH_INT_Pin;
 8002428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800242e:	4b4a      	ldr	r3, [pc, #296]	; (8002558 <MX_GPIO_Init+0x4d0>)
 8002430:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002432:	2301      	movs	r3, #1
 8002434:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(FLASH_INT_GPIO_Port, &GPIO_InitStruct);
 8002436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800243a:	4619      	mov	r1, r3
 800243c:	4847      	ldr	r0, [pc, #284]	; (800255c <MX_GPIO_Init+0x4d4>)
 800243e:	f002 ffd1 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RSTO_Pin */
  GPIO_InitStruct.Pin = FLASH_RSTO_Pin;
 8002442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002448:	2300      	movs	r3, #0
 800244a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800244c:	2301      	movs	r3, #1
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(FLASH_RSTO_GPIO_Port, &GPIO_InitStruct);
 8002450:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002454:	4619      	mov	r1, r3
 8002456:	4841      	ldr	r0, [pc, #260]	; (800255c <MX_GPIO_Init+0x4d4>)
 8002458:	f002 ffc4 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin;
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002460:	2301      	movs	r3, #1
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002464:	2301      	movs	r3, #1
 8002466:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DISPLAY_RST_GPIO_Port, &GPIO_InitStruct);
 800246c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002470:	4619      	mov	r1, r3
 8002472:	483b      	ldr	r0, [pc, #236]	; (8002560 <MX_GPIO_Init+0x4d8>)
 8002474:	f002 ffb6 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALS_INT_Pin */
  GPIO_InitStruct.Pin = ALS_INT_Pin;
 8002478:	2340      	movs	r3, #64	; 0x40
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800247c:	2300      	movs	r3, #0
 800247e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002480:	2301      	movs	r3, #1
 8002482:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ALS_INT_GPIO_Port, &GPIO_InitStruct);
 8002484:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002488:	4619      	mov	r1, r3
 800248a:	4835      	ldr	r0, [pc, #212]	; (8002560 <MX_GPIO_Init+0x4d8>)
 800248c:	f002 ffaa 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002494:	4b30      	ldr	r3, [pc, #192]	; (8002558 <MX_GPIO_Init+0x4d0>)
 8002496:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002498:	2301      	movs	r3, #1
 800249a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 800249c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a0:	4619      	mov	r1, r3
 80024a2:	4830      	ldr	r0, [pc, #192]	; (8002564 <MX_GPIO_Init+0x4dc>)
 80024a4:	f002 ff9e 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 80024a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ae:	2301      	movs	r3, #1
 80024b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024b2:	2301      	movs	r3, #1
 80024b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b6:	2300      	movs	r3, #0
 80024b8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024be:	4619      	mov	r1, r3
 80024c0:	4828      	ldr	r0, [pc, #160]	; (8002564 <MX_GPIO_Init+0x4dc>)
 80024c2:	f002 ff8f 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HR_INT_Pin */
  GPIO_InitStruct.Pin = HR_INT_Pin;
 80024c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024cc:	4b22      	ldr	r3, [pc, #136]	; (8002558 <MX_GPIO_Init+0x4d0>)
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024d0:	2301      	movs	r3, #1
 80024d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HR_INT_GPIO_Port, &GPIO_InitStruct);
 80024d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d8:	4619      	mov	r1, r3
 80024da:	4823      	ldr	r0, [pc, #140]	; (8002568 <MX_GPIO_Init+0x4e0>)
 80024dc:	f002 ff82 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LRA_EN_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin;
 80024e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e6:	2301      	movs	r3, #1
 80024e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024ea:	2302      	movs	r3, #2
 80024ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ee:	2300      	movs	r3, #0
 80024f0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LRA_EN_GPIO_Port, &GPIO_InitStruct);
 80024f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f6:	4619      	mov	r1, r3
 80024f8:	481b      	ldr	r0, [pc, #108]	; (8002568 <MX_GPIO_Init+0x4e0>)
 80024fa:	f002 ff73 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_INT_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin;
 80024fe:	2310      	movs	r3, #16
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <MX_GPIO_Init+0x4d0>)
 8002504:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002506:	2301      	movs	r3, #1
 8002508:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MAG_INT_GPIO_Port, &GPIO_InitStruct);
 800250a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800250e:	4619      	mov	r1, r3
 8002510:	4816      	ldr	r0, [pc, #88]	; (800256c <MX_GPIO_Init+0x4e4>)
 8002512:	f002 ff67 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 8002516:	2304      	movs	r3, #4
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <MX_GPIO_Init+0x4e8>)
 800251c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 8002522:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002526:	4619      	mov	r1, r3
 8002528:	4812      	ldr	r0, [pc, #72]	; (8002574 <MX_GPIO_Init+0x4ec>)
 800252a:	f002 ff5b 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin;
 800252e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002534:	2300      	movs	r3, #0
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IMU_INT2_GPIO_Port, &GPIO_InitStruct);
 800253c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002540:	4619      	mov	r1, r3
 8002542:	4807      	ldr	r0, [pc, #28]	; (8002560 <MX_GPIO_Init+0x4d8>)
 8002544:	f002 ff4e 	bl	80053e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002548:	bf00      	nop
 800254a:	3740      	adds	r7, #64	; 0x40
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	42020000 	.word	0x42020000
 8002554:	42022400 	.word	0x42022400
 8002558:	10210000 	.word	0x10210000
 800255c:	42022000 	.word	0x42022000
 8002560:	42021400 	.word	0x42021400
 8002564:	42021000 	.word	0x42021000
 8002568:	42020c00 	.word	0x42020c00
 800256c:	42020800 	.word	0x42020800
 8002570:	10110000 	.word	0x10110000
 8002574:	42020400 	.word	0x42020400

08002578 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d101      	bne.n	800258e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800258a:	f001 fa5b 	bl	8003a44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40001000 	.word	0x40001000

0800259c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a0:	b672      	cpsid	i
}
 80025a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025a4:	e7fe      	b.n	80025a4 <Error_Handler+0x8>
	...

080025a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <HAL_MspInit+0x30>)
 80025b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b4:	4a08      	ldr	r2, [pc, #32]	; (80025d8 <HAL_MspInit+0x30>)
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_MspInit+0x30>)
 80025c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	46020c00 	.word	0x46020c00

080025dc <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b0c2      	sub	sp, #264	; 0x108
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80025e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025ea:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025fc:	f107 0310 	add.w	r3, r7, #16
 8002600:	22e0      	movs	r2, #224	; 0xe0
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f00b fdd8 	bl	800e1ba <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 800260a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800260e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a2b      	ldr	r2, [pc, #172]	; (80026c4 <HAL_MDF_MspInit+0xe8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d14e      	bne.n	80026ba <HAL_MDF_MspInit+0xde>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 800261c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8002628:	2300      	movs	r3, #0
 800262a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800262e:	f107 0310 	add.w	r3, r7, #16
 8002632:	4618      	mov	r0, r3
 8002634:	f007 f8b0 	bl	8009798 <HAL_RCCEx_PeriphCLKConfig>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_MDF_MspInit+0x66>
    {
      Error_Handler();
 800263e:	f7ff ffad 	bl	800259c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 8002642:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <HAL_MDF_MspInit+0xec>)
 8002644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002648:	4a1f      	ldr	r2, [pc, #124]	; (80026c8 <HAL_MDF_MspInit+0xec>)
 800264a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800264e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <HAL_MDF_MspInit+0xec>)
 8002654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_MDF_MspInit+0xec>)
 8002662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002666:	4a18      	ldr	r2, [pc, #96]	; (80026c8 <HAL_MDF_MspInit+0xec>)
 8002668:	f043 0310 	orr.w	r3, r3, #16
 800266c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002670:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <HAL_MDF_MspInit+0xec>)
 8002672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002676:	f003 0210 	and.w	r2, r3, #16
 800267a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800267e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002688:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800268c:	681b      	ldr	r3, [r3, #0]
    /**ADF1 GPIO Configuration
    PE9     ------> ADF1_CCK0
    PE10     ------> ADF1_SDI0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800268e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002692:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 80026a8:	2303      	movs	r3, #3
 80026aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ae:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80026b2:	4619      	mov	r1, r3
 80026b4:	4805      	ldr	r0, [pc, #20]	; (80026cc <HAL_MDF_MspInit+0xf0>)
 80026b6:	f002 fe95 	bl	80053e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 80026ba:	bf00      	nop
 80026bc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	46024080 	.word	0x46024080
 80026c8:	46020c00 	.word	0x46020c00
 80026cc:	42021000 	.word	0x42021000

080026d0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0b      	ldr	r2, [pc, #44]	; (800270c <HAL_CRC_MspInit+0x3c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d10e      	bne.n	8002700 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_CRC_MspInit+0x40>)
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e8:	4a09      	ldr	r2, [pc, #36]	; (8002710 <HAL_CRC_MspInit+0x40>)
 80026ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <HAL_CRC_MspInit+0x40>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40023000 	.word	0x40023000
 8002710:	46020c00 	.word	0x46020c00

08002714 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a16      	ldr	r2, [pc, #88]	; (800277c <HAL_DCACHE_MspInit+0x68>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10f      	bne.n	8002746 <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <HAL_DCACHE_MspInit+0x6c>)
 8002728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <HAL_DCACHE_MspInit+0x6c>)
 800272e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002732:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_DCACHE_MspInit+0x6c>)
 8002738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 8002744:	e013      	b.n	800276e <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a0e      	ldr	r2, [pc, #56]	; (8002784 <HAL_DCACHE_MspInit+0x70>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d10e      	bne.n	800276e <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_DCACHE_MspInit+0x6c>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <HAL_DCACHE_MspInit+0x6c>)
 8002758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800275c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <HAL_DCACHE_MspInit+0x6c>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40031400 	.word	0x40031400
 8002780:	46020c00 	.word	0x46020c00
 8002784:	40031800 	.word	0x40031800

08002788 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <HAL_DMA2D_MspInit+0x48>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d116      	bne.n	80027c8 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800279a:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <HAL_DMA2D_MspInit+0x4c>)
 800279c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a0:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <HAL_DMA2D_MspInit+0x4c>)
 80027a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_DMA2D_MspInit+0x4c>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80027b8:	2200      	movs	r2, #0
 80027ba:	2100      	movs	r1, #0
 80027bc:	2076      	movs	r0, #118	; 0x76
 80027be:	f001 fa3d 	bl	8003c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80027c2:	2076      	movs	r0, #118	; 0x76
 80027c4:	f001 fa54 	bl	8003c70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80027c8:	bf00      	nop
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	4002b000 	.word	0x4002b000
 80027d4:	46020c00 	.word	0x46020c00

080027d8 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b0c2      	sub	sp, #264	; 0x108
 80027dc:	af00      	add	r7, sp, #0
 80027de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80027e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027e6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027f8:	f107 0310 	add.w	r3, r7, #16
 80027fc:	22e0      	movs	r2, #224	; 0xe0
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f00b fcda 	bl	800e1ba <memset>
  if(hdsi->Instance==DSI)
 8002806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800280a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a30      	ldr	r2, [pc, #192]	; (80028d4 <HAL_DSI_MspInit+0xfc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d157      	bne.n	80028c8 <HAL_DSI_MspInit+0xf0>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0304 	mov.w	r3, #4
 8002820:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 8002824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002828:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800282c:	f107 0310 	add.w	r3, r7, #16
 8002830:	4618      	mov	r0, r3
 8002832:	f006 ffb1 	bl	8009798 <HAL_RCCEx_PeriphCLKConfig>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_DSI_MspInit+0x68>
    {
      Error_Handler();
 800283c:	f7ff feae 	bl	800259c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8002840:	4b25      	ldr	r3, [pc, #148]	; (80028d8 <HAL_DSI_MspInit+0x100>)
 8002842:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002846:	4a24      	ldr	r2, [pc, #144]	; (80028d8 <HAL_DSI_MspInit+0x100>)
 8002848:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800284c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002850:	4b21      	ldr	r3, [pc, #132]	; (80028d8 <HAL_DSI_MspInit+0x100>)
 8002852:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800285e:	4b1e      	ldr	r3, [pc, #120]	; (80028d8 <HAL_DSI_MspInit+0x100>)
 8002860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002864:	4a1c      	ldr	r2, [pc, #112]	; (80028d8 <HAL_DSI_MspInit+0x100>)
 8002866:	f043 0320 	orr.w	r3, r3, #32
 800286a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800286e:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <HAL_DSI_MspInit+0x100>)
 8002870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002874:	f003 0220 	and.w	r2, r3, #32
 8002878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800287c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002886:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800288a:	681b      	ldr	r3, [r3, #0]
    DSI_CKN     ------> DSIHOST_CKN
    DSI_D1N     ------> DSIHOST_D1N
    DSI_D1P     ------> DSIHOST_D1P
    PF10     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800288c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002890:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002894:	2302      	movs	r3, #2
 8002896:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 80028a6:	230b      	movs	r3, #11
 80028a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028ac:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80028b0:	4619      	mov	r1, r3
 80028b2:	480a      	ldr	r0, [pc, #40]	; (80028dc <HAL_DSI_MspInit+0x104>)
 80028b4:	f002 fd96 	bl	80053e4 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 80028b8:	2200      	movs	r2, #0
 80028ba:	2100      	movs	r1, #0
 80028bc:	2089      	movs	r0, #137	; 0x89
 80028be:	f001 f9bd 	bl	8003c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80028c2:	2089      	movs	r0, #137	; 0x89
 80028c4:	f001 f9d4 	bl	8003c70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80028c8:	bf00      	nop
 80028ca:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40016c00 	.word	0x40016c00
 80028d8:	46020c00 	.word	0x46020c00
 80028dc:	42021400 	.word	0x42021400

080028e0 <HAL_GFXMMU_MspInit>:
* This function configures the hardware resources used in this example
* @param hgfxmmu: GFXMMU handle pointer
* @retval None
*/
void HAL_GFXMMU_MspInit(GFXMMU_HandleTypeDef* hgfxmmu)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if(hgfxmmu->Instance==GFXMMU)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0e      	ldr	r2, [pc, #56]	; (8002928 <HAL_GFXMMU_MspInit+0x48>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d116      	bne.n	8002920 <HAL_GFXMMU_MspInit+0x40>
  {
  /* USER CODE BEGIN GFXMMU_MspInit 0 */

  /* USER CODE END GFXMMU_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GFXMMU_CLK_ENABLE();
 80028f2:	4b0e      	ldr	r3, [pc, #56]	; (800292c <HAL_GFXMMU_MspInit+0x4c>)
 80028f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f8:	4a0c      	ldr	r2, [pc, #48]	; (800292c <HAL_GFXMMU_MspInit+0x4c>)
 80028fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002902:	4b0a      	ldr	r3, [pc, #40]	; (800292c <HAL_GFXMMU_MspInit+0x4c>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
    /* GFXMMU interrupt Init */
    HAL_NVIC_SetPriority(GFXMMU_IRQn, 0, 0);
 8002910:	2200      	movs	r2, #0
 8002912:	2100      	movs	r1, #0
 8002914:	2086      	movs	r0, #134	; 0x86
 8002916:	f001 f991 	bl	8003c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GFXMMU_IRQn);
 800291a:	2086      	movs	r0, #134	; 0x86
 800291c:	f001 f9a8 	bl	8003c70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GFXMMU_MspInit 1 */

  /* USER CODE END GFXMMU_MspInit 1 */
  }

}
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	4002c000 	.word	0x4002c000
 800292c:	46020c00 	.word	0x46020c00

08002930 <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1a      	ldr	r2, [pc, #104]	; (80029a8 <HAL_GPU2D_MspInit+0x78>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d12d      	bne.n	800299e <HAL_GPU2D_MspInit+0x6e>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 8002942:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <HAL_GPU2D_MspInit+0x7c>)
 8002944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002948:	4a18      	ldr	r2, [pc, #96]	; (80029ac <HAL_GPU2D_MspInit+0x7c>)
 800294a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800294e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002952:	4b16      	ldr	r3, [pc, #88]	; (80029ac <HAL_GPU2D_MspInit+0x7c>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_GPU2D_MspInit+0x7c>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	4a11      	ldr	r2, [pc, #68]	; (80029ac <HAL_GPU2D_MspInit+0x7c>)
 8002968:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800296c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002970:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <HAL_GPU2D_MspInit+0x7c>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 0, 0);
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	2084      	movs	r0, #132	; 0x84
 8002984:	f001 f95a 	bl	8003c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 8002988:	2084      	movs	r0, #132	; 0x84
 800298a:	f001 f971 	bl	8003c70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 0, 0);
 800298e:	2200      	movs	r2, #0
 8002990:	2100      	movs	r1, #0
 8002992:	2085      	movs	r0, #133	; 0x85
 8002994:	f001 f952 	bl	8003c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 8002998:	2085      	movs	r0, #133	; 0x85
 800299a:	f001 f969 	bl	8003c70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */

  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	4002f000 	.word	0x4002f000
 80029ac:	46020c00 	.word	0x46020c00

080029b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b0cc      	sub	sp, #304	; 0x130
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80029ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029be:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029d4:	22e0      	movs	r2, #224	; 0xe0
 80029d6:	2100      	movs	r1, #0
 80029d8:	4618      	mov	r0, r3
 80029da:	f00b fbee 	bl	800e1ba <memset>
  if(hi2c->Instance==I2C1)
 80029de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80029e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4aba      	ldr	r2, [pc, #744]	; (8002cd4 <HAL_I2C_MspInit+0x324>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d14f      	bne.n	8002a90 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80029f0:	f04f 0240 	mov.w	r2, #64	; 0x40
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80029fc:	2300      	movs	r3, #0
 80029fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a06:	4618      	mov	r0, r3
 8002a08:	f006 fec6 	bl	8009798 <HAL_RCCEx_PeriphCLKConfig>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8002a12:	f7ff fdc3 	bl	800259c <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a16:	4bb0      	ldr	r3, [pc, #704]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	4aae      	ldr	r2, [pc, #696]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a26:	4bac      	ldr	r3, [pc, #688]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a30:	637b      	str	r3, [r7, #52]	; 0x34
 8002a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002a34:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002a38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a3c:	2312      	movs	r3, #18
 8002a3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a4e:	2304      	movs	r3, #4
 8002a50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a54:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002a58:	4619      	mov	r1, r3
 8002a5a:	48a0      	ldr	r0, [pc, #640]	; (8002cdc <HAL_I2C_MspInit+0x32c>)
 8002a5c:	f002 fcc2 	bl	80053e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a60:	4b9d      	ldr	r3, [pc, #628]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a66:	4a9c      	ldr	r2, [pc, #624]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002a68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a6c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002a70:	4b99      	ldr	r3, [pc, #612]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a76:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002a7e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002a88:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a8c:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C6_MspInit 1 */

  /* USER CODE END I2C6_MspInit 1 */
  }

}
 8002a8e:	e1c0      	b.n	8002e12 <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C2)
 8002a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002a94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a90      	ldr	r2, [pc, #576]	; (8002ce0 <HAL_I2C_MspInit+0x330>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d157      	bne.n	8002b52 <HAL_I2C_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002aa2:	f04f 0280 	mov.w	r2, #128	; 0x80
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ab4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f006 fe6d 	bl	8009798 <HAL_RCCEx_PeriphCLKConfig>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8002ac4:	f7ff fd6a 	bl	800259c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac8:	4b83      	ldr	r3, [pc, #524]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ace:	4a82      	ldr	r2, [pc, #520]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002ad0:	f043 0302 	orr.w	r3, r3, #2
 8002ad4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ad8:	4b7f      	ldr	r3, [pc, #508]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ade:	f003 0202 	and.w	r2, r3, #2
 8002ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ae6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002af0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002af4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002af6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002afa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002afe:	2312      	movs	r3, #18
 8002b00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b10:	2304      	movs	r3, #4
 8002b12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b16:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4871      	ldr	r0, [pc, #452]	; (8002ce4 <HAL_I2C_MspInit+0x334>)
 8002b1e:	f002 fc61 	bl	80053e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b22:	4b6d      	ldr	r3, [pc, #436]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002b24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b28:	4a6b      	ldr	r2, [pc, #428]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002b2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b2e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002b32:	4b69      	ldr	r3, [pc, #420]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002b34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	e15f      	b.n	8002e12 <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C3)
 8002b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a62      	ldr	r2, [pc, #392]	; (8002ce8 <HAL_I2C_MspInit+0x338>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d156      	bne.n	8002c12 <HAL_I2C_MspInit+0x262>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f006 fe0c 	bl	8009798 <HAL_RCCEx_PeriphCLKConfig>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_MspInit+0x1da>
      Error_Handler();
 8002b86:	f7ff fd09 	bl	800259c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8a:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b90:	4a51      	ldr	r2, [pc, #324]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002b92:	f043 0304 	orr.w	r3, r3, #4
 8002b96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b9a:	4b4f      	ldr	r3, [pc, #316]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ba0:	f003 0204 	and.w	r2, r3, #4
 8002ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ba8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002bb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002bb6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bbe:	2312      	movs	r3, #18
 8002bc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4843      	ldr	r0, [pc, #268]	; (8002cec <HAL_I2C_MspInit+0x33c>)
 8002bde:	f002 fc01 	bl	80053e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002be2:	4b3d      	ldr	r3, [pc, #244]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002be4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002be8:	4a3b      	ldr	r2, [pc, #236]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bee:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002bf2:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002bf4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002bf8:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c0a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	e0ff      	b.n	8002e12 <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C4)
 8002c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a34      	ldr	r2, [pc, #208]	; (8002cf0 <HAL_I2C_MspInit+0x340>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d169      	bne.n	8002cf8 <HAL_I2C_MspInit+0x348>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002c24:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f006 fdac 	bl	8009798 <HAL_RCCEx_PeriphCLKConfig>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_MspInit+0x29a>
      Error_Handler();
 8002c46:	f7ff fca9 	bl	800259c <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c4a:	4b23      	ldr	r3, [pc, #140]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c50:	4a21      	ldr	r2, [pc, #132]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002c52:	f043 0308 	orr.w	r3, r3, #8
 8002c56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c5a:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c60:	f003 0208 	and.w	r2, r3, #8
 8002c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c68:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c72:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c76:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002c78:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002c7c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c80:	2312      	movs	r3, #18
 8002c82:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002c92:	2304      	movs	r3, #4
 8002c94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c98:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4815      	ldr	r0, [pc, #84]	; (8002cf4 <HAL_I2C_MspInit+0x344>)
 8002ca0:	f002 fba0 	bl	80053e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002ca6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002caa:	4a0b      	ldr	r2, [pc, #44]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002cac:	f043 0302 	orr.w	r3, r3, #2
 8002cb0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8002cb4:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <HAL_I2C_MspInit+0x328>)
 8002cb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002cba:	f003 0202 	and.w	r2, r3, #2
 8002cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002cc2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ccc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cd0:	681b      	ldr	r3, [r3, #0]
}
 8002cd2:	e09e      	b.n	8002e12 <HAL_I2C_MspInit+0x462>
 8002cd4:	40005400 	.word	0x40005400
 8002cd8:	46020c00 	.word	0x46020c00
 8002cdc:	42021800 	.word	0x42021800
 8002ce0:	40005800 	.word	0x40005800
 8002ce4:	42020400 	.word	0x42020400
 8002ce8:	46002800 	.word	0x46002800
 8002cec:	42020800 	.word	0x42020800
 8002cf0:	40008400 	.word	0x40008400
 8002cf4:	42020c00 	.word	0x42020c00
  else if(hi2c->Instance==I2C6)
 8002cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002cfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a45      	ldr	r2, [pc, #276]	; (8002e1c <HAL_I2C_MspInit+0x46c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	f040 8083 	bne.w	8002e12 <HAL_I2C_MspInit+0x462>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C6;
 8002d0c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c6ClockSelection = RCC_I2C6CLKSOURCE_PCLK1;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d22:	4618      	mov	r0, r3
 8002d24:	f006 fd38 	bl	8009798 <HAL_RCCEx_PeriphCLKConfig>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_I2C_MspInit+0x382>
      Error_Handler();
 8002d2e:	f7ff fc35 	bl	800259c <Error_Handler>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002d32:	4b3b      	ldr	r3, [pc, #236]	; (8002e20 <HAL_I2C_MspInit+0x470>)
 8002d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d38:	4a39      	ldr	r2, [pc, #228]	; (8002e20 <HAL_I2C_MspInit+0x470>)
 8002d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d42:	4b37      	ldr	r3, [pc, #220]	; (8002e20 <HAL_I2C_MspInit+0x470>)
 8002d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d48:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d50:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d5e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d60:	4b2f      	ldr	r3, [pc, #188]	; (8002e20 <HAL_I2C_MspInit+0x470>)
 8002d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d66:	4a2e      	ldr	r2, [pc, #184]	; (8002e20 <HAL_I2C_MspInit+0x470>)
 8002d68:	f043 0320 	orr.w	r3, r3, #32
 8002d6c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d70:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <HAL_I2C_MspInit+0x470>)
 8002d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d76:	f003 0220 	and.w	r2, r3, #32
 8002d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d7e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d88:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d8c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d92:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d96:	2312      	movs	r3, #18
 8002d98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 8002da8:	2302      	movs	r3, #2
 8002daa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002dae:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002db2:	4619      	mov	r1, r3
 8002db4:	481b      	ldr	r0, [pc, #108]	; (8002e24 <HAL_I2C_MspInit+0x474>)
 8002db6:	f002 fb15 	bl	80053e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dc0:	2312      	movs	r3, #18
 8002dc2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dd8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4812      	ldr	r0, [pc, #72]	; (8002e28 <HAL_I2C_MspInit+0x478>)
 8002de0:	f002 fb00 	bl	80053e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C6_CLK_ENABLE();
 8002de4:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <HAL_I2C_MspInit+0x470>)
 8002de6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002dea:	4a0d      	ldr	r2, [pc, #52]	; (8002e20 <HAL_I2C_MspInit+0x470>)
 8002dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_I2C_MspInit+0x470>)
 8002df6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002dfa:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e02:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e0c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002e10:	681b      	ldr	r3, [r3, #0]
}
 8002e12:	bf00      	nop
 8002e14:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40009c00 	.word	0x40009c00
 8002e20:	46020c00 	.word	0x46020c00
 8002e24:	42022400 	.word	0x42022400
 8002e28:	42021400 	.word	0x42021400

08002e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b0c8      	sub	sp, #288	; 0x120
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e3a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]
 8002e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e50:	22e0      	movs	r2, #224	; 0xe0
 8002e52:	2100      	movs	r1, #0
 8002e54:	4618      	mov	r0, r3
 8002e56:	f00b f9b0 	bl	800e1ba <memset>
  if(huart->Instance==LPUART1)
 8002e5a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e5e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4aa1      	ldr	r2, [pc, #644]	; (80030ec <HAL_UART_MspInit+0x2c0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d17b      	bne.n	8002f64 <HAL_UART_MspInit+0x138>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002e6c:	f04f 0220 	mov.w	r2, #32
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e82:	4618      	mov	r0, r3
 8002e84:	f006 fc88 	bl	8009798 <HAL_RCCEx_PeriphCLKConfig>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8002e8e:	f7ff fb85 	bl	800259c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002e92:	4b97      	ldr	r3, [pc, #604]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 8002e94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002e98:	4a95      	ldr	r2, [pc, #596]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 8002e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e9e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002ea2:	4b93      	ldr	r3, [pc, #588]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 8002ea4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002eb0:	4b8f      	ldr	r3, [pc, #572]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 8002eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb6:	4a8e      	ldr	r2, [pc, #568]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 8002eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ebc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ec0:	4b8b      	ldr	r3, [pc, #556]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 8002ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ec6:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002eca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002ece:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002ed8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002edc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ede:	4b84      	ldr	r3, [pc, #528]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 8002ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee4:	4a82      	ldr	r2, [pc, #520]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 8002ee6:	f043 0302 	orr.w	r3, r3, #2
 8002eea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002eee:	4b80      	ldr	r3, [pc, #512]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 8002ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ef4:	f003 0202 	and.w	r2, r3, #2
 8002ef8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002efc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002f06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f0a:	681b      	ldr	r3, [r3, #0]
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    PG5     ------> LPUART1_CTS
    PB1     ------> LPUART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_5;
 8002f0c:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8002f10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f14:	2302      	movs	r3, #2
 8002f16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f20:	2300      	movs	r3, #0
 8002f22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002f26:	2308      	movs	r3, #8
 8002f28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f2c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002f30:	4619      	mov	r1, r3
 8002f32:	4870      	ldr	r0, [pc, #448]	; (80030f4 <HAL_UART_MspInit+0x2c8>)
 8002f34:	f002 fa56 	bl	80053e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002f50:	2308      	movs	r3, #8
 8002f52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f56:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4866      	ldr	r0, [pc, #408]	; (80030f8 <HAL_UART_MspInit+0x2cc>)
 8002f5e:	f002 fa41 	bl	80053e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f62:	e0bd      	b.n	80030e0 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART1)
 8002f64:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002f68:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a62      	ldr	r2, [pc, #392]	; (80030fc <HAL_UART_MspInit+0x2d0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d155      	bne.n	8003022 <HAL_UART_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f76:	f04f 0201 	mov.w	r2, #1
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f82:	2300      	movs	r3, #0
 8002f84:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f006 fc04 	bl	8009798 <HAL_RCCEx_PeriphCLKConfig>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8002f96:	f7ff fb01 	bl	800259c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f9a:	4b55      	ldr	r3, [pc, #340]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 8002f9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fa0:	4a53      	ldr	r2, [pc, #332]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 8002fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002faa:	4b51      	ldr	r3, [pc, #324]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 8002fac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fb0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002fb4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fc6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc8:	4b49      	ldr	r3, [pc, #292]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 8002fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fce:	4a48      	ldr	r2, [pc, #288]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 8002fd0:	f043 0302 	orr.w	r3, r3, #2
 8002fd4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fd8:	4b45      	ldr	r3, [pc, #276]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 8002fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fde:	f003 0202 	and.w	r2, r3, #2
 8002fe2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002fe6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002ff0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ff4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002ff6:	23c0      	movs	r3, #192	; 0xc0
 8002ff8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003008:	2300      	movs	r3, #0
 800300a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800300e:	2307      	movs	r3, #7
 8003010:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003014:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003018:	4619      	mov	r1, r3
 800301a:	4837      	ldr	r0, [pc, #220]	; (80030f8 <HAL_UART_MspInit+0x2cc>)
 800301c:	f002 f9e2 	bl	80053e4 <HAL_GPIO_Init>
}
 8003020:	e05e      	b.n	80030e0 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART6)
 8003022:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003026:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a34      	ldr	r2, [pc, #208]	; (8003100 <HAL_UART_MspInit+0x2d4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d155      	bne.n	80030e0 <HAL_UART_MspInit+0x2b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003034:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8003040:	2300      	movs	r3, #0
 8003042:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003046:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800304a:	4618      	mov	r0, r3
 800304c:	f006 fba4 	bl	8009798 <HAL_RCCEx_PeriphCLKConfig>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_UART_MspInit+0x22e>
      Error_Handler();
 8003056:	f7ff faa1 	bl	800259c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800305a:	4b25      	ldr	r3, [pc, #148]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 800305c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003060:	4a23      	ldr	r2, [pc, #140]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 8003062:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003066:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800306a:	4b21      	ldr	r3, [pc, #132]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 800306c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003070:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8003074:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003078:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003082:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003086:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 800308a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800308e:	4a18      	ldr	r2, [pc, #96]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 8003090:	f043 0304 	orr.w	r3, r3, #4
 8003094:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <HAL_UART_MspInit+0x2c4>)
 800309a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800309e:	f003 0204 	and.w	r2, r3, #4
 80030a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80030a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80030b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030b4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80030b6:	230c      	movs	r3, #12
 80030b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030bc:	2302      	movs	r3, #2
 80030be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80030ce:	2307      	movs	r3, #7
 80030d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030d4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80030d8:	4619      	mov	r1, r3
 80030da:	480a      	ldr	r0, [pc, #40]	; (8003104 <HAL_UART_MspInit+0x2d8>)
 80030dc:	f002 f982 	bl	80053e4 <HAL_GPIO_Init>
}
 80030e0:	bf00      	nop
 80030e2:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	46002400 	.word	0x46002400
 80030f0:	46020c00 	.word	0x46020c00
 80030f4:	42021800 	.word	0x42021800
 80030f8:	42020400 	.word	0x42020400
 80030fc:	40013800 	.word	0x40013800
 8003100:	40006400 	.word	0x40006400
 8003104:	42020800 	.word	0x42020800

08003108 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b0bc      	sub	sp, #240	; 0xf0
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003110:	f107 0310 	add.w	r3, r7, #16
 8003114:	22e0      	movs	r2, #224	; 0xe0
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f00b f84e 	bl	800e1ba <memset>
  if(hltdc->Instance==LTDC)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a22      	ldr	r2, [pc, #136]	; (80031ac <HAL_LTDC_MspInit+0xa4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d13d      	bne.n	80031a4 <HAL_LTDC_MspInit+0x9c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0302 	mov.w	r3, #2
 8003130:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 8003134:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003138:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 800313c:	2303      	movs	r3, #3
 800313e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLL2.PLL2M = 1;
 8003140:	2301      	movs	r3, #1
 8003142:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLL2.PLL2N = 20;
 8003144:	2314      	movs	r3, #20
 8003146:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2P = 2;
 8003148:	2302      	movs	r3, #2
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLL2.PLL2Q = 2;
 800314c:	2302      	movs	r3, #2
 800314e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLL2.PLL2R = 2;
 8003150:	2302      	movs	r3, #2
 8003152:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8003154:	230c      	movs	r3, #12
 8003156:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 800315c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003160:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003162:	f107 0310 	add.w	r3, r7, #16
 8003166:	4618      	mov	r0, r3
 8003168:	f006 fb16 	bl	8009798 <HAL_RCCEx_PeriphCLKConfig>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8003172:	f7ff fa13 	bl	800259c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003176:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <HAL_LTDC_MspInit+0xa8>)
 8003178:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800317c:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <HAL_LTDC_MspInit+0xa8>)
 800317e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003182:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003186:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <HAL_LTDC_MspInit+0xa8>)
 8003188:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800318c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8003194:	2200      	movs	r2, #0
 8003196:	2100      	movs	r1, #0
 8003198:	2087      	movs	r0, #135	; 0x87
 800319a:	f000 fd4f 	bl	8003c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800319e:	2087      	movs	r0, #135	; 0x87
 80031a0:	f000 fd66 	bl	8003c70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80031a4:	bf00      	nop
 80031a6:	37f0      	adds	r7, #240	; 0xf0
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40016800 	.word	0x40016800
 80031b0:	46020c00 	.word	0x46020c00

080031b4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b0ca      	sub	sp, #296	; 0x128
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80031be:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80031c2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031d8:	22e0      	movs	r2, #224	; 0xe0
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f00a ffec 	bl	800e1ba <memset>
  if(hospi->Instance==OCTOSPI1)
 80031e2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80031e6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a93      	ldr	r2, [pc, #588]	; (800343c <HAL_OSPI_MspInit+0x288>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	f040 8133 	bne.w	800345c <HAL_OSPI_MspInit+0x2a8>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80031f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8003202:	2300      	movs	r3, #0
 8003204:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003208:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800320c:	4618      	mov	r0, r3
 800320e:	f006 fac3 	bl	8009798 <HAL_RCCEx_PeriphCLKConfig>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8003218:	f7ff f9c0 	bl	800259c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 800321c:	4b88      	ldr	r3, [pc, #544]	; (8003440 <HAL_OSPI_MspInit+0x28c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3301      	adds	r3, #1
 8003222:	4a87      	ldr	r2, [pc, #540]	; (8003440 <HAL_OSPI_MspInit+0x28c>)
 8003224:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8003226:	4b86      	ldr	r3, [pc, #536]	; (8003440 <HAL_OSPI_MspInit+0x28c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d10e      	bne.n	800324c <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 800322e:	4b85      	ldr	r3, [pc, #532]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 8003230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003234:	4a83      	ldr	r2, [pc, #524]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 8003236:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800323a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800323e:	4b81      	ldr	r3, [pc, #516]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 8003240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800324c:	4b7d      	ldr	r3, [pc, #500]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	4a7c      	ldr	r2, [pc, #496]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 8003254:	f043 0310 	orr.w	r3, r3, #16
 8003258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800325c:	4b79      	ldr	r3, [pc, #484]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	f003 0210 	and.w	r2, r3, #16
 8003266:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800326a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003274:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003278:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800327a:	4b72      	ldr	r3, [pc, #456]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 800327c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003280:	4a70      	ldr	r2, [pc, #448]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 8003282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003286:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800328a:	4b6e      	ldr	r3, [pc, #440]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 800328c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003290:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8003294:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003298:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80032a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80032a6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80032a8:	4b66      	ldr	r3, [pc, #408]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 80032aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ae:	4a65      	ldr	r2, [pc, #404]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 80032b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032b8:	4b62      	ldr	r3, [pc, #392]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 80032ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032be:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80032c2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80032c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80032d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80032d4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80032d6:	4b5b      	ldr	r3, [pc, #364]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 80032d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032dc:	4a59      	ldr	r2, [pc, #356]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 80032de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032e6:	4b57      	ldr	r3, [pc, #348]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 80032e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ec:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80032f0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80032f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80032fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003302:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003304:	4b4f      	ldr	r3, [pc, #316]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 8003306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800330a:	4a4e      	ldr	r2, [pc, #312]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 800330c:	f043 0302 	orr.w	r3, r3, #2
 8003310:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003314:	4b4b      	ldr	r3, [pc, #300]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 8003316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800331a:	f003 0202 	and.w	r2, r3, #2
 800331e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003322:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800332c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003330:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003332:	4b44      	ldr	r3, [pc, #272]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 8003334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003338:	4a42      	ldr	r2, [pc, #264]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 800333a:	f043 0310 	orr.w	r3, r3, #16
 800333e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003342:	4b40      	ldr	r3, [pc, #256]	; (8003444 <HAL_OSPI_MspInit+0x290>)
 8003344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003348:	f003 0210 	and.w	r2, r3, #16
 800334c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003350:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800335a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800335e:	681b      	ldr	r3, [r3, #0]
    PH9     ------> OCTOSPIM_P2_IO4
    PH12     ------> OCTOSPIM_P2_IO7
    PB10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9
 8003360:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003364:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	2302      	movs	r3, #2
 800336a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336e:	2300      	movs	r3, #0
 8003370:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003374:	2303      	movs	r3, #3
 8003376:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800337a:	2305      	movs	r3, #5
 800337c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003380:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003384:	4619      	mov	r1, r3
 8003386:	4830      	ldr	r0, [pc, #192]	; (8003448 <HAL_OSPI_MspInit+0x294>)
 8003388:	f002 f82c 	bl	80053e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800338c:	2340      	movs	r3, #64	; 0x40
 800338e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339e:	2303      	movs	r3, #3
 80033a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80033a4:	2303      	movs	r3, #3
 80033a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033aa:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80033ae:	4619      	mov	r1, r3
 80033b0:	4826      	ldr	r0, [pc, #152]	; (800344c <HAL_OSPI_MspInit+0x298>)
 80033b2:	f002 f817 	bl	80053e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80033b6:	230e      	movs	r3, #14
 80033b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033bc:	2302      	movs	r3, #2
 80033be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c8:	2303      	movs	r3, #3
 80033ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPI2;
 80033ce:	2306      	movs	r3, #6
 80033d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80033d4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80033d8:	4619      	mov	r1, r3
 80033da:	481d      	ldr	r0, [pc, #116]	; (8003450 <HAL_OSPI_MspInit+0x29c>)
 80033dc:	f002 f802 	bl	80053e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 80033e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80033e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e8:	2302      	movs	r3, #2
 80033ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f4:	2303      	movs	r3, #3
 80033f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80033fa:	230a      	movs	r3, #10
 80033fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003400:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003404:	4619      	mov	r1, r3
 8003406:	4813      	ldr	r0, [pc, #76]	; (8003454 <HAL_OSPI_MspInit+0x2a0>)
 8003408:	f001 ffec 	bl	80053e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800340c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003410:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003414:	2302      	movs	r3, #2
 8003416:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341a:	2300      	movs	r3, #0
 800341c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003420:	2303      	movs	r3, #3
 8003422:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8003426:	230a      	movs	r3, #10
 8003428:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800342c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003430:	4619      	mov	r1, r3
 8003432:	4809      	ldr	r0, [pc, #36]	; (8003458 <HAL_OSPI_MspInit+0x2a4>)
 8003434:	f001 ffd6 	bl	80053e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8003438:	e08f      	b.n	800355a <HAL_OSPI_MspInit+0x3a6>
 800343a:	bf00      	nop
 800343c:	420d1400 	.word	0x420d1400
 8003440:	200007dc 	.word	0x200007dc
 8003444:	46020c00 	.word	0x46020c00
 8003448:	42021c00 	.word	0x42021c00
 800344c:	42021800 	.word	0x42021800
 8003450:	42022000 	.word	0x42022000
 8003454:	42020400 	.word	0x42020400
 8003458:	42021000 	.word	0x42021000
  else if(hospi->Instance==OCTOSPI2)
 800345c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003460:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a3e      	ldr	r2, [pc, #248]	; (8003564 <HAL_OSPI_MspInit+0x3b0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d175      	bne.n	800355a <HAL_OSPI_MspInit+0x3a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800346e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800347a:	2300      	movs	r3, #0
 800347c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003480:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003484:	4618      	mov	r0, r3
 8003486:	f006 f987 	bl	8009798 <HAL_RCCEx_PeriphCLKConfig>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_OSPI_MspInit+0x2e0>
      Error_Handler();
 8003490:	f7ff f884 	bl	800259c <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8003494:	4b34      	ldr	r3, [pc, #208]	; (8003568 <HAL_OSPI_MspInit+0x3b4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	3301      	adds	r3, #1
 800349a:	4a33      	ldr	r2, [pc, #204]	; (8003568 <HAL_OSPI_MspInit+0x3b4>)
 800349c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 800349e:	4b32      	ldr	r3, [pc, #200]	; (8003568 <HAL_OSPI_MspInit+0x3b4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d116      	bne.n	80034d4 <HAL_OSPI_MspInit+0x320>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 80034a6:	4b31      	ldr	r3, [pc, #196]	; (800356c <HAL_OSPI_MspInit+0x3b8>)
 80034a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ac:	4a2f      	ldr	r2, [pc, #188]	; (800356c <HAL_OSPI_MspInit+0x3b8>)
 80034ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80034b6:	4b2d      	ldr	r3, [pc, #180]	; (800356c <HAL_OSPI_MspInit+0x3b8>)
 80034b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034bc:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80034c0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80034c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80034ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80034d2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80034d4:	4b25      	ldr	r3, [pc, #148]	; (800356c <HAL_OSPI_MspInit+0x3b8>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	4a24      	ldr	r2, [pc, #144]	; (800356c <HAL_OSPI_MspInit+0x3b8>)
 80034dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034e4:	4b21      	ldr	r3, [pc, #132]	; (800356c <HAL_OSPI_MspInit+0x3b8>)
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80034ee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80034f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80034fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003500:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003502:	4b1a      	ldr	r3, [pc, #104]	; (800356c <HAL_OSPI_MspInit+0x3b8>)
 8003504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003508:	4a18      	ldr	r2, [pc, #96]	; (800356c <HAL_OSPI_MspInit+0x3b8>)
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003512:	4b16      	ldr	r3, [pc, #88]	; (800356c <HAL_OSPI_MspInit+0x3b8>)
 8003514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003518:	f003 0201 	and.w	r2, r3, #1
 800351c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003520:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800352a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800352e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003530:	2301      	movs	r3, #1
 8003532:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003536:	2302      	movs	r3, #2
 8003538:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353c:	2300      	movs	r3, #0
 800353e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003542:	2303      	movs	r3, #3
 8003544:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI2;
 8003548:	230a      	movs	r3, #10
 800354a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003552:	4619      	mov	r1, r3
 8003554:	4806      	ldr	r0, [pc, #24]	; (8003570 <HAL_OSPI_MspInit+0x3bc>)
 8003556:	f001 ff45 	bl	80053e4 <HAL_GPIO_Init>
}
 800355a:	bf00      	nop
 800355c:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	420d2400 	.word	0x420d2400
 8003568:	200007dc 	.word	0x200007dc
 800356c:	46020c00 	.word	0x46020c00
 8003570:	42020000 	.word	0x42020000

08003574 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b0bc      	sub	sp, #240	; 0xf0
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800357c:	f107 0310 	add.w	r3, r7, #16
 8003580:	22e0      	movs	r2, #224	; 0xe0
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f00a fe18 	bl	800e1ba <memset>
  if(hrtc->Instance==RTC)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <HAL_RTC_MspInit+0x90>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d132      	bne.n	80035fa <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003594:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80035a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035a8:	f107 0310 	add.w	r3, r7, #16
 80035ac:	4618      	mov	r0, r3
 80035ae:	f006 f8f3 	bl	8009798 <HAL_RCCEx_PeriphCLKConfig>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80035b8:	f7fe fff0 	bl	800259c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80035bc:	4b12      	ldr	r3, [pc, #72]	; (8003608 <HAL_RTC_MspInit+0x94>)
 80035be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035c2:	4a11      	ldr	r2, [pc, #68]	; (8003608 <HAL_RTC_MspInit+0x94>)
 80035c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80035cc:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <HAL_RTC_MspInit+0x94>)
 80035ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035d2:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <HAL_RTC_MspInit+0x94>)
 80035d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035d8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80035dc:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <HAL_RTC_MspInit+0x94>)
 80035de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 80035ea:	4b07      	ldr	r3, [pc, #28]	; (8003608 <HAL_RTC_MspInit+0x94>)
 80035ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035f0:	4a05      	ldr	r2, [pc, #20]	; (8003608 <HAL_RTC_MspInit+0x94>)
 80035f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80035fa:	bf00      	nop
 80035fc:	37f0      	adds	r7, #240	; 0xf0
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	46007800 	.word	0x46007800
 8003608:	46020c00 	.word	0x46020c00

0800360c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b0c4      	sub	sp, #272	; 0x110
 8003610:	af00      	add	r7, sp, #0
 8003612:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003616:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800361a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800362c:	f107 0318 	add.w	r3, r7, #24
 8003630:	22e0      	movs	r2, #224	; 0xe0
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f00a fdc0 	bl	800e1ba <memset>
  if(hspi->Instance==SPI1)
 800363a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800363e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a41      	ldr	r2, [pc, #260]	; (800374c <HAL_SPI_MspInit+0x140>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d17a      	bne.n	8003742 <HAL_SPI_MspInit+0x136>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800364c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8003658:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800365c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003660:	f107 0318 	add.w	r3, r7, #24
 8003664:	4618      	mov	r0, r3
 8003666:	f006 f897 	bl	8009798 <HAL_RCCEx_PeriphCLKConfig>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8003670:	f7fe ff94 	bl	800259c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003674:	4b36      	ldr	r3, [pc, #216]	; (8003750 <HAL_SPI_MspInit+0x144>)
 8003676:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800367a:	4a35      	ldr	r2, [pc, #212]	; (8003750 <HAL_SPI_MspInit+0x144>)
 800367c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003680:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003684:	4b32      	ldr	r3, [pc, #200]	; (8003750 <HAL_SPI_MspInit+0x144>)
 8003686:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800368a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003692:	4b2f      	ldr	r3, [pc, #188]	; (8003750 <HAL_SPI_MspInit+0x144>)
 8003694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003698:	4a2d      	ldr	r2, [pc, #180]	; (8003750 <HAL_SPI_MspInit+0x144>)
 800369a:	f043 0302 	orr.w	r3, r3, #2
 800369e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036a2:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <HAL_SPI_MspInit+0x144>)
 80036a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036a8:	f003 0202 	and.w	r2, r3, #2
 80036ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036ba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80036be:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c0:	4b23      	ldr	r3, [pc, #140]	; (8003750 <HAL_SPI_MspInit+0x144>)
 80036c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036c6:	4a22      	ldr	r2, [pc, #136]	; (8003750 <HAL_SPI_MspInit+0x144>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036d0:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <HAL_SPI_MspInit+0x144>)
 80036d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036d6:	f003 0201 	and.w	r2, r3, #1
 80036da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036ec:	681b      	ldr	r3, [r3, #0]
    PB0     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f4:	2302      	movs	r3, #2
 80036f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003700:	2300      	movs	r3, #0
 8003702:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003706:	2305      	movs	r3, #5
 8003708:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800370c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003710:	4619      	mov	r1, r3
 8003712:	4810      	ldr	r0, [pc, #64]	; (8003754 <HAL_SPI_MspInit+0x148>)
 8003714:	f001 fe66 	bl	80053e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 8003718:	23e0      	movs	r3, #224	; 0xe0
 800371a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371e:	2302      	movs	r3, #2
 8003720:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372a:	2300      	movs	r3, #0
 800372c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003730:	2305      	movs	r3, #5
 8003732:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003736:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800373a:	4619      	mov	r1, r3
 800373c:	4806      	ldr	r0, [pc, #24]	; (8003758 <HAL_SPI_MspInit+0x14c>)
 800373e:	f001 fe51 	bl	80053e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003742:	bf00      	nop
 8003744:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40013000 	.word	0x40013000
 8003750:	46020c00 	.word	0x46020c00
 8003754:	42020400 	.word	0x42020400
 8003758:	42020000 	.word	0x42020000

0800375c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08e      	sub	sp, #56	; 0x38
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800376c:	4b2e      	ldr	r3, [pc, #184]	; (8003828 <HAL_InitTick+0xcc>)
 800376e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003772:	4a2d      	ldr	r2, [pc, #180]	; (8003828 <HAL_InitTick+0xcc>)
 8003774:	f043 0310 	orr.w	r3, r3, #16
 8003778:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800377c:	4b2a      	ldr	r3, [pc, #168]	; (8003828 <HAL_InitTick+0xcc>)
 800377e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800378a:	f107 0210 	add.w	r2, r7, #16
 800378e:	f107 0314 	add.w	r3, r7, #20
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f005 ff15 	bl	80095c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800379a:	f005 fed7 	bl	800954c <HAL_RCC_GetPCLK1Freq>
 800379e:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	4a22      	ldr	r2, [pc, #136]	; (800382c <HAL_InitTick+0xd0>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	0c9b      	lsrs	r3, r3, #18
 80037aa:	3b01      	subs	r3, #1
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <HAL_InitTick+0xd4>)
 80037b0:	4a20      	ldr	r2, [pc, #128]	; (8003834 <HAL_InitTick+0xd8>)
 80037b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80037b4:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <HAL_InitTick+0xd4>)
 80037b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037bc:	4a1c      	ldr	r2, [pc, #112]	; (8003830 <HAL_InitTick+0xd4>)
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037c2:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <HAL_InitTick+0xd4>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037c8:	4b19      	ldr	r3, [pc, #100]	; (8003830 <HAL_InitTick+0xd4>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80037ce:	4818      	ldr	r0, [pc, #96]	; (8003830 <HAL_InitTick+0xd4>)
 80037d0:	f009 fc00 	bl	800cfd4 <HAL_TIM_Base_Init>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80037da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d118      	bne.n	8003814 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80037e2:	4813      	ldr	r0, [pc, #76]	; (8003830 <HAL_InitTick+0xd4>)
 80037e4:	f009 fc58 	bl	800d098 <HAL_TIM_Base_Start_IT>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80037ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10e      	bne.n	8003814 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b0f      	cmp	r3, #15
 80037fa:	d808      	bhi.n	800380e <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80037fc:	2200      	movs	r2, #0
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	2031      	movs	r0, #49	; 0x31
 8003802:	f000 fa1b 	bl	8003c3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003806:	4a0c      	ldr	r2, [pc, #48]	; (8003838 <HAL_InitTick+0xdc>)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	e002      	b.n	8003814 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003814:	2031      	movs	r0, #49	; 0x31
 8003816:	f000 fa2b 	bl	8003c70 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800381a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800381e:	4618      	mov	r0, r3
 8003820:	3738      	adds	r7, #56	; 0x38
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	46020c00 	.word	0x46020c00
 800382c:	431bde83 	.word	0x431bde83
 8003830:	200007e0 	.word	0x200007e0
 8003834:	40001000 	.word	0x40001000
 8003838:	20000004 	.word	0x20000004

0800383c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003840:	f005 ff08 	bl	8009654 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003844:	e7fe      	b.n	8003844 <NMI_Handler+0x8>

08003846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003846:	b480      	push	{r7}
 8003848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800384a:	e7fe      	b.n	800384a <HardFault_Handler+0x4>

0800384c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003850:	e7fe      	b.n	8003850 <MemManage_Handler+0x4>

08003852 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003852:	b480      	push	{r7}
 8003854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003856:	e7fe      	b.n	8003856 <BusFault_Handler+0x4>

08003858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800385c:	e7fe      	b.n	800385c <UsageFault_Handler+0x4>

0800385e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800385e:	b480      	push	{r7}
 8003860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800387a:	b480      	push	{r7}
 800387c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800389c:	4802      	ldr	r0, [pc, #8]	; (80038a8 <TIM6_IRQHandler+0x10>)
 800389e:	f009 fc9b 	bl	800d1d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	200007e0 	.word	0x200007e0

080038ac <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80038b0:	4802      	ldr	r0, [pc, #8]	; (80038bc <DMA2D_IRQHandler+0x10>)
 80038b2:	f000 fc65 	bl	8004180 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	2000016c 	.word	0x2000016c

080038c0 <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 80038c4:	4802      	ldr	r0, [pc, #8]	; (80038d0 <GPU2D_IRQHandler+0x10>)
 80038c6:	f001 ffa7 	bl	8005818 <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000238 	.word	0x20000238

080038d4 <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 80038d8:	4802      	ldr	r0, [pc, #8]	; (80038e4 <GPU2D_ER_IRQHandler+0x10>)
 80038da:	f001 ffc3 	bl	8005864 <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000238 	.word	0x20000238

080038e8 <GFXMMU_IRQHandler>:

/**
  * @brief This function handles GFXMMU global interrupt.
  */
void GFXMMU_IRQHandler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GFXMMU_IRQn 0 */

  /* USER CODE END GFXMMU_IRQn 0 */
  HAL_GFXMMU_IRQHandler(&hgfxmmu);
 80038ec:	4802      	ldr	r0, [pc, #8]	; (80038f8 <GFXMMU_IRQHandler+0x10>)
 80038ee:	f001 fd49 	bl	8005384 <HAL_GFXMMU_IRQHandler>
  /* USER CODE BEGIN GFXMMU_IRQn 1 */

  /* USER CODE END GFXMMU_IRQn 1 */
}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	200001f0 	.word	0x200001f0

080038fc <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003900:	4802      	ldr	r0, [pc, #8]	; (800390c <LTDC_IRQHandler+0x10>)
 8003902:	f002 ff45 	bl	8006790 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	200005a4 	.word	0x200005a4

08003910 <DSI_IRQHandler>:

/**
  * @brief This function handles DSIHOST global interrupt.
  */
void DSI_IRQHandler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8003914:	4802      	ldr	r0, [pc, #8]	; (8003920 <DSI_IRQHandler+0x10>)
 8003916:	f001 f88b 	bl	8004a30 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	200001cc 	.word	0x200001cc

08003924 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003928:	4b18      	ldr	r3, [pc, #96]	; (800398c <SystemInit+0x68>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392e:	4a17      	ldr	r2, [pc, #92]	; (800398c <SystemInit+0x68>)
 8003930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8003938:	4b15      	ldr	r3, [pc, #84]	; (8003990 <SystemInit+0x6c>)
 800393a:	2201      	movs	r2, #1
 800393c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800393e:	4b14      	ldr	r3, [pc, #80]	; (8003990 <SystemInit+0x6c>)
 8003940:	2200      	movs	r2, #0
 8003942:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003944:	4b12      	ldr	r3, [pc, #72]	; (8003990 <SystemInit+0x6c>)
 8003946:	2200      	movs	r2, #0
 8003948:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800394a:	4b11      	ldr	r3, [pc, #68]	; (8003990 <SystemInit+0x6c>)
 800394c:	2200      	movs	r2, #0
 800394e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8003950:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <SystemInit+0x6c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a0e      	ldr	r2, [pc, #56]	; (8003990 <SystemInit+0x6c>)
 8003956:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800395a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800395e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <SystemInit+0x6c>)
 8003962:	2200      	movs	r2, #0
 8003964:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003966:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <SystemInit+0x6c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a09      	ldr	r2, [pc, #36]	; (8003990 <SystemInit+0x6c>)
 800396c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003970:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003972:	4b07      	ldr	r3, [pc, #28]	; (8003990 <SystemInit+0x6c>)
 8003974:	2200      	movs	r2, #0
 8003976:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <SystemInit+0x68>)
 800397a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800397e:	609a      	str	r2, [r3, #8]
  #endif
}
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	e000ed00 	.word	0xe000ed00
 8003990:	46020c00 	.word	0x46020c00

08003994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039cc <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003998:	f7ff ffc4 	bl	8003924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800399c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800399e:	e003      	b.n	80039a8 <LoopCopyDataInit>

080039a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80039a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80039a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80039a6:	3104      	adds	r1, #4

080039a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80039a8:	480a      	ldr	r0, [pc, #40]	; (80039d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80039ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80039ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80039b0:	d3f6      	bcc.n	80039a0 <CopyDataInit>
	ldr	r2, =_sbss
 80039b2:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80039b4:	e002      	b.n	80039bc <LoopFillZerobss>

080039b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80039b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80039b8:	f842 3b04 	str.w	r3, [r2], #4

080039bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80039bc:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <LoopForever+0x16>)
	cmp	r2, r3
 80039be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80039c0:	d3f9      	bcc.n	80039b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039c2:	f00a fc03 	bl	800e1cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80039c6:	f7fd fb6d 	bl	80010a4 <main>

080039ca <LoopForever>:

LoopForever:
    b LoopForever
 80039ca:	e7fe      	b.n	80039ca <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80039cc:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 80039d0:	0800e33c 	.word	0x0800e33c
	ldr	r0, =_sdata
 80039d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80039d8:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 80039dc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80039e0:	20000854 	.word	0x20000854

080039e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80039e4:	e7fe      	b.n	80039e4 <ADC1_2_IRQHandler>
	...

080039e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039ec:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <HAL_Init+0x4c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a10      	ldr	r2, [pc, #64]	; (8003a34 <HAL_Init+0x4c>)
 80039f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039f8:	2003      	movs	r0, #3
 80039fa:	f000 f914 	bl	8003c26 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80039fe:	f005 fc89 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 8003a02:	4602      	mov	r2, r0
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <HAL_Init+0x50>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	490b      	ldr	r1, [pc, #44]	; (8003a3c <HAL_Init+0x54>)
 8003a0e:	5ccb      	ldrb	r3, [r1, r3]
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
 8003a14:	4a0a      	ldr	r2, [pc, #40]	; (8003a40 <HAL_Init+0x58>)
 8003a16:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a18:	200f      	movs	r0, #15
 8003a1a:	f7ff fe9f 	bl	800375c <HAL_InitTick>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e002      	b.n	8003a2e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a28:	f7fe fdbe 	bl	80025a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40022000 	.word	0x40022000
 8003a38:	46020c00 	.word	0x46020c00
 8003a3c:	0800e22c 	.word	0x0800e22c
 8003a40:	20000000 	.word	0x20000000

08003a44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_IncTick+0x20>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_IncTick+0x24>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4413      	add	r3, r2
 8003a54:	4a04      	ldr	r2, [pc, #16]	; (8003a68 <HAL_IncTick+0x24>)
 8003a56:	6013      	str	r3, [r2, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000008 	.word	0x20000008
 8003a68:	2000082c 	.word	0x2000082c

08003a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a70:	4b03      	ldr	r3, [pc, #12]	; (8003a80 <HAL_GetTick+0x14>)
 8003a72:	681b      	ldr	r3, [r3, #0]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	2000082c 	.word	0x2000082c

08003a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a8c:	f7ff ffee 	bl	8003a6c <HAL_GetTick>
 8003a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d005      	beq.n	8003aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <HAL_Delay+0x44>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003aaa:	bf00      	nop
 8003aac:	f7ff ffde 	bl	8003a6c <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d8f7      	bhi.n	8003aac <HAL_Delay+0x28>
  {
  }
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000008 	.word	0x20000008

08003acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <__NVIC_SetPriorityGrouping+0x44>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ae8:	4013      	ands	r3, r2
 8003aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003afe:	4a04      	ldr	r2, [pc, #16]	; (8003b10 <__NVIC_SetPriorityGrouping+0x44>)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	60d3      	str	r3, [r2, #12]
}
 8003b04:	bf00      	nop
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	e000ed00 	.word	0xe000ed00

08003b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <__NVIC_GetPriorityGrouping+0x18>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	0a1b      	lsrs	r3, r3, #8
 8003b1e:	f003 0307 	and.w	r3, r3, #7
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	e000ed00 	.word	0xe000ed00

08003b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	db0b      	blt.n	8003b5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	f003 021f 	and.w	r2, r3, #31
 8003b48:	4907      	ldr	r1, [pc, #28]	; (8003b68 <__NVIC_EnableIRQ+0x38>)
 8003b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	2001      	movs	r0, #1
 8003b52:	fa00 f202 	lsl.w	r2, r0, r2
 8003b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	e000e100 	.word	0xe000e100

08003b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	6039      	str	r1, [r7, #0]
 8003b76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	db0a      	blt.n	8003b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	490c      	ldr	r1, [pc, #48]	; (8003bb8 <__NVIC_SetPriority+0x4c>)
 8003b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b8a:	0112      	lsls	r2, r2, #4
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	440b      	add	r3, r1
 8003b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b94:	e00a      	b.n	8003bac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	4908      	ldr	r1, [pc, #32]	; (8003bbc <__NVIC_SetPriority+0x50>)
 8003b9c:	88fb      	ldrh	r3, [r7, #6]
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	3b04      	subs	r3, #4
 8003ba4:	0112      	lsls	r2, r2, #4
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	440b      	add	r3, r1
 8003baa:	761a      	strb	r2, [r3, #24]
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	e000e100 	.word	0xe000e100
 8003bbc:	e000ed00 	.word	0xe000ed00

08003bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b089      	sub	sp, #36	; 0x24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f1c3 0307 	rsb	r3, r3, #7
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	bf28      	it	cs
 8003bde:	2304      	movcs	r3, #4
 8003be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	3304      	adds	r3, #4
 8003be6:	2b06      	cmp	r3, #6
 8003be8:	d902      	bls.n	8003bf0 <NVIC_EncodePriority+0x30>
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3b03      	subs	r3, #3
 8003bee:	e000      	b.n	8003bf2 <NVIC_EncodePriority+0x32>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43da      	mvns	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	401a      	ands	r2, r3
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c08:	f04f 31ff 	mov.w	r1, #4294967295
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c12:	43d9      	mvns	r1, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c18:	4313      	orrs	r3, r2
         );
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3724      	adds	r7, #36	; 0x24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff ff4c 	bl	8003acc <__NVIC_SetPriorityGrouping>
}
 8003c34:	bf00      	nop
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c4a:	f7ff ff63 	bl	8003b14 <__NVIC_GetPriorityGrouping>
 8003c4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	6978      	ldr	r0, [r7, #20]
 8003c56:	f7ff ffb3 	bl	8003bc0 <NVIC_EncodePriority>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c60:	4611      	mov	r1, r2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff ff82 	bl	8003b6c <__NVIC_SetPriority>
}
 8003c68:	bf00      	nop
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff ff56 	bl	8003b30 <__NVIC_EnableIRQ>
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e054      	b.n	8003d48 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	7f5b      	ldrb	r3, [r3, #29]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d105      	bne.n	8003cb4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fe fd0e 	bl	80026d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	791b      	ldrb	r3, [r3, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10c      	bne.n	8003cdc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a22      	ldr	r2, [pc, #136]	; (8003d50 <HAL_CRC_Init+0xc4>)
 8003cc8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0218 	bic.w	r2, r2, #24
 8003cd8:	609a      	str	r2, [r3, #8]
 8003cda:	e00c      	b.n	8003cf6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6899      	ldr	r1, [r3, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f834 	bl	8003d54 <HAL_CRCEx_Polynomial_Set>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e028      	b.n	8003d48 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	795b      	ldrb	r3, [r3, #5]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d105      	bne.n	8003d0a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f04f 32ff 	mov.w	r2, #4294967295
 8003d06:	611a      	str	r2, [r3, #16]
 8003d08:	e004      	b.n	8003d14 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6912      	ldr	r2, [r2, #16]
 8003d12:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695a      	ldr	r2, [r3, #20]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699a      	ldr	r2, [r3, #24]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	04c11db7 	.word	0x04c11db7

08003d54 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003d64:	231f      	movs	r3, #31
 8003d66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d102      	bne.n	8003d78 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	75fb      	strb	r3, [r7, #23]
 8003d76:	e063      	b.n	8003e40 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003d78:	bf00      	nop
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1e5a      	subs	r2, r3, #1
 8003d7e:	613a      	str	r2, [r7, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d009      	beq.n	8003d98 <HAL_CRCEx_Polynomial_Set+0x44>
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f003 031f 	and.w	r3, r3, #31
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b18      	cmp	r3, #24
 8003d9c:	d846      	bhi.n	8003e2c <HAL_CRCEx_Polynomial_Set+0xd8>
 8003d9e:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da4:	08003e33 	.word	0x08003e33
 8003da8:	08003e2d 	.word	0x08003e2d
 8003dac:	08003e2d 	.word	0x08003e2d
 8003db0:	08003e2d 	.word	0x08003e2d
 8003db4:	08003e2d 	.word	0x08003e2d
 8003db8:	08003e2d 	.word	0x08003e2d
 8003dbc:	08003e2d 	.word	0x08003e2d
 8003dc0:	08003e2d 	.word	0x08003e2d
 8003dc4:	08003e21 	.word	0x08003e21
 8003dc8:	08003e2d 	.word	0x08003e2d
 8003dcc:	08003e2d 	.word	0x08003e2d
 8003dd0:	08003e2d 	.word	0x08003e2d
 8003dd4:	08003e2d 	.word	0x08003e2d
 8003dd8:	08003e2d 	.word	0x08003e2d
 8003ddc:	08003e2d 	.word	0x08003e2d
 8003de0:	08003e2d 	.word	0x08003e2d
 8003de4:	08003e15 	.word	0x08003e15
 8003de8:	08003e2d 	.word	0x08003e2d
 8003dec:	08003e2d 	.word	0x08003e2d
 8003df0:	08003e2d 	.word	0x08003e2d
 8003df4:	08003e2d 	.word	0x08003e2d
 8003df8:	08003e2d 	.word	0x08003e2d
 8003dfc:	08003e2d 	.word	0x08003e2d
 8003e00:	08003e2d 	.word	0x08003e2d
 8003e04:	08003e09 	.word	0x08003e09
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b06      	cmp	r3, #6
 8003e0c:	d913      	bls.n	8003e36 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003e12:	e010      	b.n	8003e36 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	2b07      	cmp	r3, #7
 8003e18:	d90f      	bls.n	8003e3a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003e1e:	e00c      	b.n	8003e3a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b0f      	cmp	r3, #15
 8003e24:	d90b      	bls.n	8003e3e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003e2a:	e008      	b.n	8003e3e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	75fb      	strb	r3, [r7, #23]
        break;
 8003e30:	e006      	b.n	8003e40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003e32:	bf00      	nop
 8003e34:	e004      	b.n	8003e40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003e36:	bf00      	nop
 8003e38:	e002      	b.n	8003e40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003e3a:	bf00      	nop
 8003e3c:	e000      	b.n	8003e40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003e3e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10d      	bne.n	8003e62 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f023 0118 	bic.w	r1, r3, #24
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e037      	b.n	8003ef2 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d119      	bne.n	8003ec2 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a1a      	ldr	r2, [pc, #104]	; (8003efc <HAL_DCACHE_Init+0x8c>)
 8003e92:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a1a      	ldr	r2, [pc, #104]	; (8003f00 <HAL_DCACHE_Init+0x90>)
 8003e98:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <HAL_DCACHE_Init+0x94>)
 8003e9e:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a19      	ldr	r2, [pc, #100]	; (8003f08 <HAL_DCACHE_Init+0x98>)
 8003ea4:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a18      	ldr	r2, [pc, #96]	; (8003f0c <HAL_DCACHE_Init+0x9c>)
 8003eaa:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d102      	bne.n	8003eba <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <HAL_DCACHE_Init+0xa0>)
 8003eb8:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f814 	bl	8003f14 <HAL_DCACHE_Enable>
 8003eec:	4603      	mov	r3, r0
 8003eee:	73fb      	strb	r3, [r7, #15]

  return status;
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	08003fb3 	.word	0x08003fb3
 8003f00:	08003f63 	.word	0x08003f63
 8003f04:	08003f77 	.word	0x08003f77
 8003f08:	08003f9f 	.word	0x08003f9f
 8003f0c:	08003f8b 	.word	0x08003f8b
 8003f10:	08002715 	.word	0x08002715

08003f14 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e015      	b.n	8003f56 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f003 0309 	and.w	r3, r3, #9
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	73fb      	strb	r3, [r7, #15]
 8003f3c:	e00a      	b.n	8003f54 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
  }

  return status;
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003fce:	f7ff fd4d 	bl	8003a6c <HAL_GetTick>
 8003fd2:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e06b      	b.n	80040b6 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d008      	beq.n	8003ffc <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2220      	movs	r2, #32
 8003fee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e05c      	b.n	80040b6 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0204 	orr.w	r2, r2, #4
 800400a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2205      	movs	r2, #5
 8004010:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004014:	e020      	b.n	8004058 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004016:	f7ff fd29 	bl	8003a6c <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b05      	cmp	r3, #5
 8004022:	d919      	bls.n	8004058 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004028:	f043 0210 	orr.w	r2, r3, #16
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2203      	movs	r2, #3
 8004034:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004048:	2201      	movs	r2, #1
 800404a:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e02e      	b.n	80040b6 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0d7      	beq.n	8004016 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0202 	orr.w	r2, r2, #2
 8004074:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2204      	movs	r2, #4
 800407a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8004086:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a0:	2201      	movs	r2, #1
 80040a2:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2200      	movs	r2, #0
 80040aa:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e053      	b.n	8004178 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d106      	bne.n	80040ea <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7fe fb4f 	bl	8002788 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2202      	movs	r2, #2
 80040ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80040fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6851      	ldr	r1, [r2, #4]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	69d2      	ldr	r2, [r2, #28]
 8004108:	4311      	orrs	r1, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	430b      	orrs	r3, r1
 8004110:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004118:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6891      	ldr	r1, [r2, #8]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6992      	ldr	r2, [r2, #24]
 8004128:	4311      	orrs	r1, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	430b      	orrs	r3, r1
 8004130:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	0c1b      	lsrs	r3, r3, #16
 800413a:	041b      	lsls	r3, r3, #16
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	68d1      	ldr	r1, [r2, #12]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	430b      	orrs	r3, r1
 8004146:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	051a      	lsls	r2, r3, #20
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	055b      	lsls	r3, r3, #21
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d026      	beq.n	80041f0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d021      	beq.n	80041f0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ba:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c0:	f043 0201 	orr.w	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2201      	movs	r2, #1
 80041ce:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2204      	movs	r2, #4
 80041d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d026      	beq.n	8004248 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d021      	beq.n	8004248 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004212:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2220      	movs	r2, #32
 800421a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004220:	f043 0202 	orr.w	r2, r3, #2
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2204      	movs	r2, #4
 800422c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d026      	beq.n	80042a0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004258:	2b00      	cmp	r3, #0
 800425a:	d021      	beq.n	80042a0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800426a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2208      	movs	r2, #8
 8004272:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004278:	f043 0204 	orr.w	r2, r3, #4
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2204      	movs	r2, #4
 8004284:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d013      	beq.n	80042d2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00e      	beq.n	80042d2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2204      	movs	r2, #4
 80042ca:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f853 	bl	8004378 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d024      	beq.n	8004326 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01f      	beq.n	8004326 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042f4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2202      	movs	r2, #2
 80042fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferCpltCallback != NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01f      	beq.n	8004370 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d01a      	beq.n	8004370 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004348:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2210      	movs	r2, #16
 8004350:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f80e 	bl	800438c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004370:	bf00      	nop
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_DMA2D_ConfigLayer+0x20>
 80043bc:	2302      	movs	r3, #2
 80043be:	e084      	b.n	80044ca <HAL_DMA2D_ConfigLayer+0x12a>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	4613      	mov	r3, r2
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	4413      	add	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	3328      	adds	r3, #40	; 0x28
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	4413      	add	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	041b      	lsls	r3, r3, #16
 80043ec:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80043f4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004400:	4b35      	ldr	r3, [pc, #212]	; (80044d8 <HAL_DMA2D_ConfigLayer+0x138>)
 8004402:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b0a      	cmp	r3, #10
 800440a:	d003      	beq.n	8004414 <HAL_DMA2D_ConfigLayer+0x74>
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b09      	cmp	r3, #9
 8004412:	d107      	bne.n	8004424 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	e005      	b.n	8004430 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	061b      	lsls	r3, r3, #24
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d120      	bne.n	8004478 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	43db      	mvns	r3, r3
 8004440:	ea02 0103 	and.w	r1, r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	430a      	orrs	r2, r1
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b0a      	cmp	r3, #10
 800445e:	d003      	beq.n	8004468 <HAL_DMA2D_ConfigLayer+0xc8>
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b09      	cmp	r3, #9
 8004466:	d127      	bne.n	80044b8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004474:	629a      	str	r2, [r3, #40]	; 0x28
 8004476:	e01f      	b.n	80044b8 <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69da      	ldr	r2, [r3, #28]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	43db      	mvns	r3, r3
 8004482:	ea02 0103 	and.w	r1, r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	430a      	orrs	r2, r1
 800448e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b0a      	cmp	r3, #10
 80044a0:	d003      	beq.n	80044aa <HAL_DMA2D_ConfigLayer+0x10a>
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b09      	cmp	r3, #9
 80044a8:	d106      	bne.n	80044b8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044b6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	371c      	adds	r7, #28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	ff33000f 	.word	0xff33000f

080044dc <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80044f4:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	; 0xc04
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	00da      	lsls	r2, r3, #3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	220e      	movs	r2, #14
 8004516:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	; 0xc70
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 021f 	bic.w	r2, r2, #31
 800452a:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6912      	ldr	r2, [r2, #16]
 8004536:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	220e      	movs	r2, #14
 8004540:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	; 0xd08
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 021f 	bic.w	r2, r2, #31
 8004554:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6912      	ldr	r2, [r2, #16]
 8004560:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	220e      	movs	r2, #14
 800456a:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	; 0xc5c
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800457e:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004592:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d007      	beq.n	80045ae <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d003      	beq.n	80045ae <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 80045aa:	2b05      	cmp	r3, #5
 80045ac:	d10a      	bne.n	80045c4 <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2200      	movs	r2, #0
 80045be:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 80045c2:	e02c      	b.n	800461e <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d007      	beq.n	80045e4 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d003      	beq.n	80045e4 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 80045e0:	2b06      	cmp	r3, #6
 80045e2:	d10a      	bne.n	80045fa <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2210      	movs	r2, #16
 80045ea:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2210      	movs	r2, #16
 80045f4:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 80045f8:	e011      	b.n	800461e <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	2b07      	cmp	r3, #7
 8004600:	d003      	beq.n	800460a <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8004606:	2b08      	cmp	r3, #8
 8004608:	d109      	bne.n	800461e <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2220      	movs	r2, #32
 8004610:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2220      	movs	r2, #32
 800461a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	; 0xc60
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 020f 	bic.w	r2, r2, #15
 800462e:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	; 0xcf8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 020f 	bic.w	r2, r2, #15
 8004642:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6952      	ldr	r2, [r2, #20]
 800464e:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6952      	ldr	r2, [r2, #20]
 800465a:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004684:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	075a      	lsls	r2, r3, #29
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80046b0:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	031a      	lsls	r2, r3, #12
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	021a      	lsls	r2, r3, #8
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0c3      	b.n	800488c <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	7e5b      	ldrb	r3, [r3, #25]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d102      	bne.n	8004714 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fe f862 	bl	80027d8 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2203      	movs	r2, #3
 8004718:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800472a:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 800472e:	2002      	movs	r0, #2
 8004730:	f7ff f9a8 	bl	8003a84 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	4b54      	ldr	r3, [pc, #336]	; (8004894 <HAL_DSI_Init+0x1a4>)
 8004742:	400b      	ands	r3, r1
 8004744:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800475c:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004764:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7ff feb3 	bl	80044dc <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 8004776:	6839      	ldr	r1, [r7, #0]
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff ff76 	bl	800466a <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800477e:	2300      	movs	r3, #0
 8004780:	60bb      	str	r3, [r7, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80047a6:	2001      	movs	r0, #1
 80047a8:	f7ff f96c 	bl	8003a84 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80047ac:	f7ff f95e 	bl	8003a6c <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80047b2:	e008      	b.n	80047c6 <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80047b4:	f7ff f95a 	bl	8003a6c <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	; 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e062      	b.n	800488c <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80047ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0ee      	beq.n	80047b4 <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0206 	orr.w	r2, r2, #6
 80047e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0203 	bic.w	r2, r2, #3
 80047fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 0201 	orr.w	r2, r2, #1
 8004814:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0203 	bic.w	r2, r2, #3
 8004828:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004850:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6899      	ldr	r1, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2200      	movs	r2, #0
 800486a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2200      	movs	r2, #0
 8004874:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	e0000003 	.word	0xe0000003

08004898 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	7e1b      	ldrb	r3, [r3, #24]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_DSI_ConfigErrorMonitor+0x16>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e0ba      	b.n	8004a24 <HAL_DSI_ConfigErrorMonitor+0x18c>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00b      	beq.n	80048f0 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6812      	ldr	r2, [r2, #0]
 80048e4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80048e8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80048ec:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d009      	beq.n	800490e <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800490a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d009      	beq.n	800492c <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0201 	orr.w	r2, r2, #1
 8004928:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d009      	beq.n	800494a <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0202 	orr.w	r2, r2, #2
 8004946:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b00      	cmp	r3, #0
 8004952:	d009      	beq.n	8004968 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 020c 	orr.w	r2, r2, #12
 8004964:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	d009      	beq.n	8004986 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0210 	orr.w	r2, r2, #16
 8004982:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498c:	2b00      	cmp	r3, #0
 800498e:	d009      	beq.n	80049a4 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0220 	orr.w	r2, r2, #32
 80049a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d009      	beq.n	80049c2 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049be:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d009      	beq.n	80049e0 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049dc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d009      	beq.n	80049fe <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80049fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d009      	beq.n	8004a1c <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004a18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00f      	beq.n	8004a68 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f8b8 	bl	8004bd8 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00f      	beq.n	8004a98 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d007      	beq.n	8004a98 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f8aa 	bl	8004bec <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8097 	beq.w	8004bd0 <HAL_DSI_IRQHandler+0x1a0>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004aaa:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004ac2:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f043 0201 	orr.w	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d005      	beq.n	8004afc <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	f043 0202 	orr.w	r2, r3, #2
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	f043 0204 	orr.w	r2, r3, #4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	f043 0208 	orr.w	r2, r3, #8
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f003 030c 	and.w	r3, r3, #12
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f043 0210 	orr.w	r2, r3, #16
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d005      	beq.n	8004b54 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	f043 0220 	orr.w	r2, r3, #32
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PBU_MASK) != 0U)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <HAL_DSI_IRQHandler+0x192>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PBU;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	61da      	str	r2, [r3, #28]
    }
    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <HAL_DSI_IRQHandler+0x1a0>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f818 	bl	8004c00 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004bd0:	bf00      	nop
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	7e1b      	ldrb	r3, [r3, #24]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <HAL_DSI_SetGenericVCID+0x16>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e019      	b.n	8004c5e <HAL_DSI_SetGenericVCID+0x4a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6b19      	ldr	r1, [r3, #48]	; 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	7e1b      	ldrb	r3, [r3, #24]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e0c5      	b.n	8004e0c <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0201 	orr.w	r2, r2, #1
 8004c94:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0201 	bic.w	r2, r2, #1
 8004ca6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0203 	bic.w	r2, r2, #3
 8004ccc:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68d9      	ldr	r1, [r3, #12]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695a      	ldr	r2, [r3, #20]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0207 	bic.w	r2, r2, #7
 8004cee:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6959      	ldr	r1, [r3, #20]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	69da      	ldr	r2, [r3, #28]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 020f 	bic.w	r2, r2, #15
 8004d1c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6919      	ldr	r1, [r3, #16]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 020e 	bic.w	r2, r2, #14
 8004d40:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	005a      	lsls	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6812      	ldr	r2, [r2, #0]
 8004d66:	0c1b      	lsrs	r3, r3, #16
 8004d68:	041b      	lsls	r3, r3, #16
 8004d6a:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004d8e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0201 	bic.w	r2, r2, #1
 8004dc8:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f042 0201 	orr.w	r2, r2, #1
 8004dec:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f042 0202 	orr.w	r2, r2, #2
 8004e00:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	7e1b      	ldrb	r3, [r3, #24]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <HAL_DSI_ConfigCommand+0x16>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e049      	b.n	8004ec2 <HAL_DSI_ConfigCommand+0xaa>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4b24      	ldr	r3, [pc, #144]	; (8004ed0 <HAL_DSI_ConfigCommand+0xb8>)
 8004e40:	400b      	ands	r3, r1
 8004e42:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004e52:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004e58:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004e5e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004e64:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004e6a:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004e70:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004e76:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004e7c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004e82:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004e88:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004e8e:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0202 	bic.w	r2, r2, #2
 8004ea6:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	fef080ff 	.word	0xfef080ff

08004ed4 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	7e1b      	ldrb	r3, [r3, #24]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_DSI_ConfigFlowControl+0x16>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e016      	b.n	8004f18 <HAL_DSI_ConfigFlowControl+0x44>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	7e1b      	ldrb	r3, [r3, #24]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_DSI_ConfigPhyTimer+0x16>
 8004f36:	2302      	movs	r3, #2
 8004f38:	e084      	b.n	8005044 <HAL_DSI_ConfigPhyTimer+0x120>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	441a      	add	r2, r3
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6859      	ldr	r1, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695a      	ldr	r2, [r3, #20]
 8004f56:	4613      	mov	r3, r2
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	4413      	add	r3, r2
 8004f5c:	18ca      	adds	r2, r1, r3
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	441a      	add	r2, r3
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	bf38      	it	cc
 8004f7e:	4613      	movcc	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004f92:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	041a      	lsls	r2, r3, #16
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004fc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	041b      	lsls	r3, r3, #16
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6812      	ldr	r2, [r2, #0]
 8004fee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004ff2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ff6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005020:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	021a      	lsls	r2, r3, #8
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	7e1b      	ldrb	r3, [r3, #24]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <HAL_DSI_ConfigHostTimeouts+0x16>
 8005062:	2302      	movs	r3, #2
 8005064:	e0b4      	b.n	80051d0 <HAL_DSI_ConfigHostTimeouts+0x180>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800507a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6899      	ldr	r1, [r3, #8]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	021a      	lsls	r2, r3, #8
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	b292      	uxth	r2, r2
 800509c:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	041a      	lsls	r2, r3, #16
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6812      	ldr	r2, [r2, #0]
 80050bc:	0c1b      	lsrs	r3, r3, #16
 80050be:	041b      	lsls	r3, r3, #16
 80050c0:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6812      	ldr	r2, [r2, #0]
 80050de:	0c1b      	lsrs	r3, r3, #16
 80050e0:	041b      	lsls	r3, r3, #16
 80050e2:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6812      	ldr	r2, [r2, #0]
 8005102:	0c1b      	lsrs	r3, r3, #16
 8005104:	041b      	lsls	r3, r3, #16
 8005106:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6812      	ldr	r2, [r2, #0]
 800512c:	0c1b      	lsrs	r3, r3, #16
 800512e:	041b      	lsls	r3, r3, #16
 8005130:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	695a      	ldr	r2, [r3, #20]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800515a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	0c1b      	lsrs	r3, r3, #16
 8005182:	041b      	lsls	r3, r3, #16
 8005184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	69da      	ldr	r2, [r3, #28]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6812      	ldr	r2, [r2, #0]
 80051aa:	0c1b      	lsrs	r3, r3, #16
 80051ac:	041b      	lsls	r3, r3, #16
 80051ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	6a1a      	ldr	r2, [r3, #32]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_GFXMMU_Init>:
  *         GFXMMU_InitTypeDef structure and initialize the associated handle.
  * @param  hgfxmmu GFXMMU handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GFXMMU_Init(GFXMMU_HandleTypeDef *hgfxmmu)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	73fb      	strb	r3, [r7, #15]

  /* Check GFXMMU handle */
  if (hgfxmmu == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d102      	bne.n	80051f4 <HAL_GFXMMU_Init+0x18>
  {
    status = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	73fb      	strb	r3, [r7, #15]
 80051f2:	e06e      	b.n	80052d2 <HAL_GFXMMU_Init+0xf6>
      hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
    }
    hgfxmmu->MspInitCallback(hgfxmmu);
#else
    /* Call GFXMMU MSP init function */
    HAL_GFXMMU_MspInit(hgfxmmu);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7fd fb73 	bl	80028e0 <HAL_GFXMMU_MspInit>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */

    /* Configure GFXMMU_CR register */
    hgfxmmu->Instance->CR = 0U;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
    hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlocksPerLine);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6819      	ldr	r1, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	601a      	str	r2, [r3, #0]
#if defined(GFXMMU_CR_CE)
    if (hgfxmmu->Init.CachePrefetch.Activation == ENABLE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	7f1b      	ldrb	r3, [r3, #28]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d12c      	bne.n	8005276 <HAL_GFXMMU_Init+0x9a>
    {
      assert_param(IS_GFXMMU_CACHE_LOCK(hgfxmmu->Init.CachePrefetch.CacheLock));
      assert_param(IS_GFXMMU_PREFETCH(hgfxmmu->Init.CachePrefetch.Prefetch));
      assert_param(IS_GFXMMU_OUTTER_BUFFERABILITY(hgfxmmu->Init.CachePrefetch.OutterBufferability));
      assert_param(IS_GFXMMU_OUTTER_CACHABILITY(hgfxmmu->Init.CachePrefetch.OutterCachability));
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a19      	ldr	r1, [r3, #32]
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 800522a:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 8005230:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterCachability);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 8005236:	430b      	orrs	r3, r1
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005242:	601a      	str	r2, [r3, #0]
      if (hgfxmmu->Init.CachePrefetch.CacheLock == GFXMMU_CACHE_LOCK_ENABLE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800524c:	d10b      	bne.n	8005266 <HAL_GFXMMU_Init+0x8a>
      {
        assert_param(IS_GFXMMU_CACHE_LOCK_BUFFER(hgfxmmu->Init.CachePrefetch.CacheLockBuffer));
        assert_param(IS_GFXMMU_CACHE_FORCE(hgfxmmu->Init.CachePrefetch.CacheForce));
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6819      	ldr	r1, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                  hgfxmmu->Init.CachePrefetch.CacheForce);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	601a      	str	r2, [r3, #0]
      }

      /* Force invalidate cache if cache is enabled */
      hgfxmmu->Instance->CCR |= GFXMMU_CACHE_FORCE_INVALIDATE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0202 	orr.w	r2, r2, #2
 8005274:	60da      	str	r2, [r3, #12]
      assert_param(IS_GFXMMU_ADDRESSCACHE_LOCK_BUFFER(hgfxmmu->Init.AddressCache.AddressCacheLockBuffer));
      hgfxmmu->Instance->CR |= GFXMMU_CR_ACE |
                               hgfxmmu->Init.AddressCache.AddressCacheLockBuffer;
    }
#endif /* GFXMMU_CR_ACE */
    if (hgfxmmu->Init.Interrupts.Activation == ENABLE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800527c:	2b01      	cmp	r3, #1
 800527e:	d108      	bne.n	8005292 <HAL_GFXMMU_Init+0xb6>
    {
      assert_param(IS_GFXMMU_INTERRUPTS(hgfxmmu->Init.Interrupts.UsedInterrupts));
      hgfxmmu->Instance->CR |= hgfxmmu->Init.Interrupts.UsedInterrupts;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6819      	ldr	r1, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	601a      	str	r2, [r3, #0]
    }

    /* Configure default value on GFXMMU_DVR register */
    hgfxmmu->Instance->DVR = hgfxmmu->Init.DefaultValue;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6892      	ldr	r2, [r2, #8]
 800529a:	611a      	str	r2, [r3, #16]

    /* Configure physical buffer addresses on GFXMMU_BxCR registers */
    hgfxmmu->Instance->B0CR = hgfxmmu->Init.Buffers.Buf0Address;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68d2      	ldr	r2, [r2, #12]
 80052a4:	621a      	str	r2, [r3, #32]
    hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6912      	ldr	r2, [r2, #16]
 80052ae:	625a      	str	r2, [r3, #36]	; 0x24
    hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6952      	ldr	r2, [r2, #20]
 80052b8:	629a      	str	r2, [r3, #40]	; 0x28
    hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6992      	ldr	r2, [r2, #24]
 80052c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Reset GFXMMU error code */
    hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set GFXMMU to ready state */
    hgfxmmu->State = HAL_GFXMMU_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }
  /* Return function status */
  return status;
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_GFXMMU_ConfigLut>:
  */
HAL_StatusTypeDef HAL_GFXMMU_ConfigLut(GFXMMU_HandleTypeDef *hgfxmmu,
                                       uint32_t FirstLine,
                                       uint32_t LinesNumber,
                                       uint32_t Address)
{
 80052dc:	b480      	push	{r7}
 80052de:	b08b      	sub	sp, #44	; 0x2c
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
 80052e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
  assert_param(IS_GFXMMU_LUT_LINE(FirstLine));
  assert_param(IS_GFXMMU_LUT_LINES_NUMBER(LinesNumber));

  /* Check GFXMMU state and coherent parameters */
  if ((hgfxmmu->State != HAL_GFXMMU_STATE_READY) || ((FirstLine + LinesNumber) > 1024U))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d105      	bne.n	8005306 <HAL_GFXMMU_ConfigLut+0x2a>
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4413      	add	r3, r2
 8005300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005304:	d903      	bls.n	800530e <HAL_GFXMMU_ConfigLut+0x32>
  {
    status = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800530c:	e032      	b.n	8005374 <HAL_GFXMMU_ConfigLut+0x98>
    uint32_t current_line;
    uint32_t lutxl_address;
    uint32_t lutxh_address;

    /* Initialize local variables */
    current_address = Address;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	623b      	str	r3, [r7, #32]
    current_line    = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
    lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
    lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * FirstLine) + 1U]);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	3301      	adds	r3, #1
 8005332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

    /* Copy LUT from flash to look up RAM */
    while (current_line < LinesNumber)
 800533c:	e016      	b.n	800536c <HAL_GFXMMU_ConfigLut+0x90>
    {
      *((uint32_t *)lutxl_address) = *((uint32_t *)current_address);
 800533e:	6a3a      	ldr	r2, [r7, #32]
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	6812      	ldr	r2, [r2, #0]
 8005344:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	3304      	adds	r3, #4
 800534a:	623b      	str	r3, [r7, #32]
      *((uint32_t *)lutxh_address) = *((uint32_t *)current_address);
 800534c:	6a3a      	ldr	r2, [r7, #32]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	6812      	ldr	r2, [r2, #0]
 8005352:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	3304      	adds	r3, #4
 8005358:	623b      	str	r3, [r7, #32]
      lutxl_address += 8U;
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	3308      	adds	r3, #8
 800535e:	61bb      	str	r3, [r7, #24]
      lutxh_address += 8U;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	3308      	adds	r3, #8
 8005364:	617b      	str	r3, [r7, #20]
      current_line++;
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	3301      	adds	r3, #1
 800536a:	61fb      	str	r3, [r7, #28]
    while (current_line < LinesNumber)
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	429a      	cmp	r2, r3
 8005372:	d3e4      	bcc.n	800533e <HAL_GFXMMU_ConfigLut+0x62>
    }
  }
  /* Return function status */
  return status;
 8005374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005378:	4618      	mov	r0, r3
 800537a:	372c      	adds	r7, #44	; 0x2c
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_GFXMMU_IRQHandler>:
  * @brief  This function handles the GFXMMU interrupts.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
void HAL_GFXMMU_IRQHandler(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t flags, interrupts, error;

  /* Read current flags and interrupts and determine which error occurs */
  flags = hgfxmmu->Instance->SR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	617b      	str	r3, [r7, #20]
  interrupts = (hgfxmmu->Instance->CR & GFXMMU_CR_ITS_MASK);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 031f 	and.w	r3, r3, #31
 800539e:	613b      	str	r3, [r7, #16]
  error = (flags & interrupts);
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4013      	ands	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]

  if (error != 0U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00c      	beq.n	80053c8 <HAL_GFXMMU_IRQHandler+0x44>
  {
    /* Clear flags on GFXMMU_FCR register */
    hgfxmmu->Instance->FCR = error;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	609a      	str	r2, [r3, #8]

    /* Update GFXMMU error code */
    hgfxmmu->ErrorCode |= error;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Call GFXMMU error callback */
#if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
    hgfxmmu->ErrorCallback(hgfxmmu);
#else
    HAL_GFXMMU_ErrorCallback(hgfxmmu);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f804 	bl	80053d0 <HAL_GFXMMU_ErrorCallback>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
  }
}
 80053c8:	bf00      	nop
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_GFXMMU_ErrorCallback>:
  * @brief  Error callback.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
__weak void HAL_GFXMMU_ErrorCallback(GFXMMU_HandleTypeDef *hgfxmmu)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(hgfxmmu);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_GFXMMU_ErrorCallback could be implemented in the user file.
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b089      	sub	sp, #36	; 0x24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80053f6:	e1ba      	b.n	800576e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	2101      	movs	r1, #1
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	fa01 f303 	lsl.w	r3, r1, r3
 8005404:	4013      	ands	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 81aa 	beq.w	8005768 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a55      	ldr	r2, [pc, #340]	; (800556c <HAL_GPIO_Init+0x188>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d15d      	bne.n	80054d8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8005422:	2201      	movs	r2, #1
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	43db      	mvns	r3, r3
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	4013      	ands	r3, r2
 8005430:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f003 0201 	and.w	r2, r3, #1
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	fa02 f303 	lsl.w	r3, r2, r3
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	4313      	orrs	r3, r2
 8005444:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800544c:	4a48      	ldr	r2, [pc, #288]	; (8005570 <HAL_GPIO_Init+0x18c>)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005454:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8005456:	4a46      	ldr	r2, [pc, #280]	; (8005570 <HAL_GPIO_Init+0x18c>)
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	4413      	add	r3, r2
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	08da      	lsrs	r2, r3, #3
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	3208      	adds	r2, #8
 800546a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	220f      	movs	r2, #15
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	43db      	mvns	r3, r3
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	4013      	ands	r3, r2
 8005484:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	220b      	movs	r2, #11
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	4313      	orrs	r3, r2
 8005498:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	08da      	lsrs	r2, r3, #3
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	3208      	adds	r2, #8
 80054a2:	69f9      	ldr	r1, [r7, #28]
 80054a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	2203      	movs	r2, #3
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	43db      	mvns	r3, r3
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	4013      	ands	r3, r2
 80054be:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	2202      	movs	r2, #2
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	69fa      	ldr	r2, [r7, #28]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	e067      	b.n	80055a8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d003      	beq.n	80054e8 <HAL_GPIO_Init+0x104>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	2b12      	cmp	r3, #18
 80054e6:	d145      	bne.n	8005574 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	08da      	lsrs	r2, r3, #3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3208      	adds	r2, #8
 80054f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	220f      	movs	r2, #15
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	43db      	mvns	r3, r3
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	4013      	ands	r3, r2
 800550a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f003 020f 	and.w	r2, r3, #15
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	fa02 f303 	lsl.w	r3, r2, r3
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	4313      	orrs	r3, r2
 8005524:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	08da      	lsrs	r2, r3, #3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3208      	adds	r2, #8
 800552e:	69f9      	ldr	r1, [r7, #28]
 8005530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	2203      	movs	r2, #3
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	43db      	mvns	r3, r3
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	4013      	ands	r3, r2
 800554a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f003 0203 	and.w	r2, r3, #3
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	4313      	orrs	r3, r2
 8005560:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	e01e      	b.n	80055a8 <HAL_GPIO_Init+0x1c4>
 800556a:	bf00      	nop
 800556c:	46020000 	.word	0x46020000
 8005570:	0800e284 	.word	0x0800e284
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	2203      	movs	r2, #3
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	43db      	mvns	r3, r3
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	4013      	ands	r3, r2
 800558a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f003 0203 	and.w	r2, r3, #3
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	69fa      	ldr	r2, [r7, #28]
 800559e:	4313      	orrs	r3, r2
 80055a0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d00b      	beq.n	80055c8 <HAL_GPIO_Init+0x1e4>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d007      	beq.n	80055c8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055bc:	2b11      	cmp	r3, #17
 80055be:	d003      	beq.n	80055c8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b12      	cmp	r3, #18
 80055c6:	d130      	bne.n	800562a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	2203      	movs	r2, #3
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	43db      	mvns	r3, r3
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	4013      	ands	r3, r2
 80055de:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	69fa      	ldr	r2, [r7, #28]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	69fa      	ldr	r2, [r7, #28]
 80055f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80055fe:	2201      	movs	r2, #1
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	43db      	mvns	r3, r3
 8005608:	69fa      	ldr	r2, [r7, #28]
 800560a:	4013      	ands	r3, r2
 800560c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	091b      	lsrs	r3, r3, #4
 8005614:	f003 0201 	and.w	r2, r3, #1
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	4313      	orrs	r3, r2
 8005622:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b03      	cmp	r3, #3
 8005630:	d017      	beq.n	8005662 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	2203      	movs	r2, #3
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	43db      	mvns	r3, r3
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	4013      	ands	r3, r2
 8005648:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	4313      	orrs	r3, r2
 800565a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d07c      	beq.n	8005768 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800566e:	4a47      	ldr	r2, [pc, #284]	; (800578c <HAL_GPIO_Init+0x3a8>)
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	089b      	lsrs	r3, r3, #2
 8005674:	3318      	adds	r3, #24
 8005676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800567a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	220f      	movs	r2, #15
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	43db      	mvns	r3, r3
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	4013      	ands	r3, r2
 8005690:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	0a9a      	lsrs	r2, r3, #10
 8005696:	4b3e      	ldr	r3, [pc, #248]	; (8005790 <HAL_GPIO_Init+0x3ac>)
 8005698:	4013      	ands	r3, r2
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	f002 0203 	and.w	r2, r2, #3
 80056a0:	00d2      	lsls	r2, r2, #3
 80056a2:	4093      	lsls	r3, r2
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80056aa:	4938      	ldr	r1, [pc, #224]	; (800578c <HAL_GPIO_Init+0x3a8>)
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	089b      	lsrs	r3, r3, #2
 80056b0:	3318      	adds	r3, #24
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80056b8:	4b34      	ldr	r3, [pc, #208]	; (800578c <HAL_GPIO_Init+0x3a8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	69fa      	ldr	r2, [r7, #28]
 80056c4:	4013      	ands	r3, r2
 80056c6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80056dc:	4a2b      	ldr	r2, [pc, #172]	; (800578c <HAL_GPIO_Init+0x3a8>)
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80056e2:	4b2a      	ldr	r3, [pc, #168]	; (800578c <HAL_GPIO_Init+0x3a8>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	43db      	mvns	r3, r3
 80056ec:	69fa      	ldr	r2, [r7, #28]
 80056ee:	4013      	ands	r3, r2
 80056f0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4313      	orrs	r3, r2
 8005704:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8005706:	4a21      	ldr	r2, [pc, #132]	; (800578c <HAL_GPIO_Init+0x3a8>)
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800570c:	4b1f      	ldr	r3, [pc, #124]	; (800578c <HAL_GPIO_Init+0x3a8>)
 800570e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005712:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	43db      	mvns	r3, r3
 8005718:	69fa      	ldr	r2, [r7, #28]
 800571a:	4013      	ands	r3, r2
 800571c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8005732:	4a16      	ldr	r2, [pc, #88]	; (800578c <HAL_GPIO_Init+0x3a8>)
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800573a:	4b14      	ldr	r3, [pc, #80]	; (800578c <HAL_GPIO_Init+0x3a8>)
 800573c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005740:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	43db      	mvns	r3, r3
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	4013      	ands	r3, r2
 800574a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8005758:	69fa      	ldr	r2, [r7, #28]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4313      	orrs	r3, r2
 800575e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005760:	4a0a      	ldr	r2, [pc, #40]	; (800578c <HAL_GPIO_Init+0x3a8>)
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	3301      	adds	r3, #1
 800576c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	fa22 f303 	lsr.w	r3, r2, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	f47f ae3d 	bne.w	80053f8 <HAL_GPIO_Init+0x14>
  }
}
 800577e:	bf00      	nop
 8005780:	bf00      	nop
 8005782:	3724      	adds	r7, #36	; 0x24
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	46022000 	.word	0x46022000
 8005790:	002f7f7f 	.word	0x002f7f7f

08005794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	460b      	mov	r3, r1
 800579e:	807b      	strh	r3, [r7, #2]
 80057a0:	4613      	mov	r3, r2
 80057a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057a4:	787b      	ldrb	r3, [r7, #1]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057aa:	887a      	ldrh	r2, [r7, #2]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80057b0:	e002      	b.n	80057b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80057b2:	887a      	ldrh	r2, [r7, #2]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e01c      	b.n	8005810 <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	795b      	ldrb	r3, [r3, #5]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d105      	bne.n	80057ea <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fd f8a6 	bl	8002930 <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	791b      	ldrb	r3, [r3, #4]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_GPU2D_Init+0x32>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e00c      	b.n	8005810 <HAL_GPU2D_Init+0x4c>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	33f8      	adds	r3, #248	; 0xf8
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d013      	beq.n	800585c <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	33f8      	adds	r3, #248	; 0xf8
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f023 0201 	bic.w	r2, r3, #1
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 8005854:	68f9      	ldr	r1, [r7, #12]
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f80f 	bl	800587a <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 800585c:	bf00      	nop
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f80f 	bl	8005890 <HAL_GPU2D_ErrorCallback>
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_GPU2D_CommandListCpltCallback>:
  *                the configuration information for the GPU2D.
  * @param  CmdListID Command list ID that got completed.
  * @retval None
  */
__weak void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
  UNUSED(CmdListID);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_GPU2D_CommandListCpltCallback can be implemented in the user file.
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 8005898:	e7fe      	b.n	8005898 <HAL_GPU2D_ErrorCallback+0x8>

0800589a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b082      	sub	sp, #8
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e08d      	b.n	80059c8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d106      	bne.n	80058c6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7fd f875 	bl	80029b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2224      	movs	r2, #36	; 0x24
 80058ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0201 	bic.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d107      	bne.n	8005914 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005910:	609a      	str	r2, [r3, #8]
 8005912:	e006      	b.n	8005922 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005920:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d108      	bne.n	800593c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005938:	605a      	str	r2, [r3, #4]
 800593a:	e007      	b.n	800594c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800594a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6812      	ldr	r2, [r2, #0]
 8005956:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800595a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800596e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691a      	ldr	r2, [r3, #16]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69d9      	ldr	r1, [r3, #28]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1a      	ldr	r2, [r3, #32]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0201 	orr.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af02      	add	r7, sp, #8
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	4608      	mov	r0, r1
 80059da:	4611      	mov	r1, r2
 80059dc:	461a      	mov	r2, r3
 80059de:	4603      	mov	r3, r0
 80059e0:	817b      	strh	r3, [r7, #10]
 80059e2:	460b      	mov	r3, r1
 80059e4:	813b      	strh	r3, [r7, #8]
 80059e6:	4613      	mov	r3, r2
 80059e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	f040 80f9 	bne.w	8005bea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <HAL_I2C_Mem_Write+0x34>
 80059fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d105      	bne.n	8005a10 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0ed      	b.n	8005bec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <HAL_I2C_Mem_Write+0x4e>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e0e6      	b.n	8005bec <HAL_I2C_Mem_Write+0x21c>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a26:	f7fe f821 	bl	8003a6c <HAL_GetTick>
 8005a2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	2319      	movs	r3, #25
 8005a32:	2201      	movs	r2, #1
 8005a34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 fac3 	bl	8005fc4 <I2C_WaitOnFlagUntilTimeout>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e0d1      	b.n	8005bec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2221      	movs	r2, #33	; 0x21
 8005a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2240      	movs	r2, #64	; 0x40
 8005a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a3a      	ldr	r2, [r7, #32]
 8005a62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a70:	88f8      	ldrh	r0, [r7, #6]
 8005a72:	893a      	ldrh	r2, [r7, #8]
 8005a74:	8979      	ldrh	r1, [r7, #10]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	9301      	str	r3, [sp, #4]
 8005a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	4603      	mov	r3, r0
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f9d3 	bl	8005e2c <I2C_RequestMemoryWrite>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e0a9      	b.n	8005bec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	2bff      	cmp	r3, #255	; 0xff
 8005aa0:	d90e      	bls.n	8005ac0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	22ff      	movs	r2, #255	; 0xff
 8005aa6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	8979      	ldrh	r1, [r7, #10]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 fc3d 	bl	8006338 <I2C_TransferConfig>
 8005abe:	e00f      	b.n	8005ae0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	8979      	ldrh	r1, [r7, #10]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 fc2c 	bl	8006338 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 fabc 	bl	8006062 <I2C_WaitOnTXISFlagUntilTimeout>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e07b      	b.n	8005bec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	781a      	ldrb	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d034      	beq.n	8005b98 <HAL_I2C_Mem_Write+0x1c8>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d130      	bne.n	8005b98 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2180      	movs	r1, #128	; 0x80
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 fa3f 	bl	8005fc4 <I2C_WaitOnFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e04d      	b.n	8005bec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	2bff      	cmp	r3, #255	; 0xff
 8005b58:	d90e      	bls.n	8005b78 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	22ff      	movs	r2, #255	; 0xff
 8005b5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	8979      	ldrh	r1, [r7, #10]
 8005b68:	2300      	movs	r3, #0
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 fbe1 	bl	8006338 <I2C_TransferConfig>
 8005b76:	e00f      	b.n	8005b98 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	8979      	ldrh	r1, [r7, #10]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 fbd0 	bl	8006338 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d19e      	bne.n	8005ae0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 faa2 	bl	80060f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e01a      	b.n	8005bec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6859      	ldr	r1, [r3, #4]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	4b0a      	ldr	r3, [pc, #40]	; (8005bf4 <HAL_I2C_Mem_Write+0x224>)
 8005bca:	400b      	ands	r3, r1
 8005bcc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	e000      	b.n	8005bec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005bea:	2302      	movs	r3, #2
  }
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	fe00e800 	.word	0xfe00e800

08005bf8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	4608      	mov	r0, r1
 8005c02:	4611      	mov	r1, r2
 8005c04:	461a      	mov	r2, r3
 8005c06:	4603      	mov	r3, r0
 8005c08:	817b      	strh	r3, [r7, #10]
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	813b      	strh	r3, [r7, #8]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b20      	cmp	r3, #32
 8005c1c:	f040 80fd 	bne.w	8005e1a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d002      	beq.n	8005c2c <HAL_I2C_Mem_Read+0x34>
 8005c26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d105      	bne.n	8005c38 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0f1      	b.n	8005e1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d101      	bne.n	8005c46 <HAL_I2C_Mem_Read+0x4e>
 8005c42:	2302      	movs	r3, #2
 8005c44:	e0ea      	b.n	8005e1c <HAL_I2C_Mem_Read+0x224>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c4e:	f7fd ff0d 	bl	8003a6c <HAL_GetTick>
 8005c52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	2319      	movs	r3, #25
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 f9af 	bl	8005fc4 <I2C_WaitOnFlagUntilTimeout>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0d5      	b.n	8005e1c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2222      	movs	r2, #34	; 0x22
 8005c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2240      	movs	r2, #64	; 0x40
 8005c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a3a      	ldr	r2, [r7, #32]
 8005c8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c98:	88f8      	ldrh	r0, [r7, #6]
 8005c9a:	893a      	ldrh	r2, [r7, #8]
 8005c9c:	8979      	ldrh	r1, [r7, #10]
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	9301      	str	r3, [sp, #4]
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f913 	bl	8005ed4 <I2C_RequestMemoryRead>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e0ad      	b.n	8005e1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2bff      	cmp	r3, #255	; 0xff
 8005cc8:	d90e      	bls.n	8005ce8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	22ff      	movs	r2, #255	; 0xff
 8005cce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	8979      	ldrh	r1, [r7, #10]
 8005cd8:	4b52      	ldr	r3, [pc, #328]	; (8005e24 <HAL_I2C_Mem_Read+0x22c>)
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 fb29 	bl	8006338 <I2C_TransferConfig>
 8005ce6:	e00f      	b.n	8005d08 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	8979      	ldrh	r1, [r7, #10]
 8005cfa:	4b4a      	ldr	r3, [pc, #296]	; (8005e24 <HAL_I2C_Mem_Read+0x22c>)
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 fb18 	bl	8006338 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2104      	movs	r1, #4
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 f956 	bl	8005fc4 <I2C_WaitOnFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e07c      	b.n	8005e1c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d034      	beq.n	8005dc8 <HAL_I2C_Mem_Read+0x1d0>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d130      	bne.n	8005dc8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2180      	movs	r1, #128	; 0x80
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 f927 	bl	8005fc4 <I2C_WaitOnFlagUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e04d      	b.n	8005e1c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2bff      	cmp	r3, #255	; 0xff
 8005d88:	d90e      	bls.n	8005da8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	22ff      	movs	r2, #255	; 0xff
 8005d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	8979      	ldrh	r1, [r7, #10]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 fac9 	bl	8006338 <I2C_TransferConfig>
 8005da6:	e00f      	b.n	8005dc8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	8979      	ldrh	r1, [r7, #10]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 fab8 	bl	8006338 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d19a      	bne.n	8005d08 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 f98a 	bl	80060f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e01a      	b.n	8005e1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2220      	movs	r2, #32
 8005dec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6859      	ldr	r1, [r3, #4]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <HAL_I2C_Mem_Read+0x230>)
 8005dfa:	400b      	ands	r3, r1
 8005dfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	e000      	b.n	8005e1c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005e1a:	2302      	movs	r3, #2
  }
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	80002400 	.word	0x80002400
 8005e28:	fe00e800 	.word	0xfe00e800

08005e2c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af02      	add	r7, sp, #8
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	4608      	mov	r0, r1
 8005e36:	4611      	mov	r1, r2
 8005e38:	461a      	mov	r2, r3
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	817b      	strh	r3, [r7, #10]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	813b      	strh	r3, [r7, #8]
 8005e42:	4613      	mov	r3, r2
 8005e44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005e46:	88fb      	ldrh	r3, [r7, #6]
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	8979      	ldrh	r1, [r7, #10]
 8005e4c:	4b20      	ldr	r3, [pc, #128]	; (8005ed0 <I2C_RequestMemoryWrite+0xa4>)
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 fa6f 	bl	8006338 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	69b9      	ldr	r1, [r7, #24]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f8ff 	bl	8006062 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e02c      	b.n	8005ec8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e6e:	88fb      	ldrh	r3, [r7, #6]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d105      	bne.n	8005e80 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e74:	893b      	ldrh	r3, [r7, #8]
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	629a      	str	r2, [r3, #40]	; 0x28
 8005e7e:	e015      	b.n	8005eac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e80:	893b      	ldrh	r3, [r7, #8]
 8005e82:	0a1b      	lsrs	r3, r3, #8
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	69b9      	ldr	r1, [r7, #24]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 f8e5 	bl	8006062 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e012      	b.n	8005ec8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ea2:	893b      	ldrh	r3, [r7, #8]
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2180      	movs	r1, #128	; 0x80
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 f884 	bl	8005fc4 <I2C_WaitOnFlagUntilTimeout>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	80002000 	.word	0x80002000

08005ed4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	4608      	mov	r0, r1
 8005ede:	4611      	mov	r1, r2
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	817b      	strh	r3, [r7, #10]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	813b      	strh	r3, [r7, #8]
 8005eea:	4613      	mov	r3, r2
 8005eec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005eee:	88fb      	ldrh	r3, [r7, #6]
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	8979      	ldrh	r1, [r7, #10]
 8005ef4:	4b20      	ldr	r3, [pc, #128]	; (8005f78 <I2C_RequestMemoryRead+0xa4>)
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	2300      	movs	r3, #0
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 fa1c 	bl	8006338 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f00:	69fa      	ldr	r2, [r7, #28]
 8005f02:	69b9      	ldr	r1, [r7, #24]
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f8ac 	bl	8006062 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e02c      	b.n	8005f6e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f14:	88fb      	ldrh	r3, [r7, #6]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d105      	bne.n	8005f26 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f1a:	893b      	ldrh	r3, [r7, #8]
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	629a      	str	r2, [r3, #40]	; 0x28
 8005f24:	e015      	b.n	8005f52 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005f26:	893b      	ldrh	r3, [r7, #8]
 8005f28:	0a1b      	lsrs	r3, r3, #8
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f34:	69fa      	ldr	r2, [r7, #28]
 8005f36:	69b9      	ldr	r1, [r7, #24]
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 f892 	bl	8006062 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e012      	b.n	8005f6e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f48:	893b      	ldrh	r3, [r7, #8]
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2140      	movs	r1, #64	; 0x40
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f831 	bl	8005fc4 <I2C_WaitOnFlagUntilTimeout>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e000      	b.n	8005f6e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	80002000 	.word	0x80002000

08005f7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d103      	bne.n	8005f9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2200      	movs	r2, #0
 8005f98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d007      	beq.n	8005fb8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0201 	orr.w	r2, r2, #1
 8005fb6:	619a      	str	r2, [r3, #24]
  }
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	603b      	str	r3, [r7, #0]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fd4:	e031      	b.n	800603a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fdc:	d02d      	beq.n	800603a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fde:	f7fd fd45 	bl	8003a6c <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d302      	bcc.n	8005ff4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d122      	bne.n	800603a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699a      	ldr	r2, [r3, #24]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	429a      	cmp	r2, r3
 8006002:	bf0c      	ite	eq
 8006004:	2301      	moveq	r3, #1
 8006006:	2300      	movne	r3, #0
 8006008:	b2db      	uxtb	r3, r3
 800600a:	461a      	mov	r2, r3
 800600c:	79fb      	ldrb	r3, [r7, #7]
 800600e:	429a      	cmp	r2, r3
 8006010:	d113      	bne.n	800603a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006016:	f043 0220 	orr.w	r2, r3, #32
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e00f      	b.n	800605a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	699a      	ldr	r2, [r3, #24]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	4013      	ands	r3, r2
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	429a      	cmp	r2, r3
 8006048:	bf0c      	ite	eq
 800604a:	2301      	moveq	r3, #1
 800604c:	2300      	movne	r3, #0
 800604e:	b2db      	uxtb	r3, r3
 8006050:	461a      	mov	r2, r3
 8006052:	79fb      	ldrb	r3, [r7, #7]
 8006054:	429a      	cmp	r2, r3
 8006056:	d0be      	beq.n	8005fd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800606e:	e033      	b.n	80060d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 f87f 	bl	8006178 <I2C_IsErrorOccurred>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e031      	b.n	80060e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608a:	d025      	beq.n	80060d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800608c:	f7fd fcee 	bl	8003a6c <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	429a      	cmp	r2, r3
 800609a:	d302      	bcc.n	80060a2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d11a      	bne.n	80060d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d013      	beq.n	80060d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b4:	f043 0220 	orr.w	r2, r3, #32
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e007      	b.n	80060e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d1c4      	bne.n	8006070 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060fc:	e02f      	b.n	800615e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 f838 	bl	8006178 <I2C_IsErrorOccurred>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e02d      	b.n	800616e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006112:	f7fd fcab 	bl	8003a6c <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	429a      	cmp	r2, r3
 8006120:	d302      	bcc.n	8006128 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d11a      	bne.n	800615e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b20      	cmp	r3, #32
 8006134:	d013      	beq.n	800615e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613a:	f043 0220 	orr.w	r2, r3, #32
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2220      	movs	r2, #32
 8006146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e007      	b.n	800616e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	f003 0320 	and.w	r3, r3, #32
 8006168:	2b20      	cmp	r3, #32
 800616a:	d1c8      	bne.n	80060fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08a      	sub	sp, #40	; 0x28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006192:	2300      	movs	r3, #0
 8006194:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	f003 0310 	and.w	r3, r3, #16
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d068      	beq.n	8006276 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2210      	movs	r2, #16
 80061aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061ac:	e049      	b.n	8006242 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b4:	d045      	beq.n	8006242 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061b6:	f7fd fc59 	bl	8003a6c <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d302      	bcc.n	80061cc <I2C_IsErrorOccurred+0x54>
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d13a      	bne.n	8006242 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ee:	d121      	bne.n	8006234 <I2C_IsErrorOccurred+0xbc>
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061f6:	d01d      	beq.n	8006234 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80061f8:	7cfb      	ldrb	r3, [r7, #19]
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	d01a      	beq.n	8006234 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800620c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800620e:	f7fd fc2d 	bl	8003a6c <HAL_GetTick>
 8006212:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006214:	e00e      	b.n	8006234 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006216:	f7fd fc29 	bl	8003a6c <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b19      	cmp	r3, #25
 8006222:	d907      	bls.n	8006234 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	f043 0320 	orr.w	r3, r3, #32
 800622a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006232:	e006      	b.n	8006242 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	f003 0320 	and.w	r3, r3, #32
 800623e:	2b20      	cmp	r3, #32
 8006240:	d1e9      	bne.n	8006216 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	f003 0320 	and.w	r3, r3, #32
 800624c:	2b20      	cmp	r3, #32
 800624e:	d003      	beq.n	8006258 <I2C_IsErrorOccurred+0xe0>
 8006250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0aa      	beq.n	80061ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800625c:	2b00      	cmp	r3, #0
 800625e:	d103      	bne.n	8006268 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2220      	movs	r2, #32
 8006266:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	f043 0304 	orr.w	r3, r3, #4
 800626e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00b      	beq.n	80062a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	f043 0301 	orr.w	r3, r3, #1
 800628e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006298:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00b      	beq.n	80062c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	f043 0308 	orr.w	r3, r3, #8
 80062b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00b      	beq.n	80062e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	f043 0302 	orr.w	r3, r3, #2
 80062d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80062e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d01c      	beq.n	8006326 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f7ff fe45 	bl	8005f7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6859      	ldr	r1, [r3, #4]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <I2C_IsErrorOccurred+0x1bc>)
 80062fe:	400b      	ands	r3, r1
 8006300:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	431a      	orrs	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800632a:	4618      	mov	r0, r3
 800632c:	3728      	adds	r7, #40	; 0x28
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	fe00e800 	.word	0xfe00e800

08006338 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	607b      	str	r3, [r7, #4]
 8006342:	460b      	mov	r3, r1
 8006344:	817b      	strh	r3, [r7, #10]
 8006346:	4613      	mov	r3, r2
 8006348:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800634a:	897b      	ldrh	r3, [r7, #10]
 800634c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006350:	7a7b      	ldrb	r3, [r7, #9]
 8006352:	041b      	lsls	r3, r3, #16
 8006354:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006358:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	4313      	orrs	r3, r2
 8006362:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006366:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	0d5b      	lsrs	r3, r3, #21
 8006372:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006376:	4b08      	ldr	r3, [pc, #32]	; (8006398 <I2C_TransferConfig+0x60>)
 8006378:	430b      	orrs	r3, r1
 800637a:	43db      	mvns	r3, r3
 800637c:	ea02 0103 	and.w	r1, r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800638a:	bf00      	nop
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	03ff63ff 	.word	0x03ff63ff

0800639c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	d138      	bne.n	8006424 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80063bc:	2302      	movs	r3, #2
 80063be:	e032      	b.n	8006426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2224      	movs	r2, #36	; 0x24
 80063cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0201 	bic.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6819      	ldr	r1, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	e000      	b.n	8006426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006424:	2302      	movs	r3, #2
  }
}
 8006426:	4618      	mov	r0, r3
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006432:	b480      	push	{r7}
 8006434:	b085      	sub	sp, #20
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b20      	cmp	r3, #32
 8006446:	d139      	bne.n	80064bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800644e:	2b01      	cmp	r3, #1
 8006450:	d101      	bne.n	8006456 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006452:	2302      	movs	r3, #2
 8006454:	e033      	b.n	80064be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2224      	movs	r2, #36	; 0x24
 8006462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0201 	bic.w	r2, r2, #1
 8006474:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006484:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	021b      	lsls	r3, r3, #8
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	4313      	orrs	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0201 	orr.w	r2, r2, #1
 80064a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	e000      	b.n	80064be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80064bc:	2302      	movs	r3, #2
  }
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
	...

080064cc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80064d0:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <HAL_ICACHE_Enable+0x1c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a04      	ldr	r2, [pc, #16]	; (80064e8 <HAL_ICACHE_Enable+0x1c>)
 80064d6:	f043 0301 	orr.w	r3, r3, #1
 80064da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	40030400 	.word	0x40030400

080064ec <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 80064f6:	4b14      	ldr	r3, [pc, #80]	; (8006548 <HAL_ICACHE_Disable+0x5c>)
 80064f8:	2202      	movs	r2, #2
 80064fa:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 80064fc:	4b12      	ldr	r3, [pc, #72]	; (8006548 <HAL_ICACHE_Disable+0x5c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a11      	ldr	r2, [pc, #68]	; (8006548 <HAL_ICACHE_Disable+0x5c>)
 8006502:	f023 0301 	bic.w	r3, r3, #1
 8006506:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006508:	f7fd fab0 	bl	8003a6c <HAL_GetTick>
 800650c:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800650e:	e00f      	b.n	8006530 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8006510:	f7fd faac 	bl	8003a6c <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b01      	cmp	r3, #1
 800651c:	d908      	bls.n	8006530 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800651e:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <HAL_ICACHE_Disable+0x5c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	71fb      	strb	r3, [r7, #7]
        break;
 800652e:	e005      	b.n	800653c <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8006530:	4b05      	ldr	r3, [pc, #20]	; (8006548 <HAL_ICACHE_Disable+0x5c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1e9      	bne.n	8006510 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 800653c:	79fb      	ldrb	r3, [r7, #7]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	40030400 	.word	0x40030400

0800654c <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800655a:	4b22      	ldr	r3, [pc, #136]	; (80065e4 <HAL_ICACHE_EnableRemapRegion+0x98>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	75fb      	strb	r3, [r7, #23]
 800656a:	e034      	b.n	80065d6 <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	009a      	lsls	r2, r3, #2
 8006570:	4b1d      	ldr	r3, [pc, #116]	; (80065e8 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8006572:	4413      	add	r3, r2
 8006574:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	75fb      	strb	r3, [r7, #23]
 8006586:	e026      	b.n	80065d6 <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8006594:	4013      	ands	r3, r2
 8006596:	b2db      	uxtb	r3, r3
 8006598:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	425b      	negs	r3, r3
 80065a6:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80065a8:	401a      	ands	r2, r3
 80065aa:	4b10      	ldr	r3, [pc, #64]	; (80065ec <HAL_ICACHE_EnableRemapRegion+0xa0>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	025a      	lsls	r2, r3, #9
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80065c4:	4313      	orrs	r3, r2
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	371c      	adds	r7, #28
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	40030400 	.word	0x40030400
 80065e8:	40030420 	.word	0x40030420
 80065ec:	07ff0000 	.word	0x07ff0000

080065f0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e0bf      	b.n	8006782 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d106      	bne.n	800661c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fc fd76 	bl	8003108 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006632:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6999      	ldr	r1, [r3, #24]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006648:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6899      	ldr	r1, [r3, #8]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4b4a      	ldr	r3, [pc, #296]	; (800678c <HAL_LTDC_Init+0x19c>)
 8006664:	400b      	ands	r3, r1
 8006666:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	041b      	lsls	r3, r3, #16
 800666e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6899      	ldr	r1, [r3, #8]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	431a      	orrs	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68d9      	ldr	r1, [r3, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	4b3e      	ldr	r3, [pc, #248]	; (800678c <HAL_LTDC_Init+0x19c>)
 8006692:	400b      	ands	r3, r1
 8006694:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	041b      	lsls	r3, r3, #16
 800669c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68d9      	ldr	r1, [r3, #12]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1a      	ldr	r2, [r3, #32]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6919      	ldr	r1, [r3, #16]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4b33      	ldr	r3, [pc, #204]	; (800678c <HAL_LTDC_Init+0x19c>)
 80066c0:	400b      	ands	r3, r1
 80066c2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	041b      	lsls	r3, r3, #16
 80066ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6919      	ldr	r1, [r3, #16]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	431a      	orrs	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6959      	ldr	r1, [r3, #20]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	4b27      	ldr	r3, [pc, #156]	; (800678c <HAL_LTDC_Init+0x19c>)
 80066ee:	400b      	ands	r3, r1
 80066f0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f6:	041b      	lsls	r3, r3, #16
 80066f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6959      	ldr	r1, [r3, #20]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006720:	041b      	lsls	r3, r3, #16
 8006722:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006732:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0206 	orr.w	r2, r2, #6
 800675e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	f000f800 	.word	0xf000f800

08006790 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 0304 	and.w	r3, r3, #4
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d023      	beq.n	80067fa <HAL_LTDC_IRQHandler+0x6a>
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01e      	beq.n	80067fa <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0204 	bic.w	r2, r2, #4
 80067ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2204      	movs	r2, #4
 80067d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067da:	f043 0201 	orr.w	r2, r3, #1
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2204      	movs	r2, #4
 80067e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f86f 	bl	80068d8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d023      	beq.n	800684c <HAL_LTDC_IRQHandler+0xbc>
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d01e      	beq.n	800684c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0202 	bic.w	r2, r2, #2
 800681c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2202      	movs	r2, #2
 8006824:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800682c:	f043 0202 	orr.w	r2, r3, #2
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2204      	movs	r2, #4
 800683a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f846 	bl	80068d8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d01b      	beq.n	800688e <HAL_LTDC_IRQHandler+0xfe>
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d016      	beq.n	800688e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0201 	bic.w	r2, r2, #1
 800686e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2201      	movs	r2, #1
 8006876:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f82f 	bl	80068ec <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01b      	beq.n	80068d0 <HAL_LTDC_IRQHandler+0x140>
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d016      	beq.n	80068d0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0208 	bic.w	r2, r2, #8
 80068b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2208      	movs	r2, #8
 80068b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f818 	bl	8006900 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006914:	b5b0      	push	{r4, r5, r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_LTDC_ConfigLayer+0x1a>
 800692a:	2302      	movs	r3, #2
 800692c:	e02c      	b.n	8006988 <HAL_LTDC_ConfigLayer+0x74>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2202      	movs	r2, #2
 800693a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2134      	movs	r1, #52	; 0x34
 8006944:	fb01 f303 	mul.w	r3, r1, r3
 8006948:	4413      	add	r3, r2
 800694a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4614      	mov	r4, r2
 8006952:	461d      	mov	r5, r3
 8006954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800695a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800695c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800695e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006960:	682b      	ldr	r3, [r5, #0]
 8006962:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 f811 	bl	8006990 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2201      	movs	r2, #1
 8006974:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bdb0      	pop	{r4, r5, r7, pc}

08006990 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006990:	b480      	push	{r7}
 8006992:	b089      	sub	sp, #36	; 0x24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	0c1b      	lsrs	r3, r3, #16
 80069a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ac:	4413      	add	r3, r2
 80069ae:	041b      	lsls	r3, r3, #16
 80069b0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	01db      	lsls	r3, r3, #7
 80069bc:	4413      	add	r3, r2
 80069be:	3384      	adds	r3, #132	; 0x84
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	6812      	ldr	r2, [r2, #0]
 80069c6:	4611      	mov	r1, r2
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	01d2      	lsls	r2, r2, #7
 80069cc:	440a      	add	r2, r1
 80069ce:	3284      	adds	r2, #132	; 0x84
 80069d0:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80069d4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	0c1b      	lsrs	r3, r3, #16
 80069e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80069e6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80069e8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4619      	mov	r1, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	01db      	lsls	r3, r3, #7
 80069f4:	440b      	add	r3, r1
 80069f6:	3384      	adds	r3, #132	; 0x84
 80069f8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80069fe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a0e:	4413      	add	r3, r2
 8006a10:	041b      	lsls	r3, r3, #16
 8006a12:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	01db      	lsls	r3, r3, #7
 8006a1e:	4413      	add	r3, r2
 8006a20:	3384      	adds	r3, #132	; 0x84
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	6812      	ldr	r2, [r2, #0]
 8006a28:	4611      	mov	r1, r2
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	01d2      	lsls	r2, r2, #7
 8006a2e:	440a      	add	r2, r1
 8006a30:	3284      	adds	r2, #132	; 0x84
 8006a32:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8006a36:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a46:	4413      	add	r3, r2
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	01db      	lsls	r3, r3, #7
 8006a54:	440b      	add	r3, r1
 8006a56:	3384      	adds	r3, #132	; 0x84
 8006a58:	4619      	mov	r1, r3
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	461a      	mov	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	01db      	lsls	r3, r3, #7
 8006a6a:	4413      	add	r3, r2
 8006a6c:	3384      	adds	r3, #132	; 0x84
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	6812      	ldr	r2, [r2, #0]
 8006a74:	4611      	mov	r1, r2
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	01d2      	lsls	r2, r2, #7
 8006a7a:	440a      	add	r2, r1
 8006a7c:	3284      	adds	r2, #132	; 0x84
 8006a7e:	f023 0307 	bic.w	r3, r3, #7
 8006a82:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	01db      	lsls	r3, r3, #7
 8006a8e:	4413      	add	r3, r2
 8006a90:	3384      	adds	r3, #132	; 0x84
 8006a92:	461a      	mov	r2, r3
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006aa0:	021b      	lsls	r3, r3, #8
 8006aa2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006aaa:	041b      	lsls	r3, r3, #16
 8006aac:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	061b      	lsls	r3, r3, #24
 8006ab4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	01db      	lsls	r3, r3, #7
 8006ac0:	4413      	add	r3, r2
 8006ac2:	3384      	adds	r3, #132	; 0x84
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	01db      	lsls	r3, r3, #7
 8006ad0:	4413      	add	r3, r2
 8006ad2:	3384      	adds	r3, #132	; 0x84
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4619      	mov	r1, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	01db      	lsls	r3, r3, #7
 8006af4:	440b      	add	r3, r1
 8006af6:	3384      	adds	r3, #132	; 0x84
 8006af8:	4619      	mov	r1, r3
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	461a      	mov	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	01db      	lsls	r3, r3, #7
 8006b0a:	4413      	add	r3, r2
 8006b0c:	3384      	adds	r3, #132	; 0x84
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	4611      	mov	r1, r2
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	01d2      	lsls	r2, r2, #7
 8006b1a:	440a      	add	r2, r1
 8006b1c:	3284      	adds	r2, #132	; 0x84
 8006b1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b22:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	01db      	lsls	r3, r3, #7
 8006b2e:	4413      	add	r3, r2
 8006b30:	3384      	adds	r3, #132	; 0x84
 8006b32:	461a      	mov	r2, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	01db      	lsls	r3, r3, #7
 8006b44:	4413      	add	r3, r2
 8006b46:	3384      	adds	r3, #132	; 0x84
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	6812      	ldr	r2, [r2, #0]
 8006b4e:	4611      	mov	r1, r2
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	01d2      	lsls	r2, r2, #7
 8006b54:	440a      	add	r2, r1
 8006b56:	3284      	adds	r2, #132	; 0x84
 8006b58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006b5c:	f023 0307 	bic.w	r3, r3, #7
 8006b60:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	69da      	ldr	r2, [r3, #28]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	68f9      	ldr	r1, [r7, #12]
 8006b6c:	6809      	ldr	r1, [r1, #0]
 8006b6e:	4608      	mov	r0, r1
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	01c9      	lsls	r1, r1, #7
 8006b74:	4401      	add	r1, r0
 8006b76:	3184      	adds	r1, #132	; 0x84
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	461a      	mov	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	01db      	lsls	r3, r3, #7
 8006b86:	4413      	add	r3, r2
 8006b88:	3384      	adds	r3, #132	; 0x84
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	01db      	lsls	r3, r3, #7
 8006b96:	4413      	add	r3, r2
 8006b98:	3384      	adds	r3, #132	; 0x84
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	01db      	lsls	r3, r3, #7
 8006baa:	4413      	add	r3, r2
 8006bac:	3384      	adds	r3, #132	; 0x84
 8006bae:	461a      	mov	r2, r3
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d102      	bne.n	8006bc4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006bbe:	2304      	movs	r3, #4
 8006bc0:	61fb      	str	r3, [r7, #28]
 8006bc2:	e01b      	b.n	8006bfc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d102      	bne.n	8006bd2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	e014      	b.n	8006bfc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d00b      	beq.n	8006bf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d007      	beq.n	8006bf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d003      	beq.n	8006bf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006bee:	2b07      	cmp	r3, #7
 8006bf0:	d102      	bne.n	8006bf8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	61fb      	str	r3, [r7, #28]
 8006bf6:	e001      	b.n	8006bfc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	461a      	mov	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	01db      	lsls	r3, r3, #7
 8006c06:	4413      	add	r3, r2
 8006c08:	3384      	adds	r3, #132	; 0x84
 8006c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	6812      	ldr	r2, [r2, #0]
 8006c10:	4611      	mov	r1, r2
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	01d2      	lsls	r2, r2, #7
 8006c16:	440a      	add	r2, r1
 8006c18:	3284      	adds	r2, #132	; 0x84
 8006c1a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006c1e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c24:	69fa      	ldr	r2, [r7, #28]
 8006c26:	fb02 f303 	mul.w	r3, r2, r3
 8006c2a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	6859      	ldr	r1, [r3, #4]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	1acb      	subs	r3, r1, r3
 8006c36:	69f9      	ldr	r1, [r7, #28]
 8006c38:	fb01 f303 	mul.w	r3, r1, r3
 8006c3c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006c3e:	68f9      	ldr	r1, [r7, #12]
 8006c40:	6809      	ldr	r1, [r1, #0]
 8006c42:	4608      	mov	r0, r1
 8006c44:	6879      	ldr	r1, [r7, #4]
 8006c46:	01c9      	lsls	r1, r1, #7
 8006c48:	4401      	add	r1, r0
 8006c4a:	3184      	adds	r1, #132	; 0x84
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	461a      	mov	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	01db      	lsls	r3, r3, #7
 8006c5a:	4413      	add	r3, r2
 8006c5c:	3384      	adds	r3, #132	; 0x84
 8006c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	6812      	ldr	r2, [r2, #0]
 8006c64:	4611      	mov	r1, r2
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	01d2      	lsls	r2, r2, #7
 8006c6a:	440a      	add	r2, r1
 8006c6c:	3284      	adds	r2, #132	; 0x84
 8006c6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006c72:	f023 0307 	bic.w	r3, r3, #7
 8006c76:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	01db      	lsls	r3, r3, #7
 8006c82:	4413      	add	r3, r2
 8006c84:	3384      	adds	r3, #132	; 0x84
 8006c86:	461a      	mov	r2, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	461a      	mov	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	01db      	lsls	r3, r3, #7
 8006c98:	4413      	add	r3, r2
 8006c9a:	3384      	adds	r3, #132	; 0x84
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	6812      	ldr	r2, [r2, #0]
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	01d2      	lsls	r2, r2, #7
 8006ca8:	440a      	add	r2, r1
 8006caa:	3284      	adds	r2, #132	; 0x84
 8006cac:	f043 0301 	orr.w	r3, r3, #1
 8006cb0:	6013      	str	r3, [r2, #0]
}
 8006cb2:	bf00      	nop
 8006cb4:	3724      	adds	r7, #36	; 0x24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
	...

08006cc0 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d102      	bne.n	8006cd8 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	73fb      	strb	r3, [r7, #15]
 8006cd6:	e141      	b.n	8006f5c <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 f947 	bl	8006f70 <MDF_GetHandleNumberFromInstance>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	4a86      	ldr	r2, [pc, #536]	; (8006f00 <HAL_MDF_Init+0x240>)
 8006ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	73fb      	strb	r3, [r7, #15]
 8006cf2:	e133      	b.n	8006f5c <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7fb fc71 	bl	80025dc <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8006cfa:	4b82      	ldr	r3, [pc, #520]	; (8006f04 <HAL_MDF_Init+0x244>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d11d      	bne.n	8006d3e <HAL_MDF_Init+0x7e>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a80      	ldr	r2, [pc, #512]	; (8006f08 <HAL_MDF_Init+0x248>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d023      	beq.n	8006d54 <HAL_MDF_Init+0x94>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a7e      	ldr	r2, [pc, #504]	; (8006f0c <HAL_MDF_Init+0x24c>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d01e      	beq.n	8006d54 <HAL_MDF_Init+0x94>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a7d      	ldr	r2, [pc, #500]	; (8006f10 <HAL_MDF_Init+0x250>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d019      	beq.n	8006d54 <HAL_MDF_Init+0x94>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a7b      	ldr	r2, [pc, #492]	; (8006f14 <HAL_MDF_Init+0x254>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d014      	beq.n	8006d54 <HAL_MDF_Init+0x94>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a7a      	ldr	r2, [pc, #488]	; (8006f18 <HAL_MDF_Init+0x258>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00f      	beq.n	8006d54 <HAL_MDF_Init+0x94>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a78      	ldr	r2, [pc, #480]	; (8006f1c <HAL_MDF_Init+0x25c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d00a      	beq.n	8006d54 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8006d3e:	4b78      	ldr	r3, [pc, #480]	; (8006f20 <HAL_MDF_Init+0x260>)
 8006d40:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f040 8090 	bne.w	8006e68 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a75      	ldr	r2, [pc, #468]	; (8006f24 <HAL_MDF_Init+0x264>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	f040 808a 	bne.w	8006e68 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a72      	ldr	r2, [pc, #456]	; (8006f24 <HAL_MDF_Init+0x264>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d101      	bne.n	8006d62 <HAL_MDF_Init+0xa2>
 8006d5e:	4b72      	ldr	r3, [pc, #456]	; (8006f28 <HAL_MDF_Init+0x268>)
 8006d60:	e000      	b.n	8006d64 <HAL_MDF_Init+0xa4>
 8006d62:	4b72      	ldr	r3, [pc, #456]	; (8006f2c <HAL_MDF_Init+0x26c>)
 8006d64:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	da02      	bge.n	8006d74 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	73fb      	strb	r3, [r7, #15]
 8006d72:	e079      	b.n	8006e68 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a63      	ldr	r2, [pc, #396]	; (8006f08 <HAL_MDF_Init+0x248>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d018      	beq.n	8006db0 <HAL_MDF_Init+0xf0>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a62      	ldr	r2, [pc, #392]	; (8006f0c <HAL_MDF_Init+0x24c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d013      	beq.n	8006db0 <HAL_MDF_Init+0xf0>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a60      	ldr	r2, [pc, #384]	; (8006f10 <HAL_MDF_Init+0x250>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d00e      	beq.n	8006db0 <HAL_MDF_Init+0xf0>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a5f      	ldr	r2, [pc, #380]	; (8006f14 <HAL_MDF_Init+0x254>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d009      	beq.n	8006db0 <HAL_MDF_Init+0xf0>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a5d      	ldr	r2, [pc, #372]	; (8006f18 <HAL_MDF_Init+0x258>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d004      	beq.n	8006db0 <HAL_MDF_Init+0xf0>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a5c      	ldr	r2, [pc, #368]	; (8006f1c <HAL_MDF_Init+0x25c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d10d      	bne.n	8006dcc <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	011b      	lsls	r3, r3, #4
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	061b      	lsls	r3, r3, #24
 8006dde:	431a      	orrs	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	7b1b      	ldrb	r3, [r3, #12]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d137      	bne.n	8006e5c <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	3b01      	subs	r3, #1
 8006df6:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006dfc:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8006e04:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006e06:	431a      	orrs	r2, r3
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	7e1b      	ldrb	r3, [r3, #24]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d123      	bne.n	8006e5c <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a3b      	ldr	r2, [pc, #236]	; (8006f08 <HAL_MDF_Init+0x248>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d012      	beq.n	8006e44 <HAL_MDF_Init+0x184>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a3a      	ldr	r2, [pc, #232]	; (8006f0c <HAL_MDF_Init+0x24c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00d      	beq.n	8006e44 <HAL_MDF_Init+0x184>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a38      	ldr	r2, [pc, #224]	; (8006f10 <HAL_MDF_Init+0x250>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d008      	beq.n	8006e44 <HAL_MDF_Init+0x184>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a37      	ldr	r2, [pc, #220]	; (8006f14 <HAL_MDF_Init+0x254>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d003      	beq.n	8006e44 <HAL_MDF_Init+0x184>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a35      	ldr	r2, [pc, #212]	; (8006f18 <HAL_MDF_Init+0x258>)
 8006e42:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006e50:	430b      	orrs	r3, r1
 8006e52:	4313      	orrs	r3, r2
 8006e54:	f043 0210 	orr.w	r2, r3, #16
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f043 0201 	orr.w	r2, r3, #1
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d128      	bne.n	8006ec0 <HAL_MDF_Init+0x200>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d123      	bne.n	8006ec0 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	da02      	bge.n	8006e88 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	73fb      	strb	r3, [r7, #15]
 8006e86:	e01b      	b.n	8006ec0 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6819      	ldr	r1, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9a:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8006ea0:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea6:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 0201 	orr.w	r2, r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d14a      	bne.n	8006f5c <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 021f 	bic.w	r2, r2, #31
 8006ed4:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6859      	ldr	r1, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a0d      	ldr	r2, [pc, #52]	; (8006f24 <HAL_MDF_Init+0x264>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d11e      	bne.n	8006f30 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8006ef2:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <HAL_MDF_Init+0x260>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	4a09      	ldr	r2, [pc, #36]	; (8006f20 <HAL_MDF_Init+0x260>)
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	e01d      	b.n	8006f3a <HAL_MDF_Init+0x27a>
 8006efe:	bf00      	nop
 8006f00:	20000838 	.word	0x20000838
 8006f04:	20000830 	.word	0x20000830
 8006f08:	40025080 	.word	0x40025080
 8006f0c:	40025100 	.word	0x40025100
 8006f10:	40025180 	.word	0x40025180
 8006f14:	40025200 	.word	0x40025200
 8006f18:	40025280 	.word	0x40025280
 8006f1c:	40025300 	.word	0x40025300
 8006f20:	20000834 	.word	0x20000834
 8006f24:	46024080 	.word	0x46024080
 8006f28:	46024000 	.word	0x46024000
 8006f2c:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8006f30:	4b0d      	ldr	r3, [pc, #52]	; (8006f68 <HAL_MDF_Init+0x2a8>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3301      	adds	r3, #1
 8006f36:	4a0c      	ldr	r2, [pc, #48]	; (8006f68 <HAL_MDF_Init+0x2a8>)
 8006f38:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 f816 	bl	8006f70 <MDF_GetHandleNumberFromInstance>
 8006f44:	4602      	mov	r2, r0
 8006f46:	4909      	ldr	r1, [pc, #36]	; (8006f6c <HAL_MDF_Init+0x2ac>)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20000830 	.word	0x20000830
 8006f6c:	20000838 	.word	0x20000838

08006f70 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a19      	ldr	r2, [pc, #100]	; (8006fe0 <MDF_GetHandleNumberFromInstance+0x70>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d102      	bne.n	8006f86 <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	e024      	b.n	8006fd0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a16      	ldr	r2, [pc, #88]	; (8006fe4 <MDF_GetHandleNumberFromInstance+0x74>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d102      	bne.n	8006f94 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	60fb      	str	r3, [r7, #12]
 8006f92:	e01d      	b.n	8006fd0 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a14      	ldr	r2, [pc, #80]	; (8006fe8 <MDF_GetHandleNumberFromInstance+0x78>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d102      	bne.n	8006fa2 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	e016      	b.n	8006fd0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a11      	ldr	r2, [pc, #68]	; (8006fec <MDF_GetHandleNumberFromInstance+0x7c>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d102      	bne.n	8006fb0 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8006faa:	2303      	movs	r3, #3
 8006fac:	60fb      	str	r3, [r7, #12]
 8006fae:	e00f      	b.n	8006fd0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a0f      	ldr	r2, [pc, #60]	; (8006ff0 <MDF_GetHandleNumberFromInstance+0x80>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d102      	bne.n	8006fbe <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8006fb8:	2304      	movs	r3, #4
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	e008      	b.n	8006fd0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a0c      	ldr	r2, [pc, #48]	; (8006ff4 <MDF_GetHandleNumberFromInstance+0x84>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d102      	bne.n	8006fcc <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8006fc6:	2305      	movs	r3, #5
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	e001      	b.n	8006fd0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8006fcc:	2306      	movs	r3, #6
 8006fce:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	40025080 	.word	0x40025080
 8006fe4:	40025100 	.word	0x40025100
 8006fe8:	40025180 	.word	0x40025180
 8006fec:	40025200 	.word	0x40025200
 8006ff0:	40025280 	.word	0x40025280
 8006ff4:	40025300 	.word	0x40025300

08006ff8 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f043 0201 	orr.w	r2, r3, #1
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	601a      	str	r2, [r3, #0]
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af02      	add	r7, sp, #8
 800701e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007020:	2300      	movs	r3, #0
 8007022:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8007024:	f7fc fd22 	bl	8003a6c <HAL_GetTick>
 8007028:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d102      	bne.n	8007036 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	73fb      	strb	r3, [r7, #15]
 8007034:	e0a5      	b.n	8007182 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007040:	2b00      	cmp	r3, #0
 8007042:	f040 809e 	bne.w	8007182 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7fc f8b4 	bl	80031b4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800704c:	f241 3188 	movw	r1, #5000	; 0x1388
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f951 	bl	80072f8 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	4b4b      	ldr	r3, [pc, #300]	; (800718c <HAL_OSPI_Init+0x174>)
 800705e:	4013      	ands	r3, r2
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	68d1      	ldr	r1, [r2, #12]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	6912      	ldr	r2, [r2, #16]
 8007068:	3a01      	subs	r2, #1
 800706a:	0412      	lsls	r2, r2, #16
 800706c:	4311      	orrs	r1, r2
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	6952      	ldr	r2, [r2, #20]
 8007072:	3a01      	subs	r2, #1
 8007074:	0212      	lsls	r2, r2, #8
 8007076:	4311      	orrs	r1, r2
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800707c:	4311      	orrs	r1, r2
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	69d2      	ldr	r2, [r2, #28]
 8007082:	4311      	orrs	r1, r2
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	6812      	ldr	r2, [r2, #0]
 8007088:	430b      	orrs	r3, r1
 800708a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1a      	ldr	r2, [r3, #32]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	430a      	orrs	r2, r1
 80070b2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80070bc:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	3b01      	subs	r3, #1
 80070ce:	021a      	lsls	r2, r3, #8
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2200      	movs	r2, #0
 80070e2:	2120      	movs	r1, #32
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fe09 	bl	8007cfc <OSPI_WaitFlagStateUntilTimeout>
 80070ea:	4603      	mov	r3, r0
 80070ec:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d146      	bne.n	8007182 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	1e5a      	subs	r2, r3, #1
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	689a      	ldr	r2, [r3, #8]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800712a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007136:	431a      	orrs	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f042 0201 	orr.w	r2, r2, #1
 8007150:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d107      	bne.n	800716a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f042 0202 	orr.w	r2, r2, #2
 8007168:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007172:	d103      	bne.n	800717c <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	651a      	str	r2, [r3, #80]	; 0x50
 800717a:	e002      	b.n	8007182 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8007182:	7bfb      	ldrb	r3, [r7, #15]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	f8e0c0f4 	.word	0xf8e0c0f4

08007190 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08a      	sub	sp, #40	; 0x28
 8007194:	af02      	add	r7, sp, #8
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800719c:	f7fc fc66 	bl	8003a6c <HAL_GetTick>
 80071a0:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a6:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d002      	beq.n	80071b4 <HAL_OSPI_HyperbusCfg+0x24>
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d122      	bne.n	80071fa <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	2200      	movs	r2, #0
 80071bc:	2120      	movs	r1, #32
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 fd9c 	bl	8007cfc <OSPI_WaitFlagStateUntilTimeout>
 80071c4:	4603      	mov	r3, r0
 80071c6:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80071c8:	7ffb      	ldrb	r3, [r7, #31]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d11a      	bne.n	8007204 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	041a      	lsls	r2, r3, #16
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	021b      	lsls	r3, r3, #8
 80071da:	431a      	orrs	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	ea42 0103 	orr.w	r1, r2, r3
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	68da      	ldr	r2, [r3, #12]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2202      	movs	r2, #2
 80071f6:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 80071f8:	e004      	b.n	8007204 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2210      	movs	r2, #16
 8007202:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8007204:	7ffb      	ldrb	r3, [r7, #31]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3720      	adds	r7, #32
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b088      	sub	sp, #32
 8007212:	af02      	add	r7, sp, #8
 8007214:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800721a:	f7fc fc27 	bl	8003a6c <HAL_GetTick>
 800721e:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007224:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b00      	cmp	r3, #0
 800722e:	d104      	bne.n	800723a <HAL_OSPI_Abort+0x2c>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f003 0304 	and.w	r3, r3, #4
 8007236:	2b00      	cmp	r3, #0
 8007238:	d052      	beq.n	80072e0 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b00      	cmp	r3, #0
 8007246:	d014      	beq.n	8007272 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0204 	bic.w	r2, r2, #4
 8007256:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800725c:	4618      	mov	r0, r3
 800725e:	f7fc feb2 	bl	8003fc6 <HAL_DMA_Abort>
 8007262:	4603      	mov	r3, r0
 8007264:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8007266:	7dfb      	ldrb	r3, [r7, #23]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2204      	movs	r2, #4
 8007270:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	f003 0320 	and.w	r3, r3, #32
 800727c:	2b00      	cmp	r3, #0
 800727e:	d02b      	beq.n	80072d8 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f042 0202 	orr.w	r2, r2, #2
 800728e:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	2201      	movs	r2, #1
 800729a:	2102      	movs	r1, #2
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fd2d 	bl	8007cfc <OSPI_WaitFlagStateUntilTimeout>
 80072a2:	4603      	mov	r3, r0
 80072a4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d11f      	bne.n	80072ec <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2202      	movs	r2, #2
 80072b2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	2200      	movs	r2, #0
 80072be:	2120      	movs	r1, #32
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fd1b 	bl	8007cfc <OSPI_WaitFlagStateUntilTimeout>
 80072c6:	4603      	mov	r3, r0
 80072c8:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10d      	bne.n	80072ec <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80072d6:	e009      	b.n	80072ec <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80072de:	e005      	b.n	80072ec <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2210      	movs	r2, #16
 80072e8:	655a      	str	r2, [r3, #84]	; 0x54
 80072ea:	e000      	b.n	80072ee <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80072ec:	bf00      	nop
  }

  /* Return function status */
  return status;
 80072ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3718      	adds	r7, #24
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
	...

08007318 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b094      	sub	sp, #80	; 0x50
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a9d      	ldr	r2, [pc, #628]	; (80075ac <HAL_OSPIM_Config+0x294>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d105      	bne.n	8007346 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800733a:	2300      	movs	r3, #0
 800733c:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 800733e:	2301      	movs	r3, #1
 8007340:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8007344:	e004      	b.n	8007350 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8007346:	2301      	movs	r3, #1
 8007348:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007350:	2300      	movs	r3, #0
 8007352:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007356:	e01d      	b.n	8007394 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8007358:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800735c:	3301      	adds	r3, #1
 800735e:	b2d8      	uxtb	r0, r3
 8007360:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8007364:	f107 0114 	add.w	r1, r7, #20
 8007368:	4613      	mov	r3, r2
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	4413      	add	r3, r2
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	440b      	add	r3, r1
 8007372:	4619      	mov	r1, r3
 8007374:	f000 fd02 	bl	8007d7c <OSPIM_GetConfig>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d005      	beq.n	800738a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2208      	movs	r2, #8
 8007388:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800738a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800738e:	3301      	adds	r3, #1
 8007390:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007394:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007398:	2b01      	cmp	r3, #1
 800739a:	d9dd      	bls.n	8007358 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 800739c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f040 849e 	bne.w	8007ce2 <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80073a6:	4b81      	ldr	r3, [pc, #516]	; (80075ac <HAL_OSPIM_Config+0x294>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00b      	beq.n	80073ca <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80073b2:	4b7e      	ldr	r3, [pc, #504]	; (80075ac <HAL_OSPIM_Config+0x294>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a7d      	ldr	r2, [pc, #500]	; (80075ac <HAL_OSPIM_Config+0x294>)
 80073b8:	f023 0301 	bic.w	r3, r3, #1
 80073bc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80073be:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80073c2:	f043 0301 	orr.w	r3, r3, #1
 80073c6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80073ca:	4b79      	ldr	r3, [pc, #484]	; (80075b0 <HAL_OSPIM_Config+0x298>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00b      	beq.n	80073ee <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80073d6:	4b76      	ldr	r3, [pc, #472]	; (80075b0 <HAL_OSPIM_Config+0x298>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a75      	ldr	r2, [pc, #468]	; (80075b0 <HAL_OSPIM_Config+0x298>)
 80073dc:	f023 0301 	bic.w	r3, r3, #1
 80073e0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80073e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80073e6:	f043 0302 	orr.w	r3, r3, #2
 80073ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80073ee:	4971      	ldr	r1, [pc, #452]	; (80075b4 <HAL_OSPIM_Config+0x29c>)
 80073f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073f2:	4613      	mov	r3, r2
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	4413      	add	r3, r2
 80073f8:	00db      	lsls	r3, r3, #3
 80073fa:	3350      	adds	r3, #80	; 0x50
 80073fc:	443b      	add	r3, r7
 80073fe:	3b34      	subs	r3, #52	; 0x34
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3b01      	subs	r3, #1
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	440b      	add	r3, r1
 8007408:	6859      	ldr	r1, [r3, #4]
 800740a:	486a      	ldr	r0, [pc, #424]	; (80075b4 <HAL_OSPIM_Config+0x29c>)
 800740c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800740e:	4613      	mov	r3, r2
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	4413      	add	r3, r2
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	3350      	adds	r3, #80	; 0x50
 8007418:	443b      	add	r3, r7
 800741a:	3b34      	subs	r3, #52	; 0x34
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3b01      	subs	r3, #1
 8007420:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4403      	add	r3, r0
 8007428:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800742a:	4b62      	ldr	r3, [pc, #392]	; (80075b4 <HAL_OSPIM_Config+0x29c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 80c0 	beq.w	80075b8 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007438:	4b5e      	ldr	r3, [pc, #376]	; (80075b4 <HAL_OSPIM_Config+0x29c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a5d      	ldr	r2, [pc, #372]	; (80075b4 <HAL_OSPIM_Config+0x29c>)
 800743e:	f023 0301 	bic.w	r3, r3, #1
 8007442:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8007444:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007448:	2b01      	cmp	r3, #1
 800744a:	f040 8162 	bne.w	8007712 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800744e:	4959      	ldr	r1, [pc, #356]	; (80075b4 <HAL_OSPIM_Config+0x29c>)
 8007450:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007454:	4613      	mov	r3, r2
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	4413      	add	r3, r2
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	3350      	adds	r3, #80	; 0x50
 800745e:	443b      	add	r3, r7
 8007460:	3b3c      	subs	r3, #60	; 0x3c
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3b01      	subs	r3, #1
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	440b      	add	r3, r1
 800746a:	6859      	ldr	r1, [r3, #4]
 800746c:	4851      	ldr	r0, [pc, #324]	; (80075b4 <HAL_OSPIM_Config+0x29c>)
 800746e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007472:	4613      	mov	r3, r2
 8007474:	005b      	lsls	r3, r3, #1
 8007476:	4413      	add	r3, r2
 8007478:	00db      	lsls	r3, r3, #3
 800747a:	3350      	adds	r3, #80	; 0x50
 800747c:	443b      	add	r3, r7
 800747e:	3b3c      	subs	r3, #60	; 0x3c
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3b01      	subs	r3, #1
 8007484:	f041 0202 	orr.w	r2, r1, #2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4403      	add	r3, r0
 800748c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800748e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007492:	4613      	mov	r3, r2
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	4413      	add	r3, r2
 8007498:	00db      	lsls	r3, r3, #3
 800749a:	3350      	adds	r3, #80	; 0x50
 800749c:	443b      	add	r3, r7
 800749e:	3b38      	subs	r3, #56	; 0x38
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d01f      	beq.n	80074e6 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 80074a6:	4943      	ldr	r1, [pc, #268]	; (80075b4 <HAL_OSPIM_Config+0x29c>)
 80074a8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80074ac:	4613      	mov	r3, r2
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	4413      	add	r3, r2
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	3350      	adds	r3, #80	; 0x50
 80074b6:	443b      	add	r3, r7
 80074b8:	3b38      	subs	r3, #56	; 0x38
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3b01      	subs	r3, #1
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	440b      	add	r3, r1
 80074c2:	6859      	ldr	r1, [r3, #4]
 80074c4:	483b      	ldr	r0, [pc, #236]	; (80075b4 <HAL_OSPIM_Config+0x29c>)
 80074c6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80074ca:	4613      	mov	r3, r2
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	4413      	add	r3, r2
 80074d0:	00db      	lsls	r3, r3, #3
 80074d2:	3350      	adds	r3, #80	; 0x50
 80074d4:	443b      	add	r3, r7
 80074d6:	3b38      	subs	r3, #56	; 0x38
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3b01      	subs	r3, #1
 80074dc:	f041 0220 	orr.w	r2, r1, #32
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4403      	add	r3, r0
 80074e4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80074e6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80074ea:	4613      	mov	r3, r2
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	4413      	add	r3, r2
 80074f0:	00db      	lsls	r3, r3, #3
 80074f2:	3350      	adds	r3, #80	; 0x50
 80074f4:	443b      	add	r3, r7
 80074f6:	3b30      	subs	r3, #48	; 0x30
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d023      	beq.n	8007546 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80074fe:	492d      	ldr	r1, [pc, #180]	; (80075b4 <HAL_OSPIM_Config+0x29c>)
 8007500:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007504:	4613      	mov	r3, r2
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	4413      	add	r3, r2
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	3350      	adds	r3, #80	; 0x50
 800750e:	443b      	add	r3, r7
 8007510:	3b30      	subs	r3, #48	; 0x30
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3b01      	subs	r3, #1
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	440b      	add	r3, r1
 800751e:	6859      	ldr	r1, [r3, #4]
 8007520:	4824      	ldr	r0, [pc, #144]	; (80075b4 <HAL_OSPIM_Config+0x29c>)
 8007522:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007526:	4613      	mov	r3, r2
 8007528:	005b      	lsls	r3, r3, #1
 800752a:	4413      	add	r3, r2
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	3350      	adds	r3, #80	; 0x50
 8007530:	443b      	add	r3, r7
 8007532:	3b30      	subs	r3, #48	; 0x30
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3b01      	subs	r3, #1
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4403      	add	r3, r0
 8007544:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007546:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800754a:	4613      	mov	r3, r2
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	4413      	add	r3, r2
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	3350      	adds	r3, #80	; 0x50
 8007554:	443b      	add	r3, r7
 8007556:	3b2c      	subs	r3, #44	; 0x2c
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 80d9 	beq.w	8007712 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8007560:	4914      	ldr	r1, [pc, #80]	; (80075b4 <HAL_OSPIM_Config+0x29c>)
 8007562:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007566:	4613      	mov	r3, r2
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	4413      	add	r3, r2
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	3350      	adds	r3, #80	; 0x50
 8007570:	443b      	add	r3, r7
 8007572:	3b2c      	subs	r3, #44	; 0x2c
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3b01      	subs	r3, #1
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	440b      	add	r3, r1
 8007580:	6859      	ldr	r1, [r3, #4]
 8007582:	480c      	ldr	r0, [pc, #48]	; (80075b4 <HAL_OSPIM_Config+0x29c>)
 8007584:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007588:	4613      	mov	r3, r2
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	4413      	add	r3, r2
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	3350      	adds	r3, #80	; 0x50
 8007592:	443b      	add	r3, r7
 8007594:	3b2c      	subs	r3, #44	; 0x2c
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3b01      	subs	r3, #1
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4403      	add	r3, r0
 80075a6:	605a      	str	r2, [r3, #4]
 80075a8:	e0b3      	b.n	8007712 <HAL_OSPIM_Config+0x3fa>
 80075aa:	bf00      	nop
 80075ac:	420d1400 	.word	0x420d1400
 80075b0:	420d2400 	.word	0x420d2400
 80075b4:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80075b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075ba:	4613      	mov	r3, r2
 80075bc:	005b      	lsls	r3, r3, #1
 80075be:	4413      	add	r3, r2
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	3350      	adds	r3, #80	; 0x50
 80075c4:	443b      	add	r3, r7
 80075c6:	3b3c      	subs	r3, #60	; 0x3c
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 80a1 	beq.w	8007712 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80075d0:	4993      	ldr	r1, [pc, #588]	; (8007820 <HAL_OSPIM_Config+0x508>)
 80075d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075d4:	4613      	mov	r3, r2
 80075d6:	005b      	lsls	r3, r3, #1
 80075d8:	4413      	add	r3, r2
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	3350      	adds	r3, #80	; 0x50
 80075de:	443b      	add	r3, r7
 80075e0:	3b3c      	subs	r3, #60	; 0x3c
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	3b01      	subs	r3, #1
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	440b      	add	r3, r1
 80075ea:	6859      	ldr	r1, [r3, #4]
 80075ec:	488c      	ldr	r0, [pc, #560]	; (8007820 <HAL_OSPIM_Config+0x508>)
 80075ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075f0:	4613      	mov	r3, r2
 80075f2:	005b      	lsls	r3, r3, #1
 80075f4:	4413      	add	r3, r2
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	3350      	adds	r3, #80	; 0x50
 80075fa:	443b      	add	r3, r7
 80075fc:	3b3c      	subs	r3, #60	; 0x3c
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3b01      	subs	r3, #1
 8007602:	f021 0201 	bic.w	r2, r1, #1
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4403      	add	r3, r0
 800760a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800760c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800760e:	4613      	mov	r3, r2
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	4413      	add	r3, r2
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	3350      	adds	r3, #80	; 0x50
 8007618:	443b      	add	r3, r7
 800761a:	3b38      	subs	r3, #56	; 0x38
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d01d      	beq.n	800765e <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8007622:	497f      	ldr	r1, [pc, #508]	; (8007820 <HAL_OSPIM_Config+0x508>)
 8007624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007626:	4613      	mov	r3, r2
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	4413      	add	r3, r2
 800762c:	00db      	lsls	r3, r3, #3
 800762e:	3350      	adds	r3, #80	; 0x50
 8007630:	443b      	add	r3, r7
 8007632:	3b38      	subs	r3, #56	; 0x38
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3b01      	subs	r3, #1
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	440b      	add	r3, r1
 800763c:	6859      	ldr	r1, [r3, #4]
 800763e:	4878      	ldr	r0, [pc, #480]	; (8007820 <HAL_OSPIM_Config+0x508>)
 8007640:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007642:	4613      	mov	r3, r2
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	4413      	add	r3, r2
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	3350      	adds	r3, #80	; 0x50
 800764c:	443b      	add	r3, r7
 800764e:	3b38      	subs	r3, #56	; 0x38
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	3b01      	subs	r3, #1
 8007654:	f021 0210 	bic.w	r2, r1, #16
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4403      	add	r3, r0
 800765c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800765e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007660:	4613      	mov	r3, r2
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	4413      	add	r3, r2
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	3350      	adds	r3, #80	; 0x50
 800766a:	443b      	add	r3, r7
 800766c:	3b30      	subs	r3, #48	; 0x30
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d021      	beq.n	80076b8 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8007674:	496a      	ldr	r1, [pc, #424]	; (8007820 <HAL_OSPIM_Config+0x508>)
 8007676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007678:	4613      	mov	r3, r2
 800767a:	005b      	lsls	r3, r3, #1
 800767c:	4413      	add	r3, r2
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	3350      	adds	r3, #80	; 0x50
 8007682:	443b      	add	r3, r7
 8007684:	3b30      	subs	r3, #48	; 0x30
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3b01      	subs	r3, #1
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	440b      	add	r3, r1
 8007692:	6859      	ldr	r1, [r3, #4]
 8007694:	4862      	ldr	r0, [pc, #392]	; (8007820 <HAL_OSPIM_Config+0x508>)
 8007696:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007698:	4613      	mov	r3, r2
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	4413      	add	r3, r2
 800769e:	00db      	lsls	r3, r3, #3
 80076a0:	3350      	adds	r3, #80	; 0x50
 80076a2:	443b      	add	r3, r7
 80076a4:	3b30      	subs	r3, #48	; 0x30
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4403      	add	r3, r0
 80076b6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80076b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076ba:	4613      	mov	r3, r2
 80076bc:	005b      	lsls	r3, r3, #1
 80076be:	4413      	add	r3, r2
 80076c0:	00db      	lsls	r3, r3, #3
 80076c2:	3350      	adds	r3, #80	; 0x50
 80076c4:	443b      	add	r3, r7
 80076c6:	3b2c      	subs	r3, #44	; 0x2c
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d021      	beq.n	8007712 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80076ce:	4954      	ldr	r1, [pc, #336]	; (8007820 <HAL_OSPIM_Config+0x508>)
 80076d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076d2:	4613      	mov	r3, r2
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	4413      	add	r3, r2
 80076d8:	00db      	lsls	r3, r3, #3
 80076da:	3350      	adds	r3, #80	; 0x50
 80076dc:	443b      	add	r3, r7
 80076de:	3b2c      	subs	r3, #44	; 0x2c
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	440b      	add	r3, r1
 80076ec:	6859      	ldr	r1, [r3, #4]
 80076ee:	484c      	ldr	r0, [pc, #304]	; (8007820 <HAL_OSPIM_Config+0x508>)
 80076f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076f2:	4613      	mov	r3, r2
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	4413      	add	r3, r2
 80076f8:	00db      	lsls	r3, r3, #3
 80076fa:	3350      	adds	r3, #80	; 0x50
 80076fc:	443b      	add	r3, r7
 80076fe:	3b2c      	subs	r3, #44	; 0x2c
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3b01      	subs	r3, #1
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4403      	add	r3, r0
 8007710:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	6819      	ldr	r1, [r3, #0]
 8007716:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800771a:	4613      	mov	r3, r2
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	4413      	add	r3, r2
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	3350      	adds	r3, #80	; 0x50
 8007724:	443b      	add	r3, r7
 8007726:	3b3c      	subs	r3, #60	; 0x3c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4299      	cmp	r1, r3
 800772c:	d038      	beq.n	80077a0 <HAL_OSPIM_Config+0x488>
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	6859      	ldr	r1, [r3, #4]
 8007732:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007736:	4613      	mov	r3, r2
 8007738:	005b      	lsls	r3, r3, #1
 800773a:	4413      	add	r3, r2
 800773c:	00db      	lsls	r3, r3, #3
 800773e:	3350      	adds	r3, #80	; 0x50
 8007740:	443b      	add	r3, r7
 8007742:	3b38      	subs	r3, #56	; 0x38
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4299      	cmp	r1, r3
 8007748:	d02a      	beq.n	80077a0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	6899      	ldr	r1, [r3, #8]
 800774e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007752:	4613      	mov	r3, r2
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	4413      	add	r3, r2
 8007758:	00db      	lsls	r3, r3, #3
 800775a:	3350      	adds	r3, #80	; 0x50
 800775c:	443b      	add	r3, r7
 800775e:	3b34      	subs	r3, #52	; 0x34
 8007760:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8007762:	4299      	cmp	r1, r3
 8007764:	d01c      	beq.n	80077a0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	68d9      	ldr	r1, [r3, #12]
 800776a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800776e:	4613      	mov	r3, r2
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	4413      	add	r3, r2
 8007774:	00db      	lsls	r3, r3, #3
 8007776:	3350      	adds	r3, #80	; 0x50
 8007778:	443b      	add	r3, r7
 800777a:	3b30      	subs	r3, #48	; 0x30
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4299      	cmp	r1, r3
 8007780:	d00e      	beq.n	80077a0 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	6919      	ldr	r1, [r3, #16]
 8007786:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800778a:	4613      	mov	r3, r2
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	4413      	add	r3, r2
 8007790:	00db      	lsls	r3, r3, #3
 8007792:	3350      	adds	r3, #80	; 0x50
 8007794:	443b      	add	r3, r7
 8007796:	3b2c      	subs	r3, #44	; 0x2c
 8007798:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800779a:	4299      	cmp	r1, r3
 800779c:	f040 810e 	bne.w	80079bc <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	6819      	ldr	r1, [r3, #0]
 80077a4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80077a8:	4613      	mov	r3, r2
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	4413      	add	r3, r2
 80077ae:	00db      	lsls	r3, r3, #3
 80077b0:	3350      	adds	r3, #80	; 0x50
 80077b2:	443b      	add	r3, r7
 80077b4:	3b3c      	subs	r3, #60	; 0x3c
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4299      	cmp	r1, r3
 80077ba:	d133      	bne.n	8007824 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	6859      	ldr	r1, [r3, #4]
 80077c0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80077c4:	4613      	mov	r3, r2
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	4413      	add	r3, r2
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	3350      	adds	r3, #80	; 0x50
 80077ce:	443b      	add	r3, r7
 80077d0:	3b38      	subs	r3, #56	; 0x38
 80077d2:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80077d4:	4299      	cmp	r1, r3
 80077d6:	d125      	bne.n	8007824 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	68d9      	ldr	r1, [r3, #12]
 80077dc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80077e0:	4613      	mov	r3, r2
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	4413      	add	r3, r2
 80077e6:	00db      	lsls	r3, r3, #3
 80077e8:	3350      	adds	r3, #80	; 0x50
 80077ea:	443b      	add	r3, r7
 80077ec:	3b30      	subs	r3, #48	; 0x30
 80077ee:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80077f0:	4299      	cmp	r1, r3
 80077f2:	d117      	bne.n	8007824 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	6919      	ldr	r1, [r3, #16]
 80077f8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80077fc:	4613      	mov	r3, r2
 80077fe:	005b      	lsls	r3, r3, #1
 8007800:	4413      	add	r3, r2
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	3350      	adds	r3, #80	; 0x50
 8007806:	443b      	add	r3, r7
 8007808:	3b2c      	subs	r3, #44	; 0x2c
 800780a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800780c:	4299      	cmp	r1, r3
 800780e:	d109      	bne.n	8007824 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007810:	4b03      	ldr	r3, [pc, #12]	; (8007820 <HAL_OSPIM_Config+0x508>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a02      	ldr	r2, [pc, #8]	; (8007820 <HAL_OSPIM_Config+0x508>)
 8007816:	f043 0301 	orr.w	r3, r3, #1
 800781a:	6013      	str	r3, [r2, #0]
 800781c:	e0ce      	b.n	80079bc <HAL_OSPIM_Config+0x6a4>
 800781e:	bf00      	nop
 8007820:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8007824:	49a4      	ldr	r1, [pc, #656]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 8007826:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800782a:	4613      	mov	r3, r2
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	4413      	add	r3, r2
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	3350      	adds	r3, #80	; 0x50
 8007834:	443b      	add	r3, r7
 8007836:	3b3c      	subs	r3, #60	; 0x3c
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3b01      	subs	r3, #1
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	440b      	add	r3, r1
 8007840:	6859      	ldr	r1, [r3, #4]
 8007842:	489d      	ldr	r0, [pc, #628]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 8007844:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007848:	4613      	mov	r3, r2
 800784a:	005b      	lsls	r3, r3, #1
 800784c:	4413      	add	r3, r2
 800784e:	00db      	lsls	r3, r3, #3
 8007850:	3350      	adds	r3, #80	; 0x50
 8007852:	443b      	add	r3, r7
 8007854:	3b3c      	subs	r3, #60	; 0x3c
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3b01      	subs	r3, #1
 800785a:	f021 0201 	bic.w	r2, r1, #1
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4403      	add	r3, r0
 8007862:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007864:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007868:	4613      	mov	r3, r2
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	4413      	add	r3, r2
 800786e:	00db      	lsls	r3, r3, #3
 8007870:	3350      	adds	r3, #80	; 0x50
 8007872:	443b      	add	r3, r7
 8007874:	3b38      	subs	r3, #56	; 0x38
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d01f      	beq.n	80078bc <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800787c:	498e      	ldr	r1, [pc, #568]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 800787e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007882:	4613      	mov	r3, r2
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	4413      	add	r3, r2
 8007888:	00db      	lsls	r3, r3, #3
 800788a:	3350      	adds	r3, #80	; 0x50
 800788c:	443b      	add	r3, r7
 800788e:	3b38      	subs	r3, #56	; 0x38
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3b01      	subs	r3, #1
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	440b      	add	r3, r1
 8007898:	6859      	ldr	r1, [r3, #4]
 800789a:	4887      	ldr	r0, [pc, #540]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 800789c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80078a0:	4613      	mov	r3, r2
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	4413      	add	r3, r2
 80078a6:	00db      	lsls	r3, r3, #3
 80078a8:	3350      	adds	r3, #80	; 0x50
 80078aa:	443b      	add	r3, r7
 80078ac:	3b38      	subs	r3, #56	; 0x38
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3b01      	subs	r3, #1
 80078b2:	f021 0210 	bic.w	r2, r1, #16
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4403      	add	r3, r0
 80078ba:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80078bc:	497e      	ldr	r1, [pc, #504]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 80078be:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80078c2:	4613      	mov	r3, r2
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	4413      	add	r3, r2
 80078c8:	00db      	lsls	r3, r3, #3
 80078ca:	3350      	adds	r3, #80	; 0x50
 80078cc:	443b      	add	r3, r7
 80078ce:	3b34      	subs	r3, #52	; 0x34
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	440b      	add	r3, r1
 80078d8:	6859      	ldr	r1, [r3, #4]
 80078da:	4877      	ldr	r0, [pc, #476]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 80078dc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80078e0:	4613      	mov	r3, r2
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	4413      	add	r3, r2
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	3350      	adds	r3, #80	; 0x50
 80078ea:	443b      	add	r3, r7
 80078ec:	3b34      	subs	r3, #52	; 0x34
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4403      	add	r3, r0
 80078fa:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80078fc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007900:	4613      	mov	r3, r2
 8007902:	005b      	lsls	r3, r3, #1
 8007904:	4413      	add	r3, r2
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	3350      	adds	r3, #80	; 0x50
 800790a:	443b      	add	r3, r7
 800790c:	3b30      	subs	r3, #48	; 0x30
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d023      	beq.n	800795c <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007914:	4968      	ldr	r1, [pc, #416]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 8007916:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800791a:	4613      	mov	r3, r2
 800791c:	005b      	lsls	r3, r3, #1
 800791e:	4413      	add	r3, r2
 8007920:	00db      	lsls	r3, r3, #3
 8007922:	3350      	adds	r3, #80	; 0x50
 8007924:	443b      	add	r3, r7
 8007926:	3b30      	subs	r3, #48	; 0x30
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3b01      	subs	r3, #1
 800792c:	f003 0301 	and.w	r3, r3, #1
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	440b      	add	r3, r1
 8007934:	6859      	ldr	r1, [r3, #4]
 8007936:	4860      	ldr	r0, [pc, #384]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 8007938:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800793c:	4613      	mov	r3, r2
 800793e:	005b      	lsls	r3, r3, #1
 8007940:	4413      	add	r3, r2
 8007942:	00db      	lsls	r3, r3, #3
 8007944:	3350      	adds	r3, #80	; 0x50
 8007946:	443b      	add	r3, r7
 8007948:	3b30      	subs	r3, #48	; 0x30
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3b01      	subs	r3, #1
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4403      	add	r3, r0
 800795a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800795c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007960:	4613      	mov	r3, r2
 8007962:	005b      	lsls	r3, r3, #1
 8007964:	4413      	add	r3, r2
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	3350      	adds	r3, #80	; 0x50
 800796a:	443b      	add	r3, r7
 800796c:	3b2c      	subs	r3, #44	; 0x2c
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d023      	beq.n	80079bc <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007974:	4950      	ldr	r1, [pc, #320]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 8007976:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800797a:	4613      	mov	r3, r2
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	4413      	add	r3, r2
 8007980:	00db      	lsls	r3, r3, #3
 8007982:	3350      	adds	r3, #80	; 0x50
 8007984:	443b      	add	r3, r7
 8007986:	3b2c      	subs	r3, #44	; 0x2c
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3b01      	subs	r3, #1
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	440b      	add	r3, r1
 8007994:	6859      	ldr	r1, [r3, #4]
 8007996:	4848      	ldr	r0, [pc, #288]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 8007998:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800799c:	4613      	mov	r3, r2
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	4413      	add	r3, r2
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	3350      	adds	r3, #80	; 0x50
 80079a6:	443b      	add	r3, r7
 80079a8:	3b2c      	subs	r3, #44	; 0x2c
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3b01      	subs	r3, #1
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4403      	add	r3, r0
 80079ba:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80079bc:	4a3e      	ldr	r2, [pc, #248]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079d0:	025b      	lsls	r3, r3, #9
 80079d2:	431a      	orrs	r2, r3
 80079d4:	4938      	ldr	r1, [pc, #224]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	3b01      	subs	r3, #1
 80079dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	440b      	add	r3, r1
 80079e4:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d018      	beq.n	8007a20 <HAL_OSPIM_Config+0x708>
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f6:	d813      	bhi.n	8007a20 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	1e5a      	subs	r2, r3, #1
 80079fe:	4b2e      	ldr	r3, [pc, #184]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	0c1b      	lsrs	r3, r3, #16
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d90a      	bls.n	8007a20 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8007a0a:	4b2b      	ldr	r3, [pc, #172]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	041b      	lsls	r3, r3, #16
 8007a1a:	4927      	ldr	r1, [pc, #156]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007a20:	4b25      	ldr	r3, [pc, #148]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 809a 	beq.w	8007b62 <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8007a2e:	4a22      	ldr	r2, [pc, #136]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	3b01      	subs	r3, #1
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f023 0203 	bic.w	r2, r3, #3
 8007a40:	491d      	ldr	r1, [pc, #116]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3b01      	subs	r3, #1
 8007a48:	f042 0201 	orr.w	r2, r2, #1
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	440b      	add	r3, r1
 8007a50:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d011      	beq.n	8007a7e <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8007a5a:	4a17      	ldr	r2, [pc, #92]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	3b01      	subs	r3, #1
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a6c:	4912      	ldr	r1, [pc, #72]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	3b01      	subs	r3, #1
 8007a74:	f042 0210 	orr.w	r2, r2, #16
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	440b      	add	r3, r1
 8007a7c:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d018      	beq.n	8007abc <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007a8a:	4a0b      	ldr	r2, [pc, #44]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007aa0:	4905      	ldr	r1, [pc, #20]	; (8007ab8 <HAL_OSPIM_Config+0x7a0>)
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	440b      	add	r3, r1
 8007ab4:	605a      	str	r2, [r3, #4]
 8007ab6:	e01b      	b.n	8007af0 <HAL_OSPIM_Config+0x7d8>
 8007ab8:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d015      	beq.n	8007af0 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007ac4:	4a8a      	ldr	r2, [pc, #552]	; (8007cf0 <HAL_OSPIM_Config+0x9d8>)
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	3b01      	subs	r3, #1
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007ada:	4985      	ldr	r1, [pc, #532]	; (8007cf0 <HAL_OSPIM_Config+0x9d8>)
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	440b      	add	r3, r1
 8007aee:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d016      	beq.n	8007b2a <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007afc:	4a7c      	ldr	r2, [pc, #496]	; (8007cf0 <HAL_OSPIM_Config+0x9d8>)
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007b12:	4977      	ldr	r1, [pc, #476]	; (8007cf0 <HAL_OSPIM_Config+0x9d8>)
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	440b      	add	r3, r1
 8007b26:	605a      	str	r2, [r3, #4]
 8007b28:	e0c3      	b.n	8007cb2 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 80bf 	beq.w	8007cb2 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007b34:	4a6e      	ldr	r2, [pc, #440]	; (8007cf0 <HAL_OSPIM_Config+0x9d8>)
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007b4a:	4969      	ldr	r1, [pc, #420]	; (8007cf0 <HAL_OSPIM_Config+0x9d8>)
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	3b01      	subs	r3, #1
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	440b      	add	r3, r1
 8007b5e:	605a      	str	r2, [r3, #4]
 8007b60:	e0a7      	b.n	8007cb2 <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8007b62:	4a63      	ldr	r2, [pc, #396]	; (8007cf0 <HAL_OSPIM_Config+0x9d8>)
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f023 0203 	bic.w	r2, r3, #3
 8007b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b76:	005b      	lsls	r3, r3, #1
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	495d      	ldr	r1, [pc, #372]	; (8007cf0 <HAL_OSPIM_Config+0x9d8>)
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	f042 0201 	orr.w	r2, r2, #1
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	440b      	add	r3, r1
 8007b8a:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d014      	beq.n	8007bbe <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8007b94:	4a56      	ldr	r2, [pc, #344]	; (8007cf0 <HAL_OSPIM_Config+0x9d8>)
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ba8:	015b      	lsls	r3, r3, #5
 8007baa:	431a      	orrs	r2, r3
 8007bac:	4950      	ldr	r1, [pc, #320]	; (8007cf0 <HAL_OSPIM_Config+0x9d8>)
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	f042 0210 	orr.w	r2, r2, #16
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	440b      	add	r3, r1
 8007bbc:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d019      	beq.n	8007bfe <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007bca:	4a49      	ldr	r2, [pc, #292]	; (8007cf0 <HAL_OSPIM_Config+0x9d8>)
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007be2:	049b      	lsls	r3, r3, #18
 8007be4:	431a      	orrs	r2, r3
 8007be6:	4942      	ldr	r1, [pc, #264]	; (8007cf0 <HAL_OSPIM_Config+0x9d8>)
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	3b01      	subs	r3, #1
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	440b      	add	r3, r1
 8007bfa:	605a      	str	r2, [r3, #4]
 8007bfc:	e01c      	b.n	8007c38 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d018      	beq.n	8007c38 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007c06:	4a3a      	ldr	r2, [pc, #232]	; (8007cf0 <HAL_OSPIM_Config+0x9d8>)
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c1e:	069b      	lsls	r3, r3, #26
 8007c20:	431a      	orrs	r2, r3
 8007c22:	4933      	ldr	r1, [pc, #204]	; (8007cf0 <HAL_OSPIM_Config+0x9d8>)
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	f003 0301 	and.w	r3, r3, #1
 8007c2e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	440b      	add	r3, r1
 8007c36:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d019      	beq.n	8007c78 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007c44:	4a2a      	ldr	r2, [pc, #168]	; (8007cf0 <HAL_OSPIM_Config+0x9d8>)
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c5c:	049b      	lsls	r3, r3, #18
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	4923      	ldr	r1, [pc, #140]	; (8007cf0 <HAL_OSPIM_Config+0x9d8>)
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	440b      	add	r3, r1
 8007c74:	605a      	str	r2, [r3, #4]
 8007c76:	e01c      	b.n	8007cb2 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d018      	beq.n	8007cb2 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007c80:	4a1b      	ldr	r2, [pc, #108]	; (8007cf0 <HAL_OSPIM_Config+0x9d8>)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c98:	069b      	lsls	r3, r3, #26
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	4914      	ldr	r1, [pc, #80]	; (8007cf0 <HAL_OSPIM_Config+0x9d8>)
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	440b      	add	r3, r1
 8007cb0:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8007cb2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d005      	beq.n	8007cca <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007cbe:	4b0d      	ldr	r3, [pc, #52]	; (8007cf4 <HAL_OSPIM_Config+0x9dc>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a0c      	ldr	r2, [pc, #48]	; (8007cf4 <HAL_OSPIM_Config+0x9dc>)
 8007cc4:	f043 0301 	orr.w	r3, r3, #1
 8007cc8:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8007cca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d005      	beq.n	8007ce2 <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007cd6:	4b08      	ldr	r3, [pc, #32]	; (8007cf8 <HAL_OSPIM_Config+0x9e0>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a07      	ldr	r2, [pc, #28]	; (8007cf8 <HAL_OSPIM_Config+0x9e0>)
 8007cdc:	f043 0301 	orr.w	r3, r3, #1
 8007ce0:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007ce2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3750      	adds	r7, #80	; 0x50
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	420c4000 	.word	0x420c4000
 8007cf4:	420d1400 	.word	0x420d1400
 8007cf8:	420d2400 	.word	0x420d2400

08007cfc <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	603b      	str	r3, [r7, #0]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007d0c:	e022      	b.n	8007d54 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d14:	d01e      	beq.n	8007d54 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d16:	f7fb fea9 	bl	8003a6c <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	69ba      	ldr	r2, [r7, #24]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d302      	bcc.n	8007d2c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d113      	bne.n	8007d54 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6a1a      	ldr	r2, [r3, #32]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	401a      	ands	r2, r3
 8007d36:	79fb      	ldrb	r3, [r7, #7]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d00b      	beq.n	8007d54 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d42:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d48:	f043 0201 	orr.w	r2, r3, #1
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e00e      	b.n	8007d72 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6a1a      	ldr	r2, [r3, #32]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bf14      	ite	ne
 8007d62:	2301      	movne	r3, #1
 8007d64:	2300      	moveq	r3, #0
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	461a      	mov	r2, r3
 8007d6a:	79fb      	ldrb	r3, [r7, #7]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d1ce      	bne.n	8007d0e <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
	...

08007d7c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	4603      	mov	r3, r0
 8007d84:	6039      	str	r1, [r7, #0]
 8007d86:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8007d90:	79fb      	ldrb	r3, [r7, #7]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d005      	beq.n	8007da2 <OSPIM_GetConfig+0x26>
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d802      	bhi.n	8007da2 <OSPIM_GetConfig+0x26>
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d102      	bne.n	8007da8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	75fb      	strb	r3, [r7, #23]
 8007da6:	e098      	b.n	8007eda <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2200      	movs	r2, #0
 8007dac:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2200      	movs	r2, #0
 8007db2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2200      	movs	r2, #0
 8007db8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d10b      	bne.n	8007de4 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007dcc:	4b46      	ldr	r3, [pc, #280]	; (8007ee8 <OSPIM_GetConfig+0x16c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d102      	bne.n	8007dde <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007dd8:	4b44      	ldr	r3, [pc, #272]	; (8007eec <OSPIM_GetConfig+0x170>)
 8007dda:	613b      	str	r3, [r7, #16]
 8007ddc:	e002      	b.n	8007de4 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8007dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007de2:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007de4:	2300      	movs	r3, #0
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	e074      	b.n	8007ed4 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8007dea:	4a3f      	ldr	r2, [pc, #252]	; (8007ee8 <OSPIM_GetConfig+0x16c>)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4413      	add	r3, r2
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00a      	beq.n	8007e16 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	4053      	eors	r3, r2
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d103      	bne.n	8007e16 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	1c5a      	adds	r2, r3, #1
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	f003 0310 	and.w	r3, r3, #16
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00a      	beq.n	8007e36 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	4053      	eors	r3, r2
 8007e26:	f003 0320 	and.w	r3, r3, #32
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d103      	bne.n	8007e36 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	1c5a      	adds	r2, r3, #1
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00a      	beq.n	8007e56 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	4053      	eors	r3, r2
 8007e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d103      	bne.n	8007e56 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d018      	beq.n	8007e92 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	4053      	eors	r3, r2
 8007e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d111      	bne.n	8007e92 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d106      	bne.n	8007e86 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	60da      	str	r2, [r3, #12]
 8007e84:	e005      	b.n	8007e92 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d018      	beq.n	8007ece <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	4053      	eors	r3, r2
 8007ea2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d111      	bne.n	8007ece <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d106      	bne.n	8007ec2 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	611a      	str	r2, [r3, #16]
 8007ec0:	e005      	b.n	8007ece <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d987      	bls.n	8007dea <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	371c      	adds	r7, #28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	420c4000 	.word	0x420c4000
 8007eec:	04040222 	.word	0x04040222

08007ef0 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689a      	ldr	r2, [r3, #8]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f042 0202 	orr.w	r2, r2, #2
 8007f0c:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2208      	movs	r2, #8
 8007f12:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a15      	ldr	r2, [pc, #84]	; (8007f70 <HAL_OSPI_DLYB_SetConfig+0x80>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d109      	bne.n	8007f32 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8007f1e:	4815      	ldr	r0, [pc, #84]	; (8007f74 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007f20:	f7ff f86a 	bl	8006ff8 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	4813      	ldr	r0, [pc, #76]	; (8007f74 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007f28:	f006 f928 	bl	800e17c <LL_DLYB_SetDelay>
    status = HAL_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	73fb      	strb	r3, [r7, #15]
 8007f30:	e00d      	b.n	8007f4e <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a10      	ldr	r2, [pc, #64]	; (8007f78 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d108      	bne.n	8007f4e <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8007f3c:	480f      	ldr	r0, [pc, #60]	; (8007f7c <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8007f3e:	f7ff f85b 	bl	8006ff8 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	480d      	ldr	r0, [pc, #52]	; (8007f7c <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8007f46:	f006 f919 	bl	800e17c <LL_DLYB_SetDelay>
    status = HAL_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff f95d 	bl	800720e <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689a      	ldr	r2, [r3, #8]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0202 	bic.w	r2, r2, #2
 8007f62:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	420d1400 	.word	0x420d1400
 8007f74:	420cf000 	.word	0x420cf000
 8007f78:	420d2400 	.word	0x420d2400
 8007f7c:	420cf400 	.word	0x420cf400

08007f80 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007f80:	b480      	push	{r7}
 8007f82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007f84:	4b05      	ldr	r3, [pc, #20]	; (8007f9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f88:	4a04      	ldr	r2, [pc, #16]	; (8007f9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007f8a:	f043 0301 	orr.w	r3, r3, #1
 8007f8e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8007f90:	bf00      	nop
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	46020800 	.word	0x46020800

08007fa0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8007fa8:	4b39      	ldr	r3, [pc, #228]	; (8008090 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007fb0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d10b      	bne.n	8007fd2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fc0:	d905      	bls.n	8007fce <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007fc2:	4b33      	ldr	r3, [pc, #204]	; (8008090 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	4a32      	ldr	r2, [pc, #200]	; (8008090 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fcc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	e057      	b.n	8008082 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fd8:	d90a      	bls.n	8007ff0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8007fda:	4b2d      	ldr	r3, [pc, #180]	; (8008090 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	4a2a      	ldr	r2, [pc, #168]	; (8008090 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fec:	60d3      	str	r3, [r2, #12]
 8007fee:	e007      	b.n	8008000 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8007ff0:	4b27      	ldr	r3, [pc, #156]	; (8008090 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007ff8:	4925      	ldr	r1, [pc, #148]	; (8008090 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008000:	4b24      	ldr	r3, [pc, #144]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a24      	ldr	r2, [pc, #144]	; (8008098 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008006:	fba2 2303 	umull	r2, r3, r2, r3
 800800a:	099b      	lsrs	r3, r3, #6
 800800c:	2232      	movs	r2, #50	; 0x32
 800800e:	fb02 f303 	mul.w	r3, r2, r3
 8008012:	4a21      	ldr	r2, [pc, #132]	; (8008098 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008014:	fba2 2303 	umull	r2, r3, r2, r3
 8008018:	099b      	lsrs	r3, r3, #6
 800801a:	3301      	adds	r3, #1
 800801c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800801e:	e002      	b.n	8008026 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3b01      	subs	r3, #1
 8008024:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8008026:	4b1a      	ldr	r3, [pc, #104]	; (8008090 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d102      	bne.n	8008038 <HAL_PWREx_ControlVoltageScaling+0x98>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1f3      	bne.n	8008020 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d01b      	beq.n	8008076 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800803e:	4b15      	ldr	r3, [pc, #84]	; (8008094 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a15      	ldr	r2, [pc, #84]	; (8008098 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008044:	fba2 2303 	umull	r2, r3, r2, r3
 8008048:	099b      	lsrs	r3, r3, #6
 800804a:	2232      	movs	r2, #50	; 0x32
 800804c:	fb02 f303 	mul.w	r3, r2, r3
 8008050:	4a11      	ldr	r2, [pc, #68]	; (8008098 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008052:	fba2 2303 	umull	r2, r3, r2, r3
 8008056:	099b      	lsrs	r3, r3, #6
 8008058:	3301      	adds	r3, #1
 800805a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800805c:	e002      	b.n	8008064 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3b01      	subs	r3, #1
 8008062:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008064:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d102      	bne.n	8008076 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1f3      	bne.n	800805e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e000      	b.n	8008082 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	46020800 	.word	0x46020800
 8008094:	20000000 	.word	0x20000000
 8008098:	10624dd3 	.word	0x10624dd3

0800809c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800809c:	b480      	push	{r7}
 800809e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80080a0:	4b04      	ldr	r3, [pc, #16]	; (80080b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80080a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	46020800 	.word	0x46020800

080080b8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80080c0:	4b22      	ldr	r3, [pc, #136]	; (800814c <HAL_PWREx_ConfigSupply+0x94>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a22      	ldr	r2, [pc, #136]	; (8008150 <HAL_PWREx_ConfigSupply+0x98>)
 80080c6:	fba2 2303 	umull	r2, r3, r2, r3
 80080ca:	099b      	lsrs	r3, r3, #6
 80080cc:	2232      	movs	r2, #50	; 0x32
 80080ce:	fb02 f303 	mul.w	r3, r2, r3
 80080d2:	4a1f      	ldr	r2, [pc, #124]	; (8008150 <HAL_PWREx_ConfigSupply+0x98>)
 80080d4:	fba2 2303 	umull	r2, r3, r2, r3
 80080d8:	099b      	lsrs	r3, r3, #6
 80080da:	3301      	adds	r3, #1
 80080dc:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d113      	bne.n	800810c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80080e4:	4b1b      	ldr	r3, [pc, #108]	; (8008154 <HAL_PWREx_ConfigSupply+0x9c>)
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	4a1a      	ldr	r2, [pc, #104]	; (8008154 <HAL_PWREx_ConfigSupply+0x9c>)
 80080ea:	f023 0302 	bic.w	r3, r3, #2
 80080ee:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80080f0:	e002      	b.n	80080f8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3b01      	subs	r3, #1
 80080f6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80080f8:	4b16      	ldr	r3, [pc, #88]	; (8008154 <HAL_PWREx_ConfigSupply+0x9c>)
 80080fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b02      	cmp	r3, #2
 8008102:	d116      	bne.n	8008132 <HAL_PWREx_ConfigSupply+0x7a>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1f3      	bne.n	80080f2 <HAL_PWREx_ConfigSupply+0x3a>
 800810a:	e012      	b.n	8008132 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800810c:	4b11      	ldr	r3, [pc, #68]	; (8008154 <HAL_PWREx_ConfigSupply+0x9c>)
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	4a10      	ldr	r2, [pc, #64]	; (8008154 <HAL_PWREx_ConfigSupply+0x9c>)
 8008112:	f043 0302 	orr.w	r3, r3, #2
 8008116:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008118:	e002      	b.n	8008120 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3b01      	subs	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008120:	4b0c      	ldr	r3, [pc, #48]	; (8008154 <HAL_PWREx_ConfigSupply+0x9c>)
 8008122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	2b00      	cmp	r3, #0
 800812a:	d102      	bne.n	8008132 <HAL_PWREx_ConfigSupply+0x7a>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1f3      	bne.n	800811a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d101      	bne.n	800813c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e000      	b.n	800813e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	20000000 	.word	0x20000000
 8008150:	10624dd3 	.word	0x10624dd3
 8008154:	46020800 	.word	0x46020800

08008158 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008158:	b480      	push	{r7}
 800815a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800815c:	4b05      	ldr	r3, [pc, #20]	; (8008174 <HAL_PWREx_EnableVddIO2+0x1c>)
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	4a04      	ldr	r2, [pc, #16]	; (8008174 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008162:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008166:	6113      	str	r3, [r2, #16]
}
 8008168:	bf00      	nop
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	46020800 	.word	0x46020800

08008178 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08e      	sub	sp, #56	; 0x38
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8008180:	2300      	movs	r3, #0
 8008182:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d102      	bne.n	8008192 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	f000 bec8 	b.w	8008f22 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008192:	4b99      	ldr	r3, [pc, #612]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	f003 030c 	and.w	r3, r3, #12
 800819a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800819c:	4b96      	ldr	r3, [pc, #600]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 800819e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a0:	f003 0303 	and.w	r3, r3, #3
 80081a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0310 	and.w	r3, r3, #16
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f000 816c 	beq.w	800848c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d007      	beq.n	80081ca <HAL_RCC_OscConfig+0x52>
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	2b0c      	cmp	r3, #12
 80081be:	f040 80de 	bne.w	800837e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80081c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	f040 80da 	bne.w	800837e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	69db      	ldr	r3, [r3, #28]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d102      	bne.n	80081d8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	f000 bea5 	b.w	8008f22 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081dc:	4b86      	ldr	r3, [pc, #536]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d004      	beq.n	80081f2 <HAL_RCC_OscConfig+0x7a>
 80081e8:	4b83      	ldr	r3, [pc, #524]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80081f0:	e005      	b.n	80081fe <HAL_RCC_OscConfig+0x86>
 80081f2:	4b81      	ldr	r3, [pc, #516]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 80081f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081f8:	041b      	lsls	r3, r3, #16
 80081fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80081fe:	4293      	cmp	r3, r2
 8008200:	d255      	bcs.n	80082ae <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10a      	bne.n	800821e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820c:	4618      	mov	r0, r3
 800820e:	f001 fa3d 	bl	800968c <RCC_SetFlashLatencyFromMSIRange>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d002      	beq.n	800821e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	f000 be82 	b.w	8008f22 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800821e:	4b76      	ldr	r3, [pc, #472]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	4a75      	ldr	r2, [pc, #468]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 8008224:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008228:	6093      	str	r3, [r2, #8]
 800822a:	4b73      	ldr	r3, [pc, #460]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	4970      	ldr	r1, [pc, #448]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 8008238:	4313      	orrs	r3, r2
 800823a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008244:	d309      	bcc.n	800825a <HAL_RCC_OscConfig+0xe2>
 8008246:	4b6c      	ldr	r3, [pc, #432]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	f023 021f 	bic.w	r2, r3, #31
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	4969      	ldr	r1, [pc, #420]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 8008254:	4313      	orrs	r3, r2
 8008256:	60cb      	str	r3, [r1, #12]
 8008258:	e07e      	b.n	8008358 <HAL_RCC_OscConfig+0x1e0>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825e:	2b00      	cmp	r3, #0
 8008260:	da0a      	bge.n	8008278 <HAL_RCC_OscConfig+0x100>
 8008262:	4b65      	ldr	r3, [pc, #404]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	015b      	lsls	r3, r3, #5
 8008270:	4961      	ldr	r1, [pc, #388]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 8008272:	4313      	orrs	r3, r2
 8008274:	60cb      	str	r3, [r1, #12]
 8008276:	e06f      	b.n	8008358 <HAL_RCC_OscConfig+0x1e0>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008280:	d30a      	bcc.n	8008298 <HAL_RCC_OscConfig+0x120>
 8008282:	4b5d      	ldr	r3, [pc, #372]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	029b      	lsls	r3, r3, #10
 8008290:	4959      	ldr	r1, [pc, #356]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 8008292:	4313      	orrs	r3, r2
 8008294:	60cb      	str	r3, [r1, #12]
 8008296:	e05f      	b.n	8008358 <HAL_RCC_OscConfig+0x1e0>
 8008298:	4b57      	ldr	r3, [pc, #348]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a1b      	ldr	r3, [r3, #32]
 80082a4:	03db      	lsls	r3, r3, #15
 80082a6:	4954      	ldr	r1, [pc, #336]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 80082a8:	4313      	orrs	r3, r2
 80082aa:	60cb      	str	r3, [r1, #12]
 80082ac:	e054      	b.n	8008358 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80082ae:	4b52      	ldr	r3, [pc, #328]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	4a51      	ldr	r2, [pc, #324]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 80082b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80082b8:	6093      	str	r3, [r2, #8]
 80082ba:	4b4f      	ldr	r3, [pc, #316]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	494c      	ldr	r1, [pc, #304]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 80082c8:	4313      	orrs	r3, r2
 80082ca:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80082d4:	d309      	bcc.n	80082ea <HAL_RCC_OscConfig+0x172>
 80082d6:	4b48      	ldr	r3, [pc, #288]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	f023 021f 	bic.w	r2, r3, #31
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	4945      	ldr	r1, [pc, #276]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 80082e4:	4313      	orrs	r3, r2
 80082e6:	60cb      	str	r3, [r1, #12]
 80082e8:	e028      	b.n	800833c <HAL_RCC_OscConfig+0x1c4>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	da0a      	bge.n	8008308 <HAL_RCC_OscConfig+0x190>
 80082f2:	4b41      	ldr	r3, [pc, #260]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	015b      	lsls	r3, r3, #5
 8008300:	493d      	ldr	r1, [pc, #244]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 8008302:	4313      	orrs	r3, r2
 8008304:	60cb      	str	r3, [r1, #12]
 8008306:	e019      	b.n	800833c <HAL_RCC_OscConfig+0x1c4>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008310:	d30a      	bcc.n	8008328 <HAL_RCC_OscConfig+0x1b0>
 8008312:	4b39      	ldr	r3, [pc, #228]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	029b      	lsls	r3, r3, #10
 8008320:	4935      	ldr	r1, [pc, #212]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 8008322:	4313      	orrs	r3, r2
 8008324:	60cb      	str	r3, [r1, #12]
 8008326:	e009      	b.n	800833c <HAL_RCC_OscConfig+0x1c4>
 8008328:	4b33      	ldr	r3, [pc, #204]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	03db      	lsls	r3, r3, #15
 8008336:	4930      	ldr	r1, [pc, #192]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 8008338:	4313      	orrs	r3, r2
 800833a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800833c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10a      	bne.n	8008358 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	4618      	mov	r0, r3
 8008348:	f001 f9a0 	bl	800968c <RCC_SetFlashLatencyFromMSIRange>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d002      	beq.n	8008358 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	f000 bde5 	b.w	8008f22 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8008358:	f001 f8de 	bl	8009518 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800835c:	4b27      	ldr	r3, [pc, #156]	; (80083fc <HAL_RCC_OscConfig+0x284>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4618      	mov	r0, r3
 8008362:	f7fb f9fb 	bl	800375c <HAL_InitTick>
 8008366:	4603      	mov	r3, r0
 8008368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800836c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 808a 	beq.w	800848a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8008376:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800837a:	f000 bdd2 	b.w	8008f22 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d066      	beq.n	8008454 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8008386:	4b1c      	ldr	r3, [pc, #112]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a1b      	ldr	r2, [pc, #108]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 800838c:	f043 0301 	orr.w	r3, r3, #1
 8008390:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008392:	f7fb fb6b 	bl	8003a6c <HAL_GetTick>
 8008396:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008398:	e009      	b.n	80083ae <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800839a:	f7fb fb67 	bl	8003a6c <HAL_GetTick>
 800839e:	4602      	mov	r2, r0
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d902      	bls.n	80083ae <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	f000 bdba 	b.w	8008f22 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80083ae:	4b12      	ldr	r3, [pc, #72]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0304 	and.w	r3, r3, #4
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0ef      	beq.n	800839a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80083ba:	4b0f      	ldr	r3, [pc, #60]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	4a0e      	ldr	r2, [pc, #56]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 80083c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80083c4:	6093      	str	r3, [r2, #8]
 80083c6:	4b0c      	ldr	r3, [pc, #48]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	4909      	ldr	r1, [pc, #36]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80083e0:	d30e      	bcc.n	8008400 <HAL_RCC_OscConfig+0x288>
 80083e2:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	f023 021f 	bic.w	r2, r3, #31
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a1b      	ldr	r3, [r3, #32]
 80083ee:	4902      	ldr	r1, [pc, #8]	; (80083f8 <HAL_RCC_OscConfig+0x280>)
 80083f0:	4313      	orrs	r3, r2
 80083f2:	60cb      	str	r3, [r1, #12]
 80083f4:	e04a      	b.n	800848c <HAL_RCC_OscConfig+0x314>
 80083f6:	bf00      	nop
 80083f8:	46020c00 	.word	0x46020c00
 80083fc:	20000004 	.word	0x20000004
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008404:	2b00      	cmp	r3, #0
 8008406:	da0a      	bge.n	800841e <HAL_RCC_OscConfig+0x2a6>
 8008408:	4b98      	ldr	r3, [pc, #608]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	015b      	lsls	r3, r3, #5
 8008416:	4995      	ldr	r1, [pc, #596]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 8008418:	4313      	orrs	r3, r2
 800841a:	60cb      	str	r3, [r1, #12]
 800841c:	e036      	b.n	800848c <HAL_RCC_OscConfig+0x314>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008426:	d30a      	bcc.n	800843e <HAL_RCC_OscConfig+0x2c6>
 8008428:	4b90      	ldr	r3, [pc, #576]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	029b      	lsls	r3, r3, #10
 8008436:	498d      	ldr	r1, [pc, #564]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 8008438:	4313      	orrs	r3, r2
 800843a:	60cb      	str	r3, [r1, #12]
 800843c:	e026      	b.n	800848c <HAL_RCC_OscConfig+0x314>
 800843e:	4b8b      	ldr	r3, [pc, #556]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	03db      	lsls	r3, r3, #15
 800844c:	4987      	ldr	r1, [pc, #540]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 800844e:	4313      	orrs	r3, r2
 8008450:	60cb      	str	r3, [r1, #12]
 8008452:	e01b      	b.n	800848c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8008454:	4b85      	ldr	r3, [pc, #532]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a84      	ldr	r2, [pc, #528]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 800845a:	f023 0301 	bic.w	r3, r3, #1
 800845e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008460:	f7fb fb04 	bl	8003a6c <HAL_GetTick>
 8008464:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008466:	e009      	b.n	800847c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008468:	f7fb fb00 	bl	8003a6c <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	2b02      	cmp	r3, #2
 8008474:	d902      	bls.n	800847c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	f000 bd53 	b.w	8008f22 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800847c:	4b7b      	ldr	r3, [pc, #492]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0304 	and.w	r3, r3, #4
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1ef      	bne.n	8008468 <HAL_RCC_OscConfig+0x2f0>
 8008488:	e000      	b.n	800848c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800848a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 808b 	beq.w	80085b0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	2b08      	cmp	r3, #8
 800849e:	d005      	beq.n	80084ac <HAL_RCC_OscConfig+0x334>
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	2b0c      	cmp	r3, #12
 80084a4:	d109      	bne.n	80084ba <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80084a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	d106      	bne.n	80084ba <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d17d      	bne.n	80085b0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	f000 bd34 	b.w	8008f22 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084c2:	d106      	bne.n	80084d2 <HAL_RCC_OscConfig+0x35a>
 80084c4:	4b69      	ldr	r3, [pc, #420]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a68      	ldr	r2, [pc, #416]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 80084ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084ce:	6013      	str	r3, [r2, #0]
 80084d0:	e041      	b.n	8008556 <HAL_RCC_OscConfig+0x3de>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084da:	d112      	bne.n	8008502 <HAL_RCC_OscConfig+0x38a>
 80084dc:	4b63      	ldr	r3, [pc, #396]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a62      	ldr	r2, [pc, #392]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 80084e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084e6:	6013      	str	r3, [r2, #0]
 80084e8:	4b60      	ldr	r3, [pc, #384]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a5f      	ldr	r2, [pc, #380]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 80084ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80084f2:	6013      	str	r3, [r2, #0]
 80084f4:	4b5d      	ldr	r3, [pc, #372]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a5c      	ldr	r2, [pc, #368]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 80084fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084fe:	6013      	str	r3, [r2, #0]
 8008500:	e029      	b.n	8008556 <HAL_RCC_OscConfig+0x3de>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800850a:	d112      	bne.n	8008532 <HAL_RCC_OscConfig+0x3ba>
 800850c:	4b57      	ldr	r3, [pc, #348]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a56      	ldr	r2, [pc, #344]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 8008512:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008516:	6013      	str	r3, [r2, #0]
 8008518:	4b54      	ldr	r3, [pc, #336]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a53      	ldr	r2, [pc, #332]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 800851e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008522:	6013      	str	r3, [r2, #0]
 8008524:	4b51      	ldr	r3, [pc, #324]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a50      	ldr	r2, [pc, #320]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 800852a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	e011      	b.n	8008556 <HAL_RCC_OscConfig+0x3de>
 8008532:	4b4e      	ldr	r3, [pc, #312]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a4d      	ldr	r2, [pc, #308]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 8008538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800853c:	6013      	str	r3, [r2, #0]
 800853e:	4b4b      	ldr	r3, [pc, #300]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a4a      	ldr	r2, [pc, #296]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 8008544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008548:	6013      	str	r3, [r2, #0]
 800854a:	4b48      	ldr	r3, [pc, #288]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a47      	ldr	r2, [pc, #284]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 8008550:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008554:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d014      	beq.n	8008588 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800855e:	f7fb fa85 	bl	8003a6c <HAL_GetTick>
 8008562:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008564:	e009      	b.n	800857a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008566:	f7fb fa81 	bl	8003a6c <HAL_GetTick>
 800856a:	4602      	mov	r2, r0
 800856c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	2b64      	cmp	r3, #100	; 0x64
 8008572:	d902      	bls.n	800857a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	f000 bcd4 	b.w	8008f22 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800857a:	4b3c      	ldr	r3, [pc, #240]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0ef      	beq.n	8008566 <HAL_RCC_OscConfig+0x3ee>
 8008586:	e013      	b.n	80085b0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8008588:	f7fb fa70 	bl	8003a6c <HAL_GetTick>
 800858c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800858e:	e009      	b.n	80085a4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008590:	f7fb fa6c 	bl	8003a6c <HAL_GetTick>
 8008594:	4602      	mov	r2, r0
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	2b64      	cmp	r3, #100	; 0x64
 800859c:	d902      	bls.n	80085a4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	f000 bcbf 	b.w	8008f22 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80085a4:	4b31      	ldr	r3, [pc, #196]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1ef      	bne.n	8008590 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d05f      	beq.n	800867c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80085bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d005      	beq.n	80085ce <HAL_RCC_OscConfig+0x456>
 80085c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c4:	2b0c      	cmp	r3, #12
 80085c6:	d114      	bne.n	80085f2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80085c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d111      	bne.n	80085f2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d102      	bne.n	80085dc <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	f000 bca3 	b.w	8008f22 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80085dc:	4b23      	ldr	r3, [pc, #140]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	041b      	lsls	r3, r3, #16
 80085ea:	4920      	ldr	r1, [pc, #128]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 80085ec:	4313      	orrs	r3, r2
 80085ee:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80085f0:	e044      	b.n	800867c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d024      	beq.n	8008644 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80085fa:	4b1c      	ldr	r3, [pc, #112]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a1b      	ldr	r2, [pc, #108]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 8008600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008604:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008606:	f7fb fa31 	bl	8003a6c <HAL_GetTick>
 800860a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800860c:	e009      	b.n	8008622 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800860e:	f7fb fa2d 	bl	8003a6c <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	2b02      	cmp	r3, #2
 800861a:	d902      	bls.n	8008622 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	f000 bc80 	b.w	8008f22 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008622:	4b12      	ldr	r3, [pc, #72]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800862a:	2b00      	cmp	r3, #0
 800862c:	d0ef      	beq.n	800860e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800862e:	4b0f      	ldr	r3, [pc, #60]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	041b      	lsls	r3, r3, #16
 800863c:	490b      	ldr	r1, [pc, #44]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 800863e:	4313      	orrs	r3, r2
 8008640:	610b      	str	r3, [r1, #16]
 8008642:	e01b      	b.n	800867c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8008644:	4b09      	ldr	r3, [pc, #36]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a08      	ldr	r2, [pc, #32]	; (800866c <HAL_RCC_OscConfig+0x4f4>)
 800864a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800864e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008650:	f7fb fa0c 	bl	8003a6c <HAL_GetTick>
 8008654:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008656:	e00b      	b.n	8008670 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008658:	f7fb fa08 	bl	8003a6c <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d904      	bls.n	8008670 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	f000 bc5b 	b.w	8008f22 <HAL_RCC_OscConfig+0xdaa>
 800866c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008670:	4baf      	ldr	r3, [pc, #700]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1ed      	bne.n	8008658 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0308 	and.w	r3, r3, #8
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 80c8 	beq.w	800881a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800868a:	2300      	movs	r3, #0
 800868c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008690:	4ba7      	ldr	r3, [pc, #668]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 8008692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008696:	f003 0304 	and.w	r3, r3, #4
 800869a:	2b00      	cmp	r3, #0
 800869c:	d111      	bne.n	80086c2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800869e:	4ba4      	ldr	r3, [pc, #656]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 80086a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086a4:	4aa2      	ldr	r2, [pc, #648]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 80086a6:	f043 0304 	orr.w	r3, r3, #4
 80086aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80086ae:	4ba0      	ldr	r3, [pc, #640]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 80086b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086b4:	f003 0304 	and.w	r3, r3, #4
 80086b8:	617b      	str	r3, [r7, #20]
 80086ba:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80086bc:	2301      	movs	r3, #1
 80086be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80086c2:	4b9c      	ldr	r3, [pc, #624]	; (8008934 <HAL_RCC_OscConfig+0x7bc>)
 80086c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d119      	bne.n	8008702 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80086ce:	4b99      	ldr	r3, [pc, #612]	; (8008934 <HAL_RCC_OscConfig+0x7bc>)
 80086d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d2:	4a98      	ldr	r2, [pc, #608]	; (8008934 <HAL_RCC_OscConfig+0x7bc>)
 80086d4:	f043 0301 	orr.w	r3, r3, #1
 80086d8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086da:	f7fb f9c7 	bl	8003a6c <HAL_GetTick>
 80086de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80086e0:	e009      	b.n	80086f6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086e2:	f7fb f9c3 	bl	8003a6c <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d902      	bls.n	80086f6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	f000 bc16 	b.w	8008f22 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80086f6:	4b8f      	ldr	r3, [pc, #572]	; (8008934 <HAL_RCC_OscConfig+0x7bc>)
 80086f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0ef      	beq.n	80086e2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d05f      	beq.n	80087ca <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800870a:	4b89      	ldr	r3, [pc, #548]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 800870c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008710:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	699a      	ldr	r2, [r3, #24]
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800871c:	429a      	cmp	r2, r3
 800871e:	d037      	beq.n	8008790 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8008720:	6a3b      	ldr	r3, [r7, #32]
 8008722:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d006      	beq.n	8008738 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8008730:	2b00      	cmp	r3, #0
 8008732:	d101      	bne.n	8008738 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e3f4      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d01b      	beq.n	800877a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8008742:	4b7b      	ldr	r3, [pc, #492]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 8008744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008748:	4a79      	ldr	r2, [pc, #484]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 800874a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800874e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8008752:	f7fb f98b 	bl	8003a6c <HAL_GetTick>
 8008756:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008758:	e008      	b.n	800876c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800875a:	f7fb f987 	bl	8003a6c <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	2b05      	cmp	r3, #5
 8008766:	d901      	bls.n	800876c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e3da      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800876c:	4b70      	ldr	r3, [pc, #448]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 800876e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008772:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1ef      	bne.n	800875a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800877a:	4b6d      	ldr	r3, [pc, #436]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 800877c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008780:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	4969      	ldr	r1, [pc, #420]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 800878a:	4313      	orrs	r3, r2
 800878c:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8008790:	4b67      	ldr	r3, [pc, #412]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 8008792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008796:	4a66      	ldr	r2, [pc, #408]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 8008798:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800879c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80087a0:	f7fb f964 	bl	8003a6c <HAL_GetTick>
 80087a4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80087a6:	e008      	b.n	80087ba <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087a8:	f7fb f960 	bl	8003a6c <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	2b05      	cmp	r3, #5
 80087b4:	d901      	bls.n	80087ba <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e3b3      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80087ba:	4b5d      	ldr	r3, [pc, #372]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 80087bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d0ef      	beq.n	80087a8 <HAL_RCC_OscConfig+0x630>
 80087c8:	e01b      	b.n	8008802 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80087ca:	4b59      	ldr	r3, [pc, #356]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 80087cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087d0:	4a57      	ldr	r2, [pc, #348]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 80087d2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80087d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80087da:	f7fb f947 	bl	8003a6c <HAL_GetTick>
 80087de:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80087e0:	e008      	b.n	80087f4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087e2:	f7fb f943 	bl	8003a6c <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	2b05      	cmp	r3, #5
 80087ee:	d901      	bls.n	80087f4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e396      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80087f4:	4b4e      	ldr	r3, [pc, #312]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 80087f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1ef      	bne.n	80087e2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008802:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008806:	2b01      	cmp	r3, #1
 8008808:	d107      	bne.n	800881a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800880a:	4b49      	ldr	r3, [pc, #292]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 800880c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008810:	4a47      	ldr	r2, [pc, #284]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 8008812:	f023 0304 	bic.w	r3, r3, #4
 8008816:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0304 	and.w	r3, r3, #4
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 8111 	beq.w	8008a4a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8008828:	2300      	movs	r3, #0
 800882a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800882e:	4b40      	ldr	r3, [pc, #256]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 8008830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008834:	f003 0304 	and.w	r3, r3, #4
 8008838:	2b00      	cmp	r3, #0
 800883a:	d111      	bne.n	8008860 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800883c:	4b3c      	ldr	r3, [pc, #240]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 800883e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008842:	4a3b      	ldr	r2, [pc, #236]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 8008844:	f043 0304 	orr.w	r3, r3, #4
 8008848:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800884c:	4b38      	ldr	r3, [pc, #224]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 800884e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008852:	f003 0304 	and.w	r3, r3, #4
 8008856:	613b      	str	r3, [r7, #16]
 8008858:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800885a:	2301      	movs	r3, #1
 800885c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008860:	4b34      	ldr	r3, [pc, #208]	; (8008934 <HAL_RCC_OscConfig+0x7bc>)
 8008862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b00      	cmp	r3, #0
 800886a:	d118      	bne.n	800889e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800886c:	4b31      	ldr	r3, [pc, #196]	; (8008934 <HAL_RCC_OscConfig+0x7bc>)
 800886e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008870:	4a30      	ldr	r2, [pc, #192]	; (8008934 <HAL_RCC_OscConfig+0x7bc>)
 8008872:	f043 0301 	orr.w	r3, r3, #1
 8008876:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008878:	f7fb f8f8 	bl	8003a6c <HAL_GetTick>
 800887c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800887e:	e008      	b.n	8008892 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008880:	f7fb f8f4 	bl	8003a6c <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	2b02      	cmp	r3, #2
 800888c:	d901      	bls.n	8008892 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e347      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008892:	4b28      	ldr	r3, [pc, #160]	; (8008934 <HAL_RCC_OscConfig+0x7bc>)
 8008894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b00      	cmp	r3, #0
 800889c:	d0f0      	beq.n	8008880 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d01f      	beq.n	80088ea <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	f003 0304 	and.w	r3, r3, #4
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d010      	beq.n	80088d8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80088b6:	4b1e      	ldr	r3, [pc, #120]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 80088b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80088bc:	4a1c      	ldr	r2, [pc, #112]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 80088be:	f043 0304 	orr.w	r3, r3, #4
 80088c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80088c6:	4b1a      	ldr	r3, [pc, #104]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 80088c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80088cc:	4a18      	ldr	r2, [pc, #96]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 80088ce:	f043 0301 	orr.w	r3, r3, #1
 80088d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80088d6:	e018      	b.n	800890a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80088d8:	4b15      	ldr	r3, [pc, #84]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 80088da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80088de:	4a14      	ldr	r2, [pc, #80]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 80088e0:	f043 0301 	orr.w	r3, r3, #1
 80088e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80088e8:	e00f      	b.n	800890a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80088ea:	4b11      	ldr	r3, [pc, #68]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 80088ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80088f0:	4a0f      	ldr	r2, [pc, #60]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 80088f2:	f023 0301 	bic.w	r3, r3, #1
 80088f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80088fa:	4b0d      	ldr	r3, [pc, #52]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 80088fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008900:	4a0b      	ldr	r2, [pc, #44]	; (8008930 <HAL_RCC_OscConfig+0x7b8>)
 8008902:	f023 0304 	bic.w	r3, r3, #4
 8008906:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d057      	beq.n	80089c2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8008912:	f7fb f8ab 	bl	8003a6c <HAL_GetTick>
 8008916:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008918:	e00e      	b.n	8008938 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800891a:	f7fb f8a7 	bl	8003a6c <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	f241 3288 	movw	r2, #5000	; 0x1388
 8008928:	4293      	cmp	r3, r2
 800892a:	d905      	bls.n	8008938 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e2f8      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
 8008930:	46020c00 	.word	0x46020c00
 8008934:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008938:	4b9c      	ldr	r3, [pc, #624]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 800893a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800893e:	f003 0302 	and.w	r3, r3, #2
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0e9      	beq.n	800891a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800894e:	2b00      	cmp	r3, #0
 8008950:	d01b      	beq.n	800898a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008952:	4b96      	ldr	r3, [pc, #600]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008958:	4a94      	ldr	r2, [pc, #592]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 800895a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008962:	e00a      	b.n	800897a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008964:	f7fb f882 	bl	8003a6c <HAL_GetTick>
 8008968:	4602      	mov	r2, r0
 800896a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008972:	4293      	cmp	r3, r2
 8008974:	d901      	bls.n	800897a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e2d3      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800897a:	4b8c      	ldr	r3, [pc, #560]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 800897c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008984:	2b00      	cmp	r3, #0
 8008986:	d0ed      	beq.n	8008964 <HAL_RCC_OscConfig+0x7ec>
 8008988:	e053      	b.n	8008a32 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800898a:	4b88      	ldr	r3, [pc, #544]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 800898c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008990:	4a86      	ldr	r2, [pc, #536]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008996:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800899a:	e00a      	b.n	80089b2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800899c:	f7fb f866 	bl	8003a6c <HAL_GetTick>
 80089a0:	4602      	mov	r2, r0
 80089a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d901      	bls.n	80089b2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e2b7      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80089b2:	4b7e      	ldr	r3, [pc, #504]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 80089b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1ed      	bne.n	800899c <HAL_RCC_OscConfig+0x824>
 80089c0:	e037      	b.n	8008a32 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80089c2:	f7fb f853 	bl	8003a6c <HAL_GetTick>
 80089c6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80089c8:	e00a      	b.n	80089e0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089ca:	f7fb f84f 	bl	8003a6c <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089d8:	4293      	cmp	r3, r2
 80089da:	d901      	bls.n	80089e0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e2a0      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80089e0:	4b72      	ldr	r3, [pc, #456]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 80089e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1ed      	bne.n	80089ca <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80089ee:	4b6f      	ldr	r3, [pc, #444]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 80089f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d01a      	beq.n	8008a32 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80089fc:	4b6b      	ldr	r3, [pc, #428]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 80089fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a02:	4a6a      	ldr	r2, [pc, #424]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a08:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008a0c:	e00a      	b.n	8008a24 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a0e:	f7fb f82d 	bl	8003a6c <HAL_GetTick>
 8008a12:	4602      	mov	r2, r0
 8008a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d901      	bls.n	8008a24 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e27e      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008a24:	4b61      	ldr	r3, [pc, #388]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1ed      	bne.n	8008a0e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a32:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d107      	bne.n	8008a4a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a3a:	4b5c      	ldr	r3, [pc, #368]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a40:	4a5a      	ldr	r2, [pc, #360]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008a42:	f023 0304 	bic.w	r3, r3, #4
 8008a46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 0320 	and.w	r3, r3, #32
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d036      	beq.n	8008ac4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d019      	beq.n	8008a92 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8008a5e:	4b53      	ldr	r3, [pc, #332]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a52      	ldr	r2, [pc, #328]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008a64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a68:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008a6a:	f7fa ffff 	bl	8003a6c <HAL_GetTick>
 8008a6e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008a70:	e008      	b.n	8008a84 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a72:	f7fa fffb 	bl	8003a6c <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d901      	bls.n	8008a84 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e24e      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008a84:	4b49      	ldr	r3, [pc, #292]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d0f0      	beq.n	8008a72 <HAL_RCC_OscConfig+0x8fa>
 8008a90:	e018      	b.n	8008ac4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8008a92:	4b46      	ldr	r3, [pc, #280]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a45      	ldr	r2, [pc, #276]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008a98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a9c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008a9e:	f7fa ffe5 	bl	8003a6c <HAL_GetTick>
 8008aa2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008aa4:	e008      	b.n	8008ab8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008aa6:	f7fa ffe1 	bl	8003a6c <HAL_GetTick>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d901      	bls.n	8008ab8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e234      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008ab8:	4b3c      	ldr	r3, [pc, #240]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1f0      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d036      	beq.n	8008b3e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d019      	beq.n	8008b0c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8008ad8:	4b34      	ldr	r3, [pc, #208]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a33      	ldr	r2, [pc, #204]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ae2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008ae4:	f7fa ffc2 	bl	8003a6c <HAL_GetTick>
 8008ae8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008aea:	e008      	b.n	8008afe <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008aec:	f7fa ffbe 	bl	8003a6c <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d901      	bls.n	8008afe <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e211      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008afe:	4b2b      	ldr	r3, [pc, #172]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d0f0      	beq.n	8008aec <HAL_RCC_OscConfig+0x974>
 8008b0a:	e018      	b.n	8008b3e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8008b0c:	4b27      	ldr	r3, [pc, #156]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a26      	ldr	r2, [pc, #152]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008b12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b16:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008b18:	f7fa ffa8 	bl	8003a6c <HAL_GetTick>
 8008b1c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008b1e:	e008      	b.n	8008b32 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008b20:	f7fa ffa4 	bl	8003a6c <HAL_GetTick>
 8008b24:	4602      	mov	r2, r0
 8008b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d901      	bls.n	8008b32 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e1f7      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008b32:	4b1e      	ldr	r3, [pc, #120]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1f0      	bne.n	8008b20 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d07f      	beq.n	8008c4a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d062      	beq.n	8008c18 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8008b52:	4b16      	ldr	r3, [pc, #88]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	4a15      	ldr	r2, [pc, #84]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008b58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b5c:	6093      	str	r3, [r2, #8]
 8008b5e:	4b13      	ldr	r3, [pc, #76]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6a:	4910      	ldr	r1, [pc, #64]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b74:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008b78:	d309      	bcc.n	8008b8e <HAL_RCC_OscConfig+0xa16>
 8008b7a:	4b0c      	ldr	r3, [pc, #48]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	f023 021f 	bic.w	r2, r3, #31
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	4909      	ldr	r1, [pc, #36]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	60cb      	str	r3, [r1, #12]
 8008b8c:	e02a      	b.n	8008be4 <HAL_RCC_OscConfig+0xa6c>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	da0c      	bge.n	8008bb0 <HAL_RCC_OscConfig+0xa38>
 8008b96:	4b05      	ldr	r3, [pc, #20]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	015b      	lsls	r3, r3, #5
 8008ba4:	4901      	ldr	r1, [pc, #4]	; (8008bac <HAL_RCC_OscConfig+0xa34>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	60cb      	str	r3, [r1, #12]
 8008baa:	e01b      	b.n	8008be4 <HAL_RCC_OscConfig+0xa6c>
 8008bac:	46020c00 	.word	0x46020c00
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bb8:	d30a      	bcc.n	8008bd0 <HAL_RCC_OscConfig+0xa58>
 8008bba:	4ba1      	ldr	r3, [pc, #644]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	029b      	lsls	r3, r3, #10
 8008bc8:	499d      	ldr	r1, [pc, #628]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	60cb      	str	r3, [r1, #12]
 8008bce:	e009      	b.n	8008be4 <HAL_RCC_OscConfig+0xa6c>
 8008bd0:	4b9b      	ldr	r3, [pc, #620]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a1b      	ldr	r3, [r3, #32]
 8008bdc:	03db      	lsls	r3, r3, #15
 8008bde:	4998      	ldr	r1, [pc, #608]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008be0:	4313      	orrs	r3, r2
 8008be2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8008be4:	4b96      	ldr	r3, [pc, #600]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a95      	ldr	r2, [pc, #596]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008bea:	f043 0310 	orr.w	r3, r3, #16
 8008bee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008bf0:	f7fa ff3c 	bl	8003a6c <HAL_GetTick>
 8008bf4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008bf6:	e008      	b.n	8008c0a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008bf8:	f7fa ff38 	bl	8003a6c <HAL_GetTick>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d901      	bls.n	8008c0a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e18b      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008c0a:	4b8d      	ldr	r3, [pc, #564]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0320 	and.w	r3, r3, #32
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d0f0      	beq.n	8008bf8 <HAL_RCC_OscConfig+0xa80>
 8008c16:	e018      	b.n	8008c4a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8008c18:	4b89      	ldr	r3, [pc, #548]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a88      	ldr	r2, [pc, #544]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008c1e:	f023 0310 	bic.w	r3, r3, #16
 8008c22:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008c24:	f7fa ff22 	bl	8003a6c <HAL_GetTick>
 8008c28:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008c2a:	e008      	b.n	8008c3e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008c2c:	f7fa ff1e 	bl	8003a6c <HAL_GetTick>
 8008c30:	4602      	mov	r2, r0
 8008c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d901      	bls.n	8008c3e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e171      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008c3e:	4b80      	ldr	r3, [pc, #512]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0320 	and.w	r3, r3, #32
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1f0      	bne.n	8008c2c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f000 8166 	beq.w	8008f20 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008c54:	2300      	movs	r3, #0
 8008c56:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c5a:	4b79      	ldr	r3, [pc, #484]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	f003 030c 	and.w	r3, r3, #12
 8008c62:	2b0c      	cmp	r3, #12
 8008c64:	f000 80f2 	beq.w	8008e4c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	f040 80c5 	bne.w	8008dfc <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008c72:	4b73      	ldr	r3, [pc, #460]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a72      	ldr	r2, [pc, #456]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008c78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c7c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008c7e:	f7fa fef5 	bl	8003a6c <HAL_GetTick>
 8008c82:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008c84:	e008      	b.n	8008c98 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c86:	f7fa fef1 	bl	8003a6c <HAL_GetTick>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d901      	bls.n	8008c98 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e144      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008c98:	4b69      	ldr	r3, [pc, #420]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1f0      	bne.n	8008c86 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ca4:	4b66      	ldr	r3, [pc, #408]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008caa:	f003 0304 	and.w	r3, r3, #4
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d111      	bne.n	8008cd6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8008cb2:	4b63      	ldr	r3, [pc, #396]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cb8:	4a61      	ldr	r2, [pc, #388]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008cba:	f043 0304 	orr.w	r3, r3, #4
 8008cbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008cc2:	4b5f      	ldr	r3, [pc, #380]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cc8:	f003 0304 	and.w	r3, r3, #4
 8008ccc:	60fb      	str	r3, [r7, #12]
 8008cce:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8008cd6:	4b5b      	ldr	r3, [pc, #364]	; (8008e44 <HAL_RCC_OscConfig+0xccc>)
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ce2:	d102      	bne.n	8008cea <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008cea:	4b56      	ldr	r3, [pc, #344]	; (8008e44 <HAL_RCC_OscConfig+0xccc>)
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	4a55      	ldr	r2, [pc, #340]	; (8008e44 <HAL_RCC_OscConfig+0xccc>)
 8008cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cf4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8008cf6:	4b52      	ldr	r3, [pc, #328]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cfe:	f023 0303 	bic.w	r3, r3, #3
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008d0a:	3a01      	subs	r2, #1
 8008d0c:	0212      	lsls	r2, r2, #8
 8008d0e:	4311      	orrs	r1, r2
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008d14:	430a      	orrs	r2, r1
 8008d16:	494a      	ldr	r1, [pc, #296]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	628b      	str	r3, [r1, #40]	; 0x28
 8008d1c:	4b48      	ldr	r3, [pc, #288]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d20:	4b49      	ldr	r3, [pc, #292]	; (8008e48 <HAL_RCC_OscConfig+0xcd0>)
 8008d22:	4013      	ands	r3, r2
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008d28:	3a01      	subs	r2, #1
 8008d2a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008d32:	3a01      	subs	r2, #1
 8008d34:	0252      	lsls	r2, r2, #9
 8008d36:	b292      	uxth	r2, r2
 8008d38:	4311      	orrs	r1, r2
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008d3e:	3a01      	subs	r2, #1
 8008d40:	0412      	lsls	r2, r2, #16
 8008d42:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008d46:	4311      	orrs	r1, r2
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008d4c:	3a01      	subs	r2, #1
 8008d4e:	0612      	lsls	r2, r2, #24
 8008d50:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008d54:	430a      	orrs	r2, r1
 8008d56:	493a      	ldr	r1, [pc, #232]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008d5c:	4b38      	ldr	r3, [pc, #224]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d60:	4a37      	ldr	r2, [pc, #220]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008d62:	f023 0310 	bic.w	r3, r3, #16
 8008d66:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d6c:	4a34      	ldr	r2, [pc, #208]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008d6e:	00db      	lsls	r3, r3, #3
 8008d70:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008d72:	4b33      	ldr	r3, [pc, #204]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d76:	4a32      	ldr	r2, [pc, #200]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008d78:	f043 0310 	orr.w	r3, r3, #16
 8008d7c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8008d7e:	4b30      	ldr	r3, [pc, #192]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d82:	f023 020c 	bic.w	r2, r3, #12
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d8a:	492d      	ldr	r1, [pc, #180]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8008d90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d105      	bne.n	8008da4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008d98:	4b2a      	ldr	r3, [pc, #168]	; (8008e44 <HAL_RCC_OscConfig+0xccc>)
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	4a29      	ldr	r2, [pc, #164]	; (8008e44 <HAL_RCC_OscConfig+0xccc>)
 8008d9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008da2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8008da4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d107      	bne.n	8008dbc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8008dac:	4b24      	ldr	r3, [pc, #144]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008db2:	4a23      	ldr	r2, [pc, #140]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008db4:	f023 0304 	bic.w	r3, r3, #4
 8008db8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008dbc:	4b20      	ldr	r3, [pc, #128]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc0:	4a1f      	ldr	r2, [pc, #124]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008dc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008dc6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8008dc8:	4b1d      	ldr	r3, [pc, #116]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a1c      	ldr	r2, [pc, #112]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dd2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008dd4:	f7fa fe4a 	bl	8003a6c <HAL_GetTick>
 8008dd8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008dda:	e008      	b.n	8008dee <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ddc:	f7fa fe46 	bl	8003a6c <HAL_GetTick>
 8008de0:	4602      	mov	r2, r0
 8008de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d901      	bls.n	8008dee <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e099      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008dee:	4b14      	ldr	r3, [pc, #80]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d0f0      	beq.n	8008ddc <HAL_RCC_OscConfig+0xc64>
 8008dfa:	e091      	b.n	8008f20 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008dfc:	4b10      	ldr	r3, [pc, #64]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a0f      	ldr	r2, [pc, #60]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e06:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008e08:	f7fa fe30 	bl	8003a6c <HAL_GetTick>
 8008e0c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008e0e:	e008      	b.n	8008e22 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e10:	f7fa fe2c 	bl	8003a6c <HAL_GetTick>
 8008e14:	4602      	mov	r2, r0
 8008e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d901      	bls.n	8008e22 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e07f      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008e22:	4b07      	ldr	r3, [pc, #28]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1f0      	bne.n	8008e10 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8008e2e:	4b04      	ldr	r3, [pc, #16]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e32:	4a03      	ldr	r2, [pc, #12]	; (8008e40 <HAL_RCC_OscConfig+0xcc8>)
 8008e34:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008e38:	f023 0303 	bic.w	r3, r3, #3
 8008e3c:	6293      	str	r3, [r2, #40]	; 0x28
 8008e3e:	e06f      	b.n	8008f20 <HAL_RCC_OscConfig+0xda8>
 8008e40:	46020c00 	.word	0x46020c00
 8008e44:	46020800 	.word	0x46020800
 8008e48:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008e4c:	4b37      	ldr	r3, [pc, #220]	; (8008f2c <HAL_RCC_OscConfig+0xdb4>)
 8008e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e50:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008e52:	4b36      	ldr	r3, [pc, #216]	; (8008f2c <HAL_RCC_OscConfig+0xdb4>)
 8008e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e56:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d039      	beq.n	8008ed4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	f003 0203 	and.w	r2, r3, #3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d132      	bne.n	8008ed4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	0a1b      	lsrs	r3, r3, #8
 8008e72:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d129      	bne.n	8008ed4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d122      	bne.n	8008ed4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e98:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d11a      	bne.n	8008ed4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	0a5b      	lsrs	r3, r3, #9
 8008ea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eaa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d111      	bne.n	8008ed4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	0c1b      	lsrs	r3, r3, #16
 8008eb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ebc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d108      	bne.n	8008ed4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	0e1b      	lsrs	r3, r3, #24
 8008ec6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ece:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d001      	beq.n	8008ed8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e024      	b.n	8008f22 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008ed8:	4b14      	ldr	r3, [pc, #80]	; (8008f2c <HAL_RCC_OscConfig+0xdb4>)
 8008eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008edc:	08db      	lsrs	r3, r3, #3
 8008ede:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d01a      	beq.n	8008f20 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008eea:	4b10      	ldr	r3, [pc, #64]	; (8008f2c <HAL_RCC_OscConfig+0xdb4>)
 8008eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eee:	4a0f      	ldr	r2, [pc, #60]	; (8008f2c <HAL_RCC_OscConfig+0xdb4>)
 8008ef0:	f023 0310 	bic.w	r3, r3, #16
 8008ef4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ef6:	f7fa fdb9 	bl	8003a6c <HAL_GetTick>
 8008efa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8008efc:	bf00      	nop
 8008efe:	f7fa fdb5 	bl	8003a6c <HAL_GetTick>
 8008f02:	4602      	mov	r2, r0
 8008f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d0f9      	beq.n	8008efe <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f0e:	4a07      	ldr	r2, [pc, #28]	; (8008f2c <HAL_RCC_OscConfig+0xdb4>)
 8008f10:	00db      	lsls	r3, r3, #3
 8008f12:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008f14:	4b05      	ldr	r3, [pc, #20]	; (8008f2c <HAL_RCC_OscConfig+0xdb4>)
 8008f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f18:	4a04      	ldr	r2, [pc, #16]	; (8008f2c <HAL_RCC_OscConfig+0xdb4>)
 8008f1a:	f043 0310 	orr.w	r3, r3, #16
 8008f1e:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3738      	adds	r7, #56	; 0x38
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	46020c00 	.word	0x46020c00

08008f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d101      	bne.n	8008f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e1d9      	b.n	80092f8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f44:	4b9b      	ldr	r3, [pc, #620]	; (80091b4 <HAL_RCC_ClockConfig+0x284>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 030f 	and.w	r3, r3, #15
 8008f4c:	683a      	ldr	r2, [r7, #0]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d910      	bls.n	8008f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f52:	4b98      	ldr	r3, [pc, #608]	; (80091b4 <HAL_RCC_ClockConfig+0x284>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f023 020f 	bic.w	r2, r3, #15
 8008f5a:	4996      	ldr	r1, [pc, #600]	; (80091b4 <HAL_RCC_ClockConfig+0x284>)
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f62:	4b94      	ldr	r3, [pc, #592]	; (80091b4 <HAL_RCC_ClockConfig+0x284>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 030f 	and.w	r3, r3, #15
 8008f6a:	683a      	ldr	r2, [r7, #0]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d001      	beq.n	8008f74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e1c1      	b.n	80092f8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 0310 	and.w	r3, r3, #16
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d010      	beq.n	8008fa2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	695a      	ldr	r2, [r3, #20]
 8008f84:	4b8c      	ldr	r3, [pc, #560]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 8008f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d908      	bls.n	8008fa2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8008f90:	4b89      	ldr	r3, [pc, #548]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	695b      	ldr	r3, [r3, #20]
 8008f9c:	4986      	ldr	r1, [pc, #536]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 0308 	and.w	r3, r3, #8
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d012      	beq.n	8008fd4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	691a      	ldr	r2, [r3, #16]
 8008fb2:	4b81      	ldr	r3, [pc, #516]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	091b      	lsrs	r3, r3, #4
 8008fb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d909      	bls.n	8008fd4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8008fc0:	4b7d      	ldr	r3, [pc, #500]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 8008fc2:	6a1b      	ldr	r3, [r3, #32]
 8008fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	011b      	lsls	r3, r3, #4
 8008fce:	497a      	ldr	r1, [pc, #488]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0304 	and.w	r3, r3, #4
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d010      	beq.n	8009002 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68da      	ldr	r2, [r3, #12]
 8008fe4:	4b74      	ldr	r3, [pc, #464]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 8008fe6:	6a1b      	ldr	r3, [r3, #32]
 8008fe8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d908      	bls.n	8009002 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008ff0:	4b71      	ldr	r3, [pc, #452]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 8008ff2:	6a1b      	ldr	r3, [r3, #32]
 8008ff4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	496e      	ldr	r1, [pc, #440]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 8008ffe:	4313      	orrs	r3, r2
 8009000:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 0302 	and.w	r3, r3, #2
 800900a:	2b00      	cmp	r3, #0
 800900c:	d010      	beq.n	8009030 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	689a      	ldr	r2, [r3, #8]
 8009012:	4b69      	ldr	r3, [pc, #420]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	f003 030f 	and.w	r3, r3, #15
 800901a:	429a      	cmp	r2, r3
 800901c:	d908      	bls.n	8009030 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800901e:	4b66      	ldr	r3, [pc, #408]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	f023 020f 	bic.w	r2, r3, #15
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	4963      	ldr	r1, [pc, #396]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 800902c:	4313      	orrs	r3, r2
 800902e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	f000 80d2 	beq.w	80091e2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800903e:	2300      	movs	r3, #0
 8009040:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	2b03      	cmp	r3, #3
 8009048:	d143      	bne.n	80090d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800904a:	4b5b      	ldr	r3, [pc, #364]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 800904c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009050:	f003 0304 	and.w	r3, r3, #4
 8009054:	2b00      	cmp	r3, #0
 8009056:	d110      	bne.n	800907a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009058:	4b57      	ldr	r3, [pc, #348]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 800905a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800905e:	4a56      	ldr	r2, [pc, #344]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 8009060:	f043 0304 	orr.w	r3, r3, #4
 8009064:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009068:	4b53      	ldr	r3, [pc, #332]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 800906a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800906e:	f003 0304 	and.w	r3, r3, #4
 8009072:	60bb      	str	r3, [r7, #8]
 8009074:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8009076:	2301      	movs	r3, #1
 8009078:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800907a:	f7fa fcf7 	bl	8003a6c <HAL_GetTick>
 800907e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8009080:	4b4e      	ldr	r3, [pc, #312]	; (80091bc <HAL_RCC_ClockConfig+0x28c>)
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00f      	beq.n	80090ac <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800908c:	e008      	b.n	80090a0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800908e:	f7fa fced 	bl	8003a6c <HAL_GetTick>
 8009092:	4602      	mov	r2, r0
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	2b02      	cmp	r3, #2
 800909a:	d901      	bls.n	80090a0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e12b      	b.n	80092f8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80090a0:	4b46      	ldr	r3, [pc, #280]	; (80091bc <HAL_RCC_ClockConfig+0x28c>)
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0f0      	beq.n	800908e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d107      	bne.n	80090c2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80090b2:	4b41      	ldr	r3, [pc, #260]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 80090b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090b8:	4a3f      	ldr	r2, [pc, #252]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 80090ba:	f023 0304 	bic.w	r3, r3, #4
 80090be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80090c2:	4b3d      	ldr	r3, [pc, #244]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d121      	bne.n	8009112 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e112      	b.n	80092f8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d107      	bne.n	80090ea <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090da:	4b37      	ldr	r3, [pc, #220]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d115      	bne.n	8009112 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e106      	b.n	80092f8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d107      	bne.n	8009102 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80090f2:	4b31      	ldr	r3, [pc, #196]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0304 	and.w	r3, r3, #4
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d109      	bne.n	8009112 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e0fa      	b.n	80092f8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009102:	4b2d      	ldr	r3, [pc, #180]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e0f2      	b.n	80092f8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8009112:	4b29      	ldr	r3, [pc, #164]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 8009114:	69db      	ldr	r3, [r3, #28]
 8009116:	f023 0203 	bic.w	r2, r3, #3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	4926      	ldr	r1, [pc, #152]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 8009120:	4313      	orrs	r3, r2
 8009122:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8009124:	f7fa fca2 	bl	8003a6c <HAL_GetTick>
 8009128:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	2b03      	cmp	r3, #3
 8009130:	d112      	bne.n	8009158 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009132:	e00a      	b.n	800914a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009134:	f7fa fc9a 	bl	8003a6c <HAL_GetTick>
 8009138:	4602      	mov	r2, r0
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	1ad3      	subs	r3, r2, r3
 800913e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009142:	4293      	cmp	r3, r2
 8009144:	d901      	bls.n	800914a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	e0d6      	b.n	80092f8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800914a:	4b1b      	ldr	r3, [pc, #108]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 800914c:	69db      	ldr	r3, [r3, #28]
 800914e:	f003 030c 	and.w	r3, r3, #12
 8009152:	2b0c      	cmp	r3, #12
 8009154:	d1ee      	bne.n	8009134 <HAL_RCC_ClockConfig+0x204>
 8009156:	e044      	b.n	80091e2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	2b02      	cmp	r3, #2
 800915e:	d112      	bne.n	8009186 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009160:	e00a      	b.n	8009178 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009162:	f7fa fc83 	bl	8003a6c <HAL_GetTick>
 8009166:	4602      	mov	r2, r0
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009170:	4293      	cmp	r3, r2
 8009172:	d901      	bls.n	8009178 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e0bf      	b.n	80092f8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009178:	4b0f      	ldr	r3, [pc, #60]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 800917a:	69db      	ldr	r3, [r3, #28]
 800917c:	f003 030c 	and.w	r3, r3, #12
 8009180:	2b08      	cmp	r3, #8
 8009182:	d1ee      	bne.n	8009162 <HAL_RCC_ClockConfig+0x232>
 8009184:	e02d      	b.n	80091e2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d123      	bne.n	80091d6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800918e:	e00a      	b.n	80091a6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009190:	f7fa fc6c 	bl	8003a6c <HAL_GetTick>
 8009194:	4602      	mov	r2, r0
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	f241 3288 	movw	r2, #5000	; 0x1388
 800919e:	4293      	cmp	r3, r2
 80091a0:	d901      	bls.n	80091a6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80091a2:	2303      	movs	r3, #3
 80091a4:	e0a8      	b.n	80092f8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80091a6:	4b04      	ldr	r3, [pc, #16]	; (80091b8 <HAL_RCC_ClockConfig+0x288>)
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	f003 030c 	and.w	r3, r3, #12
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1ee      	bne.n	8009190 <HAL_RCC_ClockConfig+0x260>
 80091b2:	e016      	b.n	80091e2 <HAL_RCC_ClockConfig+0x2b2>
 80091b4:	40022000 	.word	0x40022000
 80091b8:	46020c00 	.word	0x46020c00
 80091bc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091c0:	f7fa fc54 	bl	8003a6c <HAL_GetTick>
 80091c4:	4602      	mov	r2, r0
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d901      	bls.n	80091d6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80091d2:	2303      	movs	r3, #3
 80091d4:	e090      	b.n	80092f8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80091d6:	4b4a      	ldr	r3, [pc, #296]	; (8009300 <HAL_RCC_ClockConfig+0x3d0>)
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	f003 030c 	and.w	r3, r3, #12
 80091de:	2b04      	cmp	r3, #4
 80091e0:	d1ee      	bne.n	80091c0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 0302 	and.w	r3, r3, #2
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d010      	beq.n	8009210 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	689a      	ldr	r2, [r3, #8]
 80091f2:	4b43      	ldr	r3, [pc, #268]	; (8009300 <HAL_RCC_ClockConfig+0x3d0>)
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	f003 030f 	and.w	r3, r3, #15
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d208      	bcs.n	8009210 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80091fe:	4b40      	ldr	r3, [pc, #256]	; (8009300 <HAL_RCC_ClockConfig+0x3d0>)
 8009200:	6a1b      	ldr	r3, [r3, #32]
 8009202:	f023 020f 	bic.w	r2, r3, #15
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	493d      	ldr	r1, [pc, #244]	; (8009300 <HAL_RCC_ClockConfig+0x3d0>)
 800920c:	4313      	orrs	r3, r2
 800920e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009210:	4b3c      	ldr	r3, [pc, #240]	; (8009304 <HAL_RCC_ClockConfig+0x3d4>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 030f 	and.w	r3, r3, #15
 8009218:	683a      	ldr	r2, [r7, #0]
 800921a:	429a      	cmp	r2, r3
 800921c:	d210      	bcs.n	8009240 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800921e:	4b39      	ldr	r3, [pc, #228]	; (8009304 <HAL_RCC_ClockConfig+0x3d4>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f023 020f 	bic.w	r2, r3, #15
 8009226:	4937      	ldr	r1, [pc, #220]	; (8009304 <HAL_RCC_ClockConfig+0x3d4>)
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	4313      	orrs	r3, r2
 800922c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800922e:	4b35      	ldr	r3, [pc, #212]	; (8009304 <HAL_RCC_ClockConfig+0x3d4>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 030f 	and.w	r3, r3, #15
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	429a      	cmp	r2, r3
 800923a:	d001      	beq.n	8009240 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e05b      	b.n	80092f8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 0304 	and.w	r3, r3, #4
 8009248:	2b00      	cmp	r3, #0
 800924a:	d010      	beq.n	800926e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	68da      	ldr	r2, [r3, #12]
 8009250:	4b2b      	ldr	r3, [pc, #172]	; (8009300 <HAL_RCC_ClockConfig+0x3d0>)
 8009252:	6a1b      	ldr	r3, [r3, #32]
 8009254:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009258:	429a      	cmp	r2, r3
 800925a:	d208      	bcs.n	800926e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800925c:	4b28      	ldr	r3, [pc, #160]	; (8009300 <HAL_RCC_ClockConfig+0x3d0>)
 800925e:	6a1b      	ldr	r3, [r3, #32]
 8009260:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	4925      	ldr	r1, [pc, #148]	; (8009300 <HAL_RCC_ClockConfig+0x3d0>)
 800926a:	4313      	orrs	r3, r2
 800926c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 0308 	and.w	r3, r3, #8
 8009276:	2b00      	cmp	r3, #0
 8009278:	d012      	beq.n	80092a0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	691a      	ldr	r2, [r3, #16]
 800927e:	4b20      	ldr	r3, [pc, #128]	; (8009300 <HAL_RCC_ClockConfig+0x3d0>)
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	091b      	lsrs	r3, r3, #4
 8009284:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009288:	429a      	cmp	r2, r3
 800928a:	d209      	bcs.n	80092a0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800928c:	4b1c      	ldr	r3, [pc, #112]	; (8009300 <HAL_RCC_ClockConfig+0x3d0>)
 800928e:	6a1b      	ldr	r3, [r3, #32]
 8009290:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	011b      	lsls	r3, r3, #4
 800929a:	4919      	ldr	r1, [pc, #100]	; (8009300 <HAL_RCC_ClockConfig+0x3d0>)
 800929c:	4313      	orrs	r3, r2
 800929e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 0310 	and.w	r3, r3, #16
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d010      	beq.n	80092ce <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	695a      	ldr	r2, [r3, #20]
 80092b0:	4b13      	ldr	r3, [pc, #76]	; (8009300 <HAL_RCC_ClockConfig+0x3d0>)
 80092b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d208      	bcs.n	80092ce <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80092bc:	4b10      	ldr	r3, [pc, #64]	; (8009300 <HAL_RCC_ClockConfig+0x3d0>)
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	490d      	ldr	r1, [pc, #52]	; (8009300 <HAL_RCC_ClockConfig+0x3d0>)
 80092ca:	4313      	orrs	r3, r2
 80092cc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80092ce:	f000 f821 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 80092d2:	4602      	mov	r2, r0
 80092d4:	4b0a      	ldr	r3, [pc, #40]	; (8009300 <HAL_RCC_ClockConfig+0x3d0>)
 80092d6:	6a1b      	ldr	r3, [r3, #32]
 80092d8:	f003 030f 	and.w	r3, r3, #15
 80092dc:	490a      	ldr	r1, [pc, #40]	; (8009308 <HAL_RCC_ClockConfig+0x3d8>)
 80092de:	5ccb      	ldrb	r3, [r1, r3]
 80092e0:	fa22 f303 	lsr.w	r3, r2, r3
 80092e4:	4a09      	ldr	r2, [pc, #36]	; (800930c <HAL_RCC_ClockConfig+0x3dc>)
 80092e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80092e8:	4b09      	ldr	r3, [pc, #36]	; (8009310 <HAL_RCC_ClockConfig+0x3e0>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7fa fa35 	bl	800375c <HAL_InitTick>
 80092f2:	4603      	mov	r3, r0
 80092f4:	73fb      	strb	r3, [r7, #15]

  return status;
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3718      	adds	r7, #24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	46020c00 	.word	0x46020c00
 8009304:	40022000 	.word	0x40022000
 8009308:	0800e22c 	.word	0x0800e22c
 800930c:	20000000 	.word	0x20000000
 8009310:	20000004 	.word	0x20000004

08009314 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009314:	b480      	push	{r7}
 8009316:	b08b      	sub	sp, #44	; 0x2c
 8009318:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800931a:	2300      	movs	r3, #0
 800931c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800931e:	2300      	movs	r3, #0
 8009320:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009322:	4b78      	ldr	r3, [pc, #480]	; (8009504 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009324:	69db      	ldr	r3, [r3, #28]
 8009326:	f003 030c 	and.w	r3, r3, #12
 800932a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800932c:	4b75      	ldr	r3, [pc, #468]	; (8009504 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800932e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009330:	f003 0303 	and.w	r3, r3, #3
 8009334:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d005      	beq.n	8009348 <HAL_RCC_GetSysClockFreq+0x34>
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	2b0c      	cmp	r3, #12
 8009340:	d121      	bne.n	8009386 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d11e      	bne.n	8009386 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8009348:	4b6e      	ldr	r3, [pc, #440]	; (8009504 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009350:	2b00      	cmp	r3, #0
 8009352:	d107      	bne.n	8009364 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8009354:	4b6b      	ldr	r3, [pc, #428]	; (8009504 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009356:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800935a:	0b1b      	lsrs	r3, r3, #12
 800935c:	f003 030f 	and.w	r3, r3, #15
 8009360:	627b      	str	r3, [r7, #36]	; 0x24
 8009362:	e005      	b.n	8009370 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8009364:	4b67      	ldr	r3, [pc, #412]	; (8009504 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	0f1b      	lsrs	r3, r3, #28
 800936a:	f003 030f 	and.w	r3, r3, #15
 800936e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009370:	4a65      	ldr	r2, [pc, #404]	; (8009508 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8009372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009378:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d110      	bne.n	80093a2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009384:	e00d      	b.n	80093a2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009386:	4b5f      	ldr	r3, [pc, #380]	; (8009504 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009388:	69db      	ldr	r3, [r3, #28]
 800938a:	f003 030c 	and.w	r3, r3, #12
 800938e:	2b04      	cmp	r3, #4
 8009390:	d102      	bne.n	8009398 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009392:	4b5e      	ldr	r3, [pc, #376]	; (800950c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8009394:	623b      	str	r3, [r7, #32]
 8009396:	e004      	b.n	80093a2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	2b08      	cmp	r3, #8
 800939c:	d101      	bne.n	80093a2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800939e:	4b5b      	ldr	r3, [pc, #364]	; (800950c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80093a0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	2b0c      	cmp	r3, #12
 80093a6:	f040 80a5 	bne.w	80094f4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80093aa:	4b56      	ldr	r3, [pc, #344]	; (8009504 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ae:	f003 0303 	and.w	r3, r3, #3
 80093b2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80093b4:	4b53      	ldr	r3, [pc, #332]	; (8009504 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b8:	0a1b      	lsrs	r3, r3, #8
 80093ba:	f003 030f 	and.w	r3, r3, #15
 80093be:	3301      	adds	r3, #1
 80093c0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80093c2:	4b50      	ldr	r3, [pc, #320]	; (8009504 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c6:	091b      	lsrs	r3, r3, #4
 80093c8:	f003 0301 	and.w	r3, r3, #1
 80093cc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80093ce:	4b4d      	ldr	r3, [pc, #308]	; (8009504 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d2:	08db      	lsrs	r3, r3, #3
 80093d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093d8:	68ba      	ldr	r2, [r7, #8]
 80093da:	fb02 f303 	mul.w	r3, r2, r3
 80093de:	ee07 3a90 	vmov	s15, r3
 80093e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d003      	beq.n	80093f8 <HAL_RCC_GetSysClockFreq+0xe4>
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d022      	beq.n	800943c <HAL_RCC_GetSysClockFreq+0x128>
 80093f6:	e043      	b.n	8009480 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	ee07 3a90 	vmov	s15, r3
 80093fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009402:	eddf 6a43 	vldr	s13, [pc, #268]	; 8009510 <HAL_RCC_GetSysClockFreq+0x1fc>
 8009406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940a:	4b3e      	ldr	r3, [pc, #248]	; (8009504 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800940c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800940e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800941a:	ed97 6a01 	vldr	s12, [r7, #4]
 800941e:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8009514 <HAL_RCC_GetSysClockFreq+0x200>
 8009422:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009426:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800942a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800942e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800943a:	e046      	b.n	80094ca <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	ee07 3a90 	vmov	s15, r3
 8009442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009446:	eddf 6a32 	vldr	s13, [pc, #200]	; 8009510 <HAL_RCC_GetSysClockFreq+0x1fc>
 800944a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800944e:	4b2d      	ldr	r3, [pc, #180]	; (8009504 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009456:	ee07 3a90 	vmov	s15, r3
 800945a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800945e:	ed97 6a01 	vldr	s12, [r7, #4]
 8009462:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8009514 <HAL_RCC_GetSysClockFreq+0x200>
 8009466:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800946a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800946e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009472:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800947e:	e024      	b.n	80094ca <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	ee07 3a90 	vmov	s15, r3
 8009490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009494:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009498:	4b1a      	ldr	r3, [pc, #104]	; (8009504 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800949a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094a0:	ee07 3a90 	vmov	s15, r3
 80094a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80094a8:	ed97 6a01 	vldr	s12, [r7, #4]
 80094ac:	eddf 5a19 	vldr	s11, [pc, #100]	; 8009514 <HAL_RCC_GetSysClockFreq+0x200>
 80094b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80094b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80094b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80094c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094c8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80094ca:	4b0e      	ldr	r3, [pc, #56]	; (8009504 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80094cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ce:	0e1b      	lsrs	r3, r3, #24
 80094d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094d4:	3301      	adds	r3, #1
 80094d6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	ee07 3a90 	vmov	s15, r3
 80094de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80094e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80094e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ee:	ee17 3a90 	vmov	r3, s15
 80094f2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80094f4:	6a3b      	ldr	r3, [r7, #32]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	372c      	adds	r7, #44	; 0x2c
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	46020c00 	.word	0x46020c00
 8009508:	0800e244 	.word	0x0800e244
 800950c:	00f42400 	.word	0x00f42400
 8009510:	4b742400 	.word	0x4b742400
 8009514:	46000000 	.word	0x46000000

08009518 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800951c:	f7ff fefa 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 8009520:	4602      	mov	r2, r0
 8009522:	4b07      	ldr	r3, [pc, #28]	; (8009540 <HAL_RCC_GetHCLKFreq+0x28>)
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	f003 030f 	and.w	r3, r3, #15
 800952a:	4906      	ldr	r1, [pc, #24]	; (8009544 <HAL_RCC_GetHCLKFreq+0x2c>)
 800952c:	5ccb      	ldrb	r3, [r1, r3]
 800952e:	fa22 f303 	lsr.w	r3, r2, r3
 8009532:	4a05      	ldr	r2, [pc, #20]	; (8009548 <HAL_RCC_GetHCLKFreq+0x30>)
 8009534:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8009536:	4b04      	ldr	r3, [pc, #16]	; (8009548 <HAL_RCC_GetHCLKFreq+0x30>)
 8009538:	681b      	ldr	r3, [r3, #0]
}
 800953a:	4618      	mov	r0, r3
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	46020c00 	.word	0x46020c00
 8009544:	0800e22c 	.word	0x0800e22c
 8009548:	20000000 	.word	0x20000000

0800954c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8009550:	f7ff ffe2 	bl	8009518 <HAL_RCC_GetHCLKFreq>
 8009554:	4602      	mov	r2, r0
 8009556:	4b05      	ldr	r3, [pc, #20]	; (800956c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	091b      	lsrs	r3, r3, #4
 800955c:	f003 0307 	and.w	r3, r3, #7
 8009560:	4903      	ldr	r1, [pc, #12]	; (8009570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009562:	5ccb      	ldrb	r3, [r1, r3]
 8009564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009568:	4618      	mov	r0, r3
 800956a:	bd80      	pop	{r7, pc}
 800956c:	46020c00 	.word	0x46020c00
 8009570:	0800e23c 	.word	0x0800e23c

08009574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8009578:	f7ff ffce 	bl	8009518 <HAL_RCC_GetHCLKFreq>
 800957c:	4602      	mov	r2, r0
 800957e:	4b05      	ldr	r3, [pc, #20]	; (8009594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009580:	6a1b      	ldr	r3, [r3, #32]
 8009582:	0a1b      	lsrs	r3, r3, #8
 8009584:	f003 0307 	and.w	r3, r3, #7
 8009588:	4903      	ldr	r1, [pc, #12]	; (8009598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800958a:	5ccb      	ldrb	r3, [r1, r3]
 800958c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009590:	4618      	mov	r0, r3
 8009592:	bd80      	pop	{r7, pc}
 8009594:	46020c00 	.word	0x46020c00
 8009598:	0800e23c 	.word	0x0800e23c

0800959c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80095a0:	f7ff ffba 	bl	8009518 <HAL_RCC_GetHCLKFreq>
 80095a4:	4602      	mov	r2, r0
 80095a6:	4b05      	ldr	r3, [pc, #20]	; (80095bc <HAL_RCC_GetPCLK3Freq+0x20>)
 80095a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095aa:	091b      	lsrs	r3, r3, #4
 80095ac:	f003 0307 	and.w	r3, r3, #7
 80095b0:	4903      	ldr	r1, [pc, #12]	; (80095c0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80095b2:	5ccb      	ldrb	r3, [r1, r3]
 80095b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	46020c00 	.word	0x46020c00
 80095c0:	0800e23c 	.word	0x0800e23c

080095c4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	221f      	movs	r2, #31
 80095d2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80095d4:	4b15      	ldr	r3, [pc, #84]	; (800962c <HAL_RCC_GetClockConfig+0x68>)
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	f003 0203 	and.w	r2, r3, #3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80095e0:	4b12      	ldr	r3, [pc, #72]	; (800962c <HAL_RCC_GetClockConfig+0x68>)
 80095e2:	6a1b      	ldr	r3, [r3, #32]
 80095e4:	f003 020f 	and.w	r2, r3, #15
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80095ec:	4b0f      	ldr	r3, [pc, #60]	; (800962c <HAL_RCC_GetClockConfig+0x68>)
 80095ee:	6a1b      	ldr	r3, [r3, #32]
 80095f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80095f8:	4b0c      	ldr	r3, [pc, #48]	; (800962c <HAL_RCC_GetClockConfig+0x68>)
 80095fa:	6a1b      	ldr	r3, [r3, #32]
 80095fc:	091b      	lsrs	r3, r3, #4
 80095fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8009606:	4b09      	ldr	r3, [pc, #36]	; (800962c <HAL_RCC_GetClockConfig+0x68>)
 8009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009612:	4b07      	ldr	r3, [pc, #28]	; (8009630 <HAL_RCC_GetClockConfig+0x6c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 020f 	and.w	r2, r3, #15
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	601a      	str	r2, [r3, #0]
}
 800961e:	bf00      	nop
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	46020c00 	.word	0x46020c00
 8009630:	40022000 	.word	0x40022000

08009634 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009634:	b480      	push	{r7}
 8009636:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8009638:	4b05      	ldr	r3, [pc, #20]	; (8009650 <HAL_RCC_EnableCSS+0x1c>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a04      	ldr	r2, [pc, #16]	; (8009650 <HAL_RCC_EnableCSS+0x1c>)
 800963e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009642:	6013      	str	r3, [r2, #0]
}
 8009644:	bf00      	nop
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	46020c00 	.word	0x46020c00

08009654 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009658:	4b07      	ldr	r3, [pc, #28]	; (8009678 <HAL_RCC_NMI_IRQHandler+0x24>)
 800965a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800965c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009664:	d105      	bne.n	8009672 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009666:	f000 f809 	bl	800967c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800966a:	4b03      	ldr	r3, [pc, #12]	; (8009678 <HAL_RCC_NMI_IRQHandler+0x24>)
 800966c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009670:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8009672:	bf00      	nop
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	46020c00 	.word	0x46020c00

0800967c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800967c:	b480      	push	{r7}
 800967e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8009680:	bf00      	nop
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
	...

0800968c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009694:	4b3e      	ldr	r3, [pc, #248]	; (8009790 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800969a:	f003 0304 	and.w	r3, r3, #4
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80096a2:	f7fe fcfb 	bl	800809c <HAL_PWREx_GetVoltageRange>
 80096a6:	6178      	str	r0, [r7, #20]
 80096a8:	e019      	b.n	80096de <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80096aa:	4b39      	ldr	r3, [pc, #228]	; (8009790 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80096ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096b0:	4a37      	ldr	r2, [pc, #220]	; (8009790 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80096b2:	f043 0304 	orr.w	r3, r3, #4
 80096b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80096ba:	4b35      	ldr	r3, [pc, #212]	; (8009790 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80096bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096c0:	f003 0304 	and.w	r3, r3, #4
 80096c4:	60fb      	str	r3, [r7, #12]
 80096c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80096c8:	f7fe fce8 	bl	800809c <HAL_PWREx_GetVoltageRange>
 80096cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80096ce:	4b30      	ldr	r3, [pc, #192]	; (8009790 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80096d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096d4:	4a2e      	ldr	r2, [pc, #184]	; (8009790 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80096d6:	f023 0304 	bic.w	r3, r3, #4
 80096da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80096e4:	d003      	beq.n	80096ee <RCC_SetFlashLatencyFromMSIRange+0x62>
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096ec:	d109      	bne.n	8009702 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096f4:	d202      	bcs.n	80096fc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80096f6:	2301      	movs	r3, #1
 80096f8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80096fa:	e033      	b.n	8009764 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80096fc:	2300      	movs	r3, #0
 80096fe:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009700:	e030      	b.n	8009764 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009708:	d208      	bcs.n	800971c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009710:	d102      	bne.n	8009718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8009712:	2303      	movs	r3, #3
 8009714:	613b      	str	r3, [r7, #16]
 8009716:	e025      	b.n	8009764 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e035      	b.n	8009788 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009722:	d90f      	bls.n	8009744 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d109      	bne.n	800973e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009730:	d902      	bls.n	8009738 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8009732:	2300      	movs	r3, #0
 8009734:	613b      	str	r3, [r7, #16]
 8009736:	e015      	b.n	8009764 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8009738:	2301      	movs	r3, #1
 800973a:	613b      	str	r3, [r7, #16]
 800973c:	e012      	b.n	8009764 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800973e:	2300      	movs	r3, #0
 8009740:	613b      	str	r3, [r7, #16]
 8009742:	e00f      	b.n	8009764 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800974a:	d109      	bne.n	8009760 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009752:	d102      	bne.n	800975a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8009754:	2301      	movs	r3, #1
 8009756:	613b      	str	r3, [r7, #16]
 8009758:	e004      	b.n	8009764 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800975a:	2302      	movs	r3, #2
 800975c:	613b      	str	r3, [r7, #16]
 800975e:	e001      	b.n	8009764 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8009760:	2301      	movs	r3, #1
 8009762:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009764:	4b0b      	ldr	r3, [pc, #44]	; (8009794 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f023 020f 	bic.w	r2, r3, #15
 800976c:	4909      	ldr	r1, [pc, #36]	; (8009794 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	4313      	orrs	r3, r2
 8009772:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8009774:	4b07      	ldr	r3, [pc, #28]	; (8009794 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 030f 	and.w	r3, r3, #15
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	429a      	cmp	r2, r3
 8009780:	d001      	beq.n	8009786 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e000      	b.n	8009788 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3718      	adds	r7, #24
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	46020c00 	.word	0x46020c00
 8009794:	40022000 	.word	0x40022000

08009798 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8009798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800979c:	b0c8      	sub	sp, #288	; 0x120
 800979e:	af00      	add	r7, sp, #0
 80097a0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80097a4:	2300      	movs	r3, #0
 80097a6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80097aa:	2300      	movs	r3, #0
 80097ac:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80097b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b8:	f002 0401 	and.w	r4, r2, #1
 80097bc:	2500      	movs	r5, #0
 80097be:	ea54 0305 	orrs.w	r3, r4, r5
 80097c2:	d00b      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80097c4:	4bd5      	ldr	r3, [pc, #852]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80097c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097ca:	f023 0103 	bic.w	r1, r3, #3
 80097ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097d4:	4ad1      	ldr	r2, [pc, #836]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80097d6:	430b      	orrs	r3, r1
 80097d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80097dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	f002 0802 	and.w	r8, r2, #2
 80097e8:	f04f 0900 	mov.w	r9, #0
 80097ec:	ea58 0309 	orrs.w	r3, r8, r9
 80097f0:	d00b      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80097f2:	4bca      	ldr	r3, [pc, #808]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80097f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097f8:	f023 010c 	bic.w	r1, r3, #12
 80097fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009802:	4ac6      	ldr	r2, [pc, #792]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009804:	430b      	orrs	r3, r1
 8009806:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800980a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800980e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009812:	f002 0a04 	and.w	sl, r2, #4
 8009816:	f04f 0b00 	mov.w	fp, #0
 800981a:	ea5a 030b 	orrs.w	r3, sl, fp
 800981e:	d00b      	beq.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8009820:	4bbe      	ldr	r3, [pc, #760]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009826:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800982a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800982e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009830:	4aba      	ldr	r2, [pc, #744]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009832:	430b      	orrs	r3, r1
 8009834:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800983c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009840:	f002 0308 	and.w	r3, r2, #8
 8009844:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009848:	2300      	movs	r3, #0
 800984a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800984e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009852:	460b      	mov	r3, r1
 8009854:	4313      	orrs	r3, r2
 8009856:	d00b      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8009858:	4bb0      	ldr	r3, [pc, #704]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800985a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800985e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009868:	4aac      	ldr	r2, [pc, #688]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800986a:	430b      	orrs	r3, r1
 800986c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009870:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009878:	f002 0310 	and.w	r3, r2, #16
 800987c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009880:	2300      	movs	r3, #0
 8009882:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009886:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800988a:	460b      	mov	r3, r1
 800988c:	4313      	orrs	r3, r2
 800988e:	d00b      	beq.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8009890:	4ba2      	ldr	r3, [pc, #648]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009896:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800989a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800989e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098a0:	4a9e      	ldr	r2, [pc, #632]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098a2:	430b      	orrs	r3, r1
 80098a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80098a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80098b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80098b8:	2300      	movs	r3, #0
 80098ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80098be:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80098c2:	460b      	mov	r3, r1
 80098c4:	4313      	orrs	r3, r2
 80098c6:	d00b      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80098c8:	4b94      	ldr	r3, [pc, #592]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80098ce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80098d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098d8:	4a90      	ldr	r2, [pc, #576]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098da:	430b      	orrs	r3, r1
 80098dc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80098e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e8:	f002 0320 	and.w	r3, r2, #32
 80098ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80098f0:	2300      	movs	r3, #0
 80098f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80098f6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80098fa:	460b      	mov	r3, r1
 80098fc:	4313      	orrs	r3, r2
 80098fe:	d00b      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8009900:	4b86      	ldr	r3, [pc, #536]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009906:	f023 0107 	bic.w	r1, r3, #7
 800990a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800990e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009910:	4a82      	ldr	r2, [pc, #520]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009912:	430b      	orrs	r3, r1
 8009914:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009928:	2300      	movs	r3, #0
 800992a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800992e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009932:	460b      	mov	r3, r1
 8009934:	4313      	orrs	r3, r2
 8009936:	d00b      	beq.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8009938:	4b78      	ldr	r3, [pc, #480]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800993a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800993e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8009942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009948:	4a74      	ldr	r2, [pc, #464]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800994a:	430b      	orrs	r3, r1
 800994c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009958:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800995c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009960:	2300      	movs	r3, #0
 8009962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009966:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800996a:	460b      	mov	r3, r1
 800996c:	4313      	orrs	r3, r2
 800996e:	d00b      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8009970:	4b6a      	ldr	r3, [pc, #424]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009976:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800997a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800997e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009980:	4a66      	ldr	r2, [pc, #408]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009982:	430b      	orrs	r3, r1
 8009984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009988:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800998c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009990:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8009994:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009998:	2300      	movs	r3, #0
 800999a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800999e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80099a2:	460b      	mov	r3, r1
 80099a4:	4313      	orrs	r3, r2
 80099a6:	d00b      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80099a8:	4b5c      	ldr	r3, [pc, #368]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80099ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80099b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099b8:	4a58      	ldr	r2, [pc, #352]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099ba:	430b      	orrs	r3, r1
 80099bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80099c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80099cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099d0:	2300      	movs	r3, #0
 80099d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80099d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80099da:	460b      	mov	r3, r1
 80099dc:	4313      	orrs	r3, r2
 80099de:	d00b      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80099e0:	4b4e      	ldr	r3, [pc, #312]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099e6:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80099ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099f0:	4a4a      	ldr	r2, [pc, #296]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099f2:	430b      	orrs	r3, r1
 80099f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 80099f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a00:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009a04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a08:	2300      	movs	r3, #0
 8009a0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009a12:	460b      	mov	r3, r1
 8009a14:	4313      	orrs	r3, r2
 8009a16:	d00b      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8009a18:	4b40      	ldr	r3, [pc, #256]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009a1e:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8009a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a28:	4a3c      	ldr	r2, [pc, #240]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a2a:	430b      	orrs	r3, r1
 8009a2c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8009a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a38:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a40:	2300      	movs	r3, #0
 8009a42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009a46:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	d00c      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8009a50:	4b32      	ldr	r3, [pc, #200]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009a56:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8009a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a62:	4a2e      	ldr	r2, [pc, #184]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a64:	430b      	orrs	r3, r1
 8009a66:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a72:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8009a76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a80:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009a84:	460b      	mov	r3, r1
 8009a86:	4313      	orrs	r3, r2
 8009a88:	d00c      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8009a8a:	4b24      	ldr	r3, [pc, #144]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009a90:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8009a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a9c:	4a1f      	ldr	r2, [pc, #124]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a9e:	430b      	orrs	r3, r1
 8009aa0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aac:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009aba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009abe:	460b      	mov	r3, r1
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	d00c      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8009ac4:	4b15      	ldr	r3, [pc, #84]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009aca:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8009ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ad6:	4a11      	ldr	r2, [pc, #68]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009ad8:	430b      	orrs	r3, r1
 8009ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8009ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009aea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009aee:	2300      	movs	r3, #0
 8009af0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009af4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009af8:	460b      	mov	r3, r1
 8009afa:	4313      	orrs	r3, r2
 8009afc:	d010      	beq.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8009afe:	4b07      	ldr	r3, [pc, #28]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b04:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b10:	4a02      	ldr	r2, [pc, #8]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b12:	430b      	orrs	r3, r1
 8009b14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009b18:	e002      	b.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8009b1a:	bf00      	nop
 8009b1c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b28:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009b30:	2300      	movs	r3, #0
 8009b32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b36:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	d04c      	beq.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b48:	2b80      	cmp	r3, #128	; 0x80
 8009b4a:	d02d      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009b4c:	2b80      	cmp	r3, #128	; 0x80
 8009b4e:	d827      	bhi.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009b50:	2b60      	cmp	r3, #96	; 0x60
 8009b52:	d02b      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009b54:	2b60      	cmp	r3, #96	; 0x60
 8009b56:	d823      	bhi.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009b58:	2b40      	cmp	r3, #64	; 0x40
 8009b5a:	d006      	beq.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8009b5c:	2b40      	cmp	r3, #64	; 0x40
 8009b5e:	d81f      	bhi.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d009      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009b64:	2b20      	cmp	r3, #32
 8009b66:	d011      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009b68:	e01a      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009b6a:	4bc0      	ldr	r3, [pc, #768]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6e:	4abf      	ldr	r2, [pc, #764]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b74:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009b76:	e01a      	b.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b7c:	3308      	adds	r3, #8
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f002 fce8 	bl	800c554 <RCCEx_PLL2_Config>
 8009b84:	4603      	mov	r3, r0
 8009b86:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009b8a:	e010      	b.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b90:	332c      	adds	r3, #44	; 0x2c
 8009b92:	4618      	mov	r0, r3
 8009b94:	f002 fd76 	bl	800c684 <RCCEx_PLL3_Config>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009b9e:	e006      	b.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009ba6:	e002      	b.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009ba8:	bf00      	nop
 8009baa:	e000      	b.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bae:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10d      	bne.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8009bb6:	4bad      	ldr	r3, [pc, #692]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009bb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009bbc:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8009bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009bc8:	4aa8      	ldr	r2, [pc, #672]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009bca:	430b      	orrs	r3, r1
 8009bcc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009bd0:	e003      	b.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009bd6:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009be6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009bea:	2300      	movs	r3, #0
 8009bec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009bf0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	d053      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8009bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c06:	d033      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8009c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c0c:	d82c      	bhi.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009c0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c12:	d02f      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8009c14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c18:	d826      	bhi.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c1e:	d008      	beq.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8009c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c24:	d820      	bhi.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00a      	beq.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c2e:	d011      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009c30:	e01a      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009c32:	4b8e      	ldr	r3, [pc, #568]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c36:	4a8d      	ldr	r2, [pc, #564]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c3c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009c3e:	e01a      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c44:	3308      	adds	r3, #8
 8009c46:	4618      	mov	r0, r3
 8009c48:	f002 fc84 	bl	800c554 <RCCEx_PLL2_Config>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009c52:	e010      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c58:	332c      	adds	r3, #44	; 0x2c
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f002 fd12 	bl	800c684 <RCCEx_PLL3_Config>
 8009c60:	4603      	mov	r3, r0
 8009c62:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009c66:	e006      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009c6e:	e002      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009c70:	bf00      	nop
 8009c72:	e000      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c76:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d10d      	bne.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8009c7e:	4b7b      	ldr	r3, [pc, #492]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009c84:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8009c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c90:	4a76      	ldr	r2, [pc, #472]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c92:	430b      	orrs	r3, r1
 8009c94:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009c98:	e003      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c9a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009c9e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8009ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009caa:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009cae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009cb8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	d046      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8009cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009cc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009cca:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009cce:	d028      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009cd0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009cd4:	d821      	bhi.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009cd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cda:	d022      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009cdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ce0:	d81b      	bhi.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009ce2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ce6:	d01c      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009ce8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009cec:	d815      	bhi.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cf2:	d008      	beq.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8009cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cf8:	d80f      	bhi.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d011      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d02:	d00e      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009d04:	e009      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d0a:	3308      	adds	r3, #8
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f002 fc21 	bl	800c554 <RCCEx_PLL2_Config>
 8009d12:	4603      	mov	r3, r0
 8009d14:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009d18:	e004      	b.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009d20:	e000      	b.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8009d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d24:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10d      	bne.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009d2c:	4b4f      	ldr	r3, [pc, #316]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009d2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009d32:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009d3e:	4a4b      	ldr	r2, [pc, #300]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009d40:	430b      	orrs	r3, r1
 8009d42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009d46:	e003      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d48:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009d4c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d58:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d60:	2300      	movs	r3, #0
 8009d62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d66:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	d03f      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8009d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	d81e      	bhi.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x622>
 8009d7c:	a201      	add	r2, pc, #4	; (adr r2, 8009d84 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d82:	bf00      	nop
 8009d84:	08009dc3 	.word	0x08009dc3
 8009d88:	08009d99 	.word	0x08009d99
 8009d8c:	08009da7 	.word	0x08009da7
 8009d90:	08009dc3 	.word	0x08009dc3
 8009d94:	08009dc3 	.word	0x08009dc3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009d98:	4b34      	ldr	r3, [pc, #208]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9c:	4a33      	ldr	r2, [pc, #204]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009da2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8009da4:	e00e      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009daa:	332c      	adds	r3, #44	; 0x2c
 8009dac:	4618      	mov	r0, r3
 8009dae:	f002 fc69 	bl	800c684 <RCCEx_PLL3_Config>
 8009db2:	4603      	mov	r3, r0
 8009db4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009db8:	e004      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009dc0:	e000      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 8009dc2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009dc4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d10d      	bne.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8009dcc:	4b27      	ldr	r3, [pc, #156]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009dce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009dd2:	f023 0107 	bic.w	r1, r3, #7
 8009dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dde:	4a23      	ldr	r2, [pc, #140]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009de0:	430b      	orrs	r3, r1
 8009de2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009de6:	e003      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009dec:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8009df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009dfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8009dfe:	2300      	movs	r3, #0
 8009e00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009e02:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009e06:	460b      	mov	r3, r1
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	d04c      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8009e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009e18:	d02a      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8009e1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009e1e:	d821      	bhi.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009e20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009e24:	d026      	beq.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8009e26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009e2a:	d81b      	bhi.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009e2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e30:	d00e      	beq.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009e32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e36:	d815      	bhi.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d01d      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8009e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e40:	d110      	bne.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e42:	4b0a      	ldr	r3, [pc, #40]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e46:	4a09      	ldr	r2, [pc, #36]	; (8009e6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e4c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8009e4e:	e014      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e54:	332c      	adds	r3, #44	; 0x2c
 8009e56:	4618      	mov	r0, r3
 8009e58:	f002 fc14 	bl	800c684 <RCCEx_PLL3_Config>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009e62:	e00a      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009e6a:	e006      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8009e6c:	46020c00 	.word	0x46020c00
        break;
 8009e70:	bf00      	nop
 8009e72:	e002      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8009e74:	bf00      	nop
 8009e76:	e000      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8009e78:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009e7a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10d      	bne.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8009e82:	4baf      	ldr	r3, [pc, #700]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009e84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009e88:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e94:	4aaa      	ldr	r2, [pc, #680]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009e96:	430b      	orrs	r3, r1
 8009e98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009e9c:	e003      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e9e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009ea2:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eae:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009eb2:	673b      	str	r3, [r7, #112]	; 0x70
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	677b      	str	r3, [r7, #116]	; 0x74
 8009eb8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	f000 80b5 	beq.w	800a02e <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009eca:	4b9d      	ldr	r3, [pc, #628]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ed0:	f003 0304 	and.w	r3, r3, #4
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d113      	bne.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ed8:	4b99      	ldr	r3, [pc, #612]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ede:	4a98      	ldr	r2, [pc, #608]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009ee0:	f043 0304 	orr.w	r3, r3, #4
 8009ee4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009ee8:	4b95      	ldr	r3, [pc, #596]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009eee:	f003 0304 	and.w	r3, r3, #4
 8009ef2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009ef6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
      pwrclkchanged = SET;
 8009efa:	2301      	movs	r3, #1
 8009efc:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009f00:	4b90      	ldr	r3, [pc, #576]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f04:	4a8f      	ldr	r2, [pc, #572]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009f06:	f043 0301 	orr.w	r3, r3, #1
 8009f0a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f0c:	f7f9 fdae 	bl	8003a6c <HAL_GetTick>
 8009f10:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009f14:	e00b      	b.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f16:	f7f9 fda9 	bl	8003a6c <HAL_GetTick>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d903      	bls.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 8009f26:	2303      	movs	r3, #3
 8009f28:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009f2c:	e005      	b.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009f2e:	4b85      	ldr	r3, [pc, #532]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f32:	f003 0301 	and.w	r3, r3, #1
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d0ed      	beq.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 8009f3a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d165      	bne.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009f42:	4b7f      	ldr	r3, [pc, #508]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009f50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d023      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8009f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f5c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8009f60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d01b      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009f68:	4b75      	ldr	r3, [pc, #468]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f76:	4b72      	ldr	r3, [pc, #456]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009f7c:	4a70      	ldr	r2, [pc, #448]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f86:	4b6e      	ldr	r3, [pc, #440]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009f8c:	4a6c      	ldr	r2, [pc, #432]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009f96:	4a6a      	ldr	r2, [pc, #424]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009f9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009fa4:	f003 0301 	and.w	r3, r3, #1
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d019      	beq.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fac:	f7f9 fd5e 	bl	8003a6c <HAL_GetTick>
 8009fb0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009fb4:	e00d      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fb6:	f7f9 fd59 	bl	8003a6c <HAL_GetTick>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fc0:	1ad2      	subs	r2, r2, r3
 8009fc2:	f241 3388 	movw	r3, #5000	; 0x1388
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d903      	bls.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
            break;
 8009fd0:	e006      	b.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009fd2:	4b5b      	ldr	r3, [pc, #364]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009fd8:	f003 0302 	and.w	r3, r3, #2
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d0ea      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 8009fe0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10d      	bne.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8009fe8:	4b55      	ldr	r3, [pc, #340]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009fea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009fee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ff6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8009ffa:	4a51      	ldr	r2, [pc, #324]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009ffc:	430b      	orrs	r3, r1
 8009ffe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a002:	e008      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a004:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a008:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 800a00c:	e003      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a00e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a012:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a016:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d107      	bne.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a01e:	4b48      	ldr	r3, [pc, #288]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a024:	4a46      	ldr	r2, [pc, #280]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a026:	f023 0304 	bic.w	r3, r3, #4
 800a02a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800a02e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a03a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a03c:	2300      	movs	r3, #0
 800a03e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a040:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a044:	460b      	mov	r3, r1
 800a046:	4313      	orrs	r3, r2
 800a048:	d042      	beq.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800a04a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a04e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a052:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a056:	d022      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x906>
 800a058:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a05c:	d81b      	bhi.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a05e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a062:	d011      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800a064:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a068:	d815      	bhi.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d019      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800a06e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a072:	d110      	bne.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a074:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a078:	3308      	adds	r3, #8
 800a07a:	4618      	mov	r0, r3
 800a07c:	f002 fa6a 	bl	800c554 <RCCEx_PLL2_Config>
 800a080:	4603      	mov	r3, r0
 800a082:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a086:	e00d      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a088:	4b2d      	ldr	r3, [pc, #180]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08c:	4a2c      	ldr	r2, [pc, #176]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a08e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a092:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a094:	e006      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a09c:	e002      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800a09e:	bf00      	nop
 800a0a0:	e000      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800a0a2:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a0a4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10d      	bne.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800a0ac:	4b24      	ldr	r3, [pc, #144]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a0ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0b2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800a0b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a0be:	4a20      	ldr	r2, [pc, #128]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a0c0:	430b      	orrs	r3, r1
 800a0c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a0c6:	e003      	b.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0c8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a0cc:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a0d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a0dc:	663b      	str	r3, [r7, #96]	; 0x60
 800a0de:	2300      	movs	r3, #0
 800a0e0:	667b      	str	r3, [r7, #100]	; 0x64
 800a0e2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	d031      	beq.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800a0ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a0f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0f8:	d00b      	beq.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800a0fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0fe:	d804      	bhi.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800a100:	2b00      	cmp	r3, #0
 800a102:	d008      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800a104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a108:	d007      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a110:	e004      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a112:	bf00      	nop
 800a114:	e002      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a116:	bf00      	nop
 800a118:	e000      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a11a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a11c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a120:	2b00      	cmp	r3, #0
 800a122:	d111      	bne.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800a124:	4b06      	ldr	r3, [pc, #24]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a126:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a12a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a12e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a132:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a136:	4a02      	ldr	r2, [pc, #8]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a138:	430b      	orrs	r3, r1
 800a13a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a13e:	e007      	b.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800a140:	46020c00 	.word	0x46020c00
 800a144:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a148:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a14c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800a150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a158:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a15c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a15e:	2300      	movs	r3, #0
 800a160:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a162:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a166:	460b      	mov	r3, r1
 800a168:	4313      	orrs	r3, r2
 800a16a:	d00c      	beq.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800a16c:	4bb2      	ldr	r3, [pc, #712]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a16e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a172:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800a176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a17a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a17e:	4aae      	ldr	r2, [pc, #696]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a180:	430b      	orrs	r3, r1
 800a182:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800a186:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a192:	653b      	str	r3, [r7, #80]	; 0x50
 800a194:	2300      	movs	r3, #0
 800a196:	657b      	str	r3, [r7, #84]	; 0x54
 800a198:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a19c:	460b      	mov	r3, r1
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	d019      	beq.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800a1a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a1a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a1aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1ae:	d105      	bne.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a1b0:	4ba1      	ldr	r3, [pc, #644]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b4:	4aa0      	ldr	r2, [pc, #640]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a1b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1ba:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800a1bc:	4b9e      	ldr	r3, [pc, #632]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a1be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a1c2:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a1c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a1ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a1ce:	4a9a      	ldr	r2, [pc, #616]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a1d0:	430b      	orrs	r3, r1
 800a1d2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800a1d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1de:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a1e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	d00c      	beq.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800a1f2:	4b91      	ldr	r3, [pc, #580]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a1f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a1f8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a1fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a200:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a204:	4a8c      	ldr	r2, [pc, #560]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a206:	430b      	orrs	r3, r1
 800a208:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800a20c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a214:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a218:	643b      	str	r3, [r7, #64]	; 0x40
 800a21a:	2300      	movs	r3, #0
 800a21c:	647b      	str	r3, [r7, #68]	; 0x44
 800a21e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a222:	460b      	mov	r3, r1
 800a224:	4313      	orrs	r3, r2
 800a226:	d00c      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800a228:	4b83      	ldr	r3, [pc, #524]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a22a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a22e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a236:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800a23a:	4a7f      	ldr	r2, [pc, #508]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a23c:	430b      	orrs	r3, r1
 800a23e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800a242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a24e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a250:	2300      	movs	r3, #0
 800a252:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a254:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a258:	460b      	mov	r3, r1
 800a25a:	4313      	orrs	r3, r2
 800a25c:	d00c      	beq.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800a25e:	4b76      	ldr	r3, [pc, #472]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a264:	f023 0118 	bic.w	r1, r3, #24
 800a268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a26c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800a270:	4a71      	ldr	r2, [pc, #452]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a272:	430b      	orrs	r3, r1
 800a274:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a280:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800a284:	633b      	str	r3, [r7, #48]	; 0x30
 800a286:	2300      	movs	r3, #0
 800a288:	637b      	str	r3, [r7, #52]	; 0x34
 800a28a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a28e:	460b      	mov	r3, r1
 800a290:	4313      	orrs	r3, r2
 800a292:	d032      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800a294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a298:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a29c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2a0:	d105      	bne.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2a2:	4b65      	ldr	r3, [pc, #404]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a6:	4a64      	ldr	r2, [pc, #400]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2ac:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800a2ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a2b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a2ba:	d108      	bne.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a2bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2c0:	3308      	adds	r3, #8
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f002 f946 	bl	800c554 <RCCEx_PLL2_Config>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }
    if (ret == HAL_OK)
 800a2ce:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d10d      	bne.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800a2d6:	4b58      	ldr	r3, [pc, #352]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a2dc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a2e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a2e8:	4a53      	ldr	r2, [pc, #332]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2ea:	430b      	orrs	r3, r1
 800a2ec:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a2f0:	e003      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2f2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a2f6:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800a2fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	2100      	movs	r1, #0
 800a304:	62b9      	str	r1, [r7, #40]	; 0x28
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a30c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a310:	460b      	mov	r3, r1
 800a312:	4313      	orrs	r3, r2
 800a314:	d04a      	beq.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800a316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a31a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a31e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a322:	d01e      	beq.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800a324:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a328:	d825      	bhi.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a32a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a32e:	d00e      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800a330:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a334:	d81f      	bhi.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a336:	2b00      	cmp	r3, #0
 800a338:	d021      	beq.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800a33a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a33e:	d11a      	bne.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a340:	4b3d      	ldr	r3, [pc, #244]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a344:	4a3c      	ldr	r2, [pc, #240]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a34a:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a34c:	e018      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a34e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a352:	3308      	adds	r3, #8
 800a354:	4618      	mov	r0, r3
 800a356:	f002 f8fd 	bl	800c554 <RCCEx_PLL2_Config>
 800a35a:	4603      	mov	r3, r0
 800a35c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a360:	e00e      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a366:	332c      	adds	r3, #44	; 0x2c
 800a368:	4618      	mov	r0, r3
 800a36a:	f002 f98b 	bl	800c684 <RCCEx_PLL3_Config>
 800a36e:	4603      	mov	r3, r0
 800a370:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a374:	e004      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a37c:	e000      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800a37e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a380:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10d      	bne.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800a388:	4b2b      	ldr	r3, [pc, #172]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a38a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a38e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a396:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a39a:	4927      	ldr	r1, [pc, #156]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a39c:	4313      	orrs	r3, r2
 800a39e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a3a2:	e003      	b.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3a4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a3a8:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800a3ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800a3b8:	623b      	str	r3, [r7, #32]
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	627b      	str	r3, [r7, #36]	; 0x24
 800a3be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	d03d      	beq.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800a3c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3d4:	d00e      	beq.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800a3d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3da:	d815      	bhi.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d017      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a3e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a3e4:	d110      	bne.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3e6:	4b14      	ldr	r3, [pc, #80]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ea:	4a13      	ldr	r2, [pc, #76]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3f0:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a3f2:	e00e      	b.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a3f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3f8:	3308      	adds	r3, #8
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f002 f8aa 	bl	800c554 <RCCEx_PLL2_Config>
 800a400:	4603      	mov	r3, r0
 800a402:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a406:	e004      	b.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a40e:	e000      	b.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a410:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a412:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a416:	2b00      	cmp	r3, #0
 800a418:	d110      	bne.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800a41a:	4b07      	ldr	r3, [pc, #28]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a41c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a420:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a42c:	4902      	ldr	r1, [pc, #8]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a42e:	4313      	orrs	r3, r2
 800a430:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800a434:	e006      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800a436:	bf00      	nop
 800a438:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a43c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a440:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800a444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a450:	61bb      	str	r3, [r7, #24]
 800a452:	2300      	movs	r3, #0
 800a454:	61fb      	str	r3, [r7, #28]
 800a456:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a45a:	460b      	mov	r3, r1
 800a45c:	4313      	orrs	r3, r2
 800a45e:	d00c      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800a460:	4b68      	ldr	r3, [pc, #416]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a462:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a466:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a46a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a46e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a472:	4964      	ldr	r1, [pc, #400]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a474:	4313      	orrs	r3, r2
 800a476:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a47a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a482:	2100      	movs	r1, #0
 800a484:	6139      	str	r1, [r7, #16]
 800a486:	f003 0302 	and.w	r3, r3, #2
 800a48a:	617b      	str	r3, [r7, #20]
 800a48c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a490:	460b      	mov	r3, r1
 800a492:	4313      	orrs	r3, r2
 800a494:	d036      	beq.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800a496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a49a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d00c      	beq.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800a4a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a4a6:	d113      	bne.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a4a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4ac:	3308      	adds	r3, #8
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f002 f850 	bl	800c554 <RCCEx_PLL2_Config>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a4ba:	e00d      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a4bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4c0:	332c      	adds	r3, #44	; 0x2c
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f002 f8de 	bl	800c684 <RCCEx_PLL3_Config>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a4ce:	e003      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a4d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4d8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d10d      	bne.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800a4e0:	4b48      	ldr	r3, [pc, #288]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a4e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a4e6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a4ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a4f2:	4944      	ldr	r1, [pc, #272]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a4fa:	e003      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4fc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a500:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50c:	2100      	movs	r1, #0
 800a50e:	60b9      	str	r1, [r7, #8]
 800a510:	f003 0304 	and.w	r3, r3, #4
 800a514:	60fb      	str	r3, [r7, #12]
 800a516:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a51a:	460b      	mov	r3, r1
 800a51c:	4313      	orrs	r3, r2
 800a51e:	d024      	beq.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800a520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a524:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d108      	bne.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a52c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a530:	332c      	adds	r3, #44	; 0x2c
 800a532:	4618      	mov	r0, r3
 800a534:	f002 f8a6 	bl	800c684 <RCCEx_PLL3_Config>
 800a538:	4603      	mov	r3, r0
 800a53a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }

    if (ret == HAL_OK)
 800a53e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10d      	bne.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800a546:	4b2f      	ldr	r3, [pc, #188]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a548:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a54c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a550:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a554:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a558:	492a      	ldr	r1, [pc, #168]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a55a:	4313      	orrs	r3, r2
 800a55c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a560:	e003      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a562:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a566:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800a56a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a572:	2100      	movs	r1, #0
 800a574:	6039      	str	r1, [r7, #0]
 800a576:	f003 0308 	and.w	r3, r3, #8
 800a57a:	607b      	str	r3, [r7, #4]
 800a57c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a580:	460b      	mov	r3, r1
 800a582:	4313      	orrs	r3, r2
 800a584:	d036      	beq.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800a586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a58a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a58e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a592:	d00d      	beq.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800a594:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a598:	d811      	bhi.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a59a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a59e:	d012      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a5a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5a4:	d80b      	bhi.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00d      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a5aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5ae:	d106      	bne.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a5b0:	4b14      	ldr	r3, [pc, #80]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a5b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b4:	4a13      	ldr	r2, [pc, #76]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a5b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5ba:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800a5bc:	e004      	b.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a5c4:	e000      	b.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800a5c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5c8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10d      	bne.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800a5d0:	4b0c      	ldr	r3, [pc, #48]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a5d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a5d6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a5da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a5e2:	4908      	ldr	r1, [pc, #32]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a5ea:	e003      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5ec:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a5f0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800a5f4:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800a5fe:	46bd      	mov	sp, r7
 800a600:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a604:	46020c00 	.word	0x46020c00

0800a608 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a608:	b480      	push	{r7}
 800a60a:	b089      	sub	sp, #36	; 0x24
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800a610:	4ba6      	ldr	r3, [pc, #664]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a618:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a61a:	4ba4      	ldr	r3, [pc, #656]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a61e:	f003 0303 	and.w	r3, r3, #3
 800a622:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a624:	4ba1      	ldr	r3, [pc, #644]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a628:	0a1b      	lsrs	r3, r3, #8
 800a62a:	f003 030f 	and.w	r3, r3, #15
 800a62e:	3301      	adds	r3, #1
 800a630:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a632:	4b9e      	ldr	r3, [pc, #632]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a636:	091b      	lsrs	r3, r3, #4
 800a638:	f003 0301 	and.w	r3, r3, #1
 800a63c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a63e:	4b9b      	ldr	r3, [pc, #620]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a642:	08db      	lsrs	r3, r3, #3
 800a644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	fb02 f303 	mul.w	r3, r2, r3
 800a64e:	ee07 3a90 	vmov	s15, r3
 800a652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a656:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	2b03      	cmp	r3, #3
 800a65e:	d062      	beq.n	800a726 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	2b03      	cmp	r3, #3
 800a664:	f200 8081 	bhi.w	800a76a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d024      	beq.n	800a6b8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	2b02      	cmp	r3, #2
 800a672:	d17a      	bne.n	800a76a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800a8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a686:	4b89      	ldr	r3, [pc, #548]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a68e:	ee07 3a90 	vmov	s15, r3
 800a692:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a696:	ed97 6a02 	vldr	s12, [r7, #8]
 800a69a:	eddf 5a86 	vldr	s11, [pc, #536]	; 800a8b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a69e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a6a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a6ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a6b6:	e08f      	b.n	800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a6b8:	4b7c      	ldr	r3, [pc, #496]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d005      	beq.n	800a6d0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800a6c4:	4b79      	ldr	r3, [pc, #484]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	0f1b      	lsrs	r3, r3, #28
 800a6ca:	f003 030f 	and.w	r3, r3, #15
 800a6ce:	e006      	b.n	800a6de <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800a6d0:	4b76      	ldr	r3, [pc, #472]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a6d6:	041b      	lsls	r3, r3, #16
 800a6d8:	0f1b      	lsrs	r3, r3, #28
 800a6da:	f003 030f 	and.w	r3, r3, #15
 800a6de:	4a76      	ldr	r2, [pc, #472]	; (800a8b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a6e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6e4:	ee07 3a90 	vmov	s15, r3
 800a6e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	ee07 3a90 	vmov	s15, r3
 800a6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6fa:	69bb      	ldr	r3, [r7, #24]
 800a6fc:	ee07 3a90 	vmov	s15, r3
 800a700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a704:	ed97 6a02 	vldr	s12, [r7, #8]
 800a708:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800a8b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a70c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a714:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a718:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a71c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a720:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a724:	e058      	b.n	800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	ee07 3a90 	vmov	s15, r3
 800a72c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a730:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a738:	4b5c      	ldr	r3, [pc, #368]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a73a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a73c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a740:	ee07 3a90 	vmov	s15, r3
 800a744:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a748:	ed97 6a02 	vldr	s12, [r7, #8]
 800a74c:	eddf 5a59 	vldr	s11, [pc, #356]	; 800a8b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a750:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a754:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a758:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a75c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a760:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a764:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a768:	e036      	b.n	800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a76a:	4b50      	ldr	r3, [pc, #320]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a772:	2b00      	cmp	r3, #0
 800a774:	d005      	beq.n	800a782 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800a776:	4b4d      	ldr	r3, [pc, #308]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	0f1b      	lsrs	r3, r3, #28
 800a77c:	f003 030f 	and.w	r3, r3, #15
 800a780:	e006      	b.n	800a790 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800a782:	4b4a      	ldr	r3, [pc, #296]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a784:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a788:	041b      	lsls	r3, r3, #16
 800a78a:	0f1b      	lsrs	r3, r3, #28
 800a78c:	f003 030f 	and.w	r3, r3, #15
 800a790:	4a49      	ldr	r2, [pc, #292]	; (800a8b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a796:	ee07 3a90 	vmov	s15, r3
 800a79a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	ee07 3a90 	vmov	s15, r3
 800a7a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7ac:	69bb      	ldr	r3, [r7, #24]
 800a7ae:	ee07 3a90 	vmov	s15, r3
 800a7b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7ba:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a8b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a7be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a7ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7d6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a7d8:	4b34      	ldr	r3, [pc, #208]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a7da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d017      	beq.n	800a814 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a7e4:	4b31      	ldr	r3, [pc, #196]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a7e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7e8:	0a5b      	lsrs	r3, r3, #9
 800a7ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7ee:	ee07 3a90 	vmov	s15, r3
 800a7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800a7f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a7fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a7fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800a802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a80a:	ee17 2a90 	vmov	r2, s15
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	601a      	str	r2, [r3, #0]
 800a812:	e002      	b.n	800a81a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a81a:	4b24      	ldr	r3, [pc, #144]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a81e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d017      	beq.n	800a856 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a826:	4b21      	ldr	r3, [pc, #132]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a82a:	0c1b      	lsrs	r3, r3, #16
 800a82c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a830:	ee07 3a90 	vmov	s15, r3
 800a834:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a838:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a83c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a840:	edd7 6a07 	vldr	s13, [r7, #28]
 800a844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a84c:	ee17 2a90 	vmov	r2, s15
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	605a      	str	r2, [r3, #4]
 800a854:	e002      	b.n	800a85c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a85c:	4b13      	ldr	r3, [pc, #76]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a85e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a864:	2b00      	cmp	r3, #0
 800a866:	d017      	beq.n	800a898 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a868:	4b10      	ldr	r3, [pc, #64]	; (800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a86a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a86c:	0e1b      	lsrs	r3, r3, #24
 800a86e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a872:	ee07 3a90 	vmov	s15, r3
 800a876:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800a87a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a87e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a882:	edd7 6a07 	vldr	s13, [r7, #28]
 800a886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a88a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a88e:	ee17 2a90 	vmov	r2, s15
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a896:	e002      	b.n	800a89e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	609a      	str	r2, [r3, #8]
}
 800a89e:	bf00      	nop
 800a8a0:	3724      	adds	r7, #36	; 0x24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	46020c00 	.word	0x46020c00
 800a8b0:	4b742400 	.word	0x4b742400
 800a8b4:	46000000 	.word	0x46000000
 800a8b8:	0800e244 	.word	0x0800e244

0800a8bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b089      	sub	sp, #36	; 0x24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a8c4:	4ba6      	ldr	r3, [pc, #664]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a8c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8cc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a8ce:	4ba4      	ldr	r3, [pc, #656]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d2:	f003 0303 	and.w	r3, r3, #3
 800a8d6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800a8d8:	4ba1      	ldr	r3, [pc, #644]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8dc:	0a1b      	lsrs	r3, r3, #8
 800a8de:	f003 030f 	and.w	r3, r3, #15
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800a8e6:	4b9e      	ldr	r3, [pc, #632]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ea:	091b      	lsrs	r3, r3, #4
 800a8ec:	f003 0301 	and.w	r3, r3, #1
 800a8f0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a8f2:	4b9b      	ldr	r3, [pc, #620]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f6:	08db      	lsrs	r3, r3, #3
 800a8f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	fb02 f303 	mul.w	r3, r2, r3
 800a902:	ee07 3a90 	vmov	s15, r3
 800a906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a90a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	2b03      	cmp	r3, #3
 800a912:	d062      	beq.n	800a9da <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	2b03      	cmp	r3, #3
 800a918:	f200 8081 	bhi.w	800aa1e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d024      	beq.n	800a96c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	2b02      	cmp	r3, #2
 800a926:	d17a      	bne.n	800aa1e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	ee07 3a90 	vmov	s15, r3
 800a92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a932:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800ab64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a93a:	4b89      	ldr	r3, [pc, #548]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a93c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a93e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a942:	ee07 3a90 	vmov	s15, r3
 800a946:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a94a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a94e:	eddf 5a86 	vldr	s11, [pc, #536]	; 800ab68 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a952:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a956:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a95a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a95e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a962:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a966:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a96a:	e08f      	b.n	800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800a96c:	4b7c      	ldr	r3, [pc, #496]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a974:	2b00      	cmp	r3, #0
 800a976:	d005      	beq.n	800a984 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800a978:	4b79      	ldr	r3, [pc, #484]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	0f1b      	lsrs	r3, r3, #28
 800a97e:	f003 030f 	and.w	r3, r3, #15
 800a982:	e006      	b.n	800a992 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800a984:	4b76      	ldr	r3, [pc, #472]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a986:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a98a:	041b      	lsls	r3, r3, #16
 800a98c:	0f1b      	lsrs	r3, r3, #28
 800a98e:	f003 030f 	and.w	r3, r3, #15
 800a992:	4a76      	ldr	r2, [pc, #472]	; (800ab6c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800a994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a998:	ee07 3a90 	vmov	s15, r3
 800a99c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	ee07 3a90 	vmov	s15, r3
 800a9a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	ee07 3a90 	vmov	s15, r3
 800a9b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9b8:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9bc:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800ab68 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a9c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800a9d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9d8:	e058      	b.n	800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	ee07 3a90 	vmov	s15, r3
 800a9e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9e4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ab64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a9e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ec:	4b5c      	ldr	r3, [pc, #368]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a9ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9f4:	ee07 3a90 	vmov	s15, r3
 800a9f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9fc:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa00:	eddf 5a59 	vldr	s11, [pc, #356]	; 800ab68 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800aa04:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aa08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa10:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aa14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa1c:	e036      	b.n	800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800aa1e:	4b50      	ldr	r3, [pc, #320]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d005      	beq.n	800aa36 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800aa2a:	4b4d      	ldr	r3, [pc, #308]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	0f1b      	lsrs	r3, r3, #28
 800aa30:	f003 030f 	and.w	r3, r3, #15
 800aa34:	e006      	b.n	800aa44 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800aa36:	4b4a      	ldr	r3, [pc, #296]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aa3c:	041b      	lsls	r3, r3, #16
 800aa3e:	0f1b      	lsrs	r3, r3, #28
 800aa40:	f003 030f 	and.w	r3, r3, #15
 800aa44:	4a49      	ldr	r2, [pc, #292]	; (800ab6c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800aa46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa4a:	ee07 3a90 	vmov	s15, r3
 800aa4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	ee07 3a90 	vmov	s15, r3
 800aa58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	ee07 3a90 	vmov	s15, r3
 800aa66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa6a:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa6e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800ab68 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800aa72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800aa82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa8a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800aa8c:	4b34      	ldr	r3, [pc, #208]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d017      	beq.n	800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800aa98:	4b31      	ldr	r3, [pc, #196]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa9c:	0a5b      	lsrs	r3, r3, #9
 800aa9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaa2:	ee07 3a90 	vmov	s15, r3
 800aaa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800aaaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aaae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800aab2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aabe:	ee17 2a90 	vmov	r2, s15
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	601a      	str	r2, [r3, #0]
 800aac6:	e002      	b.n	800aace <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800aace:	4b24      	ldr	r3, [pc, #144]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d017      	beq.n	800ab0a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800aada:	4b21      	ldr	r3, [pc, #132]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aade:	0c1b      	lsrs	r3, r3, #16
 800aae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aae4:	ee07 3a90 	vmov	s15, r3
 800aae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800aaec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aaf0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800aaf4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aafc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab00:	ee17 2a90 	vmov	r2, s15
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	605a      	str	r2, [r3, #4]
 800ab08:	e002      	b.n	800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800ab10:	4b13      	ldr	r3, [pc, #76]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d017      	beq.n	800ab4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab1c:	4b10      	ldr	r3, [pc, #64]	; (800ab60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab20:	0e1b      	lsrs	r3, r3, #24
 800ab22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab26:	ee07 3a90 	vmov	s15, r3
 800ab2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800ab2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab32:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab36:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab42:	ee17 2a90 	vmov	r2, s15
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ab4a:	e002      	b.n	800ab52 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	609a      	str	r2, [r3, #8]
}
 800ab52:	bf00      	nop
 800ab54:	3724      	adds	r7, #36	; 0x24
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	46020c00 	.word	0x46020c00
 800ab64:	4b742400 	.word	0x4b742400
 800ab68:	46000000 	.word	0x46000000
 800ab6c:	0800e244 	.word	0x0800e244

0800ab70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b089      	sub	sp, #36	; 0x24
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800ab78:	4ba6      	ldr	r3, [pc, #664]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ab7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab80:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800ab82:	4ba4      	ldr	r3, [pc, #656]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ab84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab86:	f003 0303 	and.w	r3, r3, #3
 800ab8a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800ab8c:	4ba1      	ldr	r3, [pc, #644]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ab8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab90:	0a1b      	lsrs	r3, r3, #8
 800ab92:	f003 030f 	and.w	r3, r3, #15
 800ab96:	3301      	adds	r3, #1
 800ab98:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800ab9a:	4b9e      	ldr	r3, [pc, #632]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ab9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab9e:	091b      	lsrs	r3, r3, #4
 800aba0:	f003 0301 	and.w	r3, r3, #1
 800aba4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800aba6:	4b9b      	ldr	r3, [pc, #620]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abaa:	08db      	lsrs	r3, r3, #3
 800abac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	fb02 f303 	mul.w	r3, r2, r3
 800abb6:	ee07 3a90 	vmov	s15, r3
 800abba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abbe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	2b03      	cmp	r3, #3
 800abc6:	d062      	beq.n	800ac8e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2b03      	cmp	r3, #3
 800abcc:	f200 8081 	bhi.w	800acd2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d024      	beq.n	800ac20 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	2b02      	cmp	r3, #2
 800abda:	d17a      	bne.n	800acd2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	ee07 3a90 	vmov	s15, r3
 800abe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe6:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800ae18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800abea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abee:	4b89      	ldr	r3, [pc, #548]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800abf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abf6:	ee07 3a90 	vmov	s15, r3
 800abfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800abfe:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac02:	eddf 5a86 	vldr	s11, [pc, #536]	; 800ae1c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ac06:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ac0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac12:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ac16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac1a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800ac1e:	e08f      	b.n	800ad40 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ac20:	4b7c      	ldr	r3, [pc, #496]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d005      	beq.n	800ac38 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800ac2c:	4b79      	ldr	r3, [pc, #484]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	0f1b      	lsrs	r3, r3, #28
 800ac32:	f003 030f 	and.w	r3, r3, #15
 800ac36:	e006      	b.n	800ac46 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800ac38:	4b76      	ldr	r3, [pc, #472]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac3e:	041b      	lsls	r3, r3, #16
 800ac40:	0f1b      	lsrs	r3, r3, #28
 800ac42:	f003 030f 	and.w	r3, r3, #15
 800ac46:	4a76      	ldr	r2, [pc, #472]	; (800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800ac48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac4c:	ee07 3a90 	vmov	s15, r3
 800ac50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	ee07 3a90 	vmov	s15, r3
 800ac5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	ee07 3a90 	vmov	s15, r3
 800ac68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac6c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac70:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800ae1c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ac74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac80:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ac84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac8c:	e058      	b.n	800ad40 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	ee07 3a90 	vmov	s15, r3
 800ac94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac98:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ae18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800ac9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aca0:	4b5c      	ldr	r3, [pc, #368]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aca8:	ee07 3a90 	vmov	s15, r3
 800acac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800acb0:	ed97 6a02 	vldr	s12, [r7, #8]
 800acb4:	eddf 5a59 	vldr	s11, [pc, #356]	; 800ae1c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800acb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800acbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800acc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800acc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800accc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acd0:	e036      	b.n	800ad40 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800acd2:	4b50      	ldr	r3, [pc, #320]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d005      	beq.n	800acea <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800acde:	4b4d      	ldr	r3, [pc, #308]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	0f1b      	lsrs	r3, r3, #28
 800ace4:	f003 030f 	and.w	r3, r3, #15
 800ace8:	e006      	b.n	800acf8 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800acea:	4b4a      	ldr	r3, [pc, #296]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800acec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800acf0:	041b      	lsls	r3, r3, #16
 800acf2:	0f1b      	lsrs	r3, r3, #28
 800acf4:	f003 030f 	and.w	r3, r3, #15
 800acf8:	4a49      	ldr	r2, [pc, #292]	; (800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800acfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	ee07 3a90 	vmov	s15, r3
 800ad0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	ee07 3a90 	vmov	s15, r3
 800ad1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad1e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad22:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800ae1c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ad26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad32:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ad36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad3e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800ad40:	4b34      	ldr	r3, [pc, #208]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d017      	beq.n	800ad7c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ad4c:	4b31      	ldr	r3, [pc, #196]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad50:	0a5b      	lsrs	r3, r3, #9
 800ad52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad56:	ee07 3a90 	vmov	s15, r3
 800ad5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800ad5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad62:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ad66:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad72:	ee17 2a90 	vmov	r2, s15
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	e002      	b.n	800ad82 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800ad82:	4b24      	ldr	r3, [pc, #144]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d017      	beq.n	800adbe <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ad8e:	4b21      	ldr	r3, [pc, #132]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad92:	0c1b      	lsrs	r3, r3, #16
 800ad94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad98:	ee07 3a90 	vmov	s15, r3
 800ad9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800ada0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ada4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ada8:	edd7 6a07 	vldr	s13, [r7, #28]
 800adac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adb4:	ee17 2a90 	vmov	r2, s15
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	605a      	str	r2, [r3, #4]
 800adbc:	e002      	b.n	800adc4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800adc4:	4b13      	ldr	r3, [pc, #76]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800adc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d017      	beq.n	800ae00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800add0:	4b10      	ldr	r3, [pc, #64]	; (800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800add2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800add4:	0e1b      	lsrs	r3, r3, #24
 800add6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adda:	ee07 3a90 	vmov	s15, r3
 800adde:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800ade2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ade6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800adea:	edd7 6a07 	vldr	s13, [r7, #28]
 800adee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adf6:	ee17 2a90 	vmov	r2, s15
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800adfe:	e002      	b.n	800ae06 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	609a      	str	r2, [r3, #8]
}
 800ae06:	bf00      	nop
 800ae08:	3724      	adds	r7, #36	; 0x24
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	46020c00 	.word	0x46020c00
 800ae18:	4b742400 	.word	0x4b742400
 800ae1c:	46000000 	.word	0x46000000
 800ae20:	0800e244 	.word	0x0800e244

0800ae24 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b08e      	sub	sp, #56	; 0x38
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800ae2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae32:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800ae36:	430b      	orrs	r3, r1
 800ae38:	d145      	bne.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800ae3a:	4ba7      	ldr	r3, [pc, #668]	; (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ae3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae44:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800ae46:	4ba4      	ldr	r3, [pc, #656]	; (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ae48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae4c:	f003 0302 	and.w	r3, r3, #2
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d108      	bne.n	800ae66 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800ae54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae5a:	d104      	bne.n	800ae66 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800ae5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae60:	637b      	str	r3, [r7, #52]	; 0x34
 800ae62:	f001 bb5a 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800ae66:	4b9c      	ldr	r3, [pc, #624]	; (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ae68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae74:	d114      	bne.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800ae76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae7c:	d110      	bne.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ae7e:	4b96      	ldr	r3, [pc, #600]	; (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ae80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae8c:	d103      	bne.n	800ae96 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800ae8e:	23fa      	movs	r3, #250	; 0xfa
 800ae90:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ae92:	f001 bb42 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800ae96:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ae9a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ae9c:	f001 bb3d 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800aea0:	4b8d      	ldr	r3, [pc, #564]	; (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aeac:	d107      	bne.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800aeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aeb4:	d103      	bne.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800aeb6:	4b89      	ldr	r3, [pc, #548]	; (800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800aeb8:	637b      	str	r3, [r7, #52]	; 0x34
 800aeba:	f001 bb2e 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800aebe:	2300      	movs	r3, #0
 800aec0:	637b      	str	r3, [r7, #52]	; 0x34
 800aec2:	f001 bb2a 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800aec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeca:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800aece:	430b      	orrs	r3, r1
 800aed0:	d151      	bne.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800aed2:	4b81      	ldr	r3, [pc, #516]	; (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aed4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800aed8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800aedc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800aede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee0:	2b80      	cmp	r3, #128	; 0x80
 800aee2:	d035      	beq.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800aee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee6:	2b80      	cmp	r3, #128	; 0x80
 800aee8:	d841      	bhi.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800aeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeec:	2b60      	cmp	r3, #96	; 0x60
 800aeee:	d02a      	beq.n	800af46 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800aef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef2:	2b60      	cmp	r3, #96	; 0x60
 800aef4:	d83b      	bhi.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800aef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef8:	2b40      	cmp	r3, #64	; 0x40
 800aefa:	d009      	beq.n	800af10 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800aefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefe:	2b40      	cmp	r3, #64	; 0x40
 800af00:	d835      	bhi.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800af02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00c      	beq.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800af08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0a:	2b20      	cmp	r3, #32
 800af0c:	d012      	beq.n	800af34 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800af0e:	e02e      	b.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af14:	4618      	mov	r0, r3
 800af16:	f7ff fb77 	bl	800a608 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af1e:	f001 bafc 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af22:	f107 0318 	add.w	r3, r7, #24
 800af26:	4618      	mov	r0, r3
 800af28:	f7ff fcc8 	bl	800a8bc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af30:	f001 baf3 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af34:	f107 030c 	add.w	r3, r7, #12
 800af38:	4618      	mov	r0, r3
 800af3a:	f7ff fe19 	bl	800ab70 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af42:	f001 baea 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800af46:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800af4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af4c:	f001 bae5 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af50:	4b61      	ldr	r3, [pc, #388]	; (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af5c:	d103      	bne.n	800af66 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800af5e:	4b60      	ldr	r3, [pc, #384]	; (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800af60:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800af62:	f001 bada 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800af66:	2300      	movs	r3, #0
 800af68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af6a:	f001 bad6 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800af6e:	2300      	movs	r3, #0
 800af70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af72:	f001 bad2 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800af76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af7a:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800af7e:	430b      	orrs	r3, r1
 800af80:	d158      	bne.n	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800af82:	4b55      	ldr	r3, [pc, #340]	; (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800af88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af8c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800af8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af94:	d03b      	beq.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800af96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af9c:	d846      	bhi.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800af9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afa4:	d02e      	beq.n	800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800afa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afac:	d83e      	bhi.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800afae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afb4:	d00b      	beq.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afbc:	d836      	bhi.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800afbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d00d      	beq.n	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800afc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afca:	d012      	beq.n	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800afcc:	e02e      	b.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7ff fb18 	bl	800a608 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800afd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afdc:	f001 ba9d 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afe0:	f107 0318 	add.w	r3, r7, #24
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7ff fc69 	bl	800a8bc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afee:	f001 ba94 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aff2:	f107 030c 	add.w	r3, r7, #12
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7ff fdba 	bl	800ab70 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b000:	f001 ba8b 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b004:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b008:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b00a:	f001 ba86 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b00e:	4b32      	ldr	r3, [pc, #200]	; (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b01a:	d103      	bne.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800b01c:	4b30      	ldr	r3, [pc, #192]	; (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b01e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b020:	f001 ba7b 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b024:	2300      	movs	r3, #0
 800b026:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b028:	f001 ba77 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800b02c:	2300      	movs	r3, #0
 800b02e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b030:	f001 ba73 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800b034:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b038:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b03c:	430b      	orrs	r3, r1
 800b03e:	d126      	bne.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800b040:	4b25      	ldr	r3, [pc, #148]	; (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b042:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b04a:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800b04c:	4b22      	ldr	r3, [pc, #136]	; (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b058:	d106      	bne.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800b05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d103      	bne.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800b060:	4b1f      	ldr	r3, [pc, #124]	; (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b062:	637b      	str	r3, [r7, #52]	; 0x34
 800b064:	f001 ba59 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800b068:	4b1b      	ldr	r3, [pc, #108]	; (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b074:	d107      	bne.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800b076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b07c:	d103      	bne.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800b07e:	4b19      	ldr	r3, [pc, #100]	; (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b080:	637b      	str	r3, [r7, #52]	; 0x34
 800b082:	f001 ba4a 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800b086:	2300      	movs	r3, #0
 800b088:	637b      	str	r3, [r7, #52]	; 0x34
 800b08a:	f001 ba46 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800b08e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b092:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800b096:	430b      	orrs	r3, r1
 800b098:	d16e      	bne.n	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b09a:	4b0f      	ldr	r3, [pc, #60]	; (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b09c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b0a0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b0a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b0ac:	d03d      	beq.n	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b0b4:	d85c      	bhi.n	800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0bc:	d014      	beq.n	800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800b0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0c4:	d854      	bhi.n	800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d01f      	beq.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800b0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0d2:	d012      	beq.n	800b0fa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800b0d4:	e04c      	b.n	800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b0d6:	bf00      	nop
 800b0d8:	46020c00 	.word	0x46020c00
 800b0dc:	0007a120 	.word	0x0007a120
 800b0e0:	00f42400 	.word	0x00f42400
 800b0e4:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7ff fa8b 	bl	800a608 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0f6:	f001 ba10 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0fa:	f107 0318 	add.w	r3, r7, #24
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7ff fbdc 	bl	800a8bc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b108:	f001 ba07 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b10c:	4ba7      	ldr	r3, [pc, #668]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b118:	d103      	bne.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800b11a:	4ba5      	ldr	r3, [pc, #660]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b11c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b11e:	f001 b9fc 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b122:	2300      	movs	r3, #0
 800b124:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b126:	f001 b9f8 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b12a:	4ba0      	ldr	r3, [pc, #640]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 0320 	and.w	r3, r3, #32
 800b132:	2b20      	cmp	r3, #32
 800b134:	d118      	bne.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b136:	4b9d      	ldr	r3, [pc, #628]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d005      	beq.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b142:	4b9a      	ldr	r3, [pc, #616]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	0e1b      	lsrs	r3, r3, #24
 800b148:	f003 030f 	and.w	r3, r3, #15
 800b14c:	e006      	b.n	800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b14e:	4b97      	ldr	r3, [pc, #604]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b150:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b154:	041b      	lsls	r3, r3, #16
 800b156:	0e1b      	lsrs	r3, r3, #24
 800b158:	f003 030f 	and.w	r3, r3, #15
 800b15c:	4a95      	ldr	r2, [pc, #596]	; (800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b15e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b162:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b164:	f001 b9d9 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b168:	2300      	movs	r3, #0
 800b16a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b16c:	f001 b9d5 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800b170:	2300      	movs	r3, #0
 800b172:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b174:	f001 b9d1 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b17c:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800b180:	430b      	orrs	r3, r1
 800b182:	d17f      	bne.n	800b284 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b184:	4b89      	ldr	r3, [pc, #548]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b186:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b18a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b18e:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800b190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b192:	2b00      	cmp	r3, #0
 800b194:	d165      	bne.n	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b196:	4b85      	ldr	r3, [pc, #532]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b19c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b1a0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b1a8:	d034      	beq.n	800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b1b0:	d853      	bhi.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1b8:	d00b      	beq.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800b1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1c0:	d84b      	bhi.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800b1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d016      	beq.n	800b1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800b1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1ce:	d009      	beq.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b1d0:	e043      	b.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7ff fa16 	bl	800a608 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1de:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b1e0:	f001 b99b 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1e4:	f107 0318 	add.w	r3, r7, #24
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7ff fb67 	bl	800a8bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b1f2:	f001 b992 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b1f6:	4b6d      	ldr	r3, [pc, #436]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b1fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b202:	d103      	bne.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800b204:	4b6a      	ldr	r3, [pc, #424]	; (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b206:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b208:	f001 b987 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800b20c:	2300      	movs	r3, #0
 800b20e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b210:	f001 b983 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b214:	4b65      	ldr	r3, [pc, #404]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f003 0320 	and.w	r3, r3, #32
 800b21c:	2b20      	cmp	r3, #32
 800b21e:	d118      	bne.n	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b220:	4b62      	ldr	r3, [pc, #392]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d005      	beq.n	800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800b22c:	4b5f      	ldr	r3, [pc, #380]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	0e1b      	lsrs	r3, r3, #24
 800b232:	f003 030f 	and.w	r3, r3, #15
 800b236:	e006      	b.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b238:	4b5c      	ldr	r3, [pc, #368]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b23a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b23e:	041b      	lsls	r3, r3, #16
 800b240:	0e1b      	lsrs	r3, r3, #24
 800b242:	f003 030f 	and.w	r3, r3, #15
 800b246:	4a5b      	ldr	r2, [pc, #364]	; (800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b24c:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b24e:	f001 b964 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800b252:	2300      	movs	r3, #0
 800b254:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b256:	f001 b960 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800b25a:	2300      	movs	r3, #0
 800b25c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b25e:	f001 b95c 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800b262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b268:	d108      	bne.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b26a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b26e:	4618      	mov	r0, r3
 800b270:	f7ff f9ca 	bl	800a608 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b276:	637b      	str	r3, [r7, #52]	; 0x34
 800b278:	f001 b94f 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800b27c:	2300      	movs	r3, #0
 800b27e:	637b      	str	r3, [r7, #52]	; 0x34
 800b280:	f001 b94b 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800b284:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b288:	1e51      	subs	r1, r2, #1
 800b28a:	430b      	orrs	r3, r1
 800b28c:	d136      	bne.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b28e:	4b47      	ldr	r3, [pc, #284]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b294:	f003 0303 	and.w	r3, r3, #3
 800b298:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d104      	bne.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800b2a0:	f7fe f968 	bl	8009574 <HAL_RCC_GetPCLK2Freq>
 800b2a4:	6378      	str	r0, [r7, #52]	; 0x34
 800b2a6:	f001 b938 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800b2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d104      	bne.n	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b2b0:	f7fe f830 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800b2b4:	6378      	str	r0, [r7, #52]	; 0x34
 800b2b6:	f001 b930 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b2ba:	4b3c      	ldr	r3, [pc, #240]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2c6:	d106      	bne.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800b2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	d103      	bne.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800b2ce:	4b3a      	ldr	r3, [pc, #232]	; (800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b2d0:	637b      	str	r3, [r7, #52]	; 0x34
 800b2d2:	f001 b922 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b2d6:	4b35      	ldr	r3, [pc, #212]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b2dc:	f003 0302 	and.w	r3, r3, #2
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d107      	bne.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e6:	2b03      	cmp	r3, #3
 800b2e8:	d104      	bne.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800b2ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2ee:	637b      	str	r3, [r7, #52]	; 0x34
 800b2f0:	f001 b913 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	637b      	str	r3, [r7, #52]	; 0x34
 800b2f8:	f001 b90f 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800b2fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b300:	1e91      	subs	r1, r2, #2
 800b302:	430b      	orrs	r3, r1
 800b304:	d136      	bne.n	800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b306:	4b29      	ldr	r3, [pc, #164]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b30c:	f003 030c 	and.w	r3, r3, #12
 800b310:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b314:	2b00      	cmp	r3, #0
 800b316:	d104      	bne.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b318:	f7fe f918 	bl	800954c <HAL_RCC_GetPCLK1Freq>
 800b31c:	6378      	str	r0, [r7, #52]	; 0x34
 800b31e:	f001 b8fc 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800b322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b324:	2b04      	cmp	r3, #4
 800b326:	d104      	bne.n	800b332 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b328:	f7fd fff4 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800b32c:	6378      	str	r0, [r7, #52]	; 0x34
 800b32e:	f001 b8f4 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b332:	4b1e      	ldr	r3, [pc, #120]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b33a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b33e:	d106      	bne.n	800b34e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b342:	2b08      	cmp	r3, #8
 800b344:	d103      	bne.n	800b34e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800b346:	4b1c      	ldr	r3, [pc, #112]	; (800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b348:	637b      	str	r3, [r7, #52]	; 0x34
 800b34a:	f001 b8e6 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b34e:	4b17      	ldr	r3, [pc, #92]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b350:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b354:	f003 0302 	and.w	r3, r3, #2
 800b358:	2b02      	cmp	r3, #2
 800b35a:	d107      	bne.n	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800b35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35e:	2b0c      	cmp	r3, #12
 800b360:	d104      	bne.n	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800b362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b366:	637b      	str	r3, [r7, #52]	; 0x34
 800b368:	f001 b8d7 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800b36c:	2300      	movs	r3, #0
 800b36e:	637b      	str	r3, [r7, #52]	; 0x34
 800b370:	f001 b8d3 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800b374:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b378:	1f11      	subs	r1, r2, #4
 800b37a:	430b      	orrs	r3, r1
 800b37c:	d13f      	bne.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b37e:	4b0b      	ldr	r3, [pc, #44]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b384:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b388:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d104      	bne.n	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b390:	f7fe f8dc 	bl	800954c <HAL_RCC_GetPCLK1Freq>
 800b394:	6378      	str	r0, [r7, #52]	; 0x34
 800b396:	f001 b8c0 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800b39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39c:	2b10      	cmp	r3, #16
 800b39e:	d10d      	bne.n	800b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b3a0:	f7fd ffb8 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800b3a4:	6378      	str	r0, [r7, #52]	; 0x34
 800b3a6:	f001 b8b8 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b3aa:	bf00      	nop
 800b3ac:	46020c00 	.word	0x46020c00
 800b3b0:	02dc6c00 	.word	0x02dc6c00
 800b3b4:	0800e244 	.word	0x0800e244
 800b3b8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b3bc:	4ba8      	ldr	r3, [pc, #672]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3c8:	d106      	bne.n	800b3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3cc:	2b20      	cmp	r3, #32
 800b3ce:	d103      	bne.n	800b3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800b3d0:	4ba4      	ldr	r3, [pc, #656]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b3d2:	637b      	str	r3, [r7, #52]	; 0x34
 800b3d4:	f001 b8a1 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b3d8:	4ba1      	ldr	r3, [pc, #644]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b3da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b3de:	f003 0302 	and.w	r3, r3, #2
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	d107      	bne.n	800b3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e8:	2b30      	cmp	r3, #48	; 0x30
 800b3ea:	d104      	bne.n	800b3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800b3ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3f0:	637b      	str	r3, [r7, #52]	; 0x34
 800b3f2:	f001 b892 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	637b      	str	r3, [r7, #52]	; 0x34
 800b3fa:	f001 b88e 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800b3fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b402:	f1a2 0108 	sub.w	r1, r2, #8
 800b406:	430b      	orrs	r3, r1
 800b408:	d136      	bne.n	800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b40a:	4b95      	ldr	r3, [pc, #596]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b40c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b410:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b414:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d104      	bne.n	800b426 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b41c:	f7fe f896 	bl	800954c <HAL_RCC_GetPCLK1Freq>
 800b420:	6378      	str	r0, [r7, #52]	; 0x34
 800b422:	f001 b87a 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800b426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b428:	2b40      	cmp	r3, #64	; 0x40
 800b42a:	d104      	bne.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b42c:	f7fd ff72 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800b430:	6378      	str	r0, [r7, #52]	; 0x34
 800b432:	f001 b872 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b436:	4b8a      	ldr	r3, [pc, #552]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b43e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b442:	d106      	bne.n	800b452 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800b444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b446:	2b80      	cmp	r3, #128	; 0x80
 800b448:	d103      	bne.n	800b452 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800b44a:	4b86      	ldr	r3, [pc, #536]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b44c:	637b      	str	r3, [r7, #52]	; 0x34
 800b44e:	f001 b864 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b452:	4b83      	ldr	r3, [pc, #524]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b458:	f003 0302 	and.w	r3, r3, #2
 800b45c:	2b02      	cmp	r3, #2
 800b45e:	d107      	bne.n	800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800b460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b462:	2bc0      	cmp	r3, #192	; 0xc0
 800b464:	d104      	bne.n	800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800b466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b46a:	637b      	str	r3, [r7, #52]	; 0x34
 800b46c:	f001 b855 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800b470:	2300      	movs	r3, #0
 800b472:	637b      	str	r3, [r7, #52]	; 0x34
 800b474:	f001 b851 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800b478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b47c:	f1a2 0110 	sub.w	r1, r2, #16
 800b480:	430b      	orrs	r3, r1
 800b482:	d139      	bne.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b484:	4b76      	ldr	r3, [pc, #472]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b48a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b48e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b492:	2b00      	cmp	r3, #0
 800b494:	d104      	bne.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b496:	f7fe f859 	bl	800954c <HAL_RCC_GetPCLK1Freq>
 800b49a:	6378      	str	r0, [r7, #52]	; 0x34
 800b49c:	f001 b83d 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4a6:	d104      	bne.n	800b4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b4a8:	f7fd ff34 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800b4ac:	6378      	str	r0, [r7, #52]	; 0x34
 800b4ae:	f001 b834 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800b4b2:	4b6b      	ldr	r3, [pc, #428]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4be:	d107      	bne.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800b4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4c6:	d103      	bne.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800b4c8:	4b66      	ldr	r3, [pc, #408]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b4ca:	637b      	str	r3, [r7, #52]	; 0x34
 800b4cc:	f001 b825 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800b4d0:	4b63      	ldr	r3, [pc, #396]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b4d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b4d6:	f003 0302 	and.w	r3, r3, #2
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	d108      	bne.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800b4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4e4:	d104      	bne.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800b4e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4ea:	637b      	str	r3, [r7, #52]	; 0x34
 800b4ec:	f001 b815 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	637b      	str	r3, [r7, #52]	; 0x34
 800b4f4:	f001 b811 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800b4f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4fc:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800b500:	430b      	orrs	r3, r1
 800b502:	d139      	bne.n	800b578 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800b504:	4b56      	ldr	r3, [pc, #344]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b506:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b50a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b50e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800b510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b512:	2b00      	cmp	r3, #0
 800b514:	d104      	bne.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b516:	f7fe f819 	bl	800954c <HAL_RCC_GetPCLK1Freq>
 800b51a:	6378      	str	r0, [r7, #52]	; 0x34
 800b51c:	f000 bffd 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800b520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b526:	d104      	bne.n	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b528:	f7fd fef4 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800b52c:	6378      	str	r0, [r7, #52]	; 0x34
 800b52e:	f000 bff4 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800b532:	4b4b      	ldr	r3, [pc, #300]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b53a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b53e:	d107      	bne.n	800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800b540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b542:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b546:	d103      	bne.n	800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800b548:	4b46      	ldr	r3, [pc, #280]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b54a:	637b      	str	r3, [r7, #52]	; 0x34
 800b54c:	f000 bfe5 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800b550:	4b43      	ldr	r3, [pc, #268]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b552:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b556:	f003 0302 	and.w	r3, r3, #2
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	d108      	bne.n	800b570 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800b55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b560:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b564:	d104      	bne.n	800b570 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800b566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b56a:	637b      	str	r3, [r7, #52]	; 0x34
 800b56c:	f000 bfd5 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b570:	2300      	movs	r3, #0
 800b572:	637b      	str	r3, [r7, #52]	; 0x34
 800b574:	f000 bfd1 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800b578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b57c:	f1a2 0120 	sub.w	r1, r2, #32
 800b580:	430b      	orrs	r3, r1
 800b582:	d158      	bne.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b584:	4b36      	ldr	r3, [pc, #216]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b586:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b58a:	f003 0307 	and.w	r3, r3, #7
 800b58e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800b590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b592:	2b00      	cmp	r3, #0
 800b594:	d104      	bne.n	800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800b596:	f7fe f801 	bl	800959c <HAL_RCC_GetPCLK3Freq>
 800b59a:	6378      	str	r0, [r7, #52]	; 0x34
 800b59c:	f000 bfbd 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d104      	bne.n	800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b5a6:	f7fd feb5 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800b5aa:	6378      	str	r0, [r7, #52]	; 0x34
 800b5ac:	f000 bfb5 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800b5b0:	4b2b      	ldr	r3, [pc, #172]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5bc:	d106      	bne.n	800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800b5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	d103      	bne.n	800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800b5c4:	4b27      	ldr	r3, [pc, #156]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b5c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b5c8:	f000 bfa7 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800b5cc:	4b24      	ldr	r3, [pc, #144]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b5d2:	f003 0302 	and.w	r3, r3, #2
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d107      	bne.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800b5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5dc:	2b03      	cmp	r3, #3
 800b5de:	d104      	bne.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800b5e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b5e6:	f000 bf98 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800b5ea:	4b1d      	ldr	r3, [pc, #116]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f003 0320 	and.w	r3, r3, #32
 800b5f2:	2b20      	cmp	r3, #32
 800b5f4:	d11b      	bne.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800b5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f8:	2b04      	cmp	r3, #4
 800b5fa:	d118      	bne.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b5fc:	4b18      	ldr	r3, [pc, #96]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b604:	2b00      	cmp	r3, #0
 800b606:	d005      	beq.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800b608:	4b15      	ldr	r3, [pc, #84]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	0e1b      	lsrs	r3, r3, #24
 800b60e:	f003 030f 	and.w	r3, r3, #15
 800b612:	e006      	b.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800b614:	4b12      	ldr	r3, [pc, #72]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b616:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b61a:	041b      	lsls	r3, r3, #16
 800b61c:	0e1b      	lsrs	r3, r3, #24
 800b61e:	f003 030f 	and.w	r3, r3, #15
 800b622:	4a11      	ldr	r2, [pc, #68]	; (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b628:	637b      	str	r3, [r7, #52]	; 0x34
 800b62a:	f000 bf76 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800b62e:	2300      	movs	r3, #0
 800b630:	637b      	str	r3, [r7, #52]	; 0x34
 800b632:	f000 bf72 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800b636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b63a:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b63e:	430b      	orrs	r3, r1
 800b640:	d172      	bne.n	800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800b642:	4b07      	ldr	r3, [pc, #28]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b648:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b64c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800b64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b654:	d10a      	bne.n	800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b656:	f7fd fe5d 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800b65a:	6378      	str	r0, [r7, #52]	; 0x34
 800b65c:	f000 bf5d 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b660:	46020c00 	.word	0x46020c00
 800b664:	00f42400 	.word	0x00f42400
 800b668:	0800e244 	.word	0x0800e244
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800b66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b672:	d108      	bne.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b674:	f107 0318 	add.w	r3, r7, #24
 800b678:	4618      	mov	r0, r3
 800b67a:	f7ff f91f 	bl	800a8bc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800b67e:	6a3b      	ldr	r3, [r7, #32]
 800b680:	637b      	str	r3, [r7, #52]	; 0x34
 800b682:	f000 bf4a 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800b686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d104      	bne.n	800b696 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800b68c:	f7fd ff44 	bl	8009518 <HAL_RCC_GetHCLKFreq>
 800b690:	6378      	str	r0, [r7, #52]	; 0x34
 800b692:	f000 bf42 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800b696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b698:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b69c:	d122      	bne.n	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b69e:	4bb0      	ldr	r3, [pc, #704]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f003 0320 	and.w	r3, r3, #32
 800b6a6:	2b20      	cmp	r3, #32
 800b6a8:	d118      	bne.n	800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b6aa:	4bad      	ldr	r3, [pc, #692]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d005      	beq.n	800b6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800b6b6:	4baa      	ldr	r3, [pc, #680]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	0e1b      	lsrs	r3, r3, #24
 800b6bc:	f003 030f 	and.w	r3, r3, #15
 800b6c0:	e006      	b.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800b6c2:	4ba7      	ldr	r3, [pc, #668]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b6c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b6c8:	041b      	lsls	r3, r3, #16
 800b6ca:	0e1b      	lsrs	r3, r3, #24
 800b6cc:	f003 030f 	and.w	r3, r3, #15
 800b6d0:	4aa4      	ldr	r2, [pc, #656]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b6d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6d6:	637b      	str	r3, [r7, #52]	; 0x34
 800b6d8:	f000 bf1f 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	637b      	str	r3, [r7, #52]	; 0x34
 800b6e0:	f000 bf1b 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800b6e4:	4b9e      	ldr	r3, [pc, #632]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6f0:	d107      	bne.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b6f8:	d103      	bne.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800b6fa:	4b9b      	ldr	r3, [pc, #620]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b6fc:	637b      	str	r3, [r7, #52]	; 0x34
 800b6fe:	f000 bf0c 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800b702:	4b97      	ldr	r3, [pc, #604]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b70a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b70e:	d107      	bne.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800b710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b712:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b716:	d103      	bne.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800b718:	4b93      	ldr	r3, [pc, #588]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b71a:	637b      	str	r3, [r7, #52]	; 0x34
 800b71c:	f000 befd 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800b720:	2300      	movs	r3, #0
 800b722:	637b      	str	r3, [r7, #52]	; 0x34
 800b724:	f000 bef9 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800b728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b72c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b730:	430b      	orrs	r3, r1
 800b732:	d158      	bne.n	800b7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800b734:	4b8a      	ldr	r3, [pc, #552]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b736:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b73a:	f003 0307 	and.w	r3, r3, #7
 800b73e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b742:	2b04      	cmp	r3, #4
 800b744:	d84b      	bhi.n	800b7de <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800b746:	a201      	add	r2, pc, #4	; (adr r2, 800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800b748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b74c:	0800b785 	.word	0x0800b785
 800b750:	0800b761 	.word	0x0800b761
 800b754:	0800b773 	.word	0x0800b773
 800b758:	0800b78f 	.word	0x0800b78f
 800b75c:	0800b799 	.word	0x0800b799
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b764:	4618      	mov	r0, r3
 800b766:	f7fe ff4f 	bl	800a608 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b76e:	f000 bed4 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b772:	f107 030c 	add.w	r3, r7, #12
 800b776:	4618      	mov	r0, r3
 800b778:	f7ff f9fa 	bl	800ab70 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b780:	f000 becb 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b784:	f7fd fec8 	bl	8009518 <HAL_RCC_GetHCLKFreq>
 800b788:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b78a:	f000 bec6 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b78e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b792:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b794:	f000 bec1 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b798:	4b71      	ldr	r3, [pc, #452]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f003 0320 	and.w	r3, r3, #32
 800b7a0:	2b20      	cmp	r3, #32
 800b7a2:	d118      	bne.n	800b7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b7a4:	4b6e      	ldr	r3, [pc, #440]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d005      	beq.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800b7b0:	4b6b      	ldr	r3, [pc, #428]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	0e1b      	lsrs	r3, r3, #24
 800b7b6:	f003 030f 	and.w	r3, r3, #15
 800b7ba:	e006      	b.n	800b7ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800b7bc:	4b68      	ldr	r3, [pc, #416]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b7be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b7c2:	041b      	lsls	r3, r3, #16
 800b7c4:	0e1b      	lsrs	r3, r3, #24
 800b7c6:	f003 030f 	and.w	r3, r3, #15
 800b7ca:	4a66      	ldr	r2, [pc, #408]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b7cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7d0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b7d2:	f000 bea2 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b7da:	f000 be9e 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b7e2:	f000 be9a 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800b7e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7ea:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800b7ee:	430b      	orrs	r3, r1
 800b7f0:	d167      	bne.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800b7f2:	4b5b      	ldr	r3, [pc, #364]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b7f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b7f8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b7fc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b800:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b804:	d036      	beq.n	800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800b806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b808:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b80c:	d855      	bhi.n	800b8ba <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b810:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b814:	d029      	beq.n	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800b816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b818:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b81c:	d84d      	bhi.n	800b8ba <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b824:	d013      	beq.n	800b84e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800b826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b828:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b82c:	d845      	bhi.n	800b8ba <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b830:	2b00      	cmp	r3, #0
 800b832:	d015      	beq.n	800b860 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800b834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b83a:	d13e      	bne.n	800b8ba <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b83c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b840:	4618      	mov	r0, r3
 800b842:	f7fe fee1 	bl	800a608 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b848:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b84a:	f000 be66 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b84e:	f107 030c 	add.w	r3, r7, #12
 800b852:	4618      	mov	r0, r3
 800b854:	f7ff f98c 	bl	800ab70 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b85c:	f000 be5d 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b860:	f7fd fe5a 	bl	8009518 <HAL_RCC_GetHCLKFreq>
 800b864:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b866:	f000 be58 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b86a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b86e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b870:	f000 be53 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b874:	4b3a      	ldr	r3, [pc, #232]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 0320 	and.w	r3, r3, #32
 800b87c:	2b20      	cmp	r3, #32
 800b87e:	d118      	bne.n	800b8b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b880:	4b37      	ldr	r3, [pc, #220]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d005      	beq.n	800b898 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800b88c:	4b34      	ldr	r3, [pc, #208]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	0e1b      	lsrs	r3, r3, #24
 800b892:	f003 030f 	and.w	r3, r3, #15
 800b896:	e006      	b.n	800b8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b898:	4b31      	ldr	r3, [pc, #196]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b89a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b89e:	041b      	lsls	r3, r3, #16
 800b8a0:	0e1b      	lsrs	r3, r3, #24
 800b8a2:	f003 030f 	and.w	r3, r3, #15
 800b8a6:	4a2f      	ldr	r2, [pc, #188]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b8a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8ac:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b8ae:	f000 be34 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8b6:	f000 be30 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8be:	f000 be2c 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800b8c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8c6:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800b8ca:	430b      	orrs	r3, r1
 800b8cc:	d152      	bne.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b8ce:	4b24      	ldr	r3, [pc, #144]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b8d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b8d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b8d8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800b8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d104      	bne.n	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b8e0:	f7fd fe34 	bl	800954c <HAL_RCC_GetPCLK1Freq>
 800b8e4:	6378      	str	r0, [r7, #52]	; 0x34
 800b8e6:	f000 be18 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800b8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8f0:	d104      	bne.n	800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b8f2:	f7fd fd0f 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800b8f6:	6378      	str	r0, [r7, #52]	; 0x34
 800b8f8:	f000 be0f 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800b8fc:	4b18      	ldr	r3, [pc, #96]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b908:	d107      	bne.n	800b91a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800b90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b910:	d103      	bne.n	800b91a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800b912:	4b15      	ldr	r3, [pc, #84]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b914:	637b      	str	r3, [r7, #52]	; 0x34
 800b916:	f000 be00 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800b91a:	4b11      	ldr	r3, [pc, #68]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f003 0320 	and.w	r3, r3, #32
 800b922:	2b20      	cmp	r3, #32
 800b924:	d122      	bne.n	800b96c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800b926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b928:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b92c:	d11e      	bne.n	800b96c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b92e:	4b0c      	ldr	r3, [pc, #48]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b930:	689b      	ldr	r3, [r3, #8]
 800b932:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b936:	2b00      	cmp	r3, #0
 800b938:	d005      	beq.n	800b946 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800b93a:	4b09      	ldr	r3, [pc, #36]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	0e1b      	lsrs	r3, r3, #24
 800b940:	f003 030f 	and.w	r3, r3, #15
 800b944:	e006      	b.n	800b954 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800b946:	4b06      	ldr	r3, [pc, #24]	; (800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b94c:	041b      	lsls	r3, r3, #16
 800b94e:	0e1b      	lsrs	r3, r3, #24
 800b950:	f003 030f 	and.w	r3, r3, #15
 800b954:	4a03      	ldr	r2, [pc, #12]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b95a:	637b      	str	r3, [r7, #52]	; 0x34
 800b95c:	f000 bddd 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b960:	46020c00 	.word	0x46020c00
 800b964:	0800e244 	.word	0x0800e244
 800b968:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800b96c:	2300      	movs	r3, #0
 800b96e:	637b      	str	r3, [r7, #52]	; 0x34
 800b970:	f000 bdd3 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800b974:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b978:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800b97c:	430b      	orrs	r3, r1
 800b97e:	d14c      	bne.n	800ba1a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800b980:	4ba8      	ldr	r3, [pc, #672]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b986:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b98a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800b98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d104      	bne.n	800b99c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b992:	f7fd fddb 	bl	800954c <HAL_RCC_GetPCLK1Freq>
 800b996:	6378      	str	r0, [r7, #52]	; 0x34
 800b998:	f000 bdbf 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800b99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9a2:	d104      	bne.n	800b9ae <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b9a4:	f7fd fcb6 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800b9a8:	6378      	str	r0, [r7, #52]	; 0x34
 800b9aa:	f000 bdb6 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800b9ae:	4b9d      	ldr	r3, [pc, #628]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b9b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9ba:	d107      	bne.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800b9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9c2:	d103      	bne.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800b9c4:	4b98      	ldr	r3, [pc, #608]	; (800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b9c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b9c8:	f000 bda7 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800b9cc:	4b95      	ldr	r3, [pc, #596]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f003 0320 	and.w	r3, r3, #32
 800b9d4:	2b20      	cmp	r3, #32
 800b9d6:	d11c      	bne.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800b9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b9de:	d118      	bne.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b9e0:	4b90      	ldr	r3, [pc, #576]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d005      	beq.n	800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800b9ec:	4b8d      	ldr	r3, [pc, #564]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	0e1b      	lsrs	r3, r3, #24
 800b9f2:	f003 030f 	and.w	r3, r3, #15
 800b9f6:	e006      	b.n	800ba06 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800b9f8:	4b8a      	ldr	r3, [pc, #552]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b9fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b9fe:	041b      	lsls	r3, r3, #16
 800ba00:	0e1b      	lsrs	r3, r3, #24
 800ba02:	f003 030f 	and.w	r3, r3, #15
 800ba06:	4a89      	ldr	r2, [pc, #548]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800ba08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba0c:	637b      	str	r3, [r7, #52]	; 0x34
 800ba0e:	f000 bd84 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800ba12:	2300      	movs	r3, #0
 800ba14:	637b      	str	r3, [r7, #52]	; 0x34
 800ba16:	f000 bd80 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800ba1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba1e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ba22:	430b      	orrs	r3, r1
 800ba24:	d158      	bne.n	800bad8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800ba26:	4b7f      	ldr	r3, [pc, #508]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ba2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ba30:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ba32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba34:	2bc0      	cmp	r3, #192	; 0xc0
 800ba36:	d028      	beq.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800ba38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3a:	2bc0      	cmp	r3, #192	; 0xc0
 800ba3c:	d848      	bhi.n	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800ba3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba40:	2b80      	cmp	r3, #128	; 0x80
 800ba42:	d00e      	beq.n	800ba62 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800ba44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba46:	2b80      	cmp	r3, #128	; 0x80
 800ba48:	d842      	bhi.n	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d003      	beq.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800ba50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba52:	2b40      	cmp	r3, #64	; 0x40
 800ba54:	d014      	beq.n	800ba80 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800ba56:	e03b      	b.n	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800ba58:	f7fd fda0 	bl	800959c <HAL_RCC_GetPCLK3Freq>
 800ba5c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ba5e:	f000 bd5c 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ba62:	4b70      	ldr	r3, [pc, #448]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba6e:	d103      	bne.n	800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800ba70:	4b6d      	ldr	r3, [pc, #436]	; (800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ba72:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ba74:	f000 bd51 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba7c:	f000 bd4d 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800ba80:	f7fd fc48 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800ba84:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ba86:	f000 bd48 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ba8a:	4b66      	ldr	r3, [pc, #408]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f003 0320 	and.w	r3, r3, #32
 800ba92:	2b20      	cmp	r3, #32
 800ba94:	d118      	bne.n	800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ba96:	4b63      	ldr	r3, [pc, #396]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d005      	beq.n	800baae <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800baa2:	4b60      	ldr	r3, [pc, #384]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	0e1b      	lsrs	r3, r3, #24
 800baa8:	f003 030f 	and.w	r3, r3, #15
 800baac:	e006      	b.n	800babc <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800baae:	4b5d      	ldr	r3, [pc, #372]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bab0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bab4:	041b      	lsls	r3, r3, #16
 800bab6:	0e1b      	lsrs	r3, r3, #24
 800bab8:	f003 030f 	and.w	r3, r3, #15
 800babc:	4a5b      	ldr	r2, [pc, #364]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800babe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bac2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bac4:	f000 bd29 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bac8:	2300      	movs	r3, #0
 800baca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bacc:	f000 bd25 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800bad0:	2300      	movs	r3, #0
 800bad2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bad4:	f000 bd21 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800bad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800badc:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800bae0:	430b      	orrs	r3, r1
 800bae2:	d14c      	bne.n	800bb7e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800bae4:	4b4f      	ldr	r3, [pc, #316]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800baea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800baee:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800baf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d104      	bne.n	800bb00 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800baf6:	f7fd fd29 	bl	800954c <HAL_RCC_GetPCLK1Freq>
 800bafa:	6378      	str	r0, [r7, #52]	; 0x34
 800bafc:	f000 bd0d 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800bb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb06:	d104      	bne.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bb08:	f7fd fc04 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800bb0c:	6378      	str	r0, [r7, #52]	; 0x34
 800bb0e:	f000 bd04 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800bb12:	4b44      	ldr	r3, [pc, #272]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb1e:	d107      	bne.n	800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800bb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb26:	d103      	bne.n	800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800bb28:	4b3f      	ldr	r3, [pc, #252]	; (800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bb2a:	637b      	str	r3, [r7, #52]	; 0x34
 800bb2c:	f000 bcf5 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800bb30:	4b3c      	ldr	r3, [pc, #240]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f003 0320 	and.w	r3, r3, #32
 800bb38:	2b20      	cmp	r3, #32
 800bb3a:	d11c      	bne.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800bb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bb42:	d118      	bne.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bb44:	4b37      	ldr	r3, [pc, #220]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d005      	beq.n	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800bb50:	4b34      	ldr	r3, [pc, #208]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	0e1b      	lsrs	r3, r3, #24
 800bb56:	f003 030f 	and.w	r3, r3, #15
 800bb5a:	e006      	b.n	800bb6a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800bb5c:	4b31      	ldr	r3, [pc, #196]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bb62:	041b      	lsls	r3, r3, #16
 800bb64:	0e1b      	lsrs	r3, r3, #24
 800bb66:	f003 030f 	and.w	r3, r3, #15
 800bb6a:	4a30      	ldr	r2, [pc, #192]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bb6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb70:	637b      	str	r3, [r7, #52]	; 0x34
 800bb72:	f000 bcd2 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800bb76:	2300      	movs	r3, #0
 800bb78:	637b      	str	r3, [r7, #52]	; 0x34
 800bb7a:	f000 bcce 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800bb7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb82:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800bb86:	430b      	orrs	r3, r1
 800bb88:	d152      	bne.n	800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800bb8a:	4b26      	ldr	r3, [pc, #152]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bb90:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800bb94:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800bb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d104      	bne.n	800bba6 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bb9c:	f7fd fcd6 	bl	800954c <HAL_RCC_GetPCLK1Freq>
 800bba0:	6378      	str	r0, [r7, #52]	; 0x34
 800bba2:	f000 bcba 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800bba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bbac:	d104      	bne.n	800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bbae:	f7fd fbb1 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800bbb2:	6378      	str	r0, [r7, #52]	; 0x34
 800bbb4:	f000 bcb1 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800bbb8:	4b1a      	ldr	r3, [pc, #104]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbc4:	d107      	bne.n	800bbd6 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800bbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbcc:	d103      	bne.n	800bbd6 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800bbce:	4b16      	ldr	r3, [pc, #88]	; (800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bbd0:	637b      	str	r3, [r7, #52]	; 0x34
 800bbd2:	f000 bca2 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800bbd6:	4b13      	ldr	r3, [pc, #76]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f003 0320 	and.w	r3, r3, #32
 800bbde:	2b20      	cmp	r3, #32
 800bbe0:	d11c      	bne.n	800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800bbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bbe8:	d118      	bne.n	800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bbea:	4b0e      	ldr	r3, [pc, #56]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d005      	beq.n	800bc02 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800bbf6:	4b0b      	ldr	r3, [pc, #44]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	0e1b      	lsrs	r3, r3, #24
 800bbfc:	f003 030f 	and.w	r3, r3, #15
 800bc00:	e006      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800bc02:	4b08      	ldr	r3, [pc, #32]	; (800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bc08:	041b      	lsls	r3, r3, #16
 800bc0a:	0e1b      	lsrs	r3, r3, #24
 800bc0c:	f003 030f 	and.w	r3, r3, #15
 800bc10:	4a06      	ldr	r2, [pc, #24]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bc12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc16:	637b      	str	r3, [r7, #52]	; 0x34
 800bc18:	f000 bc7f 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	637b      	str	r3, [r7, #52]	; 0x34
 800bc20:	f000 bc7b 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bc24:	46020c00 	.word	0x46020c00
 800bc28:	00f42400 	.word	0x00f42400
 800bc2c:	0800e244 	.word	0x0800e244
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800bc30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc34:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800bc38:	430b      	orrs	r3, r1
 800bc3a:	d14c      	bne.n	800bcd6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800bc3c:	4ba6      	ldr	r3, [pc, #664]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bc3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bc42:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800bc46:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800bc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d104      	bne.n	800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bc4e:	f7fd fc7d 	bl	800954c <HAL_RCC_GetPCLK1Freq>
 800bc52:	6378      	str	r0, [r7, #52]	; 0x34
 800bc54:	f000 bc61 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800bc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc5e:	d104      	bne.n	800bc6a <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bc60:	f7fd fb58 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800bc64:	6378      	str	r0, [r7, #52]	; 0x34
 800bc66:	f000 bc58 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800bc6a:	4b9b      	ldr	r3, [pc, #620]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc76:	d107      	bne.n	800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800bc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc7e:	d103      	bne.n	800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800bc80:	4b96      	ldr	r3, [pc, #600]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800bc82:	637b      	str	r3, [r7, #52]	; 0x34
 800bc84:	f000 bc49 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800bc88:	4b93      	ldr	r3, [pc, #588]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f003 0320 	and.w	r3, r3, #32
 800bc90:	2b20      	cmp	r3, #32
 800bc92:	d11c      	bne.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800bc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc96:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bc9a:	d118      	bne.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bc9c:	4b8e      	ldr	r3, [pc, #568]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d005      	beq.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800bca8:	4b8b      	ldr	r3, [pc, #556]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	0e1b      	lsrs	r3, r3, #24
 800bcae:	f003 030f 	and.w	r3, r3, #15
 800bcb2:	e006      	b.n	800bcc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800bcb4:	4b88      	ldr	r3, [pc, #544]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bcb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bcba:	041b      	lsls	r3, r3, #16
 800bcbc:	0e1b      	lsrs	r3, r3, #24
 800bcbe:	f003 030f 	and.w	r3, r3, #15
 800bcc2:	4a87      	ldr	r2, [pc, #540]	; (800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bcc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcc8:	637b      	str	r3, [r7, #52]	; 0x34
 800bcca:	f000 bc26 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	637b      	str	r3, [r7, #52]	; 0x34
 800bcd2:	f000 bc22 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800bcd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcda:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bcde:	430b      	orrs	r3, r1
 800bce0:	d164      	bne.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800bce2:	4b7d      	ldr	r3, [pc, #500]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bce4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800bcee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d120      	bne.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bcf4:	4b78      	ldr	r3, [pc, #480]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f003 0320 	and.w	r3, r3, #32
 800bcfc:	2b20      	cmp	r3, #32
 800bcfe:	d117      	bne.n	800bd30 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bd00:	4b75      	ldr	r3, [pc, #468]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d005      	beq.n	800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800bd0c:	4b72      	ldr	r3, [pc, #456]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	0e1b      	lsrs	r3, r3, #24
 800bd12:	f003 030f 	and.w	r3, r3, #15
 800bd16:	e006      	b.n	800bd26 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800bd18:	4b6f      	ldr	r3, [pc, #444]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bd1e:	041b      	lsls	r3, r3, #16
 800bd20:	0e1b      	lsrs	r3, r3, #24
 800bd22:	f003 030f 	and.w	r3, r3, #15
 800bd26:	4a6e      	ldr	r2, [pc, #440]	; (800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bd28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd2c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd2e:	e3f4      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800bd30:	2300      	movs	r3, #0
 800bd32:	637b      	str	r3, [r7, #52]	; 0x34
 800bd34:	e3f1      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800bd36:	4b68      	ldr	r3, [pc, #416]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bd3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd44:	d112      	bne.n	800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800bd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd4c:	d10e      	bne.n	800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bd4e:	4b62      	ldr	r3, [pc, #392]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bd54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd5c:	d102      	bne.n	800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800bd5e:	23fa      	movs	r3, #250	; 0xfa
 800bd60:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bd62:	e3da      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800bd64:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bd68:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bd6a:	e3d6      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800bd6c:	4b5a      	ldr	r3, [pc, #360]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd78:	d106      	bne.n	800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd80:	d102      	bne.n	800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800bd82:	4b56      	ldr	r3, [pc, #344]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800bd84:	637b      	str	r3, [r7, #52]	; 0x34
 800bd86:	e3c8      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800bd88:	4b53      	ldr	r3, [pc, #332]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bd8e:	f003 0302 	and.w	r3, r3, #2
 800bd92:	2b02      	cmp	r3, #2
 800bd94:	d107      	bne.n	800bda6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800bd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd9c:	d103      	bne.n	800bda6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800bd9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bda2:	637b      	str	r3, [r7, #52]	; 0x34
 800bda4:	e3b9      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800bda6:	2300      	movs	r3, #0
 800bda8:	637b      	str	r3, [r7, #52]	; 0x34
 800bdaa:	e3b6      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800bdac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdb0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800bdb4:	430b      	orrs	r3, r1
 800bdb6:	d164      	bne.n	800be82 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800bdb8:	4b47      	ldr	r3, [pc, #284]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bdbe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bdc2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800bdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d120      	bne.n	800be0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bdca:	4b43      	ldr	r3, [pc, #268]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f003 0320 	and.w	r3, r3, #32
 800bdd2:	2b20      	cmp	r3, #32
 800bdd4:	d117      	bne.n	800be06 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bdd6:	4b40      	ldr	r3, [pc, #256]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d005      	beq.n	800bdee <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800bde2:	4b3d      	ldr	r3, [pc, #244]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	0e1b      	lsrs	r3, r3, #24
 800bde8:	f003 030f 	and.w	r3, r3, #15
 800bdec:	e006      	b.n	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800bdee:	4b3a      	ldr	r3, [pc, #232]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bdf4:	041b      	lsls	r3, r3, #16
 800bdf6:	0e1b      	lsrs	r3, r3, #24
 800bdf8:	f003 030f 	and.w	r3, r3, #15
 800bdfc:	4a38      	ldr	r2, [pc, #224]	; (800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bdfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be02:	637b      	str	r3, [r7, #52]	; 0x34
 800be04:	e389      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800be06:	2300      	movs	r3, #0
 800be08:	637b      	str	r3, [r7, #52]	; 0x34
 800be0a:	e386      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800be0c:	4b32      	ldr	r3, [pc, #200]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be1a:	d112      	bne.n	800be42 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800be1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be22:	d10e      	bne.n	800be42 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800be24:	4b2c      	ldr	r3, [pc, #176]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be32:	d102      	bne.n	800be3a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800be34:	23fa      	movs	r3, #250	; 0xfa
 800be36:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800be38:	e36f      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800be3a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800be3e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800be40:	e36b      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800be42:	4b25      	ldr	r3, [pc, #148]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be4e:	d106      	bne.n	800be5e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800be50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be56:	d102      	bne.n	800be5e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800be58:	4b20      	ldr	r3, [pc, #128]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800be5a:	637b      	str	r3, [r7, #52]	; 0x34
 800be5c:	e35d      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800be5e:	4b1e      	ldr	r3, [pc, #120]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be64:	f003 0302 	and.w	r3, r3, #2
 800be68:	2b02      	cmp	r3, #2
 800be6a:	d107      	bne.n	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800be6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be72:	d103      	bne.n	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800be74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be78:	637b      	str	r3, [r7, #52]	; 0x34
 800be7a:	e34e      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800be7c:	2300      	movs	r3, #0
 800be7e:	637b      	str	r3, [r7, #52]	; 0x34
 800be80:	e34b      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800be82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be86:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800be8a:	430b      	orrs	r3, r1
 800be8c:	d14e      	bne.n	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800be8e:	4b12      	ldr	r3, [pc, #72]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be94:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800be98:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800be9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d103      	bne.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bea0:	f7fd fb54 	bl	800954c <HAL_RCC_GetPCLK1Freq>
 800bea4:	6378      	str	r0, [r7, #52]	; 0x34
 800bea6:	e338      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800bea8:	4b0b      	ldr	r3, [pc, #44]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800beaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800beae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800beb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800beb6:	d119      	bne.n	800beec <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800beb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bebe:	d115      	bne.n	800beec <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bec0:	4b05      	ldr	r3, [pc, #20]	; (800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bec2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800beca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bece:	d109      	bne.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800bed0:	23fa      	movs	r3, #250	; 0xfa
 800bed2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bed4:	e321      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bed6:	bf00      	nop
 800bed8:	46020c00 	.word	0x46020c00
 800bedc:	00f42400 	.word	0x00f42400
 800bee0:	0800e244 	.word	0x0800e244
      }
      else
      {
        frequency = LSI_VALUE;
 800bee4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bee8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800beea:	e316      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800beec:	4ba8      	ldr	r3, [pc, #672]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bef8:	d106      	bne.n	800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800befa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bf00:	d102      	bne.n	800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800bf02:	4ba4      	ldr	r3, [pc, #656]	; (800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bf04:	637b      	str	r3, [r7, #52]	; 0x34
 800bf06:	e308      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800bf08:	4ba1      	ldr	r3, [pc, #644]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bf0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf0e:	f003 0302 	and.w	r3, r3, #2
 800bf12:	2b02      	cmp	r3, #2
 800bf14:	d107      	bne.n	800bf26 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800bf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf18:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bf1c:	d103      	bne.n	800bf26 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800bf1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf22:	637b      	str	r3, [r7, #52]	; 0x34
 800bf24:	e2f9      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800bf26:	2300      	movs	r3, #0
 800bf28:	637b      	str	r3, [r7, #52]	; 0x34
 800bf2a:	e2f6      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800bf2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf30:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800bf34:	430b      	orrs	r3, r1
 800bf36:	d12d      	bne.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800bf38:	4b95      	ldr	r3, [pc, #596]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bf3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf3e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800bf42:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800bf44:	4b92      	ldr	r3, [pc, #584]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf50:	d105      	bne.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800bf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d102      	bne.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800bf58:	4b8e      	ldr	r3, [pc, #568]	; (800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bf5a:	637b      	str	r3, [r7, #52]	; 0x34
 800bf5c:	e2dd      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800bf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bf64:	d107      	bne.n	800bf76 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7fe fb4c 	bl	800a608 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf72:	637b      	str	r3, [r7, #52]	; 0x34
 800bf74:	e2d1      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800bf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf7c:	d107      	bne.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf7e:	f107 0318 	add.w	r3, r7, #24
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fe fc9a 	bl	800a8bc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	637b      	str	r3, [r7, #52]	; 0x34
 800bf8c:	e2c5      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	637b      	str	r3, [r7, #52]	; 0x34
 800bf92:	e2c2      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800bf94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf98:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800bf9c:	430b      	orrs	r3, r1
 800bf9e:	d156      	bne.n	800c04e <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800bfa0:	4b7b      	ldr	r3, [pc, #492]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bfa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bfa6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bfaa:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800bfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bfb2:	d028      	beq.n	800c006 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bfba:	d845      	bhi.n	800c048 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bfc2:	d013      	beq.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800bfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bfca:	d83d      	bhi.n	800c048 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800bfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d004      	beq.n	800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800bfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfd8:	d004      	beq.n	800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800bfda:	e035      	b.n	800c048 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800bfdc:	f7fd faca 	bl	8009574 <HAL_RCC_GetPCLK2Freq>
 800bfe0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bfe2:	e29a      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800bfe4:	f7fd f996 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800bfe8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bfea:	e296      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bfec:	4b68      	ldr	r3, [pc, #416]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bff8:	d102      	bne.n	800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800bffa:	4b66      	ldr	r3, [pc, #408]	; (800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bffc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bffe:	e28c      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c000:	2300      	movs	r3, #0
 800c002:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c004:	e289      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c006:	4b62      	ldr	r3, [pc, #392]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f003 0320 	and.w	r3, r3, #32
 800c00e:	2b20      	cmp	r3, #32
 800c010:	d117      	bne.n	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c012:	4b5f      	ldr	r3, [pc, #380]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c014:	689b      	ldr	r3, [r3, #8]
 800c016:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d005      	beq.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800c01e:	4b5c      	ldr	r3, [pc, #368]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	0e1b      	lsrs	r3, r3, #24
 800c024:	f003 030f 	and.w	r3, r3, #15
 800c028:	e006      	b.n	800c038 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800c02a:	4b59      	ldr	r3, [pc, #356]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c02c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c030:	041b      	lsls	r3, r3, #16
 800c032:	0e1b      	lsrs	r3, r3, #24
 800c034:	f003 030f 	and.w	r3, r3, #15
 800c038:	4a57      	ldr	r2, [pc, #348]	; (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800c03a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c03e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c040:	e26b      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c042:	2300      	movs	r3, #0
 800c044:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c046:	e268      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c048:	2300      	movs	r3, #0
 800c04a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c04c:	e265      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800c04e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c052:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800c056:	430b      	orrs	r3, r1
 800c058:	d156      	bne.n	800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800c05a:	4b4d      	ldr	r3, [pc, #308]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c05c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c064:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800c066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c068:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c06c:	d028      	beq.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800c06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c070:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c074:	d845      	bhi.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800c076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c07c:	d013      	beq.n	800c0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800c07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c084:	d83d      	bhi.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800c086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d004      	beq.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800c08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c092:	d004      	beq.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800c094:	e035      	b.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800c096:	f7fd fa59 	bl	800954c <HAL_RCC_GetPCLK1Freq>
 800c09a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c09c:	e23d      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c09e:	f7fd f939 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800c0a2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c0a4:	e239      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c0a6:	4b3a      	ldr	r3, [pc, #232]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0b2:	d102      	bne.n	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800c0b4:	4b37      	ldr	r3, [pc, #220]	; (800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c0b6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c0b8:	e22f      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0be:	e22c      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c0c0:	4b33      	ldr	r3, [pc, #204]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f003 0320 	and.w	r3, r3, #32
 800c0c8:	2b20      	cmp	r3, #32
 800c0ca:	d117      	bne.n	800c0fc <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c0cc:	4b30      	ldr	r3, [pc, #192]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d005      	beq.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800c0d8:	4b2d      	ldr	r3, [pc, #180]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	0e1b      	lsrs	r3, r3, #24
 800c0de:	f003 030f 	and.w	r3, r3, #15
 800c0e2:	e006      	b.n	800c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800c0e4:	4b2a      	ldr	r3, [pc, #168]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c0ea:	041b      	lsls	r3, r3, #16
 800c0ec:	0e1b      	lsrs	r3, r3, #24
 800c0ee:	f003 030f 	and.w	r3, r3, #15
 800c0f2:	4a29      	ldr	r2, [pc, #164]	; (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800c0f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0f8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c0fa:	e20e      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c100:	e20b      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c102:	2300      	movs	r3, #0
 800c104:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c106:	e208      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800c108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c10c:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800c110:	430b      	orrs	r3, r1
 800c112:	d17c      	bne.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800c114:	4b1e      	ldr	r3, [pc, #120]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c11a:	f003 0318 	and.w	r3, r3, #24
 800c11e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800c120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c122:	2b18      	cmp	r3, #24
 800c124:	d870      	bhi.n	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800c126:	a201      	add	r2, pc, #4	; (adr r2, 800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800c128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c12c:	0800c19d 	.word	0x0800c19d
 800c130:	0800c209 	.word	0x0800c209
 800c134:	0800c209 	.word	0x0800c209
 800c138:	0800c209 	.word	0x0800c209
 800c13c:	0800c209 	.word	0x0800c209
 800c140:	0800c209 	.word	0x0800c209
 800c144:	0800c209 	.word	0x0800c209
 800c148:	0800c209 	.word	0x0800c209
 800c14c:	0800c1a5 	.word	0x0800c1a5
 800c150:	0800c209 	.word	0x0800c209
 800c154:	0800c209 	.word	0x0800c209
 800c158:	0800c209 	.word	0x0800c209
 800c15c:	0800c209 	.word	0x0800c209
 800c160:	0800c209 	.word	0x0800c209
 800c164:	0800c209 	.word	0x0800c209
 800c168:	0800c209 	.word	0x0800c209
 800c16c:	0800c1ad 	.word	0x0800c1ad
 800c170:	0800c209 	.word	0x0800c209
 800c174:	0800c209 	.word	0x0800c209
 800c178:	0800c209 	.word	0x0800c209
 800c17c:	0800c209 	.word	0x0800c209
 800c180:	0800c209 	.word	0x0800c209
 800c184:	0800c209 	.word	0x0800c209
 800c188:	0800c209 	.word	0x0800c209
 800c18c:	0800c1c7 	.word	0x0800c1c7
 800c190:	46020c00 	.word	0x46020c00
 800c194:	00f42400 	.word	0x00f42400
 800c198:	0800e244 	.word	0x0800e244
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800c19c:	f7fd f9fe 	bl	800959c <HAL_RCC_GetPCLK3Freq>
 800c1a0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c1a2:	e1ba      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c1a4:	f7fd f8b6 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800c1a8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c1aa:	e1b6      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c1ac:	4b9f      	ldr	r3, [pc, #636]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1b8:	d102      	bne.n	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800c1ba:	4b9d      	ldr	r3, [pc, #628]	; (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800c1bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c1be:	e1ac      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c1c4:	e1a9      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c1c6:	4b99      	ldr	r3, [pc, #612]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f003 0320 	and.w	r3, r3, #32
 800c1ce:	2b20      	cmp	r3, #32
 800c1d0:	d117      	bne.n	800c202 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c1d2:	4b96      	ldr	r3, [pc, #600]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d005      	beq.n	800c1ea <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800c1de:	4b93      	ldr	r3, [pc, #588]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	0e1b      	lsrs	r3, r3, #24
 800c1e4:	f003 030f 	and.w	r3, r3, #15
 800c1e8:	e006      	b.n	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800c1ea:	4b90      	ldr	r3, [pc, #576]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c1ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c1f0:	041b      	lsls	r3, r3, #16
 800c1f2:	0e1b      	lsrs	r3, r3, #24
 800c1f4:	f003 030f 	and.w	r3, r3, #15
 800c1f8:	4a8e      	ldr	r2, [pc, #568]	; (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800c1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1fe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c200:	e18b      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c202:	2300      	movs	r3, #0
 800c204:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c206:	e188      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c208:	2300      	movs	r3, #0
 800c20a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c20c:	e185      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800c20e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c212:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800c216:	430b      	orrs	r3, r1
 800c218:	d155      	bne.n	800c2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c21a:	4b84      	ldr	r3, [pc, #528]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c21c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c220:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c224:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c228:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c22c:	d013      	beq.n	800c256 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800c22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c230:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c234:	d844      	bhi.n	800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800c236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c238:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c23c:	d013      	beq.n	800c266 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800c23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c240:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c244:	d83c      	bhi.n	800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800c246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d014      	beq.n	800c276 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800c24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c252:	d014      	beq.n	800c27e <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800c254:	e034      	b.n	800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c256:	f107 0318 	add.w	r3, r7, #24
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7fe fb2e 	bl	800a8bc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c264:	e159      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fe f9cc 	bl	800a608 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c272:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c274:	e151      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c276:	f7fd f84d 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800c27a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c27c:	e14d      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c27e:	4b6b      	ldr	r3, [pc, #428]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f003 0320 	and.w	r3, r3, #32
 800c286:	2b20      	cmp	r3, #32
 800c288:	d117      	bne.n	800c2ba <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c28a:	4b68      	ldr	r3, [pc, #416]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c292:	2b00      	cmp	r3, #0
 800c294:	d005      	beq.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800c296:	4b65      	ldr	r3, [pc, #404]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	0e1b      	lsrs	r3, r3, #24
 800c29c:	f003 030f 	and.w	r3, r3, #15
 800c2a0:	e006      	b.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800c2a2:	4b62      	ldr	r3, [pc, #392]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c2a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c2a8:	041b      	lsls	r3, r3, #16
 800c2aa:	0e1b      	lsrs	r3, r3, #24
 800c2ac:	f003 030f 	and.w	r3, r3, #15
 800c2b0:	4a60      	ldr	r2, [pc, #384]	; (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800c2b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2b6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c2b8:	e12f      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c2be:	e12c      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c2c4:	e129      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800c2c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2ca:	1e59      	subs	r1, r3, #1
 800c2cc:	ea52 0301 	orrs.w	r3, r2, r1
 800c2d0:	d13c      	bne.n	800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800c2d2:	4b56      	ldr	r3, [pc, #344]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c2d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c2d8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c2dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c2e4:	d027      	beq.n	800c336 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800c2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c2ec:	d82b      	bhi.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800c2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c2f4:	d017      	beq.n	800c326 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800c2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c2fc:	d823      	bhi.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c300:	2b00      	cmp	r3, #0
 800c302:	d004      	beq.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800c304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c30a:	d004      	beq.n	800c316 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800c30c:	e01b      	b.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c30e:	f7fd f801 	bl	8009314 <HAL_RCC_GetSysClockFreq>
 800c312:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c314:	e101      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7fe f974 	bl	800a608 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c322:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c324:	e0f9      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c326:	f107 0318 	add.w	r3, r7, #24
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7fe fac6 	bl	800a8bc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c334:	e0f1      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c336:	f107 030c 	add.w	r3, r7, #12
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fe fc18 	bl	800ab70 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c344:	e0e9      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c346:	2300      	movs	r3, #0
 800c348:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c34a:	e0e6      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800c34c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c350:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800c354:	430b      	orrs	r3, r1
 800c356:	d131      	bne.n	800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800c358:	4b34      	ldr	r3, [pc, #208]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c35a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c35e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c362:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800c364:	4b31      	ldr	r3, [pc, #196]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c366:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c36a:	f003 0302 	and.w	r3, r3, #2
 800c36e:	2b02      	cmp	r3, #2
 800c370:	d106      	bne.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800c372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c374:	2b00      	cmp	r3, #0
 800c376:	d103      	bne.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800c378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c37c:	637b      	str	r3, [r7, #52]	; 0x34
 800c37e:	e0cc      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800c380:	4b2a      	ldr	r3, [pc, #168]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c386:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c38a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c38e:	d112      	bne.n	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800c390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c396:	d10e      	bne.n	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c398:	4b24      	ldr	r3, [pc, #144]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c39a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c39e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3a6:	d102      	bne.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800c3a8:	23fa      	movs	r3, #250	; 0xfa
 800c3aa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c3ac:	e0b5      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c3ae:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c3b2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c3b4:	e0b1      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	637b      	str	r3, [r7, #52]	; 0x34
 800c3ba:	e0ae      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800c3bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3c0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c3c4:	430b      	orrs	r3, r1
 800c3c6:	d13b      	bne.n	800c440 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800c3c8:	4b18      	ldr	r3, [pc, #96]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c3ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c3ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c3d2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800c3d4:	4b15      	ldr	r3, [pc, #84]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c3dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3e0:	d105      	bne.n	800c3ee <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800c3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d102      	bne.n	800c3ee <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800c3e8:	4b13      	ldr	r3, [pc, #76]	; (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800c3ea:	637b      	str	r3, [r7, #52]	; 0x34
 800c3ec:	e095      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800c3ee:	4b0f      	ldr	r3, [pc, #60]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c3f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3fa:	d106      	bne.n	800c40a <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800c3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c402:	d102      	bne.n	800c40a <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800c404:	4b0d      	ldr	r3, [pc, #52]	; (800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800c406:	637b      	str	r3, [r7, #52]	; 0x34
 800c408:	e087      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800c40a:	4b08      	ldr	r3, [pc, #32]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c416:	d106      	bne.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800c418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c41e:	d102      	bne.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800c420:	4b03      	ldr	r3, [pc, #12]	; (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800c422:	637b      	str	r3, [r7, #52]	; 0x34
 800c424:	e079      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800c426:	2300      	movs	r3, #0
 800c428:	637b      	str	r3, [r7, #52]	; 0x34
 800c42a:	e076      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c42c:	46020c00 	.word	0x46020c00
 800c430:	00f42400 	.word	0x00f42400
 800c434:	0800e244 	.word	0x0800e244
 800c438:	02dc6c00 	.word	0x02dc6c00
 800c43c:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800c440:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c444:	1e99      	subs	r1, r3, #2
 800c446:	ea52 0301 	orrs.w	r3, r2, r1
 800c44a:	d120      	bne.n	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800c44c:	4b35      	ldr	r3, [pc, #212]	; (800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c44e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c456:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d004      	beq.n	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800c45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c460:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c464:	d008      	beq.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800c466:	e00f      	b.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c468:	f107 030c 	add.w	r3, r7, #12
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fe fb7f 	bl	800ab70 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c476:	e050      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c478:	f107 0318 	add.w	r3, r7, #24
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7fe fa1d 	bl	800a8bc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800c482:	6a3b      	ldr	r3, [r7, #32]
 800c484:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c486:	e048      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c488:	2300      	movs	r3, #0
 800c48a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c48c:	e045      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800c48e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c492:	f1a3 0108 	sub.w	r1, r3, #8
 800c496:	ea52 0301 	orrs.w	r3, r2, r1
 800c49a:	d13c      	bne.n	800c516 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800c49c:	4b21      	ldr	r3, [pc, #132]	; (800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c49e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c4a2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c4a6:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800c4a8:	4b1e      	ldr	r3, [pc, #120]	; (800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4b4:	d105      	bne.n	800c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800c4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d102      	bne.n	800c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800c4bc:	4b1a      	ldr	r3, [pc, #104]	; (800c528 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800c4be:	637b      	str	r3, [r7, #52]	; 0x34
 800c4c0:	e02b      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800c4c2:	4b18      	ldr	r3, [pc, #96]	; (800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4ce:	d106      	bne.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800c4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c4d6:	d102      	bne.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800c4d8:	4b14      	ldr	r3, [pc, #80]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800c4da:	637b      	str	r3, [r7, #52]	; 0x34
 800c4dc:	e01d      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800c4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4e4:	d107      	bne.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fe f88c 	bl	800a608 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f2:	637b      	str	r3, [r7, #52]	; 0x34
 800c4f4:	e011      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800c4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c4fc:	d108      	bne.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c502:	4618      	mov	r0, r3
 800c504:	f7fe f880 	bl	800a608 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800c508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50a:	085b      	lsrs	r3, r3, #1
 800c50c:	637b      	str	r3, [r7, #52]	; 0x34
 800c50e:	e004      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800c510:	2300      	movs	r3, #0
 800c512:	637b      	str	r3, [r7, #52]	; 0x34
 800c514:	e001      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800c516:	2300      	movs	r3, #0
 800c518:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800c51a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3738      	adds	r7, #56	; 0x38
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	46020c00 	.word	0x46020c00
 800c528:	00f42400 	.word	0x00f42400
 800c52c:	007a1200 	.word	0x007a1200

0800c530 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800c530:	b480      	push	{r7}
 800c532:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800c534:	4b06      	ldr	r3, [pc, #24]	; (800c550 <HAL_RCCEx_EnableLSECSS+0x20>)
 800c536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c53a:	4a05      	ldr	r2, [pc, #20]	; (800c550 <HAL_RCCEx_EnableLSECSS+0x20>)
 800c53c:	f043 0320 	orr.w	r3, r3, #32
 800c540:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 800c544:	bf00      	nop
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	46020c00 	.word	0x46020c00

0800c554 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800c55c:	4b47      	ldr	r3, [pc, #284]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a46      	ldr	r2, [pc, #280]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c562:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c566:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c568:	f7f7 fa80 	bl	8003a6c <HAL_GetTick>
 800c56c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c56e:	e008      	b.n	800c582 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c570:	f7f7 fa7c 	bl	8003a6c <HAL_GetTick>
 800c574:	4602      	mov	r2, r0
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	1ad3      	subs	r3, r2, r3
 800c57a:	2b02      	cmp	r3, #2
 800c57c:	d901      	bls.n	800c582 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c57e:	2303      	movs	r3, #3
 800c580:	e077      	b.n	800c672 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c582:	4b3e      	ldr	r3, [pc, #248]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d1f0      	bne.n	800c570 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c58e:	4b3b      	ldr	r3, [pc, #236]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c592:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c596:	f023 0303 	bic.w	r3, r3, #3
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	6811      	ldr	r1, [r2, #0]
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	6852      	ldr	r2, [r2, #4]
 800c5a2:	3a01      	subs	r2, #1
 800c5a4:	0212      	lsls	r2, r2, #8
 800c5a6:	430a      	orrs	r2, r1
 800c5a8:	4934      	ldr	r1, [pc, #208]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	62cb      	str	r3, [r1, #44]	; 0x2c
 800c5ae:	4b33      	ldr	r3, [pc, #204]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c5b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5b2:	4b33      	ldr	r3, [pc, #204]	; (800c680 <RCCEx_PLL2_Config+0x12c>)
 800c5b4:	4013      	ands	r3, r2
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	6892      	ldr	r2, [r2, #8]
 800c5ba:	3a01      	subs	r2, #1
 800c5bc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	68d2      	ldr	r2, [r2, #12]
 800c5c4:	3a01      	subs	r2, #1
 800c5c6:	0252      	lsls	r2, r2, #9
 800c5c8:	b292      	uxth	r2, r2
 800c5ca:	4311      	orrs	r1, r2
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	6912      	ldr	r2, [r2, #16]
 800c5d0:	3a01      	subs	r2, #1
 800c5d2:	0412      	lsls	r2, r2, #16
 800c5d4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c5d8:	4311      	orrs	r1, r2
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	6952      	ldr	r2, [r2, #20]
 800c5de:	3a01      	subs	r2, #1
 800c5e0:	0612      	lsls	r2, r2, #24
 800c5e2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c5e6:	430a      	orrs	r2, r1
 800c5e8:	4924      	ldr	r1, [pc, #144]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c5ee:	4b23      	ldr	r3, [pc, #140]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f2:	f023 020c 	bic.w	r2, r3, #12
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	699b      	ldr	r3, [r3, #24]
 800c5fa:	4920      	ldr	r1, [pc, #128]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c600:	4b1e      	ldr	r3, [pc, #120]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6a1b      	ldr	r3, [r3, #32]
 800c608:	491c      	ldr	r1, [pc, #112]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c60a:	4313      	orrs	r3, r2
 800c60c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800c60e:	4b1b      	ldr	r3, [pc, #108]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c612:	4a1a      	ldr	r2, [pc, #104]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c614:	f023 0310 	bic.w	r3, r3, #16
 800c618:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c61a:	4b18      	ldr	r3, [pc, #96]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c61e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c622:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	69d2      	ldr	r2, [r2, #28]
 800c62a:	00d2      	lsls	r2, r2, #3
 800c62c:	4913      	ldr	r1, [pc, #76]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c62e:	4313      	orrs	r3, r2
 800c630:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800c632:	4b12      	ldr	r3, [pc, #72]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c636:	4a11      	ldr	r2, [pc, #68]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c638:	f043 0310 	orr.w	r3, r3, #16
 800c63c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800c63e:	4b0f      	ldr	r3, [pc, #60]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4a0e      	ldr	r2, [pc, #56]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c644:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c648:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c64a:	f7f7 fa0f 	bl	8003a6c <HAL_GetTick>
 800c64e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c650:	e008      	b.n	800c664 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c652:	f7f7 fa0b 	bl	8003a6c <HAL_GetTick>
 800c656:	4602      	mov	r2, r0
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	1ad3      	subs	r3, r2, r3
 800c65c:	2b02      	cmp	r3, #2
 800c65e:	d901      	bls.n	800c664 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c660:	2303      	movs	r3, #3
 800c662:	e006      	b.n	800c672 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c664:	4b05      	ldr	r3, [pc, #20]	; (800c67c <RCCEx_PLL2_Config+0x128>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d0f0      	beq.n	800c652 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800c670:	2300      	movs	r3, #0

}
 800c672:	4618      	mov	r0, r3
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	46020c00 	.word	0x46020c00
 800c680:	80800000 	.word	0x80800000

0800c684 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800c68c:	4b47      	ldr	r3, [pc, #284]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a46      	ldr	r2, [pc, #280]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c696:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c698:	f7f7 f9e8 	bl	8003a6c <HAL_GetTick>
 800c69c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c69e:	e008      	b.n	800c6b2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c6a0:	f7f7 f9e4 	bl	8003a6c <HAL_GetTick>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	1ad3      	subs	r3, r2, r3
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d901      	bls.n	800c6b2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c6ae:	2303      	movs	r3, #3
 800c6b0:	e077      	b.n	800c7a2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c6b2:	4b3e      	ldr	r3, [pc, #248]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d1f0      	bne.n	800c6a0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c6be:	4b3b      	ldr	r3, [pc, #236]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c6c6:	f023 0303 	bic.w	r3, r3, #3
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	6811      	ldr	r1, [r2, #0]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	6852      	ldr	r2, [r2, #4]
 800c6d2:	3a01      	subs	r2, #1
 800c6d4:	0212      	lsls	r2, r2, #8
 800c6d6:	430a      	orrs	r2, r1
 800c6d8:	4934      	ldr	r1, [pc, #208]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	630b      	str	r3, [r1, #48]	; 0x30
 800c6de:	4b33      	ldr	r3, [pc, #204]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c6e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6e2:	4b33      	ldr	r3, [pc, #204]	; (800c7b0 <RCCEx_PLL3_Config+0x12c>)
 800c6e4:	4013      	ands	r3, r2
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	6892      	ldr	r2, [r2, #8]
 800c6ea:	3a01      	subs	r2, #1
 800c6ec:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	68d2      	ldr	r2, [r2, #12]
 800c6f4:	3a01      	subs	r2, #1
 800c6f6:	0252      	lsls	r2, r2, #9
 800c6f8:	b292      	uxth	r2, r2
 800c6fa:	4311      	orrs	r1, r2
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	6912      	ldr	r2, [r2, #16]
 800c700:	3a01      	subs	r2, #1
 800c702:	0412      	lsls	r2, r2, #16
 800c704:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c708:	4311      	orrs	r1, r2
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	6952      	ldr	r2, [r2, #20]
 800c70e:	3a01      	subs	r2, #1
 800c710:	0612      	lsls	r2, r2, #24
 800c712:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c716:	430a      	orrs	r2, r1
 800c718:	4924      	ldr	r1, [pc, #144]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c71a:	4313      	orrs	r3, r2
 800c71c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800c71e:	4b23      	ldr	r3, [pc, #140]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c722:	f023 020c 	bic.w	r2, r3, #12
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	699b      	ldr	r3, [r3, #24]
 800c72a:	4920      	ldr	r1, [pc, #128]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c72c:	4313      	orrs	r3, r2
 800c72e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c730:	4b1e      	ldr	r3, [pc, #120]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6a1b      	ldr	r3, [r3, #32]
 800c738:	491c      	ldr	r1, [pc, #112]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c73a:	4313      	orrs	r3, r2
 800c73c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800c73e:	4b1b      	ldr	r3, [pc, #108]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c742:	4a1a      	ldr	r2, [pc, #104]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c744:	f023 0310 	bic.w	r3, r3, #16
 800c748:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c74a:	4b18      	ldr	r3, [pc, #96]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c74c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c74e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c752:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	69d2      	ldr	r2, [r2, #28]
 800c75a:	00d2      	lsls	r2, r2, #3
 800c75c:	4913      	ldr	r1, [pc, #76]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c75e:	4313      	orrs	r3, r2
 800c760:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800c762:	4b12      	ldr	r3, [pc, #72]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c766:	4a11      	ldr	r2, [pc, #68]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c768:	f043 0310 	orr.w	r3, r3, #16
 800c76c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800c76e:	4b0f      	ldr	r3, [pc, #60]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a0e      	ldr	r2, [pc, #56]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c778:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c77a:	f7f7 f977 	bl	8003a6c <HAL_GetTick>
 800c77e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c780:	e008      	b.n	800c794 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c782:	f7f7 f973 	bl	8003a6c <HAL_GetTick>
 800c786:	4602      	mov	r2, r0
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	1ad3      	subs	r3, r2, r3
 800c78c:	2b02      	cmp	r3, #2
 800c78e:	d901      	bls.n	800c794 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c790:	2303      	movs	r3, #3
 800c792:	e006      	b.n	800c7a2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c794:	4b05      	ldr	r3, [pc, #20]	; (800c7ac <RCCEx_PLL3_Config+0x128>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d0f0      	beq.n	800c782 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800c7a0:	2300      	movs	r3, #0
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	46020c00 	.word	0x46020c00
 800c7b0:	80800000 	.word	0x80800000

0800c7b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d071      	beq.n	800c8aa <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d106      	bne.n	800c7e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7f6 feca 	bl	8003574 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2202      	movs	r2, #2
 800c7e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c7e8:	4b32      	ldr	r3, [pc, #200]	; (800c8b4 <HAL_RTC_Init+0x100>)
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	f003 0310 	and.w	r3, r3, #16
 800c7f0:	2b10      	cmp	r3, #16
 800c7f2:	d051      	beq.n	800c898 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c7f4:	4b2f      	ldr	r3, [pc, #188]	; (800c8b4 <HAL_RTC_Init+0x100>)
 800c7f6:	22ca      	movs	r2, #202	; 0xca
 800c7f8:	625a      	str	r2, [r3, #36]	; 0x24
 800c7fa:	4b2e      	ldr	r3, [pc, #184]	; (800c8b4 <HAL_RTC_Init+0x100>)
 800c7fc:	2253      	movs	r2, #83	; 0x53
 800c7fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 f9ad 	bl	800cb60 <RTC_EnterInitMode>
 800c806:	4603      	mov	r3, r0
 800c808:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c80a:	7bfb      	ldrb	r3, [r7, #15]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d13f      	bne.n	800c890 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800c810:	4b28      	ldr	r3, [pc, #160]	; (800c8b4 <HAL_RTC_Init+0x100>)
 800c812:	699b      	ldr	r3, [r3, #24]
 800c814:	4a27      	ldr	r2, [pc, #156]	; (800c8b4 <HAL_RTC_Init+0x100>)
 800c816:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800c81a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c81e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800c820:	4b24      	ldr	r3, [pc, #144]	; (800c8b4 <HAL_RTC_Init+0x100>)
 800c822:	699a      	ldr	r2, [r3, #24]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6859      	ldr	r1, [r3, #4]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	691b      	ldr	r3, [r3, #16]
 800c82c:	4319      	orrs	r1, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	699b      	ldr	r3, [r3, #24]
 800c832:	430b      	orrs	r3, r1
 800c834:	491f      	ldr	r1, [pc, #124]	; (800c8b4 <HAL_RTC_Init+0x100>)
 800c836:	4313      	orrs	r3, r2
 800c838:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	68da      	ldr	r2, [r3, #12]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	041b      	lsls	r3, r3, #16
 800c844:	491b      	ldr	r1, [pc, #108]	; (800c8b4 <HAL_RTC_Init+0x100>)
 800c846:	4313      	orrs	r3, r2
 800c848:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800c84a:	4b1a      	ldr	r3, [pc, #104]	; (800c8b4 <HAL_RTC_Init+0x100>)
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c85a:	430b      	orrs	r3, r1
 800c85c:	4915      	ldr	r1, [pc, #84]	; (800c8b4 <HAL_RTC_Init+0x100>)
 800c85e:	4313      	orrs	r3, r2
 800c860:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 f9b8 	bl	800cbd8 <RTC_ExitInitMode>
 800c868:	4603      	mov	r3, r0
 800c86a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800c86c:	7bfb      	ldrb	r3, [r7, #15]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d10e      	bne.n	800c890 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800c872:	4b10      	ldr	r3, [pc, #64]	; (800c8b4 <HAL_RTC_Init+0x100>)
 800c874:	699b      	ldr	r3, [r3, #24]
 800c876:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a19      	ldr	r1, [r3, #32]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	69db      	ldr	r3, [r3, #28]
 800c882:	4319      	orrs	r1, r3
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	695b      	ldr	r3, [r3, #20]
 800c888:	430b      	orrs	r3, r1
 800c88a:	490a      	ldr	r1, [pc, #40]	; (800c8b4 <HAL_RTC_Init+0x100>)
 800c88c:	4313      	orrs	r3, r2
 800c88e:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c890:	4b08      	ldr	r3, [pc, #32]	; (800c8b4 <HAL_RTC_Init+0x100>)
 800c892:	22ff      	movs	r2, #255	; 0xff
 800c894:	625a      	str	r2, [r3, #36]	; 0x24
 800c896:	e001      	b.n	800c89c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800c898:	2300      	movs	r3, #0
 800c89a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c89c:	7bfb      	ldrb	r3, [r7, #15]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d103      	bne.n	800c8aa <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800c8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3710      	adds	r7, #16
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	46007800 	.word	0x46007800

0800c8b8 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c8b8:	b590      	push	{r4, r7, lr}
 800c8ba:	b087      	sub	sp, #28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d101      	bne.n	800c8d2 <HAL_RTC_SetTime+0x1a>
 800c8ce:	2302      	movs	r3, #2
 800c8d0:	e088      	b.n	800c9e4 <HAL_RTC_SetTime+0x12c>
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2202      	movs	r2, #2
 800c8de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c8e2:	4b42      	ldr	r3, [pc, #264]	; (800c9ec <HAL_RTC_SetTime+0x134>)
 800c8e4:	22ca      	movs	r2, #202	; 0xca
 800c8e6:	625a      	str	r2, [r3, #36]	; 0x24
 800c8e8:	4b40      	ldr	r3, [pc, #256]	; (800c9ec <HAL_RTC_SetTime+0x134>)
 800c8ea:	2253      	movs	r2, #83	; 0x53
 800c8ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	f000 f936 	bl	800cb60 <RTC_EnterInitMode>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c8f8:	7cfb      	ldrb	r3, [r7, #19]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d163      	bne.n	800c9c6 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800c8fe:	4b3b      	ldr	r3, [pc, #236]	; (800c9ec <HAL_RTC_SetTime+0x134>)
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c90a:	d057      	beq.n	800c9bc <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d125      	bne.n	800c95e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c912:	4b36      	ldr	r3, [pc, #216]	; (800c9ec <HAL_RTC_SetTime+0x134>)
 800c914:	699b      	ldr	r3, [r3, #24]
 800c916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d102      	bne.n	800c924 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	2200      	movs	r2, #0
 800c922:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	4618      	mov	r0, r3
 800c92a:	f000 f993 	bl	800cc54 <RTC_ByteToBcd2>
 800c92e:	4603      	mov	r3, r0
 800c930:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	785b      	ldrb	r3, [r3, #1]
 800c936:	4618      	mov	r0, r3
 800c938:	f000 f98c 	bl	800cc54 <RTC_ByteToBcd2>
 800c93c:	4603      	mov	r3, r0
 800c93e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c940:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	789b      	ldrb	r3, [r3, #2]
 800c946:	4618      	mov	r0, r3
 800c948:	f000 f984 	bl	800cc54 <RTC_ByteToBcd2>
 800c94c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c94e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	78db      	ldrb	r3, [r3, #3]
 800c956:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c958:	4313      	orrs	r3, r2
 800c95a:	617b      	str	r3, [r7, #20]
 800c95c:	e017      	b.n	800c98e <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c95e:	4b23      	ldr	r3, [pc, #140]	; (800c9ec <HAL_RTC_SetTime+0x134>)
 800c960:	699b      	ldr	r3, [r3, #24]
 800c962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c966:	2b00      	cmp	r3, #0
 800c968:	d102      	bne.n	800c970 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	2200      	movs	r2, #0
 800c96e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	785b      	ldrb	r3, [r3, #1]
 800c97a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c97c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c97e:	68ba      	ldr	r2, [r7, #8]
 800c980:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c982:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	78db      	ldrb	r3, [r3, #3]
 800c988:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c98a:	4313      	orrs	r3, r2
 800c98c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800c98e:	4a17      	ldr	r2, [pc, #92]	; (800c9ec <HAL_RTC_SetTime+0x134>)
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c996:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c99a:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800c99c:	4b13      	ldr	r3, [pc, #76]	; (800c9ec <HAL_RTC_SetTime+0x134>)
 800c99e:	699b      	ldr	r3, [r3, #24]
 800c9a0:	4a12      	ldr	r2, [pc, #72]	; (800c9ec <HAL_RTC_SetTime+0x134>)
 800c9a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c9a6:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800c9a8:	4b10      	ldr	r3, [pc, #64]	; (800c9ec <HAL_RTC_SetTime+0x134>)
 800c9aa:	699a      	ldr	r2, [r3, #24]
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	68d9      	ldr	r1, [r3, #12]
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	430b      	orrs	r3, r1
 800c9b6:	490d      	ldr	r1, [pc, #52]	; (800c9ec <HAL_RTC_SetTime+0x134>)
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c9bc:	68f8      	ldr	r0, [r7, #12]
 800c9be:	f000 f90b 	bl	800cbd8 <RTC_ExitInitMode>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c9c6:	4b09      	ldr	r3, [pc, #36]	; (800c9ec <HAL_RTC_SetTime+0x134>)
 800c9c8:	22ff      	movs	r2, #255	; 0xff
 800c9ca:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c9cc:	7cfb      	ldrb	r3, [r7, #19]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d103      	bne.n	800c9da <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800c9e2:	7cfb      	ldrb	r3, [r7, #19]
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	371c      	adds	r7, #28
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd90      	pop	{r4, r7, pc}
 800c9ec:	46007800 	.word	0x46007800

0800c9f0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c9f0:	b590      	push	{r4, r7, lr}
 800c9f2:	b087      	sub	sp, #28
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d101      	bne.n	800ca0a <HAL_RTC_SetDate+0x1a>
 800ca06:	2302      	movs	r3, #2
 800ca08:	e071      	b.n	800caee <HAL_RTC_SetDate+0xfe>
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2202      	movs	r2, #2
 800ca16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d10e      	bne.n	800ca3e <HAL_RTC_SetDate+0x4e>
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	785b      	ldrb	r3, [r3, #1]
 800ca24:	f003 0310 	and.w	r3, r3, #16
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d008      	beq.n	800ca3e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	785b      	ldrb	r3, [r3, #1]
 800ca30:	f023 0310 	bic.w	r3, r3, #16
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	330a      	adds	r3, #10
 800ca38:	b2da      	uxtb	r2, r3
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d11c      	bne.n	800ca7e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	78db      	ldrb	r3, [r3, #3]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f000 f903 	bl	800cc54 <RTC_ByteToBcd2>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	785b      	ldrb	r3, [r3, #1]
 800ca56:	4618      	mov	r0, r3
 800ca58:	f000 f8fc 	bl	800cc54 <RTC_ByteToBcd2>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ca60:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	789b      	ldrb	r3, [r3, #2]
 800ca66:	4618      	mov	r0, r3
 800ca68:	f000 f8f4 	bl	800cc54 <RTC_ByteToBcd2>
 800ca6c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ca6e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	617b      	str	r3, [r7, #20]
 800ca7c:	e00e      	b.n	800ca9c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	78db      	ldrb	r3, [r3, #3]
 800ca82:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	785b      	ldrb	r3, [r3, #1]
 800ca88:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ca8a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800ca8c:	68ba      	ldr	r2, [r7, #8]
 800ca8e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ca90:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca9c:	4b16      	ldr	r3, [pc, #88]	; (800caf8 <HAL_RTC_SetDate+0x108>)
 800ca9e:	22ca      	movs	r2, #202	; 0xca
 800caa0:	625a      	str	r2, [r3, #36]	; 0x24
 800caa2:	4b15      	ldr	r3, [pc, #84]	; (800caf8 <HAL_RTC_SetDate+0x108>)
 800caa4:	2253      	movs	r2, #83	; 0x53
 800caa6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	f000 f859 	bl	800cb60 <RTC_EnterInitMode>
 800caae:	4603      	mov	r3, r0
 800cab0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800cab2:	7cfb      	ldrb	r3, [r7, #19]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d10b      	bne.n	800cad0 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800cab8:	4a0f      	ldr	r2, [pc, #60]	; (800caf8 <HAL_RTC_SetDate+0x108>)
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cac0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cac4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f000 f886 	bl	800cbd8 <RTC_ExitInitMode>
 800cacc:	4603      	mov	r3, r0
 800cace:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cad0:	4b09      	ldr	r3, [pc, #36]	; (800caf8 <HAL_RTC_SetDate+0x108>)
 800cad2:	22ff      	movs	r2, #255	; 0xff
 800cad4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800cad6:	7cfb      	ldrb	r3, [r7, #19]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d103      	bne.n	800cae4 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2201      	movs	r2, #1
 800cae0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800caec:	7cfb      	ldrb	r3, [r7, #19]
}
 800caee:	4618      	mov	r0, r3
 800caf0:	371c      	adds	r7, #28
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd90      	pop	{r4, r7, pc}
 800caf6:	bf00      	nop
 800caf8:	46007800 	.word	0x46007800

0800cafc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800cb04:	4b15      	ldr	r3, [pc, #84]	; (800cb5c <HAL_RTC_WaitForSynchro+0x60>)
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	4a14      	ldr	r2, [pc, #80]	; (800cb5c <HAL_RTC_WaitForSynchro+0x60>)
 800cb0a:	f023 0320 	bic.w	r3, r3, #32
 800cb0e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800cb10:	f7f6 ffac 	bl	8003a6c <HAL_GetTick>
 800cb14:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cb16:	e013      	b.n	800cb40 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cb18:	f7f6 ffa8 	bl	8003a6c <HAL_GetTick>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	1ad3      	subs	r3, r2, r3
 800cb22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb26:	d90b      	bls.n	800cb40 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cb28:	4b0c      	ldr	r3, [pc, #48]	; (800cb5c <HAL_RTC_WaitForSynchro+0x60>)
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	f003 0320 	and.w	r3, r3, #32
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d10c      	bne.n	800cb4e <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2203      	movs	r2, #3
 800cb38:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 800cb3c:	2303      	movs	r3, #3
 800cb3e:	e008      	b.n	800cb52 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cb40:	4b06      	ldr	r3, [pc, #24]	; (800cb5c <HAL_RTC_WaitForSynchro+0x60>)
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	f003 0320 	and.w	r3, r3, #32
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d0e5      	beq.n	800cb18 <HAL_RTC_WaitForSynchro+0x1c>
 800cb4c:	e000      	b.n	800cb50 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800cb4e:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800cb50:	2300      	movs	r3, #0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	46007800 	.word	0x46007800

0800cb60 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cb6c:	4b19      	ldr	r3, [pc, #100]	; (800cbd4 <RTC_EnterInitMode+0x74>)
 800cb6e:	68db      	ldr	r3, [r3, #12]
 800cb70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d128      	bne.n	800cbca <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cb78:	4b16      	ldr	r3, [pc, #88]	; (800cbd4 <RTC_EnterInitMode+0x74>)
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	4a15      	ldr	r2, [pc, #84]	; (800cbd4 <RTC_EnterInitMode+0x74>)
 800cb7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb82:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800cb84:	f7f6 ff72 	bl	8003a6c <HAL_GetTick>
 800cb88:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cb8a:	e013      	b.n	800cbb4 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cb8c:	f7f6 ff6e 	bl	8003a6c <HAL_GetTick>
 800cb90:	4602      	mov	r2, r0
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	1ad3      	subs	r3, r2, r3
 800cb96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb9a:	d90b      	bls.n	800cbb4 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cb9c:	4b0d      	ldr	r3, [pc, #52]	; (800cbd4 <RTC_EnterInitMode+0x74>)
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d10f      	bne.n	800cbc8 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800cba8:	2303      	movs	r3, #3
 800cbaa:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2203      	movs	r2, #3
 800cbb0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cbb4:	4b07      	ldr	r3, [pc, #28]	; (800cbd4 <RTC_EnterInitMode+0x74>)
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d104      	bne.n	800cbca <RTC_EnterInitMode+0x6a>
 800cbc0:	7bfb      	ldrb	r3, [r7, #15]
 800cbc2:	2b03      	cmp	r3, #3
 800cbc4:	d1e2      	bne.n	800cb8c <RTC_EnterInitMode+0x2c>
 800cbc6:	e000      	b.n	800cbca <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800cbc8:	bf00      	nop
        }
      }
    }
  }

  return status;
 800cbca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	46007800 	.word	0x46007800

0800cbd8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cbe4:	4b1a      	ldr	r3, [pc, #104]	; (800cc50 <RTC_ExitInitMode+0x78>)
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	4a19      	ldr	r2, [pc, #100]	; (800cc50 <RTC_ExitInitMode+0x78>)
 800cbea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbee:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cbf0:	4b17      	ldr	r3, [pc, #92]	; (800cc50 <RTC_ExitInitMode+0x78>)
 800cbf2:	699b      	ldr	r3, [r3, #24]
 800cbf4:	f003 0320 	and.w	r3, r3, #32
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d10c      	bne.n	800cc16 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7ff ff7d 	bl	800cafc <HAL_RTC_WaitForSynchro>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d01e      	beq.n	800cc46 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2203      	movs	r2, #3
 800cc0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800cc10:	2303      	movs	r3, #3
 800cc12:	73fb      	strb	r3, [r7, #15]
 800cc14:	e017      	b.n	800cc46 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cc16:	4b0e      	ldr	r3, [pc, #56]	; (800cc50 <RTC_ExitInitMode+0x78>)
 800cc18:	699b      	ldr	r3, [r3, #24]
 800cc1a:	4a0d      	ldr	r2, [pc, #52]	; (800cc50 <RTC_ExitInitMode+0x78>)
 800cc1c:	f023 0320 	bic.w	r3, r3, #32
 800cc20:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f7ff ff6a 	bl	800cafc <HAL_RTC_WaitForSynchro>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d005      	beq.n	800cc3a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2203      	movs	r2, #3
 800cc32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800cc36:	2303      	movs	r3, #3
 800cc38:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cc3a:	4b05      	ldr	r3, [pc, #20]	; (800cc50 <RTC_ExitInitMode+0x78>)
 800cc3c:	699b      	ldr	r3, [r3, #24]
 800cc3e:	4a04      	ldr	r2, [pc, #16]	; (800cc50 <RTC_ExitInitMode+0x78>)
 800cc40:	f043 0320 	orr.w	r3, r3, #32
 800cc44:	6193      	str	r3, [r2, #24]
  }
  return status;
 800cc46:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3710      	adds	r7, #16
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	46007800 	.word	0x46007800

0800cc54 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b085      	sub	sp, #20
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800cc62:	79fb      	ldrb	r3, [r7, #7]
 800cc64:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800cc66:	e005      	b.n	800cc74 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800cc6e:	7afb      	ldrb	r3, [r7, #11]
 800cc70:	3b0a      	subs	r3, #10
 800cc72:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800cc74:	7afb      	ldrb	r3, [r7, #11]
 800cc76:	2b09      	cmp	r3, #9
 800cc78:	d8f6      	bhi.n	800cc68 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	011b      	lsls	r3, r3, #4
 800cc80:	b2da      	uxtb	r2, r3
 800cc82:	7afb      	ldrb	r3, [r7, #11]
 800cc84:	4313      	orrs	r3, r2
 800cc86:	b2db      	uxtb	r3, r3
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3714      	adds	r7, #20
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	4910      	ldr	r1, [pc, #64]	; (800cce8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	689a      	ldr	r2, [r3, #8]
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	431a      	orrs	r2, r3
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	699b      	ldr	r3, [r3, #24]
 800ccba:	490c      	ldr	r1, [pc, #48]	; (800ccec <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800ccc0:	4b0a      	ldr	r3, [pc, #40]	; (800ccec <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ccc2:	6a1b      	ldr	r3, [r3, #32]
 800ccc4:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	6919      	ldr	r1, [r3, #16]
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	695b      	ldr	r3, [r3, #20]
 800ccd0:	041b      	lsls	r3, r3, #16
 800ccd2:	430b      	orrs	r3, r1
 800ccd4:	4905      	ldr	r1, [pc, #20]	; (800ccec <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800ccda:	2300      	movs	r3, #0
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr
 800cce8:	46007800 	.word	0x46007800
 800ccec:	46007c00 	.word	0x46007c00

0800ccf0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d101      	bne.n	800cd02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e0fb      	b.n	800cefa <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4a7f      	ldr	r2, [pc, #508]	; (800cf04 <HAL_SPI_Init+0x214>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d004      	beq.n	800cd16 <HAL_SPI_Init+0x26>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4a7d      	ldr	r2, [pc, #500]	; (800cf08 <HAL_SPI_Init+0x218>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	e000      	b.n	800cd18 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800cd16:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4a78      	ldr	r2, [pc, #480]	; (800cf04 <HAL_SPI_Init+0x214>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d004      	beq.n	800cd32 <HAL_SPI_Init+0x42>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a76      	ldr	r2, [pc, #472]	; (800cf08 <HAL_SPI_Init+0x218>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d105      	bne.n	800cd3e <HAL_SPI_Init+0x4e>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	68db      	ldr	r3, [r3, #12]
 800cd36:	2b0f      	cmp	r3, #15
 800cd38:	d901      	bls.n	800cd3e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e0dd      	b.n	800cefa <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 f8ec 	bl	800cf1c <SPI_GetPacketSize>
 800cd44:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a6e      	ldr	r2, [pc, #440]	; (800cf04 <HAL_SPI_Init+0x214>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d004      	beq.n	800cd5a <HAL_SPI_Init+0x6a>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a6c      	ldr	r2, [pc, #432]	; (800cf08 <HAL_SPI_Init+0x218>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d102      	bne.n	800cd60 <HAL_SPI_Init+0x70>
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2b08      	cmp	r3, #8
 800cd5e:	d816      	bhi.n	800cd8e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cd64:	4a69      	ldr	r2, [pc, #420]	; (800cf0c <HAL_SPI_Init+0x21c>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d00e      	beq.n	800cd88 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a68      	ldr	r2, [pc, #416]	; (800cf10 <HAL_SPI_Init+0x220>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d009      	beq.n	800cd88 <HAL_SPI_Init+0x98>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4a66      	ldr	r2, [pc, #408]	; (800cf14 <HAL_SPI_Init+0x224>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d004      	beq.n	800cd88 <HAL_SPI_Init+0x98>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4a65      	ldr	r2, [pc, #404]	; (800cf18 <HAL_SPI_Init+0x228>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d104      	bne.n	800cd92 <HAL_SPI_Init+0xa2>
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2b10      	cmp	r3, #16
 800cd8c:	d901      	bls.n	800cd92 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e0b3      	b.n	800cefa <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d106      	bne.n	800cdac <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f7f6 fc30 	bl	800360c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2202      	movs	r2, #2
 800cdb0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f022 0201 	bic.w	r2, r2, #1
 800cdc2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cdce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	699b      	ldr	r3, [r3, #24]
 800cdd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cdd8:	d119      	bne.n	800ce0e <HAL_SPI_Init+0x11e>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cde2:	d103      	bne.n	800cdec <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d008      	beq.n	800cdfe <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d10c      	bne.n	800ce0e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cdf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdfc:	d107      	bne.n	800ce0e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	681a      	ldr	r2, [r3, #0]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ce0c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d00f      	beq.n	800ce3a <HAL_SPI_Init+0x14a>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	2b06      	cmp	r3, #6
 800ce20:	d90b      	bls.n	800ce3a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	430a      	orrs	r2, r1
 800ce36:	601a      	str	r2, [r3, #0]
 800ce38:	e007      	b.n	800ce4a <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ce48:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	69da      	ldr	r2, [r3, #28]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce52:	431a      	orrs	r2, r3
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	431a      	orrs	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce5c:	ea42 0103 	orr.w	r1, r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	68da      	ldr	r2, [r3, #12]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	430a      	orrs	r2, r1
 800ce6a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce74:	431a      	orrs	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce7a:	431a      	orrs	r2, r3
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	699b      	ldr	r3, [r3, #24]
 800ce80:	431a      	orrs	r2, r3
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	431a      	orrs	r2, r3
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	695b      	ldr	r3, [r3, #20]
 800ce8c:	431a      	orrs	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	431a      	orrs	r2, r3
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	431a      	orrs	r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce9e:	431a      	orrs	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	431a      	orrs	r2, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ceaa:	431a      	orrs	r2, r3
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceb0:	431a      	orrs	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ceb6:	ea42 0103 	orr.w	r1, r2, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	430a      	orrs	r2, r1
 800cec4:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d00a      	beq.n	800cee8 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	430a      	orrs	r2, r1
 800cee6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2201      	movs	r2, #1
 800cef4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3710      	adds	r7, #16
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	46002000 	.word	0x46002000
 800cf08:	56002000 	.word	0x56002000
 800cf0c:	40013000 	.word	0x40013000
 800cf10:	50013000 	.word	0x50013000
 800cf14:	40003800 	.word	0x40003800
 800cf18:	50003800 	.word	0x50003800

0800cf1c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf28:	095b      	lsrs	r3, r3, #5
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	3301      	adds	r3, #1
 800cf34:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	3307      	adds	r3, #7
 800cf3a:	08db      	lsrs	r3, r3, #3
 800cf3c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	68fa      	ldr	r2, [r7, #12]
 800cf42:	fb02 f303 	mul.w	r3, r2, r3
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3714      	adds	r7, #20
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr

0800cf52 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800cf52:	b480      	push	{r7}
 800cf54:	b083      	sub	sp, #12
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
 800cf5a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d12e      	bne.n	800cfc6 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d101      	bne.n	800cf76 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800cf72:	2302      	movs	r3, #2
 800cf74:	e028      	b.n	800cfc8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2202      	movs	r2, #2
 800cf82:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f022 0201 	bic.w	r2, r2, #1
 800cf94:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800cfa2:	ea42 0103 	orr.w	r1, r2, r3
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	689a      	ldr	r2, [r3, #8]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	430a      	orrs	r2, r1
 800cfb0:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	e000      	b.n	800cfc8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800cfc6:	2301      	movs	r3, #1
  }
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d101      	bne.n	800cfe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	e049      	b.n	800d07a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d106      	bne.n	800d000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2200      	movs	r2, #0
 800cff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 f841 	bl	800d082 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2202      	movs	r2, #2
 800d004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	3304      	adds	r3, #4
 800d010:	4619      	mov	r1, r3
 800d012:	4610      	mov	r0, r2
 800d014:	f000 fa58 	bl	800d4c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2201      	movs	r2, #1
 800d01c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2201      	movs	r2, #1
 800d024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2201      	movs	r2, #1
 800d02c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2201      	movs	r2, #1
 800d034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2201      	movs	r2, #1
 800d03c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2201      	movs	r2, #1
 800d044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2201      	movs	r2, #1
 800d04c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2201      	movs	r2, #1
 800d054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2201      	movs	r2, #1
 800d05c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2201      	movs	r2, #1
 800d064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2201      	movs	r2, #1
 800d06c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2201      	movs	r2, #1
 800d074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d082:	b480      	push	{r7}
 800d084:	b083      	sub	sp, #12
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d08a:	bf00      	nop
 800d08c:	370c      	adds	r7, #12
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr
	...

0800d098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d098:	b480      	push	{r7}
 800d09a:	b085      	sub	sp, #20
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d001      	beq.n	800d0b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	e072      	b.n	800d196 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2202      	movs	r2, #2
 800d0b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	68da      	ldr	r2, [r3, #12]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f042 0201 	orr.w	r2, r2, #1
 800d0c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a35      	ldr	r2, [pc, #212]	; (800d1a4 <HAL_TIM_Base_Start_IT+0x10c>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d040      	beq.n	800d154 <HAL_TIM_Base_Start_IT+0xbc>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a34      	ldr	r2, [pc, #208]	; (800d1a8 <HAL_TIM_Base_Start_IT+0x110>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d03b      	beq.n	800d154 <HAL_TIM_Base_Start_IT+0xbc>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0e4:	d036      	beq.n	800d154 <HAL_TIM_Base_Start_IT+0xbc>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d0ee:	d031      	beq.n	800d154 <HAL_TIM_Base_Start_IT+0xbc>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a2d      	ldr	r2, [pc, #180]	; (800d1ac <HAL_TIM_Base_Start_IT+0x114>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d02c      	beq.n	800d154 <HAL_TIM_Base_Start_IT+0xbc>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4a2c      	ldr	r2, [pc, #176]	; (800d1b0 <HAL_TIM_Base_Start_IT+0x118>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d027      	beq.n	800d154 <HAL_TIM_Base_Start_IT+0xbc>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a2a      	ldr	r2, [pc, #168]	; (800d1b4 <HAL_TIM_Base_Start_IT+0x11c>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d022      	beq.n	800d154 <HAL_TIM_Base_Start_IT+0xbc>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4a29      	ldr	r2, [pc, #164]	; (800d1b8 <HAL_TIM_Base_Start_IT+0x120>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d01d      	beq.n	800d154 <HAL_TIM_Base_Start_IT+0xbc>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a27      	ldr	r2, [pc, #156]	; (800d1bc <HAL_TIM_Base_Start_IT+0x124>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d018      	beq.n	800d154 <HAL_TIM_Base_Start_IT+0xbc>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4a26      	ldr	r2, [pc, #152]	; (800d1c0 <HAL_TIM_Base_Start_IT+0x128>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d013      	beq.n	800d154 <HAL_TIM_Base_Start_IT+0xbc>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a24      	ldr	r2, [pc, #144]	; (800d1c4 <HAL_TIM_Base_Start_IT+0x12c>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d00e      	beq.n	800d154 <HAL_TIM_Base_Start_IT+0xbc>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4a23      	ldr	r2, [pc, #140]	; (800d1c8 <HAL_TIM_Base_Start_IT+0x130>)
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d009      	beq.n	800d154 <HAL_TIM_Base_Start_IT+0xbc>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a21      	ldr	r2, [pc, #132]	; (800d1cc <HAL_TIM_Base_Start_IT+0x134>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d004      	beq.n	800d154 <HAL_TIM_Base_Start_IT+0xbc>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4a20      	ldr	r2, [pc, #128]	; (800d1d0 <HAL_TIM_Base_Start_IT+0x138>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d115      	bne.n	800d180 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	689a      	ldr	r2, [r3, #8]
 800d15a:	4b1e      	ldr	r3, [pc, #120]	; (800d1d4 <HAL_TIM_Base_Start_IT+0x13c>)
 800d15c:	4013      	ands	r3, r2
 800d15e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2b06      	cmp	r3, #6
 800d164:	d015      	beq.n	800d192 <HAL_TIM_Base_Start_IT+0xfa>
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d16c:	d011      	beq.n	800d192 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f042 0201 	orr.w	r2, r2, #1
 800d17c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d17e:	e008      	b.n	800d192 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f042 0201 	orr.w	r2, r2, #1
 800d18e:	601a      	str	r2, [r3, #0]
 800d190:	e000      	b.n	800d194 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d192:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d194:	2300      	movs	r3, #0
}
 800d196:	4618      	mov	r0, r3
 800d198:	3714      	adds	r7, #20
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr
 800d1a2:	bf00      	nop
 800d1a4:	40012c00 	.word	0x40012c00
 800d1a8:	50012c00 	.word	0x50012c00
 800d1ac:	40000400 	.word	0x40000400
 800d1b0:	50000400 	.word	0x50000400
 800d1b4:	40000800 	.word	0x40000800
 800d1b8:	50000800 	.word	0x50000800
 800d1bc:	40000c00 	.word	0x40000c00
 800d1c0:	50000c00 	.word	0x50000c00
 800d1c4:	40013400 	.word	0x40013400
 800d1c8:	50013400 	.word	0x50013400
 800d1cc:	40014000 	.word	0x40014000
 800d1d0:	50014000 	.word	0x50014000
 800d1d4:	00010007 	.word	0x00010007

0800d1d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	68db      	ldr	r3, [r3, #12]
 800d1e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	691b      	ldr	r3, [r3, #16]
 800d1ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	f003 0302 	and.w	r3, r3, #2
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d020      	beq.n	800d23c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	f003 0302 	and.w	r3, r3, #2
 800d200:	2b00      	cmp	r3, #0
 800d202:	d01b      	beq.n	800d23c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f06f 0202 	mvn.w	r2, #2
 800d20c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2201      	movs	r2, #1
 800d212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	699b      	ldr	r3, [r3, #24]
 800d21a:	f003 0303 	and.w	r3, r3, #3
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d003      	beq.n	800d22a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 f931 	bl	800d48a <HAL_TIM_IC_CaptureCallback>
 800d228:	e005      	b.n	800d236 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 f923 	bl	800d476 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f000 f934 	bl	800d49e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2200      	movs	r2, #0
 800d23a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	f003 0304 	and.w	r3, r3, #4
 800d242:	2b00      	cmp	r3, #0
 800d244:	d020      	beq.n	800d288 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f003 0304 	and.w	r3, r3, #4
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d01b      	beq.n	800d288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f06f 0204 	mvn.w	r2, #4
 800d258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2202      	movs	r2, #2
 800d25e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	699b      	ldr	r3, [r3, #24]
 800d266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d003      	beq.n	800d276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 f90b 	bl	800d48a <HAL_TIM_IC_CaptureCallback>
 800d274:	e005      	b.n	800d282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 f8fd 	bl	800d476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 f90e 	bl	800d49e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2200      	movs	r2, #0
 800d286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	f003 0308 	and.w	r3, r3, #8
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d020      	beq.n	800d2d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f003 0308 	and.w	r3, r3, #8
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d01b      	beq.n	800d2d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f06f 0208 	mvn.w	r2, #8
 800d2a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2204      	movs	r2, #4
 800d2aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	69db      	ldr	r3, [r3, #28]
 800d2b2:	f003 0303 	and.w	r3, r3, #3
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d003      	beq.n	800d2c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f000 f8e5 	bl	800d48a <HAL_TIM_IC_CaptureCallback>
 800d2c0:	e005      	b.n	800d2ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f000 f8d7 	bl	800d476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f000 f8e8 	bl	800d49e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	f003 0310 	and.w	r3, r3, #16
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d020      	beq.n	800d320 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f003 0310 	and.w	r3, r3, #16
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d01b      	beq.n	800d320 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f06f 0210 	mvn.w	r2, #16
 800d2f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2208      	movs	r2, #8
 800d2f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	69db      	ldr	r3, [r3, #28]
 800d2fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d302:	2b00      	cmp	r3, #0
 800d304:	d003      	beq.n	800d30e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 f8bf 	bl	800d48a <HAL_TIM_IC_CaptureCallback>
 800d30c:	e005      	b.n	800d31a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f8b1 	bl	800d476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 f8c2 	bl	800d49e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2200      	movs	r2, #0
 800d31e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	f003 0301 	and.w	r3, r3, #1
 800d326:	2b00      	cmp	r3, #0
 800d328:	d00c      	beq.n	800d344 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f003 0301 	and.w	r3, r3, #1
 800d330:	2b00      	cmp	r3, #0
 800d332:	d007      	beq.n	800d344 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f06f 0201 	mvn.w	r2, #1
 800d33c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7f5 f91a 	bl	8002578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d104      	bne.n	800d358 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00c      	beq.n	800d372 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d007      	beq.n	800d372 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d36a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 f9af 	bl	800d6d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d00c      	beq.n	800d396 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d382:	2b00      	cmp	r3, #0
 800d384:	d007      	beq.n	800d396 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d38e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f000 f9a7 	bl	800d6e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d00c      	beq.n	800d3ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d007      	beq.n	800d3ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d3b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f000 f87c 	bl	800d4b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	f003 0320 	and.w	r3, r3, #32
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d00c      	beq.n	800d3de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f003 0320 	and.w	r3, r3, #32
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d007      	beq.n	800d3de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f06f 0220 	mvn.w	r2, #32
 800d3d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f000 f96f 	bl	800d6bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00c      	beq.n	800d402 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d007      	beq.n	800d402 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800d3fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 f97b 	bl	800d6f8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00c      	beq.n	800d426 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d412:	2b00      	cmp	r3, #0
 800d414:	d007      	beq.n	800d426 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800d41e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f000 f973 	bl	800d70c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d00c      	beq.n	800d44a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d436:	2b00      	cmp	r3, #0
 800d438:	d007      	beq.n	800d44a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800d442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f000 f96b 	bl	800d720 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d450:	2b00      	cmp	r3, #0
 800d452:	d00c      	beq.n	800d46e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d007      	beq.n	800d46e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800d466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 f963 	bl	800d734 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d46e:	bf00      	nop
 800d470:	3710      	adds	r7, #16
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}

0800d476 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d476:	b480      	push	{r7}
 800d478:	b083      	sub	sp, #12
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d47e:	bf00      	nop
 800d480:	370c      	adds	r7, #12
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr

0800d48a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d48a:	b480      	push	{r7}
 800d48c:	b083      	sub	sp, #12
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d492:	bf00      	nop
 800d494:	370c      	adds	r7, #12
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr

0800d49e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d49e:	b480      	push	{r7}
 800d4a0:	b083      	sub	sp, #12
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d4a6:	bf00      	nop
 800d4a8:	370c      	adds	r7, #12
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr

0800d4b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d4b2:	b480      	push	{r7}
 800d4b4:	b083      	sub	sp, #12
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d4ba:	bf00      	nop
 800d4bc:	370c      	adds	r7, #12
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr
	...

0800d4c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b085      	sub	sp, #20
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	4a68      	ldr	r2, [pc, #416]	; (800d67c <TIM_Base_SetConfig+0x1b4>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d02b      	beq.n	800d538 <TIM_Base_SetConfig+0x70>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	4a67      	ldr	r2, [pc, #412]	; (800d680 <TIM_Base_SetConfig+0x1b8>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d027      	beq.n	800d538 <TIM_Base_SetConfig+0x70>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4ee:	d023      	beq.n	800d538 <TIM_Base_SetConfig+0x70>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d4f6:	d01f      	beq.n	800d538 <TIM_Base_SetConfig+0x70>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	4a62      	ldr	r2, [pc, #392]	; (800d684 <TIM_Base_SetConfig+0x1bc>)
 800d4fc:	4293      	cmp	r3, r2
 800d4fe:	d01b      	beq.n	800d538 <TIM_Base_SetConfig+0x70>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	4a61      	ldr	r2, [pc, #388]	; (800d688 <TIM_Base_SetConfig+0x1c0>)
 800d504:	4293      	cmp	r3, r2
 800d506:	d017      	beq.n	800d538 <TIM_Base_SetConfig+0x70>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	4a60      	ldr	r2, [pc, #384]	; (800d68c <TIM_Base_SetConfig+0x1c4>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d013      	beq.n	800d538 <TIM_Base_SetConfig+0x70>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	4a5f      	ldr	r2, [pc, #380]	; (800d690 <TIM_Base_SetConfig+0x1c8>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d00f      	beq.n	800d538 <TIM_Base_SetConfig+0x70>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	4a5e      	ldr	r2, [pc, #376]	; (800d694 <TIM_Base_SetConfig+0x1cc>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d00b      	beq.n	800d538 <TIM_Base_SetConfig+0x70>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	4a5d      	ldr	r2, [pc, #372]	; (800d698 <TIM_Base_SetConfig+0x1d0>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d007      	beq.n	800d538 <TIM_Base_SetConfig+0x70>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	4a5c      	ldr	r2, [pc, #368]	; (800d69c <TIM_Base_SetConfig+0x1d4>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d003      	beq.n	800d538 <TIM_Base_SetConfig+0x70>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	4a5b      	ldr	r2, [pc, #364]	; (800d6a0 <TIM_Base_SetConfig+0x1d8>)
 800d534:	4293      	cmp	r3, r2
 800d536:	d108      	bne.n	800d54a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d53e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	68fa      	ldr	r2, [r7, #12]
 800d546:	4313      	orrs	r3, r2
 800d548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	4a4b      	ldr	r2, [pc, #300]	; (800d67c <TIM_Base_SetConfig+0x1b4>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d043      	beq.n	800d5da <TIM_Base_SetConfig+0x112>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	4a4a      	ldr	r2, [pc, #296]	; (800d680 <TIM_Base_SetConfig+0x1b8>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d03f      	beq.n	800d5da <TIM_Base_SetConfig+0x112>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d560:	d03b      	beq.n	800d5da <TIM_Base_SetConfig+0x112>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d568:	d037      	beq.n	800d5da <TIM_Base_SetConfig+0x112>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	4a45      	ldr	r2, [pc, #276]	; (800d684 <TIM_Base_SetConfig+0x1bc>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d033      	beq.n	800d5da <TIM_Base_SetConfig+0x112>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	4a44      	ldr	r2, [pc, #272]	; (800d688 <TIM_Base_SetConfig+0x1c0>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d02f      	beq.n	800d5da <TIM_Base_SetConfig+0x112>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	4a43      	ldr	r2, [pc, #268]	; (800d68c <TIM_Base_SetConfig+0x1c4>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d02b      	beq.n	800d5da <TIM_Base_SetConfig+0x112>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	4a42      	ldr	r2, [pc, #264]	; (800d690 <TIM_Base_SetConfig+0x1c8>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d027      	beq.n	800d5da <TIM_Base_SetConfig+0x112>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	4a41      	ldr	r2, [pc, #260]	; (800d694 <TIM_Base_SetConfig+0x1cc>)
 800d58e:	4293      	cmp	r3, r2
 800d590:	d023      	beq.n	800d5da <TIM_Base_SetConfig+0x112>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	4a40      	ldr	r2, [pc, #256]	; (800d698 <TIM_Base_SetConfig+0x1d0>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d01f      	beq.n	800d5da <TIM_Base_SetConfig+0x112>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	4a3f      	ldr	r2, [pc, #252]	; (800d69c <TIM_Base_SetConfig+0x1d4>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d01b      	beq.n	800d5da <TIM_Base_SetConfig+0x112>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	4a3e      	ldr	r2, [pc, #248]	; (800d6a0 <TIM_Base_SetConfig+0x1d8>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d017      	beq.n	800d5da <TIM_Base_SetConfig+0x112>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	4a3d      	ldr	r2, [pc, #244]	; (800d6a4 <TIM_Base_SetConfig+0x1dc>)
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d013      	beq.n	800d5da <TIM_Base_SetConfig+0x112>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	4a3c      	ldr	r2, [pc, #240]	; (800d6a8 <TIM_Base_SetConfig+0x1e0>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d00f      	beq.n	800d5da <TIM_Base_SetConfig+0x112>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4a3b      	ldr	r2, [pc, #236]	; (800d6ac <TIM_Base_SetConfig+0x1e4>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d00b      	beq.n	800d5da <TIM_Base_SetConfig+0x112>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	4a3a      	ldr	r2, [pc, #232]	; (800d6b0 <TIM_Base_SetConfig+0x1e8>)
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d007      	beq.n	800d5da <TIM_Base_SetConfig+0x112>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	4a39      	ldr	r2, [pc, #228]	; (800d6b4 <TIM_Base_SetConfig+0x1ec>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d003      	beq.n	800d5da <TIM_Base_SetConfig+0x112>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	4a38      	ldr	r2, [pc, #224]	; (800d6b8 <TIM_Base_SetConfig+0x1f0>)
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d108      	bne.n	800d5ec <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d5e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	68db      	ldr	r3, [r3, #12]
 800d5e6:	68fa      	ldr	r2, [r7, #12]
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	695b      	ldr	r3, [r3, #20]
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	68fa      	ldr	r2, [r7, #12]
 800d5fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	689a      	ldr	r2, [r3, #8]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	4a1a      	ldr	r2, [pc, #104]	; (800d67c <TIM_Base_SetConfig+0x1b4>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d023      	beq.n	800d660 <TIM_Base_SetConfig+0x198>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	4a19      	ldr	r2, [pc, #100]	; (800d680 <TIM_Base_SetConfig+0x1b8>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d01f      	beq.n	800d660 <TIM_Base_SetConfig+0x198>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4a1e      	ldr	r2, [pc, #120]	; (800d69c <TIM_Base_SetConfig+0x1d4>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d01b      	beq.n	800d660 <TIM_Base_SetConfig+0x198>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	4a1d      	ldr	r2, [pc, #116]	; (800d6a0 <TIM_Base_SetConfig+0x1d8>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d017      	beq.n	800d660 <TIM_Base_SetConfig+0x198>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	4a1c      	ldr	r2, [pc, #112]	; (800d6a4 <TIM_Base_SetConfig+0x1dc>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d013      	beq.n	800d660 <TIM_Base_SetConfig+0x198>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	4a1b      	ldr	r2, [pc, #108]	; (800d6a8 <TIM_Base_SetConfig+0x1e0>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d00f      	beq.n	800d660 <TIM_Base_SetConfig+0x198>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	4a1a      	ldr	r2, [pc, #104]	; (800d6ac <TIM_Base_SetConfig+0x1e4>)
 800d644:	4293      	cmp	r3, r2
 800d646:	d00b      	beq.n	800d660 <TIM_Base_SetConfig+0x198>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	4a19      	ldr	r2, [pc, #100]	; (800d6b0 <TIM_Base_SetConfig+0x1e8>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d007      	beq.n	800d660 <TIM_Base_SetConfig+0x198>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	4a18      	ldr	r2, [pc, #96]	; (800d6b4 <TIM_Base_SetConfig+0x1ec>)
 800d654:	4293      	cmp	r3, r2
 800d656:	d003      	beq.n	800d660 <TIM_Base_SetConfig+0x198>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	4a17      	ldr	r2, [pc, #92]	; (800d6b8 <TIM_Base_SetConfig+0x1f0>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d103      	bne.n	800d668 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	691a      	ldr	r2, [r3, #16]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2201      	movs	r2, #1
 800d66c:	615a      	str	r2, [r3, #20]
}
 800d66e:	bf00      	nop
 800d670:	3714      	adds	r7, #20
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop
 800d67c:	40012c00 	.word	0x40012c00
 800d680:	50012c00 	.word	0x50012c00
 800d684:	40000400 	.word	0x40000400
 800d688:	50000400 	.word	0x50000400
 800d68c:	40000800 	.word	0x40000800
 800d690:	50000800 	.word	0x50000800
 800d694:	40000c00 	.word	0x40000c00
 800d698:	50000c00 	.word	0x50000c00
 800d69c:	40013400 	.word	0x40013400
 800d6a0:	50013400 	.word	0x50013400
 800d6a4:	40014000 	.word	0x40014000
 800d6a8:	50014000 	.word	0x50014000
 800d6ac:	40014400 	.word	0x40014400
 800d6b0:	50014400 	.word	0x50014400
 800d6b4:	40014800 	.word	0x40014800
 800d6b8:	50014800 	.word	0x50014800

0800d6bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b083      	sub	sp, #12
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d6c4:	bf00      	nop
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d6d8:	bf00      	nop
 800d6da:	370c      	adds	r7, #12
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr

0800d6e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b083      	sub	sp, #12
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d6ec:	bf00      	nop
 800d6ee:	370c      	adds	r7, #12
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d700:	bf00      	nop
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d714:	bf00      	nop
 800d716:	370c      	adds	r7, #12
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr

0800d720 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d720:	b480      	push	{r7}
 800d722:	b083      	sub	sp, #12
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d728:	bf00      	nop
 800d72a:	370c      	adds	r7, #12
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d734:	b480      	push	{r7}
 800d736:	b083      	sub	sp, #12
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d73c:	bf00      	nop
 800d73e:	370c      	adds	r7, #12
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr

0800d748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b082      	sub	sp, #8
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d101      	bne.n	800d75a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d756:	2301      	movs	r3, #1
 800d758:	e042      	b.n	800d7e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d760:	2b00      	cmp	r3, #0
 800d762:	d106      	bne.n	800d772 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f7f5 fb5d 	bl	8002e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2224      	movs	r2, #36	; 0x24
 800d776:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f022 0201 	bic.w	r2, r2, #1
 800d788:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d002      	beq.n	800d798 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f000 f9d6 	bl	800db44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f000 f825 	bl	800d7e8 <UART_SetConfig>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	d101      	bne.n	800d7a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	e01b      	b.n	800d7e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	685a      	ldr	r2, [r3, #4]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d7b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	689a      	ldr	r2, [r3, #8]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d7c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	681a      	ldr	r2, [r3, #0]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f042 0201 	orr.w	r2, r2, #1
 800d7d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 fa55 	bl	800dc88 <UART_CheckIdleState>
 800d7de:	4603      	mov	r3, r0
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3708      	adds	r7, #8
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d7ec:	b094      	sub	sp, #80	; 0x50
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7fa:	681a      	ldr	r2, [r3, #0]
 800d7fc:	4b83      	ldr	r3, [pc, #524]	; (800da0c <UART_SetConfig+0x224>)
 800d7fe:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d802:	689a      	ldr	r2, [r3, #8]
 800d804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d806:	691b      	ldr	r3, [r3, #16]
 800d808:	431a      	orrs	r2, r3
 800d80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d80c:	695b      	ldr	r3, [r3, #20]
 800d80e:	431a      	orrs	r2, r3
 800d810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d812:	69db      	ldr	r3, [r3, #28]
 800d814:	4313      	orrs	r3, r2
 800d816:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	497c      	ldr	r1, [pc, #496]	; (800da10 <UART_SetConfig+0x228>)
 800d820:	4019      	ands	r1, r3
 800d822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d824:	681a      	ldr	r2, [r3, #0]
 800d826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d828:	430b      	orrs	r3, r1
 800d82a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d838:	68d9      	ldr	r1, [r3, #12]
 800d83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	ea40 0301 	orr.w	r3, r0, r1
 800d842:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d846:	699b      	ldr	r3, [r3, #24]
 800d848:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84c:	681a      	ldr	r2, [r3, #0]
 800d84e:	4b6f      	ldr	r3, [pc, #444]	; (800da0c <UART_SetConfig+0x224>)
 800d850:	429a      	cmp	r2, r3
 800d852:	d009      	beq.n	800d868 <UART_SetConfig+0x80>
 800d854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	4b6e      	ldr	r3, [pc, #440]	; (800da14 <UART_SetConfig+0x22c>)
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d004      	beq.n	800d868 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d860:	6a1a      	ldr	r2, [r3, #32]
 800d862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d864:	4313      	orrs	r3, r2
 800d866:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	689b      	ldr	r3, [r3, #8]
 800d86e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800d872:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800d876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d87c:	430b      	orrs	r3, r1
 800d87e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d886:	f023 000f 	bic.w	r0, r3, #15
 800d88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d890:	681a      	ldr	r2, [r3, #0]
 800d892:	ea40 0301 	orr.w	r3, r0, r1
 800d896:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	4b5e      	ldr	r3, [pc, #376]	; (800da18 <UART_SetConfig+0x230>)
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d102      	bne.n	800d8a8 <UART_SetConfig+0xc0>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8a6:	e032      	b.n	800d90e <UART_SetConfig+0x126>
 800d8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	4b5b      	ldr	r3, [pc, #364]	; (800da1c <UART_SetConfig+0x234>)
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d102      	bne.n	800d8b8 <UART_SetConfig+0xd0>
 800d8b2:	2302      	movs	r3, #2
 800d8b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8b6:	e02a      	b.n	800d90e <UART_SetConfig+0x126>
 800d8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ba:	681a      	ldr	r2, [r3, #0]
 800d8bc:	4b58      	ldr	r3, [pc, #352]	; (800da20 <UART_SetConfig+0x238>)
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d102      	bne.n	800d8c8 <UART_SetConfig+0xe0>
 800d8c2:	2304      	movs	r3, #4
 800d8c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8c6:	e022      	b.n	800d90e <UART_SetConfig+0x126>
 800d8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	4b55      	ldr	r3, [pc, #340]	; (800da24 <UART_SetConfig+0x23c>)
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d102      	bne.n	800d8d8 <UART_SetConfig+0xf0>
 800d8d2:	2308      	movs	r3, #8
 800d8d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8d6:	e01a      	b.n	800d90e <UART_SetConfig+0x126>
 800d8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8da:	681a      	ldr	r2, [r3, #0]
 800d8dc:	4b52      	ldr	r3, [pc, #328]	; (800da28 <UART_SetConfig+0x240>)
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d102      	bne.n	800d8e8 <UART_SetConfig+0x100>
 800d8e2:	2310      	movs	r3, #16
 800d8e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8e6:	e012      	b.n	800d90e <UART_SetConfig+0x126>
 800d8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	4b4f      	ldr	r3, [pc, #316]	; (800da2c <UART_SetConfig+0x244>)
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d103      	bne.n	800d8fa <UART_SetConfig+0x112>
 800d8f2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800d8f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8f8:	e009      	b.n	800d90e <UART_SetConfig+0x126>
 800d8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	4b43      	ldr	r3, [pc, #268]	; (800da0c <UART_SetConfig+0x224>)
 800d900:	429a      	cmp	r2, r3
 800d902:	d102      	bne.n	800d90a <UART_SetConfig+0x122>
 800d904:	2320      	movs	r3, #32
 800d906:	64bb      	str	r3, [r7, #72]	; 0x48
 800d908:	e001      	b.n	800d90e <UART_SetConfig+0x126>
 800d90a:	2300      	movs	r3, #0
 800d90c:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	4b3e      	ldr	r3, [pc, #248]	; (800da0c <UART_SetConfig+0x224>)
 800d914:	429a      	cmp	r2, r3
 800d916:	d005      	beq.n	800d924 <UART_SetConfig+0x13c>
 800d918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	4b3d      	ldr	r3, [pc, #244]	; (800da14 <UART_SetConfig+0x22c>)
 800d91e:	429a      	cmp	r2, r3
 800d920:	f040 8088 	bne.w	800da34 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d926:	2200      	movs	r2, #0
 800d928:	623b      	str	r3, [r7, #32]
 800d92a:	627a      	str	r2, [r7, #36]	; 0x24
 800d92c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d930:	f7fd fa78 	bl	800ae24 <HAL_RCCEx_GetPeriphCLKFreq>
 800d934:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d938:	2b00      	cmp	r3, #0
 800d93a:	f000 80eb 	beq.w	800db14 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d942:	4a3b      	ldr	r2, [pc, #236]	; (800da30 <UART_SetConfig+0x248>)
 800d944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d948:	461a      	mov	r2, r3
 800d94a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d94c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d950:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d954:	685a      	ldr	r2, [r3, #4]
 800d956:	4613      	mov	r3, r2
 800d958:	005b      	lsls	r3, r3, #1
 800d95a:	4413      	add	r3, r2
 800d95c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d95e:	429a      	cmp	r2, r3
 800d960:	d305      	bcc.n	800d96e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d903      	bls.n	800d976 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800d96e:	2301      	movs	r3, #1
 800d970:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d974:	e048      	b.n	800da08 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d978:	2200      	movs	r2, #0
 800d97a:	61bb      	str	r3, [r7, #24]
 800d97c:	61fa      	str	r2, [r7, #28]
 800d97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d982:	4a2b      	ldr	r2, [pc, #172]	; (800da30 <UART_SetConfig+0x248>)
 800d984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d988:	b29b      	uxth	r3, r3
 800d98a:	2200      	movs	r2, #0
 800d98c:	613b      	str	r3, [r7, #16]
 800d98e:	617a      	str	r2, [r7, #20]
 800d990:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d994:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d998:	f7f2 ff90 	bl	80008bc <__aeabi_uldivmod>
 800d99c:	4602      	mov	r2, r0
 800d99e:	460b      	mov	r3, r1
 800d9a0:	4610      	mov	r0, r2
 800d9a2:	4619      	mov	r1, r3
 800d9a4:	f04f 0200 	mov.w	r2, #0
 800d9a8:	f04f 0300 	mov.w	r3, #0
 800d9ac:	020b      	lsls	r3, r1, #8
 800d9ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d9b2:	0202      	lsls	r2, r0, #8
 800d9b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9b6:	6849      	ldr	r1, [r1, #4]
 800d9b8:	0849      	lsrs	r1, r1, #1
 800d9ba:	2000      	movs	r0, #0
 800d9bc:	460c      	mov	r4, r1
 800d9be:	4605      	mov	r5, r0
 800d9c0:	eb12 0804 	adds.w	r8, r2, r4
 800d9c4:	eb43 0905 	adc.w	r9, r3, r5
 800d9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	60bb      	str	r3, [r7, #8]
 800d9d0:	60fa      	str	r2, [r7, #12]
 800d9d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d9d6:	4640      	mov	r0, r8
 800d9d8:	4649      	mov	r1, r9
 800d9da:	f7f2 ff6f 	bl	80008bc <__aeabi_uldivmod>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d9ec:	d308      	bcc.n	800da00 <UART_SetConfig+0x218>
 800d9ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d9f4:	d204      	bcs.n	800da00 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800d9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9fc:	60da      	str	r2, [r3, #12]
 800d9fe:	e003      	b.n	800da08 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800da00:	2301      	movs	r3, #1
 800da02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800da06:	e085      	b.n	800db14 <UART_SetConfig+0x32c>
 800da08:	e084      	b.n	800db14 <UART_SetConfig+0x32c>
 800da0a:	bf00      	nop
 800da0c:	46002400 	.word	0x46002400
 800da10:	cfff69f3 	.word	0xcfff69f3
 800da14:	56002400 	.word	0x56002400
 800da18:	40013800 	.word	0x40013800
 800da1c:	40004400 	.word	0x40004400
 800da20:	40004800 	.word	0x40004800
 800da24:	40004c00 	.word	0x40004c00
 800da28:	40005000 	.word	0x40005000
 800da2c:	40006400 	.word	0x40006400
 800da30:	0800e304 	.word	0x0800e304
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800da34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da36:	69db      	ldr	r3, [r3, #28]
 800da38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da3c:	d13c      	bne.n	800dab8 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800da3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da40:	2200      	movs	r2, #0
 800da42:	603b      	str	r3, [r7, #0]
 800da44:	607a      	str	r2, [r7, #4]
 800da46:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da4a:	f7fd f9eb 	bl	800ae24 <HAL_RCCEx_GetPeriphCLKFreq>
 800da4e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800da50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da52:	2b00      	cmp	r3, #0
 800da54:	d05e      	beq.n	800db14 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da5a:	4a39      	ldr	r2, [pc, #228]	; (800db40 <UART_SetConfig+0x358>)
 800da5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da60:	461a      	mov	r2, r3
 800da62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da64:	fbb3 f3f2 	udiv	r3, r3, r2
 800da68:	005a      	lsls	r2, r3, #1
 800da6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	085b      	lsrs	r3, r3, #1
 800da70:	441a      	add	r2, r3
 800da72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	fbb2 f3f3 	udiv	r3, r2, r3
 800da7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da7e:	2b0f      	cmp	r3, #15
 800da80:	d916      	bls.n	800dab0 <UART_SetConfig+0x2c8>
 800da82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da88:	d212      	bcs.n	800dab0 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	f023 030f 	bic.w	r3, r3, #15
 800da92:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da96:	085b      	lsrs	r3, r3, #1
 800da98:	b29b      	uxth	r3, r3
 800da9a:	f003 0307 	and.w	r3, r3, #7
 800da9e:	b29a      	uxth	r2, r3
 800daa0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800daa2:	4313      	orrs	r3, r2
 800daa4:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800daa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800daac:	60da      	str	r2, [r3, #12]
 800daae:	e031      	b.n	800db14 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800dab0:	2301      	movs	r3, #1
 800dab2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dab6:	e02d      	b.n	800db14 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800dab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daba:	2200      	movs	r2, #0
 800dabc:	469a      	mov	sl, r3
 800dabe:	4693      	mov	fp, r2
 800dac0:	4650      	mov	r0, sl
 800dac2:	4659      	mov	r1, fp
 800dac4:	f7fd f9ae 	bl	800ae24 <HAL_RCCEx_GetPeriphCLKFreq>
 800dac8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800daca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d021      	beq.n	800db14 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad4:	4a1a      	ldr	r2, [pc, #104]	; (800db40 <UART_SetConfig+0x358>)
 800dad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dada:	461a      	mov	r2, r3
 800dadc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dade:	fbb3 f2f2 	udiv	r2, r3, r2
 800dae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	085b      	lsrs	r3, r3, #1
 800dae8:	441a      	add	r2, r3
 800daea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	fbb2 f3f3 	udiv	r3, r2, r3
 800daf2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800daf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daf6:	2b0f      	cmp	r3, #15
 800daf8:	d909      	bls.n	800db0e <UART_SetConfig+0x326>
 800dafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dafc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db00:	d205      	bcs.n	800db0e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800db02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db04:	b29a      	uxth	r2, r3
 800db06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	60da      	str	r2, [r3, #12]
 800db0c:	e002      	b.n	800db14 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800db0e:	2301      	movs	r3, #1
 800db10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800db14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db16:	2201      	movs	r2, #1
 800db18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800db1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1e:	2201      	movs	r2, #1
 800db20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db26:	2200      	movs	r2, #0
 800db28:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800db2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2c:	2200      	movs	r2, #0
 800db2e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800db30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800db34:	4618      	mov	r0, r3
 800db36:	3750      	adds	r7, #80	; 0x50
 800db38:	46bd      	mov	sp, r7
 800db3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800db3e:	bf00      	nop
 800db40:	0800e304 	.word	0x0800e304

0800db44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800db44:	b480      	push	{r7}
 800db46:	b083      	sub	sp, #12
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db50:	f003 0308 	and.w	r3, r3, #8
 800db54:	2b00      	cmp	r3, #0
 800db56:	d00a      	beq.n	800db6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	430a      	orrs	r2, r1
 800db6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db72:	f003 0301 	and.w	r3, r3, #1
 800db76:	2b00      	cmp	r3, #0
 800db78:	d00a      	beq.n	800db90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	430a      	orrs	r2, r1
 800db8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db94:	f003 0302 	and.w	r3, r3, #2
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d00a      	beq.n	800dbb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	430a      	orrs	r2, r1
 800dbb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbb6:	f003 0304 	and.w	r3, r3, #4
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00a      	beq.n	800dbd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	430a      	orrs	r2, r1
 800dbd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbd8:	f003 0310 	and.w	r3, r3, #16
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d00a      	beq.n	800dbf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	689b      	ldr	r3, [r3, #8]
 800dbe6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	430a      	orrs	r2, r1
 800dbf4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbfa:	f003 0320 	and.w	r3, r3, #32
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00a      	beq.n	800dc18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	689b      	ldr	r3, [r3, #8]
 800dc08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	430a      	orrs	r2, r1
 800dc16:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d01a      	beq.n	800dc5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	430a      	orrs	r2, r1
 800dc38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc42:	d10a      	bne.n	800dc5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	430a      	orrs	r2, r1
 800dc58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d00a      	beq.n	800dc7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	430a      	orrs	r2, r1
 800dc7a:	605a      	str	r2, [r3, #4]
  }
}
 800dc7c:	bf00      	nop
 800dc7e:	370c      	adds	r7, #12
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr

0800dc88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b098      	sub	sp, #96	; 0x60
 800dc8c:	af02      	add	r7, sp, #8
 800dc8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2200      	movs	r2, #0
 800dc94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dc98:	f7f5 fee8 	bl	8003a6c <HAL_GetTick>
 800dc9c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f003 0308 	and.w	r3, r3, #8
 800dca8:	2b08      	cmp	r3, #8
 800dcaa:	d12f      	bne.n	800dd0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dcac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dcb0:	9300      	str	r3, [sp, #0]
 800dcb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f000 f88e 	bl	800dddc <UART_WaitOnFlagUntilTimeout>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d022      	beq.n	800dd0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcce:	e853 3f00 	ldrex	r3, [r3]
 800dcd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dcd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcda:	653b      	str	r3, [r7, #80]	; 0x50
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	461a      	mov	r2, r3
 800dce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dce4:	647b      	str	r3, [r7, #68]	; 0x44
 800dce6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dcea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dcec:	e841 2300 	strex	r3, r2, [r1]
 800dcf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dcf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d1e6      	bne.n	800dcc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2220      	movs	r2, #32
 800dcfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd08:	2303      	movs	r3, #3
 800dd0a:	e063      	b.n	800ddd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f003 0304 	and.w	r3, r3, #4
 800dd16:	2b04      	cmp	r3, #4
 800dd18:	d149      	bne.n	800ddae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd1e:	9300      	str	r3, [sp, #0]
 800dd20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd22:	2200      	movs	r2, #0
 800dd24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f000 f857 	bl	800dddc <UART_WaitOnFlagUntilTimeout>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d03c      	beq.n	800ddae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd3c:	e853 3f00 	ldrex	r3, [r3]
 800dd40:	623b      	str	r3, [r7, #32]
   return(result);
 800dd42:	6a3b      	ldr	r3, [r7, #32]
 800dd44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd48:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	461a      	mov	r2, r3
 800dd50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd52:	633b      	str	r3, [r7, #48]	; 0x30
 800dd54:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd5a:	e841 2300 	strex	r3, r2, [r1]
 800dd5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d1e6      	bne.n	800dd34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	3308      	adds	r3, #8
 800dd6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	e853 3f00 	ldrex	r3, [r3]
 800dd74:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f023 0301 	bic.w	r3, r3, #1
 800dd7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	3308      	adds	r3, #8
 800dd84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd86:	61fa      	str	r2, [r7, #28]
 800dd88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd8a:	69b9      	ldr	r1, [r7, #24]
 800dd8c:	69fa      	ldr	r2, [r7, #28]
 800dd8e:	e841 2300 	strex	r3, r2, [r1]
 800dd92:	617b      	str	r3, [r7, #20]
   return(result);
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d1e5      	bne.n	800dd66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2220      	movs	r2, #32
 800dd9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2200      	movs	r2, #0
 800dda6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ddaa:	2303      	movs	r3, #3
 800ddac:	e012      	b.n	800ddd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2220      	movs	r2, #32
 800ddb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2220      	movs	r2, #32
 800ddba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ddd2:	2300      	movs	r3, #0
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3758      	adds	r7, #88	; 0x58
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	60b9      	str	r1, [r7, #8]
 800dde6:	603b      	str	r3, [r7, #0]
 800dde8:	4613      	mov	r3, r2
 800ddea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ddec:	e049      	b.n	800de82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddf4:	d045      	beq.n	800de82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ddf6:	f7f5 fe39 	bl	8003a6c <HAL_GetTick>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	1ad3      	subs	r3, r2, r3
 800de00:	69ba      	ldr	r2, [r7, #24]
 800de02:	429a      	cmp	r2, r3
 800de04:	d302      	bcc.n	800de0c <UART_WaitOnFlagUntilTimeout+0x30>
 800de06:	69bb      	ldr	r3, [r7, #24]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d101      	bne.n	800de10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800de0c:	2303      	movs	r3, #3
 800de0e:	e048      	b.n	800dea2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f003 0304 	and.w	r3, r3, #4
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d031      	beq.n	800de82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	69db      	ldr	r3, [r3, #28]
 800de24:	f003 0308 	and.w	r3, r3, #8
 800de28:	2b08      	cmp	r3, #8
 800de2a:	d110      	bne.n	800de4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	2208      	movs	r2, #8
 800de32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800de34:	68f8      	ldr	r0, [r7, #12]
 800de36:	f000 f838 	bl	800deaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2208      	movs	r2, #8
 800de3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2200      	movs	r2, #0
 800de46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800de4a:	2301      	movs	r3, #1
 800de4c:	e029      	b.n	800dea2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	69db      	ldr	r3, [r3, #28]
 800de54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de5c:	d111      	bne.n	800de82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800de68:	68f8      	ldr	r0, [r7, #12]
 800de6a:	f000 f81e 	bl	800deaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	2220      	movs	r2, #32
 800de72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2200      	movs	r2, #0
 800de7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800de7e:	2303      	movs	r3, #3
 800de80:	e00f      	b.n	800dea2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	69da      	ldr	r2, [r3, #28]
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	4013      	ands	r3, r2
 800de8c:	68ba      	ldr	r2, [r7, #8]
 800de8e:	429a      	cmp	r2, r3
 800de90:	bf0c      	ite	eq
 800de92:	2301      	moveq	r3, #1
 800de94:	2300      	movne	r3, #0
 800de96:	b2db      	uxtb	r3, r3
 800de98:	461a      	mov	r2, r3
 800de9a:	79fb      	ldrb	r3, [r7, #7]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d0a6      	beq.n	800ddee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dea0:	2300      	movs	r3, #0
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3710      	adds	r7, #16
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}

0800deaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800deaa:	b480      	push	{r7}
 800deac:	b095      	sub	sp, #84	; 0x54
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deba:	e853 3f00 	ldrex	r3, [r3]
 800debe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	461a      	mov	r2, r3
 800dece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ded0:	643b      	str	r3, [r7, #64]	; 0x40
 800ded2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ded4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ded6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ded8:	e841 2300 	strex	r3, r2, [r1]
 800dedc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d1e6      	bne.n	800deb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	3308      	adds	r3, #8
 800deea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deec:	6a3b      	ldr	r3, [r7, #32]
 800deee:	e853 3f00 	ldrex	r3, [r3]
 800def2:	61fb      	str	r3, [r7, #28]
   return(result);
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800defa:	f023 0301 	bic.w	r3, r3, #1
 800defe:	64bb      	str	r3, [r7, #72]	; 0x48
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	3308      	adds	r3, #8
 800df06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df08:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df10:	e841 2300 	strex	r3, r2, [r1]
 800df14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d1e3      	bne.n	800dee4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df20:	2b01      	cmp	r3, #1
 800df22:	d118      	bne.n	800df56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	e853 3f00 	ldrex	r3, [r3]
 800df30:	60bb      	str	r3, [r7, #8]
   return(result);
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	f023 0310 	bic.w	r3, r3, #16
 800df38:	647b      	str	r3, [r7, #68]	; 0x44
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	461a      	mov	r2, r3
 800df40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df42:	61bb      	str	r3, [r7, #24]
 800df44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df46:	6979      	ldr	r1, [r7, #20]
 800df48:	69ba      	ldr	r2, [r7, #24]
 800df4a:	e841 2300 	strex	r3, r2, [r1]
 800df4e:	613b      	str	r3, [r7, #16]
   return(result);
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d1e6      	bne.n	800df24 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2220      	movs	r2, #32
 800df5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2200      	movs	r2, #0
 800df62:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2200      	movs	r2, #0
 800df68:	675a      	str	r2, [r3, #116]	; 0x74
}
 800df6a:	bf00      	nop
 800df6c:	3754      	adds	r7, #84	; 0x54
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr

0800df76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800df76:	b480      	push	{r7}
 800df78:	b085      	sub	sp, #20
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800df84:	2b01      	cmp	r3, #1
 800df86:	d101      	bne.n	800df8c <HAL_UARTEx_DisableFifoMode+0x16>
 800df88:	2302      	movs	r3, #2
 800df8a:	e027      	b.n	800dfdc <HAL_UARTEx_DisableFifoMode+0x66>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2201      	movs	r2, #1
 800df90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2224      	movs	r2, #36	; 0x24
 800df98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f022 0201 	bic.w	r2, r2, #1
 800dfb2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dfba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	68fa      	ldr	r2, [r7, #12]
 800dfc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2220      	movs	r2, #32
 800dfce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dfda:	2300      	movs	r3, #0
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3714      	adds	r7, #20
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr

0800dfe8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b084      	sub	sp, #16
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d101      	bne.n	800e000 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dffc:	2302      	movs	r3, #2
 800dffe:	e02d      	b.n	800e05c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2201      	movs	r2, #1
 800e004:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2224      	movs	r2, #36	; 0x24
 800e00c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	681a      	ldr	r2, [r3, #0]
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	f022 0201 	bic.w	r2, r2, #1
 800e026:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	689b      	ldr	r3, [r3, #8]
 800e02e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	683a      	ldr	r2, [r7, #0]
 800e038:	430a      	orrs	r2, r1
 800e03a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f000 f84f 	bl	800e0e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	68fa      	ldr	r2, [r7, #12]
 800e048:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2220      	movs	r2, #32
 800e04e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2200      	movs	r2, #0
 800e056:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e05a:	2300      	movs	r3, #0
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3710      	adds	r7, #16
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b084      	sub	sp, #16
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e074:	2b01      	cmp	r3, #1
 800e076:	d101      	bne.n	800e07c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e078:	2302      	movs	r3, #2
 800e07a:	e02d      	b.n	800e0d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2201      	movs	r2, #1
 800e080:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2224      	movs	r2, #36	; 0x24
 800e088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f022 0201 	bic.w	r2, r2, #1
 800e0a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	689b      	ldr	r3, [r3, #8]
 800e0aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	683a      	ldr	r2, [r7, #0]
 800e0b4:	430a      	orrs	r2, r1
 800e0b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f000 f811 	bl	800e0e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	68fa      	ldr	r2, [r7, #12]
 800e0c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2220      	movs	r2, #32
 800e0ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e0d6:	2300      	movs	r3, #0
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3710      	adds	r7, #16
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b085      	sub	sp, #20
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d108      	bne.n	800e102 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e100:	e031      	b.n	800e166 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e102:	2308      	movs	r3, #8
 800e104:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e106:	2308      	movs	r3, #8
 800e108:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	689b      	ldr	r3, [r3, #8]
 800e110:	0e5b      	lsrs	r3, r3, #25
 800e112:	b2db      	uxtb	r3, r3
 800e114:	f003 0307 	and.w	r3, r3, #7
 800e118:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	689b      	ldr	r3, [r3, #8]
 800e120:	0f5b      	lsrs	r3, r3, #29
 800e122:	b2db      	uxtb	r3, r3
 800e124:	f003 0307 	and.w	r3, r3, #7
 800e128:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e12a:	7bbb      	ldrb	r3, [r7, #14]
 800e12c:	7b3a      	ldrb	r2, [r7, #12]
 800e12e:	4911      	ldr	r1, [pc, #68]	; (800e174 <UARTEx_SetNbDataToProcess+0x94>)
 800e130:	5c8a      	ldrb	r2, [r1, r2]
 800e132:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e136:	7b3a      	ldrb	r2, [r7, #12]
 800e138:	490f      	ldr	r1, [pc, #60]	; (800e178 <UARTEx_SetNbDataToProcess+0x98>)
 800e13a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e13c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e140:	b29a      	uxth	r2, r3
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e148:	7bfb      	ldrb	r3, [r7, #15]
 800e14a:	7b7a      	ldrb	r2, [r7, #13]
 800e14c:	4909      	ldr	r1, [pc, #36]	; (800e174 <UARTEx_SetNbDataToProcess+0x94>)
 800e14e:	5c8a      	ldrb	r2, [r1, r2]
 800e150:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e154:	7b7a      	ldrb	r2, [r7, #13]
 800e156:	4908      	ldr	r1, [pc, #32]	; (800e178 <UARTEx_SetNbDataToProcess+0x98>)
 800e158:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e15a:	fb93 f3f2 	sdiv	r3, r3, r2
 800e15e:	b29a      	uxth	r2, r3
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e166:	bf00      	nop
 800e168:	3714      	adds	r7, #20
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr
 800e172:	bf00      	nop
 800e174:	0800e31c 	.word	0x0800e31c
 800e178:	0800e324 	.word	0x0800e324

0800e17c <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b083      	sub	sp, #12
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	f043 0202 	orr.w	r2, r3, #2
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	685a      	ldr	r2, [r3, #4]
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	021b      	lsls	r3, r3, #8
 800e19c:	431a      	orrs	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	f023 0202 	bic.w	r2, r3, #2
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	601a      	str	r2, [r3, #0]
}
 800e1ae:	bf00      	nop
 800e1b0:	370c      	adds	r7, #12
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b8:	4770      	bx	lr

0800e1ba <memset>:
 800e1ba:	4402      	add	r2, r0
 800e1bc:	4603      	mov	r3, r0
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d100      	bne.n	800e1c4 <memset+0xa>
 800e1c2:	4770      	bx	lr
 800e1c4:	f803 1b01 	strb.w	r1, [r3], #1
 800e1c8:	e7f9      	b.n	800e1be <memset+0x4>
	...

0800e1cc <__libc_init_array>:
 800e1cc:	b570      	push	{r4, r5, r6, lr}
 800e1ce:	4d0d      	ldr	r5, [pc, #52]	; (800e204 <__libc_init_array+0x38>)
 800e1d0:	2600      	movs	r6, #0
 800e1d2:	4c0d      	ldr	r4, [pc, #52]	; (800e208 <__libc_init_array+0x3c>)
 800e1d4:	1b64      	subs	r4, r4, r5
 800e1d6:	10a4      	asrs	r4, r4, #2
 800e1d8:	42a6      	cmp	r6, r4
 800e1da:	d109      	bne.n	800e1f0 <__libc_init_array+0x24>
 800e1dc:	4d0b      	ldr	r5, [pc, #44]	; (800e20c <__libc_init_array+0x40>)
 800e1de:	2600      	movs	r6, #0
 800e1e0:	4c0b      	ldr	r4, [pc, #44]	; (800e210 <__libc_init_array+0x44>)
 800e1e2:	f000 f817 	bl	800e214 <_init>
 800e1e6:	1b64      	subs	r4, r4, r5
 800e1e8:	10a4      	asrs	r4, r4, #2
 800e1ea:	42a6      	cmp	r6, r4
 800e1ec:	d105      	bne.n	800e1fa <__libc_init_array+0x2e>
 800e1ee:	bd70      	pop	{r4, r5, r6, pc}
 800e1f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1f4:	3601      	adds	r6, #1
 800e1f6:	4798      	blx	r3
 800e1f8:	e7ee      	b.n	800e1d8 <__libc_init_array+0xc>
 800e1fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1fe:	3601      	adds	r6, #1
 800e200:	4798      	blx	r3
 800e202:	e7f2      	b.n	800e1ea <__libc_init_array+0x1e>
 800e204:	0800e334 	.word	0x0800e334
 800e208:	0800e334 	.word	0x0800e334
 800e20c:	0800e334 	.word	0x0800e334
 800e210:	0800e338 	.word	0x0800e338

0800e214 <_init>:
 800e214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e216:	bf00      	nop
 800e218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e21a:	bc08      	pop	{r3}
 800e21c:	469e      	mov	lr, r3
 800e21e:	4770      	bx	lr

0800e220 <_fini>:
 800e220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e222:	bf00      	nop
 800e224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e226:	bc08      	pop	{r3}
 800e228:	469e      	mov	lr, r3
 800e22a:	4770      	bx	lr
