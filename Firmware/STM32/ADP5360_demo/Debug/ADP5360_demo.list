
ADP5360_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000effc  0800026c  0800026c  0001026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800f268  0800f268  0001f268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f368  0800f368  0001f368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f370  0800f370  0001f370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f374  0800f374  0001f374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  0800f378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000d64  2000000c  0800f381  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000d70  0800f381  00020d70  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY
 11 .debug_info   00037888  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005cfb  00000000  00000000  0005790a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002e78  00000000  00000000  0005d608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002430  00000000  00000000  00060480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000962a  00000000  00000000  000628b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003dfe8  00000000  00000000  0006beda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a9ba7  00000000  00000000  000a9ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000cc14  00000000  00000000  00253a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000082  00000000  00000000  00260680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800026c <__do_global_dtors_aux>:
 800026c:	b510      	push	{r4, lr}
 800026e:	4c05      	ldr	r4, [pc, #20]	; (8000284 <__do_global_dtors_aux+0x18>)
 8000270:	7823      	ldrb	r3, [r4, #0]
 8000272:	b933      	cbnz	r3, 8000282 <__do_global_dtors_aux+0x16>
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <__do_global_dtors_aux+0x1c>)
 8000276:	b113      	cbz	r3, 800027e <__do_global_dtors_aux+0x12>
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <__do_global_dtors_aux+0x20>)
 800027a:	f3af 8000 	nop.w
 800027e:	2301      	movs	r3, #1
 8000280:	7023      	strb	r3, [r4, #0]
 8000282:	bd10      	pop	{r4, pc}
 8000284:	2000000c 	.word	0x2000000c
 8000288:	00000000 	.word	0x00000000
 800028c:	0800f250 	.word	0x0800f250

08000290 <frame_dummy>:
 8000290:	b508      	push	{r3, lr}
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <frame_dummy+0x10>)
 8000294:	b11b      	cbz	r3, 800029e <frame_dummy+0xe>
 8000296:	4903      	ldr	r1, [pc, #12]	; (80002a4 <frame_dummy+0x14>)
 8000298:	4803      	ldr	r0, [pc, #12]	; (80002a8 <frame_dummy+0x18>)
 800029a:	f3af 8000 	nop.w
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	00000000 	.word	0x00000000
 80002a4:	20000010 	.word	0x20000010
 80002a8:	0800f250 	.word	0x0800f250

080002ac <__aeabi_uldivmod>:
 80002ac:	b953      	cbnz	r3, 80002c4 <__aeabi_uldivmod+0x18>
 80002ae:	b94a      	cbnz	r2, 80002c4 <__aeabi_uldivmod+0x18>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	bf08      	it	eq
 80002b4:	2800      	cmpeq	r0, #0
 80002b6:	bf1c      	itt	ne
 80002b8:	f04f 31ff 	movne.w	r1, #4294967295
 80002bc:	f04f 30ff 	movne.w	r0, #4294967295
 80002c0:	f000 b982 	b.w	80005c8 <__aeabi_idiv0>
 80002c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002cc:	f000 f806 	bl	80002dc <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4770      	bx	lr

080002dc <__udivmoddi4>:
 80002dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002e2:	460d      	mov	r5, r1
 80002e4:	4604      	mov	r4, r0
 80002e6:	460f      	mov	r7, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d146      	bne.n	800037a <__udivmoddi4+0x9e>
 80002ec:	428a      	cmp	r2, r1
 80002ee:	4694      	mov	ip, r2
 80002f0:	d95e      	bls.n	80003b0 <__udivmoddi4+0xd4>
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	b143      	cbz	r3, 800030a <__udivmoddi4+0x2e>
 80002f8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002fc:	f1c3 0220 	rsb	r2, r3, #32
 8000300:	409f      	lsls	r7, r3
 8000302:	409c      	lsls	r4, r3
 8000304:	fa20 f202 	lsr.w	r2, r0, r2
 8000308:	4317      	orrs	r7, r2
 800030a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800030e:	fa1f f58c 	uxth.w	r5, ip
 8000312:	0c22      	lsrs	r2, r4, #16
 8000314:	fbb7 f1fe 	udiv	r1, r7, lr
 8000318:	fb0e 7711 	mls	r7, lr, r1, r7
 800031c:	fb01 f005 	mul.w	r0, r1, r5
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	4290      	cmp	r0, r2
 8000326:	d908      	bls.n	800033a <__udivmoddi4+0x5e>
 8000328:	eb1c 0202 	adds.w	r2, ip, r2
 800032c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x5c>
 8000332:	4290      	cmp	r0, r2
 8000334:	f200 8134 	bhi.w	80005a0 <__udivmoddi4+0x2c4>
 8000338:	4639      	mov	r1, r7
 800033a:	1a12      	subs	r2, r2, r0
 800033c:	b2a4      	uxth	r4, r4
 800033e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000342:	fb0e 2210 	mls	r2, lr, r0, r2
 8000346:	fb00 f505 	mul.w	r5, r0, r5
 800034a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034e:	42a5      	cmp	r5, r4
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x88>
 8000352:	eb1c 0404 	adds.w	r4, ip, r4
 8000356:	f100 32ff 	add.w	r2, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x86>
 800035c:	42a5      	cmp	r5, r4
 800035e:	f200 8119 	bhi.w	8000594 <__udivmoddi4+0x2b8>
 8000362:	4610      	mov	r0, r2
 8000364:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	2100      	movs	r1, #0
 800036c:	b11e      	cbz	r6, 8000376 <__udivmoddi4+0x9a>
 800036e:	40dc      	lsrs	r4, r3
 8000370:	2300      	movs	r3, #0
 8000372:	e9c6 4300 	strd	r4, r3, [r6]
 8000376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0xb4>
 800037e:	2e00      	cmp	r6, #0
 8000380:	f000 80fc 	beq.w	800057c <__udivmoddi4+0x2a0>
 8000384:	2100      	movs	r1, #0
 8000386:	e9c6 0500 	strd	r0, r5, [r6]
 800038a:	4608      	mov	r0, r1
 800038c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000390:	fab3 f183 	clz	r1, r3
 8000394:	2900      	cmp	r1, #0
 8000396:	d14c      	bne.n	8000432 <__udivmoddi4+0x156>
 8000398:	42ab      	cmp	r3, r5
 800039a:	f0c0 80f2 	bcc.w	8000582 <__udivmoddi4+0x2a6>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f240 80ef 	bls.w	8000582 <__udivmoddi4+0x2a6>
 80003a4:	4608      	mov	r0, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d0e5      	beq.n	8000376 <__udivmoddi4+0x9a>
 80003aa:	e9c6 4700 	strd	r4, r7, [r6]
 80003ae:	e7e2      	b.n	8000376 <__udivmoddi4+0x9a>
 80003b0:	b902      	cbnz	r2, 80003b4 <__udivmoddi4+0xd8>
 80003b2:	deff      	udf	#255	; 0xff
 80003b4:	fab2 f382 	clz	r3, r2
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	f040 809f 	bne.w	80004fc <__udivmoddi4+0x220>
 80003be:	1a8a      	subs	r2, r1, r2
 80003c0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c4:	fa1f f78c 	uxth.w	r7, ip
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ce:	fb0e 2015 	mls	r0, lr, r5, r2
 80003d2:	0c22      	lsrs	r2, r4, #16
 80003d4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003d8:	fb07 f005 	mul.w	r0, r7, r5
 80003dc:	4290      	cmp	r0, r2
 80003de:	d90f      	bls.n	8000400 <__udivmoddi4+0x124>
 80003e0:	eb1c 0202 	adds.w	r2, ip, r2
 80003e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003e8:	bf2c      	ite	cs
 80003ea:	f04f 0901 	movcs.w	r9, #1
 80003ee:	f04f 0900 	movcc.w	r9, #0
 80003f2:	4290      	cmp	r0, r2
 80003f4:	d903      	bls.n	80003fe <__udivmoddi4+0x122>
 80003f6:	f1b9 0f00 	cmp.w	r9, #0
 80003fa:	f000 80ce 	beq.w	800059a <__udivmoddi4+0x2be>
 80003fe:	4645      	mov	r5, r8
 8000400:	1a12      	subs	r2, r2, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb2 f0fe 	udiv	r0, r2, lr
 8000408:	fb0e 2210 	mls	r2, lr, r0, r2
 800040c:	fb00 f707 	mul.w	r7, r0, r7
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	42a7      	cmp	r7, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x14e>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x14c>
 8000422:	42a7      	cmp	r7, r4
 8000424:	f200 80b3 	bhi.w	800058e <__udivmoddi4+0x2b2>
 8000428:	4610      	mov	r0, r2
 800042a:	1be4      	subs	r4, r4, r7
 800042c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000430:	e79c      	b.n	800036c <__udivmoddi4+0x90>
 8000432:	f1c1 0420 	rsb	r4, r1, #32
 8000436:	408b      	lsls	r3, r1
 8000438:	fa05 fc01 	lsl.w	ip, r5, r1
 800043c:	fa22 f704 	lsr.w	r7, r2, r4
 8000440:	40e5      	lsrs	r5, r4
 8000442:	408a      	lsls	r2, r1
 8000444:	431f      	orrs	r7, r3
 8000446:	fa20 f304 	lsr.w	r3, r0, r4
 800044a:	4088      	lsls	r0, r1
 800044c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000450:	ea43 030c 	orr.w	r3, r3, ip
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800045c:	fbb5 fef8 	udiv	lr, r5, r8
 8000460:	fb08 551e 	mls	r5, r8, lr, r5
 8000464:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000468:	fb0e f90c 	mul.w	r9, lr, ip
 800046c:	45a9      	cmp	r9, r5
 800046e:	d90e      	bls.n	800048e <__udivmoddi4+0x1b2>
 8000470:	197d      	adds	r5, r7, r5
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	bf2c      	ite	cs
 8000478:	f04f 0b01 	movcs.w	fp, #1
 800047c:	f04f 0b00 	movcc.w	fp, #0
 8000480:	45a9      	cmp	r9, r5
 8000482:	d903      	bls.n	800048c <__udivmoddi4+0x1b0>
 8000484:	f1bb 0f00 	cmp.w	fp, #0
 8000488:	f000 808d 	beq.w	80005a6 <__udivmoddi4+0x2ca>
 800048c:	46d6      	mov	lr, sl
 800048e:	eba5 0509 	sub.w	r5, r5, r9
 8000492:	fa1f f983 	uxth.w	r9, r3
 8000496:	fbb5 f3f8 	udiv	r3, r5, r8
 800049a:	fb08 5513 	mls	r5, r8, r3, r5
 800049e:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a2:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80004a6:	45ac      	cmp	ip, r5
 80004a8:	d906      	bls.n	80004b8 <__udivmoddi4+0x1dc>
 80004aa:	197d      	adds	r5, r7, r5
 80004ac:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x1da>
 80004b2:	45ac      	cmp	ip, r5
 80004b4:	d87e      	bhi.n	80005b4 <__udivmoddi4+0x2d8>
 80004b6:	4643      	mov	r3, r8
 80004b8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004bc:	eba5 050c 	sub.w	r5, r5, ip
 80004c0:	fba3 9802 	umull	r9, r8, r3, r2
 80004c4:	4545      	cmp	r5, r8
 80004c6:	46ce      	mov	lr, r9
 80004c8:	46c4      	mov	ip, r8
 80004ca:	d302      	bcc.n	80004d2 <__udivmoddi4+0x1f6>
 80004cc:	d106      	bne.n	80004dc <__udivmoddi4+0x200>
 80004ce:	4548      	cmp	r0, r9
 80004d0:	d204      	bcs.n	80004dc <__udivmoddi4+0x200>
 80004d2:	3b01      	subs	r3, #1
 80004d4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004dc:	2e00      	cmp	r6, #0
 80004de:	d06f      	beq.n	80005c0 <__udivmoddi4+0x2e4>
 80004e0:	ebb0 020e 	subs.w	r2, r0, lr
 80004e4:	eb65 050c 	sbc.w	r5, r5, ip
 80004e8:	40ca      	lsrs	r2, r1
 80004ea:	fa05 f404 	lsl.w	r4, r5, r4
 80004ee:	40cd      	lsrs	r5, r1
 80004f0:	4618      	mov	r0, r3
 80004f2:	4314      	orrs	r4, r2
 80004f4:	2100      	movs	r1, #0
 80004f6:	e9c6 4500 	strd	r4, r5, [r6]
 80004fa:	e73c      	b.n	8000376 <__udivmoddi4+0x9a>
 80004fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000500:	f1c3 0220 	rsb	r2, r3, #32
 8000504:	4099      	lsls	r1, r3
 8000506:	409c      	lsls	r4, r3
 8000508:	40d5      	lsrs	r5, r2
 800050a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800050e:	fa20 f202 	lsr.w	r2, r0, r2
 8000512:	fa1f f78c 	uxth.w	r7, ip
 8000516:	fbb5 f0fe 	udiv	r0, r5, lr
 800051a:	430a      	orrs	r2, r1
 800051c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000520:	0c11      	lsrs	r1, r2, #16
 8000522:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000526:	fb00 f507 	mul.w	r5, r0, r7
 800052a:	428d      	cmp	r5, r1
 800052c:	d90e      	bls.n	800054c <__udivmoddi4+0x270>
 800052e:	eb1c 0101 	adds.w	r1, ip, r1
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	bf2c      	ite	cs
 8000538:	f04f 0901 	movcs.w	r9, #1
 800053c:	f04f 0900 	movcc.w	r9, #0
 8000540:	428d      	cmp	r5, r1
 8000542:	d902      	bls.n	800054a <__udivmoddi4+0x26e>
 8000544:	f1b9 0f00 	cmp.w	r9, #0
 8000548:	d031      	beq.n	80005ae <__udivmoddi4+0x2d2>
 800054a:	4640      	mov	r0, r8
 800054c:	1b49      	subs	r1, r1, r5
 800054e:	b292      	uxth	r2, r2
 8000550:	fbb1 f5fe 	udiv	r5, r1, lr
 8000554:	fb0e 1115 	mls	r1, lr, r5, r1
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	fb05 f107 	mul.w	r1, r5, r7
 8000560:	4291      	cmp	r1, r2
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x298>
 8000564:	eb1c 0202 	adds.w	r2, ip, r2
 8000568:	f105 38ff 	add.w	r8, r5, #4294967295
 800056c:	d201      	bcs.n	8000572 <__udivmoddi4+0x296>
 800056e:	4291      	cmp	r1, r2
 8000570:	d823      	bhi.n	80005ba <__udivmoddi4+0x2de>
 8000572:	4645      	mov	r5, r8
 8000574:	1a52      	subs	r2, r2, r1
 8000576:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800057a:	e726      	b.n	80003ca <__udivmoddi4+0xee>
 800057c:	4631      	mov	r1, r6
 800057e:	4630      	mov	r0, r6
 8000580:	e6f9      	b.n	8000376 <__udivmoddi4+0x9a>
 8000582:	1a84      	subs	r4, r0, r2
 8000584:	eb65 0203 	sbc.w	r2, r5, r3
 8000588:	2001      	movs	r0, #1
 800058a:	4617      	mov	r7, r2
 800058c:	e70b      	b.n	80003a6 <__udivmoddi4+0xca>
 800058e:	4464      	add	r4, ip
 8000590:	3802      	subs	r0, #2
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14e>
 8000594:	4464      	add	r4, ip
 8000596:	3802      	subs	r0, #2
 8000598:	e6e4      	b.n	8000364 <__udivmoddi4+0x88>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e72f      	b.n	8000400 <__udivmoddi4+0x124>
 80005a0:	3902      	subs	r1, #2
 80005a2:	4462      	add	r2, ip
 80005a4:	e6c9      	b.n	800033a <__udivmoddi4+0x5e>
 80005a6:	f1ae 0e02 	sub.w	lr, lr, #2
 80005aa:	443d      	add	r5, r7
 80005ac:	e76f      	b.n	800048e <__udivmoddi4+0x1b2>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	e7cb      	b.n	800054c <__udivmoddi4+0x270>
 80005b4:	3b02      	subs	r3, #2
 80005b6:	443d      	add	r5, r7
 80005b8:	e77e      	b.n	80004b8 <__udivmoddi4+0x1dc>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	e7d9      	b.n	8000574 <__udivmoddi4+0x298>
 80005c0:	4618      	mov	r0, r3
 80005c2:	4631      	mov	r1, r6
 80005c4:	e6d7      	b.n	8000376 <__udivmoddi4+0x9a>
 80005c6:	bf00      	nop

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f002 fd4e 	bl	8003070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f834 	bl	8000640 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005d8:	f000 f89c 	bl	8000714 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 fff0 	bl	80015c0 <MX_GPIO_Init>
  MX_DCACHE1_Init();
 80005e0:	f000 f916 	bl	8000810 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 80005e4:	f000 f92a 	bl	800083c <MX_DCACHE2_Init>
  MX_ICACHE_Init();
 80005e8:	f000 fbdc 	bl	8000da4 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80005ec:	f000 fc0c 	bl	8000e08 <MX_LPUART1_UART_Init>
  MX_OCTOSPI1_Init();
 80005f0:	f000 fd72 	bl	80010d8 <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 80005f4:	f000 f8ea 	bl	80007cc <MX_CRC_Init>
  MX_DMA2D_Init();
 80005f8:	f000 f936 	bl	8000868 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80005fc:	f000 f972 	bl	80008e4 <MX_DSIHOST_DSI_Init>
  MX_GFXMMU_Init();
 8000600:	f000 fa6c 	bl	8000adc <MX_GFXMMU_Init>
  MX_GPU2D_Init();
 8000604:	f000 faba 	bl	8000b7c <MX_GPU2D_Init>
  MX_LTDC_Init();
 8000608:	f000 fce2 	bl	8000fd0 <MX_LTDC_Init>
  MX_SDMMC1_SD_Init();
 800060c:	f000 ff18 	bl	8001440 <MX_SDMMC1_SD_Init>
  MX_RTC_Init();
 8000610:	f000 fe94 	bl	800133c <MX_RTC_Init>
  MX_OCTOSPI2_Init();
 8000614:	f000 fdfa 	bl	800120c <MX_OCTOSPI2_Init>
  MX_ADF1_Init();
 8000618:	f000 f88a 	bl	8000730 <MX_ADF1_Init>
  MX_I2C1_Init();
 800061c:	f000 fac2 	bl	8000ba4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000620:	f000 fb00 	bl	8000c24 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000624:	f000 fb3e 	bl	8000ca4 <MX_I2C4_Init>
  MX_I2C6_Init();
 8000628:	f000 fb7c 	bl	8000d24 <MX_I2C6_Init>
  MX_USART1_UART_Init();
 800062c:	f000 fc38 	bl	8000ea0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000630:	f000 fc82 	bl	8000f38 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8000634:	f000 ff28 	bl	8001488 <MX_SPI1_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000638:	f000 ff94 	bl	8001564 <MX_USB_OTG_HS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063c:	e7fe      	b.n	800063c <main+0x70>
	...

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09e      	sub	sp, #120	; 0x78
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	2260      	movs	r2, #96	; 0x60
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f00e fdd2 	bl	800f1f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	463b      	mov	r3, r7
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]
 8000662:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000664:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000668:	f006 fc5c 	bl	8006f24 <HAL_PWREx_ControlVoltageScaling>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000672:	f001 f9ed 	bl	8001a50 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000676:	f006 fc45 	bl	8006f04 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800067a:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xd0>)
 800067c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000680:	4a23      	ldr	r2, [pc, #140]	; (8000710 <SystemClock_Config+0xd0>)
 8000682:	f023 0318 	bic.w	r3, r3, #24
 8000686:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800068a:	2305      	movs	r3, #5
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000694:	2381      	movs	r3, #129	; 0x81
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069c:	2303      	movs	r3, #3
 800069e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006a8:	230a      	movs	r3, #10
 80006aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80006b8:	230c      	movs	r3, #12
 80006ba:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0318 	add.w	r3, r7, #24
 80006c4:	4618      	mov	r0, r3
 80006c6:	f006 fd47 	bl	8007158 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d0:	f001 f9be 	bl	8001a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	231f      	movs	r3, #31
 80006d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2303      	movs	r3, #3
 80006da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	2104      	movs	r1, #4
 80006f0:	4618      	mov	r0, r3
 80006f2:	f007 fc0d 	bl	8007f10 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006fc:	f001 f9a8 	bl	8001a50 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000700:	f007 ff88 	bl	8008614 <HAL_RCC_EnableCSS>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8000704:	f00a ff04 	bl	800b510 <HAL_RCCEx_EnableLSECSS>
}
 8000708:	bf00      	nop
 800070a:	3778      	adds	r7, #120	; 0x78
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	46020c00 	.word	0x46020c00

08000714 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000718:	f006 fcf0 	bl	80070fc <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800071c:	2002      	movs	r0, #2
 800071e:	f006 fc8d 	bl	800703c <HAL_PWREx_ConfigSupply>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000728:	f001 f992 	bl	8001a50 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <MX_ADF1_Init+0x90>)
 8000736:	4a23      	ldr	r2, [pc, #140]	; (80007c4 <MX_ADF1_Init+0x94>)
 8000738:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_ADF1_Init+0x90>)
 800073c:	2201      	movs	r2, #1
 800073e:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_ADF1_Init+0x90>)
 8000742:	2200      	movs	r2, #0
 8000744:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_ADF1_Init+0x90>)
 8000748:	2201      	movs	r2, #1
 800074a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_ADF1_Init+0x90>)
 8000750:	2210      	movs	r2, #16
 8000752:	629a      	str	r2, [r3, #40]	; 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_ADF1_Init+0x90>)
 8000756:	2200      	movs	r2, #0
 8000758:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_ADF1_Init+0x90>)
 800075c:	2204      	movs	r2, #4
 800075e:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_ADF1_Init+0x90>)
 8000762:	2201      	movs	r2, #1
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 8000766:	4816      	ldr	r0, [pc, #88]	; (80007c0 <MX_ADF1_Init+0x90>)
 8000768:	f005 f930 	bl	80059cc <HAL_MDF_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADF1_Init+0x46>
  {
    Error_Handler();
 8000772:	f001 f96d 	bl	8001a50 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_ADF1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_ADF1_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_ADF1_Init+0x98>)
 8000784:	2240      	movs	r2, #64	; 0x40
 8000786:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_ADF1_Init+0x98>)
 800078a:	2202      	movs	r2, #2
 800078c:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_ADF1_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_ADF1_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_ADF1_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_ADF1_Init+0x98>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 80007aa:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_ADF1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <MX_ADF1_Init+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <MX_ADF1_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000030 	.word	0x20000030
 80007c4:	46024080 	.word	0x46024080
 80007c8:	20000074 	.word	0x20000074

080007cc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_CRC_Init+0x3c>)
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <MX_CRC_Init+0x40>)
 80007d4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_CRC_Init+0x3c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_CRC_Init+0x3c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_CRC_Init+0x3c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_CRC_Init+0x3c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_CRC_Init+0x3c>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_CRC_Init+0x3c>)
 80007f6:	f002 fdb5 	bl	8003364 <HAL_CRC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000800:	f001 f926 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000f0 	.word	0x200000f0
 800080c:	40023000 	.word	0x40023000

08000810 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <MX_DCACHE1_Init+0x24>)
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <MX_DCACHE1_Init+0x28>)
 8000818:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_DCACHE1_Init+0x24>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_DCACHE1_Init+0x24>)
 8000822:	f002 fe91 	bl	8003548 <HAL_DCACHE_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 800082c:	f001 f910 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000114 	.word	0x20000114
 8000838:	40031400 	.word	0x40031400

0800083c <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_DCACHE2_Init+0x24>)
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <MX_DCACHE2_Init+0x28>)
 8000844:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_DCACHE2_Init+0x24>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_DCACHE2_Init+0x24>)
 800084e:	f002 fe7b 	bl	8003548 <HAL_DCACHE_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_DCACHE2_Init+0x20>
  {
    Error_Handler();
 8000858:	f001 f8fa 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000140 	.word	0x20000140
 8000864:	40031800 	.word	0x40031800

08000868 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_DMA2D_Init+0x74>)
 800086e:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <MX_DMA2D_Init+0x78>)
 8000870:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_DMA2D_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_DMA2D_Init+0x74>)
 800087a:	2201      	movs	r2, #1
 800087c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_DMA2D_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_DMA2D_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_DMA2D_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_DMA2D_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_DMA2D_Init+0x74>)
 8000898:	2201      	movs	r2, #1
 800089a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_DMA2D_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_DMA2D_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_DMA2D_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_DMA2D_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <MX_DMA2D_Init+0x74>)
 80008b6:	f002 ff6e 	bl	8003796 <HAL_DMA2D_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 80008c0:	f001 f8c6 	bl	8001a50 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008c4:	2101      	movs	r1, #1
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_DMA2D_Init+0x74>)
 80008c8:	f003 f8d6 	bl	8003a78 <HAL_DMA2D_ConfigLayer>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f001 f8bd 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000016c 	.word	0x2000016c
 80008e0:	4002b000 	.word	0x4002b000

080008e4 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b0ae      	sub	sp, #184	; 0xb8
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80008ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
 80008fa:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80008fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000900:	2224      	movs	r2, #36	; 0x24
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f00e fc77 	bl	800f1f8 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800090a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
 800091a:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800091c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000920:	2234      	movs	r2, #52	; 0x34
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f00e fc67 	bl	800f1f8 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	222c      	movs	r2, #44	; 0x2c
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f00e fc61 	bl	800f1f8 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000936:	4b67      	ldr	r3, [pc, #412]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000938:	4a67      	ldr	r2, [pc, #412]	; (8000ad8 <MX_DSIHOST_DSI_Init+0x1f4>)
 800093a:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800093c:	4b65      	ldr	r3, [pc, #404]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f0>)
 800093e:	2200      	movs	r2, #0
 8000940:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000942:	4b64      	ldr	r3, [pc, #400]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000944:	2204      	movs	r2, #4
 8000946:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000948:	4b62      	ldr	r3, [pc, #392]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f0>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 800094e:	4b61      	ldr	r3, [pc, #388]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000950:	2208      	movs	r2, #8
 8000952:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 8000954:	4b5f      	ldr	r3, [pc, #380]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000956:	2200      	movs	r2, #0
 8000958:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 800095a:	237d      	movs	r3, #125	; 0x7d
 800095c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 8000960:	2304      	movs	r3, #4
 8000962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000966:	2302      	movs	r3, #2
 8000968:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 800096c:	2301      	movs	r3, #1
 800096e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 8000972:	2300      	movs	r3, #0
 8000974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 8000978:	2300      	movs	r3, #0
 800097a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800097e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000982:	4619      	mov	r1, r3
 8000984:	4853      	ldr	r0, [pc, #332]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000986:	f003 fa1f 	bl	8003dc8 <HAL_DSI_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 8000990:	f001 f85e 	bl	8001a50 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000994:	2301      	movs	r3, #1
 8000996:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.HighSpeedReadTimeout = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.LowPowerReadTimeout = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.BTATimeout = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009cc:	4619      	mov	r1, r3
 80009ce:	4841      	ldr	r0, [pc, #260]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f0>)
 80009d0:	f003 feaa 	bl	8004728 <HAL_DSI_ConfigHostTimeouts>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_DSIHOST_DSI_Init+0xfa>
  {
    Error_Handler();
 80009da:	f001 f839 	bl	8001a50 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 10;
 80009de:	230a      	movs	r3, #10
 80009e0:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.ClockLaneLP2HSTime = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneHS2LPTime = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneLP2HSTime = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.DataLaneMaxReadTime = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.StopWaitTime = 10;
 80009f2:	230a      	movs	r3, #10
 80009f4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80009f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009fa:	4619      	mov	r1, r3
 80009fc:	4835      	ldr	r0, [pc, #212]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f0>)
 80009fe:	f003 fdfd 	bl	80045fc <HAL_DSI_ConfigPhyTimer>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000a08:	f001 f822 	bl	8001a50 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	4831      	ldr	r0, [pc, #196]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a10:	f003 fdcc 	bl	80045ac <HAL_DSI_ConfigFlowControl>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000a1a:	f001 f819 	bl	8001a50 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	482c      	ldr	r0, [pc, #176]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a22:	f003 faa5 	bl	8003f70 <HAL_DSI_ConfigErrorMonitor>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 8000a2c:	f001 f810 	bl	8001a50 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a68:	4619      	mov	r1, r3
 8000a6a:	481a      	ldr	r0, [pc, #104]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a6c:	f003 fd40 	bl	80044f0 <HAL_DSI_ConfigCommand>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_DSIHOST_DSI_Init+0x196>
  {
    Error_Handler();
 8000a76:	f000 ffeb 	bl	8001a50 <Error_Handler>
  }
  CmdCfg.ColorCoding = DSI_RGB888;
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	60bb      	str	r3, [r7, #8]
  CmdCfg.CommandSize = 416;
 8000a7e:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8000a82:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000a84:	2310      	movs	r3, #16
 8000a86:	613b      	str	r3, [r7, #16]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61bb      	str	r3, [r7, #24]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000a9c:	2340      	movs	r3, #64	; 0x40
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480a      	ldr	r0, [pc, #40]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000aaa:	f003 fc4a 	bl	8004342 <HAL_DSI_ConfigAdaptedCommandMode>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 8000ab4:	f000 ffcc 	bl	8001a50 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <MX_DSIHOST_DSI_Init+0x1f0>)
 8000abc:	f003 fc16 	bl	80042ec <HAL_DSI_SetGenericVCID>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 8000ac6:	f000 ffc3 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	37b8      	adds	r7, #184	; 0xb8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200001cc 	.word	0x200001cc
 8000ad8:	40016c00 	.word	0x40016c00

08000adc <MX_GFXMMU_Init>:
  * @brief GFXMMU Initialization Function
  * @param None
  * @retval None
  */
static void MX_GFXMMU_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END GFXMMU_Init 0 */

  /* USER CODE BEGIN GFXMMU_Init 1 */

  /* USER CODE END GFXMMU_Init 1 */
  hgfxmmu.Instance = GFXMMU;
 8000ae0:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <MX_GFXMMU_Init+0x94>)
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <MX_GFXMMU_Init+0x98>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hgfxmmu.Init.BlocksPerLine = GFXMMU_192BLOCKS;
 8000ae6:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <MX_GFXMMU_Init+0x94>)
 8000ae8:	2240      	movs	r2, #64	; 0x40
 8000aea:	605a      	str	r2, [r3, #4]
  hgfxmmu.Init.DefaultValue = 0;
 8000aec:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <MX_GFXMMU_Init+0x94>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hgfxmmu.Init.Buffers.Buf0Address = 0;
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_GFXMMU_Init+0x94>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  hgfxmmu.Init.Buffers.Buf1Address = 0;
 8000af8:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <MX_GFXMMU_Init+0x94>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  hgfxmmu.Init.Buffers.Buf2Address = 0;
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MX_GFXMMU_Init+0x94>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
  hgfxmmu.Init.Buffers.Buf3Address = 0;
 8000b04:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_GFXMMU_Init+0x94>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  hgfxmmu.Init.CachePrefetch.Activation = ENABLE;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <MX_GFXMMU_Init+0x94>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	771a      	strb	r2, [r3, #28]
  hgfxmmu.Init.CachePrefetch.CacheLock = GFXMMU_CACHE_LOCK_ENABLE;
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_GFXMMU_Init+0x94>)
 8000b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b16:	621a      	str	r2, [r3, #32]
  hgfxmmu.Init.CachePrefetch.CacheLockBuffer = GFXMMU_CACHE_LOCK_BUFFER0;
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <MX_GFXMMU_Init+0x94>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  hgfxmmu.Init.CachePrefetch.CacheForce = GFXMMU_CACHE_FORCE_ENABLE;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_GFXMMU_Init+0x94>)
 8000b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28
  hgfxmmu.Init.CachePrefetch.OutterBufferability = GFXMMU_OUTTER_BUFFERABILITY_ENABLE;
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <MX_GFXMMU_Init+0x94>)
 8000b28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hgfxmmu.Init.CachePrefetch.OutterCachability = GFXMMU_OUTTER_CACHABILITY_ENABLE;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <MX_GFXMMU_Init+0x94>)
 8000b30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b34:	631a      	str	r2, [r3, #48]	; 0x30
  hgfxmmu.Init.CachePrefetch.Prefetch = GFXMMU_PREFETCH_ENABLE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_GFXMMU_Init+0x94>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	635a      	str	r2, [r3, #52]	; 0x34
  hgfxmmu.Init.Interrupts.Activation = ENABLE;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_GFXMMU_Init+0x94>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_GFXMMU_Init(&hgfxmmu) != HAL_OK)
 8000b44:	480a      	ldr	r0, [pc, #40]	; (8000b70 <MX_GFXMMU_Init+0x94>)
 8000b46:	f003 feb5 	bl	80048b4 <HAL_GFXMMU_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_GFXMMU_Init+0x78>
  {
    Error_Handler();
 8000b50:	f000 ff7e 	bl	8001a50 <Error_Handler>
  }
  if (HAL_GFXMMU_ConfigLut(&hgfxmmu, GFXMMU_LUT_FIRST, GFXMMU_LUT_SIZE, (uint32_t)gfxmmu_lut_config) != HAL_OK)
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_GFXMMU_Init+0x9c>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_GFXMMU_Init+0x94>)
 8000b5c:	f003 ff2a 	bl	80049b4 <HAL_GFXMMU_ConfigLut>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_GFXMMU_Init+0x8e>
  {
    Error_Handler();
 8000b66:	f000 ff73 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN GFXMMU_Init 2 */

  /* USER CODE END GFXMMU_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200001f0 	.word	0x200001f0
 8000b74:	4002c000 	.word	0x4002c000
 8000b78:	20000028 	.word	0x20000028

08000b7c <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_GPU2D_Init+0x20>)
 8000b82:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <MX_GPU2D_Init+0x24>)
 8000b84:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_GPU2D_Init+0x20>)
 8000b88:	f004 f988 	bl	8004e9c <HAL_GPU2D_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 8000b92:	f000 ff5d 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000238 	.word	0x20000238
 8000ba0:	4002f000 	.word	0x4002f000

08000ba4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_I2C1_Init+0x74>)
 8000baa:	4a1c      	ldr	r2, [pc, #112]	; (8000c1c <MX_I2C1_Init+0x78>)
 8000bac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_I2C1_Init+0x74>)
 8000bb0:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <MX_I2C1_Init+0x7c>)
 8000bb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_I2C1_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_I2C1_Init+0x74>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_I2C1_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_I2C1_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_I2C1_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_I2C1_Init+0x74>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_I2C1_Init+0x74>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bde:	480e      	ldr	r0, [pc, #56]	; (8000c18 <MX_I2C1_Init+0x74>)
 8000be0:	f004 f9c7 	bl	8004f72 <HAL_I2C_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bea:	f000 ff31 	bl	8001a50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4809      	ldr	r0, [pc, #36]	; (8000c18 <MX_I2C1_Init+0x74>)
 8000bf2:	f004 fa59 	bl	80050a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bfc:	f000 ff28 	bl	8001a50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c00:	2100      	movs	r1, #0
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_I2C1_Init+0x74>)
 8000c04:	f004 fa9b 	bl	800513e <HAL_I2CEx_ConfigDigitalFilter>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c0e:	f000 ff1f 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000244 	.word	0x20000244
 8000c1c:	40005400 	.word	0x40005400
 8000c20:	30909dec 	.word	0x30909dec

08000c24 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	; (8000c9c <MX_I2C2_Init+0x78>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c30:	4a1b      	ldr	r2, [pc, #108]	; (8000ca0 <MX_I2C2_Init+0x7c>)
 8000c32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c5e:	480e      	ldr	r0, [pc, #56]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c60:	f004 f987 	bl	8004f72 <HAL_I2C_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c6a:	f000 fef1 	bl	8001a50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4809      	ldr	r0, [pc, #36]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c72:	f004 fa19 	bl	80050a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c7c:	f000 fee8 	bl	8001a50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c80:	2100      	movs	r1, #0
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c84:	f004 fa5b 	bl	800513e <HAL_I2CEx_ConfigDigitalFilter>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c8e:	f000 fedf 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000298 	.word	0x20000298
 8000c9c:	40005800 	.word	0x40005800
 8000ca0:	30909dec 	.word	0x30909dec

08000ca4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <MX_I2C4_Init+0x74>)
 8000caa:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <MX_I2C4_Init+0x78>)
 8000cac:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30909DEC;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_I2C4_Init+0x74>)
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	; (8000d20 <MX_I2C4_Init+0x7c>)
 8000cb2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <MX_I2C4_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_I2C4_Init+0x74>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_I2C4_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_I2C4_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_I2C4_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_I2C4_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_I2C4_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000cde:	480e      	ldr	r0, [pc, #56]	; (8000d18 <MX_I2C4_Init+0x74>)
 8000ce0:	f004 f947 	bl	8004f72 <HAL_I2C_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000cea:	f000 feb1 	bl	8001a50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4809      	ldr	r0, [pc, #36]	; (8000d18 <MX_I2C4_Init+0x74>)
 8000cf2:	f004 f9d9 	bl	80050a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000cfc:	f000 fea8 	bl	8001a50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d00:	2100      	movs	r1, #0
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_I2C4_Init+0x74>)
 8000d04:	f004 fa1b 	bl	800513e <HAL_I2CEx_ConfigDigitalFilter>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d0e:	f000 fe9f 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200002ec 	.word	0x200002ec
 8000d1c:	40008400 	.word	0x40008400
 8000d20:	30909dec 	.word	0x30909dec

08000d24 <MX_I2C6_Init>:
  * @brief I2C6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C6_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C6_Init 0 */

  /* USER CODE BEGIN I2C6_Init 1 */

  /* USER CODE END I2C6_Init 1 */
  hi2c6.Instance = I2C6;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <MX_I2C6_Init+0x74>)
 8000d2a:	4a1c      	ldr	r2, [pc, #112]	; (8000d9c <MX_I2C6_Init+0x78>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hi2c6.Init.Timing = 0x30909DEC;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_I2C6_Init+0x74>)
 8000d30:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <MX_I2C6_Init+0x7c>)
 8000d32:	605a      	str	r2, [r3, #4]
  hi2c6.Init.OwnAddress1 = 0;
 8000d34:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <MX_I2C6_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  hi2c6.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_I2C6_Init+0x74>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	60da      	str	r2, [r3, #12]
  hi2c6.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_I2C6_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  hi2c6.Init.OwnAddress2 = 0;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_I2C6_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	615a      	str	r2, [r3, #20]
  hi2c6.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_I2C6_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
  hi2c6.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_I2C6_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	61da      	str	r2, [r3, #28]
  hi2c6.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_I2C6_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c6) != HAL_OK)
 8000d5e:	480e      	ldr	r0, [pc, #56]	; (8000d98 <MX_I2C6_Init+0x74>)
 8000d60:	f004 f907 	bl	8004f72 <HAL_I2C_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_I2C6_Init+0x4a>
  {
    Error_Handler();
 8000d6a:	f000 fe71 	bl	8001a50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c6, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <MX_I2C6_Init+0x74>)
 8000d72:	f004 f999 	bl	80050a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_I2C6_Init+0x5c>
  {
    Error_Handler();
 8000d7c:	f000 fe68 	bl	8001a50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c6, 0) != HAL_OK)
 8000d80:	2100      	movs	r1, #0
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_I2C6_Init+0x74>)
 8000d84:	f004 f9db 	bl	800513e <HAL_I2CEx_ConfigDigitalFilter>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_I2C6_Init+0x6e>
  {
    Error_Handler();
 8000d8e:	f000 fe5f 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C6_Init 2 */

  /* USER CODE END I2C6_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000340 	.word	0x20000340
 8000d9c:	40009c00 	.word	0x40009c00
 8000da0:	30909dec 	.word	0x30909dec

08000da4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8000db8:	f004 fa1e 	bl	80051f8 <HAL_ICACHE_Disable>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000dc2:	f000 fe45 	bl	8001a50 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 8000dc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dca:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8000dcc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000dd0:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	4619      	mov	r1, r3
 8000de2:	2000      	movs	r0, #0
 8000de4:	f004 fa38 	bl	8005258 <HAL_ICACHE_EnableRemapRegion>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 8000dee:	f000 fe2f 	bl	8001a50 <Error_Handler>
  }

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000df2:	f004 f9f1 	bl	80051d8 <HAL_ICACHE_Enable>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ICACHE_Init+0x5c>
  {
    Error_Handler();
 8000dfc:	f000 fe28 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e0e:	4a22      	ldr	r2, [pc, #136]	; (8000e98 <MX_LPUART1_UART_Init+0x90>)
 8000e10:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e14:	4a21      	ldr	r2, [pc, #132]	; (8000e9c <MX_LPUART1_UART_Init+0x94>)
 8000e16:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e2c:	220c      	movs	r2, #12
 8000e2e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e32:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e36:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e4a:	4812      	ldr	r0, [pc, #72]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e4c:	f00c fcda 	bl	800d804 <HAL_UART_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e56:	f000 fdfb 	bl	8001a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e5e:	f00d f921 	bl	800e0a4 <HAL_UARTEx_SetTxFifoThreshold>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000e68:	f000 fdf2 	bl	8001a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4809      	ldr	r0, [pc, #36]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e70:	f00d f956 	bl	800e120 <HAL_UARTEx_SetRxFifoThreshold>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000e7a:	f000 fde9 	bl	8001a50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e80:	f00d f8d7 	bl	800e032 <HAL_UARTEx_DisableFifoMode>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000e8a:	f000 fde1 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000394 	.word	0x20000394
 8000e98:	46002400 	.word	0x46002400
 8000e9c:	00033324 	.word	0x00033324

08000ea0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ea4:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <MX_USART1_UART_Init+0x90>)
 8000ea6:	4a23      	ldr	r2, [pc, #140]	; (8000f34 <MX_USART1_UART_Init+0x94>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <MX_USART1_UART_Init+0x90>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <MX_USART1_UART_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <MX_USART1_UART_Init+0x90>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <MX_USART1_UART_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_USART1_UART_Init+0x90>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <MX_USART1_UART_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <MX_USART1_UART_Init+0x90>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <MX_USART1_UART_Init+0x90>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_USART1_UART_Init+0x90>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <MX_USART1_UART_Init+0x90>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ee8:	4811      	ldr	r0, [pc, #68]	; (8000f30 <MX_USART1_UART_Init+0x90>)
 8000eea:	f00c fc8b 	bl	800d804 <HAL_UART_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ef4:	f000 fdac 	bl	8001a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	480d      	ldr	r0, [pc, #52]	; (8000f30 <MX_USART1_UART_Init+0x90>)
 8000efc:	f00d f8d2 	bl	800e0a4 <HAL_UARTEx_SetTxFifoThreshold>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f06:	f000 fda3 	bl	8001a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4808      	ldr	r0, [pc, #32]	; (8000f30 <MX_USART1_UART_Init+0x90>)
 8000f0e:	f00d f907 	bl	800e120 <HAL_UARTEx_SetRxFifoThreshold>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f18:	f000 fd9a 	bl	8001a50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <MX_USART1_UART_Init+0x90>)
 8000f1e:	f00d f888 	bl	800e032 <HAL_UARTEx_DisableFifoMode>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f28:	f000 fd92 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000428 	.word	0x20000428
 8000f34:	40013800 	.word	0x40013800

08000f38 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <MX_USART6_UART_Init+0x90>)
 8000f3e:	4a23      	ldr	r2, [pc, #140]	; (8000fcc <MX_USART6_UART_Init+0x94>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000f42:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <MX_USART6_UART_Init+0x90>)
 8000f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f48:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <MX_USART6_UART_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <MX_USART6_UART_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <MX_USART6_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <MX_USART6_UART_Init+0x90>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <MX_USART6_UART_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <MX_USART6_UART_Init+0x90>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_USART6_UART_Init+0x90>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_USART6_UART_Init+0x90>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_USART6_UART_Init+0x90>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f80:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <MX_USART6_UART_Init+0x90>)
 8000f82:	f00c fc3f 	bl	800d804 <HAL_UART_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000f8c:	f000 fd60 	bl	8001a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f90:	2100      	movs	r1, #0
 8000f92:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <MX_USART6_UART_Init+0x90>)
 8000f94:	f00d f886 	bl	800e0a4 <HAL_UARTEx_SetTxFifoThreshold>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000f9e:	f000 fd57 	bl	8001a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <MX_USART6_UART_Init+0x90>)
 8000fa6:	f00d f8bb 	bl	800e120 <HAL_UARTEx_SetRxFifoThreshold>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000fb0:	f000 fd4e 	bl	8001a50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_USART6_UART_Init+0x90>)
 8000fb6:	f00d f83c 	bl	800e032 <HAL_UARTEx_DisableFifoMode>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000fc0:	f000 fd46 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200004bc 	.word	0x200004bc
 8000fcc:	40006400 	.word	0x40006400

08000fd0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08e      	sub	sp, #56	; 0x38
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2234      	movs	r2, #52	; 0x34
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f00e f90b 	bl	800f1f8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000fe2:	4b3b      	ldr	r3, [pc, #236]	; (80010d0 <MX_LTDC_Init+0x100>)
 8000fe4:	4a3b      	ldr	r2, [pc, #236]	; (80010d4 <MX_LTDC_Init+0x104>)
 8000fe6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000fe8:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <MX_LTDC_Init+0x100>)
 8000fea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000fee:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000ff0:	4b37      	ldr	r3, [pc, #220]	; (80010d0 <MX_LTDC_Init+0x100>)
 8000ff2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ff8:	4b35      	ldr	r3, [pc, #212]	; (80010d0 <MX_LTDC_Init+0x100>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ffe:	4b34      	ldr	r3, [pc, #208]	; (80010d0 <MX_LTDC_Init+0x100>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001004:	4b32      	ldr	r3, [pc, #200]	; (80010d0 <MX_LTDC_Init+0x100>)
 8001006:	2200      	movs	r2, #0
 8001008:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 800100a:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <MX_LTDC_Init+0x100>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 0;
 8001010:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <MX_LTDC_Init+0x100>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 0;
 8001016:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <MX_LTDC_Init+0x100>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 416;
 800101c:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <MX_LTDC_Init+0x100>)
 800101e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001022:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 416;
 8001024:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <MX_LTDC_Init+0x100>)
 8001026:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 416;
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <MX_LTDC_Init+0x100>)
 800102e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 416;
 8001034:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <MX_LTDC_Init+0x100>)
 8001036:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800103a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800103c:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <MX_LTDC_Init+0x100>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <MX_LTDC_Init+0x100>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800104c:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <MX_LTDC_Init+0x100>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001054:	481e      	ldr	r0, [pc, #120]	; (80010d0 <MX_LTDC_Init+0x100>)
 8001056:	f004 f951 	bl	80052fc <HAL_LTDC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8001060:	f000 fcf6 	bl	8001a50 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 416;
 8001068:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800106c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 416;
 8001072:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001076:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800107c:	23ff      	movs	r3, #255	; 0xff
 800107e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001088:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800108a:	2305      	movs	r3, #5
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = GFXMMU_VIRTUAL_BUFFER0_BASE;
 800108e:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 416;
 8001094:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 416;
 800109a:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2200      	movs	r2, #0
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_LTDC_Init+0x100>)
 80010ba:	f004 fab1 	bl	8005620 <HAL_LTDC_ConfigLayer>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 80010c4:	f000 fcc4 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	3738      	adds	r7, #56	; 0x38
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000550 	.word	0x20000550
 80010d4:	40016800 	.word	0x40016800

080010d8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	; 0x30
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]
 80010ee:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001106:	4b3d      	ldr	r3, [pc, #244]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 8001108:	4a3d      	ldr	r2, [pc, #244]	; (8001200 <MX_OCTOSPI1_Init+0x128>)
 800110a:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800110c:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 800110e:	2201      	movs	r2, #1
 8001110:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001112:	4b3a      	ldr	r3, [pc, #232]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8001118:	4b38      	ldr	r3, [pc, #224]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 800111a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800111e:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8001120:	4b36      	ldr	r3, [pc, #216]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 8001122:	221a      	movs	r2, #26
 8001124:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001126:	4b35      	ldr	r3, [pc, #212]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 8001128:	2201      	movs	r2, #1
 800112a:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800112c:	4b33      	ldr	r3, [pc, #204]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001132:	4b32      	ldr	r3, [pc, #200]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 8001134:	2200      	movs	r2, #0
 8001136:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_64_BYTES;
 8001138:	4b30      	ldr	r3, [pc, #192]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 800113a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800113e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 16;
 8001140:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 8001142:	2210      	movs	r2, #16
 8001144:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001146:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 8001148:	2200      	movs	r2, #0
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800114c:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 800114e:	2200      	movs	r2, #0
 8001150:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001152:	4b2a      	ldr	r3, [pc, #168]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 8001154:	2200      	movs	r2, #0
 8001156:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001158:	4b28      	ldr	r3, [pc, #160]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 800115a:	2208      	movs	r2, #8
 800115c:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 16;
 800115e:	4b27      	ldr	r3, [pc, #156]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 8001160:	2210      	movs	r2, #16
 8001162:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 8001166:	2200      	movs	r2, #0
 8001168:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800116a:	4824      	ldr	r0, [pc, #144]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 800116c:	f004 fdda 	bl	8005d24 <HAL_OSPI_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_OCTOSPI1_Init+0xa2>
  {
    Error_Handler();
 8001176:	f000 fc6b 	bl	8001a50 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800117a:	2301      	movs	r3, #1
 800117c:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 800117e:	2301      	movs	r3, #1
 8001180:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 1;
 8001182:	2301      	movs	r3, #1
 8001184:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_OCTOSPI1_Init+0x12c>)
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <MX_OCTOSPI1_Init+0x130>)
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 800118e:	2301      	movs	r3, #1
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001192:	f107 0318 	add.w	r3, r7, #24
 8001196:	f241 3288 	movw	r2, #5000	; 0x1388
 800119a:	4619      	mov	r1, r3
 800119c:	4817      	ldr	r0, [pc, #92]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 800119e:	f004 ff41 	bl	8006024 <HAL_OSPIM_Config>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_OCTOSPI1_Init+0xd4>
  {
    Error_Handler();
 80011a8:	f000 fc52 	bl	8001a50 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 80011b4:	2302      	movs	r3, #2
 80011b6:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi1, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c4:	4619      	mov	r1, r3
 80011c6:	480d      	ldr	r0, [pc, #52]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 80011c8:	f004 fe68 	bl	8005e9c <HAL_OSPI_HyperbusCfg>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_OCTOSPI1_Init+0xfe>
  {
    Error_Handler();
 80011d2:	f000 fc3d 	bl	8001a50 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 80011de:	463b      	mov	r3, r7
 80011e0:	4619      	mov	r1, r3
 80011e2:	4806      	ldr	r0, [pc, #24]	; (80011fc <MX_OCTOSPI1_Init+0x124>)
 80011e4:	f005 fd0a 	bl	8006bfc <HAL_OSPI_DLYB_SetConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_OCTOSPI1_Init+0x11a>
  {
    Error_Handler();
 80011ee:	f000 fc2f 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	3730      	adds	r7, #48	; 0x30
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200005f8 	.word	0x200005f8
 8001200:	420d1400 	.word	0x420d1400
 8001204:	00010002 	.word	0x00010002
 8001208:	01000002 	.word	0x01000002

0800120c <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	; 0x30
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001212:	f107 0318 	add.w	r3, r7, #24
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]
 8001222:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001232:	463b      	mov	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 800123a:	4b3c      	ldr	r3, [pc, #240]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 800123c:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <MX_OCTOSPI2_Init+0x124>)
 800123e:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8001240:	4b3a      	ldr	r3, [pc, #232]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 8001242:	2201      	movs	r2, #1
 8001244:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001246:	4b39      	ldr	r3, [pc, #228]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 800124c:	4b37      	ldr	r3, [pc, #220]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 800124e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001252:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8001254:	4b35      	ldr	r3, [pc, #212]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 8001256:	2220      	movs	r2, #32
 8001258:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 800125a:	4b34      	ldr	r3, [pc, #208]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 800125c:	2201      	movs	r2, #1
 800125e:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001260:	4b32      	ldr	r3, [pc, #200]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001266:	4b31      	ldr	r3, [pc, #196]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800126c:	4b2f      	ldr	r3, [pc, #188]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 8001272:	4b2e      	ldr	r3, [pc, #184]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 8001274:	2201      	movs	r2, #1
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001278:	4b2c      	ldr	r3, [pc, #176]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 800127a:	2200      	movs	r2, #0
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800127e:	4b2b      	ldr	r3, [pc, #172]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 8001280:	2200      	movs	r2, #0
 8001282:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8001284:	4b29      	ldr	r3, [pc, #164]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 8001286:	2200      	movs	r2, #0
 8001288:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800128a:	4b28      	ldr	r3, [pc, #160]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 800128c:	2208      	movs	r2, #8
 800128e:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.MaxTran = 0;
 8001290:	4b26      	ldr	r3, [pc, #152]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 8001292:	2200      	movs	r2, #0
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.Refresh = 0;
 8001296:	4b25      	ldr	r3, [pc, #148]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 8001298:	2200      	movs	r2, #0
 800129a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 800129c:	4823      	ldr	r0, [pc, #140]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 800129e:	f004 fd41 	bl	8005d24 <HAL_OSPI_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_OCTOSPI2_Init+0xa0>
  {
    Error_Handler();
 80012a8:	f000 fbd2 	bl	8001a50 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 80012b8:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <MX_OCTOSPI2_Init+0x128>)
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <MX_OCTOSPI2_Init+0x12c>)
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012c4:	f107 0318 	add.w	r3, r7, #24
 80012c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012cc:	4619      	mov	r1, r3
 80012ce:	4817      	ldr	r0, [pc, #92]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 80012d0:	f004 fea8 	bl	8006024 <HAL_OSPIM_Config>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_OCTOSPI2_Init+0xd2>
  {
    Error_Handler();
 80012da:	f000 fbb9 	bl	8001a50 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 80012e6:	2302      	movs	r3, #2
 80012e8:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f6:	4619      	mov	r1, r3
 80012f8:	480c      	ldr	r0, [pc, #48]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 80012fa:	f004 fdcf 	bl	8005e9c <HAL_OSPI_HyperbusCfg>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_OCTOSPI2_Init+0xfc>
  {
    Error_Handler();
 8001304:	f000 fba4 	bl	8001a50 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001310:	463b      	mov	r3, r7
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_OCTOSPI2_Init+0x120>)
 8001316:	f005 fc71 	bl	8006bfc <HAL_OSPI_DLYB_SetConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_OCTOSPI2_Init+0x118>
  {
    Error_Handler();
 8001320:	f000 fb96 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	3730      	adds	r7, #48	; 0x30
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000654 	.word	0x20000654
 8001330:	420d2400 	.word	0x420d2400
 8001334:	00010002 	.word	0x00010002
 8001338:	01000002 	.word	0x01000002

0800133c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08e      	sub	sp, #56	; 0x38
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800136a:	4b33      	ldr	r3, [pc, #204]	; (8001438 <MX_RTC_Init+0xfc>)
 800136c:	4a33      	ldr	r2, [pc, #204]	; (800143c <MX_RTC_Init+0x100>)
 800136e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001370:	4b31      	ldr	r3, [pc, #196]	; (8001438 <MX_RTC_Init+0xfc>)
 8001372:	2200      	movs	r2, #0
 8001374:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001376:	4b30      	ldr	r3, [pc, #192]	; (8001438 <MX_RTC_Init+0xfc>)
 8001378:	227f      	movs	r2, #127	; 0x7f
 800137a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800137c:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <MX_RTC_Init+0xfc>)
 800137e:	22ff      	movs	r2, #255	; 0xff
 8001380:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001382:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <MX_RTC_Init+0xfc>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001388:	4b2b      	ldr	r3, [pc, #172]	; (8001438 <MX_RTC_Init+0xfc>)
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <MX_RTC_Init+0xfc>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001394:	4b28      	ldr	r3, [pc, #160]	; (8001438 <MX_RTC_Init+0xfc>)
 8001396:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800139a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <MX_RTC_Init+0xfc>)
 800139e:	2200      	movs	r2, #0
 80013a0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80013a2:	4b25      	ldr	r3, [pc, #148]	; (8001438 <MX_RTC_Init+0xfc>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013a8:	4823      	ldr	r0, [pc, #140]	; (8001438 <MX_RTC_Init+0xfc>)
 80013aa:	f00a f9f3 	bl	800b794 <HAL_RTC_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80013b4:	f000 fb4c 	bl	8001a50 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80013bc:	2300      	movs	r3, #0
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	481a      	ldr	r0, [pc, #104]	; (8001438 <MX_RTC_Init+0xfc>)
 80013d0:	f00a fc50 	bl	800bc74 <HAL_RTCEx_PrivilegeModeSet>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80013da:	f000 fb39 	bl	8001a50 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80013de:	2300      	movs	r3, #0
 80013e0:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	2201      	movs	r2, #1
 80013f8:	4619      	mov	r1, r3
 80013fa:	480f      	ldr	r0, [pc, #60]	; (8001438 <MX_RTC_Init+0xfc>)
 80013fc:	f00a fa4c 	bl	800b898 <HAL_RTC_SetTime>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001406:	f000 fb23 	bl	8001a50 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800140a:	2301      	movs	r3, #1
 800140c:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 800140e:	2301      	movs	r3, #1
 8001410:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8001412:	2301      	movs	r3, #1
 8001414:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8001416:	2300      	movs	r3, #0
 8001418:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2201      	movs	r2, #1
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_RTC_Init+0xfc>)
 8001422:	f00a fad5 	bl	800b9d0 <HAL_RTC_SetDate>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 800142c:	f000 fb10 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	3738      	adds	r7, #56	; 0x38
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200006b0 	.word	0x200006b0
 800143c:	46007800 	.word	0x46007800

08001440 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_SDMMC1_SD_Init+0x40>)
 8001446:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <MX_SDMMC1_SD_Init+0x44>)
 8001448:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <MX_SDMMC1_SD_Init+0x40>)
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_SDMMC1_SD_Init+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <MX_SDMMC1_SD_Init+0x40>)
 8001458:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800145c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_SDMMC1_SD_Init+0x40>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_SDMMC1_SD_Init+0x40>)
 8001466:	2200      	movs	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_SDMMC1_SD_Init+0x40>)
 800146c:	f00a fc30 	bl	800bcd0 <HAL_SD_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8001476:	f000 faeb 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200006e0 	.word	0x200006e0
 8001484:	420c8000 	.word	0x420c8000

08001488 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001498:	4b30      	ldr	r3, [pc, #192]	; (800155c <MX_SPI1_Init+0xd4>)
 800149a:	4a31      	ldr	r2, [pc, #196]	; (8001560 <MX_SPI1_Init+0xd8>)
 800149c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <MX_SPI1_Init+0xd4>)
 80014a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014a6:	4b2d      	ldr	r3, [pc, #180]	; (800155c <MX_SPI1_Init+0xd4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80014ac:	4b2b      	ldr	r3, [pc, #172]	; (800155c <MX_SPI1_Init+0xd4>)
 80014ae:	2203      	movs	r2, #3
 80014b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014b2:	4b2a      	ldr	r3, [pc, #168]	; (800155c <MX_SPI1_Init+0xd4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b8:	4b28      	ldr	r3, [pc, #160]	; (800155c <MX_SPI1_Init+0xd4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80014be:	4b27      	ldr	r3, [pc, #156]	; (800155c <MX_SPI1_Init+0xd4>)
 80014c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014c6:	4b25      	ldr	r3, [pc, #148]	; (800155c <MX_SPI1_Init+0xd4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014cc:	4b23      	ldr	r3, [pc, #140]	; (800155c <MX_SPI1_Init+0xd4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d2:	4b22      	ldr	r3, [pc, #136]	; (800155c <MX_SPI1_Init+0xd4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <MX_SPI1_Init+0xd4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80014de:	4b1f      	ldr	r3, [pc, #124]	; (800155c <MX_SPI1_Init+0xd4>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <MX_SPI1_Init+0xd4>)
 80014e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ea:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <MX_SPI1_Init+0xd4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_SPI1_Init+0xd4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_SPI1_Init+0xd4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <MX_SPI1_Init+0xd4>)
 8001500:	2200      	movs	r2, #0
 8001502:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_SPI1_Init+0xd4>)
 8001506:	2200      	movs	r2, #0
 8001508:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_SPI1_Init+0xd4>)
 800150c:	2200      	movs	r2, #0
 800150e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_SPI1_Init+0xd4>)
 8001512:	2200      	movs	r2, #0
 8001514:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_SPI1_Init+0xd4>)
 8001518:	2200      	movs	r2, #0
 800151a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_SPI1_Init+0xd4>)
 800151e:	2200      	movs	r2, #0
 8001520:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001522:	480e      	ldr	r0, [pc, #56]	; (800155c <MX_SPI1_Init+0xd4>)
 8001524:	f00b fc42 	bl	800cdac <HAL_SPI_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 800152e:	f000 fa8f 	bl	8001a50 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001536:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800153a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	4619      	mov	r1, r3
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_SPI1_Init+0xd4>)
 8001546:	f00b fd62 	bl	800d00e <HAL_SPIEx_SetConfigAutonomousMode>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8001550:	f000 fa7e 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	2000075c 	.word	0x2000075c
 8001560:	40013000 	.word	0x40013000

08001564 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800156a:	4a14      	ldr	r2, [pc, #80]	; (80015bc <MX_USB_OTG_HS_PCD_Init+0x58>)
 800156c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001570:	2209      	movs	r2, #9
 8001572:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800157c:	2203      	movs	r2, #3
 800157e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001594:	2200      	movs	r2, #0
 8001596:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800159a:	2200      	movs	r2, #0
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80015a6:	f005 fb71 	bl	8006c8c <HAL_PCD_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 80015b0:	f000 fa4e 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200007ec 	.word	0x200007ec
 80015bc:	42040000 	.word	0x42040000

080015c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b090      	sub	sp, #64	; 0x40
 80015c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	4bc0      	ldr	r3, [pc, #768]	; (80018d8 <MX_GPIO_Init+0x318>)
 80015d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015dc:	4abe      	ldr	r2, [pc, #760]	; (80018d8 <MX_GPIO_Init+0x318>)
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015e6:	4bbc      	ldr	r3, [pc, #752]	; (80018d8 <MX_GPIO_Init+0x318>)
 80015e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80015f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015f4:	4bb8      	ldr	r3, [pc, #736]	; (80018d8 <MX_GPIO_Init+0x318>)
 80015f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015fa:	4ab7      	ldr	r2, [pc, #732]	; (80018d8 <MX_GPIO_Init+0x318>)
 80015fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001600:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001604:	4bb4      	ldr	r3, [pc, #720]	; (80018d8 <MX_GPIO_Init+0x318>)
 8001606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800160a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001612:	4bb1      	ldr	r3, [pc, #708]	; (80018d8 <MX_GPIO_Init+0x318>)
 8001614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001618:	4aaf      	ldr	r2, [pc, #700]	; (80018d8 <MX_GPIO_Init+0x318>)
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001622:	4bad      	ldr	r3, [pc, #692]	; (80018d8 <MX_GPIO_Init+0x318>)
 8001624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	623b      	str	r3, [r7, #32]
 800162e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001630:	4ba9      	ldr	r3, [pc, #676]	; (80018d8 <MX_GPIO_Init+0x318>)
 8001632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001636:	4aa8      	ldr	r2, [pc, #672]	; (80018d8 <MX_GPIO_Init+0x318>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001640:	4ba5      	ldr	r3, [pc, #660]	; (80018d8 <MX_GPIO_Init+0x318>)
 8001642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	61fb      	str	r3, [r7, #28]
 800164c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	4ba2      	ldr	r3, [pc, #648]	; (80018d8 <MX_GPIO_Init+0x318>)
 8001650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001654:	4aa0      	ldr	r2, [pc, #640]	; (80018d8 <MX_GPIO_Init+0x318>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800165e:	4b9e      	ldr	r3, [pc, #632]	; (80018d8 <MX_GPIO_Init+0x318>)
 8001660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	61bb      	str	r3, [r7, #24]
 800166a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800166c:	4b9a      	ldr	r3, [pc, #616]	; (80018d8 <MX_GPIO_Init+0x318>)
 800166e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001672:	4a99      	ldr	r2, [pc, #612]	; (80018d8 <MX_GPIO_Init+0x318>)
 8001674:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001678:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800167c:	4b96      	ldr	r3, [pc, #600]	; (80018d8 <MX_GPIO_Init+0x318>)
 800167e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168a:	4b93      	ldr	r3, [pc, #588]	; (80018d8 <MX_GPIO_Init+0x318>)
 800168c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001690:	4a91      	ldr	r2, [pc, #580]	; (80018d8 <MX_GPIO_Init+0x318>)
 8001692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001696:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800169a:	4b8f      	ldr	r3, [pc, #572]	; (80018d8 <MX_GPIO_Init+0x318>)
 800169c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80016a8:	4b8b      	ldr	r3, [pc, #556]	; (80018d8 <MX_GPIO_Init+0x318>)
 80016aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016ae:	4a8a      	ldr	r2, [pc, #552]	; (80018d8 <MX_GPIO_Init+0x318>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016b8:	4b87      	ldr	r3, [pc, #540]	; (80018d8 <MX_GPIO_Init+0x318>)
 80016ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c6:	4b84      	ldr	r3, [pc, #528]	; (80018d8 <MX_GPIO_Init+0x318>)
 80016c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016cc:	4a82      	ldr	r2, [pc, #520]	; (80018d8 <MX_GPIO_Init+0x318>)
 80016ce:	f043 0320 	orr.w	r3, r3, #32
 80016d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016d6:	4b80      	ldr	r3, [pc, #512]	; (80018d8 <MX_GPIO_Init+0x318>)
 80016d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016dc:	f003 0320 	and.w	r3, r3, #32
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016e4:	4b7c      	ldr	r3, [pc, #496]	; (80018d8 <MX_GPIO_Init+0x318>)
 80016e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016ea:	4a7b      	ldr	r2, [pc, #492]	; (80018d8 <MX_GPIO_Init+0x318>)
 80016ec:	f043 0310 	orr.w	r3, r3, #16
 80016f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016f4:	4b78      	ldr	r3, [pc, #480]	; (80018d8 <MX_GPIO_Init+0x318>)
 80016f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001708:	4874      	ldr	r0, [pc, #464]	; (80018dc <MX_GPIO_Init+0x31c>)
 800170a:	f003 fbaf 	bl	8004e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SDMMC_EN_Pin|LRA_EN_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001714:	4872      	ldr	r0, [pc, #456]	; (80018e0 <MX_GPIO_Init+0x320>)
 8001716:	f003 fba9 	bl	8004e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO3_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f248 0120 	movw	r1, #32800	; 0x8020
 8001720:	4870      	ldr	r0, [pc, #448]	; (80018e4 <MX_GPIO_Init+0x324>)
 8001722:	f003 fba3 	bl	8004e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GNSS_RST_Pin|TP_RST_Pin|GNSS_WAKEUP_Pin, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	21c8      	movs	r1, #200	; 0xc8
 800172a:	486f      	ldr	r0, [pc, #444]	; (80018e8 <MX_GPIO_Init+0x328>)
 800172c:	f003 fb9e 	bl	8004e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_RST_GPIO_Port, FLASH_RST_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001736:	486d      	ldr	r0, [pc, #436]	; (80018ec <MX_GPIO_Init+0x32c>)
 8001738:	f003 fb98 	bl	8004e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	2180      	movs	r1, #128	; 0x80
 8001740:	486b      	ldr	r0, [pc, #428]	; (80018f0 <MX_GPIO_Init+0x330>)
 8001742:	f003 fb93 	bl	8004e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800174c:	4869      	ldr	r0, [pc, #420]	; (80018f4 <MX_GPIO_Init+0x334>)
 800174e:	f003 fb8d 	bl	8004e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPLAY_SWIRE_IN_Pin DISPLAY_SWIRE_OUT_Pin */
  GPIO_InitStruct.Pin = DISPLAY_SWIRE_IN_Pin|DISPLAY_SWIRE_OUT_Pin;
 8001752:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001764:	4619      	mov	r1, r3
 8001766:	485d      	ldr	r0, [pc, #372]	; (80018dc <MX_GPIO_Init+0x31c>)
 8001768:	f003 f9a8 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : AVDDEN_Pin */
  GPIO_InitStruct.Pin = AVDDEN_Pin;
 800176c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001772:	2301      	movs	r3, #1
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001776:	2302      	movs	r3, #2
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(AVDDEN_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001782:	4619      	mov	r1, r3
 8001784:	4855      	ldr	r0, [pc, #340]	; (80018dc <MX_GPIO_Init+0x31c>)
 8001786:	f003 f999 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_EN_Pin */
  GPIO_InitStruct.Pin = SDMMC_EN_Pin;
 800178a:	2310      	movs	r3, #16
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178e:	2301      	movs	r3, #1
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SDMMC_EN_GPIO_Port, &GPIO_InitStruct);
 800179a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800179e:	4619      	mov	r1, r3
 80017a0:	484f      	ldr	r0, [pc, #316]	; (80018e0 <MX_GPIO_Init+0x320>)
 80017a2:	f003 f98b 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_CD_Pin PWR_INT_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|PWR_INT_Pin;
 80017a6:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ac:	2300      	movs	r3, #0
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b8:	4619      	mov	r1, r3
 80017ba:	4849      	ldr	r0, [pc, #292]	; (80018e0 <MX_GPIO_Init+0x320>)
 80017bc:	f003 f97e 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|PWR_ENCHG_Pin;
 80017c0:	f248 0320 	movw	r3, #32800	; 0x8020
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017ca:	2302      	movs	r3, #2
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d6:	4619      	mov	r1, r3
 80017d8:	4842      	ldr	r0, [pc, #264]	; (80018e4 <MX_GPIO_Init+0x324>)
 80017da:	f003 f96f 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT2_Pin */
  GPIO_InitStruct.Pin = BT_INT2_Pin;
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e2:	2300      	movs	r3, #0
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017e6:	2302      	movs	r3, #2
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BT_INT2_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ee:	4619      	mov	r1, r3
 80017f0:	4841      	ldr	r0, [pc, #260]	; (80018f8 <MX_GPIO_Init+0x338>)
 80017f2:	f003 f963 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_Pin GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO1_Pin;
 80017f6:	2303      	movs	r3, #3
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fa:	2300      	movs	r3, #0
 80017fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017fe:	2302      	movs	r3, #2
 8001800:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001806:	4619      	mov	r1, r3
 8001808:	4835      	ldr	r0, [pc, #212]	; (80018e0 <MX_GPIO_Init+0x320>)
 800180a:	f003 f957 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT1_Pin */
  GPIO_InitStruct.Pin = BT_INT1_Pin;
 800180e:	2340      	movs	r3, #64	; 0x40
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001812:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <MX_GPIO_Init+0x33c>)
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001816:	2302      	movs	r3, #2
 8001818:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BT_INT1_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181e:	4619      	mov	r1, r3
 8001820:	4835      	ldr	r0, [pc, #212]	; (80018f8 <MX_GPIO_Init+0x338>)
 8001822:	f003 f94b 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin|TP_RST_Pin;
 8001826:	2388      	movs	r3, #136	; 0x88
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800182e:	2301      	movs	r3, #1
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800183a:	4619      	mov	r1, r3
 800183c:	482a      	ldr	r0, [pc, #168]	; (80018e8 <MX_GPIO_Init+0x328>)
 800183e:	f003 f93d 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_PPS_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin;
 8001842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001848:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <MX_GPIO_Init+0x33c>)
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GNSS_PPS_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001854:	4619      	mov	r1, r3
 8001856:	482a      	ldr	r0, [pc, #168]	; (8001900 <MX_GPIO_Init+0x340>)
 8001858:	f003 f930 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_WAKEUP_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin;
 800185c:	2340      	movs	r3, #64	; 0x40
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GNSS_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001870:	4619      	mov	r1, r3
 8001872:	481d      	ldr	r0, [pc, #116]	; (80018e8 <MX_GPIO_Init+0x328>)
 8001874:	f003 f922 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 8001878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800187e:	4b21      	ldr	r3, [pc, #132]	; (8001904 <MX_GPIO_Init+0x344>)
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001882:	2301      	movs	r3, #1
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800188a:	4619      	mov	r1, r3
 800188c:	4816      	ldr	r0, [pc, #88]	; (80018e8 <MX_GPIO_Init+0x328>)
 800188e:	f003 f915 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RST_Pin */
  GPIO_InitStruct.Pin = FLASH_RST_Pin;
 8001892:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800189c:	2301      	movs	r3, #1
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FLASH_RST_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a8:	4619      	mov	r1, r3
 80018aa:	4810      	ldr	r0, [pc, #64]	; (80018ec <MX_GPIO_Init+0x32c>)
 80018ac:	f003 f906 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_INT_Pin */
  GPIO_InitStruct.Pin = FLASH_INT_Pin;
 80018b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <MX_GPIO_Init+0x344>)
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ba:	2301      	movs	r3, #1
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(FLASH_INT_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c2:	4619      	mov	r1, r3
 80018c4:	4809      	ldr	r0, [pc, #36]	; (80018ec <MX_GPIO_Init+0x32c>)
 80018c6:	f003 f8f9 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RSTO_Pin */
  GPIO_InitStruct.Pin = FLASH_RSTO_Pin;
 80018ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d0:	2300      	movs	r3, #0
 80018d2:	633b      	str	r3, [r7, #48]	; 0x30
 80018d4:	e018      	b.n	8001908 <MX_GPIO_Init+0x348>
 80018d6:	bf00      	nop
 80018d8:	46020c00 	.word	0x46020c00
 80018dc:	42021800 	.word	0x42021800
 80018e0:	42020c00 	.word	0x42020c00
 80018e4:	42020400 	.word	0x42020400
 80018e8:	42022400 	.word	0x42022400
 80018ec:	42022000 	.word	0x42022000
 80018f0:	42021400 	.word	0x42021400
 80018f4:	42021000 	.word	0x42021000
 80018f8:	42020800 	.word	0x42020800
 80018fc:	10110000 	.word	0x10110000
 8001900:	42020000 	.word	0x42020000
 8001904:	10210000 	.word	0x10210000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001908:	2301      	movs	r3, #1
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(FLASH_RSTO_GPIO_Port, &GPIO_InitStruct);
 800190c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001910:	4619      	mov	r1, r3
 8001912:	483e      	ldr	r0, [pc, #248]	; (8001a0c <MX_GPIO_Init+0x44c>)
 8001914:	f003 f8d2 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin;
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191c:	2301      	movs	r3, #1
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001920:	2301      	movs	r3, #1
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DISPLAY_RST_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192c:	4619      	mov	r1, r3
 800192e:	4838      	ldr	r0, [pc, #224]	; (8001a10 <MX_GPIO_Init+0x450>)
 8001930:	f003 f8c4 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : ALS_INT_Pin */
  GPIO_InitStruct.Pin = ALS_INT_Pin;
 8001934:	2340      	movs	r3, #64	; 0x40
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001938:	2300      	movs	r3, #0
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800193c:	2301      	movs	r3, #1
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ALS_INT_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001944:	4619      	mov	r1, r3
 8001946:	4832      	ldr	r0, [pc, #200]	; (8001a10 <MX_GPIO_Init+0x450>)
 8001948:	f003 f8b8 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001950:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <MX_GPIO_Init+0x454>)
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001954:	2301      	movs	r3, #1
 8001956:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8001958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195c:	4619      	mov	r1, r3
 800195e:	482e      	ldr	r0, [pc, #184]	; (8001a18 <MX_GPIO_Init+0x458>)
 8001960:	f003 f8ac 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8001964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2301      	movs	r3, #1
 800196c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196e:	2301      	movs	r3, #1
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197a:	4619      	mov	r1, r3
 800197c:	4826      	ldr	r0, [pc, #152]	; (8001a18 <MX_GPIO_Init+0x458>)
 800197e:	f003 f89d 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : HR_INT_Pin */
  GPIO_InitStruct.Pin = HR_INT_Pin;
 8001982:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001988:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <MX_GPIO_Init+0x454>)
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800198c:	2301      	movs	r3, #1
 800198e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HR_INT_GPIO_Port, &GPIO_InitStruct);
 8001990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001994:	4619      	mov	r1, r3
 8001996:	4821      	ldr	r0, [pc, #132]	; (8001a1c <MX_GPIO_Init+0x45c>)
 8001998:	f003 f890 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : LRA_EN_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin;
 800199c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019a6:	2302      	movs	r3, #2
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LRA_EN_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b2:	4619      	mov	r1, r3
 80019b4:	4819      	ldr	r0, [pc, #100]	; (8001a1c <MX_GPIO_Init+0x45c>)
 80019b6:	f003 f881 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_INT_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin;
 80019ba:	2310      	movs	r3, #16
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <MX_GPIO_Init+0x454>)
 80019c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MAG_INT_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ca:	4619      	mov	r1, r3
 80019cc:	4814      	ldr	r0, [pc, #80]	; (8001a20 <MX_GPIO_Init+0x460>)
 80019ce:	f003 f875 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 80019d2:	2304      	movs	r3, #4
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d6:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <MX_GPIO_Init+0x464>)
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e2:	4619      	mov	r1, r3
 80019e4:	4810      	ldr	r0, [pc, #64]	; (8001a28 <MX_GPIO_Init+0x468>)
 80019e6:	f003 f869 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin;
 80019ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f0:	2300      	movs	r3, #0
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IMU_INT2_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fc:	4619      	mov	r1, r3
 80019fe:	4804      	ldr	r0, [pc, #16]	; (8001a10 <MX_GPIO_Init+0x450>)
 8001a00:	f003 f85c 	bl	8004abc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a04:	bf00      	nop
 8001a06:	3740      	adds	r7, #64	; 0x40
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	42022000 	.word	0x42022000
 8001a10:	42021400 	.word	0x42021400
 8001a14:	10210000 	.word	0x10210000
 8001a18:	42021000 	.word	0x42021000
 8001a1c:	42020c00 	.word	0x42020c00
 8001a20:	42020800 	.word	0x42020800
 8001a24:	10110000 	.word	0x10110000
 8001a28:	42020400 	.word	0x42020400

08001a2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d101      	bne.n	8001a42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a3e:	f001 fb45 	bl	80030cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40001000 	.word	0x40001000

08001a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <Error_Handler+0x8>
	...

08001a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_MspInit+0x30>)
 8001a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a68:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <HAL_MspInit+0x30>)
 8001a6a:	f043 0304 	orr.w	r3, r3, #4
 8001a6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_MspInit+0x30>)
 8001a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	46020c00 	.word	0x46020c00

08001a90 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b0c2      	sub	sp, #264	; 0x108
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001a9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a9e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	22e0      	movs	r2, #224	; 0xe0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f00d fb9d 	bl	800f1f8 <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8001abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ac2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a2b      	ldr	r2, [pc, #172]	; (8001b78 <HAL_MDF_MspInit+0xe8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d14e      	bne.n	8001b6e <HAL_MDF_MspInit+0xde>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001ad0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae2:	f107 0310 	add.w	r3, r7, #16
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f006 fe46 	bl	8008778 <HAL_RCCEx_PeriphCLKConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_MDF_MspInit+0x66>
    {
      Error_Handler();
 8001af2:	f7ff ffad 	bl	8001a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 8001af6:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <HAL_MDF_MspInit+0xec>)
 8001af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afc:	4a1f      	ldr	r2, [pc, #124]	; (8001b7c <HAL_MDF_MspInit+0xec>)
 8001afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <HAL_MDF_MspInit+0xec>)
 8001b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <HAL_MDF_MspInit+0xec>)
 8001b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b1a:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <HAL_MDF_MspInit+0xec>)
 8001b1c:	f043 0310 	orr.w	r3, r3, #16
 8001b20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b24:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_MDF_MspInit+0xec>)
 8001b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b2a:	f003 0210 	and.w	r2, r3, #16
 8001b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b32:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b3c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b40:	681b      	ldr	r3, [r3, #0]
    /**ADF1 GPIO Configuration
    PE9     ------> ADF1_CCK0
    PE10     ------> ADF1_SDI0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b62:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <HAL_MDF_MspInit+0xf0>)
 8001b6a:	f002 ffa7 	bl	8004abc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 8001b6e:	bf00      	nop
 8001b70:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	46024080 	.word	0x46024080
 8001b7c:	46020c00 	.word	0x46020c00
 8001b80:	42021000 	.word	0x42021000

08001b84 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <HAL_CRC_MspInit+0x3c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d10e      	bne.n	8001bb4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b96:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_CRC_MspInit+0x40>)
 8001b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9c:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <HAL_CRC_MspInit+0x40>)
 8001b9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ba2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_CRC_MspInit+0x40>)
 8001ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	40023000 	.word	0x40023000
 8001bc4:	46020c00 	.word	0x46020c00

08001bc8 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <HAL_DCACHE_MspInit+0x68>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d10f      	bne.n	8001bfa <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <HAL_DCACHE_MspInit+0x6c>)
 8001bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be0:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <HAL_DCACHE_MspInit+0x6c>)
 8001be2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001be6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_DCACHE_MspInit+0x6c>)
 8001bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 8001bf8:	e013      	b.n	8001c22 <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a0e      	ldr	r2, [pc, #56]	; (8001c38 <HAL_DCACHE_MspInit+0x70>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d10e      	bne.n	8001c22 <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_DCACHE_MspInit+0x6c>)
 8001c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <HAL_DCACHE_MspInit+0x6c>)
 8001c0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <HAL_DCACHE_MspInit+0x6c>)
 8001c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40031400 	.word	0x40031400
 8001c34:	46020c00 	.word	0x46020c00
 8001c38:	40031800 	.word	0x40031800

08001c3c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0e      	ldr	r2, [pc, #56]	; (8001c84 <HAL_DMA2D_MspInit+0x48>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d116      	bne.n	8001c7c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <HAL_DMA2D_MspInit+0x4c>)
 8001c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c54:	4a0c      	ldr	r2, [pc, #48]	; (8001c88 <HAL_DMA2D_MspInit+0x4c>)
 8001c56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_DMA2D_MspInit+0x4c>)
 8001c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	2076      	movs	r0, #118	; 0x76
 8001c72:	f001 fb4f 	bl	8003314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001c76:	2076      	movs	r0, #118	; 0x76
 8001c78:	f001 fb66 	bl	8003348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	4002b000 	.word	0x4002b000
 8001c88:	46020c00 	.word	0x46020c00

08001c8c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b0c2      	sub	sp, #264	; 0x108
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c9a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	22e0      	movs	r2, #224	; 0xe0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f00d fa9f 	bl	800f1f8 <memset>
  if(hdsi->Instance==DSI)
 8001cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a30      	ldr	r2, [pc, #192]	; (8001d88 <HAL_DSI_MspInit+0xfc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d157      	bne.n	8001d7c <HAL_DSI_MspInit+0xf0>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	f04f 0304 	mov.w	r3, #4
 8001cd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 8001cd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cdc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f006 fd47 	bl	8008778 <HAL_RCCEx_PeriphCLKConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_DSI_MspInit+0x68>
    {
      Error_Handler();
 8001cf0:	f7ff feae 	bl	8001a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001cf4:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_DSI_MspInit+0x100>)
 8001cf6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001cfa:	4a24      	ldr	r2, [pc, #144]	; (8001d8c <HAL_DSI_MspInit+0x100>)
 8001cfc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d00:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001d04:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_DSI_MspInit+0x100>)
 8001d06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d12:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <HAL_DSI_MspInit+0x100>)
 8001d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d18:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <HAL_DSI_MspInit+0x100>)
 8001d1a:	f043 0320 	orr.w	r3, r3, #32
 8001d1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d22:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <HAL_DSI_MspInit+0x100>)
 8001d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d28:	f003 0220 	and.w	r2, r3, #32
 8001d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d30:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d3a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d3e:	681b      	ldr	r3, [r3, #0]
    DSI_CKN     ------> DSIHOST_CKN
    DSI_D1N     ------> DSIHOST_D1N
    DSI_D1P     ------> DSIHOST_D1P
    PF10     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8001d5a:	230b      	movs	r3, #11
 8001d5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d60:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d64:	4619      	mov	r1, r3
 8001d66:	480a      	ldr	r0, [pc, #40]	; (8001d90 <HAL_DSI_MspInit+0x104>)
 8001d68:	f002 fea8 	bl	8004abc <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2100      	movs	r1, #0
 8001d70:	2089      	movs	r0, #137	; 0x89
 8001d72:	f001 facf 	bl	8003314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001d76:	2089      	movs	r0, #137	; 0x89
 8001d78:	f001 fae6 	bl	8003348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001d7c:	bf00      	nop
 8001d7e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40016c00 	.word	0x40016c00
 8001d8c:	46020c00 	.word	0x46020c00
 8001d90:	42021400 	.word	0x42021400

08001d94 <HAL_GFXMMU_MspInit>:
* This function configures the hardware resources used in this example
* @param hgfxmmu: GFXMMU handle pointer
* @retval None
*/
void HAL_GFXMMU_MspInit(GFXMMU_HandleTypeDef* hgfxmmu)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if(hgfxmmu->Instance==GFXMMU)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <HAL_GFXMMU_MspInit+0x48>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d116      	bne.n	8001dd4 <HAL_GFXMMU_MspInit+0x40>
  {
  /* USER CODE BEGIN GFXMMU_MspInit 0 */

  /* USER CODE END GFXMMU_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GFXMMU_CLK_ENABLE();
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_GFXMMU_MspInit+0x4c>)
 8001da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dac:	4a0c      	ldr	r2, [pc, #48]	; (8001de0 <HAL_GFXMMU_MspInit+0x4c>)
 8001dae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001db2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_GFXMMU_MspInit+0x4c>)
 8001db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
    /* GFXMMU interrupt Init */
    HAL_NVIC_SetPriority(GFXMMU_IRQn, 0, 0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	2086      	movs	r0, #134	; 0x86
 8001dca:	f001 faa3 	bl	8003314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GFXMMU_IRQn);
 8001dce:	2086      	movs	r0, #134	; 0x86
 8001dd0:	f001 faba 	bl	8003348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GFXMMU_MspInit 1 */

  /* USER CODE END GFXMMU_MspInit 1 */
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	4002c000 	.word	0x4002c000
 8001de0:	46020c00 	.word	0x46020c00

08001de4 <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1a      	ldr	r2, [pc, #104]	; (8001e5c <HAL_GPU2D_MspInit+0x78>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d12d      	bne.n	8001e52 <HAL_GPU2D_MspInit+0x6e>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_GPU2D_MspInit+0x7c>)
 8001df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfc:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <HAL_GPU2D_MspInit+0x7c>)
 8001dfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e02:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <HAL_GPU2D_MspInit+0x7c>)
 8001e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_GPU2D_MspInit+0x7c>)
 8001e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1a:	4a11      	ldr	r2, [pc, #68]	; (8001e60 <HAL_GPU2D_MspInit+0x7c>)
 8001e1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_GPU2D_MspInit+0x7c>)
 8001e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	2084      	movs	r0, #132	; 0x84
 8001e38:	f001 fa6c 	bl	8003314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 8001e3c:	2084      	movs	r0, #132	; 0x84
 8001e3e:	f001 fa83 	bl	8003348 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	2085      	movs	r0, #133	; 0x85
 8001e48:	f001 fa64 	bl	8003314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 8001e4c:	2085      	movs	r0, #133	; 0x85
 8001e4e:	f001 fa7b 	bl	8003348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */

  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	4002f000 	.word	0x4002f000
 8001e60:	46020c00 	.word	0x46020c00

08001e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b0ca      	sub	sp, #296	; 0x128
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001e6e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e72:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e88:	22e0      	movs	r2, #224	; 0xe0
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f00d f9b3 	bl	800f1f8 <memset>
  if(hi2c->Instance==I2C1)
 8001e92:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001e96:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4ad3      	ldr	r2, [pc, #844]	; (80021ec <HAL_I2C_MspInit+0x388>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d14f      	bne.n	8001f44 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ea4:	f04f 0240 	mov.w	r2, #64	; 0x40
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f006 fc5c 	bl	8008778 <HAL_RCCEx_PeriphCLKConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001ec6:	f7ff fdc3 	bl	8001a50 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001eca:	4bc9      	ldr	r3, [pc, #804]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8001ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ed0:	4ac7      	ldr	r2, [pc, #796]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8001ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ed6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001eda:	4bc5      	ldr	r3, [pc, #788]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8001edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001ee8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001eec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ef0:	2312      	movs	r3, #18
 8001ef2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f02:	2304      	movs	r3, #4
 8001f04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f08:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	48b9      	ldr	r0, [pc, #740]	; (80021f4 <HAL_I2C_MspInit+0x390>)
 8001f10:	f002 fdd4 	bl	8004abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f14:	4bb6      	ldr	r3, [pc, #728]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8001f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f1a:	4ab5      	ldr	r2, [pc, #724]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8001f1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f20:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001f24:	4bb2      	ldr	r3, [pc, #712]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8001f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f2a:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001f2e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f32:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f3c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f40:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C6_MspInit 1 */

  /* USER CODE END I2C6_MspInit 1 */
  }

}
 8001f42:	e14e      	b.n	80021e2 <HAL_I2C_MspInit+0x37e>
  else if(hi2c->Instance==I2C2)
 8001f44:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f48:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4aa9      	ldr	r2, [pc, #676]	; (80021f8 <HAL_I2C_MspInit+0x394>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d157      	bne.n	8002006 <HAL_I2C_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f56:	f04f 0280 	mov.w	r2, #128	; 0x80
 8001f5a:	f04f 0300 	mov.w	r3, #0
 8001f5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f006 fc03 	bl	8008778 <HAL_RCCEx_PeriphCLKConfig>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001f78:	f7ff fd6a 	bl	8001a50 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7c:	4b9c      	ldr	r3, [pc, #624]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8001f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f82:	4a9b      	ldr	r2, [pc, #620]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f8c:	4b98      	ldr	r3, [pc, #608]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8001f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f92:	f003 0202 	and.w	r2, r3, #2
 8001f96:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001fa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001fa8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001faa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001fae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb2:	2312      	movs	r3, #18
 8001fb4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fca:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001fce:	4619      	mov	r1, r3
 8001fd0:	488a      	ldr	r0, [pc, #552]	; (80021fc <HAL_I2C_MspInit+0x398>)
 8001fd2:	f002 fd73 	bl	8004abc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fd6:	4b86      	ldr	r3, [pc, #536]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8001fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fdc:	4a84      	ldr	r2, [pc, #528]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8001fde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fe2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001fe6:	4b82      	ldr	r3, [pc, #520]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8001fe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ff0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	e0ed      	b.n	80021e2 <HAL_I2C_MspInit+0x37e>
  else if(hi2c->Instance==I2C4)
 8002006:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800200a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a7b      	ldr	r2, [pc, #492]	; (8002200 <HAL_I2C_MspInit+0x39c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d157      	bne.n	80020c8 <HAL_I2C_MspInit+0x264>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002018:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800202a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800202e:	4618      	mov	r0, r3
 8002030:	f006 fba2 	bl	8008778 <HAL_RCCEx_PeriphCLKConfig>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_MspInit+0x1da>
      Error_Handler();
 800203a:	f7ff fd09 	bl	8001a50 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800203e:	4b6c      	ldr	r3, [pc, #432]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8002040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002044:	4a6a      	ldr	r2, [pc, #424]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8002046:	f043 0308 	orr.w	r3, r3, #8
 800204a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800204e:	4b68      	ldr	r3, [pc, #416]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8002050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002054:	f003 0208 	and.w	r2, r3, #8
 8002058:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800205c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002066:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800206a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800206c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002070:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002074:	2312      	movs	r3, #18
 8002076:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002086:	2304      	movs	r3, #4
 8002088:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800208c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002090:	4619      	mov	r1, r3
 8002092:	485c      	ldr	r0, [pc, #368]	; (8002204 <HAL_I2C_MspInit+0x3a0>)
 8002094:	f002 fd12 	bl	8004abc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002098:	4b55      	ldr	r3, [pc, #340]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 800209a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800209e:	4a54      	ldr	r2, [pc, #336]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80020a8:	4b51      	ldr	r3, [pc, #324]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 80020aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80020ae:	f003 0202 	and.w	r2, r3, #2
 80020b2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80020b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80020c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020c4:	681b      	ldr	r3, [r3, #0]
}
 80020c6:	e08c      	b.n	80021e2 <HAL_I2C_MspInit+0x37e>
  else if(hi2c->Instance==I2C6)
 80020c8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80020cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a4c      	ldr	r2, [pc, #304]	; (8002208 <HAL_I2C_MspInit+0x3a4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	f040 8083 	bne.w	80021e2 <HAL_I2C_MspInit+0x37e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C6;
 80020dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.I2c6ClockSelection = RCC_I2C6CLKSOURCE_PCLK1;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020f2:	4618      	mov	r0, r3
 80020f4:	f006 fb40 	bl	8008778 <HAL_RCCEx_PeriphCLKConfig>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_MspInit+0x29e>
      Error_Handler();
 80020fe:	f7ff fca7 	bl	8001a50 <Error_Handler>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002102:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8002104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002108:	4a39      	ldr	r2, [pc, #228]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 800210a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002112:	4b37      	ldr	r3, [pc, #220]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8002114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002118:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800211c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002120:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800212a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800212e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002130:	4b2f      	ldr	r3, [pc, #188]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8002132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002136:	4a2e      	ldr	r2, [pc, #184]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8002138:	f043 0320 	orr.w	r3, r3, #32
 800213c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002140:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 8002142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002146:	f003 0220 	and.w	r2, r3, #32
 800214a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800214e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002158:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800215c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800215e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002162:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002166:	2312      	movs	r3, #18
 8002168:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 8002178:	2302      	movs	r3, #2
 800217a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800217e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002182:	4619      	mov	r1, r3
 8002184:	4821      	ldr	r0, [pc, #132]	; (800220c <HAL_I2C_MspInit+0x3a8>)
 8002186:	f002 fc99 	bl	8004abc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800218a:	2301      	movs	r3, #1
 800218c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002190:	2312      	movs	r3, #18
 8002192:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 80021a2:	2302      	movs	r3, #2
 80021a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021a8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80021ac:	4619      	mov	r1, r3
 80021ae:	4818      	ldr	r0, [pc, #96]	; (8002210 <HAL_I2C_MspInit+0x3ac>)
 80021b0:	f002 fc84 	bl	8004abc <HAL_GPIO_Init>
    __HAL_RCC_I2C6_CLK_ENABLE();
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 80021b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80021ba:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 80021bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80021c4:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_I2C_MspInit+0x38c>)
 80021c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80021ca:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80021ce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80021d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80021dc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021e0:	681b      	ldr	r3, [r3, #0]
}
 80021e2:	bf00      	nop
 80021e4:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40005400 	.word	0x40005400
 80021f0:	46020c00 	.word	0x46020c00
 80021f4:	42021800 	.word	0x42021800
 80021f8:	40005800 	.word	0x40005800
 80021fc:	42020400 	.word	0x42020400
 8002200:	40008400 	.word	0x40008400
 8002204:	42020c00 	.word	0x42020c00
 8002208:	40009c00 	.word	0x40009c00
 800220c:	42022400 	.word	0x42022400
 8002210:	42021400 	.word	0x42021400

08002214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b0c8      	sub	sp, #288	; 0x120
 8002218:	af00      	add	r7, sp, #0
 800221a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800221e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002222:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002234:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002238:	22e0      	movs	r2, #224	; 0xe0
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f00c ffdb 	bl	800f1f8 <memset>
  if(huart->Instance==LPUART1)
 8002242:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002246:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4aa1      	ldr	r2, [pc, #644]	; (80024d4 <HAL_UART_MspInit+0x2c0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d17b      	bne.n	800234c <HAL_UART_MspInit+0x138>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002254:	f04f 0220 	mov.w	r2, #32
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800226a:	4618      	mov	r0, r3
 800226c:	f006 fa84 	bl	8008778 <HAL_RCCEx_PeriphCLKConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8002276:	f7ff fbeb 	bl	8001a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800227a:	4b97      	ldr	r3, [pc, #604]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 800227c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002280:	4a95      	ldr	r2, [pc, #596]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 8002282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002286:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800228a:	4b93      	ldr	r3, [pc, #588]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 800228c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002298:	4b8f      	ldr	r3, [pc, #572]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 800229a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800229e:	4a8e      	ldr	r2, [pc, #568]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 80022a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022a8:	4b8b      	ldr	r3, [pc, #556]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 80022aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ae:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80022b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80022b6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80022c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022c4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c6:	4b84      	ldr	r3, [pc, #528]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 80022c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022cc:	4a82      	ldr	r2, [pc, #520]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 80022ce:	f043 0302 	orr.w	r3, r3, #2
 80022d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022d6:	4b80      	ldr	r3, [pc, #512]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 80022d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022dc:	f003 0202 	and.w	r2, r3, #2
 80022e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80022e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80022ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80022f2:	681b      	ldr	r3, [r3, #0]
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    PG5     ------> LPUART1_CTS
    PB1     ------> LPUART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_5;
 80022f4:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 80022f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800230e:	2308      	movs	r3, #8
 8002310:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002314:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002318:	4619      	mov	r1, r3
 800231a:	4870      	ldr	r0, [pc, #448]	; (80024dc <HAL_UART_MspInit+0x2c8>)
 800231c:	f002 fbce 	bl	8004abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002320:	2302      	movs	r3, #2
 8002322:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002338:	2308      	movs	r3, #8
 800233a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002342:	4619      	mov	r1, r3
 8002344:	4866      	ldr	r0, [pc, #408]	; (80024e0 <HAL_UART_MspInit+0x2cc>)
 8002346:	f002 fbb9 	bl	8004abc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800234a:	e0bd      	b.n	80024c8 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART1)
 800234c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002350:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a62      	ldr	r2, [pc, #392]	; (80024e4 <HAL_UART_MspInit+0x2d0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d155      	bne.n	800240a <HAL_UART_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800235e:	f04f 0201 	mov.w	r2, #1
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800236a:	2300      	movs	r3, #0
 800236c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800236e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002372:	4618      	mov	r0, r3
 8002374:	f006 fa00 	bl	8008778 <HAL_RCCEx_PeriphCLKConfig>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 800237e:	f7ff fb67 	bl	8001a50 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002382:	4b55      	ldr	r3, [pc, #340]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 8002384:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002388:	4a53      	ldr	r2, [pc, #332]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 800238a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800238e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002392:	4b51      	ldr	r3, [pc, #324]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 8002394:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002398:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800239c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80023a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80023aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023ae:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b0:	4b49      	ldr	r3, [pc, #292]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 80023b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023b6:	4a48      	ldr	r2, [pc, #288]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80023c0:	4b45      	ldr	r3, [pc, #276]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 80023c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023c6:	f003 0202 	and.w	r2, r3, #2
 80023ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80023ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80023d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023dc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80023de:	23c0      	movs	r3, #192	; 0xc0
 80023e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023f6:	2307      	movs	r3, #7
 80023f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002400:	4619      	mov	r1, r3
 8002402:	4837      	ldr	r0, [pc, #220]	; (80024e0 <HAL_UART_MspInit+0x2cc>)
 8002404:	f002 fb5a 	bl	8004abc <HAL_GPIO_Init>
}
 8002408:	e05e      	b.n	80024c8 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART6)
 800240a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800240e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a34      	ldr	r2, [pc, #208]	; (80024e8 <HAL_UART_MspInit+0x2d4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d155      	bne.n	80024c8 <HAL_UART_MspInit+0x2b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800241c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800242e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002432:	4618      	mov	r0, r3
 8002434:	f006 f9a0 	bl	8008778 <HAL_RCCEx_PeriphCLKConfig>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 800243e:	f7ff fb07 	bl	8001a50 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002442:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 8002444:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002448:	4a23      	ldr	r2, [pc, #140]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 800244a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800244e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002452:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 8002454:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002458:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 800245c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002460:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800246a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800246e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 8002472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002476:	4a18      	ldr	r2, [pc, #96]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 8002478:	f043 0304 	orr.w	r3, r3, #4
 800247c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_UART_MspInit+0x2c4>)
 8002482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002486:	f003 0204 	and.w	r2, r3, #4
 800248a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800248e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002498:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800249c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 800249e:	230c      	movs	r3, #12
 80024a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80024b6:	2307      	movs	r3, #7
 80024b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024bc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80024c0:	4619      	mov	r1, r3
 80024c2:	480a      	ldr	r0, [pc, #40]	; (80024ec <HAL_UART_MspInit+0x2d8>)
 80024c4:	f002 fafa 	bl	8004abc <HAL_GPIO_Init>
}
 80024c8:	bf00      	nop
 80024ca:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	46002400 	.word	0x46002400
 80024d8:	46020c00 	.word	0x46020c00
 80024dc:	42021800 	.word	0x42021800
 80024e0:	42020400 	.word	0x42020400
 80024e4:	40013800 	.word	0x40013800
 80024e8:	40006400 	.word	0x40006400
 80024ec:	42020800 	.word	0x42020800

080024f0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b0bc      	sub	sp, #240	; 0xf0
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	22e0      	movs	r2, #224	; 0xe0
 80024fe:	2100      	movs	r1, #0
 8002500:	4618      	mov	r0, r3
 8002502:	f00c fe79 	bl	800f1f8 <memset>
  if(hltdc->Instance==LTDC)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a22      	ldr	r2, [pc, #136]	; (8002594 <HAL_LTDC_MspInit+0xa4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d13d      	bne.n	800258c <HAL_LTDC_MspInit+0x9c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0302 	mov.w	r3, #2
 8002518:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 800251c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002520:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8002524:	2303      	movs	r3, #3
 8002526:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLL2.PLL2M = 1;
 8002528:	2301      	movs	r3, #1
 800252a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLL2.PLL2N = 20;
 800252c:	2314      	movs	r3, #20
 800252e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2P = 2;
 8002530:	2302      	movs	r3, #2
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLL2.PLL2Q = 2;
 8002534:	2302      	movs	r3, #2
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLL2.PLL2R = 2;
 8002538:	2302      	movs	r3, #2
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 800253c:	230c      	movs	r3, #12
 800253e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8002544:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002548:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800254a:	f107 0310 	add.w	r3, r7, #16
 800254e:	4618      	mov	r0, r3
 8002550:	f006 f912 	bl	8008778 <HAL_RCCEx_PeriphCLKConfig>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 800255a:	f7ff fa79 	bl	8001a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <HAL_LTDC_MspInit+0xa8>)
 8002560:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002564:	4a0c      	ldr	r2, [pc, #48]	; (8002598 <HAL_LTDC_MspInit+0xa8>)
 8002566:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800256a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_LTDC_MspInit+0xa8>)
 8002570:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002574:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800257c:	2200      	movs	r2, #0
 800257e:	2100      	movs	r1, #0
 8002580:	2087      	movs	r0, #135	; 0x87
 8002582:	f000 fec7 	bl	8003314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002586:	2087      	movs	r0, #135	; 0x87
 8002588:	f000 fede 	bl	8003348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800258c:	bf00      	nop
 800258e:	37f0      	adds	r7, #240	; 0xf0
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40016800 	.word	0x40016800
 8002598:	46020c00 	.word	0x46020c00

0800259c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b0ca      	sub	sp, #296	; 0x128
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80025a6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80025aa:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025c0:	22e0      	movs	r2, #224	; 0xe0
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f00c fe17 	bl	800f1f8 <memset>
  if(hospi->Instance==OCTOSPI1)
 80025ca:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80025ce:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a93      	ldr	r2, [pc, #588]	; (8002824 <HAL_OSPI_MspInit+0x288>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	f040 8133 	bne.w	8002844 <HAL_OSPI_MspInit+0x2a8>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80025de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025f4:	4618      	mov	r0, r3
 80025f6:	f006 f8bf 	bl	8008778 <HAL_RCCEx_PeriphCLKConfig>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8002600:	f7ff fa26 	bl	8001a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8002604:	4b88      	ldr	r3, [pc, #544]	; (8002828 <HAL_OSPI_MspInit+0x28c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	3301      	adds	r3, #1
 800260a:	4a87      	ldr	r2, [pc, #540]	; (8002828 <HAL_OSPI_MspInit+0x28c>)
 800260c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 800260e:	4b86      	ldr	r3, [pc, #536]	; (8002828 <HAL_OSPI_MspInit+0x28c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d10e      	bne.n	8002634 <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8002616:	4b85      	ldr	r3, [pc, #532]	; (800282c <HAL_OSPI_MspInit+0x290>)
 8002618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800261c:	4a83      	ldr	r2, [pc, #524]	; (800282c <HAL_OSPI_MspInit+0x290>)
 800261e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002622:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002626:	4b81      	ldr	r3, [pc, #516]	; (800282c <HAL_OSPI_MspInit+0x290>)
 8002628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800262c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002634:	4b7d      	ldr	r3, [pc, #500]	; (800282c <HAL_OSPI_MspInit+0x290>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	4a7c      	ldr	r2, [pc, #496]	; (800282c <HAL_OSPI_MspInit+0x290>)
 800263c:	f043 0310 	orr.w	r3, r3, #16
 8002640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002644:	4b79      	ldr	r3, [pc, #484]	; (800282c <HAL_OSPI_MspInit+0x290>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264a:	f003 0210 	and.w	r2, r3, #16
 800264e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002652:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800265c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002660:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002662:	4b72      	ldr	r3, [pc, #456]	; (800282c <HAL_OSPI_MspInit+0x290>)
 8002664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002668:	4a70      	ldr	r2, [pc, #448]	; (800282c <HAL_OSPI_MspInit+0x290>)
 800266a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800266e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002672:	4b6e      	ldr	r3, [pc, #440]	; (800282c <HAL_OSPI_MspInit+0x290>)
 8002674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002678:	f003 0280 	and.w	r2, r3, #128	; 0x80
 800267c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800268a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800268e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002690:	4b66      	ldr	r3, [pc, #408]	; (800282c <HAL_OSPI_MspInit+0x290>)
 8002692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002696:	4a65      	ldr	r2, [pc, #404]	; (800282c <HAL_OSPI_MspInit+0x290>)
 8002698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800269c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026a0:	4b62      	ldr	r3, [pc, #392]	; (800282c <HAL_OSPI_MspInit+0x290>)
 80026a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a6:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80026aa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80026ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80026b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026bc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80026be:	4b5b      	ldr	r3, [pc, #364]	; (800282c <HAL_OSPI_MspInit+0x290>)
 80026c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026c4:	4a59      	ldr	r2, [pc, #356]	; (800282c <HAL_OSPI_MspInit+0x290>)
 80026c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026ce:	4b57      	ldr	r3, [pc, #348]	; (800282c <HAL_OSPI_MspInit+0x290>)
 80026d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026d4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80026d8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80026dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80026e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026ea:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ec:	4b4f      	ldr	r3, [pc, #316]	; (800282c <HAL_OSPI_MspInit+0x290>)
 80026ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026f2:	4a4e      	ldr	r2, [pc, #312]	; (800282c <HAL_OSPI_MspInit+0x290>)
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026fc:	4b4b      	ldr	r3, [pc, #300]	; (800282c <HAL_OSPI_MspInit+0x290>)
 80026fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002702:	f003 0202 	and.w	r2, r3, #2
 8002706:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800270a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002714:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002718:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800271a:	4b44      	ldr	r3, [pc, #272]	; (800282c <HAL_OSPI_MspInit+0x290>)
 800271c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002720:	4a42      	ldr	r2, [pc, #264]	; (800282c <HAL_OSPI_MspInit+0x290>)
 8002722:	f043 0310 	orr.w	r3, r3, #16
 8002726:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800272a:	4b40      	ldr	r3, [pc, #256]	; (800282c <HAL_OSPI_MspInit+0x290>)
 800272c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002730:	f003 0210 	and.w	r2, r3, #16
 8002734:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002738:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002742:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002746:	681b      	ldr	r3, [r3, #0]
    PH9     ------> OCTOSPIM_P2_IO4
    PH12     ------> OCTOSPIM_P2_IO7
    PB10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9
 8002748:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800274c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275c:	2303      	movs	r3, #3
 800275e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8002762:	2305      	movs	r3, #5
 8002764:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002768:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800276c:	4619      	mov	r1, r3
 800276e:	4830      	ldr	r0, [pc, #192]	; (8002830 <HAL_OSPI_MspInit+0x294>)
 8002770:	f002 f9a4 	bl	8004abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002774:	2340      	movs	r3, #64	; 0x40
 8002776:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002786:	2303      	movs	r3, #3
 8002788:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800278c:	2303      	movs	r3, #3
 800278e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002792:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002796:	4619      	mov	r1, r3
 8002798:	4826      	ldr	r0, [pc, #152]	; (8002834 <HAL_OSPI_MspInit+0x298>)
 800279a:	f002 f98f 	bl	8004abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800279e:	230e      	movs	r3, #14
 80027a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	2302      	movs	r3, #2
 80027a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b0:	2303      	movs	r3, #3
 80027b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPI2;
 80027b6:	2306      	movs	r3, #6
 80027b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80027bc:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80027c0:	4619      	mov	r1, r3
 80027c2:	481d      	ldr	r0, [pc, #116]	; (8002838 <HAL_OSPI_MspInit+0x29c>)
 80027c4:	f002 f97a 	bl	8004abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 80027c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	2302      	movs	r3, #2
 80027d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027dc:	2303      	movs	r3, #3
 80027de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80027e2:	230a      	movs	r3, #10
 80027e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80027ec:	4619      	mov	r1, r3
 80027ee:	4813      	ldr	r0, [pc, #76]	; (800283c <HAL_OSPI_MspInit+0x2a0>)
 80027f0:	f002 f964 	bl	8004abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80027f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fc:	2302      	movs	r3, #2
 80027fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002808:	2303      	movs	r3, #3
 800280a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800280e:	230a      	movs	r3, #10
 8002810:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002814:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002818:	4619      	mov	r1, r3
 800281a:	4809      	ldr	r0, [pc, #36]	; (8002840 <HAL_OSPI_MspInit+0x2a4>)
 800281c:	f002 f94e 	bl	8004abc <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8002820:	e08f      	b.n	8002942 <HAL_OSPI_MspInit+0x3a6>
 8002822:	bf00      	nop
 8002824:	420d1400 	.word	0x420d1400
 8002828:	20000cf8 	.word	0x20000cf8
 800282c:	46020c00 	.word	0x46020c00
 8002830:	42021c00 	.word	0x42021c00
 8002834:	42021800 	.word	0x42021800
 8002838:	42022000 	.word	0x42022000
 800283c:	42020400 	.word	0x42020400
 8002840:	42021000 	.word	0x42021000
  else if(hospi->Instance==OCTOSPI2)
 8002844:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002848:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a3e      	ldr	r2, [pc, #248]	; (800294c <HAL_OSPI_MspInit+0x3b0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d175      	bne.n	8002942 <HAL_OSPI_MspInit+0x3a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002856:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002862:	2300      	movs	r3, #0
 8002864:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002868:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800286c:	4618      	mov	r0, r3
 800286e:	f005 ff83 	bl	8008778 <HAL_RCCEx_PeriphCLKConfig>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_OSPI_MspInit+0x2e0>
      Error_Handler();
 8002878:	f7ff f8ea 	bl	8001a50 <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 800287c:	4b34      	ldr	r3, [pc, #208]	; (8002950 <HAL_OSPI_MspInit+0x3b4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	3301      	adds	r3, #1
 8002882:	4a33      	ldr	r2, [pc, #204]	; (8002950 <HAL_OSPI_MspInit+0x3b4>)
 8002884:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8002886:	4b32      	ldr	r3, [pc, #200]	; (8002950 <HAL_OSPI_MspInit+0x3b4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d116      	bne.n	80028bc <HAL_OSPI_MspInit+0x320>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 800288e:	4b31      	ldr	r3, [pc, #196]	; (8002954 <HAL_OSPI_MspInit+0x3b8>)
 8002890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002894:	4a2f      	ldr	r2, [pc, #188]	; (8002954 <HAL_OSPI_MspInit+0x3b8>)
 8002896:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800289a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800289e:	4b2d      	ldr	r3, [pc, #180]	; (8002954 <HAL_OSPI_MspInit+0x3b8>)
 80028a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80028a8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80028ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80028b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028ba:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80028bc:	4b25      	ldr	r3, [pc, #148]	; (8002954 <HAL_OSPI_MspInit+0x3b8>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	4a24      	ldr	r2, [pc, #144]	; (8002954 <HAL_OSPI_MspInit+0x3b8>)
 80028c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028cc:	4b21      	ldr	r3, [pc, #132]	; (8002954 <HAL_OSPI_MspInit+0x3b8>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80028d6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80028da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80028e4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80028e8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ea:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <HAL_OSPI_MspInit+0x3b8>)
 80028ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028f0:	4a18      	ldr	r2, [pc, #96]	; (8002954 <HAL_OSPI_MspInit+0x3b8>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028fa:	4b16      	ldr	r3, [pc, #88]	; (8002954 <HAL_OSPI_MspInit+0x3b8>)
 80028fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002900:	f003 0201 	and.w	r2, r3, #1
 8002904:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002908:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002912:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002916:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002918:	2301      	movs	r3, #1
 800291a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292a:	2303      	movs	r3, #3
 800292c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI2;
 8002930:	230a      	movs	r3, #10
 8002932:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002936:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800293a:	4619      	mov	r1, r3
 800293c:	4806      	ldr	r0, [pc, #24]	; (8002958 <HAL_OSPI_MspInit+0x3bc>)
 800293e:	f002 f8bd 	bl	8004abc <HAL_GPIO_Init>
}
 8002942:	bf00      	nop
 8002944:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	420d2400 	.word	0x420d2400
 8002950:	20000cf8 	.word	0x20000cf8
 8002954:	46020c00 	.word	0x46020c00
 8002958:	42020000 	.word	0x42020000

0800295c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b0bc      	sub	sp, #240	; 0xf0
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002964:	f107 0310 	add.w	r3, r7, #16
 8002968:	22e0      	movs	r2, #224	; 0xe0
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f00c fc43 	bl	800f1f8 <memset>
  if(hrtc->Instance==RTC)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1d      	ldr	r2, [pc, #116]	; (80029ec <HAL_RTC_MspInit+0x90>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d132      	bne.n	80029e2 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800297c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800298c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002990:	f107 0310 	add.w	r3, r7, #16
 8002994:	4618      	mov	r0, r3
 8002996:	f005 feef 	bl	8008778 <HAL_RCCEx_PeriphCLKConfig>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80029a0:	f7ff f856 	bl	8001a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_RTC_MspInit+0x94>)
 80029a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029aa:	4a11      	ldr	r2, [pc, #68]	; (80029f0 <HAL_RTC_MspInit+0x94>)
 80029ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <HAL_RTC_MspInit+0x94>)
 80029b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029ba:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <HAL_RTC_MspInit+0x94>)
 80029bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029c0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80029c4:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <HAL_RTC_MspInit+0x94>)
 80029c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 80029d2:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <HAL_RTC_MspInit+0x94>)
 80029d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029d8:	4a05      	ldr	r2, [pc, #20]	; (80029f0 <HAL_RTC_MspInit+0x94>)
 80029da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80029e2:	bf00      	nop
 80029e4:	37f0      	adds	r7, #240	; 0xf0
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	46007800 	.word	0x46007800
 80029f0:	46020c00 	.word	0x46020c00

080029f4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b0c4      	sub	sp, #272	; 0x110
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a02:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a14:	f107 0318 	add.w	r3, r7, #24
 8002a18:	22e0      	movs	r2, #224	; 0xe0
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f00c fbeb 	bl	800f1f8 <memset>
  if(hsd->Instance==SDMMC1)
 8002a22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a59      	ldr	r2, [pc, #356]	; (8002b94 <HAL_SD_MspInit+0x1a0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	f040 80a9 	bne.w	8002b88 <HAL_SD_MspInit+0x194>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002a36:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL1;
 8002a42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a4a:	f107 0318 	add.w	r3, r7, #24
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f005 fe92 	bl	8008778 <HAL_RCCEx_PeriphCLKConfig>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_SD_MspInit+0x6a>
    {
      Error_Handler();
 8002a5a:	f7fe fff9 	bl	8001a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002a5e:	4b4e      	ldr	r3, [pc, #312]	; (8002b98 <HAL_SD_MspInit+0x1a4>)
 8002a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a64:	4a4c      	ldr	r2, [pc, #304]	; (8002b98 <HAL_SD_MspInit+0x1a4>)
 8002a66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a6e:	4b4a      	ldr	r3, [pc, #296]	; (8002b98 <HAL_SD_MspInit+0x1a4>)
 8002a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7c:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <HAL_SD_MspInit+0x1a4>)
 8002a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a82:	4a45      	ldr	r2, [pc, #276]	; (8002b98 <HAL_SD_MspInit+0x1a4>)
 8002a84:	f043 0304 	orr.w	r3, r3, #4
 8002a88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a8c:	4b42      	ldr	r3, [pc, #264]	; (8002b98 <HAL_SD_MspInit+0x1a4>)
 8002a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a92:	f003 0204 	and.w	r2, r3, #4
 8002a96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a9a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002aa4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002aa8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aaa:	4b3b      	ldr	r3, [pc, #236]	; (8002b98 <HAL_SD_MspInit+0x1a4>)
 8002aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab0:	4a39      	ldr	r2, [pc, #228]	; (8002b98 <HAL_SD_MspInit+0x1a4>)
 8002ab2:	f043 0308 	orr.w	r3, r3, #8
 8002ab6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002aba:	4b37      	ldr	r3, [pc, #220]	; (8002b98 <HAL_SD_MspInit+0x1a4>)
 8002abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ac0:	f003 0208 	and.w	r2, r3, #8
 8002ac4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ac8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ad2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ad6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad8:	4b2f      	ldr	r3, [pc, #188]	; (8002b98 <HAL_SD_MspInit+0x1a4>)
 8002ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ade:	4a2e      	ldr	r2, [pc, #184]	; (8002b98 <HAL_SD_MspInit+0x1a4>)
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <HAL_SD_MspInit+0x1a4>)
 8002aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aee:	f003 0202 	and.w	r2, r3, #2
 8002af2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002b04:	681b      	ldr	r3, [r3, #0]
    PC11     ------> SDMMC1_D3
    PB8     ------> SDMMC1_CKIN
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
 8002b06:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002b0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002b20:	230c      	movs	r3, #12
 8002b22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b26:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	481b      	ldr	r0, [pc, #108]	; (8002b9c <HAL_SD_MspInit+0x1a8>)
 8002b2e:	f001 ffc5 	bl	8004abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b32:	2304      	movs	r3, #4
 8002b34:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b44:	2302      	movs	r3, #2
 8002b46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002b4a:	230c      	movs	r3, #12
 8002b4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b50:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002b54:	4619      	mov	r1, r3
 8002b56:	4812      	ldr	r0, [pc, #72]	; (8002ba0 <HAL_SD_MspInit+0x1ac>)
 8002b58:	f001 ffb0 	bl	8004abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b64:	2302      	movs	r3, #2
 8002b66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b70:	2302      	movs	r3, #2
 8002b72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8002b76:	2308      	movs	r3, #8
 8002b78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002b80:	4619      	mov	r1, r3
 8002b82:	4808      	ldr	r0, [pc, #32]	; (8002ba4 <HAL_SD_MspInit+0x1b0>)
 8002b84:	f001 ff9a 	bl	8004abc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002b88:	bf00      	nop
 8002b8a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	420c8000 	.word	0x420c8000
 8002b98:	46020c00 	.word	0x46020c00
 8002b9c:	42020800 	.word	0x42020800
 8002ba0:	42020c00 	.word	0x42020c00
 8002ba4:	42020400 	.word	0x42020400

08002ba8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b0c4      	sub	sp, #272	; 0x110
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002bb6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bc8:	f107 0318 	add.w	r3, r7, #24
 8002bcc:	22e0      	movs	r2, #224	; 0xe0
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f00c fb11 	bl	800f1f8 <memset>
  if(hspi->Instance==SPI1)
 8002bd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a41      	ldr	r2, [pc, #260]	; (8002ce8 <HAL_SPI_MspInit+0x140>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d17a      	bne.n	8002cde <HAL_SPI_MspInit+0x136>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002be8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8002bf4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bf8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bfc:	f107 0318 	add.w	r3, r7, #24
 8002c00:	4618      	mov	r0, r3
 8002c02:	f005 fdb9 	bl	8008778 <HAL_RCCEx_PeriphCLKConfig>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8002c0c:	f7fe ff20 	bl	8001a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c10:	4b36      	ldr	r3, [pc, #216]	; (8002cec <HAL_SPI_MspInit+0x144>)
 8002c12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c16:	4a35      	ldr	r2, [pc, #212]	; (8002cec <HAL_SPI_MspInit+0x144>)
 8002c18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c1c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002c20:	4b32      	ldr	r3, [pc, #200]	; (8002cec <HAL_SPI_MspInit+0x144>)
 8002c22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2e:	4b2f      	ldr	r3, [pc, #188]	; (8002cec <HAL_SPI_MspInit+0x144>)
 8002c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c34:	4a2d      	ldr	r2, [pc, #180]	; (8002cec <HAL_SPI_MspInit+0x144>)
 8002c36:	f043 0302 	orr.w	r3, r3, #2
 8002c3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c3e:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <HAL_SPI_MspInit+0x144>)
 8002c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c44:	f003 0202 	and.w	r2, r3, #2
 8002c48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c4c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c56:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c5a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5c:	4b23      	ldr	r3, [pc, #140]	; (8002cec <HAL_SPI_MspInit+0x144>)
 8002c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c62:	4a22      	ldr	r2, [pc, #136]	; (8002cec <HAL_SPI_MspInit+0x144>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c6c:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <HAL_SPI_MspInit+0x144>)
 8002c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c72:	f003 0201 	and.w	r2, r3, #1
 8002c76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c88:	681b      	ldr	r3, [r3, #0]
    PB0     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c90:	2302      	movs	r3, #2
 8002c92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ca2:	2305      	movs	r3, #5
 8002ca4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002cac:	4619      	mov	r1, r3
 8002cae:	4810      	ldr	r0, [pc, #64]	; (8002cf0 <HAL_SPI_MspInit+0x148>)
 8002cb0:	f001 ff04 	bl	8004abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 8002cb4:	23e0      	movs	r3, #224	; 0xe0
 8002cb6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ccc:	2305      	movs	r3, #5
 8002cce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4806      	ldr	r0, [pc, #24]	; (8002cf4 <HAL_SPI_MspInit+0x14c>)
 8002cda:	f001 feef 	bl	8004abc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002cde:	bf00      	nop
 8002ce0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40013000 	.word	0x40013000
 8002cec:	46020c00 	.word	0x46020c00
 8002cf0:	42020400 	.word	0x42020400
 8002cf4:	42020000 	.word	0x42020000

08002cf8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b0be      	sub	sp, #248	; 0xf8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d00:	f107 0318 	add.w	r3, r7, #24
 8002d04:	22e0      	movs	r2, #224	; 0xe0
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f00c fa75 	bl	800f1f8 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a32      	ldr	r2, [pc, #200]	; (8002ddc <HAL_PCD_MspInit+0xe4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d15d      	bne.n	8002dd4 <HAL_PCD_MspInit+0xdc>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0308 	mov.w	r3, #8
 8002d20:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_HSE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d2a:	f107 0318 	add.w	r3, r7, #24
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f005 fd22 	bl	8008778 <HAL_RCCEx_PeriphCLKConfig>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 8002d3a:	f7fe fe89 	bl	8001a50 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8002d3e:	200c      	movs	r0, #12
 8002d40:	f000 fa1c 	bl	800317c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002d44:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_PCD_MspInit+0xe8>)
 8002d46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d4a:	4a25      	ldr	r2, [pc, #148]	; (8002de0 <HAL_PCD_MspInit+0xe8>)
 8002d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d50:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d54:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <HAL_PCD_MspInit+0xe8>)
 8002d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8002d62:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <HAL_PCD_MspInit+0xe8>)
 8002d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d68:	4a1d      	ldr	r2, [pc, #116]	; (8002de0 <HAL_PCD_MspInit+0xe8>)
 8002d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d72:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_PCD_MspInit+0xe8>)
 8002d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d80:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <HAL_PCD_MspInit+0xe8>)
 8002d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d11b      	bne.n	8002dc6 <HAL_PCD_MspInit+0xce>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8e:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <HAL_PCD_MspInit+0xe8>)
 8002d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d94:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <HAL_PCD_MspInit+0xe8>)
 8002d96:	f043 0304 	orr.w	r3, r3, #4
 8002d9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <HAL_PCD_MspInit+0xe8>)
 8002da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8002dac:	f004 f996 	bl	80070dc <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002db0:	f004 f9b4 	bl	800711c <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db4:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_PCD_MspInit+0xe8>)
 8002db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dba:	4a09      	ldr	r2, [pc, #36]	; (8002de0 <HAL_PCD_MspInit+0xe8>)
 8002dbc:	f023 0304 	bic.w	r3, r3, #4
 8002dc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002dc4:	e003      	b.n	8002dce <HAL_PCD_MspInit+0xd6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8002dc6:	f004 f989 	bl	80070dc <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002dca:	f004 f9a7 	bl	800711c <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8002dce:	2001      	movs	r0, #1
 8002dd0:	f000 f9c0 	bl	8003154 <HAL_SYSCFG_EnableOTGPHY>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8002dd4:	bf00      	nop
 8002dd6:	37f8      	adds	r7, #248	; 0xf8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	42040000 	.word	0x42040000
 8002de0:	46020c00 	.word	0x46020c00

08002de4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08e      	sub	sp, #56	; 0x38
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002df4:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <HAL_InitTick+0xcc>)
 8002df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dfa:	4a2d      	ldr	r2, [pc, #180]	; (8002eb0 <HAL_InitTick+0xcc>)
 8002dfc:	f043 0310 	orr.w	r3, r3, #16
 8002e00:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002e04:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <HAL_InitTick+0xcc>)
 8002e06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e12:	f107 0210 	add.w	r2, r7, #16
 8002e16:	f107 0314 	add.w	r3, r7, #20
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f005 fbc1 	bl	80085a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e22:	f005 fb83 	bl	800852c <HAL_RCC_GetPCLK1Freq>
 8002e26:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2a:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <HAL_InitTick+0xd0>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	0c9b      	lsrs	r3, r3, #18
 8002e32:	3b01      	subs	r3, #1
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e36:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <HAL_InitTick+0xd4>)
 8002e38:	4a20      	ldr	r2, [pc, #128]	; (8002ebc <HAL_InitTick+0xd8>)
 8002e3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e3c:	4b1e      	ldr	r3, [pc, #120]	; (8002eb8 <HAL_InitTick+0xd4>)
 8002e3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e42:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e44:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <HAL_InitTick+0xd4>)
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <HAL_InitTick+0xd4>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_InitTick+0xd4>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002e56:	4818      	ldr	r0, [pc, #96]	; (8002eb8 <HAL_InitTick+0xd4>)
 8002e58:	f00a f91a 	bl	800d090 <HAL_TIM_Base_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8002e62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d118      	bne.n	8002e9c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002e6a:	4813      	ldr	r0, [pc, #76]	; (8002eb8 <HAL_InitTick+0xd4>)
 8002e6c:	f00a f972 	bl	800d154 <HAL_TIM_Base_Start_IT>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8002e76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10e      	bne.n	8002e9c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b0f      	cmp	r3, #15
 8002e82:	d808      	bhi.n	8002e96 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8002e84:	2200      	movs	r2, #0
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	2031      	movs	r0, #49	; 0x31
 8002e8a:	f000 fa43 	bl	8003314 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e8e:	4a0c      	ldr	r2, [pc, #48]	; (8002ec0 <HAL_InitTick+0xdc>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	e002      	b.n	8002e9c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002e9c:	2031      	movs	r0, #49	; 0x31
 8002e9e:	f000 fa53 	bl	8003348 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8002ea2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3738      	adds	r7, #56	; 0x38
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	46020c00 	.word	0x46020c00
 8002eb4:	431bde83 	.word	0x431bde83
 8002eb8:	20000cfc 	.word	0x20000cfc
 8002ebc:	40001000 	.word	0x40001000
 8002ec0:	20000004 	.word	0x20000004

08002ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002ec8:	f005 fbb4 	bl	8008634 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ecc:	e7fe      	b.n	8002ecc <NMI_Handler+0x8>

08002ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ed2:	e7fe      	b.n	8002ed2 <HardFault_Handler+0x4>

08002ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ed8:	e7fe      	b.n	8002ed8 <MemManage_Handler+0x4>

08002eda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ede:	e7fe      	b.n	8002ede <BusFault_Handler+0x4>

08002ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ee4:	e7fe      	b.n	8002ee4 <UsageFault_Handler+0x4>

08002ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f02:	b480      	push	{r7}
 8002f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f24:	4802      	ldr	r0, [pc, #8]	; (8002f30 <TIM6_IRQHandler+0x10>)
 8002f26:	f00a f9b5 	bl	800d294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000cfc 	.word	0x20000cfc

08002f34 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002f38:	4802      	ldr	r0, [pc, #8]	; (8002f44 <DMA2D_IRQHandler+0x10>)
 8002f3a:	f000 fc8d 	bl	8003858 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	2000016c 	.word	0x2000016c

08002f48 <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 8002f4c:	4802      	ldr	r0, [pc, #8]	; (8002f58 <GPU2D_IRQHandler+0x10>)
 8002f4e:	f001 ffcf 	bl	8004ef0 <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000238 	.word	0x20000238

08002f5c <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 8002f60:	4802      	ldr	r0, [pc, #8]	; (8002f6c <GPU2D_ER_IRQHandler+0x10>)
 8002f62:	f001 ffeb 	bl	8004f3c <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000238 	.word	0x20000238

08002f70 <GFXMMU_IRQHandler>:

/**
  * @brief This function handles GFXMMU global interrupt.
  */
void GFXMMU_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GFXMMU_IRQn 0 */

  /* USER CODE END GFXMMU_IRQn 0 */
  HAL_GFXMMU_IRQHandler(&hgfxmmu);
 8002f74:	4802      	ldr	r0, [pc, #8]	; (8002f80 <GFXMMU_IRQHandler+0x10>)
 8002f76:	f001 fd71 	bl	8004a5c <HAL_GFXMMU_IRQHandler>
  /* USER CODE BEGIN GFXMMU_IRQn 1 */

  /* USER CODE END GFXMMU_IRQn 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200001f0 	.word	0x200001f0

08002f84 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002f88:	4802      	ldr	r0, [pc, #8]	; (8002f94 <LTDC_IRQHandler+0x10>)
 8002f8a:	f002 fa87 	bl	800549c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000550 	.word	0x20000550

08002f98 <DSI_IRQHandler>:

/**
  * @brief This function handles DSIHOST global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002f9c:	4802      	ldr	r0, [pc, #8]	; (8002fa8 <DSI_IRQHandler+0x10>)
 8002f9e:	f001 f8b3 	bl	8004108 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200001cc 	.word	0x200001cc

08002fac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002fb0:	4b18      	ldr	r3, [pc, #96]	; (8003014 <SystemInit+0x68>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb6:	4a17      	ldr	r2, [pc, #92]	; (8003014 <SystemInit+0x68>)
 8002fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002fc0:	4b15      	ldr	r3, [pc, #84]	; (8003018 <SystemInit+0x6c>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002fc6:	4b14      	ldr	r3, [pc, #80]	; (8003018 <SystemInit+0x6c>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002fcc:	4b12      	ldr	r3, [pc, #72]	; (8003018 <SystemInit+0x6c>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002fd2:	4b11      	ldr	r3, [pc, #68]	; (8003018 <SystemInit+0x6c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002fd8:	4b0f      	ldr	r3, [pc, #60]	; (8003018 <SystemInit+0x6c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a0e      	ldr	r2, [pc, #56]	; (8003018 <SystemInit+0x6c>)
 8002fde:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002fe2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002fe6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <SystemInit+0x6c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <SystemInit+0x6c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a09      	ldr	r2, [pc, #36]	; (8003018 <SystemInit+0x6c>)
 8002ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002ffa:	4b07      	ldr	r3, [pc, #28]	; (8003018 <SystemInit+0x6c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <SystemInit+0x68>)
 8003002:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003006:	609a      	str	r2, [r3, #8]
  #endif
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000ed00 	.word	0xe000ed00
 8003018:	46020c00 	.word	0x46020c00

0800301c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800301c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003054 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003020:	f7ff ffc4 	bl	8002fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003024:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003026:	e003      	b.n	8003030 <LoopCopyDataInit>

08003028 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800302a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800302c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800302e:	3104      	adds	r1, #4

08003030 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003030:	480a      	ldr	r0, [pc, #40]	; (800305c <LoopForever+0xa>)
	ldr	r3, =_edata
 8003032:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003034:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003036:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003038:	d3f6      	bcc.n	8003028 <CopyDataInit>
	ldr	r2, =_sbss
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <LoopForever+0x12>)
	b	LoopFillZerobss
 800303c:	e002      	b.n	8003044 <LoopFillZerobss>

0800303e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800303e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003040:	f842 3b04 	str.w	r3, [r2], #4

08003044 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003044:	4b08      	ldr	r3, [pc, #32]	; (8003068 <LoopForever+0x16>)
	cmp	r2, r3
 8003046:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003048:	d3f9      	bcc.n	800303e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800304a:	f00c f8dd 	bl	800f208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800304e:	f7fd fabd 	bl	80005cc <main>

08003052 <LoopForever>:

LoopForever:
    b LoopForever
 8003052:	e7fe      	b.n	8003052 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003054:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8003058:	0800f378 	.word	0x0800f378
	ldr	r0, =_sdata
 800305c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003060:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8003064:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003068:	20000d70 	.word	0x20000d70

0800306c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800306c:	e7fe      	b.n	800306c <ADC1_2_IRQHandler>
	...

08003070 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003074:	4b11      	ldr	r3, [pc, #68]	; (80030bc <HAL_Init+0x4c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a10      	ldr	r2, [pc, #64]	; (80030bc <HAL_Init+0x4c>)
 800307a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003080:	2003      	movs	r0, #3
 8003082:	f000 f93c 	bl	80032fe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003086:	f005 f935 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800308a:	4602      	mov	r2, r0
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <HAL_Init+0x50>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	490b      	ldr	r1, [pc, #44]	; (80030c4 <HAL_Init+0x54>)
 8003096:	5ccb      	ldrb	r3, [r1, r3]
 8003098:	fa22 f303 	lsr.w	r3, r2, r3
 800309c:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <HAL_Init+0x58>)
 800309e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030a0:	200f      	movs	r0, #15
 80030a2:	f7ff fe9f 	bl	8002de4 <HAL_InitTick>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e002      	b.n	80030b6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80030b0:	f7fe fcd4 	bl	8001a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40022000 	.word	0x40022000
 80030c0:	46020c00 	.word	0x46020c00
 80030c4:	0800f268 	.word	0x0800f268
 80030c8:	20000000 	.word	0x20000000

080030cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <HAL_IncTick+0x20>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_IncTick+0x24>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4413      	add	r3, r2
 80030dc:	4a04      	ldr	r2, [pc, #16]	; (80030f0 <HAL_IncTick+0x24>)
 80030de:	6013      	str	r3, [r2, #0]
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	20000008 	.word	0x20000008
 80030f0:	20000d48 	.word	0x20000d48

080030f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return uwTick;
 80030f8:	4b03      	ldr	r3, [pc, #12]	; (8003108 <HAL_GetTick+0x14>)
 80030fa:	681b      	ldr	r3, [r3, #0]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000d48 	.word	0x20000d48

0800310c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003114:	f7ff ffee 	bl	80030f4 <HAL_GetTick>
 8003118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d005      	beq.n	8003132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <HAL_Delay+0x44>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003132:	bf00      	nop
 8003134:	f7ff ffde 	bl	80030f4 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	429a      	cmp	r2, r3
 8003142:	d8f7      	bhi.n	8003134 <HAL_Delay+0x28>
  {
  }
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000008 	.word	0x20000008

08003154 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 800315e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003160:	f023 0201 	bic.w	r2, r3, #1
 8003164:	4904      	ldr	r1, [pc, #16]	; (8003178 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4313      	orrs	r3, r2
 800316a:	674b      	str	r3, [r1, #116]	; 0x74
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	46000400 	.word	0x46000400

0800317c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8003186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003188:	f023 023c 	bic.w	r2, r3, #60	; 0x3c
 800318c:	4904      	ldr	r1, [pc, #16]	; (80031a0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4313      	orrs	r3, r2
 8003192:	674b      	str	r3, [r1, #116]	; 0x74
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	46000400 	.word	0x46000400

080031a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c0:	4013      	ands	r3, r2
 80031c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d6:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	60d3      	str	r3, [r2, #12]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <__NVIC_GetPriorityGrouping+0x18>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	0a1b      	lsrs	r3, r3, #8
 80031f6:	f003 0307 	and.w	r3, r3, #7
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003216:	2b00      	cmp	r3, #0
 8003218:	db0b      	blt.n	8003232 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	f003 021f 	and.w	r2, r3, #31
 8003220:	4907      	ldr	r1, [pc, #28]	; (8003240 <__NVIC_EnableIRQ+0x38>)
 8003222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2001      	movs	r0, #1
 800322a:	fa00 f202 	lsl.w	r2, r0, r2
 800322e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	e000e100 	.word	0xe000e100

08003244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	6039      	str	r1, [r7, #0]
 800324e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003254:	2b00      	cmp	r3, #0
 8003256:	db0a      	blt.n	800326e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	490c      	ldr	r1, [pc, #48]	; (8003290 <__NVIC_SetPriority+0x4c>)
 800325e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003262:	0112      	lsls	r2, r2, #4
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	440b      	add	r3, r1
 8003268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800326c:	e00a      	b.n	8003284 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	b2da      	uxtb	r2, r3
 8003272:	4908      	ldr	r1, [pc, #32]	; (8003294 <__NVIC_SetPriority+0x50>)
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	3b04      	subs	r3, #4
 800327c:	0112      	lsls	r2, r2, #4
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	440b      	add	r3, r1
 8003282:	761a      	strb	r2, [r3, #24]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000e100 	.word	0xe000e100
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f1c3 0307 	rsb	r3, r3, #7
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	bf28      	it	cs
 80032b6:	2304      	movcs	r3, #4
 80032b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3304      	adds	r3, #4
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d902      	bls.n	80032c8 <NVIC_EncodePriority+0x30>
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3b03      	subs	r3, #3
 80032c6:	e000      	b.n	80032ca <NVIC_EncodePriority+0x32>
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	f04f 32ff 	mov.w	r2, #4294967295
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43da      	mvns	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	401a      	ands	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e0:	f04f 31ff 	mov.w	r1, #4294967295
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ea:	43d9      	mvns	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	4313      	orrs	r3, r2
         );
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3724      	adds	r7, #36	; 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ff4c 	bl	80031a4 <__NVIC_SetPriorityGrouping>
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003322:	f7ff ff63 	bl	80031ec <__NVIC_GetPriorityGrouping>
 8003326:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	6978      	ldr	r0, [r7, #20]
 800332e:	f7ff ffb3 	bl	8003298 <NVIC_EncodePriority>
 8003332:	4602      	mov	r2, r0
 8003334:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ff82 	bl	8003244 <__NVIC_SetPriority>
}
 8003340:	bf00      	nop
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff ff56 	bl	8003208 <__NVIC_EnableIRQ>
}
 800335c:	bf00      	nop
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e054      	b.n	8003420 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	7f5b      	ldrb	r3, [r3, #29]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d105      	bne.n	800338c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fe fbfc 	bl	8001b84 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	791b      	ldrb	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10c      	bne.n	80033b4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a22      	ldr	r2, [pc, #136]	; (8003428 <HAL_CRC_Init+0xc4>)
 80033a0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0218 	bic.w	r2, r2, #24
 80033b0:	609a      	str	r2, [r3, #8]
 80033b2:	e00c      	b.n	80033ce <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6899      	ldr	r1, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	461a      	mov	r2, r3
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f834 	bl	800342c <HAL_CRCEx_Polynomial_Set>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e028      	b.n	8003420 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	795b      	ldrb	r3, [r3, #5]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d105      	bne.n	80033e2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f04f 32ff 	mov.w	r2, #4294967295
 80033de:	611a      	str	r2, [r3, #16]
 80033e0:	e004      	b.n	80033ec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6912      	ldr	r2, [r2, #16]
 80033ea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	04c11db7 	.word	0x04c11db7

0800342c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800343c:	231f      	movs	r3, #31
 800343e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d102      	bne.n	8003450 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	75fb      	strb	r3, [r7, #23]
 800344e:	e063      	b.n	8003518 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003450:	bf00      	nop
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1e5a      	subs	r2, r3, #1
 8003456:	613a      	str	r2, [r7, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d009      	beq.n	8003470 <HAL_CRCEx_Polynomial_Set+0x44>
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b18      	cmp	r3, #24
 8003474:	d846      	bhi.n	8003504 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003476:	a201      	add	r2, pc, #4	; (adr r2, 800347c <HAL_CRCEx_Polynomial_Set+0x50>)
 8003478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347c:	0800350b 	.word	0x0800350b
 8003480:	08003505 	.word	0x08003505
 8003484:	08003505 	.word	0x08003505
 8003488:	08003505 	.word	0x08003505
 800348c:	08003505 	.word	0x08003505
 8003490:	08003505 	.word	0x08003505
 8003494:	08003505 	.word	0x08003505
 8003498:	08003505 	.word	0x08003505
 800349c:	080034f9 	.word	0x080034f9
 80034a0:	08003505 	.word	0x08003505
 80034a4:	08003505 	.word	0x08003505
 80034a8:	08003505 	.word	0x08003505
 80034ac:	08003505 	.word	0x08003505
 80034b0:	08003505 	.word	0x08003505
 80034b4:	08003505 	.word	0x08003505
 80034b8:	08003505 	.word	0x08003505
 80034bc:	080034ed 	.word	0x080034ed
 80034c0:	08003505 	.word	0x08003505
 80034c4:	08003505 	.word	0x08003505
 80034c8:	08003505 	.word	0x08003505
 80034cc:	08003505 	.word	0x08003505
 80034d0:	08003505 	.word	0x08003505
 80034d4:	08003505 	.word	0x08003505
 80034d8:	08003505 	.word	0x08003505
 80034dc:	080034e1 	.word	0x080034e1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b06      	cmp	r3, #6
 80034e4:	d913      	bls.n	800350e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80034ea:	e010      	b.n	800350e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b07      	cmp	r3, #7
 80034f0:	d90f      	bls.n	8003512 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80034f6:	e00c      	b.n	8003512 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	2b0f      	cmp	r3, #15
 80034fc:	d90b      	bls.n	8003516 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003502:	e008      	b.n	8003516 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	75fb      	strb	r3, [r7, #23]
        break;
 8003508:	e006      	b.n	8003518 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800350a:	bf00      	nop
 800350c:	e004      	b.n	8003518 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800350e:	bf00      	nop
 8003510:	e002      	b.n	8003518 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003512:	bf00      	nop
 8003514:	e000      	b.n	8003518 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003516:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003518:	7dfb      	ldrb	r3, [r7, #23]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10d      	bne.n	800353a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f023 0118 	bic.w	r1, r3, #24
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	430a      	orrs	r2, r1
 8003538:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800353a:	7dfb      	ldrb	r3, [r7, #23]
}
 800353c:	4618      	mov	r0, r3
 800353e:	371c      	adds	r7, #28
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e037      	b.n	80035ca <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d119      	bne.n	800359a <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a1a      	ldr	r2, [pc, #104]	; (80035d4 <HAL_DCACHE_Init+0x8c>)
 800356a:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a1a      	ldr	r2, [pc, #104]	; (80035d8 <HAL_DCACHE_Init+0x90>)
 8003570:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a19      	ldr	r2, [pc, #100]	; (80035dc <HAL_DCACHE_Init+0x94>)
 8003576:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <HAL_DCACHE_Init+0x98>)
 800357c:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a18      	ldr	r2, [pc, #96]	; (80035e4 <HAL_DCACHE_Init+0x9c>)
 8003582:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d102      	bne.n	8003592 <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a16      	ldr	r2, [pc, #88]	; (80035e8 <HAL_DCACHE_Init+0xa0>)
 8003590:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f814 	bl	80035ec <HAL_DCACHE_Enable>
 80035c4:	4603      	mov	r3, r0
 80035c6:	73fb      	strb	r3, [r7, #15]

  return status;
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	0800368b 	.word	0x0800368b
 80035d8:	0800363b 	.word	0x0800363b
 80035dc:	0800364f 	.word	0x0800364f
 80035e0:	08003677 	.word	0x08003677
 80035e4:	08003663 	.word	0x08003663
 80035e8:	08001bc9 	.word	0x08001bc9

080035ec <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e015      	b.n	800362e <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 0309 	and.w	r3, r3, #9
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8003610:	2302      	movs	r3, #2
 8003612:	73fb      	strb	r3, [r7, #15]
 8003614:	e00a      	b.n	800362c <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]
  }

  return status;
 800362c:	7bfb      	ldrb	r3, [r7, #15]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80036a6:	f7ff fd25 	bl	80030f4 <HAL_GetTick>
 80036aa:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e06b      	b.n	800378e <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d008      	beq.n	80036d4 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2220      	movs	r2, #32
 80036c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e05c      	b.n	800378e <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0204 	orr.w	r2, r2, #4
 80036e2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2205      	movs	r2, #5
 80036e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80036ec:	e020      	b.n	8003730 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80036ee:	f7ff fd01 	bl	80030f4 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b05      	cmp	r3, #5
 80036fa:	d919      	bls.n	8003730 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	f043 0210 	orr.w	r2, r3, #16
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2203      	movs	r2, #3
 800370c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003720:	2201      	movs	r2, #1
 8003722:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e02e      	b.n	800378e <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0d7      	beq.n	80036ee <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695a      	ldr	r2, [r3, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0202 	orr.w	r2, r2, #2
 800374c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2204      	movs	r2, #4
 8003752:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800375e:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003778:	2201      	movs	r2, #1
 800377a:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2200      	movs	r2, #0
 8003782:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e053      	b.n	8003850 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d106      	bne.n	80037c2 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7fe fa3d 	bl	8001c3c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2202      	movs	r2, #2
 80037c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80037d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6851      	ldr	r1, [r2, #4]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	69d2      	ldr	r2, [r2, #28]
 80037e0:	4311      	orrs	r1, r2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6812      	ldr	r2, [r2, #0]
 80037e6:	430b      	orrs	r3, r1
 80037e8:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f0:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 80037f4:	f023 0301 	bic.w	r3, r3, #1
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6891      	ldr	r1, [r2, #8]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6992      	ldr	r2, [r2, #24]
 8003800:	4311      	orrs	r1, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	430b      	orrs	r3, r1
 8003808:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	0c1b      	lsrs	r3, r3, #16
 8003812:	041b      	lsls	r3, r3, #16
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	68d1      	ldr	r1, [r2, #12]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	430b      	orrs	r3, r1
 800381e:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003826:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	051a      	lsls	r2, r3, #20
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	055b      	lsls	r3, r3, #21
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d026      	beq.n	80038c8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d021      	beq.n	80038c8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003892:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003898:	f043 0201 	orr.w	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2201      	movs	r2, #1
 80038a6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2204      	movs	r2, #4
 80038ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d026      	beq.n	8003920 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d021      	beq.n	8003920 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ea:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2220      	movs	r2, #32
 80038f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f8:	f043 0202 	orr.w	r2, r3, #2
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2204      	movs	r2, #4
 8003904:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d026      	beq.n	8003978 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003930:	2b00      	cmp	r3, #0
 8003932:	d021      	beq.n	8003978 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003942:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2208      	movs	r2, #8
 800394a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003950:	f043 0204 	orr.w	r2, r3, #4
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2204      	movs	r2, #4
 800395c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	d013      	beq.n	80039aa <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00e      	beq.n	80039aa <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2204      	movs	r2, #4
 80039a2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f853 	bl	8003a50 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d024      	beq.n	80039fe <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01f      	beq.n	80039fe <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039cc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2202      	movs	r2, #2
 80039d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferCpltCallback != NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01f      	beq.n	8003a48 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d01a      	beq.n	8003a48 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a20:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2210      	movs	r2, #16
 8003a28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f80e 	bl	8003a64 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_DMA2D_ConfigLayer+0x20>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e084      	b.n	8003ba2 <HAL_DMA2D_ConfigLayer+0x12a>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	4413      	add	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	3328      	adds	r3, #40	; 0x28
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	041b      	lsls	r3, r3, #16
 8003ac4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003acc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003ad8:	4b35      	ldr	r3, [pc, #212]	; (8003bb0 <HAL_DMA2D_ConfigLayer+0x138>)
 8003ada:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b0a      	cmp	r3, #10
 8003ae2:	d003      	beq.n	8003aec <HAL_DMA2D_ConfigLayer+0x74>
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b09      	cmp	r3, #9
 8003aea:	d107      	bne.n	8003afc <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e005      	b.n	8003b08 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	061b      	lsls	r3, r3, #24
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d120      	bne.n	8003b50 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	43db      	mvns	r3, r3
 8003b18:	ea02 0103 	and.w	r1, r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b0a      	cmp	r3, #10
 8003b36:	d003      	beq.n	8003b40 <HAL_DMA2D_ConfigLayer+0xc8>
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b09      	cmp	r3, #9
 8003b3e:	d127      	bne.n	8003b90 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b4c:	629a      	str	r2, [r3, #40]	; 0x28
 8003b4e:	e01f      	b.n	8003b90 <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	69da      	ldr	r2, [r3, #28]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	ea02 0103 	and.w	r1, r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b0a      	cmp	r3, #10
 8003b78:	d003      	beq.n	8003b82 <HAL_DMA2D_ConfigLayer+0x10a>
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b09      	cmp	r3, #9
 8003b80:	d106      	bne.n	8003b90 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b8e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	ff33000f 	.word	0xff33000f

08003bb4 <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003bcc:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	; 0xc04
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	00da      	lsls	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	220e      	movs	r2, #14
 8003bee:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	; 0xc70
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 021f 	bic.w	r2, r2, #31
 8003c02:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6912      	ldr	r2, [r2, #16]
 8003c0e:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	220e      	movs	r2, #14
 8003c18:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	; 0xd08
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 021f 	bic.w	r2, r2, #31
 8003c2c:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6912      	ldr	r2, [r2, #16]
 8003c38:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	220e      	movs	r2, #14
 8003c42:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	; 0xc5c
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c56:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c6a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d007      	beq.n	8003c86 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d003      	beq.n	8003c86 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8003c82:	2b05      	cmp	r3, #5
 8003c84:	d10a      	bne.n	8003c9c <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8003c9a:	e02c      	b.n	8003cf6 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00b      	beq.n	8003cbc <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d007      	beq.n	8003cbc <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d003      	beq.n	8003cbc <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8003cb8:	2b06      	cmp	r3, #6
 8003cba:	d10a      	bne.n	8003cd2 <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2210      	movs	r2, #16
 8003ccc:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8003cd0:	e011      	b.n	8003cf6 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b07      	cmp	r3, #7
 8003cd8:	d003      	beq.n	8003ce2 <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d109      	bne.n	8003cf6 <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	; 0xc60
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 020f 	bic.w	r2, r2, #15
 8003d06:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	; 0xcf8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 020f 	bic.w	r2, r2, #15
 8003d1a:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6952      	ldr	r2, [r2, #20]
 8003d26:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6952      	ldr	r2, [r2, #20]
 8003d32:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003d5c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	075a      	lsls	r2, r3, #29
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003d88:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	031a      	lsls	r2, r3, #12
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	021a      	lsls	r2, r3, #8
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0c3      	b.n	8003f64 <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	7e5b      	ldrb	r3, [r3, #25]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d102      	bne.n	8003dec <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fd ff50 	bl	8001c8c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2203      	movs	r2, #3
 8003df0:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e02:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 8003e06:	2002      	movs	r0, #2
 8003e08:	f7ff f980 	bl	800310c <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b54      	ldr	r3, [pc, #336]	; (8003f6c <HAL_DSI_Init+0x1a4>)
 8003e1a:	400b      	ands	r3, r1
 8003e1c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003e34:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003e3c:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff feb3 	bl	8003bb4 <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 8003e4e:	6839      	ldr	r1, [r7, #0]
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff ff76 	bl	8003d42 <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003e56:	2300      	movs	r3, #0
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	60bb      	str	r3, [r7, #8]
 8003e7c:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8003e7e:	2001      	movs	r0, #1
 8003e80:	f7ff f944 	bl	800310c <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e84:	f7ff f936 	bl	80030f4 <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003e8a:	e008      	b.n	8003e9e <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003e8c:	f7ff f932 	bl	80030f4 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b64      	cmp	r3, #100	; 0x64
 8003e98:	d901      	bls.n	8003e9e <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e062      	b.n	8003f64 <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0ee      	beq.n	8003e8c <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0206 	orr.w	r2, r2, #6
 8003ebe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0203 	bic.w	r2, r2, #3
 8003ed2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0203 	bic.w	r2, r2, #3
 8003f00:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f28:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6899      	ldr	r1, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	e0000003 	.word	0xe0000003

08003f70 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	7e1b      	ldrb	r3, [r3, #24]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_DSI_ConfigErrorMonitor+0x16>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e0ba      	b.n	80040fc <HAL_DSI_ConfigErrorMonitor+0x18c>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00b      	beq.n	8003fc8 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003fc0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003fc4:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d009      	beq.n	8003fe6 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003fe2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0201 	orr.w	r2, r2, #1
 8004000:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0202 	orr.w	r2, r2, #2
 800401e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	d009      	beq.n	8004040 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 020c 	orr.w	r2, r2, #12
 800403c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0210 	orr.w	r2, r2, #16
 800405a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004064:	2b00      	cmp	r3, #0
 8004066:	d009      	beq.n	800407c <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0220 	orr.w	r2, r2, #32
 8004078:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004096:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d009      	beq.n	80040b8 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80040d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d009      	beq.n	80040f4 <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80040f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00f      	beq.n	8004140 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2201      	movs	r2, #1
 8004136:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f8b8 	bl	80042b0 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00f      	beq.n	8004170 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d007      	beq.n	8004170 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2202      	movs	r2, #2
 8004166:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f8aa 	bl	80042c4 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 8097 	beq.w	80042a8 <HAL_DSI_IRQHandler+0x1a0>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004182:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4013      	ands	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800419a:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	4013      	ands	r3, r2
 80041a8:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d005      	beq.n	80041be <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f043 0201 	orr.w	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f043 0202 	orr.w	r2, r3, #2
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f043 0204 	orr.w	r2, r3, #4
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f043 0208 	orr.w	r2, r3, #8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f003 030c 	and.w	r3, r3, #12
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f043 0210 	orr.w	r2, r3, #16
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f043 0220 	orr.w	r2, r3, #32
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d005      	beq.n	8004242 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	2b00      	cmp	r3, #0
 8004260:	d005      	beq.n	800426e <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PBU_MASK) != 0U)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_DSI_IRQHandler+0x192>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PBU;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	61da      	str	r2, [r3, #28]
    }
    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <HAL_DSI_IRQHandler+0x1a0>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f818 	bl	80042d8 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	7e1b      	ldrb	r3, [r3, #24]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_DSI_SetGenericVCID+0x16>
 80042fe:	2302      	movs	r3, #2
 8004300:	e019      	b.n	8004336 <HAL_DSI_SetGenericVCID+0x4a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6b19      	ldr	r1, [r3, #48]	; 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	7e1b      	ldrb	r3, [r3, #24]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004354:	2302      	movs	r3, #2
 8004356:	e0c5      	b.n	80044e4 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0201 	orr.w	r2, r2, #1
 800436c:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0201 	bic.w	r2, r2, #1
 800437e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0203 	bic.w	r2, r2, #3
 80043a4:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68d9      	ldr	r1, [r3, #12]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695a      	ldr	r2, [r3, #20]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0207 	bic.w	r2, r2, #7
 80043c6:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6959      	ldr	r1, [r3, #20]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	69da      	ldr	r2, [r3, #28]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 020f 	bic.w	r2, r2, #15
 80043f4:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6919      	ldr	r1, [r3, #16]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 020e 	bic.w	r2, r2, #14
 8004418:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	005a      	lsls	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	0c1b      	lsrs	r3, r3, #16
 8004440:	041b      	lsls	r3, r3, #16
 8004442:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004466:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	431a      	orrs	r2, r3
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0201 	bic.w	r2, r2, #1
 80044a0:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0201 	orr.w	r2, r2, #1
 80044c4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0202 	orr.w	r2, r2, #2
 80044d8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	7e1b      	ldrb	r3, [r3, #24]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_DSI_ConfigCommand+0x16>
 8004502:	2302      	movs	r3, #2
 8004504:	e049      	b.n	800459a <HAL_DSI_ConfigCommand+0xaa>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <HAL_DSI_ConfigCommand+0xb8>)
 8004518:	400b      	ands	r3, r1
 800451a:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800452a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004530:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004536:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 800453c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004542:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004548:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800454e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004554:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800455a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004560:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004566:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0202 	bic.w	r2, r2, #2
 800457e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	fef080ff 	.word	0xfef080ff

080045ac <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	7e1b      	ldrb	r3, [r3, #24]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <HAL_DSI_ConfigFlowControl+0x16>
 80045be:	2302      	movs	r3, #2
 80045c0:	e016      	b.n	80045f0 <HAL_DSI_ConfigFlowControl+0x44>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80045d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	7e1b      	ldrb	r3, [r3, #24]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_DSI_ConfigPhyTimer+0x16>
 800460e:	2302      	movs	r3, #2
 8004610:	e084      	b.n	800471c <HAL_DSI_ConfigPhyTimer+0x120>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	441a      	add	r2, r3
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6859      	ldr	r1, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695a      	ldr	r2, [r3, #20]
 800462e:	4613      	mov	r3, r2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	4413      	add	r3, r2
 8004634:	18ca      	adds	r2, r1, r3
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	441a      	add	r2, r3
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4293      	cmp	r3, r2
 8004654:	bf38      	it	cc
 8004656:	4613      	movcc	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800466a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	041a      	lsls	r2, r3, #16
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004698:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	041b      	lsls	r3, r3, #16
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6812      	ldr	r2, [r2, #0]
 80046c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80046ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80046ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80046f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	021a      	lsls	r2, r3, #8
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	7e1b      	ldrb	r3, [r3, #24]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_DSI_ConfigHostTimeouts+0x16>
 800473a:	2302      	movs	r3, #2
 800473c:	e0b4      	b.n	80048a8 <HAL_DSI_ConfigHostTimeouts+0x180>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004752:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6899      	ldr	r1, [r3, #8]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	021a      	lsls	r2, r3, #8
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	b292      	uxth	r2, r2
 8004774:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	041a      	lsls	r2, r3, #16
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	0c1b      	lsrs	r3, r3, #16
 8004796:	041b      	lsls	r3, r3, #16
 8004798:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	0c1b      	lsrs	r3, r3, #16
 80047b8:	041b      	lsls	r3, r3, #16
 80047ba:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	0c1b      	lsrs	r3, r3, #16
 80047dc:	041b      	lsls	r3, r3, #16
 80047de:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6812      	ldr	r2, [r2, #0]
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	041b      	lsls	r3, r3, #16
 8004808:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	695a      	ldr	r2, [r3, #20]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	0c1b      	lsrs	r3, r3, #16
 800485a:	041b      	lsls	r3, r3, #16
 800485c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	69da      	ldr	r2, [r3, #28]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6812      	ldr	r2, [r2, #0]
 8004882:	0c1b      	lsrs	r3, r3, #16
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6a1a      	ldr	r2, [r3, #32]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_GFXMMU_Init>:
  *         GFXMMU_InitTypeDef structure and initialize the associated handle.
  * @param  hgfxmmu GFXMMU handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GFXMMU_Init(GFXMMU_HandleTypeDef *hgfxmmu)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	73fb      	strb	r3, [r7, #15]

  /* Check GFXMMU handle */
  if (hgfxmmu == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <HAL_GFXMMU_Init+0x18>
  {
    status = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	73fb      	strb	r3, [r7, #15]
 80048ca:	e06e      	b.n	80049aa <HAL_GFXMMU_Init+0xf6>
      hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
    }
    hgfxmmu->MspInitCallback(hgfxmmu);
#else
    /* Call GFXMMU MSP init function */
    HAL_GFXMMU_MspInit(hgfxmmu);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7fd fa61 	bl	8001d94 <HAL_GFXMMU_MspInit>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */

    /* Configure GFXMMU_CR register */
    hgfxmmu->Instance->CR = 0U;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
    hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlocksPerLine);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6819      	ldr	r1, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]
#if defined(GFXMMU_CR_CE)
    if (hgfxmmu->Init.CachePrefetch.Activation == ENABLE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	7f1b      	ldrb	r3, [r3, #28]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d12c      	bne.n	800494e <HAL_GFXMMU_Init+0x9a>
    {
      assert_param(IS_GFXMMU_CACHE_LOCK(hgfxmmu->Init.CachePrefetch.CacheLock));
      assert_param(IS_GFXMMU_PREFETCH(hgfxmmu->Init.CachePrefetch.Prefetch));
      assert_param(IS_GFXMMU_OUTTER_BUFFERABILITY(hgfxmmu->Init.CachePrefetch.OutterBufferability));
      assert_param(IS_GFXMMU_OUTTER_CACHABILITY(hgfxmmu->Init.CachePrefetch.OutterCachability));
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a19      	ldr	r1, [r3, #32]
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 8004902:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 8004908:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterCachability);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 800490e:	430b      	orrs	r3, r1
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800491a:	601a      	str	r2, [r3, #0]
      if (hgfxmmu->Init.CachePrefetch.CacheLock == GFXMMU_CACHE_LOCK_ENABLE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004924:	d10b      	bne.n	800493e <HAL_GFXMMU_Init+0x8a>
      {
        assert_param(IS_GFXMMU_CACHE_LOCK_BUFFER(hgfxmmu->Init.CachePrefetch.CacheLockBuffer));
        assert_param(IS_GFXMMU_CACHE_FORCE(hgfxmmu->Init.CachePrefetch.CacheForce));
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6819      	ldr	r1, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                  hgfxmmu->Init.CachePrefetch.CacheForce);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	601a      	str	r2, [r3, #0]
      }

      /* Force invalidate cache if cache is enabled */
      hgfxmmu->Instance->CCR |= GFXMMU_CACHE_FORCE_INVALIDATE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0202 	orr.w	r2, r2, #2
 800494c:	60da      	str	r2, [r3, #12]
      assert_param(IS_GFXMMU_ADDRESSCACHE_LOCK_BUFFER(hgfxmmu->Init.AddressCache.AddressCacheLockBuffer));
      hgfxmmu->Instance->CR |= GFXMMU_CR_ACE |
                               hgfxmmu->Init.AddressCache.AddressCacheLockBuffer;
    }
#endif /* GFXMMU_CR_ACE */
    if (hgfxmmu->Init.Interrupts.Activation == ENABLE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004954:	2b01      	cmp	r3, #1
 8004956:	d108      	bne.n	800496a <HAL_GFXMMU_Init+0xb6>
    {
      assert_param(IS_GFXMMU_INTERRUPTS(hgfxmmu->Init.Interrupts.UsedInterrupts));
      hgfxmmu->Instance->CR |= hgfxmmu->Init.Interrupts.UsedInterrupts;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6819      	ldr	r1, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	601a      	str	r2, [r3, #0]
    }

    /* Configure default value on GFXMMU_DVR register */
    hgfxmmu->Instance->DVR = hgfxmmu->Init.DefaultValue;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6892      	ldr	r2, [r2, #8]
 8004972:	611a      	str	r2, [r3, #16]

    /* Configure physical buffer addresses on GFXMMU_BxCR registers */
    hgfxmmu->Instance->B0CR = hgfxmmu->Init.Buffers.Buf0Address;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	68d2      	ldr	r2, [r2, #12]
 800497c:	621a      	str	r2, [r3, #32]
    hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6912      	ldr	r2, [r2, #16]
 8004986:	625a      	str	r2, [r3, #36]	; 0x24
    hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6952      	ldr	r2, [r2, #20]
 8004990:	629a      	str	r2, [r3, #40]	; 0x28
    hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6992      	ldr	r2, [r2, #24]
 800499a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Reset GFXMMU error code */
    hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set GFXMMU to ready state */
    hgfxmmu->State = HAL_GFXMMU_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }
  /* Return function status */
  return status;
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_GFXMMU_ConfigLut>:
  */
HAL_StatusTypeDef HAL_GFXMMU_ConfigLut(GFXMMU_HandleTypeDef *hgfxmmu,
                                       uint32_t FirstLine,
                                       uint32_t LinesNumber,
                                       uint32_t Address)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b08b      	sub	sp, #44	; 0x2c
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
  assert_param(IS_GFXMMU_LUT_LINE(FirstLine));
  assert_param(IS_GFXMMU_LUT_LINES_NUMBER(LinesNumber));

  /* Check GFXMMU state and coherent parameters */
  if ((hgfxmmu->State != HAL_GFXMMU_STATE_READY) || ((FirstLine + LinesNumber) > 1024U))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d105      	bne.n	80049de <HAL_GFXMMU_ConfigLut+0x2a>
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4413      	add	r3, r2
 80049d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049dc:	d903      	bls.n	80049e6 <HAL_GFXMMU_ConfigLut+0x32>
  {
    status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80049e4:	e032      	b.n	8004a4c <HAL_GFXMMU_ConfigLut+0x98>
    uint32_t current_line;
    uint32_t lutxl_address;
    uint32_t lutxh_address;

    /* Initialize local variables */
    current_address = Address;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	623b      	str	r3, [r7, #32]
    current_line    = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	61fb      	str	r3, [r7, #28]
    lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
    lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * FirstLine) + 1U]);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	3301      	adds	r3, #1
 8004a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]

    /* Copy LUT from flash to look up RAM */
    while (current_line < LinesNumber)
 8004a14:	e016      	b.n	8004a44 <HAL_GFXMMU_ConfigLut+0x90>
    {
      *((uint32_t *)lutxl_address) = *((uint32_t *)current_address);
 8004a16:	6a3a      	ldr	r2, [r7, #32]
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	6812      	ldr	r2, [r2, #0]
 8004a1c:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	3304      	adds	r3, #4
 8004a22:	623b      	str	r3, [r7, #32]
      *((uint32_t *)lutxh_address) = *((uint32_t *)current_address);
 8004a24:	6a3a      	ldr	r2, [r7, #32]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	6812      	ldr	r2, [r2, #0]
 8004a2a:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	623b      	str	r3, [r7, #32]
      lutxl_address += 8U;
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	3308      	adds	r3, #8
 8004a36:	61bb      	str	r3, [r7, #24]
      lutxh_address += 8U;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	617b      	str	r3, [r7, #20]
      current_line++;
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	3301      	adds	r3, #1
 8004a42:	61fb      	str	r3, [r7, #28]
    while (current_line < LinesNumber)
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d3e4      	bcc.n	8004a16 <HAL_GFXMMU_ConfigLut+0x62>
    }
  }
  /* Return function status */
  return status;
 8004a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	372c      	adds	r7, #44	; 0x2c
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_GFXMMU_IRQHandler>:
  * @brief  This function handles the GFXMMU interrupts.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
void HAL_GFXMMU_IRQHandler(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t flags, interrupts, error;

  /* Read current flags and interrupts and determine which error occurs */
  flags = hgfxmmu->Instance->SR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	617b      	str	r3, [r7, #20]
  interrupts = (hgfxmmu->Instance->CR & GFXMMU_CR_ITS_MASK);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	613b      	str	r3, [r7, #16]
  error = (flags & interrupts);
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]

  if (error != 0U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00c      	beq.n	8004aa0 <HAL_GFXMMU_IRQHandler+0x44>
  {
    /* Clear flags on GFXMMU_FCR register */
    hgfxmmu->Instance->FCR = error;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	609a      	str	r2, [r3, #8]

    /* Update GFXMMU error code */
    hgfxmmu->ErrorCode |= error;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Call GFXMMU error callback */
#if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
    hgfxmmu->ErrorCallback(hgfxmmu);
#else
    HAL_GFXMMU_ErrorCallback(hgfxmmu);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f804 	bl	8004aa8 <HAL_GFXMMU_ErrorCallback>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
  }
}
 8004aa0:	bf00      	nop
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_GFXMMU_ErrorCallback>:
  * @brief  Error callback.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
__weak void HAL_GFXMMU_ErrorCallback(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(hgfxmmu);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_GFXMMU_ErrorCallback could be implemented in the user file.
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	; 0x24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004ace:	e1ba      	b.n	8004e46 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	4013      	ands	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 81aa 	beq.w	8004e40 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a55      	ldr	r2, [pc, #340]	; (8004c44 <HAL_GPIO_Init+0x188>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d15d      	bne.n	8004bb0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004afa:	2201      	movs	r2, #1
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	43db      	mvns	r3, r3
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	4013      	ands	r3, r2
 8004b08:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f003 0201 	and.w	r2, r3, #1
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	69fa      	ldr	r2, [r7, #28]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69fa      	ldr	r2, [r7, #28]
 8004b22:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004b24:	4a48      	ldr	r2, [pc, #288]	; (8004c48 <HAL_GPIO_Init+0x18c>)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b2c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004b2e:	4a46      	ldr	r2, [pc, #280]	; (8004c48 <HAL_GPIO_Init+0x18c>)
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	4413      	add	r3, r2
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	08da      	lsrs	r2, r3, #3
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	3208      	adds	r2, #8
 8004b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b46:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	220f      	movs	r2, #15
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43db      	mvns	r3, r3
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	220b      	movs	r2, #11
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	69fa      	ldr	r2, [r7, #28]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	08da      	lsrs	r2, r3, #3
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	3208      	adds	r2, #8
 8004b7a:	69f9      	ldr	r1, [r7, #28]
 8004b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	43db      	mvns	r3, r3
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	4013      	ands	r3, r2
 8004b96:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e067      	b.n	8004c80 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d003      	beq.n	8004bc0 <HAL_GPIO_Init+0x104>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b12      	cmp	r3, #18
 8004bbe:	d145      	bne.n	8004c4c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	08da      	lsrs	r2, r3, #3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3208      	adds	r2, #8
 8004bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bcc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	220f      	movs	r2, #15
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	4013      	ands	r3, r2
 8004be2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f003 020f 	and.w	r2, r3, #15
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	69fa      	ldr	r2, [r7, #28]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	08da      	lsrs	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3208      	adds	r2, #8
 8004c06:	69f9      	ldr	r1, [r7, #28]
 8004c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	2203      	movs	r2, #3
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	4013      	ands	r3, r2
 8004c22:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f003 0203 	and.w	r2, r3, #3
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	69fa      	ldr	r2, [r7, #28]
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	e01e      	b.n	8004c80 <HAL_GPIO_Init+0x1c4>
 8004c42:	bf00      	nop
 8004c44:	46020000 	.word	0x46020000
 8004c48:	0800f2c0 	.word	0x0800f2c0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	2203      	movs	r2, #3
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	4013      	ands	r3, r2
 8004c62:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f003 0203 	and.w	r2, r3, #3
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d00b      	beq.n	8004ca0 <HAL_GPIO_Init+0x1e4>
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d007      	beq.n	8004ca0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c94:	2b11      	cmp	r3, #17
 8004c96:	d003      	beq.n	8004ca0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b12      	cmp	r3, #18
 8004c9e:	d130      	bne.n	8004d02 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	2203      	movs	r2, #3
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	091b      	lsrs	r3, r3, #4
 8004cec:	f003 0201 	and.w	r2, r3, #1
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	69fa      	ldr	r2, [r7, #28]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d017      	beq.n	8004d3a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	2203      	movs	r2, #3
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	69fa      	ldr	r2, [r7, #28]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d07c      	beq.n	8004e40 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004d46:	4a47      	ldr	r2, [pc, #284]	; (8004e64 <HAL_GPIO_Init+0x3a8>)
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	089b      	lsrs	r3, r3, #2
 8004d4c:	3318      	adds	r3, #24
 8004d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d52:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	220f      	movs	r2, #15
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43db      	mvns	r3, r3
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	4013      	ands	r3, r2
 8004d68:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	0a9a      	lsrs	r2, r3, #10
 8004d6e:	4b3e      	ldr	r3, [pc, #248]	; (8004e68 <HAL_GPIO_Init+0x3ac>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	f002 0203 	and.w	r2, r2, #3
 8004d78:	00d2      	lsls	r2, r2, #3
 8004d7a:	4093      	lsls	r3, r2
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004d82:	4938      	ldr	r1, [pc, #224]	; (8004e64 <HAL_GPIO_Init+0x3a8>)
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	089b      	lsrs	r3, r3, #2
 8004d88:	3318      	adds	r3, #24
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004d90:	4b34      	ldr	r3, [pc, #208]	; (8004e64 <HAL_GPIO_Init+0x3a8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004dac:	69fa      	ldr	r2, [r7, #28]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004db4:	4a2b      	ldr	r2, [pc, #172]	; (8004e64 <HAL_GPIO_Init+0x3a8>)
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004dba:	4b2a      	ldr	r3, [pc, #168]	; (8004e64 <HAL_GPIO_Init+0x3a8>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004dde:	4a21      	ldr	r2, [pc, #132]	; (8004e64 <HAL_GPIO_Init+0x3a8>)
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004de4:	4b1f      	ldr	r3, [pc, #124]	; (8004e64 <HAL_GPIO_Init+0x3a8>)
 8004de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	43db      	mvns	r3, r3
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	4013      	ands	r3, r2
 8004df4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004e0a:	4a16      	ldr	r2, [pc, #88]	; (8004e64 <HAL_GPIO_Init+0x3a8>)
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8004e12:	4b14      	ldr	r3, [pc, #80]	; (8004e64 <HAL_GPIO_Init+0x3a8>)
 8004e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e18:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	4013      	ands	r3, r2
 8004e22:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004e30:	69fa      	ldr	r2, [r7, #28]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004e38:	4a0a      	ldr	r2, [pc, #40]	; (8004e64 <HAL_GPIO_Init+0x3a8>)
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	3301      	adds	r3, #1
 8004e44:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f47f ae3d 	bne.w	8004ad0 <HAL_GPIO_Init+0x14>
  }
}
 8004e56:	bf00      	nop
 8004e58:	bf00      	nop
 8004e5a:	3724      	adds	r7, #36	; 0x24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	46022000 	.word	0x46022000
 8004e68:	002f7f7f 	.word	0x002f7f7f

08004e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	807b      	strh	r3, [r7, #2]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e7c:	787b      	ldrb	r3, [r7, #1]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e82:	887a      	ldrh	r2, [r7, #2]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004e88:	e002      	b.n	8004e90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004e8a:	887a      	ldrh	r2, [r7, #2]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e01c      	b.n	8004ee8 <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	795b      	ldrb	r3, [r3, #5]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d105      	bne.n	8004ec2 <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fc ff94 	bl	8001de4 <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	791b      	ldrb	r3, [r3, #4]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_GPU2D_Init+0x32>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e00c      	b.n	8004ee8 <HAL_GPU2D_Init+0x4c>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	33f8      	adds	r3, #248	; 0xf8
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d013      	beq.n	8004f34 <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	33f8      	adds	r3, #248	; 0xf8
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f023 0201 	bic.w	r2, r3, #1
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 8004f2c:	68f9      	ldr	r1, [r7, #12]
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f80f 	bl	8004f52 <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 8004f34:	bf00      	nop
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f80f 	bl	8004f68 <HAL_GPU2D_ErrorCallback>
}
 8004f4a:	bf00      	nop
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_GPU2D_CommandListCpltCallback>:
  *                the configuration information for the GPU2D.
  * @param  CmdListID Command list ID that got completed.
  * @retval None
  */
__weak void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	6039      	str	r1, [r7, #0]
  UNUSED(CmdListID);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_GPU2D_CommandListCpltCallback can be implemented in the user file.
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 8004f70:	e7fe      	b.n	8004f70 <HAL_GPU2D_ErrorCallback+0x8>

08004f72 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e08d      	b.n	80050a0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7fc ff63 	bl	8001e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2224      	movs	r2, #36	; 0x24
 8004fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0201 	bic.w	r2, r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fc2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fd2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d107      	bne.n	8004fec <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fe8:	609a      	str	r2, [r3, #8]
 8004fea:	e006      	b.n	8004ffa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ff8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d108      	bne.n	8005014 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	e007      	b.n	8005024 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005022:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6812      	ldr	r2, [r2, #0]
 800502e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005036:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005046:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69d9      	ldr	r1, [r3, #28]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1a      	ldr	r2, [r3, #32]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0201 	orr.w	r2, r2, #1
 8005080:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	d138      	bne.n	8005130 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e032      	b.n	8005132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2224      	movs	r2, #36	; 0x24
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0201 	bic.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6819      	ldr	r1, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	e000      	b.n	8005132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005130:	2302      	movs	r3, #2
  }
}
 8005132:	4618      	mov	r0, r3
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b20      	cmp	r3, #32
 8005152:	d139      	bne.n	80051c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800515e:	2302      	movs	r3, #2
 8005160:	e033      	b.n	80051ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2224      	movs	r2, #36	; 0x24
 800516e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0201 	bic.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005190:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	021b      	lsls	r3, r3, #8
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e000      	b.n	80051ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051c8:	2302      	movs	r3, #2
  }
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80051dc:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <HAL_ICACHE_Enable+0x1c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a04      	ldr	r2, [pc, #16]	; (80051f4 <HAL_ICACHE_Enable+0x1c>)
 80051e2:	f043 0301 	orr.w	r3, r3, #1
 80051e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	40030400 	.word	0x40030400

080051f8 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8005202:	4b14      	ldr	r3, [pc, #80]	; (8005254 <HAL_ICACHE_Disable+0x5c>)
 8005204:	2202      	movs	r2, #2
 8005206:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005208:	4b12      	ldr	r3, [pc, #72]	; (8005254 <HAL_ICACHE_Disable+0x5c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a11      	ldr	r2, [pc, #68]	; (8005254 <HAL_ICACHE_Disable+0x5c>)
 800520e:	f023 0301 	bic.w	r3, r3, #1
 8005212:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005214:	f7fd ff6e 	bl	80030f4 <HAL_GetTick>
 8005218:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800521a:	e00f      	b.n	800523c <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 800521c:	f7fd ff6a 	bl	80030f4 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b01      	cmp	r3, #1
 8005228:	d908      	bls.n	800523c <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800522a:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <HAL_ICACHE_Disable+0x5c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	71fb      	strb	r3, [r7, #7]
        break;
 800523a:	e005      	b.n	8005248 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800523c:	4b05      	ldr	r3, [pc, #20]	; (8005254 <HAL_ICACHE_Disable+0x5c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e9      	bne.n	800521c <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8005248:	79fb      	ldrb	r3, [r7, #7]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40030400 	.word	0x40030400

08005258 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005266:	4b22      	ldr	r3, [pc, #136]	; (80052f0 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	75fb      	strb	r3, [r7, #23]
 8005276:	e034      	b.n	80052e2 <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	009a      	lsls	r2, r3, #2
 800527c:	4b1d      	ldr	r3, [pc, #116]	; (80052f4 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 800527e:	4413      	add	r3, r2
 8005280:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	75fb      	strb	r3, [r7, #23]
 8005292:	e026      	b.n	80052e2 <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 80052a0:	4013      	ands	r3, r2
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	425b      	negs	r3, r3
 80052b2:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80052b4:	401a      	ands	r2, r3
 80052b6:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 80052b8:	4013      	ands	r3, r2
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	025a      	lsls	r2, r3, #9
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80052d0:	4313      	orrs	r3, r2
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 80052e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	371c      	adds	r7, #28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	40030400 	.word	0x40030400
 80052f4:	40030420 	.word	0x40030420
 80052f8:	07ff0000 	.word	0x07ff0000

080052fc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e0bf      	b.n	800548e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fd f8e4 	bl	80024f0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800533e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6999      	ldr	r1, [r3, #24]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005354:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6899      	ldr	r1, [r3, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4b4a      	ldr	r3, [pc, #296]	; (8005498 <HAL_LTDC_Init+0x19c>)
 8005370:	400b      	ands	r3, r1
 8005372:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	041b      	lsls	r3, r3, #16
 800537a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6899      	ldr	r1, [r3, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68d9      	ldr	r1, [r3, #12]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	4b3e      	ldr	r3, [pc, #248]	; (8005498 <HAL_LTDC_Init+0x19c>)
 800539e:	400b      	ands	r3, r1
 80053a0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	041b      	lsls	r3, r3, #16
 80053a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68d9      	ldr	r1, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1a      	ldr	r2, [r3, #32]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6919      	ldr	r1, [r3, #16]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4b33      	ldr	r3, [pc, #204]	; (8005498 <HAL_LTDC_Init+0x19c>)
 80053cc:	400b      	ands	r3, r1
 80053ce:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	041b      	lsls	r3, r3, #16
 80053d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6919      	ldr	r1, [r3, #16]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6959      	ldr	r1, [r3, #20]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	4b27      	ldr	r3, [pc, #156]	; (8005498 <HAL_LTDC_Init+0x19c>)
 80053fa:	400b      	ands	r3, r1
 80053fc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	041b      	lsls	r3, r3, #16
 8005404:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6959      	ldr	r1, [r3, #20]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800542c:	041b      	lsls	r3, r3, #16
 800542e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800543e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0206 	orr.w	r2, r2, #6
 800546a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	f000f800 	.word	0xf000f800

0800549c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d023      	beq.n	8005506 <HAL_LTDC_IRQHandler+0x6a>
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01e      	beq.n	8005506 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0204 	bic.w	r2, r2, #4
 80054d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2204      	movs	r2, #4
 80054de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80054e6:	f043 0201 	orr.w	r2, r3, #1
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2204      	movs	r2, #4
 80054f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f86f 	bl	80055e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d023      	beq.n	8005558 <HAL_LTDC_IRQHandler+0xbc>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d01e      	beq.n	8005558 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0202 	bic.w	r2, r2, #2
 8005528:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2202      	movs	r2, #2
 8005530:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005538:	f043 0202 	orr.w	r2, r3, #2
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2204      	movs	r2, #4
 8005546:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f846 	bl	80055e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d01b      	beq.n	800559a <HAL_LTDC_IRQHandler+0xfe>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d016      	beq.n	800559a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0201 	bic.w	r2, r2, #1
 800557a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2201      	movs	r2, #1
 8005582:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f82f 	bl	80055f8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01b      	beq.n	80055dc <HAL_LTDC_IRQHandler+0x140>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d016      	beq.n	80055dc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0208 	bic.w	r2, r2, #8
 80055bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2208      	movs	r2, #8
 80055c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f818 	bl	800560c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80055dc:	bf00      	nop
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005620:	b5b0      	push	{r4, r5, r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005632:	2b01      	cmp	r3, #1
 8005634:	d101      	bne.n	800563a <HAL_LTDC_ConfigLayer+0x1a>
 8005636:	2302      	movs	r3, #2
 8005638:	e02c      	b.n	8005694 <HAL_LTDC_ConfigLayer+0x74>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2202      	movs	r2, #2
 8005646:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2134      	movs	r1, #52	; 0x34
 8005650:	fb01 f303 	mul.w	r3, r1, r3
 8005654:	4413      	add	r3, r2
 8005656:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	4614      	mov	r4, r2
 800565e:	461d      	mov	r5, r3
 8005660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800566a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	68b9      	ldr	r1, [r7, #8]
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 f811 	bl	800569c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2201      	movs	r2, #1
 8005680:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bdb0      	pop	{r4, r5, r7, pc}

0800569c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800569c:	b480      	push	{r7}
 800569e:	b089      	sub	sp, #36	; 0x24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	0c1b      	lsrs	r3, r3, #16
 80056b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056b8:	4413      	add	r3, r2
 80056ba:	041b      	lsls	r3, r3, #16
 80056bc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	01db      	lsls	r3, r3, #7
 80056c8:	4413      	add	r3, r2
 80056ca:	3384      	adds	r3, #132	; 0x84
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	6812      	ldr	r2, [r2, #0]
 80056d2:	4611      	mov	r1, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	01d2      	lsls	r2, r2, #7
 80056d8:	440a      	add	r2, r1
 80056da:	3284      	adds	r2, #132	; 0x84
 80056dc:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80056e0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	0c1b      	lsrs	r3, r3, #16
 80056ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80056f2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80056f4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4619      	mov	r1, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	01db      	lsls	r3, r3, #7
 8005700:	440b      	add	r3, r1
 8005702:	3384      	adds	r3, #132	; 0x84
 8005704:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800570a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800571a:	4413      	add	r3, r2
 800571c:	041b      	lsls	r3, r3, #16
 800571e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	461a      	mov	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	01db      	lsls	r3, r3, #7
 800572a:	4413      	add	r3, r2
 800572c:	3384      	adds	r3, #132	; 0x84
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	6812      	ldr	r2, [r2, #0]
 8005734:	4611      	mov	r1, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	01d2      	lsls	r2, r2, #7
 800573a:	440a      	add	r2, r1
 800573c:	3284      	adds	r2, #132	; 0x84
 800573e:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8005742:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005752:	4413      	add	r3, r2
 8005754:	1c5a      	adds	r2, r3, #1
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4619      	mov	r1, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	01db      	lsls	r3, r3, #7
 8005760:	440b      	add	r3, r1
 8005762:	3384      	adds	r3, #132	; 0x84
 8005764:	4619      	mov	r1, r3
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	4313      	orrs	r3, r2
 800576a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	461a      	mov	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	01db      	lsls	r3, r3, #7
 8005776:	4413      	add	r3, r2
 8005778:	3384      	adds	r3, #132	; 0x84
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	6812      	ldr	r2, [r2, #0]
 8005780:	4611      	mov	r1, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	01d2      	lsls	r2, r2, #7
 8005786:	440a      	add	r2, r1
 8005788:	3284      	adds	r2, #132	; 0x84
 800578a:	f023 0307 	bic.w	r3, r3, #7
 800578e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	461a      	mov	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	01db      	lsls	r3, r3, #7
 800579a:	4413      	add	r3, r2
 800579c:	3384      	adds	r3, #132	; 0x84
 800579e:	461a      	mov	r2, r3
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80057b6:	041b      	lsls	r3, r3, #16
 80057b8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	061b      	lsls	r3, r3, #24
 80057c0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	01db      	lsls	r3, r3, #7
 80057cc:	4413      	add	r3, r2
 80057ce:	3384      	adds	r3, #132	; 0x84
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	01db      	lsls	r3, r3, #7
 80057dc:	4413      	add	r3, r2
 80057de:	3384      	adds	r3, #132	; 0x84
 80057e0:	461a      	mov	r2, r3
 80057e2:	2300      	movs	r3, #0
 80057e4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057ec:	461a      	mov	r2, r3
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	431a      	orrs	r2, r3
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	431a      	orrs	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4619      	mov	r1, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	01db      	lsls	r3, r3, #7
 8005800:	440b      	add	r3, r1
 8005802:	3384      	adds	r3, #132	; 0x84
 8005804:	4619      	mov	r1, r3
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	461a      	mov	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	01db      	lsls	r3, r3, #7
 8005816:	4413      	add	r3, r2
 8005818:	3384      	adds	r3, #132	; 0x84
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	6812      	ldr	r2, [r2, #0]
 8005820:	4611      	mov	r1, r2
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	01d2      	lsls	r2, r2, #7
 8005826:	440a      	add	r2, r1
 8005828:	3284      	adds	r2, #132	; 0x84
 800582a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800582e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	01db      	lsls	r3, r3, #7
 800583a:	4413      	add	r3, r2
 800583c:	3384      	adds	r3, #132	; 0x84
 800583e:	461a      	mov	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	01db      	lsls	r3, r3, #7
 8005850:	4413      	add	r3, r2
 8005852:	3384      	adds	r3, #132	; 0x84
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	6812      	ldr	r2, [r2, #0]
 800585a:	4611      	mov	r1, r2
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	01d2      	lsls	r2, r2, #7
 8005860:	440a      	add	r2, r1
 8005862:	3284      	adds	r2, #132	; 0x84
 8005864:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005868:	f023 0307 	bic.w	r3, r3, #7
 800586c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	69da      	ldr	r2, [r3, #28]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	68f9      	ldr	r1, [r7, #12]
 8005878:	6809      	ldr	r1, [r1, #0]
 800587a:	4608      	mov	r0, r1
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	01c9      	lsls	r1, r1, #7
 8005880:	4401      	add	r1, r0
 8005882:	3184      	adds	r1, #132	; 0x84
 8005884:	4313      	orrs	r3, r2
 8005886:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	01db      	lsls	r3, r3, #7
 8005892:	4413      	add	r3, r2
 8005894:	3384      	adds	r3, #132	; 0x84
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	461a      	mov	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	01db      	lsls	r3, r3, #7
 80058a2:	4413      	add	r3, r2
 80058a4:	3384      	adds	r3, #132	; 0x84
 80058a6:	461a      	mov	r2, r3
 80058a8:	2300      	movs	r3, #0
 80058aa:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	01db      	lsls	r3, r3, #7
 80058b6:	4413      	add	r3, r2
 80058b8:	3384      	adds	r3, #132	; 0x84
 80058ba:	461a      	mov	r2, r3
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d102      	bne.n	80058d0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80058ca:	2304      	movs	r3, #4
 80058cc:	61fb      	str	r3, [r7, #28]
 80058ce:	e01b      	b.n	8005908 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d102      	bne.n	80058de <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80058d8:	2303      	movs	r3, #3
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	e014      	b.n	8005908 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d00b      	beq.n	80058fe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d007      	beq.n	80058fe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d003      	beq.n	80058fe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80058fa:	2b07      	cmp	r3, #7
 80058fc:	d102      	bne.n	8005904 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80058fe:	2302      	movs	r3, #2
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	e001      	b.n	8005908 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005904:	2301      	movs	r3, #1
 8005906:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	461a      	mov	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	01db      	lsls	r3, r3, #7
 8005912:	4413      	add	r3, r2
 8005914:	3384      	adds	r3, #132	; 0x84
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	4611      	mov	r1, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	01d2      	lsls	r2, r2, #7
 8005922:	440a      	add	r2, r1
 8005924:	3284      	adds	r2, #132	; 0x84
 8005926:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800592a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	69fa      	ldr	r2, [r7, #28]
 8005932:	fb02 f303 	mul.w	r3, r2, r3
 8005936:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	6859      	ldr	r1, [r3, #4]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	1acb      	subs	r3, r1, r3
 8005942:	69f9      	ldr	r1, [r7, #28]
 8005944:	fb01 f303 	mul.w	r3, r1, r3
 8005948:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800594a:	68f9      	ldr	r1, [r7, #12]
 800594c:	6809      	ldr	r1, [r1, #0]
 800594e:	4608      	mov	r0, r1
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	01c9      	lsls	r1, r1, #7
 8005954:	4401      	add	r1, r0
 8005956:	3184      	adds	r1, #132	; 0x84
 8005958:	4313      	orrs	r3, r2
 800595a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	01db      	lsls	r3, r3, #7
 8005966:	4413      	add	r3, r2
 8005968:	3384      	adds	r3, #132	; 0x84
 800596a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	6812      	ldr	r2, [r2, #0]
 8005970:	4611      	mov	r1, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	01d2      	lsls	r2, r2, #7
 8005976:	440a      	add	r2, r1
 8005978:	3284      	adds	r2, #132	; 0x84
 800597a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800597e:	f023 0307 	bic.w	r3, r3, #7
 8005982:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	461a      	mov	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	01db      	lsls	r3, r3, #7
 800598e:	4413      	add	r3, r2
 8005990:	3384      	adds	r3, #132	; 0x84
 8005992:	461a      	mov	r2, r3
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	01db      	lsls	r3, r3, #7
 80059a4:	4413      	add	r3, r2
 80059a6:	3384      	adds	r3, #132	; 0x84
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	6812      	ldr	r2, [r2, #0]
 80059ae:	4611      	mov	r1, r2
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	01d2      	lsls	r2, r2, #7
 80059b4:	440a      	add	r2, r1
 80059b6:	3284      	adds	r2, #132	; 0x84
 80059b8:	f043 0301 	orr.w	r3, r3, #1
 80059bc:	6013      	str	r3, [r2, #0]
}
 80059be:	bf00      	nop
 80059c0:	3724      	adds	r7, #36	; 0x24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
	...

080059cc <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d102      	bne.n	80059e4 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	73fb      	strb	r3, [r7, #15]
 80059e2:	e141      	b.n	8005c68 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 f947 	bl	8005c7c <MDF_GetHandleNumberFromInstance>
 80059ee:	4603      	mov	r3, r0
 80059f0:	4a86      	ldr	r2, [pc, #536]	; (8005c0c <HAL_MDF_Init+0x240>)
 80059f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	73fb      	strb	r3, [r7, #15]
 80059fe:	e133      	b.n	8005c68 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7fc f845 	bl	8001a90 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8005a06:	4b82      	ldr	r3, [pc, #520]	; (8005c10 <HAL_MDF_Init+0x244>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d11d      	bne.n	8005a4a <HAL_MDF_Init+0x7e>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a80      	ldr	r2, [pc, #512]	; (8005c14 <HAL_MDF_Init+0x248>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d023      	beq.n	8005a60 <HAL_MDF_Init+0x94>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a7e      	ldr	r2, [pc, #504]	; (8005c18 <HAL_MDF_Init+0x24c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d01e      	beq.n	8005a60 <HAL_MDF_Init+0x94>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a7d      	ldr	r2, [pc, #500]	; (8005c1c <HAL_MDF_Init+0x250>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d019      	beq.n	8005a60 <HAL_MDF_Init+0x94>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a7b      	ldr	r2, [pc, #492]	; (8005c20 <HAL_MDF_Init+0x254>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d014      	beq.n	8005a60 <HAL_MDF_Init+0x94>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a7a      	ldr	r2, [pc, #488]	; (8005c24 <HAL_MDF_Init+0x258>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00f      	beq.n	8005a60 <HAL_MDF_Init+0x94>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a78      	ldr	r2, [pc, #480]	; (8005c28 <HAL_MDF_Init+0x25c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00a      	beq.n	8005a60 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8005a4a:	4b78      	ldr	r3, [pc, #480]	; (8005c2c <HAL_MDF_Init+0x260>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f040 8090 	bne.w	8005b74 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a75      	ldr	r2, [pc, #468]	; (8005c30 <HAL_MDF_Init+0x264>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	f040 808a 	bne.w	8005b74 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a72      	ldr	r2, [pc, #456]	; (8005c30 <HAL_MDF_Init+0x264>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d101      	bne.n	8005a6e <HAL_MDF_Init+0xa2>
 8005a6a:	4b72      	ldr	r3, [pc, #456]	; (8005c34 <HAL_MDF_Init+0x268>)
 8005a6c:	e000      	b.n	8005a70 <HAL_MDF_Init+0xa4>
 8005a6e:	4b72      	ldr	r3, [pc, #456]	; (8005c38 <HAL_MDF_Init+0x26c>)
 8005a70:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	da02      	bge.n	8005a80 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	73fb      	strb	r3, [r7, #15]
 8005a7e:	e079      	b.n	8005b74 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a63      	ldr	r2, [pc, #396]	; (8005c14 <HAL_MDF_Init+0x248>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d018      	beq.n	8005abc <HAL_MDF_Init+0xf0>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a62      	ldr	r2, [pc, #392]	; (8005c18 <HAL_MDF_Init+0x24c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d013      	beq.n	8005abc <HAL_MDF_Init+0xf0>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a60      	ldr	r2, [pc, #384]	; (8005c1c <HAL_MDF_Init+0x250>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00e      	beq.n	8005abc <HAL_MDF_Init+0xf0>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a5f      	ldr	r2, [pc, #380]	; (8005c20 <HAL_MDF_Init+0x254>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d009      	beq.n	8005abc <HAL_MDF_Init+0xf0>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a5d      	ldr	r2, [pc, #372]	; (8005c24 <HAL_MDF_Init+0x258>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d004      	beq.n	8005abc <HAL_MDF_Init+0xf0>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a5c      	ldr	r2, [pc, #368]	; (8005c28 <HAL_MDF_Init+0x25c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d10d      	bne.n	8005ad8 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2200      	movs	r2, #0
 8005adc:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	061b      	lsls	r3, r3, #24
 8005aea:	431a      	orrs	r2, r3
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	7b1b      	ldrb	r3, [r3, #12]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d137      	bne.n	8005b68 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8005b08:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8005b10:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8005b12:	431a      	orrs	r2, r3
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	7e1b      	ldrb	r3, [r3, #24]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d123      	bne.n	8005b68 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a3b      	ldr	r2, [pc, #236]	; (8005c14 <HAL_MDF_Init+0x248>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d012      	beq.n	8005b50 <HAL_MDF_Init+0x184>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a3a      	ldr	r2, [pc, #232]	; (8005c18 <HAL_MDF_Init+0x24c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00d      	beq.n	8005b50 <HAL_MDF_Init+0x184>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a38      	ldr	r2, [pc, #224]	; (8005c1c <HAL_MDF_Init+0x250>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d008      	beq.n	8005b50 <HAL_MDF_Init+0x184>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a37      	ldr	r2, [pc, #220]	; (8005c20 <HAL_MDF_Init+0x254>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d003      	beq.n	8005b50 <HAL_MDF_Init+0x184>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a35      	ldr	r2, [pc, #212]	; (8005c24 <HAL_MDF_Init+0x258>)
 8005b4e:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f043 0210 	orr.w	r2, r3, #16
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f043 0201 	orr.w	r2, r3, #1
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d128      	bne.n	8005bcc <HAL_MDF_Init+0x200>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d123      	bne.n	8005bcc <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	da02      	bge.n	8005b94 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	73fb      	strb	r3, [r7, #15]
 8005b92:	e01b      	b.n	8005bcc <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6819      	ldr	r1, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8005bac:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0201 	orr.w	r2, r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d14a      	bne.n	8005c68 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 021f 	bic.w	r2, r2, #31
 8005be0:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6859      	ldr	r1, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a0d      	ldr	r2, [pc, #52]	; (8005c30 <HAL_MDF_Init+0x264>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d11e      	bne.n	8005c3c <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8005bfe:	4b0b      	ldr	r3, [pc, #44]	; (8005c2c <HAL_MDF_Init+0x260>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3301      	adds	r3, #1
 8005c04:	4a09      	ldr	r2, [pc, #36]	; (8005c2c <HAL_MDF_Init+0x260>)
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	e01d      	b.n	8005c46 <HAL_MDF_Init+0x27a>
 8005c0a:	bf00      	nop
 8005c0c:	20000d54 	.word	0x20000d54
 8005c10:	20000d4c 	.word	0x20000d4c
 8005c14:	40025080 	.word	0x40025080
 8005c18:	40025100 	.word	0x40025100
 8005c1c:	40025180 	.word	0x40025180
 8005c20:	40025200 	.word	0x40025200
 8005c24:	40025280 	.word	0x40025280
 8005c28:	40025300 	.word	0x40025300
 8005c2c:	20000d50 	.word	0x20000d50
 8005c30:	46024080 	.word	0x46024080
 8005c34:	46024000 	.word	0x46024000
 8005c38:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8005c3c:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <HAL_MDF_Init+0x2a8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3301      	adds	r3, #1
 8005c42:	4a0c      	ldr	r2, [pc, #48]	; (8005c74 <HAL_MDF_Init+0x2a8>)
 8005c44:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 f816 	bl	8005c7c <MDF_GetHandleNumberFromInstance>
 8005c50:	4602      	mov	r2, r0
 8005c52:	4909      	ldr	r1, [pc, #36]	; (8005c78 <HAL_MDF_Init+0x2ac>)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20000d4c 	.word	0x20000d4c
 8005c78:	20000d54 	.word	0x20000d54

08005c7c <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a19      	ldr	r2, [pc, #100]	; (8005cec <MDF_GetHandleNumberFromInstance+0x70>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d102      	bne.n	8005c92 <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e024      	b.n	8005cdc <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a16      	ldr	r2, [pc, #88]	; (8005cf0 <MDF_GetHandleNumberFromInstance+0x74>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d102      	bne.n	8005ca0 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	e01d      	b.n	8005cdc <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a14      	ldr	r2, [pc, #80]	; (8005cf4 <MDF_GetHandleNumberFromInstance+0x78>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d102      	bne.n	8005cae <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8005ca8:	2302      	movs	r3, #2
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	e016      	b.n	8005cdc <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a11      	ldr	r2, [pc, #68]	; (8005cf8 <MDF_GetHandleNumberFromInstance+0x7c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d102      	bne.n	8005cbc <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	e00f      	b.n	8005cdc <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a0f      	ldr	r2, [pc, #60]	; (8005cfc <MDF_GetHandleNumberFromInstance+0x80>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d102      	bne.n	8005cca <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	e008      	b.n	8005cdc <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a0c      	ldr	r2, [pc, #48]	; (8005d00 <MDF_GetHandleNumberFromInstance+0x84>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d102      	bne.n	8005cd8 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8005cd2:	2305      	movs	r3, #5
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	e001      	b.n	8005cdc <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8005cd8:	2306      	movs	r3, #6
 8005cda:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	40025080 	.word	0x40025080
 8005cf0:	40025100 	.word	0x40025100
 8005cf4:	40025180 	.word	0x40025180
 8005cf8:	40025200 	.word	0x40025200
 8005cfc:	40025280 	.word	0x40025280
 8005d00:	40025300 	.word	0x40025300

08005d04 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f043 0201 	orr.w	r2, r3, #1
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	601a      	str	r2, [r3, #0]
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005d30:	f7fd f9e0 	bl	80030f4 <HAL_GetTick>
 8005d34:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	73fb      	strb	r3, [r7, #15]
 8005d40:	e0a5      	b.n	8005e8e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f040 809e 	bne.w	8005e8e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fc fc22 	bl	800259c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8005d58:	f241 3188 	movw	r1, #5000	; 0x1388
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f951 	bl	8006004 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	4b4b      	ldr	r3, [pc, #300]	; (8005e98 <HAL_OSPI_Init+0x174>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	68d1      	ldr	r1, [r2, #12]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6912      	ldr	r2, [r2, #16]
 8005d74:	3a01      	subs	r2, #1
 8005d76:	0412      	lsls	r2, r2, #16
 8005d78:	4311      	orrs	r1, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6952      	ldr	r2, [r2, #20]
 8005d7e:	3a01      	subs	r2, #1
 8005d80:	0212      	lsls	r2, r2, #8
 8005d82:	4311      	orrs	r1, r2
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d88:	4311      	orrs	r1, r2
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	69d2      	ldr	r2, [r2, #28]
 8005d8e:	4311      	orrs	r1, r2
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6812      	ldr	r2, [r2, #0]
 8005d94:	430b      	orrs	r3, r1
 8005d96:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1a      	ldr	r2, [r3, #32]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db2:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005dc8:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	021a      	lsls	r2, r3, #8
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2200      	movs	r2, #0
 8005dee:	2120      	movs	r1, #32
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fe09 	bl	8006a08 <OSPI_WaitFlagStateUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d146      	bne.n	8005e8e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	1e5a      	subs	r2, r3, #1
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689a      	ldr	r2, [r3, #8]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e36:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 0201 	orr.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d107      	bne.n	8005e76 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0202 	orr.w	r2, r2, #2
 8005e74:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e7e:	d103      	bne.n	8005e88 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	651a      	str	r2, [r3, #80]	; 0x50
 8005e86:	e002      	b.n	8005e8e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	f8e0c0f4 	.word	0xf8e0c0f4

08005e9c <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08a      	sub	sp, #40	; 0x28
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8005ea8:	f7fd f924 	bl	80030f4 <HAL_GetTick>
 8005eac:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb2:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d002      	beq.n	8005ec0 <HAL_OSPI_HyperbusCfg+0x24>
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d122      	bne.n	8005f06 <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	2120      	movs	r1, #32
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 fd9c 	bl	8006a08 <OSPI_WaitFlagStateUntilTimeout>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8005ed4:	7ffb      	ldrb	r3, [r7, #31]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d11a      	bne.n	8005f10 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	041a      	lsls	r2, r3, #16
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	021b      	lsls	r3, r3, #8
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	ea42 0103 	orr.w	r1, r2, r3
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2202      	movs	r2, #2
 8005f02:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8005f04:	e004      	b.n	8005f10 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2210      	movs	r2, #16
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8005f10:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3720      	adds	r7, #32
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b088      	sub	sp, #32
 8005f1e:	af02      	add	r7, sp, #8
 8005f20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8005f26:	f7fd f8e5 	bl	80030f4 <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f30:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f003 0308 	and.w	r3, r3, #8
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d104      	bne.n	8005f46 <HAL_OSPI_Abort+0x2c>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f003 0304 	and.w	r3, r3, #4
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d052      	beq.n	8005fec <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d014      	beq.n	8005f7e <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0204 	bic.w	r2, r2, #4
 8005f62:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fd fb98 	bl	800369e <HAL_DMA_Abort>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8005f72:	7dfb      	ldrb	r3, [r7, #23]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2204      	movs	r2, #4
 8005f7c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d02b      	beq.n	8005fe4 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0202 	orr.w	r2, r2, #2
 8005f9a:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	2102      	movs	r1, #2
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fd2d 	bl	8006a08 <OSPI_WaitFlagStateUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d11f      	bne.n	8005ff8 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2120      	movs	r1, #32
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fd1b 	bl	8006a08 <OSPI_WaitFlagStateUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005fd6:	7dfb      	ldrb	r3, [r7, #23]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10d      	bne.n	8005ff8 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005fe2:	e009      	b.n	8005ff8 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005fea:	e005      	b.n	8005ff8 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2210      	movs	r2, #16
 8005ff4:	655a      	str	r2, [r3, #84]	; 0x54
 8005ff6:	e000      	b.n	8005ffa <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005ff8:	bf00      	nop
  }

  /* Return function status */
  return status;
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
	...

08006024 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b094      	sub	sp, #80	; 0x50
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a9d      	ldr	r2, [pc, #628]	; (80062b8 <HAL_OSPIM_Config+0x294>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d105      	bne.n	8006052 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 800604a:	2301      	movs	r3, #1
 800604c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8006050:	e004      	b.n	800605c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8006052:	2301      	movs	r3, #1
 8006054:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800605c:	2300      	movs	r3, #0
 800605e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006062:	e01d      	b.n	80060a0 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8006064:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006068:	3301      	adds	r3, #1
 800606a:	b2d8      	uxtb	r0, r3
 800606c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8006070:	f107 0114 	add.w	r1, r7, #20
 8006074:	4613      	mov	r3, r2
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	4413      	add	r3, r2
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	440b      	add	r3, r1
 800607e:	4619      	mov	r1, r3
 8006080:	f000 fd02 	bl	8006a88 <OSPIM_GetConfig>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2208      	movs	r2, #8
 8006094:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006096:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800609a:	3301      	adds	r3, #1
 800609c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80060a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d9dd      	bls.n	8006064 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80060a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f040 849e 	bne.w	80069ee <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80060b2:	4b81      	ldr	r3, [pc, #516]	; (80062b8 <HAL_OSPIM_Config+0x294>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00b      	beq.n	80060d6 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80060be:	4b7e      	ldr	r3, [pc, #504]	; (80062b8 <HAL_OSPIM_Config+0x294>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a7d      	ldr	r2, [pc, #500]	; (80062b8 <HAL_OSPIM_Config+0x294>)
 80060c4:	f023 0301 	bic.w	r3, r3, #1
 80060c8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80060ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80060ce:	f043 0301 	orr.w	r3, r3, #1
 80060d2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80060d6:	4b79      	ldr	r3, [pc, #484]	; (80062bc <HAL_OSPIM_Config+0x298>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00b      	beq.n	80060fa <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80060e2:	4b76      	ldr	r3, [pc, #472]	; (80062bc <HAL_OSPIM_Config+0x298>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a75      	ldr	r2, [pc, #468]	; (80062bc <HAL_OSPIM_Config+0x298>)
 80060e8:	f023 0301 	bic.w	r3, r3, #1
 80060ec:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80060ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80060f2:	f043 0302 	orr.w	r3, r3, #2
 80060f6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80060fa:	4971      	ldr	r1, [pc, #452]	; (80062c0 <HAL_OSPIM_Config+0x29c>)
 80060fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060fe:	4613      	mov	r3, r2
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	4413      	add	r3, r2
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	3350      	adds	r3, #80	; 0x50
 8006108:	443b      	add	r3, r7
 800610a:	3b34      	subs	r3, #52	; 0x34
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3b01      	subs	r3, #1
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	440b      	add	r3, r1
 8006114:	6859      	ldr	r1, [r3, #4]
 8006116:	486a      	ldr	r0, [pc, #424]	; (80062c0 <HAL_OSPIM_Config+0x29c>)
 8006118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800611a:	4613      	mov	r3, r2
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	4413      	add	r3, r2
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	3350      	adds	r3, #80	; 0x50
 8006124:	443b      	add	r3, r7
 8006126:	3b34      	subs	r3, #52	; 0x34
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3b01      	subs	r3, #1
 800612c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4403      	add	r3, r0
 8006134:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006136:	4b62      	ldr	r3, [pc, #392]	; (80062c0 <HAL_OSPIM_Config+0x29c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 80c0 	beq.w	80062c4 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006144:	4b5e      	ldr	r3, [pc, #376]	; (80062c0 <HAL_OSPIM_Config+0x29c>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a5d      	ldr	r2, [pc, #372]	; (80062c0 <HAL_OSPIM_Config+0x29c>)
 800614a:	f023 0301 	bic.w	r3, r3, #1
 800614e:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8006150:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006154:	2b01      	cmp	r3, #1
 8006156:	f040 8162 	bne.w	800641e <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800615a:	4959      	ldr	r1, [pc, #356]	; (80062c0 <HAL_OSPIM_Config+0x29c>)
 800615c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006160:	4613      	mov	r3, r2
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	4413      	add	r3, r2
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	3350      	adds	r3, #80	; 0x50
 800616a:	443b      	add	r3, r7
 800616c:	3b3c      	subs	r3, #60	; 0x3c
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3b01      	subs	r3, #1
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	440b      	add	r3, r1
 8006176:	6859      	ldr	r1, [r3, #4]
 8006178:	4851      	ldr	r0, [pc, #324]	; (80062c0 <HAL_OSPIM_Config+0x29c>)
 800617a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800617e:	4613      	mov	r3, r2
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	4413      	add	r3, r2
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	3350      	adds	r3, #80	; 0x50
 8006188:	443b      	add	r3, r7
 800618a:	3b3c      	subs	r3, #60	; 0x3c
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3b01      	subs	r3, #1
 8006190:	f041 0202 	orr.w	r2, r1, #2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4403      	add	r3, r0
 8006198:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800619a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800619e:	4613      	mov	r3, r2
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	4413      	add	r3, r2
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	3350      	adds	r3, #80	; 0x50
 80061a8:	443b      	add	r3, r7
 80061aa:	3b38      	subs	r3, #56	; 0x38
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d01f      	beq.n	80061f2 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 80061b2:	4943      	ldr	r1, [pc, #268]	; (80062c0 <HAL_OSPIM_Config+0x29c>)
 80061b4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80061b8:	4613      	mov	r3, r2
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	4413      	add	r3, r2
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	3350      	adds	r3, #80	; 0x50
 80061c2:	443b      	add	r3, r7
 80061c4:	3b38      	subs	r3, #56	; 0x38
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	6859      	ldr	r1, [r3, #4]
 80061d0:	483b      	ldr	r0, [pc, #236]	; (80062c0 <HAL_OSPIM_Config+0x29c>)
 80061d2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80061d6:	4613      	mov	r3, r2
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	4413      	add	r3, r2
 80061dc:	00db      	lsls	r3, r3, #3
 80061de:	3350      	adds	r3, #80	; 0x50
 80061e0:	443b      	add	r3, r7
 80061e2:	3b38      	subs	r3, #56	; 0x38
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	f041 0220 	orr.w	r2, r1, #32
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4403      	add	r3, r0
 80061f0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80061f2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80061f6:	4613      	mov	r3, r2
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	4413      	add	r3, r2
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	3350      	adds	r3, #80	; 0x50
 8006200:	443b      	add	r3, r7
 8006202:	3b30      	subs	r3, #48	; 0x30
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d023      	beq.n	8006252 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800620a:	492d      	ldr	r1, [pc, #180]	; (80062c0 <HAL_OSPIM_Config+0x29c>)
 800620c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006210:	4613      	mov	r3, r2
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	4413      	add	r3, r2
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	3350      	adds	r3, #80	; 0x50
 800621a:	443b      	add	r3, r7
 800621c:	3b30      	subs	r3, #48	; 0x30
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3b01      	subs	r3, #1
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	440b      	add	r3, r1
 800622a:	6859      	ldr	r1, [r3, #4]
 800622c:	4824      	ldr	r0, [pc, #144]	; (80062c0 <HAL_OSPIM_Config+0x29c>)
 800622e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006232:	4613      	mov	r3, r2
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	4413      	add	r3, r2
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	3350      	adds	r3, #80	; 0x50
 800623c:	443b      	add	r3, r7
 800623e:	3b30      	subs	r3, #48	; 0x30
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3b01      	subs	r3, #1
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4403      	add	r3, r0
 8006250:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006252:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006256:	4613      	mov	r3, r2
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	4413      	add	r3, r2
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	3350      	adds	r3, #80	; 0x50
 8006260:	443b      	add	r3, r7
 8006262:	3b2c      	subs	r3, #44	; 0x2c
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 80d9 	beq.w	800641e <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800626c:	4914      	ldr	r1, [pc, #80]	; (80062c0 <HAL_OSPIM_Config+0x29c>)
 800626e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006272:	4613      	mov	r3, r2
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	4413      	add	r3, r2
 8006278:	00db      	lsls	r3, r3, #3
 800627a:	3350      	adds	r3, #80	; 0x50
 800627c:	443b      	add	r3, r7
 800627e:	3b2c      	subs	r3, #44	; 0x2c
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3b01      	subs	r3, #1
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	440b      	add	r3, r1
 800628c:	6859      	ldr	r1, [r3, #4]
 800628e:	480c      	ldr	r0, [pc, #48]	; (80062c0 <HAL_OSPIM_Config+0x29c>)
 8006290:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006294:	4613      	mov	r3, r2
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	4413      	add	r3, r2
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	3350      	adds	r3, #80	; 0x50
 800629e:	443b      	add	r3, r7
 80062a0:	3b2c      	subs	r3, #44	; 0x2c
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4403      	add	r3, r0
 80062b2:	605a      	str	r2, [r3, #4]
 80062b4:	e0b3      	b.n	800641e <HAL_OSPIM_Config+0x3fa>
 80062b6:	bf00      	nop
 80062b8:	420d1400 	.word	0x420d1400
 80062bc:	420d2400 	.word	0x420d2400
 80062c0:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80062c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062c6:	4613      	mov	r3, r2
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	4413      	add	r3, r2
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	3350      	adds	r3, #80	; 0x50
 80062d0:	443b      	add	r3, r7
 80062d2:	3b3c      	subs	r3, #60	; 0x3c
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 80a1 	beq.w	800641e <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80062dc:	4993      	ldr	r1, [pc, #588]	; (800652c <HAL_OSPIM_Config+0x508>)
 80062de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062e0:	4613      	mov	r3, r2
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	4413      	add	r3, r2
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	3350      	adds	r3, #80	; 0x50
 80062ea:	443b      	add	r3, r7
 80062ec:	3b3c      	subs	r3, #60	; 0x3c
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	6859      	ldr	r1, [r3, #4]
 80062f8:	488c      	ldr	r0, [pc, #560]	; (800652c <HAL_OSPIM_Config+0x508>)
 80062fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062fc:	4613      	mov	r3, r2
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	4413      	add	r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	3350      	adds	r3, #80	; 0x50
 8006306:	443b      	add	r3, r7
 8006308:	3b3c      	subs	r3, #60	; 0x3c
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3b01      	subs	r3, #1
 800630e:	f021 0201 	bic.w	r2, r1, #1
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4403      	add	r3, r0
 8006316:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800631a:	4613      	mov	r3, r2
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	4413      	add	r3, r2
 8006320:	00db      	lsls	r3, r3, #3
 8006322:	3350      	adds	r3, #80	; 0x50
 8006324:	443b      	add	r3, r7
 8006326:	3b38      	subs	r3, #56	; 0x38
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d01d      	beq.n	800636a <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800632e:	497f      	ldr	r1, [pc, #508]	; (800652c <HAL_OSPIM_Config+0x508>)
 8006330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006332:	4613      	mov	r3, r2
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	4413      	add	r3, r2
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	3350      	adds	r3, #80	; 0x50
 800633c:	443b      	add	r3, r7
 800633e:	3b38      	subs	r3, #56	; 0x38
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3b01      	subs	r3, #1
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	440b      	add	r3, r1
 8006348:	6859      	ldr	r1, [r3, #4]
 800634a:	4878      	ldr	r0, [pc, #480]	; (800652c <HAL_OSPIM_Config+0x508>)
 800634c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800634e:	4613      	mov	r3, r2
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	4413      	add	r3, r2
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	3350      	adds	r3, #80	; 0x50
 8006358:	443b      	add	r3, r7
 800635a:	3b38      	subs	r3, #56	; 0x38
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3b01      	subs	r3, #1
 8006360:	f021 0210 	bic.w	r2, r1, #16
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4403      	add	r3, r0
 8006368:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800636a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800636c:	4613      	mov	r3, r2
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	4413      	add	r3, r2
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	3350      	adds	r3, #80	; 0x50
 8006376:	443b      	add	r3, r7
 8006378:	3b30      	subs	r3, #48	; 0x30
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d021      	beq.n	80063c4 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006380:	496a      	ldr	r1, [pc, #424]	; (800652c <HAL_OSPIM_Config+0x508>)
 8006382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006384:	4613      	mov	r3, r2
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	4413      	add	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	3350      	adds	r3, #80	; 0x50
 800638e:	443b      	add	r3, r7
 8006390:	3b30      	subs	r3, #48	; 0x30
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3b01      	subs	r3, #1
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	6859      	ldr	r1, [r3, #4]
 80063a0:	4862      	ldr	r0, [pc, #392]	; (800652c <HAL_OSPIM_Config+0x508>)
 80063a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063a4:	4613      	mov	r3, r2
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	4413      	add	r3, r2
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	3350      	adds	r3, #80	; 0x50
 80063ae:	443b      	add	r3, r7
 80063b0:	3b30      	subs	r3, #48	; 0x30
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3b01      	subs	r3, #1
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4403      	add	r3, r0
 80063c2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80063c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063c6:	4613      	mov	r3, r2
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	4413      	add	r3, r2
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	3350      	adds	r3, #80	; 0x50
 80063d0:	443b      	add	r3, r7
 80063d2:	3b2c      	subs	r3, #44	; 0x2c
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d021      	beq.n	800641e <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80063da:	4954      	ldr	r1, [pc, #336]	; (800652c <HAL_OSPIM_Config+0x508>)
 80063dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063de:	4613      	mov	r3, r2
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	4413      	add	r3, r2
 80063e4:	00db      	lsls	r3, r3, #3
 80063e6:	3350      	adds	r3, #80	; 0x50
 80063e8:	443b      	add	r3, r7
 80063ea:	3b2c      	subs	r3, #44	; 0x2c
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	440b      	add	r3, r1
 80063f8:	6859      	ldr	r1, [r3, #4]
 80063fa:	484c      	ldr	r0, [pc, #304]	; (800652c <HAL_OSPIM_Config+0x508>)
 80063fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063fe:	4613      	mov	r3, r2
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	4413      	add	r3, r2
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	3350      	adds	r3, #80	; 0x50
 8006408:	443b      	add	r3, r7
 800640a:	3b2c      	subs	r3, #44	; 0x2c
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3b01      	subs	r3, #1
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4403      	add	r3, r0
 800641c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	6819      	ldr	r1, [r3, #0]
 8006422:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006426:	4613      	mov	r3, r2
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	4413      	add	r3, r2
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	3350      	adds	r3, #80	; 0x50
 8006430:	443b      	add	r3, r7
 8006432:	3b3c      	subs	r3, #60	; 0x3c
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4299      	cmp	r1, r3
 8006438:	d038      	beq.n	80064ac <HAL_OSPIM_Config+0x488>
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	6859      	ldr	r1, [r3, #4]
 800643e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006442:	4613      	mov	r3, r2
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	4413      	add	r3, r2
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	3350      	adds	r3, #80	; 0x50
 800644c:	443b      	add	r3, r7
 800644e:	3b38      	subs	r3, #56	; 0x38
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4299      	cmp	r1, r3
 8006454:	d02a      	beq.n	80064ac <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	6899      	ldr	r1, [r3, #8]
 800645a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800645e:	4613      	mov	r3, r2
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	4413      	add	r3, r2
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	3350      	adds	r3, #80	; 0x50
 8006468:	443b      	add	r3, r7
 800646a:	3b34      	subs	r3, #52	; 0x34
 800646c:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800646e:	4299      	cmp	r1, r3
 8006470:	d01c      	beq.n	80064ac <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	68d9      	ldr	r1, [r3, #12]
 8006476:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800647a:	4613      	mov	r3, r2
 800647c:	005b      	lsls	r3, r3, #1
 800647e:	4413      	add	r3, r2
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	3350      	adds	r3, #80	; 0x50
 8006484:	443b      	add	r3, r7
 8006486:	3b30      	subs	r3, #48	; 0x30
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4299      	cmp	r1, r3
 800648c:	d00e      	beq.n	80064ac <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	6919      	ldr	r1, [r3, #16]
 8006492:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006496:	4613      	mov	r3, r2
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	4413      	add	r3, r2
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	3350      	adds	r3, #80	; 0x50
 80064a0:	443b      	add	r3, r7
 80064a2:	3b2c      	subs	r3, #44	; 0x2c
 80064a4:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80064a6:	4299      	cmp	r1, r3
 80064a8:	f040 810e 	bne.w	80066c8 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	6819      	ldr	r1, [r3, #0]
 80064b0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80064b4:	4613      	mov	r3, r2
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	4413      	add	r3, r2
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	3350      	adds	r3, #80	; 0x50
 80064be:	443b      	add	r3, r7
 80064c0:	3b3c      	subs	r3, #60	; 0x3c
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4299      	cmp	r1, r3
 80064c6:	d133      	bne.n	8006530 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	6859      	ldr	r1, [r3, #4]
 80064cc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80064d0:	4613      	mov	r3, r2
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	4413      	add	r3, r2
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	3350      	adds	r3, #80	; 0x50
 80064da:	443b      	add	r3, r7
 80064dc:	3b38      	subs	r3, #56	; 0x38
 80064de:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80064e0:	4299      	cmp	r1, r3
 80064e2:	d125      	bne.n	8006530 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	68d9      	ldr	r1, [r3, #12]
 80064e8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80064ec:	4613      	mov	r3, r2
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	4413      	add	r3, r2
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	3350      	adds	r3, #80	; 0x50
 80064f6:	443b      	add	r3, r7
 80064f8:	3b30      	subs	r3, #48	; 0x30
 80064fa:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80064fc:	4299      	cmp	r1, r3
 80064fe:	d117      	bne.n	8006530 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	6919      	ldr	r1, [r3, #16]
 8006504:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006508:	4613      	mov	r3, r2
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	4413      	add	r3, r2
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	3350      	adds	r3, #80	; 0x50
 8006512:	443b      	add	r3, r7
 8006514:	3b2c      	subs	r3, #44	; 0x2c
 8006516:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006518:	4299      	cmp	r1, r3
 800651a:	d109      	bne.n	8006530 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800651c:	4b03      	ldr	r3, [pc, #12]	; (800652c <HAL_OSPIM_Config+0x508>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a02      	ldr	r2, [pc, #8]	; (800652c <HAL_OSPIM_Config+0x508>)
 8006522:	f043 0301 	orr.w	r3, r3, #1
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	e0ce      	b.n	80066c8 <HAL_OSPIM_Config+0x6a4>
 800652a:	bf00      	nop
 800652c:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006530:	49a4      	ldr	r1, [pc, #656]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 8006532:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006536:	4613      	mov	r3, r2
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	4413      	add	r3, r2
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	3350      	adds	r3, #80	; 0x50
 8006540:	443b      	add	r3, r7
 8006542:	3b3c      	subs	r3, #60	; 0x3c
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3b01      	subs	r3, #1
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	440b      	add	r3, r1
 800654c:	6859      	ldr	r1, [r3, #4]
 800654e:	489d      	ldr	r0, [pc, #628]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 8006550:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006554:	4613      	mov	r3, r2
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	4413      	add	r3, r2
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	3350      	adds	r3, #80	; 0x50
 800655e:	443b      	add	r3, r7
 8006560:	3b3c      	subs	r3, #60	; 0x3c
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3b01      	subs	r3, #1
 8006566:	f021 0201 	bic.w	r2, r1, #1
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4403      	add	r3, r0
 800656e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006570:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006574:	4613      	mov	r3, r2
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	4413      	add	r3, r2
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	3350      	adds	r3, #80	; 0x50
 800657e:	443b      	add	r3, r7
 8006580:	3b38      	subs	r3, #56	; 0x38
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01f      	beq.n	80065c8 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006588:	498e      	ldr	r1, [pc, #568]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 800658a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800658e:	4613      	mov	r3, r2
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	4413      	add	r3, r2
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	3350      	adds	r3, #80	; 0x50
 8006598:	443b      	add	r3, r7
 800659a:	3b38      	subs	r3, #56	; 0x38
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3b01      	subs	r3, #1
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	440b      	add	r3, r1
 80065a4:	6859      	ldr	r1, [r3, #4]
 80065a6:	4887      	ldr	r0, [pc, #540]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 80065a8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80065ac:	4613      	mov	r3, r2
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	4413      	add	r3, r2
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	3350      	adds	r3, #80	; 0x50
 80065b6:	443b      	add	r3, r7
 80065b8:	3b38      	subs	r3, #56	; 0x38
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3b01      	subs	r3, #1
 80065be:	f021 0210 	bic.w	r2, r1, #16
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4403      	add	r3, r0
 80065c6:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80065c8:	497e      	ldr	r1, [pc, #504]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 80065ca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80065ce:	4613      	mov	r3, r2
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	4413      	add	r3, r2
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	3350      	adds	r3, #80	; 0x50
 80065d8:	443b      	add	r3, r7
 80065da:	3b34      	subs	r3, #52	; 0x34
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3b01      	subs	r3, #1
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	440b      	add	r3, r1
 80065e4:	6859      	ldr	r1, [r3, #4]
 80065e6:	4877      	ldr	r0, [pc, #476]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 80065e8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80065ec:	4613      	mov	r3, r2
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	4413      	add	r3, r2
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	3350      	adds	r3, #80	; 0x50
 80065f6:	443b      	add	r3, r7
 80065f8:	3b34      	subs	r3, #52	; 0x34
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3b01      	subs	r3, #1
 80065fe:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4403      	add	r3, r0
 8006606:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006608:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800660c:	4613      	mov	r3, r2
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	4413      	add	r3, r2
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	3350      	adds	r3, #80	; 0x50
 8006616:	443b      	add	r3, r7
 8006618:	3b30      	subs	r3, #48	; 0x30
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d023      	beq.n	8006668 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006620:	4968      	ldr	r1, [pc, #416]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 8006622:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006626:	4613      	mov	r3, r2
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	4413      	add	r3, r2
 800662c:	00db      	lsls	r3, r3, #3
 800662e:	3350      	adds	r3, #80	; 0x50
 8006630:	443b      	add	r3, r7
 8006632:	3b30      	subs	r3, #48	; 0x30
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3b01      	subs	r3, #1
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	440b      	add	r3, r1
 8006640:	6859      	ldr	r1, [r3, #4]
 8006642:	4860      	ldr	r0, [pc, #384]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 8006644:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006648:	4613      	mov	r3, r2
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	4413      	add	r3, r2
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	3350      	adds	r3, #80	; 0x50
 8006652:	443b      	add	r3, r7
 8006654:	3b30      	subs	r3, #48	; 0x30
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3b01      	subs	r3, #1
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4403      	add	r3, r0
 8006666:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006668:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800666c:	4613      	mov	r3, r2
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	4413      	add	r3, r2
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	3350      	adds	r3, #80	; 0x50
 8006676:	443b      	add	r3, r7
 8006678:	3b2c      	subs	r3, #44	; 0x2c
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d023      	beq.n	80066c8 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006680:	4950      	ldr	r1, [pc, #320]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 8006682:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006686:	4613      	mov	r3, r2
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	4413      	add	r3, r2
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	3350      	adds	r3, #80	; 0x50
 8006690:	443b      	add	r3, r7
 8006692:	3b2c      	subs	r3, #44	; 0x2c
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3b01      	subs	r3, #1
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	440b      	add	r3, r1
 80066a0:	6859      	ldr	r1, [r3, #4]
 80066a2:	4848      	ldr	r0, [pc, #288]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 80066a4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80066a8:	4613      	mov	r3, r2
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	4413      	add	r3, r2
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	3350      	adds	r3, #80	; 0x50
 80066b2:	443b      	add	r3, r7
 80066b4:	3b2c      	subs	r3, #44	; 0x2c
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4403      	add	r3, r0
 80066c6:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80066c8:	4a3e      	ldr	r2, [pc, #248]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066dc:	025b      	lsls	r3, r3, #9
 80066de:	431a      	orrs	r2, r3
 80066e0:	4938      	ldr	r1, [pc, #224]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	440b      	add	r3, r1
 80066f0:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d018      	beq.n	800672c <HAL_OSPIM_Config+0x708>
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006702:	d813      	bhi.n	800672c <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	1e5a      	subs	r2, r3, #1
 800670a:	4b2e      	ldr	r3, [pc, #184]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	0c1b      	lsrs	r3, r3, #16
 8006710:	b2db      	uxtb	r3, r3
 8006712:	429a      	cmp	r2, r3
 8006714:	d90a      	bls.n	800672c <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8006716:	4b2b      	ldr	r3, [pc, #172]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	3b01      	subs	r3, #1
 8006724:	041b      	lsls	r3, r3, #16
 8006726:	4927      	ldr	r1, [pc, #156]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 8006728:	4313      	orrs	r3, r2
 800672a:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800672c:	4b25      	ldr	r3, [pc, #148]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 809a 	beq.w	800686e <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800673a:	4a22      	ldr	r2, [pc, #136]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3b01      	subs	r3, #1
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f023 0203 	bic.w	r2, r3, #3
 800674c:	491d      	ldr	r1, [pc, #116]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3b01      	subs	r3, #1
 8006754:	f042 0201 	orr.w	r2, r2, #1
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d011      	beq.n	800678a <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8006766:	4a17      	ldr	r2, [pc, #92]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	3b01      	subs	r3, #1
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006778:	4912      	ldr	r1, [pc, #72]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	3b01      	subs	r3, #1
 8006780:	f042 0210 	orr.w	r2, r2, #16
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	440b      	add	r3, r1
 8006788:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d018      	beq.n	80067c8 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006796:	4a0b      	ldr	r2, [pc, #44]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	3b01      	subs	r3, #1
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80067ac:	4905      	ldr	r1, [pc, #20]	; (80067c4 <HAL_OSPIM_Config+0x7a0>)
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	440b      	add	r3, r1
 80067c0:	605a      	str	r2, [r3, #4]
 80067c2:	e01b      	b.n	80067fc <HAL_OSPIM_Config+0x7d8>
 80067c4:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d015      	beq.n	80067fc <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80067d0:	4a8a      	ldr	r2, [pc, #552]	; (80069fc <HAL_OSPIM_Config+0x9d8>)
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80067e6:	4985      	ldr	r1, [pc, #532]	; (80069fc <HAL_OSPIM_Config+0x9d8>)
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	3b01      	subs	r3, #1
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	440b      	add	r3, r1
 80067fa:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d016      	beq.n	8006836 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006808:	4a7c      	ldr	r2, [pc, #496]	; (80069fc <HAL_OSPIM_Config+0x9d8>)
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	3b01      	subs	r3, #1
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800681e:	4977      	ldr	r1, [pc, #476]	; (80069fc <HAL_OSPIM_Config+0x9d8>)
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	3b01      	subs	r3, #1
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	440b      	add	r3, r1
 8006832:	605a      	str	r2, [r3, #4]
 8006834:	e0c3      	b.n	80069be <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 80bf 	beq.w	80069be <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006840:	4a6e      	ldr	r2, [pc, #440]	; (80069fc <HAL_OSPIM_Config+0x9d8>)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	3b01      	subs	r3, #1
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006856:	4969      	ldr	r1, [pc, #420]	; (80069fc <HAL_OSPIM_Config+0x9d8>)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	3b01      	subs	r3, #1
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	440b      	add	r3, r1
 800686a:	605a      	str	r2, [r3, #4]
 800686c:	e0a7      	b.n	80069be <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800686e:	4a63      	ldr	r2, [pc, #396]	; (80069fc <HAL_OSPIM_Config+0x9d8>)
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3b01      	subs	r3, #1
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f023 0203 	bic.w	r2, r3, #3
 8006880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	431a      	orrs	r2, r3
 8006886:	495d      	ldr	r1, [pc, #372]	; (80069fc <HAL_OSPIM_Config+0x9d8>)
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3b01      	subs	r3, #1
 800688e:	f042 0201 	orr.w	r2, r2, #1
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	440b      	add	r3, r1
 8006896:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d014      	beq.n	80068ca <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80068a0:	4a56      	ldr	r2, [pc, #344]	; (80069fc <HAL_OSPIM_Config+0x9d8>)
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80068b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b4:	015b      	lsls	r3, r3, #5
 80068b6:	431a      	orrs	r2, r3
 80068b8:	4950      	ldr	r1, [pc, #320]	; (80069fc <HAL_OSPIM_Config+0x9d8>)
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	3b01      	subs	r3, #1
 80068c0:	f042 0210 	orr.w	r2, r2, #16
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d019      	beq.n	800690a <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80068d6:	4a49      	ldr	r2, [pc, #292]	; (80069fc <HAL_OSPIM_Config+0x9d8>)
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	3b01      	subs	r3, #1
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80068ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ee:	049b      	lsls	r3, r3, #18
 80068f0:	431a      	orrs	r2, r3
 80068f2:	4942      	ldr	r1, [pc, #264]	; (80069fc <HAL_OSPIM_Config+0x9d8>)
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	3b01      	subs	r3, #1
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	440b      	add	r3, r1
 8006906:	605a      	str	r2, [r3, #4]
 8006908:	e01c      	b.n	8006944 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d018      	beq.n	8006944 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006912:	4a3a      	ldr	r2, [pc, #232]	; (80069fc <HAL_OSPIM_Config+0x9d8>)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	3b01      	subs	r3, #1
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800692a:	069b      	lsls	r3, r3, #26
 800692c:	431a      	orrs	r2, r3
 800692e:	4933      	ldr	r1, [pc, #204]	; (80069fc <HAL_OSPIM_Config+0x9d8>)
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	3b01      	subs	r3, #1
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	440b      	add	r3, r1
 8006942:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d019      	beq.n	8006984 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006950:	4a2a      	ldr	r2, [pc, #168]	; (80069fc <HAL_OSPIM_Config+0x9d8>)
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	3b01      	subs	r3, #1
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006968:	049b      	lsls	r3, r3, #18
 800696a:	431a      	orrs	r2, r3
 800696c:	4923      	ldr	r1, [pc, #140]	; (80069fc <HAL_OSPIM_Config+0x9d8>)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	3b01      	subs	r3, #1
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	440b      	add	r3, r1
 8006980:	605a      	str	r2, [r3, #4]
 8006982:	e01c      	b.n	80069be <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d018      	beq.n	80069be <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800698c:	4a1b      	ldr	r2, [pc, #108]	; (80069fc <HAL_OSPIM_Config+0x9d8>)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	3b01      	subs	r3, #1
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80069a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069a4:	069b      	lsls	r3, r3, #26
 80069a6:	431a      	orrs	r2, r3
 80069a8:	4914      	ldr	r1, [pc, #80]	; (80069fc <HAL_OSPIM_Config+0x9d8>)
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	440b      	add	r3, r1
 80069bc:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80069be:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d005      	beq.n	80069d6 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80069ca:	4b0d      	ldr	r3, [pc, #52]	; (8006a00 <HAL_OSPIM_Config+0x9dc>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a0c      	ldr	r2, [pc, #48]	; (8006a00 <HAL_OSPIM_Config+0x9dc>)
 80069d0:	f043 0301 	orr.w	r3, r3, #1
 80069d4:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80069d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d005      	beq.n	80069ee <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80069e2:	4b08      	ldr	r3, [pc, #32]	; (8006a04 <HAL_OSPIM_Config+0x9e0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a07      	ldr	r2, [pc, #28]	; (8006a04 <HAL_OSPIM_Config+0x9e0>)
 80069e8:	f043 0301 	orr.w	r3, r3, #1
 80069ec:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80069ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3750      	adds	r7, #80	; 0x50
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	420c4000 	.word	0x420c4000
 8006a00:	420d1400 	.word	0x420d1400
 8006a04:	420d2400 	.word	0x420d2400

08006a08 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	603b      	str	r3, [r7, #0]
 8006a14:	4613      	mov	r3, r2
 8006a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006a18:	e022      	b.n	8006a60 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d01e      	beq.n	8006a60 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a22:	f7fc fb67 	bl	80030f4 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d302      	bcc.n	8006a38 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d113      	bne.n	8006a60 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6a1a      	ldr	r2, [r3, #32]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	401a      	ands	r2, r3
 8006a42:	79fb      	ldrb	r3, [r7, #7]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d00b      	beq.n	8006a60 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a4e:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a54:	f043 0201 	orr.w	r2, r3, #1
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e00e      	b.n	8006a7e <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6a1a      	ldr	r2, [r3, #32]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	bf14      	ite	ne
 8006a6e:	2301      	movne	r3, #1
 8006a70:	2300      	moveq	r3, #0
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	79fb      	ldrb	r3, [r7, #7]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d1ce      	bne.n	8006a1a <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
	...

08006a88 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	4603      	mov	r3, r0
 8006a90:	6039      	str	r1, [r7, #0]
 8006a92:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8006a9c:	79fb      	ldrb	r3, [r7, #7]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d005      	beq.n	8006aae <OSPIM_GetConfig+0x26>
 8006aa2:	79fb      	ldrb	r3, [r7, #7]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d802      	bhi.n	8006aae <OSPIM_GetConfig+0x26>
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d102      	bne.n	8006ab4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	75fb      	strb	r3, [r7, #23]
 8006ab2:	e098      	b.n	8006be6 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2200      	movs	r2, #0
 8006abe:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8006ad2:	79fb      	ldrb	r3, [r7, #7]
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d10b      	bne.n	8006af0 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8006ad8:	4b46      	ldr	r3, [pc, #280]	; (8006bf4 <OSPIM_GetConfig+0x16c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8006ae4:	4b44      	ldr	r3, [pc, #272]	; (8006bf8 <OSPIM_GetConfig+0x170>)
 8006ae6:	613b      	str	r3, [r7, #16]
 8006ae8:	e002      	b.n	8006af0 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8006aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aee:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006af0:	2300      	movs	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	e074      	b.n	8006be0 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8006af6:	4a3f      	ldr	r2, [pc, #252]	; (8006bf4 <OSPIM_GetConfig+0x16c>)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00a      	beq.n	8006b22 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	4053      	eors	r3, r2
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d103      	bne.n	8006b22 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f003 0310 	and.w	r3, r3, #16
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00a      	beq.n	8006b42 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	4053      	eors	r3, r2
 8006b32:	f003 0320 	and.w	r3, r3, #32
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d103      	bne.n	8006b42 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	4053      	eors	r3, r2
 8006b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d103      	bne.n	8006b62 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d018      	beq.n	8006b9e <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	4053      	eors	r3, r2
 8006b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d111      	bne.n	8006b9e <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d106      	bne.n	8006b92 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3301      	adds	r3, #1
 8006b88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	60da      	str	r2, [r3, #12]
 8006b90:	e005      	b.n	8006b9e <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3301      	adds	r3, #1
 8006b96:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d018      	beq.n	8006bda <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	4053      	eors	r3, r2
 8006bae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d111      	bne.n	8006bda <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d106      	bne.n	8006bce <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	611a      	str	r2, [r3, #16]
 8006bcc:	e005      	b.n	8006bda <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d987      	bls.n	8006af6 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8006be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	371c      	adds	r7, #28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	420c4000 	.word	0x420c4000
 8006bf8:	04040222 	.word	0x04040222

08006bfc <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f042 0202 	orr.w	r2, r2, #2
 8006c18:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2208      	movs	r2, #8
 8006c1e:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a15      	ldr	r2, [pc, #84]	; (8006c7c <HAL_OSPI_DLYB_SetConfig+0x80>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d109      	bne.n	8006c3e <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8006c2a:	4815      	ldr	r0, [pc, #84]	; (8006c80 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8006c2c:	f7ff f86a 	bl	8005d04 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	4813      	ldr	r0, [pc, #76]	; (8006c80 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8006c34:	f007 fb00 	bl	800e238 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	73fb      	strb	r3, [r7, #15]
 8006c3c:	e00d      	b.n	8006c5a <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a10      	ldr	r2, [pc, #64]	; (8006c84 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d108      	bne.n	8006c5a <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8006c48:	480f      	ldr	r0, [pc, #60]	; (8006c88 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8006c4a:	f7ff f85b 	bl	8005d04 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	480d      	ldr	r0, [pc, #52]	; (8006c88 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8006c52:	f007 faf1 	bl	800e238 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8006c56:	2300      	movs	r3, #0
 8006c58:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7ff f95d 	bl	8005f1a <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0202 	bic.w	r2, r2, #2
 8006c6e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	420d1400 	.word	0x420d1400
 8006c80:	420cf000 	.word	0x420cf000
 8006c84:	420d2400 	.word	0x420d2400
 8006c88:	420cf400 	.word	0x420cf400

08006c8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c8e:	b08f      	sub	sp, #60	; 0x3c
 8006c90:	af0a      	add	r7, sp, #40	; 0x28
 8006c92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e10a      	b.n	8006eb4 <HAL_PCD_Init+0x228>

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d106      	bne.n	8006cb8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7fc f820 	bl	8002cf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2203      	movs	r2, #3
 8006cbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f007 fff3 	bl	800ecb0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	603b      	str	r3, [r7, #0]
 8006cd0:	687e      	ldr	r6, [r7, #4]
 8006cd2:	466d      	mov	r5, sp
 8006cd4:	f106 0410 	add.w	r4, r6, #16
 8006cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ce0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ce4:	e885 0003 	stmia.w	r5, {r0, r1}
 8006ce8:	1d33      	adds	r3, r6, #4
 8006cea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cec:	6838      	ldr	r0, [r7, #0]
 8006cee:	f007 ffb1 	bl	800ec54 <USB_CoreInit>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d005      	beq.n	8006d04 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e0d7      	b.n	8006eb4 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2100      	movs	r1, #0
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f007 ffe1 	bl	800ecd2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d10:	2300      	movs	r3, #0
 8006d12:	73fb      	strb	r3, [r7, #15]
 8006d14:	e04a      	b.n	8006dac <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006d16:	7bfa      	ldrb	r2, [r7, #15]
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	00db      	lsls	r3, r3, #3
 8006d1e:	4413      	add	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	440b      	add	r3, r1
 8006d24:	333d      	adds	r3, #61	; 0x3d
 8006d26:	2201      	movs	r2, #1
 8006d28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006d2a:	7bfa      	ldrb	r2, [r7, #15]
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	00db      	lsls	r3, r3, #3
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	333c      	adds	r3, #60	; 0x3c
 8006d3a:	7bfa      	ldrb	r2, [r7, #15]
 8006d3c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006d3e:	7bfa      	ldrb	r2, [r7, #15]
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	b298      	uxth	r0, r3
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	4613      	mov	r3, r2
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	440b      	add	r3, r1
 8006d50:	3356      	adds	r3, #86	; 0x56
 8006d52:	4602      	mov	r2, r0
 8006d54:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006d56:	7bfa      	ldrb	r2, [r7, #15]
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	4413      	add	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	440b      	add	r3, r1
 8006d64:	3340      	adds	r3, #64	; 0x40
 8006d66:	2200      	movs	r2, #0
 8006d68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006d6a:	7bfa      	ldrb	r2, [r7, #15]
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	00db      	lsls	r3, r3, #3
 8006d72:	4413      	add	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	440b      	add	r3, r1
 8006d78:	3344      	adds	r3, #68	; 0x44
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006d7e:	7bfa      	ldrb	r2, [r7, #15]
 8006d80:	6879      	ldr	r1, [r7, #4]
 8006d82:	4613      	mov	r3, r2
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	440b      	add	r3, r1
 8006d8c:	3348      	adds	r3, #72	; 0x48
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006d92:	7bfa      	ldrb	r2, [r7, #15]
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	4613      	mov	r3, r2
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	334c      	adds	r3, #76	; 0x4c
 8006da2:	2200      	movs	r2, #0
 8006da4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
 8006da8:	3301      	adds	r3, #1
 8006daa:	73fb      	strb	r3, [r7, #15]
 8006dac:	7bfa      	ldrb	r2, [r7, #15]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d3af      	bcc.n	8006d16 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]
 8006dba:	e044      	b.n	8006e46 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006dbc:	7bfa      	ldrb	r2, [r7, #15]
 8006dbe:	6879      	ldr	r1, [r7, #4]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	440b      	add	r3, r1
 8006dca:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006dce:	2200      	movs	r2, #0
 8006dd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006dd2:	7bfa      	ldrb	r2, [r7, #15]
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	4413      	add	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	440b      	add	r3, r1
 8006de0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006de4:	7bfa      	ldrb	r2, [r7, #15]
 8006de6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006de8:	7bfa      	ldrb	r2, [r7, #15]
 8006dea:	6879      	ldr	r1, [r7, #4]
 8006dec:	4613      	mov	r3, r2
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006dfe:	7bfa      	ldrb	r2, [r7, #15]
 8006e00:	6879      	ldr	r1, [r7, #4]
 8006e02:	4613      	mov	r3, r2
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	4413      	add	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	440b      	add	r3, r1
 8006e0c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006e14:	7bfa      	ldrb	r2, [r7, #15]
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	440b      	add	r3, r1
 8006e22:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006e26:	2200      	movs	r2, #0
 8006e28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006e2a:	7bfa      	ldrb	r2, [r7, #15]
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	4413      	add	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	440b      	add	r3, r1
 8006e38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	3301      	adds	r3, #1
 8006e44:	73fb      	strb	r3, [r7, #15]
 8006e46:	7bfa      	ldrb	r2, [r7, #15]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d3b5      	bcc.n	8006dbc <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	603b      	str	r3, [r7, #0]
 8006e56:	687e      	ldr	r6, [r7, #4]
 8006e58:	466d      	mov	r5, sp
 8006e5a:	f106 0410 	add.w	r4, r6, #16
 8006e5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006e6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8006e6e:	1d33      	adds	r3, r6, #4
 8006e70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e72:	6838      	ldr	r0, [r7, #0]
 8006e74:	f007 ff7a 	bl	800ed6c <USB_DevInit>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d005      	beq.n	8006e8a <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2202      	movs	r2, #2
 8006e82:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e014      	b.n	8006eb4 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d102      	bne.n	8006ea8 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f80a 	bl	8006ebc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f008 f940 	bl	800f132 <USB_DevDisconnect>

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ebc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eee:	f043 0303 	orr.w	r3, r3, #3
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006f04:	b480      	push	{r7}
 8006f06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006f08:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0c:	4a04      	ldr	r2, [pc, #16]	; (8006f20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f0e:	f043 0301 	orr.w	r3, r3, #1
 8006f12:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006f14:	bf00      	nop
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	46020800 	.word	0x46020800

08006f24 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8006f2c:	4b39      	ldr	r3, [pc, #228]	; (8007014 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f34:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d10b      	bne.n	8006f56 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f44:	d905      	bls.n	8006f52 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006f46:	4b33      	ldr	r3, [pc, #204]	; (8007014 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	4a32      	ldr	r2, [pc, #200]	; (8007014 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f50:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	e057      	b.n	8007006 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f5c:	d90a      	bls.n	8006f74 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8006f5e:	4b2d      	ldr	r3, [pc, #180]	; (8007014 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	4a2a      	ldr	r2, [pc, #168]	; (8007014 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f70:	60d3      	str	r3, [r2, #12]
 8006f72:	e007      	b.n	8006f84 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8006f74:	4b27      	ldr	r3, [pc, #156]	; (8007014 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006f7c:	4925      	ldr	r1, [pc, #148]	; (8007014 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006f84:	4b24      	ldr	r3, [pc, #144]	; (8007018 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a24      	ldr	r2, [pc, #144]	; (800701c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8e:	099b      	lsrs	r3, r3, #6
 8006f90:	2232      	movs	r2, #50	; 0x32
 8006f92:	fb02 f303 	mul.w	r3, r2, r3
 8006f96:	4a21      	ldr	r2, [pc, #132]	; (800701c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006f98:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9c:	099b      	lsrs	r3, r3, #6
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006fa2:	e002      	b.n	8006faa <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006faa:	4b1a      	ldr	r3, [pc, #104]	; (8007014 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d102      	bne.n	8006fbc <HAL_PWREx_ControlVoltageScaling+0x98>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1f3      	bne.n	8006fa4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d01b      	beq.n	8006ffa <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006fc2:	4b15      	ldr	r3, [pc, #84]	; (8007018 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a15      	ldr	r2, [pc, #84]	; (800701c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fcc:	099b      	lsrs	r3, r3, #6
 8006fce:	2232      	movs	r2, #50	; 0x32
 8006fd0:	fb02 f303 	mul.w	r3, r2, r3
 8006fd4:	4a11      	ldr	r2, [pc, #68]	; (800701c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fda:	099b      	lsrs	r3, r3, #6
 8006fdc:	3301      	adds	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006fe0:	e002      	b.n	8006fe8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006fe8:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d102      	bne.n	8006ffa <HAL_PWREx_ControlVoltageScaling+0xd6>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1f3      	bne.n	8006fe2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e000      	b.n	8007006 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	46020800 	.word	0x46020800
 8007018:	20000000 	.word	0x20000000
 800701c:	10624dd3 	.word	0x10624dd3

08007020 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007020:	b480      	push	{r7}
 8007022:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8007024:	4b04      	ldr	r3, [pc, #16]	; (8007038 <HAL_PWREx_GetVoltageRange+0x18>)
 8007026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007028:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800702c:	4618      	mov	r0, r3
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	46020800 	.word	0x46020800

0800703c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007044:	4b22      	ldr	r3, [pc, #136]	; (80070d0 <HAL_PWREx_ConfigSupply+0x94>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a22      	ldr	r2, [pc, #136]	; (80070d4 <HAL_PWREx_ConfigSupply+0x98>)
 800704a:	fba2 2303 	umull	r2, r3, r2, r3
 800704e:	099b      	lsrs	r3, r3, #6
 8007050:	2232      	movs	r2, #50	; 0x32
 8007052:	fb02 f303 	mul.w	r3, r2, r3
 8007056:	4a1f      	ldr	r2, [pc, #124]	; (80070d4 <HAL_PWREx_ConfigSupply+0x98>)
 8007058:	fba2 2303 	umull	r2, r3, r2, r3
 800705c:	099b      	lsrs	r3, r3, #6
 800705e:	3301      	adds	r3, #1
 8007060:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d113      	bne.n	8007090 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007068:	4b1b      	ldr	r3, [pc, #108]	; (80070d8 <HAL_PWREx_ConfigSupply+0x9c>)
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	4a1a      	ldr	r2, [pc, #104]	; (80070d8 <HAL_PWREx_ConfigSupply+0x9c>)
 800706e:	f023 0302 	bic.w	r3, r3, #2
 8007072:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007074:	e002      	b.n	800707c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3b01      	subs	r3, #1
 800707a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800707c:	4b16      	ldr	r3, [pc, #88]	; (80070d8 <HAL_PWREx_ConfigSupply+0x9c>)
 800707e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007080:	f003 0302 	and.w	r3, r3, #2
 8007084:	2b02      	cmp	r3, #2
 8007086:	d116      	bne.n	80070b6 <HAL_PWREx_ConfigSupply+0x7a>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1f3      	bne.n	8007076 <HAL_PWREx_ConfigSupply+0x3a>
 800708e:	e012      	b.n	80070b6 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007090:	4b11      	ldr	r3, [pc, #68]	; (80070d8 <HAL_PWREx_ConfigSupply+0x9c>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	4a10      	ldr	r2, [pc, #64]	; (80070d8 <HAL_PWREx_ConfigSupply+0x9c>)
 8007096:	f043 0302 	orr.w	r3, r3, #2
 800709a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800709c:	e002      	b.n	80070a4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3b01      	subs	r3, #1
 80070a2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80070a4:	4b0c      	ldr	r3, [pc, #48]	; (80070d8 <HAL_PWREx_ConfigSupply+0x9c>)
 80070a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a8:	f003 0302 	and.w	r3, r3, #2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d102      	bne.n	80070b6 <HAL_PWREx_ConfigSupply+0x7a>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1f3      	bne.n	800709e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e000      	b.n	80070c2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	20000000 	.word	0x20000000
 80070d4:	10624dd3 	.word	0x10624dd3
 80070d8:	46020800 	.word	0x46020800

080070dc <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80070dc:	b480      	push	{r7}
 80070de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80070e0:	4b05      	ldr	r3, [pc, #20]	; (80070f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	4a04      	ldr	r2, [pc, #16]	; (80070f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80070e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ea:	6113      	str	r3, [r2, #16]
}
 80070ec:	bf00      	nop
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	46020800 	.word	0x46020800

080070fc <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8007100:	4b05      	ldr	r3, [pc, #20]	; (8007118 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	4a04      	ldr	r2, [pc, #16]	; (8007118 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007106:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800710a:	6113      	str	r3, [r2, #16]
}
 800710c:	bf00      	nop
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	46020800 	.word	0x46020800

0800711c <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 8007122:	f7ff ff7d 	bl	8007020 <HAL_PWREx_GetVoltageRange>
 8007126:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800712e:	d003      	beq.n	8007138 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007136:	d107      	bne.n	8007148 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8007138:	4b06      	ldr	r3, [pc, #24]	; (8007154 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	4a05      	ldr	r2, [pc, #20]	; (8007154 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800713e:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 8007142:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
 8007146:	e000      	b.n	800714a <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	46020800 	.word	0x46020800

08007158 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08e      	sub	sp, #56	; 0x38
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8007160:	2300      	movs	r3, #0
 8007162:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d102      	bne.n	8007172 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	f000 bec8 	b.w	8007f02 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007172:	4b99      	ldr	r3, [pc, #612]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	f003 030c 	and.w	r3, r3, #12
 800717a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800717c:	4b96      	ldr	r3, [pc, #600]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 800717e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007180:	f003 0303 	and.w	r3, r3, #3
 8007184:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0310 	and.w	r3, r3, #16
 800718e:	2b00      	cmp	r3, #0
 8007190:	f000 816c 	beq.w	800746c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	2b00      	cmp	r3, #0
 8007198:	d007      	beq.n	80071aa <HAL_RCC_OscConfig+0x52>
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	2b0c      	cmp	r3, #12
 800719e:	f040 80de 	bne.w	800735e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80071a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	f040 80da 	bne.w	800735e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d102      	bne.n	80071b8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	f000 bea5 	b.w	8007f02 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071bc:	4b86      	ldr	r3, [pc, #536]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d004      	beq.n	80071d2 <HAL_RCC_OscConfig+0x7a>
 80071c8:	4b83      	ldr	r3, [pc, #524]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80071d0:	e005      	b.n	80071de <HAL_RCC_OscConfig+0x86>
 80071d2:	4b81      	ldr	r3, [pc, #516]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 80071d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071d8:	041b      	lsls	r3, r3, #16
 80071da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80071de:	4293      	cmp	r3, r2
 80071e0:	d255      	bcs.n	800728e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	4618      	mov	r0, r3
 80071ee:	f001 fa3d 	bl	800866c <RCC_SetFlashLatencyFromMSIRange>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	f000 be82 	b.w	8007f02 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80071fe:	4b76      	ldr	r3, [pc, #472]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	4a75      	ldr	r2, [pc, #468]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 8007204:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007208:	6093      	str	r3, [r2, #8]
 800720a:	4b73      	ldr	r3, [pc, #460]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	4970      	ldr	r1, [pc, #448]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 8007218:	4313      	orrs	r3, r2
 800721a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007224:	d309      	bcc.n	800723a <HAL_RCC_OscConfig+0xe2>
 8007226:	4b6c      	ldr	r3, [pc, #432]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f023 021f 	bic.w	r2, r3, #31
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	4969      	ldr	r1, [pc, #420]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 8007234:	4313      	orrs	r3, r2
 8007236:	60cb      	str	r3, [r1, #12]
 8007238:	e07e      	b.n	8007338 <HAL_RCC_OscConfig+0x1e0>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	2b00      	cmp	r3, #0
 8007240:	da0a      	bge.n	8007258 <HAL_RCC_OscConfig+0x100>
 8007242:	4b65      	ldr	r3, [pc, #404]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	015b      	lsls	r3, r3, #5
 8007250:	4961      	ldr	r1, [pc, #388]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 8007252:	4313      	orrs	r3, r2
 8007254:	60cb      	str	r3, [r1, #12]
 8007256:	e06f      	b.n	8007338 <HAL_RCC_OscConfig+0x1e0>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007260:	d30a      	bcc.n	8007278 <HAL_RCC_OscConfig+0x120>
 8007262:	4b5d      	ldr	r3, [pc, #372]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	029b      	lsls	r3, r3, #10
 8007270:	4959      	ldr	r1, [pc, #356]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 8007272:	4313      	orrs	r3, r2
 8007274:	60cb      	str	r3, [r1, #12]
 8007276:	e05f      	b.n	8007338 <HAL_RCC_OscConfig+0x1e0>
 8007278:	4b57      	ldr	r3, [pc, #348]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	03db      	lsls	r3, r3, #15
 8007286:	4954      	ldr	r1, [pc, #336]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 8007288:	4313      	orrs	r3, r2
 800728a:	60cb      	str	r3, [r1, #12]
 800728c:	e054      	b.n	8007338 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800728e:	4b52      	ldr	r3, [pc, #328]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	4a51      	ldr	r2, [pc, #324]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 8007294:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007298:	6093      	str	r3, [r2, #8]
 800729a:	4b4f      	ldr	r3, [pc, #316]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	494c      	ldr	r1, [pc, #304]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80072b4:	d309      	bcc.n	80072ca <HAL_RCC_OscConfig+0x172>
 80072b6:	4b48      	ldr	r3, [pc, #288]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	f023 021f 	bic.w	r2, r3, #31
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	4945      	ldr	r1, [pc, #276]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60cb      	str	r3, [r1, #12]
 80072c8:	e028      	b.n	800731c <HAL_RCC_OscConfig+0x1c4>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	da0a      	bge.n	80072e8 <HAL_RCC_OscConfig+0x190>
 80072d2:	4b41      	ldr	r3, [pc, #260]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	015b      	lsls	r3, r3, #5
 80072e0:	493d      	ldr	r1, [pc, #244]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60cb      	str	r3, [r1, #12]
 80072e6:	e019      	b.n	800731c <HAL_RCC_OscConfig+0x1c4>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f0:	d30a      	bcc.n	8007308 <HAL_RCC_OscConfig+0x1b0>
 80072f2:	4b39      	ldr	r3, [pc, #228]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	029b      	lsls	r3, r3, #10
 8007300:	4935      	ldr	r1, [pc, #212]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 8007302:	4313      	orrs	r3, r2
 8007304:	60cb      	str	r3, [r1, #12]
 8007306:	e009      	b.n	800731c <HAL_RCC_OscConfig+0x1c4>
 8007308:	4b33      	ldr	r3, [pc, #204]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	03db      	lsls	r3, r3, #15
 8007316:	4930      	ldr	r1, [pc, #192]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 8007318:	4313      	orrs	r3, r2
 800731a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800731c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10a      	bne.n	8007338 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	4618      	mov	r0, r3
 8007328:	f001 f9a0 	bl	800866c <RCC_SetFlashLatencyFromMSIRange>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	f000 bde5 	b.w	8007f02 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8007338:	f001 f8de 	bl	80084f8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800733c:	4b27      	ldr	r3, [pc, #156]	; (80073dc <HAL_RCC_OscConfig+0x284>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4618      	mov	r0, r3
 8007342:	f7fb fd4f 	bl	8002de4 <HAL_InitTick>
 8007346:	4603      	mov	r3, r0
 8007348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800734c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 808a 	beq.w	800746a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8007356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800735a:	f000 bdd2 	b.w	8007f02 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d066      	beq.n	8007434 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8007366:	4b1c      	ldr	r3, [pc, #112]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a1b      	ldr	r2, [pc, #108]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 800736c:	f043 0301 	orr.w	r3, r3, #1
 8007370:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007372:	f7fb febf 	bl	80030f4 <HAL_GetTick>
 8007376:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007378:	e009      	b.n	800738e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800737a:	f7fb febb 	bl	80030f4 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d902      	bls.n	800738e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	f000 bdba 	b.w	8007f02 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800738e:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0ef      	beq.n	800737a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800739a:	4b0f      	ldr	r3, [pc, #60]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	4a0e      	ldr	r2, [pc, #56]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 80073a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80073a4:	6093      	str	r3, [r2, #8]
 80073a6:	4b0c      	ldr	r3, [pc, #48]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	4909      	ldr	r1, [pc, #36]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073bc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80073c0:	d30e      	bcc.n	80073e0 <HAL_RCC_OscConfig+0x288>
 80073c2:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	f023 021f 	bic.w	r2, r3, #31
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	4902      	ldr	r1, [pc, #8]	; (80073d8 <HAL_RCC_OscConfig+0x280>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	60cb      	str	r3, [r1, #12]
 80073d4:	e04a      	b.n	800746c <HAL_RCC_OscConfig+0x314>
 80073d6:	bf00      	nop
 80073d8:	46020c00 	.word	0x46020c00
 80073dc:	20000004 	.word	0x20000004
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	da0a      	bge.n	80073fe <HAL_RCC_OscConfig+0x2a6>
 80073e8:	4b98      	ldr	r3, [pc, #608]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	015b      	lsls	r3, r3, #5
 80073f6:	4995      	ldr	r1, [pc, #596]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	60cb      	str	r3, [r1, #12]
 80073fc:	e036      	b.n	800746c <HAL_RCC_OscConfig+0x314>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007406:	d30a      	bcc.n	800741e <HAL_RCC_OscConfig+0x2c6>
 8007408:	4b90      	ldr	r3, [pc, #576]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a1b      	ldr	r3, [r3, #32]
 8007414:	029b      	lsls	r3, r3, #10
 8007416:	498d      	ldr	r1, [pc, #564]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 8007418:	4313      	orrs	r3, r2
 800741a:	60cb      	str	r3, [r1, #12]
 800741c:	e026      	b.n	800746c <HAL_RCC_OscConfig+0x314>
 800741e:	4b8b      	ldr	r3, [pc, #556]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	03db      	lsls	r3, r3, #15
 800742c:	4987      	ldr	r1, [pc, #540]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 800742e:	4313      	orrs	r3, r2
 8007430:	60cb      	str	r3, [r1, #12]
 8007432:	e01b      	b.n	800746c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8007434:	4b85      	ldr	r3, [pc, #532]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a84      	ldr	r2, [pc, #528]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 800743a:	f023 0301 	bic.w	r3, r3, #1
 800743e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007440:	f7fb fe58 	bl	80030f4 <HAL_GetTick>
 8007444:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007446:	e009      	b.n	800745c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007448:	f7fb fe54 	bl	80030f4 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b02      	cmp	r3, #2
 8007454:	d902      	bls.n	800745c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	f000 bd53 	b.w	8007f02 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800745c:	4b7b      	ldr	r3, [pc, #492]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1ef      	bne.n	8007448 <HAL_RCC_OscConfig+0x2f0>
 8007468:	e000      	b.n	800746c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800746a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 808b 	beq.w	8007590 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	2b08      	cmp	r3, #8
 800747e:	d005      	beq.n	800748c <HAL_RCC_OscConfig+0x334>
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	2b0c      	cmp	r3, #12
 8007484:	d109      	bne.n	800749a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007488:	2b03      	cmp	r3, #3
 800748a:	d106      	bne.n	800749a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d17d      	bne.n	8007590 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	f000 bd34 	b.w	8007f02 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a2:	d106      	bne.n	80074b2 <HAL_RCC_OscConfig+0x35a>
 80074a4:	4b69      	ldr	r3, [pc, #420]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a68      	ldr	r2, [pc, #416]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 80074aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	e041      	b.n	8007536 <HAL_RCC_OscConfig+0x3de>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074ba:	d112      	bne.n	80074e2 <HAL_RCC_OscConfig+0x38a>
 80074bc:	4b63      	ldr	r3, [pc, #396]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a62      	ldr	r2, [pc, #392]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 80074c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	4b60      	ldr	r3, [pc, #384]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a5f      	ldr	r2, [pc, #380]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 80074ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80074d2:	6013      	str	r3, [r2, #0]
 80074d4:	4b5d      	ldr	r3, [pc, #372]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a5c      	ldr	r2, [pc, #368]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 80074da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	e029      	b.n	8007536 <HAL_RCC_OscConfig+0x3de>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80074ea:	d112      	bne.n	8007512 <HAL_RCC_OscConfig+0x3ba>
 80074ec:	4b57      	ldr	r3, [pc, #348]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a56      	ldr	r2, [pc, #344]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 80074f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	4b54      	ldr	r3, [pc, #336]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a53      	ldr	r2, [pc, #332]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 80074fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007502:	6013      	str	r3, [r2, #0]
 8007504:	4b51      	ldr	r3, [pc, #324]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a50      	ldr	r2, [pc, #320]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 800750a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	e011      	b.n	8007536 <HAL_RCC_OscConfig+0x3de>
 8007512:	4b4e      	ldr	r3, [pc, #312]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a4d      	ldr	r2, [pc, #308]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 8007518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	4b4b      	ldr	r3, [pc, #300]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a4a      	ldr	r2, [pc, #296]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 8007524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	4b48      	ldr	r3, [pc, #288]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a47      	ldr	r2, [pc, #284]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 8007530:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007534:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d014      	beq.n	8007568 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800753e:	f7fb fdd9 	bl	80030f4 <HAL_GetTick>
 8007542:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007544:	e009      	b.n	800755a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007546:	f7fb fdd5 	bl	80030f4 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	2b64      	cmp	r3, #100	; 0x64
 8007552:	d902      	bls.n	800755a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	f000 bcd4 	b.w	8007f02 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800755a:	4b3c      	ldr	r3, [pc, #240]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d0ef      	beq.n	8007546 <HAL_RCC_OscConfig+0x3ee>
 8007566:	e013      	b.n	8007590 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8007568:	f7fb fdc4 	bl	80030f4 <HAL_GetTick>
 800756c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800756e:	e009      	b.n	8007584 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007570:	f7fb fdc0 	bl	80030f4 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b64      	cmp	r3, #100	; 0x64
 800757c:	d902      	bls.n	8007584 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	f000 bcbf 	b.w	8007f02 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007584:	4b31      	ldr	r3, [pc, #196]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1ef      	bne.n	8007570 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0302 	and.w	r3, r3, #2
 8007598:	2b00      	cmp	r3, #0
 800759a:	d05f      	beq.n	800765c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d005      	beq.n	80075ae <HAL_RCC_OscConfig+0x456>
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	2b0c      	cmp	r3, #12
 80075a6:	d114      	bne.n	80075d2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80075a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d111      	bne.n	80075d2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d102      	bne.n	80075bc <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	f000 bca3 	b.w	8007f02 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80075bc:	4b23      	ldr	r3, [pc, #140]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	041b      	lsls	r3, r3, #16
 80075ca:	4920      	ldr	r1, [pc, #128]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80075d0:	e044      	b.n	800765c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d024      	beq.n	8007624 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80075da:	4b1c      	ldr	r3, [pc, #112]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a1b      	ldr	r2, [pc, #108]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 80075e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075e4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80075e6:	f7fb fd85 	bl	80030f4 <HAL_GetTick>
 80075ea:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075ec:	e009      	b.n	8007602 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075ee:	f7fb fd81 	bl	80030f4 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d902      	bls.n	8007602 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	f000 bc80 	b.w	8007f02 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007602:	4b12      	ldr	r3, [pc, #72]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800760a:	2b00      	cmp	r3, #0
 800760c:	d0ef      	beq.n	80075ee <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800760e:	4b0f      	ldr	r3, [pc, #60]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	041b      	lsls	r3, r3, #16
 800761c:	490b      	ldr	r1, [pc, #44]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 800761e:	4313      	orrs	r3, r2
 8007620:	610b      	str	r3, [r1, #16]
 8007622:	e01b      	b.n	800765c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8007624:	4b09      	ldr	r3, [pc, #36]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a08      	ldr	r2, [pc, #32]	; (800764c <HAL_RCC_OscConfig+0x4f4>)
 800762a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800762e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007630:	f7fb fd60 	bl	80030f4 <HAL_GetTick>
 8007634:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007636:	e00b      	b.n	8007650 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007638:	f7fb fd5c 	bl	80030f4 <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	2b02      	cmp	r3, #2
 8007644:	d904      	bls.n	8007650 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	f000 bc5b 	b.w	8007f02 <HAL_RCC_OscConfig+0xdaa>
 800764c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007650:	4baf      	ldr	r3, [pc, #700]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1ed      	bne.n	8007638 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 80c8 	beq.w	80077fa <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800766a:	2300      	movs	r3, #0
 800766c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007670:	4ba7      	ldr	r3, [pc, #668]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 8007672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007676:	f003 0304 	and.w	r3, r3, #4
 800767a:	2b00      	cmp	r3, #0
 800767c:	d111      	bne.n	80076a2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800767e:	4ba4      	ldr	r3, [pc, #656]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 8007680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007684:	4aa2      	ldr	r2, [pc, #648]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 8007686:	f043 0304 	orr.w	r3, r3, #4
 800768a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800768e:	4ba0      	ldr	r3, [pc, #640]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 8007690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007694:	f003 0304 	and.w	r3, r3, #4
 8007698:	617b      	str	r3, [r7, #20]
 800769a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800769c:	2301      	movs	r3, #1
 800769e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80076a2:	4b9c      	ldr	r3, [pc, #624]	; (8007914 <HAL_RCC_OscConfig+0x7bc>)
 80076a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d119      	bne.n	80076e2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80076ae:	4b99      	ldr	r3, [pc, #612]	; (8007914 <HAL_RCC_OscConfig+0x7bc>)
 80076b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b2:	4a98      	ldr	r2, [pc, #608]	; (8007914 <HAL_RCC_OscConfig+0x7bc>)
 80076b4:	f043 0301 	orr.w	r3, r3, #1
 80076b8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076ba:	f7fb fd1b 	bl	80030f4 <HAL_GetTick>
 80076be:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80076c0:	e009      	b.n	80076d6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076c2:	f7fb fd17 	bl	80030f4 <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d902      	bls.n	80076d6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	f000 bc16 	b.w	8007f02 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80076d6:	4b8f      	ldr	r3, [pc, #572]	; (8007914 <HAL_RCC_OscConfig+0x7bc>)
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0ef      	beq.n	80076c2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d05f      	beq.n	80077aa <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80076ea:	4b89      	ldr	r3, [pc, #548]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 80076ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076f0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	699a      	ldr	r2, [r3, #24]
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d037      	beq.n	8007770 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d006      	beq.n	8007718 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e3f4      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d01b      	beq.n	800775a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8007722:	4b7b      	ldr	r3, [pc, #492]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 8007724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007728:	4a79      	ldr	r2, [pc, #484]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 800772a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800772e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8007732:	f7fb fcdf 	bl	80030f4 <HAL_GetTick>
 8007736:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007738:	e008      	b.n	800774c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800773a:	f7fb fcdb 	bl	80030f4 <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	2b05      	cmp	r3, #5
 8007746:	d901      	bls.n	800774c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e3da      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800774c:	4b70      	ldr	r3, [pc, #448]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 800774e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007752:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1ef      	bne.n	800773a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800775a:	4b6d      	ldr	r3, [pc, #436]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 800775c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007760:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	4969      	ldr	r1, [pc, #420]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 800776a:	4313      	orrs	r3, r2
 800776c:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8007770:	4b67      	ldr	r3, [pc, #412]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 8007772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007776:	4a66      	ldr	r2, [pc, #408]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 8007778:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800777c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8007780:	f7fb fcb8 	bl	80030f4 <HAL_GetTick>
 8007784:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007786:	e008      	b.n	800779a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007788:	f7fb fcb4 	bl	80030f4 <HAL_GetTick>
 800778c:	4602      	mov	r2, r0
 800778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	2b05      	cmp	r3, #5
 8007794:	d901      	bls.n	800779a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e3b3      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800779a:	4b5d      	ldr	r3, [pc, #372]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 800779c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d0ef      	beq.n	8007788 <HAL_RCC_OscConfig+0x630>
 80077a8:	e01b      	b.n	80077e2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80077aa:	4b59      	ldr	r3, [pc, #356]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 80077ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077b0:	4a57      	ldr	r2, [pc, #348]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 80077b2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80077b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80077ba:	f7fb fc9b 	bl	80030f4 <HAL_GetTick>
 80077be:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80077c0:	e008      	b.n	80077d4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077c2:	f7fb fc97 	bl	80030f4 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	2b05      	cmp	r3, #5
 80077ce:	d901      	bls.n	80077d4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e396      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80077d4:	4b4e      	ldr	r3, [pc, #312]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 80077d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1ef      	bne.n	80077c2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80077e2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d107      	bne.n	80077fa <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077ea:	4b49      	ldr	r3, [pc, #292]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 80077ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077f0:	4a47      	ldr	r2, [pc, #284]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 80077f2:	f023 0304 	bic.w	r3, r3, #4
 80077f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0304 	and.w	r3, r3, #4
 8007802:	2b00      	cmp	r3, #0
 8007804:	f000 8111 	beq.w	8007a2a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8007808:	2300      	movs	r3, #0
 800780a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800780e:	4b40      	ldr	r3, [pc, #256]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 8007810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007814:	f003 0304 	and.w	r3, r3, #4
 8007818:	2b00      	cmp	r3, #0
 800781a:	d111      	bne.n	8007840 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800781c:	4b3c      	ldr	r3, [pc, #240]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 800781e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007822:	4a3b      	ldr	r2, [pc, #236]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 8007824:	f043 0304 	orr.w	r3, r3, #4
 8007828:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800782c:	4b38      	ldr	r3, [pc, #224]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 800782e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007832:	f003 0304 	and.w	r3, r3, #4
 8007836:	613b      	str	r3, [r7, #16]
 8007838:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800783a:	2301      	movs	r3, #1
 800783c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007840:	4b34      	ldr	r3, [pc, #208]	; (8007914 <HAL_RCC_OscConfig+0x7bc>)
 8007842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d118      	bne.n	800787e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800784c:	4b31      	ldr	r3, [pc, #196]	; (8007914 <HAL_RCC_OscConfig+0x7bc>)
 800784e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007850:	4a30      	ldr	r2, [pc, #192]	; (8007914 <HAL_RCC_OscConfig+0x7bc>)
 8007852:	f043 0301 	orr.w	r3, r3, #1
 8007856:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007858:	f7fb fc4c 	bl	80030f4 <HAL_GetTick>
 800785c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800785e:	e008      	b.n	8007872 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007860:	f7fb fc48 	bl	80030f4 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b02      	cmp	r3, #2
 800786c:	d901      	bls.n	8007872 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e347      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007872:	4b28      	ldr	r3, [pc, #160]	; (8007914 <HAL_RCC_OscConfig+0x7bc>)
 8007874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0f0      	beq.n	8007860 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	2b00      	cmp	r3, #0
 8007888:	d01f      	beq.n	80078ca <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f003 0304 	and.w	r3, r3, #4
 8007892:	2b00      	cmp	r3, #0
 8007894:	d010      	beq.n	80078b8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007896:	4b1e      	ldr	r3, [pc, #120]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 8007898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800789c:	4a1c      	ldr	r2, [pc, #112]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 800789e:	f043 0304 	orr.w	r3, r3, #4
 80078a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80078a6:	4b1a      	ldr	r3, [pc, #104]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 80078a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078ac:	4a18      	ldr	r2, [pc, #96]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 80078ae:	f043 0301 	orr.w	r3, r3, #1
 80078b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80078b6:	e018      	b.n	80078ea <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80078b8:	4b15      	ldr	r3, [pc, #84]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 80078ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078be:	4a14      	ldr	r2, [pc, #80]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 80078c0:	f043 0301 	orr.w	r3, r3, #1
 80078c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80078c8:	e00f      	b.n	80078ea <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80078ca:	4b11      	ldr	r3, [pc, #68]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 80078cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078d0:	4a0f      	ldr	r2, [pc, #60]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 80078d2:	f023 0301 	bic.w	r3, r3, #1
 80078d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80078da:	4b0d      	ldr	r3, [pc, #52]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 80078dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078e0:	4a0b      	ldr	r2, [pc, #44]	; (8007910 <HAL_RCC_OscConfig+0x7b8>)
 80078e2:	f023 0304 	bic.w	r3, r3, #4
 80078e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d057      	beq.n	80079a2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80078f2:	f7fb fbff 	bl	80030f4 <HAL_GetTick>
 80078f6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078f8:	e00e      	b.n	8007918 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078fa:	f7fb fbfb 	bl	80030f4 <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	f241 3288 	movw	r2, #5000	; 0x1388
 8007908:	4293      	cmp	r3, r2
 800790a:	d905      	bls.n	8007918 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e2f8      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
 8007910:	46020c00 	.word	0x46020c00
 8007914:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007918:	4b9c      	ldr	r3, [pc, #624]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 800791a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0e9      	beq.n	80078fa <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792e:	2b00      	cmp	r3, #0
 8007930:	d01b      	beq.n	800796a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007932:	4b96      	ldr	r3, [pc, #600]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007938:	4a94      	ldr	r2, [pc, #592]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 800793a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800793e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007942:	e00a      	b.n	800795a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007944:	f7fb fbd6 	bl	80030f4 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007952:	4293      	cmp	r3, r2
 8007954:	d901      	bls.n	800795a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e2d3      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800795a:	4b8c      	ldr	r3, [pc, #560]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 800795c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007964:	2b00      	cmp	r3, #0
 8007966:	d0ed      	beq.n	8007944 <HAL_RCC_OscConfig+0x7ec>
 8007968:	e053      	b.n	8007a12 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800796a:	4b88      	ldr	r3, [pc, #544]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 800796c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007970:	4a86      	ldr	r2, [pc, #536]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007976:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800797a:	e00a      	b.n	8007992 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800797c:	f7fb fbba 	bl	80030f4 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	f241 3288 	movw	r2, #5000	; 0x1388
 800798a:	4293      	cmp	r3, r2
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e2b7      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007992:	4b7e      	ldr	r3, [pc, #504]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1ed      	bne.n	800797c <HAL_RCC_OscConfig+0x824>
 80079a0:	e037      	b.n	8007a12 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80079a2:	f7fb fba7 	bl	80030f4 <HAL_GetTick>
 80079a6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80079a8:	e00a      	b.n	80079c0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079aa:	f7fb fba3 	bl	80030f4 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d901      	bls.n	80079c0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e2a0      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80079c0:	4b72      	ldr	r3, [pc, #456]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 80079c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1ed      	bne.n	80079aa <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80079ce:	4b6f      	ldr	r3, [pc, #444]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 80079d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01a      	beq.n	8007a12 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80079dc:	4b6b      	ldr	r3, [pc, #428]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 80079de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079e2:	4a6a      	ldr	r2, [pc, #424]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 80079e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80079ec:	e00a      	b.n	8007a04 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079ee:	f7fb fb81 	bl	80030f4 <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d901      	bls.n	8007a04 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e27e      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007a04:	4b61      	ldr	r3, [pc, #388]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1ed      	bne.n	80079ee <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a12:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d107      	bne.n	8007a2a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a1a:	4b5c      	ldr	r3, [pc, #368]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a20:	4a5a      	ldr	r2, [pc, #360]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007a22:	f023 0304 	bic.w	r3, r3, #4
 8007a26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d036      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d019      	beq.n	8007a72 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8007a3e:	4b53      	ldr	r3, [pc, #332]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a52      	ldr	r2, [pc, #328]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007a44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a48:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007a4a:	f7fb fb53 	bl	80030f4 <HAL_GetTick>
 8007a4e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007a50:	e008      	b.n	8007a64 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a52:	f7fb fb4f 	bl	80030f4 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d901      	bls.n	8007a64 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e24e      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007a64:	4b49      	ldr	r3, [pc, #292]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d0f0      	beq.n	8007a52 <HAL_RCC_OscConfig+0x8fa>
 8007a70:	e018      	b.n	8007aa4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8007a72:	4b46      	ldr	r3, [pc, #280]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a45      	ldr	r2, [pc, #276]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a7c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007a7e:	f7fb fb39 	bl	80030f4 <HAL_GetTick>
 8007a82:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007a84:	e008      	b.n	8007a98 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a86:	f7fb fb35 	bl	80030f4 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d901      	bls.n	8007a98 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e234      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007a98:	4b3c      	ldr	r3, [pc, #240]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1f0      	bne.n	8007a86 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d036      	beq.n	8007b1e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d019      	beq.n	8007aec <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8007ab8:	4b34      	ldr	r3, [pc, #208]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a33      	ldr	r2, [pc, #204]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007abe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ac2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007ac4:	f7fb fb16 	bl	80030f4 <HAL_GetTick>
 8007ac8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007aca:	e008      	b.n	8007ade <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007acc:	f7fb fb12 	bl	80030f4 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d901      	bls.n	8007ade <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e211      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007ade:	4b2b      	ldr	r3, [pc, #172]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d0f0      	beq.n	8007acc <HAL_RCC_OscConfig+0x974>
 8007aea:	e018      	b.n	8007b1e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8007aec:	4b27      	ldr	r3, [pc, #156]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a26      	ldr	r2, [pc, #152]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007af2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007af6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007af8:	f7fb fafc 	bl	80030f4 <HAL_GetTick>
 8007afc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007b00:	f7fb faf8 	bl	80030f4 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e1f7      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007b12:	4b1e      	ldr	r3, [pc, #120]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f0      	bne.n	8007b00 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d07f      	beq.n	8007c2a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d062      	beq.n	8007bf8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8007b32:	4b16      	ldr	r3, [pc, #88]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	4a15      	ldr	r2, [pc, #84]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007b38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b3c:	6093      	str	r3, [r2, #8]
 8007b3e:	4b13      	ldr	r3, [pc, #76]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4a:	4910      	ldr	r1, [pc, #64]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b54:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007b58:	d309      	bcc.n	8007b6e <HAL_RCC_OscConfig+0xa16>
 8007b5a:	4b0c      	ldr	r3, [pc, #48]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f023 021f 	bic.w	r2, r3, #31
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	4909      	ldr	r1, [pc, #36]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	60cb      	str	r3, [r1, #12]
 8007b6c:	e02a      	b.n	8007bc4 <HAL_RCC_OscConfig+0xa6c>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	da0c      	bge.n	8007b90 <HAL_RCC_OscConfig+0xa38>
 8007b76:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	015b      	lsls	r3, r3, #5
 8007b84:	4901      	ldr	r1, [pc, #4]	; (8007b8c <HAL_RCC_OscConfig+0xa34>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	60cb      	str	r3, [r1, #12]
 8007b8a:	e01b      	b.n	8007bc4 <HAL_RCC_OscConfig+0xa6c>
 8007b8c:	46020c00 	.word	0x46020c00
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b98:	d30a      	bcc.n	8007bb0 <HAL_RCC_OscConfig+0xa58>
 8007b9a:	4ba1      	ldr	r3, [pc, #644]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	029b      	lsls	r3, r3, #10
 8007ba8:	499d      	ldr	r1, [pc, #628]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60cb      	str	r3, [r1, #12]
 8007bae:	e009      	b.n	8007bc4 <HAL_RCC_OscConfig+0xa6c>
 8007bb0:	4b9b      	ldr	r3, [pc, #620]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	03db      	lsls	r3, r3, #15
 8007bbe:	4998      	ldr	r1, [pc, #608]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8007bc4:	4b96      	ldr	r3, [pc, #600]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a95      	ldr	r2, [pc, #596]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007bca:	f043 0310 	orr.w	r3, r3, #16
 8007bce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007bd0:	f7fb fa90 	bl	80030f4 <HAL_GetTick>
 8007bd4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007bd6:	e008      	b.n	8007bea <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007bd8:	f7fb fa8c 	bl	80030f4 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e18b      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007bea:	4b8d      	ldr	r3, [pc, #564]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0320 	and.w	r3, r3, #32
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d0f0      	beq.n	8007bd8 <HAL_RCC_OscConfig+0xa80>
 8007bf6:	e018      	b.n	8007c2a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8007bf8:	4b89      	ldr	r3, [pc, #548]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a88      	ldr	r2, [pc, #544]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007bfe:	f023 0310 	bic.w	r3, r3, #16
 8007c02:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007c04:	f7fb fa76 	bl	80030f4 <HAL_GetTick>
 8007c08:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8007c0a:	e008      	b.n	8007c1e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007c0c:	f7fb fa72 	bl	80030f4 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d901      	bls.n	8007c1e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e171      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8007c1e:	4b80      	ldr	r3, [pc, #512]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1f0      	bne.n	8007c0c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 8166 	beq.w	8007f00 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8007c34:	2300      	movs	r3, #0
 8007c36:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c3a:	4b79      	ldr	r3, [pc, #484]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	f003 030c 	and.w	r3, r3, #12
 8007c42:	2b0c      	cmp	r3, #12
 8007c44:	f000 80f2 	beq.w	8007e2c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	f040 80c5 	bne.w	8007ddc <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007c52:	4b73      	ldr	r3, [pc, #460]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a72      	ldr	r2, [pc, #456]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007c58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c5c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007c5e:	f7fb fa49 	bl	80030f4 <HAL_GetTick>
 8007c62:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007c64:	e008      	b.n	8007c78 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c66:	f7fb fa45 	bl	80030f4 <HAL_GetTick>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d901      	bls.n	8007c78 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e144      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007c78:	4b69      	ldr	r3, [pc, #420]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1f0      	bne.n	8007c66 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c84:	4b66      	ldr	r3, [pc, #408]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c8a:	f003 0304 	and.w	r3, r3, #4
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d111      	bne.n	8007cb6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8007c92:	4b63      	ldr	r3, [pc, #396]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c98:	4a61      	ldr	r2, [pc, #388]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007c9a:	f043 0304 	orr.w	r3, r3, #4
 8007c9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007ca2:	4b5f      	ldr	r3, [pc, #380]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ca8:	f003 0304 	and.w	r3, r3, #4
 8007cac:	60fb      	str	r3, [r7, #12]
 8007cae:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8007cb6:	4b5b      	ldr	r3, [pc, #364]	; (8007e24 <HAL_RCC_OscConfig+0xccc>)
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007cc2:	d102      	bne.n	8007cca <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007cca:	4b56      	ldr	r3, [pc, #344]	; (8007e24 <HAL_RCC_OscConfig+0xccc>)
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	4a55      	ldr	r2, [pc, #340]	; (8007e24 <HAL_RCC_OscConfig+0xccc>)
 8007cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cd4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8007cd6:	4b52      	ldr	r3, [pc, #328]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cde:	f023 0303 	bic.w	r3, r3, #3
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007cea:	3a01      	subs	r2, #1
 8007cec:	0212      	lsls	r2, r2, #8
 8007cee:	4311      	orrs	r1, r2
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	494a      	ldr	r1, [pc, #296]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	628b      	str	r3, [r1, #40]	; 0x28
 8007cfc:	4b48      	ldr	r3, [pc, #288]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d00:	4b49      	ldr	r3, [pc, #292]	; (8007e28 <HAL_RCC_OscConfig+0xcd0>)
 8007d02:	4013      	ands	r3, r2
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007d08:	3a01      	subs	r2, #1
 8007d0a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007d12:	3a01      	subs	r2, #1
 8007d14:	0252      	lsls	r2, r2, #9
 8007d16:	b292      	uxth	r2, r2
 8007d18:	4311      	orrs	r1, r2
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007d1e:	3a01      	subs	r2, #1
 8007d20:	0412      	lsls	r2, r2, #16
 8007d22:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007d26:	4311      	orrs	r1, r2
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007d2c:	3a01      	subs	r2, #1
 8007d2e:	0612      	lsls	r2, r2, #24
 8007d30:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007d34:	430a      	orrs	r2, r1
 8007d36:	493a      	ldr	r1, [pc, #232]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007d3c:	4b38      	ldr	r3, [pc, #224]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d40:	4a37      	ldr	r2, [pc, #220]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007d42:	f023 0310 	bic.w	r3, r3, #16
 8007d46:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d4c:	4a34      	ldr	r2, [pc, #208]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007d4e:	00db      	lsls	r3, r3, #3
 8007d50:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007d52:	4b33      	ldr	r3, [pc, #204]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d56:	4a32      	ldr	r2, [pc, #200]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007d58:	f043 0310 	orr.w	r3, r3, #16
 8007d5c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8007d5e:	4b30      	ldr	r3, [pc, #192]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d62:	f023 020c 	bic.w	r2, r3, #12
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d6a:	492d      	ldr	r1, [pc, #180]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8007d70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d105      	bne.n	8007d84 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007d78:	4b2a      	ldr	r3, [pc, #168]	; (8007e24 <HAL_RCC_OscConfig+0xccc>)
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	4a29      	ldr	r2, [pc, #164]	; (8007e24 <HAL_RCC_OscConfig+0xccc>)
 8007d7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d82:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8007d84:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d107      	bne.n	8007d9c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8007d8c:	4b24      	ldr	r3, [pc, #144]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d92:	4a23      	ldr	r2, [pc, #140]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007d94:	f023 0304 	bic.w	r3, r3, #4
 8007d98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007d9c:	4b20      	ldr	r3, [pc, #128]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da0:	4a1f      	ldr	r2, [pc, #124]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007da2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007da6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8007da8:	4b1d      	ldr	r3, [pc, #116]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a1c      	ldr	r2, [pc, #112]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007db2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007db4:	f7fb f99e 	bl	80030f4 <HAL_GetTick>
 8007db8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007dba:	e008      	b.n	8007dce <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dbc:	f7fb f99a 	bl	80030f4 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d901      	bls.n	8007dce <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e099      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007dce:	4b14      	ldr	r3, [pc, #80]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d0f0      	beq.n	8007dbc <HAL_RCC_OscConfig+0xc64>
 8007dda:	e091      	b.n	8007f00 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007ddc:	4b10      	ldr	r3, [pc, #64]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a0f      	ldr	r2, [pc, #60]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007de6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007de8:	f7fb f984 	bl	80030f4 <HAL_GetTick>
 8007dec:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007dee:	e008      	b.n	8007e02 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007df0:	f7fb f980 	bl	80030f4 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d901      	bls.n	8007e02 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e07f      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007e02:	4b07      	ldr	r3, [pc, #28]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1f0      	bne.n	8007df0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007e0e:	4b04      	ldr	r3, [pc, #16]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e12:	4a03      	ldr	r2, [pc, #12]	; (8007e20 <HAL_RCC_OscConfig+0xcc8>)
 8007e14:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007e18:	f023 0303 	bic.w	r3, r3, #3
 8007e1c:	6293      	str	r3, [r2, #40]	; 0x28
 8007e1e:	e06f      	b.n	8007f00 <HAL_RCC_OscConfig+0xda8>
 8007e20:	46020c00 	.word	0x46020c00
 8007e24:	46020800 	.word	0x46020800
 8007e28:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007e2c:	4b37      	ldr	r3, [pc, #220]	; (8007f0c <HAL_RCC_OscConfig+0xdb4>)
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e30:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007e32:	4b36      	ldr	r3, [pc, #216]	; (8007f0c <HAL_RCC_OscConfig+0xdb4>)
 8007e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e36:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d039      	beq.n	8007eb4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	f003 0203 	and.w	r2, r3, #3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d132      	bne.n	8007eb4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	0a1b      	lsrs	r3, r3, #8
 8007e52:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d129      	bne.n	8007eb4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d122      	bne.n	8007eb4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e78:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d11a      	bne.n	8007eb4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	0a5b      	lsrs	r3, r3, #9
 8007e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e8a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d111      	bne.n	8007eb4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	0c1b      	lsrs	r3, r3, #16
 8007e94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e9c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d108      	bne.n	8007eb4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	0e1b      	lsrs	r3, r3, #24
 8007ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eae:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d001      	beq.n	8007eb8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e024      	b.n	8007f02 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007eb8:	4b14      	ldr	r3, [pc, #80]	; (8007f0c <HAL_RCC_OscConfig+0xdb4>)
 8007eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebc:	08db      	lsrs	r3, r3, #3
 8007ebe:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d01a      	beq.n	8007f00 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007eca:	4b10      	ldr	r3, [pc, #64]	; (8007f0c <HAL_RCC_OscConfig+0xdb4>)
 8007ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ece:	4a0f      	ldr	r2, [pc, #60]	; (8007f0c <HAL_RCC_OscConfig+0xdb4>)
 8007ed0:	f023 0310 	bic.w	r3, r3, #16
 8007ed4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed6:	f7fb f90d 	bl	80030f4 <HAL_GetTick>
 8007eda:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8007edc:	bf00      	nop
 8007ede:	f7fb f909 	bl	80030f4 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d0f9      	beq.n	8007ede <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eee:	4a07      	ldr	r2, [pc, #28]	; (8007f0c <HAL_RCC_OscConfig+0xdb4>)
 8007ef0:	00db      	lsls	r3, r3, #3
 8007ef2:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007ef4:	4b05      	ldr	r3, [pc, #20]	; (8007f0c <HAL_RCC_OscConfig+0xdb4>)
 8007ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef8:	4a04      	ldr	r2, [pc, #16]	; (8007f0c <HAL_RCC_OscConfig+0xdb4>)
 8007efa:	f043 0310 	orr.w	r3, r3, #16
 8007efe:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3738      	adds	r7, #56	; 0x38
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	46020c00 	.word	0x46020c00

08007f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e1d9      	b.n	80082d8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f24:	4b9b      	ldr	r3, [pc, #620]	; (8008194 <HAL_RCC_ClockConfig+0x284>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 030f 	and.w	r3, r3, #15
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d910      	bls.n	8007f54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f32:	4b98      	ldr	r3, [pc, #608]	; (8008194 <HAL_RCC_ClockConfig+0x284>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f023 020f 	bic.w	r2, r3, #15
 8007f3a:	4996      	ldr	r1, [pc, #600]	; (8008194 <HAL_RCC_ClockConfig+0x284>)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f42:	4b94      	ldr	r3, [pc, #592]	; (8008194 <HAL_RCC_ClockConfig+0x284>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d001      	beq.n	8007f54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e1c1      	b.n	80082d8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0310 	and.w	r3, r3, #16
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d010      	beq.n	8007f82 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	695a      	ldr	r2, [r3, #20]
 8007f64:	4b8c      	ldr	r3, [pc, #560]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d908      	bls.n	8007f82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007f70:	4b89      	ldr	r3, [pc, #548]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	4986      	ldr	r1, [pc, #536]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 0308 	and.w	r3, r3, #8
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d012      	beq.n	8007fb4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	691a      	ldr	r2, [r3, #16]
 8007f92:	4b81      	ldr	r3, [pc, #516]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	091b      	lsrs	r3, r3, #4
 8007f98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d909      	bls.n	8007fb4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007fa0:	4b7d      	ldr	r3, [pc, #500]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	011b      	lsls	r3, r3, #4
 8007fae:	497a      	ldr	r1, [pc, #488]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d010      	beq.n	8007fe2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68da      	ldr	r2, [r3, #12]
 8007fc4:	4b74      	ldr	r3, [pc, #464]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 8007fc6:	6a1b      	ldr	r3, [r3, #32]
 8007fc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d908      	bls.n	8007fe2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007fd0:	4b71      	ldr	r3, [pc, #452]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	496e      	ldr	r1, [pc, #440]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0302 	and.w	r3, r3, #2
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d010      	beq.n	8008010 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	4b69      	ldr	r3, [pc, #420]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	f003 030f 	and.w	r3, r3, #15
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d908      	bls.n	8008010 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007ffe:	4b66      	ldr	r3, [pc, #408]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	f023 020f 	bic.w	r2, r3, #15
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	4963      	ldr	r1, [pc, #396]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 800800c:	4313      	orrs	r3, r2
 800800e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 80d2 	beq.w	80081c2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800801e:	2300      	movs	r3, #0
 8008020:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	2b03      	cmp	r3, #3
 8008028:	d143      	bne.n	80080b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800802a:	4b5b      	ldr	r3, [pc, #364]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 800802c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b00      	cmp	r3, #0
 8008036:	d110      	bne.n	800805a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008038:	4b57      	ldr	r3, [pc, #348]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 800803a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800803e:	4a56      	ldr	r2, [pc, #344]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 8008040:	f043 0304 	orr.w	r3, r3, #4
 8008044:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008048:	4b53      	ldr	r3, [pc, #332]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 800804a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800804e:	f003 0304 	and.w	r3, r3, #4
 8008052:	60bb      	str	r3, [r7, #8]
 8008054:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8008056:	2301      	movs	r3, #1
 8008058:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800805a:	f7fb f84b 	bl	80030f4 <HAL_GetTick>
 800805e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8008060:	4b4e      	ldr	r3, [pc, #312]	; (800819c <HAL_RCC_ClockConfig+0x28c>)
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00f      	beq.n	800808c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800806c:	e008      	b.n	8008080 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800806e:	f7fb f841 	bl	80030f4 <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	2b02      	cmp	r3, #2
 800807a:	d901      	bls.n	8008080 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e12b      	b.n	80082d8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8008080:	4b46      	ldr	r3, [pc, #280]	; (800819c <HAL_RCC_ClockConfig+0x28c>)
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d0f0      	beq.n	800806e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800808c:	7dfb      	ldrb	r3, [r7, #23]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d107      	bne.n	80080a2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008092:	4b41      	ldr	r3, [pc, #260]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 8008094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008098:	4a3f      	ldr	r2, [pc, #252]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 800809a:	f023 0304 	bic.w	r3, r3, #4
 800809e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80080a2:	4b3d      	ldr	r3, [pc, #244]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d121      	bne.n	80080f2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e112      	b.n	80082d8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d107      	bne.n	80080ca <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080ba:	4b37      	ldr	r3, [pc, #220]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d115      	bne.n	80080f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e106      	b.n	80082d8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d107      	bne.n	80080e2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80080d2:	4b31      	ldr	r3, [pc, #196]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d109      	bne.n	80080f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e0fa      	b.n	80082d8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080e2:	4b2d      	ldr	r3, [pc, #180]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e0f2      	b.n	80082d8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80080f2:	4b29      	ldr	r3, [pc, #164]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	f023 0203 	bic.w	r2, r3, #3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	4926      	ldr	r1, [pc, #152]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 8008100:	4313      	orrs	r3, r2
 8008102:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8008104:	f7fa fff6 	bl	80030f4 <HAL_GetTick>
 8008108:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	2b03      	cmp	r3, #3
 8008110:	d112      	bne.n	8008138 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008112:	e00a      	b.n	800812a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008114:	f7fa ffee 	bl	80030f4 <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008122:	4293      	cmp	r3, r2
 8008124:	d901      	bls.n	800812a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e0d6      	b.n	80082d8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800812a:	4b1b      	ldr	r3, [pc, #108]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 800812c:	69db      	ldr	r3, [r3, #28]
 800812e:	f003 030c 	and.w	r3, r3, #12
 8008132:	2b0c      	cmp	r3, #12
 8008134:	d1ee      	bne.n	8008114 <HAL_RCC_ClockConfig+0x204>
 8008136:	e044      	b.n	80081c2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	2b02      	cmp	r3, #2
 800813e:	d112      	bne.n	8008166 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008140:	e00a      	b.n	8008158 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008142:	f7fa ffd7 	bl	80030f4 <HAL_GetTick>
 8008146:	4602      	mov	r2, r0
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008150:	4293      	cmp	r3, r2
 8008152:	d901      	bls.n	8008158 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e0bf      	b.n	80082d8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008158:	4b0f      	ldr	r3, [pc, #60]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 800815a:	69db      	ldr	r3, [r3, #28]
 800815c:	f003 030c 	and.w	r3, r3, #12
 8008160:	2b08      	cmp	r3, #8
 8008162:	d1ee      	bne.n	8008142 <HAL_RCC_ClockConfig+0x232>
 8008164:	e02d      	b.n	80081c2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d123      	bne.n	80081b6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800816e:	e00a      	b.n	8008186 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008170:	f7fa ffc0 	bl	80030f4 <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	f241 3288 	movw	r2, #5000	; 0x1388
 800817e:	4293      	cmp	r3, r2
 8008180:	d901      	bls.n	8008186 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e0a8      	b.n	80082d8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008186:	4b04      	ldr	r3, [pc, #16]	; (8008198 <HAL_RCC_ClockConfig+0x288>)
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	f003 030c 	and.w	r3, r3, #12
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1ee      	bne.n	8008170 <HAL_RCC_ClockConfig+0x260>
 8008192:	e016      	b.n	80081c2 <HAL_RCC_ClockConfig+0x2b2>
 8008194:	40022000 	.word	0x40022000
 8008198:	46020c00 	.word	0x46020c00
 800819c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081a0:	f7fa ffa8 	bl	80030f4 <HAL_GetTick>
 80081a4:	4602      	mov	r2, r0
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d901      	bls.n	80081b6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e090      	b.n	80082d8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80081b6:	4b4a      	ldr	r3, [pc, #296]	; (80082e0 <HAL_RCC_ClockConfig+0x3d0>)
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	f003 030c 	and.w	r3, r3, #12
 80081be:	2b04      	cmp	r3, #4
 80081c0:	d1ee      	bne.n	80081a0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0302 	and.w	r3, r3, #2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d010      	beq.n	80081f0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	689a      	ldr	r2, [r3, #8]
 80081d2:	4b43      	ldr	r3, [pc, #268]	; (80082e0 <HAL_RCC_ClockConfig+0x3d0>)
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	f003 030f 	and.w	r3, r3, #15
 80081da:	429a      	cmp	r2, r3
 80081dc:	d208      	bcs.n	80081f0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80081de:	4b40      	ldr	r3, [pc, #256]	; (80082e0 <HAL_RCC_ClockConfig+0x3d0>)
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	f023 020f 	bic.w	r2, r3, #15
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	493d      	ldr	r1, [pc, #244]	; (80082e0 <HAL_RCC_ClockConfig+0x3d0>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081f0:	4b3c      	ldr	r3, [pc, #240]	; (80082e4 <HAL_RCC_ClockConfig+0x3d4>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 030f 	and.w	r3, r3, #15
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d210      	bcs.n	8008220 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081fe:	4b39      	ldr	r3, [pc, #228]	; (80082e4 <HAL_RCC_ClockConfig+0x3d4>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f023 020f 	bic.w	r2, r3, #15
 8008206:	4937      	ldr	r1, [pc, #220]	; (80082e4 <HAL_RCC_ClockConfig+0x3d4>)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	4313      	orrs	r3, r2
 800820c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800820e:	4b35      	ldr	r3, [pc, #212]	; (80082e4 <HAL_RCC_ClockConfig+0x3d4>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 030f 	and.w	r3, r3, #15
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	429a      	cmp	r2, r3
 800821a:	d001      	beq.n	8008220 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	e05b      	b.n	80082d8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0304 	and.w	r3, r3, #4
 8008228:	2b00      	cmp	r3, #0
 800822a:	d010      	beq.n	800824e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68da      	ldr	r2, [r3, #12]
 8008230:	4b2b      	ldr	r3, [pc, #172]	; (80082e0 <HAL_RCC_ClockConfig+0x3d0>)
 8008232:	6a1b      	ldr	r3, [r3, #32]
 8008234:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008238:	429a      	cmp	r2, r3
 800823a:	d208      	bcs.n	800824e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800823c:	4b28      	ldr	r3, [pc, #160]	; (80082e0 <HAL_RCC_ClockConfig+0x3d0>)
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	4925      	ldr	r1, [pc, #148]	; (80082e0 <HAL_RCC_ClockConfig+0x3d0>)
 800824a:	4313      	orrs	r3, r2
 800824c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0308 	and.w	r3, r3, #8
 8008256:	2b00      	cmp	r3, #0
 8008258:	d012      	beq.n	8008280 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	691a      	ldr	r2, [r3, #16]
 800825e:	4b20      	ldr	r3, [pc, #128]	; (80082e0 <HAL_RCC_ClockConfig+0x3d0>)
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	091b      	lsrs	r3, r3, #4
 8008264:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008268:	429a      	cmp	r2, r3
 800826a:	d209      	bcs.n	8008280 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800826c:	4b1c      	ldr	r3, [pc, #112]	; (80082e0 <HAL_RCC_ClockConfig+0x3d0>)
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	011b      	lsls	r3, r3, #4
 800827a:	4919      	ldr	r1, [pc, #100]	; (80082e0 <HAL_RCC_ClockConfig+0x3d0>)
 800827c:	4313      	orrs	r3, r2
 800827e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0310 	and.w	r3, r3, #16
 8008288:	2b00      	cmp	r3, #0
 800828a:	d010      	beq.n	80082ae <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	695a      	ldr	r2, [r3, #20]
 8008290:	4b13      	ldr	r3, [pc, #76]	; (80082e0 <HAL_RCC_ClockConfig+0x3d0>)
 8008292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008294:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008298:	429a      	cmp	r2, r3
 800829a:	d208      	bcs.n	80082ae <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800829c:	4b10      	ldr	r3, [pc, #64]	; (80082e0 <HAL_RCC_ClockConfig+0x3d0>)
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	490d      	ldr	r1, [pc, #52]	; (80082e0 <HAL_RCC_ClockConfig+0x3d0>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80082ae:	f000 f821 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 80082b2:	4602      	mov	r2, r0
 80082b4:	4b0a      	ldr	r3, [pc, #40]	; (80082e0 <HAL_RCC_ClockConfig+0x3d0>)
 80082b6:	6a1b      	ldr	r3, [r3, #32]
 80082b8:	f003 030f 	and.w	r3, r3, #15
 80082bc:	490a      	ldr	r1, [pc, #40]	; (80082e8 <HAL_RCC_ClockConfig+0x3d8>)
 80082be:	5ccb      	ldrb	r3, [r1, r3]
 80082c0:	fa22 f303 	lsr.w	r3, r2, r3
 80082c4:	4a09      	ldr	r2, [pc, #36]	; (80082ec <HAL_RCC_ClockConfig+0x3dc>)
 80082c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80082c8:	4b09      	ldr	r3, [pc, #36]	; (80082f0 <HAL_RCC_ClockConfig+0x3e0>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fa fd89 	bl	8002de4 <HAL_InitTick>
 80082d2:	4603      	mov	r3, r0
 80082d4:	73fb      	strb	r3, [r7, #15]

  return status;
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3718      	adds	r7, #24
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	46020c00 	.word	0x46020c00
 80082e4:	40022000 	.word	0x40022000
 80082e8:	0800f268 	.word	0x0800f268
 80082ec:	20000000 	.word	0x20000000
 80082f0:	20000004 	.word	0x20000004

080082f4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b08b      	sub	sp, #44	; 0x2c
 80082f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80082fa:	2300      	movs	r3, #0
 80082fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80082fe:	2300      	movs	r3, #0
 8008300:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008302:	4b78      	ldr	r3, [pc, #480]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	f003 030c 	and.w	r3, r3, #12
 800830a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800830c:	4b75      	ldr	r3, [pc, #468]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800830e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008310:	f003 0303 	and.w	r3, r3, #3
 8008314:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d005      	beq.n	8008328 <HAL_RCC_GetSysClockFreq+0x34>
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	2b0c      	cmp	r3, #12
 8008320:	d121      	bne.n	8008366 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d11e      	bne.n	8008366 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8008328:	4b6e      	ldr	r3, [pc, #440]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d107      	bne.n	8008344 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8008334:	4b6b      	ldr	r3, [pc, #428]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008336:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800833a:	0b1b      	lsrs	r3, r3, #12
 800833c:	f003 030f 	and.w	r3, r3, #15
 8008340:	627b      	str	r3, [r7, #36]	; 0x24
 8008342:	e005      	b.n	8008350 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8008344:	4b67      	ldr	r3, [pc, #412]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	0f1b      	lsrs	r3, r3, #28
 800834a:	f003 030f 	and.w	r3, r3, #15
 800834e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008350:	4a65      	ldr	r2, [pc, #404]	; (80084e8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008358:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d110      	bne.n	8008382 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008364:	e00d      	b.n	8008382 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008366:	4b5f      	ldr	r3, [pc, #380]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	f003 030c 	and.w	r3, r3, #12
 800836e:	2b04      	cmp	r3, #4
 8008370:	d102      	bne.n	8008378 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008372:	4b5e      	ldr	r3, [pc, #376]	; (80084ec <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008374:	623b      	str	r3, [r7, #32]
 8008376:	e004      	b.n	8008382 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	2b08      	cmp	r3, #8
 800837c:	d101      	bne.n	8008382 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800837e:	4b5b      	ldr	r3, [pc, #364]	; (80084ec <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008380:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	2b0c      	cmp	r3, #12
 8008386:	f040 80a5 	bne.w	80084d4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800838a:	4b56      	ldr	r3, [pc, #344]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800838c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838e:	f003 0303 	and.w	r3, r3, #3
 8008392:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008394:	4b53      	ldr	r3, [pc, #332]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008398:	0a1b      	lsrs	r3, r3, #8
 800839a:	f003 030f 	and.w	r3, r3, #15
 800839e:	3301      	adds	r3, #1
 80083a0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80083a2:	4b50      	ldr	r3, [pc, #320]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80083a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a6:	091b      	lsrs	r3, r3, #4
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80083ae:	4b4d      	ldr	r3, [pc, #308]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	08db      	lsrs	r3, r3, #3
 80083b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	fb02 f303 	mul.w	r3, r2, r3
 80083be:	ee07 3a90 	vmov	s15, r3
 80083c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d003      	beq.n	80083d8 <HAL_RCC_GetSysClockFreq+0xe4>
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	d022      	beq.n	800841c <HAL_RCC_GetSysClockFreq+0x128>
 80083d6:	e043      	b.n	8008460 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	ee07 3a90 	vmov	s15, r3
 80083de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e2:	eddf 6a43 	vldr	s13, [pc, #268]	; 80084f0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80083e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ea:	4b3e      	ldr	r3, [pc, #248]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80083ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f2:	ee07 3a90 	vmov	s15, r3
 80083f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80083fa:	ed97 6a01 	vldr	s12, [r7, #4]
 80083fe:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80084f4 <HAL_RCC_GetSysClockFreq+0x200>
 8008402:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008406:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800840a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800840e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800841a:	e046      	b.n	80084aa <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	ee07 3a90 	vmov	s15, r3
 8008422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008426:	eddf 6a32 	vldr	s13, [pc, #200]	; 80084f0 <HAL_RCC_GetSysClockFreq+0x1fc>
 800842a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800842e:	4b2d      	ldr	r3, [pc, #180]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008436:	ee07 3a90 	vmov	s15, r3
 800843a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800843e:	ed97 6a01 	vldr	s12, [r7, #4]
 8008442:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80084f4 <HAL_RCC_GetSysClockFreq+0x200>
 8008446:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800844a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800844e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008452:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800845a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800845e:	e024      	b.n	80084aa <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	ee07 3a90 	vmov	s15, r3
 8008466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	ee07 3a90 	vmov	s15, r3
 8008470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008474:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008478:	4b1a      	ldr	r3, [pc, #104]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800847a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008480:	ee07 3a90 	vmov	s15, r3
 8008484:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008488:	ed97 6a01 	vldr	s12, [r7, #4]
 800848c:	eddf 5a19 	vldr	s11, [pc, #100]	; 80084f4 <HAL_RCC_GetSysClockFreq+0x200>
 8008490:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008494:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008498:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800849c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80084a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084a8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80084aa:	4b0e      	ldr	r3, [pc, #56]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80084ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ae:	0e1b      	lsrs	r3, r3, #24
 80084b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b4:	3301      	adds	r3, #1
 80084b6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	ee07 3a90 	vmov	s15, r3
 80084be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80084c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80084c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084ce:	ee17 3a90 	vmov	r3, s15
 80084d2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80084d4:	6a3b      	ldr	r3, [r7, #32]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	372c      	adds	r7, #44	; 0x2c
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	46020c00 	.word	0x46020c00
 80084e8:	0800f280 	.word	0x0800f280
 80084ec:	00f42400 	.word	0x00f42400
 80084f0:	4b742400 	.word	0x4b742400
 80084f4:	46000000 	.word	0x46000000

080084f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80084fc:	f7ff fefa 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 8008500:	4602      	mov	r2, r0
 8008502:	4b07      	ldr	r3, [pc, #28]	; (8008520 <HAL_RCC_GetHCLKFreq+0x28>)
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	f003 030f 	and.w	r3, r3, #15
 800850a:	4906      	ldr	r1, [pc, #24]	; (8008524 <HAL_RCC_GetHCLKFreq+0x2c>)
 800850c:	5ccb      	ldrb	r3, [r1, r3]
 800850e:	fa22 f303 	lsr.w	r3, r2, r3
 8008512:	4a05      	ldr	r2, [pc, #20]	; (8008528 <HAL_RCC_GetHCLKFreq+0x30>)
 8008514:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8008516:	4b04      	ldr	r3, [pc, #16]	; (8008528 <HAL_RCC_GetHCLKFreq+0x30>)
 8008518:	681b      	ldr	r3, [r3, #0]
}
 800851a:	4618      	mov	r0, r3
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	46020c00 	.word	0x46020c00
 8008524:	0800f268 	.word	0x0800f268
 8008528:	20000000 	.word	0x20000000

0800852c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8008530:	f7ff ffe2 	bl	80084f8 <HAL_RCC_GetHCLKFreq>
 8008534:	4602      	mov	r2, r0
 8008536:	4b05      	ldr	r3, [pc, #20]	; (800854c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	091b      	lsrs	r3, r3, #4
 800853c:	f003 0307 	and.w	r3, r3, #7
 8008540:	4903      	ldr	r1, [pc, #12]	; (8008550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008542:	5ccb      	ldrb	r3, [r1, r3]
 8008544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008548:	4618      	mov	r0, r3
 800854a:	bd80      	pop	{r7, pc}
 800854c:	46020c00 	.word	0x46020c00
 8008550:	0800f278 	.word	0x0800f278

08008554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8008558:	f7ff ffce 	bl	80084f8 <HAL_RCC_GetHCLKFreq>
 800855c:	4602      	mov	r2, r0
 800855e:	4b05      	ldr	r3, [pc, #20]	; (8008574 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	0a1b      	lsrs	r3, r3, #8
 8008564:	f003 0307 	and.w	r3, r3, #7
 8008568:	4903      	ldr	r1, [pc, #12]	; (8008578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800856a:	5ccb      	ldrb	r3, [r1, r3]
 800856c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008570:	4618      	mov	r0, r3
 8008572:	bd80      	pop	{r7, pc}
 8008574:	46020c00 	.word	0x46020c00
 8008578:	0800f278 	.word	0x0800f278

0800857c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8008580:	f7ff ffba 	bl	80084f8 <HAL_RCC_GetHCLKFreq>
 8008584:	4602      	mov	r2, r0
 8008586:	4b05      	ldr	r3, [pc, #20]	; (800859c <HAL_RCC_GetPCLK3Freq+0x20>)
 8008588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858a:	091b      	lsrs	r3, r3, #4
 800858c:	f003 0307 	and.w	r3, r3, #7
 8008590:	4903      	ldr	r1, [pc, #12]	; (80085a0 <HAL_RCC_GetPCLK3Freq+0x24>)
 8008592:	5ccb      	ldrb	r3, [r1, r3]
 8008594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008598:	4618      	mov	r0, r3
 800859a:	bd80      	pop	{r7, pc}
 800859c:	46020c00 	.word	0x46020c00
 80085a0:	0800f278 	.word	0x0800f278

080085a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	221f      	movs	r2, #31
 80085b2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80085b4:	4b15      	ldr	r3, [pc, #84]	; (800860c <HAL_RCC_GetClockConfig+0x68>)
 80085b6:	69db      	ldr	r3, [r3, #28]
 80085b8:	f003 0203 	and.w	r2, r3, #3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80085c0:	4b12      	ldr	r3, [pc, #72]	; (800860c <HAL_RCC_GetClockConfig+0x68>)
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	f003 020f 	and.w	r2, r3, #15
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80085cc:	4b0f      	ldr	r3, [pc, #60]	; (800860c <HAL_RCC_GetClockConfig+0x68>)
 80085ce:	6a1b      	ldr	r3, [r3, #32]
 80085d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80085d8:	4b0c      	ldr	r3, [pc, #48]	; (800860c <HAL_RCC_GetClockConfig+0x68>)
 80085da:	6a1b      	ldr	r3, [r3, #32]
 80085dc:	091b      	lsrs	r3, r3, #4
 80085de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80085e6:	4b09      	ldr	r3, [pc, #36]	; (800860c <HAL_RCC_GetClockConfig+0x68>)
 80085e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80085f2:	4b07      	ldr	r3, [pc, #28]	; (8008610 <HAL_RCC_GetClockConfig+0x6c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 020f 	and.w	r2, r3, #15
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	601a      	str	r2, [r3, #0]
}
 80085fe:	bf00      	nop
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	46020c00 	.word	0x46020c00
 8008610:	40022000 	.word	0x40022000

08008614 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008614:	b480      	push	{r7}
 8008616:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8008618:	4b05      	ldr	r3, [pc, #20]	; (8008630 <HAL_RCC_EnableCSS+0x1c>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a04      	ldr	r2, [pc, #16]	; (8008630 <HAL_RCC_EnableCSS+0x1c>)
 800861e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008622:	6013      	str	r3, [r2, #0]
}
 8008624:	bf00      	nop
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	46020c00 	.word	0x46020c00

08008634 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008638:	4b07      	ldr	r3, [pc, #28]	; (8008658 <HAL_RCC_NMI_IRQHandler+0x24>)
 800863a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008644:	d105      	bne.n	8008652 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008646:	f000 f809 	bl	800865c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800864a:	4b03      	ldr	r3, [pc, #12]	; (8008658 <HAL_RCC_NMI_IRQHandler+0x24>)
 800864c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008650:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8008652:	bf00      	nop
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	46020c00 	.word	0x46020c00

0800865c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800865c:	b480      	push	{r7}
 800865e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8008660:	bf00      	nop
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
	...

0800866c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008674:	4b3e      	ldr	r3, [pc, #248]	; (8008770 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800867a:	f003 0304 	and.w	r3, r3, #4
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008682:	f7fe fccd 	bl	8007020 <HAL_PWREx_GetVoltageRange>
 8008686:	6178      	str	r0, [r7, #20]
 8008688:	e019      	b.n	80086be <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800868a:	4b39      	ldr	r3, [pc, #228]	; (8008770 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800868c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008690:	4a37      	ldr	r2, [pc, #220]	; (8008770 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008692:	f043 0304 	orr.w	r3, r3, #4
 8008696:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800869a:	4b35      	ldr	r3, [pc, #212]	; (8008770 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800869c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086a0:	f003 0304 	and.w	r3, r3, #4
 80086a4:	60fb      	str	r3, [r7, #12]
 80086a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80086a8:	f7fe fcba 	bl	8007020 <HAL_PWREx_GetVoltageRange>
 80086ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80086ae:	4b30      	ldr	r3, [pc, #192]	; (8008770 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80086b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086b4:	4a2e      	ldr	r2, [pc, #184]	; (8008770 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80086b6:	f023 0304 	bic.w	r3, r3, #4
 80086ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80086c4:	d003      	beq.n	80086ce <RCC_SetFlashLatencyFromMSIRange+0x62>
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086cc:	d109      	bne.n	80086e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086d4:	d202      	bcs.n	80086dc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80086d6:	2301      	movs	r3, #1
 80086d8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80086da:	e033      	b.n	8008744 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80086dc:	2300      	movs	r3, #0
 80086de:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80086e0:	e030      	b.n	8008744 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086e8:	d208      	bcs.n	80086fc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086f0:	d102      	bne.n	80086f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80086f2:	2303      	movs	r3, #3
 80086f4:	613b      	str	r3, [r7, #16]
 80086f6:	e025      	b.n	8008744 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e035      	b.n	8008768 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008702:	d90f      	bls.n	8008724 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d109      	bne.n	800871e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008710:	d902      	bls.n	8008718 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8008712:	2300      	movs	r3, #0
 8008714:	613b      	str	r3, [r7, #16]
 8008716:	e015      	b.n	8008744 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8008718:	2301      	movs	r3, #1
 800871a:	613b      	str	r3, [r7, #16]
 800871c:	e012      	b.n	8008744 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800871e:	2300      	movs	r3, #0
 8008720:	613b      	str	r3, [r7, #16]
 8008722:	e00f      	b.n	8008744 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800872a:	d109      	bne.n	8008740 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008732:	d102      	bne.n	800873a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8008734:	2301      	movs	r3, #1
 8008736:	613b      	str	r3, [r7, #16]
 8008738:	e004      	b.n	8008744 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800873a:	2302      	movs	r3, #2
 800873c:	613b      	str	r3, [r7, #16]
 800873e:	e001      	b.n	8008744 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8008740:	2301      	movs	r3, #1
 8008742:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008744:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f023 020f 	bic.w	r2, r3, #15
 800874c:	4909      	ldr	r1, [pc, #36]	; (8008774 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	4313      	orrs	r3, r2
 8008752:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8008754:	4b07      	ldr	r3, [pc, #28]	; (8008774 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 030f 	and.w	r3, r3, #15
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	429a      	cmp	r2, r3
 8008760:	d001      	beq.n	8008766 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e000      	b.n	8008768 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	46020c00 	.word	0x46020c00
 8008774:	40022000 	.word	0x40022000

08008778 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800877c:	b0c8      	sub	sp, #288	; 0x120
 800877e:	af00      	add	r7, sp, #0
 8008780:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008784:	2300      	movs	r3, #0
 8008786:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800878a:	2300      	movs	r3, #0
 800878c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008798:	f002 0401 	and.w	r4, r2, #1
 800879c:	2500      	movs	r5, #0
 800879e:	ea54 0305 	orrs.w	r3, r4, r5
 80087a2:	d00b      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80087a4:	4bd5      	ldr	r3, [pc, #852]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80087a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087aa:	f023 0103 	bic.w	r1, r3, #3
 80087ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b4:	4ad1      	ldr	r2, [pc, #836]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80087b6:	430b      	orrs	r3, r1
 80087b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80087bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	f002 0802 	and.w	r8, r2, #2
 80087c8:	f04f 0900 	mov.w	r9, #0
 80087cc:	ea58 0309 	orrs.w	r3, r8, r9
 80087d0:	d00b      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80087d2:	4bca      	ldr	r3, [pc, #808]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80087d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087d8:	f023 010c 	bic.w	r1, r3, #12
 80087dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e2:	4ac6      	ldr	r2, [pc, #792]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80087e4:	430b      	orrs	r3, r1
 80087e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80087ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f2:	f002 0a04 	and.w	sl, r2, #4
 80087f6:	f04f 0b00 	mov.w	fp, #0
 80087fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80087fe:	d00b      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8008800:	4bbe      	ldr	r3, [pc, #760]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008806:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800880a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800880e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008810:	4aba      	ldr	r2, [pc, #744]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008812:	430b      	orrs	r3, r1
 8008814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800881c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008820:	f002 0308 	and.w	r3, r2, #8
 8008824:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008828:	2300      	movs	r3, #0
 800882a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800882e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008832:	460b      	mov	r3, r1
 8008834:	4313      	orrs	r3, r2
 8008836:	d00b      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8008838:	4bb0      	ldr	r3, [pc, #704]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800883a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800883e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008848:	4aac      	ldr	r2, [pc, #688]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800884a:	430b      	orrs	r3, r1
 800884c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	f002 0310 	and.w	r3, r2, #16
 800885c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008860:	2300      	movs	r3, #0
 8008862:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008866:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800886a:	460b      	mov	r3, r1
 800886c:	4313      	orrs	r3, r2
 800886e:	d00b      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8008870:	4ba2      	ldr	r3, [pc, #648]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008876:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800887a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800887e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008880:	4a9e      	ldr	r2, [pc, #632]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008882:	430b      	orrs	r3, r1
 8008884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800888c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008890:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008894:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008898:	2300      	movs	r3, #0
 800889a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800889e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4313      	orrs	r3, r2
 80088a6:	d00b      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80088a8:	4b94      	ldr	r3, [pc, #592]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80088aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80088ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80088b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088b8:	4a90      	ldr	r2, [pc, #576]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80088ba:	430b      	orrs	r3, r1
 80088bc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80088c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	f002 0320 	and.w	r3, r2, #32
 80088cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80088d0:	2300      	movs	r3, #0
 80088d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088d6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80088da:	460b      	mov	r3, r1
 80088dc:	4313      	orrs	r3, r2
 80088de:	d00b      	beq.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80088e0:	4b86      	ldr	r3, [pc, #536]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80088e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80088e6:	f023 0107 	bic.w	r1, r3, #7
 80088ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088f0:	4a82      	ldr	r2, [pc, #520]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80088f2:	430b      	orrs	r3, r1
 80088f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80088f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008900:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008908:	2300      	movs	r3, #0
 800890a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800890e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008912:	460b      	mov	r3, r1
 8008914:	4313      	orrs	r3, r2
 8008916:	d00b      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008918:	4b78      	ldr	r3, [pc, #480]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800891a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800891e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8008922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008928:	4a74      	ldr	r2, [pc, #464]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800892a:	430b      	orrs	r3, r1
 800892c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008938:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800893c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008940:	2300      	movs	r3, #0
 8008942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008946:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800894a:	460b      	mov	r3, r1
 800894c:	4313      	orrs	r3, r2
 800894e:	d00b      	beq.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8008950:	4b6a      	ldr	r3, [pc, #424]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008956:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800895a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800895e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008960:	4a66      	ldr	r2, [pc, #408]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008962:	430b      	orrs	r3, r1
 8008964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008970:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8008974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008978:	2300      	movs	r3, #0
 800897a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800897e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008982:	460b      	mov	r3, r1
 8008984:	4313      	orrs	r3, r2
 8008986:	d00b      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8008988:	4b5c      	ldr	r3, [pc, #368]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800898a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800898e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008998:	4a58      	ldr	r2, [pc, #352]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800899a:	430b      	orrs	r3, r1
 800899c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80089a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80089ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089b0:	2300      	movs	r3, #0
 80089b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80089b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80089ba:	460b      	mov	r3, r1
 80089bc:	4313      	orrs	r3, r2
 80089be:	d00b      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80089c0:	4b4e      	ldr	r3, [pc, #312]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80089c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80089c6:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80089ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089d0:	4a4a      	ldr	r2, [pc, #296]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80089d2:	430b      	orrs	r3, r1
 80089d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 80089d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80089e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80089e8:	2300      	movs	r3, #0
 80089ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80089ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80089f2:	460b      	mov	r3, r1
 80089f4:	4313      	orrs	r3, r2
 80089f6:	d00b      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 80089f8:	4b40      	ldr	r3, [pc, #256]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80089fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80089fe:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8008a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a08:	4a3c      	ldr	r2, [pc, #240]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008a0a:	430b      	orrs	r3, r1
 8008a0c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8008a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a18:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a20:	2300      	movs	r3, #0
 8008a22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008a26:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	d00c      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8008a30:	4b32      	ldr	r3, [pc, #200]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008a32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008a36:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a42:	4a2e      	ldr	r2, [pc, #184]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008a44:	430b      	orrs	r3, r1
 8008a46:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a52:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8008a56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a60:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008a64:	460b      	mov	r3, r1
 8008a66:	4313      	orrs	r3, r2
 8008a68:	d00c      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8008a6a:	4b24      	ldr	r3, [pc, #144]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008a70:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8008a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a7c:	4a1f      	ldr	r2, [pc, #124]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008a7e:	430b      	orrs	r3, r1
 8008a80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008a90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a94:	2300      	movs	r3, #0
 8008a96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008a9a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	d00c      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008aa4:	4b15      	ldr	r3, [pc, #84]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008aaa:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8008aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ab6:	4a11      	ldr	r2, [pc, #68]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008ab8:	430b      	orrs	r3, r1
 8008aba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8008abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008aca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008ad4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4313      	orrs	r3, r2
 8008adc:	d010      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8008ade:	4b07      	ldr	r3, [pc, #28]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008ae4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008af0:	4a02      	ldr	r2, [pc, #8]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008af2:	430b      	orrs	r3, r1
 8008af4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008af8:	e002      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8008afa:	bf00      	nop
 8008afc:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b08:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b10:	2300      	movs	r3, #0
 8008b12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b16:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	d04c      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8008b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b28:	2b80      	cmp	r3, #128	; 0x80
 8008b2a:	d02d      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008b2c:	2b80      	cmp	r3, #128	; 0x80
 8008b2e:	d827      	bhi.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008b30:	2b60      	cmp	r3, #96	; 0x60
 8008b32:	d02b      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008b34:	2b60      	cmp	r3, #96	; 0x60
 8008b36:	d823      	bhi.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008b38:	2b40      	cmp	r3, #64	; 0x40
 8008b3a:	d006      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8008b3c:	2b40      	cmp	r3, #64	; 0x40
 8008b3e:	d81f      	bhi.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d009      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008b44:	2b20      	cmp	r3, #32
 8008b46:	d011      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008b48:	e01a      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008b4a:	4bc0      	ldr	r3, [pc, #768]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4e:	4abf      	ldr	r2, [pc, #764]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b54:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008b56:	e01a      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b5c:	3308      	adds	r3, #8
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f002 fce8 	bl	800b534 <RCCEx_PLL2_Config>
 8008b64:	4603      	mov	r3, r0
 8008b66:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008b6a:	e010      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b70:	332c      	adds	r3, #44	; 0x2c
 8008b72:	4618      	mov	r0, r3
 8008b74:	f002 fd76 	bl	800b664 <RCCEx_PLL3_Config>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008b7e:	e006      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008b86:	e002      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8008b88:	bf00      	nop
 8008b8a:	e000      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8008b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b8e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10d      	bne.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8008b96:	4bad      	ldr	r3, [pc, #692]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008b98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008b9c:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8008ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ba4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ba8:	4aa8      	ldr	r2, [pc, #672]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008baa:	430b      	orrs	r3, r1
 8008bac:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008bb0:	e003      	b.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008bb6:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008bca:	2300      	movs	r3, #0
 8008bcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008bd0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	d053      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8008bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008be6:	d033      	beq.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8008be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bec:	d82c      	bhi.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bf2:	d02f      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8008bf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bf8:	d826      	bhi.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bfe:	d008      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8008c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c04:	d820      	bhi.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00a      	beq.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c0e:	d011      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008c10:	e01a      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008c12:	4b8e      	ldr	r3, [pc, #568]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c16:	4a8d      	ldr	r2, [pc, #564]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c1c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008c1e:	e01a      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c24:	3308      	adds	r3, #8
 8008c26:	4618      	mov	r0, r3
 8008c28:	f002 fc84 	bl	800b534 <RCCEx_PLL2_Config>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008c32:	e010      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c38:	332c      	adds	r3, #44	; 0x2c
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f002 fd12 	bl	800b664 <RCCEx_PLL3_Config>
 8008c40:	4603      	mov	r3, r0
 8008c42:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008c46:	e006      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008c4e:	e002      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8008c50:	bf00      	nop
 8008c52:	e000      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8008c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c56:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10d      	bne.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8008c5e:	4b7b      	ldr	r3, [pc, #492]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008c60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008c64:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8008c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c70:	4a76      	ldr	r2, [pc, #472]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008c72:	430b      	orrs	r3, r1
 8008c74:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008c78:	e003      	b.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c7a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008c7e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8008c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008c8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c92:	2300      	movs	r3, #0
 8008c94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c98:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	d046      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8008ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ca6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008caa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008cae:	d028      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008cb0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008cb4:	d821      	bhi.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cba:	d022      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008cbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cc0:	d81b      	bhi.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008cc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cc6:	d01c      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008cc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ccc:	d815      	bhi.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cd2:	d008      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8008cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cd8:	d80f      	bhi.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d011      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ce2:	d00e      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008ce4:	e009      	b.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cea:	3308      	adds	r3, #8
 8008cec:	4618      	mov	r0, r3
 8008cee:	f002 fc21 	bl	800b534 <RCCEx_PLL2_Config>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008cf8:	e004      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008d00:	e000      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8008d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d04:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10d      	bne.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008d0c:	4b4f      	ldr	r3, [pc, #316]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008d0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008d12:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008d1e:	4a4b      	ldr	r2, [pc, #300]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008d20:	430b      	orrs	r3, r1
 8008d22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008d26:	e003      	b.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d28:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008d2c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8008d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d38:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008d3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d40:	2300      	movs	r3, #0
 8008d42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d46:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	d03f      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8008d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d58:	2b04      	cmp	r3, #4
 8008d5a:	d81e      	bhi.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x622>
 8008d5c:	a201      	add	r2, pc, #4	; (adr r2, 8008d64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8008d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d62:	bf00      	nop
 8008d64:	08008da3 	.word	0x08008da3
 8008d68:	08008d79 	.word	0x08008d79
 8008d6c:	08008d87 	.word	0x08008d87
 8008d70:	08008da3 	.word	0x08008da3
 8008d74:	08008da3 	.word	0x08008da3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008d78:	4b34      	ldr	r3, [pc, #208]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7c:	4a33      	ldr	r2, [pc, #204]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d82:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8008d84:	e00e      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d8a:	332c      	adds	r3, #44	; 0x2c
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f002 fc69 	bl	800b664 <RCCEx_PLL3_Config>
 8008d92:	4603      	mov	r3, r0
 8008d94:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008d98:	e004      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008da0:	e000      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 8008da2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008da4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10d      	bne.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8008dac:	4b27      	ldr	r3, [pc, #156]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008dae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008db2:	f023 0107 	bic.w	r1, r3, #7
 8008db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008dbe:	4a23      	ldr	r2, [pc, #140]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008dc0:	430b      	orrs	r3, r1
 8008dc2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008dc6:	e003      	b.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008dcc:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8008dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008ddc:	67bb      	str	r3, [r7, #120]	; 0x78
 8008dde:	2300      	movs	r3, #0
 8008de0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008de2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008de6:	460b      	mov	r3, r1
 8008de8:	4313      	orrs	r3, r2
 8008dea:	d04c      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8008dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008df4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008df8:	d02a      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8008dfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008dfe:	d821      	bhi.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8008e00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e04:	d026      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8008e06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e0a:	d81b      	bhi.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8008e0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e10:	d00e      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8008e12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e16:	d815      	bhi.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d01d      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8008e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e20:	d110      	bne.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e22:	4b0a      	ldr	r3, [pc, #40]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e26:	4a09      	ldr	r2, [pc, #36]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e2c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8008e2e:	e014      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e34:	332c      	adds	r3, #44	; 0x2c
 8008e36:	4618      	mov	r0, r3
 8008e38:	f002 fc14 	bl	800b664 <RCCEx_PLL3_Config>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008e42:	e00a      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008e4a:	e006      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008e4c:	46020c00 	.word	0x46020c00
        break;
 8008e50:	bf00      	nop
 8008e52:	e002      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8008e54:	bf00      	nop
 8008e56:	e000      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8008e58:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008e5a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10d      	bne.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8008e62:	4baf      	ldr	r3, [pc, #700]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008e68:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e74:	4aaa      	ldr	r2, [pc, #680]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008e76:	430b      	orrs	r3, r1
 8008e78:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008e7c:	e003      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e7e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008e82:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008e92:	673b      	str	r3, [r7, #112]	; 0x70
 8008e94:	2300      	movs	r3, #0
 8008e96:	677b      	str	r3, [r7, #116]	; 0x74
 8008e98:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	f000 80b5 	beq.w	800900e <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008eaa:	4b9d      	ldr	r3, [pc, #628]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008eb0:	f003 0304 	and.w	r3, r3, #4
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d113      	bne.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008eb8:	4b99      	ldr	r3, [pc, #612]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ebe:	4a98      	ldr	r2, [pc, #608]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008ec0:	f043 0304 	orr.w	r3, r3, #4
 8008ec4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008ec8:	4b95      	ldr	r3, [pc, #596]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ece:	f003 0304 	and.w	r3, r3, #4
 8008ed2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008ed6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
      pwrclkchanged = SET;
 8008eda:	2301      	movs	r3, #1
 8008edc:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008ee0:	4b90      	ldr	r3, [pc, #576]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee4:	4a8f      	ldr	r2, [pc, #572]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008ee6:	f043 0301 	orr.w	r3, r3, #1
 8008eea:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008eec:	f7fa f902 	bl	80030f4 <HAL_GetTick>
 8008ef0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008ef4:	e00b      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ef6:	f7fa f8fd 	bl	80030f4 <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d903      	bls.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008f0c:	e005      	b.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008f0e:	4b85      	ldr	r3, [pc, #532]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d0ed      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 8008f1a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d165      	bne.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008f22:	4b7f      	ldr	r3, [pc, #508]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8008f30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d023      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8008f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f3c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8008f40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d01b      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008f48:	4b75      	ldr	r3, [pc, #468]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008f4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008f56:	4b72      	ldr	r3, [pc, #456]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f5c:	4a70      	ldr	r2, [pc, #448]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f66:	4b6e      	ldr	r3, [pc, #440]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f6c:	4a6c      	ldr	r2, [pc, #432]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008f76:	4a6a      	ldr	r2, [pc, #424]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008f78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008f7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008f80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d019      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f8c:	f7fa f8b2 	bl	80030f4 <HAL_GetTick>
 8008f90:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f94:	e00d      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f96:	f7fa f8ad 	bl	80030f4 <HAL_GetTick>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fa0:	1ad2      	subs	r2, r2, r3
 8008fa2:	f241 3388 	movw	r3, #5000	; 0x1388
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d903      	bls.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
            break;
 8008fb0:	e006      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008fb2:	4b5b      	ldr	r3, [pc, #364]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008fb8:	f003 0302 	and.w	r3, r3, #2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d0ea      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 8008fc0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10d      	bne.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8008fc8:	4b55      	ldr	r3, [pc, #340]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008fca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008fce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fd6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8008fda:	4a51      	ldr	r2, [pc, #324]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008fdc:	430b      	orrs	r3, r1
 8008fde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008fe2:	e008      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008fe4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008fe8:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 8008fec:	e003      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fee:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008ff2:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008ff6:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d107      	bne.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ffe:	4b48      	ldr	r3, [pc, #288]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009004:	4a46      	ldr	r2, [pc, #280]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009006:	f023 0304 	bic.w	r3, r3, #4
 800900a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800900e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800901a:	66bb      	str	r3, [r7, #104]	; 0x68
 800901c:	2300      	movs	r3, #0
 800901e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009020:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009024:	460b      	mov	r3, r1
 8009026:	4313      	orrs	r3, r2
 8009028:	d042      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800902a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800902e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009032:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009036:	d022      	beq.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x906>
 8009038:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800903c:	d81b      	bhi.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800903e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009042:	d011      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8009044:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009048:	d815      	bhi.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800904a:	2b00      	cmp	r3, #0
 800904c:	d019      	beq.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800904e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009052:	d110      	bne.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009058:	3308      	adds	r3, #8
 800905a:	4618      	mov	r0, r3
 800905c:	f002 fa6a 	bl	800b534 <RCCEx_PLL2_Config>
 8009060:	4603      	mov	r3, r0
 8009062:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009066:	e00d      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009068:	4b2d      	ldr	r3, [pc, #180]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800906a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906c:	4a2c      	ldr	r2, [pc, #176]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800906e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009072:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8009074:	e006      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800907c:	e002      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800907e:	bf00      	nop
 8009080:	e000      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8009082:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009084:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10d      	bne.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800908c:	4b24      	ldr	r3, [pc, #144]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800908e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009092:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8009096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800909a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800909e:	4a20      	ldr	r2, [pc, #128]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80090a0:	430b      	orrs	r3, r1
 80090a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80090a6:	e003      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80090ac:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80090b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80090bc:	663b      	str	r3, [r7, #96]	; 0x60
 80090be:	2300      	movs	r3, #0
 80090c0:	667b      	str	r3, [r7, #100]	; 0x64
 80090c2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80090c6:	460b      	mov	r3, r1
 80090c8:	4313      	orrs	r3, r2
 80090ca:	d031      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80090cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80090d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090d8:	d00b      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80090da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090de:	d804      	bhi.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x972>
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d008      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80090e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090e8:	d007      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80090f0:	e004      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 80090f2:	bf00      	nop
 80090f4:	e002      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 80090f6:	bf00      	nop
 80090f8:	e000      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 80090fa:	bf00      	nop
    }
    if (ret == HAL_OK)
 80090fc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009100:	2b00      	cmp	r3, #0
 8009102:	d111      	bne.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009104:	4b06      	ldr	r3, [pc, #24]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009106:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800910a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800910e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009112:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009116:	4a02      	ldr	r2, [pc, #8]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009118:	430b      	orrs	r3, r1
 800911a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800911e:	e007      	b.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8009120:	46020c00 	.word	0x46020c00
 8009124:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009128:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800912c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8009130:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009138:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800913c:	65bb      	str	r3, [r7, #88]	; 0x58
 800913e:	2300      	movs	r3, #0
 8009140:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009142:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009146:	460b      	mov	r3, r1
 8009148:	4313      	orrs	r3, r2
 800914a:	d00c      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800914c:	4bb2      	ldr	r3, [pc, #712]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800914e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009152:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8009156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800915a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800915e:	4aae      	ldr	r2, [pc, #696]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009160:	430b      	orrs	r3, r1
 8009162:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8009166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800916a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009172:	653b      	str	r3, [r7, #80]	; 0x50
 8009174:	2300      	movs	r3, #0
 8009176:	657b      	str	r3, [r7, #84]	; 0x54
 8009178:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800917c:	460b      	mov	r3, r1
 800917e:	4313      	orrs	r3, r2
 8009180:	d019      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8009182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009186:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800918a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800918e:	d105      	bne.n	800919c <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009190:	4ba1      	ldr	r3, [pc, #644]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009194:	4aa0      	ldr	r2, [pc, #640]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800919a:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800919c:	4b9e      	ldr	r3, [pc, #632]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800919e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80091a2:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80091a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091ae:	4a9a      	ldr	r2, [pc, #616]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80091b0:	430b      	orrs	r3, r1
 80091b2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80091b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80091c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80091c4:	2300      	movs	r3, #0
 80091c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80091cc:	460b      	mov	r3, r1
 80091ce:	4313      	orrs	r3, r2
 80091d0:	d00c      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80091d2:	4b91      	ldr	r3, [pc, #580]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80091d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091d8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80091dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80091e4:	4a8c      	ldr	r2, [pc, #560]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80091e6:	430b      	orrs	r3, r1
 80091e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80091ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80091f8:	643b      	str	r3, [r7, #64]	; 0x40
 80091fa:	2300      	movs	r3, #0
 80091fc:	647b      	str	r3, [r7, #68]	; 0x44
 80091fe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009202:	460b      	mov	r3, r1
 8009204:	4313      	orrs	r3, r2
 8009206:	d00c      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8009208:	4b83      	ldr	r3, [pc, #524]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800920a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800920e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009216:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800921a:	4a7f      	ldr	r2, [pc, #508]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800921c:	430b      	orrs	r3, r1
 800921e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009222:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800922e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009230:	2300      	movs	r3, #0
 8009232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009234:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009238:	460b      	mov	r3, r1
 800923a:	4313      	orrs	r3, r2
 800923c:	d00c      	beq.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800923e:	4b76      	ldr	r3, [pc, #472]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009244:	f023 0118 	bic.w	r1, r3, #24
 8009248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800924c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009250:	4a71      	ldr	r2, [pc, #452]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009252:	430b      	orrs	r3, r1
 8009254:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009258:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009260:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8009264:	633b      	str	r3, [r7, #48]	; 0x30
 8009266:	2300      	movs	r3, #0
 8009268:	637b      	str	r3, [r7, #52]	; 0x34
 800926a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800926e:	460b      	mov	r3, r1
 8009270:	4313      	orrs	r3, r2
 8009272:	d032      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8009274:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009278:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800927c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009280:	d105      	bne.n	800928e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009282:	4b65      	ldr	r3, [pc, #404]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009286:	4a64      	ldr	r2, [pc, #400]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800928c:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800928e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009292:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009296:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800929a:	d108      	bne.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800929c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092a0:	3308      	adds	r3, #8
 80092a2:	4618      	mov	r0, r3
 80092a4:	f002 f946 	bl	800b534 <RCCEx_PLL2_Config>
 80092a8:	4603      	mov	r3, r0
 80092aa:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }
    if (ret == HAL_OK)
 80092ae:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10d      	bne.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80092b6:	4b58      	ldr	r3, [pc, #352]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80092b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80092bc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80092c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80092c8:	4a53      	ldr	r2, [pc, #332]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80092ca:	430b      	orrs	r3, r1
 80092cc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80092d0:	e003      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80092d6:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 80092da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e2:	2100      	movs	r1, #0
 80092e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80092e6:	f003 0301 	and.w	r3, r3, #1
 80092ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092ec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80092f0:	460b      	mov	r3, r1
 80092f2:	4313      	orrs	r3, r2
 80092f4:	d04a      	beq.n	800938c <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 80092f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092fa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80092fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009302:	d01e      	beq.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8009304:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009308:	d825      	bhi.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800930a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800930e:	d00e      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 8009310:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009314:	d81f      	bhi.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8009316:	2b00      	cmp	r3, #0
 8009318:	d021      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800931a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800931e:	d11a      	bne.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009320:	4b3d      	ldr	r3, [pc, #244]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009324:	4a3c      	ldr	r2, [pc, #240]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800932a:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800932c:	e018      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800932e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009332:	3308      	adds	r3, #8
 8009334:	4618      	mov	r0, r3
 8009336:	f002 f8fd 	bl	800b534 <RCCEx_PLL2_Config>
 800933a:	4603      	mov	r3, r0
 800933c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009340:	e00e      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009346:	332c      	adds	r3, #44	; 0x2c
 8009348:	4618      	mov	r0, r3
 800934a:	f002 f98b 	bl	800b664 <RCCEx_PLL3_Config>
 800934e:	4603      	mov	r3, r0
 8009350:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009354:	e004      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800935c:	e000      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800935e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009360:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10d      	bne.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8009368:	4b2b      	ldr	r3, [pc, #172]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800936a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800936e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009376:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800937a:	4927      	ldr	r1, [pc, #156]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800937c:	4313      	orrs	r3, r2
 800937e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009382:	e003      	b.n	800938c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009384:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009388:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800938c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009394:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8009398:	623b      	str	r3, [r7, #32]
 800939a:	2300      	movs	r3, #0
 800939c:	627b      	str	r3, [r7, #36]	; 0x24
 800939e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80093a2:	460b      	mov	r3, r1
 80093a4:	4313      	orrs	r3, r2
 80093a6:	d03d      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80093a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093b4:	d00e      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80093b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093ba:	d815      	bhi.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d017      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80093c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80093c4:	d110      	bne.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093c6:	4b14      	ldr	r3, [pc, #80]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80093c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ca:	4a13      	ldr	r2, [pc, #76]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80093cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093d0:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80093d2:	e00e      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80093d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093d8:	3308      	adds	r3, #8
 80093da:	4618      	mov	r0, r3
 80093dc:	f002 f8aa 	bl	800b534 <RCCEx_PLL2_Config>
 80093e0:	4603      	mov	r3, r0
 80093e2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80093e6:	e004      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80093ee:	e000      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80093f0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80093f2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d110      	bne.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80093fa:	4b07      	ldr	r3, [pc, #28]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80093fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009400:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800940c:	4902      	ldr	r1, [pc, #8]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800940e:	4313      	orrs	r3, r2
 8009410:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8009414:	e006      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8009416:	bf00      	nop
 8009418:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800941c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009420:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8009424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009430:	61bb      	str	r3, [r7, #24]
 8009432:	2300      	movs	r3, #0
 8009434:	61fb      	str	r3, [r7, #28]
 8009436:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800943a:	460b      	mov	r3, r1
 800943c:	4313      	orrs	r3, r2
 800943e:	d00c      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8009440:	4b68      	ldr	r3, [pc, #416]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009442:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009446:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800944a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800944e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009452:	4964      	ldr	r1, [pc, #400]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009454:	4313      	orrs	r3, r2
 8009456:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800945a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009462:	2100      	movs	r1, #0
 8009464:	6139      	str	r1, [r7, #16]
 8009466:	f003 0302 	and.w	r3, r3, #2
 800946a:	617b      	str	r3, [r7, #20]
 800946c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009470:	460b      	mov	r3, r1
 8009472:	4313      	orrs	r3, r2
 8009474:	d036      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 8009476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800947a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00c      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8009482:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009486:	d113      	bne.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009488:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800948c:	3308      	adds	r3, #8
 800948e:	4618      	mov	r0, r3
 8009490:	f002 f850 	bl	800b534 <RCCEx_PLL2_Config>
 8009494:	4603      	mov	r3, r0
 8009496:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800949a:	e00d      	b.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800949c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094a0:	332c      	adds	r3, #44	; 0x2c
 80094a2:	4618      	mov	r0, r3
 80094a4:	f002 f8de 	bl	800b664 <RCCEx_PLL3_Config>
 80094a8:	4603      	mov	r3, r0
 80094aa:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 80094ae:	e003      	b.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80094b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094b8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10d      	bne.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 80094c0:	4b48      	ldr	r3, [pc, #288]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80094c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80094c6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80094ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80094d2:	4944      	ldr	r1, [pc, #272]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80094d4:	4313      	orrs	r3, r2
 80094d6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80094da:	e003      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094dc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80094e0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80094e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ec:	2100      	movs	r1, #0
 80094ee:	60b9      	str	r1, [r7, #8]
 80094f0:	f003 0304 	and.w	r3, r3, #4
 80094f4:	60fb      	str	r3, [r7, #12]
 80094f6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80094fa:	460b      	mov	r3, r1
 80094fc:	4313      	orrs	r3, r2
 80094fe:	d024      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 8009500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009504:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009508:	2b00      	cmp	r3, #0
 800950a:	d108      	bne.n	800951e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800950c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009510:	332c      	adds	r3, #44	; 0x2c
 8009512:	4618      	mov	r0, r3
 8009514:	f002 f8a6 	bl	800b664 <RCCEx_PLL3_Config>
 8009518:	4603      	mov	r3, r0
 800951a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }

    if (ret == HAL_OK)
 800951e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10d      	bne.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 8009526:	4b2f      	ldr	r3, [pc, #188]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009528:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800952c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009534:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009538:	492a      	ldr	r1, [pc, #168]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800953a:	4313      	orrs	r3, r2
 800953c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009540:	e003      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009542:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009546:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800954a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800954e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009552:	2100      	movs	r1, #0
 8009554:	6039      	str	r1, [r7, #0]
 8009556:	f003 0308 	and.w	r3, r3, #8
 800955a:	607b      	str	r3, [r7, #4]
 800955c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009560:	460b      	mov	r3, r1
 8009562:	4313      	orrs	r3, r2
 8009564:	d036      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8009566:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800956a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800956e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009572:	d00d      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8009574:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009578:	d811      	bhi.n	800959e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800957a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800957e:	d012      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8009580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009584:	d80b      	bhi.n	800959e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00d      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800958a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800958e:	d106      	bne.n	800959e <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009590:	4b14      	ldr	r3, [pc, #80]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009594:	4a13      	ldr	r2, [pc, #76]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800959a:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800959c:	e004      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80095a4:	e000      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 80095a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095a8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10d      	bne.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 80095b0:	4b0c      	ldr	r3, [pc, #48]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80095b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80095b6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80095ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095be:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80095c2:	4908      	ldr	r1, [pc, #32]	; (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80095c4:	4313      	orrs	r3, r2
 80095c6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80095ca:	e003      	b.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095cc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80095d0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80095d4:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
}
 80095d8:	4618      	mov	r0, r3
 80095da:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80095de:	46bd      	mov	sp, r7
 80095e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095e4:	46020c00 	.word	0x46020c00

080095e8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b089      	sub	sp, #36	; 0x24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80095f0:	4ba6      	ldr	r3, [pc, #664]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80095f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80095fa:	4ba4      	ldr	r3, [pc, #656]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80095fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fe:	f003 0303 	and.w	r3, r3, #3
 8009602:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009604:	4ba1      	ldr	r3, [pc, #644]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009608:	0a1b      	lsrs	r3, r3, #8
 800960a:	f003 030f 	and.w	r3, r3, #15
 800960e:	3301      	adds	r3, #1
 8009610:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009612:	4b9e      	ldr	r3, [pc, #632]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009616:	091b      	lsrs	r3, r3, #4
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800961e:	4b9b      	ldr	r3, [pc, #620]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009622:	08db      	lsrs	r3, r3, #3
 8009624:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	fb02 f303 	mul.w	r3, r2, r3
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009636:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2b03      	cmp	r3, #3
 800963e:	d062      	beq.n	8009706 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	2b03      	cmp	r3, #3
 8009644:	f200 8081 	bhi.w	800974a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d024      	beq.n	8009698 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	2b02      	cmp	r3, #2
 8009652:	d17a      	bne.n	800974a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	ee07 3a90 	vmov	s15, r3
 800965a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8009890 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009666:	4b89      	ldr	r3, [pc, #548]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800966a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966e:	ee07 3a90 	vmov	s15, r3
 8009672:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009676:	ed97 6a02 	vldr	s12, [r7, #8]
 800967a:	eddf 5a86 	vldr	s11, [pc, #536]	; 8009894 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800967e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009682:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800968a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800968e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009692:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009696:	e08f      	b.n	80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009698:	4b7c      	ldr	r3, [pc, #496]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d005      	beq.n	80096b0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80096a4:	4b79      	ldr	r3, [pc, #484]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	0f1b      	lsrs	r3, r3, #28
 80096aa:	f003 030f 	and.w	r3, r3, #15
 80096ae:	e006      	b.n	80096be <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80096b0:	4b76      	ldr	r3, [pc, #472]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80096b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80096b6:	041b      	lsls	r3, r3, #16
 80096b8:	0f1b      	lsrs	r3, r3, #28
 80096ba:	f003 030f 	and.w	r3, r3, #15
 80096be:	4a76      	ldr	r2, [pc, #472]	; (8009898 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80096c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096c4:	ee07 3a90 	vmov	s15, r3
 80096c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	ee07 3a90 	vmov	s15, r3
 80096d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	ee07 3a90 	vmov	s15, r3
 80096e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80096e8:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8009894 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80096ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80096fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009700:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009704:	e058      	b.n	80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	ee07 3a90 	vmov	s15, r3
 800970c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009710:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009890 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009718:	4b5c      	ldr	r3, [pc, #368]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800971a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800971c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009720:	ee07 3a90 	vmov	s15, r3
 8009724:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009728:	ed97 6a02 	vldr	s12, [r7, #8]
 800972c:	eddf 5a59 	vldr	s11, [pc, #356]	; 8009894 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009730:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009734:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009738:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800973c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009744:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009748:	e036      	b.n	80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800974a:	4b50      	ldr	r3, [pc, #320]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d005      	beq.n	8009762 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8009756:	4b4d      	ldr	r3, [pc, #308]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	0f1b      	lsrs	r3, r3, #28
 800975c:	f003 030f 	and.w	r3, r3, #15
 8009760:	e006      	b.n	8009770 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8009762:	4b4a      	ldr	r3, [pc, #296]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009764:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009768:	041b      	lsls	r3, r3, #16
 800976a:	0f1b      	lsrs	r3, r3, #28
 800976c:	f003 030f 	and.w	r3, r3, #15
 8009770:	4a49      	ldr	r2, [pc, #292]	; (8009898 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009776:	ee07 3a90 	vmov	s15, r3
 800977a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	ee07 3a90 	vmov	s15, r3
 8009784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	ee07 3a90 	vmov	s15, r3
 8009792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009796:	ed97 6a02 	vldr	s12, [r7, #8]
 800979a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009894 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800979e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80097ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097b6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80097b8:	4b34      	ldr	r3, [pc, #208]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80097ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d017      	beq.n	80097f4 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80097c4:	4b31      	ldr	r3, [pc, #196]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80097c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c8:	0a5b      	lsrs	r3, r3, #9
 80097ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ce:	ee07 3a90 	vmov	s15, r3
 80097d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80097d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097da:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80097de:	edd7 6a07 	vldr	s13, [r7, #28]
 80097e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ea:	ee17 2a90 	vmov	r2, s15
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	601a      	str	r2, [r3, #0]
 80097f2:	e002      	b.n	80097fa <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80097fa:	4b24      	ldr	r3, [pc, #144]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80097fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009802:	2b00      	cmp	r3, #0
 8009804:	d017      	beq.n	8009836 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009806:	4b21      	ldr	r3, [pc, #132]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800980a:	0c1b      	lsrs	r3, r3, #16
 800980c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009810:	ee07 3a90 	vmov	s15, r3
 8009814:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8009818:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800981c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009820:	edd7 6a07 	vldr	s13, [r7, #28]
 8009824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800982c:	ee17 2a90 	vmov	r2, s15
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	605a      	str	r2, [r3, #4]
 8009834:	e002      	b.n	800983c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800983c:	4b13      	ldr	r3, [pc, #76]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800983e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d017      	beq.n	8009878 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009848:	4b10      	ldr	r3, [pc, #64]	; (800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800984a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800984c:	0e1b      	lsrs	r3, r3, #24
 800984e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009852:	ee07 3a90 	vmov	s15, r3
 8009856:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800985a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800985e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009862:	edd7 6a07 	vldr	s13, [r7, #28]
 8009866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800986a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800986e:	ee17 2a90 	vmov	r2, s15
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009876:	e002      	b.n	800987e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	609a      	str	r2, [r3, #8]
}
 800987e:	bf00      	nop
 8009880:	3724      	adds	r7, #36	; 0x24
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	46020c00 	.word	0x46020c00
 8009890:	4b742400 	.word	0x4b742400
 8009894:	46000000 	.word	0x46000000
 8009898:	0800f280 	.word	0x0800f280

0800989c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800989c:	b480      	push	{r7}
 800989e:	b089      	sub	sp, #36	; 0x24
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80098a4:	4ba6      	ldr	r3, [pc, #664]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80098a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ac:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80098ae:	4ba4      	ldr	r3, [pc, #656]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80098b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b2:	f003 0303 	and.w	r3, r3, #3
 80098b6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80098b8:	4ba1      	ldr	r3, [pc, #644]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80098ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098bc:	0a1b      	lsrs	r3, r3, #8
 80098be:	f003 030f 	and.w	r3, r3, #15
 80098c2:	3301      	adds	r3, #1
 80098c4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80098c6:	4b9e      	ldr	r3, [pc, #632]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80098c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ca:	091b      	lsrs	r3, r3, #4
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80098d2:	4b9b      	ldr	r3, [pc, #620]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80098d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d6:	08db      	lsrs	r3, r3, #3
 80098d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	fb02 f303 	mul.w	r3, r2, r3
 80098e2:	ee07 3a90 	vmov	s15, r3
 80098e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ea:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	2b03      	cmp	r3, #3
 80098f2:	d062      	beq.n	80099ba <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	f200 8081 	bhi.w	80099fe <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d024      	beq.n	800994c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	2b02      	cmp	r3, #2
 8009906:	d17a      	bne.n	80099fe <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	ee07 3a90 	vmov	s15, r3
 800990e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009912:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8009b44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8009916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991a:	4b89      	ldr	r3, [pc, #548]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800991c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800991e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009922:	ee07 3a90 	vmov	s15, r3
 8009926:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800992a:	ed97 6a02 	vldr	s12, [r7, #8]
 800992e:	eddf 5a86 	vldr	s11, [pc, #536]	; 8009b48 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009932:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009936:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800993a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800993e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009946:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800994a:	e08f      	b.n	8009a6c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800994c:	4b7c      	ldr	r3, [pc, #496]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d005      	beq.n	8009964 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8009958:	4b79      	ldr	r3, [pc, #484]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	0f1b      	lsrs	r3, r3, #28
 800995e:	f003 030f 	and.w	r3, r3, #15
 8009962:	e006      	b.n	8009972 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8009964:	4b76      	ldr	r3, [pc, #472]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009966:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800996a:	041b      	lsls	r3, r3, #16
 800996c:	0f1b      	lsrs	r3, r3, #28
 800996e:	f003 030f 	and.w	r3, r3, #15
 8009972:	4a76      	ldr	r2, [pc, #472]	; (8009b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009978:	ee07 3a90 	vmov	s15, r3
 800997c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	ee07 3a90 	vmov	s15, r3
 8009986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800998a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	ee07 3a90 	vmov	s15, r3
 8009994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009998:	ed97 6a02 	vldr	s12, [r7, #8]
 800999c:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8009b48 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80099a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80099b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099b8:	e058      	b.n	8009a6c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	ee07 3a90 	vmov	s15, r3
 80099c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80099c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099cc:	4b5c      	ldr	r3, [pc, #368]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80099ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099d4:	ee07 3a90 	vmov	s15, r3
 80099d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80099dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80099e0:	eddf 5a59 	vldr	s11, [pc, #356]	; 8009b48 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80099e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80099e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80099ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80099f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099fc:	e036      	b.n	8009a6c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80099fe:	4b50      	ldr	r3, [pc, #320]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d005      	beq.n	8009a16 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8009a0a:	4b4d      	ldr	r3, [pc, #308]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	0f1b      	lsrs	r3, r3, #28
 8009a10:	f003 030f 	and.w	r3, r3, #15
 8009a14:	e006      	b.n	8009a24 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8009a16:	4b4a      	ldr	r3, [pc, #296]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009a18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009a1c:	041b      	lsls	r3, r3, #16
 8009a1e:	0f1b      	lsrs	r3, r3, #28
 8009a20:	f003 030f 	and.w	r3, r3, #15
 8009a24:	4a49      	ldr	r2, [pc, #292]	; (8009b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a2a:	ee07 3a90 	vmov	s15, r3
 8009a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	ee07 3a90 	vmov	s15, r3
 8009a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	ee07 3a90 	vmov	s15, r3
 8009a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a4e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009b48 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a6a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8009a6c:	4b34      	ldr	r3, [pc, #208]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d017      	beq.n	8009aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009a78:	4b31      	ldr	r3, [pc, #196]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a7c:	0a5b      	lsrs	r3, r3, #9
 8009a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a82:	ee07 3a90 	vmov	s15, r3
 8009a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8009a8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a8e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009a92:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a9e:	ee17 2a90 	vmov	r2, s15
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	601a      	str	r2, [r3, #0]
 8009aa6:	e002      	b.n	8009aae <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009aae:	4b24      	ldr	r3, [pc, #144]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d017      	beq.n	8009aea <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009aba:	4b21      	ldr	r3, [pc, #132]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009abe:	0c1b      	lsrs	r3, r3, #16
 8009ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ac4:	ee07 3a90 	vmov	s15, r3
 8009ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009acc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ad0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009ad4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ae0:	ee17 2a90 	vmov	r2, s15
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	605a      	str	r2, [r3, #4]
 8009ae8:	e002      	b.n	8009af0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009af0:	4b13      	ldr	r3, [pc, #76]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d017      	beq.n	8009b2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009afc:	4b10      	ldr	r3, [pc, #64]	; (8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b00:	0e1b      	lsrs	r3, r3, #24
 8009b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b06:	ee07 3a90 	vmov	s15, r3
 8009b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8009b0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b12:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009b16:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b22:	ee17 2a90 	vmov	r2, s15
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009b2a:	e002      	b.n	8009b32 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	609a      	str	r2, [r3, #8]
}
 8009b32:	bf00      	nop
 8009b34:	3724      	adds	r7, #36	; 0x24
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	46020c00 	.word	0x46020c00
 8009b44:	4b742400 	.word	0x4b742400
 8009b48:	46000000 	.word	0x46000000
 8009b4c:	0800f280 	.word	0x0800f280

08009b50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b089      	sub	sp, #36	; 0x24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009b58:	4ba6      	ldr	r3, [pc, #664]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b60:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8009b62:	4ba4      	ldr	r3, [pc, #656]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b66:	f003 0303 	and.w	r3, r3, #3
 8009b6a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8009b6c:	4ba1      	ldr	r3, [pc, #644]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b70:	0a1b      	lsrs	r3, r3, #8
 8009b72:	f003 030f 	and.w	r3, r3, #15
 8009b76:	3301      	adds	r3, #1
 8009b78:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8009b7a:	4b9e      	ldr	r3, [pc, #632]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7e:	091b      	lsrs	r3, r3, #4
 8009b80:	f003 0301 	and.w	r3, r3, #1
 8009b84:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8009b86:	4b9b      	ldr	r3, [pc, #620]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b8a:	08db      	lsrs	r3, r3, #3
 8009b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	fb02 f303 	mul.w	r3, r2, r3
 8009b96:	ee07 3a90 	vmov	s15, r3
 8009b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b9e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b03      	cmp	r3, #3
 8009ba6:	d062      	beq.n	8009c6e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	f200 8081 	bhi.w	8009cb2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d024      	beq.n	8009c00 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d17a      	bne.n	8009cb2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	ee07 3a90 	vmov	s15, r3
 8009bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc6:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8009df8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8009bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bce:	4b89      	ldr	r3, [pc, #548]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd6:	ee07 3a90 	vmov	s15, r3
 8009bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8009be2:	eddf 5a86 	vldr	s11, [pc, #536]	; 8009dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bfa:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8009bfe:	e08f      	b.n	8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009c00:	4b7c      	ldr	r3, [pc, #496]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d005      	beq.n	8009c18 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8009c0c:	4b79      	ldr	r3, [pc, #484]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	0f1b      	lsrs	r3, r3, #28
 8009c12:	f003 030f 	and.w	r3, r3, #15
 8009c16:	e006      	b.n	8009c26 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8009c18:	4b76      	ldr	r3, [pc, #472]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009c1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c1e:	041b      	lsls	r3, r3, #16
 8009c20:	0f1b      	lsrs	r3, r3, #28
 8009c22:	f003 030f 	and.w	r3, r3, #15
 8009c26:	4a76      	ldr	r2, [pc, #472]	; (8009e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8009c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c2c:	ee07 3a90 	vmov	s15, r3
 8009c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	ee07 3a90 	vmov	s15, r3
 8009c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	ee07 3a90 	vmov	s15, r3
 8009c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c50:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8009dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009c54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c60:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c6c:	e058      	b.n	8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	ee07 3a90 	vmov	s15, r3
 8009c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c78:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009df8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8009c7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c80:	4b5c      	ldr	r3, [pc, #368]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c88:	ee07 3a90 	vmov	s15, r3
 8009c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c90:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c94:	eddf 5a59 	vldr	s11, [pc, #356]	; 8009dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009c98:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009c9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ca0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cb0:	e036      	b.n	8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009cb2:	4b50      	ldr	r3, [pc, #320]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d005      	beq.n	8009cca <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8009cbe:	4b4d      	ldr	r3, [pc, #308]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	0f1b      	lsrs	r3, r3, #28
 8009cc4:	f003 030f 	and.w	r3, r3, #15
 8009cc8:	e006      	b.n	8009cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8009cca:	4b4a      	ldr	r3, [pc, #296]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009ccc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009cd0:	041b      	lsls	r3, r3, #16
 8009cd2:	0f1b      	lsrs	r3, r3, #28
 8009cd4:	f003 030f 	and.w	r3, r3, #15
 8009cd8:	4a49      	ldr	r2, [pc, #292]	; (8009e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8009cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cde:	ee07 3a90 	vmov	s15, r3
 8009ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	ee07 3a90 	vmov	s15, r3
 8009cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	ee07 3a90 	vmov	s15, r3
 8009cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d02:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d1e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8009d20:	4b34      	ldr	r3, [pc, #208]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d017      	beq.n	8009d5c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009d2c:	4b31      	ldr	r3, [pc, #196]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d30:	0a5b      	lsrs	r3, r3, #9
 8009d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d36:	ee07 3a90 	vmov	s15, r3
 8009d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8009d3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d42:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009d46:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d52:	ee17 2a90 	vmov	r2, s15
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	601a      	str	r2, [r3, #0]
 8009d5a:	e002      	b.n	8009d62 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8009d62:	4b24      	ldr	r3, [pc, #144]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d017      	beq.n	8009d9e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009d6e:	4b21      	ldr	r3, [pc, #132]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d72:	0c1b      	lsrs	r3, r3, #16
 8009d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d78:	ee07 3a90 	vmov	s15, r3
 8009d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8009d80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d84:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009d88:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d94:	ee17 2a90 	vmov	r2, s15
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	605a      	str	r2, [r3, #4]
 8009d9c:	e002      	b.n	8009da4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8009da4:	4b13      	ldr	r3, [pc, #76]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d017      	beq.n	8009de0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009db0:	4b10      	ldr	r3, [pc, #64]	; (8009df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009db4:	0e1b      	lsrs	r3, r3, #24
 8009db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dba:	ee07 3a90 	vmov	s15, r3
 8009dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8009dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dd6:	ee17 2a90 	vmov	r2, s15
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009dde:	e002      	b.n	8009de6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	609a      	str	r2, [r3, #8]
}
 8009de6:	bf00      	nop
 8009de8:	3724      	adds	r7, #36	; 0x24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	46020c00 	.word	0x46020c00
 8009df8:	4b742400 	.word	0x4b742400
 8009dfc:	46000000 	.word	0x46000000
 8009e00:	0800f280 	.word	0x0800f280

08009e04 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b08e      	sub	sp, #56	; 0x38
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8009e0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e12:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8009e16:	430b      	orrs	r3, r1
 8009e18:	d145      	bne.n	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009e1a:	4ba7      	ldr	r3, [pc, #668]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009e1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e24:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8009e26:	4ba4      	ldr	r3, [pc, #656]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009e28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e2c:	f003 0302 	and.w	r3, r3, #2
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d108      	bne.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e3a:	d104      	bne.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e40:	637b      	str	r3, [r7, #52]	; 0x34
 8009e42:	f001 bb5a 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8009e46:	4b9c      	ldr	r3, [pc, #624]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e54:	d114      	bne.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8009e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e5c:	d110      	bne.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e5e:	4b96      	ldr	r3, [pc, #600]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e6c:	d103      	bne.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8009e6e:	23fa      	movs	r3, #250	; 0xfa
 8009e70:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e72:	f001 bb42 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 8009e76:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009e7a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e7c:	f001 bb3d 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8009e80:	4b8d      	ldr	r3, [pc, #564]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e8c:	d107      	bne.n	8009e9e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e94:	d103      	bne.n	8009e9e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8009e96:	4b89      	ldr	r3, [pc, #548]	; (800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009e98:	637b      	str	r3, [r7, #52]	; 0x34
 8009e9a:	f001 bb2e 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8009ea2:	f001 bb2a 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eaa:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009eae:	430b      	orrs	r3, r1
 8009eb0:	d151      	bne.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009eb2:	4b81      	ldr	r3, [pc, #516]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009eb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009eb8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009ebc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec0:	2b80      	cmp	r3, #128	; 0x80
 8009ec2:	d035      	beq.n	8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec6:	2b80      	cmp	r3, #128	; 0x80
 8009ec8:	d841      	bhi.n	8009f4e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ecc:	2b60      	cmp	r3, #96	; 0x60
 8009ece:	d02a      	beq.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed2:	2b60      	cmp	r3, #96	; 0x60
 8009ed4:	d83b      	bhi.n	8009f4e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed8:	2b40      	cmp	r3, #64	; 0x40
 8009eda:	d009      	beq.n	8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ede:	2b40      	cmp	r3, #64	; 0x40
 8009ee0:	d835      	bhi.n	8009f4e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d00c      	beq.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eea:	2b20      	cmp	r3, #32
 8009eec:	d012      	beq.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009eee:	e02e      	b.n	8009f4e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7ff fb77 	bl	80095e8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009efe:	f001 bafc 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f02:	f107 0318 	add.w	r3, r7, #24
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7ff fcc8 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f10:	f001 baf3 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f14:	f107 030c 	add.w	r3, r7, #12
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7ff fe19 	bl	8009b50 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f22:	f001 baea 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009f26:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009f2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f2c:	f001 bae5 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f30:	4b61      	ldr	r3, [pc, #388]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f3c:	d103      	bne.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8009f3e:	4b60      	ldr	r3, [pc, #384]	; (800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009f40:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009f42:	f001 bada 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009f46:	2300      	movs	r3, #0
 8009f48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f4a:	f001 bad6 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f52:	f001 bad2 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009f56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f5a:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009f5e:	430b      	orrs	r3, r1
 8009f60:	d158      	bne.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009f62:	4b55      	ldr	r3, [pc, #340]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009f64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009f68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f6c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f74:	d03b      	beq.n	8009fee <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8009f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f7c:	d846      	bhi.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f84:	d02e      	beq.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8009f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f8c:	d83e      	bhi.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f94:	d00b      	beq.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f9c:	d836      	bhi.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00d      	beq.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8009fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009faa:	d012      	beq.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8009fac:	e02e      	b.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7ff fb18 	bl	80095e8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009fbc:	f001 ba9d 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fc0:	f107 0318 	add.w	r3, r7, #24
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7ff fc69 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009fce:	f001 ba94 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fd2:	f107 030c 	add.w	r3, r7, #12
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7ff fdba 	bl	8009b50 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009fe0:	f001 ba8b 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009fe4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009fe8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009fea:	f001 ba86 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009fee:	4b32      	ldr	r3, [pc, #200]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ffa:	d103      	bne.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8009ffc:	4b30      	ldr	r3, [pc, #192]	; (800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009ffe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a000:	f001 ba7b 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a004:	2300      	movs	r3, #0
 800a006:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a008:	f001 ba77 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800a00c:	2300      	movs	r3, #0
 800a00e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a010:	f001 ba73 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800a014:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a018:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a01c:	430b      	orrs	r3, r1
 800a01e:	d126      	bne.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800a020:	4b25      	ldr	r3, [pc, #148]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a022:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a02a:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800a02c:	4b22      	ldr	r3, [pc, #136]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a038:	d106      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d103      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800a040:	4b1f      	ldr	r3, [pc, #124]	; (800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a042:	637b      	str	r3, [r7, #52]	; 0x34
 800a044:	f001 ba59 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800a048:	4b1b      	ldr	r3, [pc, #108]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a054:	d107      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a05c:	d103      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800a05e:	4b19      	ldr	r3, [pc, #100]	; (800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a060:	637b      	str	r3, [r7, #52]	; 0x34
 800a062:	f001 ba4a 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800a066:	2300      	movs	r3, #0
 800a068:	637b      	str	r3, [r7, #52]	; 0x34
 800a06a:	f001 ba46 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800a06e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a072:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800a076:	430b      	orrs	r3, r1
 800a078:	d16e      	bne.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a07a:	4b0f      	ldr	r3, [pc, #60]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a07c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a080:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a084:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a08c:	d03d      	beq.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a094:	d85c      	bhi.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a098:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a09c:	d014      	beq.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800a09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0a4:	d854      	bhi.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d01f      	beq.n	800a0ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a0b2:	d012      	beq.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800a0b4:	e04c      	b.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a0b6:	bf00      	nop
 800a0b8:	46020c00 	.word	0x46020c00
 800a0bc:	0007a120 	.word	0x0007a120
 800a0c0:	00f42400 	.word	0x00f42400
 800a0c4:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7ff fa8b 	bl	80095e8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a0d6:	f001 ba10 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0da:	f107 0318 	add.w	r3, r7, #24
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7ff fbdc 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a0e8:	f001 ba07 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a0ec:	4ba7      	ldr	r3, [pc, #668]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0f8:	d103      	bne.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800a0fa:	4ba5      	ldr	r3, [pc, #660]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a0fc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a0fe:	f001 b9fc 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a102:	2300      	movs	r3, #0
 800a104:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a106:	f001 b9f8 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a10a:	4ba0      	ldr	r3, [pc, #640]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f003 0320 	and.w	r3, r3, #32
 800a112:	2b20      	cmp	r3, #32
 800a114:	d118      	bne.n	800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a116:	4b9d      	ldr	r3, [pc, #628]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d005      	beq.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a122:	4b9a      	ldr	r3, [pc, #616]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	0e1b      	lsrs	r3, r3, #24
 800a128:	f003 030f 	and.w	r3, r3, #15
 800a12c:	e006      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a12e:	4b97      	ldr	r3, [pc, #604]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a134:	041b      	lsls	r3, r3, #16
 800a136:	0e1b      	lsrs	r3, r3, #24
 800a138:	f003 030f 	and.w	r3, r3, #15
 800a13c:	4a95      	ldr	r2, [pc, #596]	; (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a13e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a142:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a144:	f001 b9d9 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a148:	2300      	movs	r3, #0
 800a14a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a14c:	f001 b9d5 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800a150:	2300      	movs	r3, #0
 800a152:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a154:	f001 b9d1 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a15c:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800a160:	430b      	orrs	r3, r1
 800a162:	d17f      	bne.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a164:	4b89      	ldr	r3, [pc, #548]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a166:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a16a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a16e:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800a170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a172:	2b00      	cmp	r3, #0
 800a174:	d165      	bne.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a176:	4b85      	ldr	r3, [pc, #532]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a17c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a180:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a188:	d034      	beq.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a190:	d853      	bhi.n	800a23a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a198:	d00b      	beq.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800a19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1a0:	d84b      	bhi.n	800a23a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d016      	beq.n	800a1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a1ae:	d009      	beq.n	800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a1b0:	e043      	b.n	800a23a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7ff fa16 	bl	80095e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1be:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a1c0:	f001 b99b 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1c4:	f107 0318 	add.w	r3, r7, #24
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7ff fb67 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a1d2:	f001 b992 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a1d6:	4b6d      	ldr	r3, [pc, #436]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1e2:	d103      	bne.n	800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800a1e4:	4b6a      	ldr	r3, [pc, #424]	; (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a1e6:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a1e8:	f001 b987 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a1f0:	f001 b983 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a1f4:	4b65      	ldr	r3, [pc, #404]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 0320 	and.w	r3, r3, #32
 800a1fc:	2b20      	cmp	r3, #32
 800a1fe:	d118      	bne.n	800a232 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a200:	4b62      	ldr	r3, [pc, #392]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d005      	beq.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800a20c:	4b5f      	ldr	r3, [pc, #380]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	0e1b      	lsrs	r3, r3, #24
 800a212:	f003 030f 	and.w	r3, r3, #15
 800a216:	e006      	b.n	800a226 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a218:	4b5c      	ldr	r3, [pc, #368]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a21a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a21e:	041b      	lsls	r3, r3, #16
 800a220:	0e1b      	lsrs	r3, r3, #24
 800a222:	f003 030f 	and.w	r3, r3, #15
 800a226:	4a5b      	ldr	r2, [pc, #364]	; (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a22c:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a22e:	f001 b964 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800a232:	2300      	movs	r3, #0
 800a234:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a236:	f001 b960 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800a23a:	2300      	movs	r3, #0
 800a23c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a23e:	f001 b95c 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800a242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a248:	d108      	bne.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a24a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a24e:	4618      	mov	r0, r3
 800a250:	f7ff f9ca 	bl	80095e8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	637b      	str	r3, [r7, #52]	; 0x34
 800a258:	f001 b94f 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800a25c:	2300      	movs	r3, #0
 800a25e:	637b      	str	r3, [r7, #52]	; 0x34
 800a260:	f001 b94b 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800a264:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a268:	1e51      	subs	r1, r2, #1
 800a26a:	430b      	orrs	r3, r1
 800a26c:	d136      	bne.n	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a26e:	4b47      	ldr	r3, [pc, #284]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a274:	f003 0303 	and.w	r3, r3, #3
 800a278:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800a27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d104      	bne.n	800a28a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800a280:	f7fe f968 	bl	8008554 <HAL_RCC_GetPCLK2Freq>
 800a284:	6378      	str	r0, [r7, #52]	; 0x34
 800a286:	f001 b938 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800a28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d104      	bne.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a290:	f7fe f830 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800a294:	6378      	str	r0, [r7, #52]	; 0x34
 800a296:	f001 b930 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800a29a:	4b3c      	ldr	r3, [pc, #240]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2a6:	d106      	bne.n	800a2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d103      	bne.n	800a2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800a2ae:	4b3a      	ldr	r3, [pc, #232]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a2b0:	637b      	str	r3, [r7, #52]	; 0x34
 800a2b2:	f001 b922 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800a2b6:	4b35      	ldr	r3, [pc, #212]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a2b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a2bc:	f003 0302 	and.w	r3, r3, #2
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d107      	bne.n	800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c6:	2b03      	cmp	r3, #3
 800a2c8:	d104      	bne.n	800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800a2ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2ce:	637b      	str	r3, [r7, #52]	; 0x34
 800a2d0:	f001 b913 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	637b      	str	r3, [r7, #52]	; 0x34
 800a2d8:	f001 b90f 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800a2dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2e0:	1e91      	subs	r1, r2, #2
 800a2e2:	430b      	orrs	r3, r1
 800a2e4:	d136      	bne.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a2e6:	4b29      	ldr	r3, [pc, #164]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a2e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2ec:	f003 030c 	and.w	r3, r3, #12
 800a2f0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d104      	bne.n	800a302 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a2f8:	f7fe f918 	bl	800852c <HAL_RCC_GetPCLK1Freq>
 800a2fc:	6378      	str	r0, [r7, #52]	; 0x34
 800a2fe:	f001 b8fc 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800a302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a304:	2b04      	cmp	r3, #4
 800a306:	d104      	bne.n	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a308:	f7fd fff4 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800a30c:	6378      	str	r0, [r7, #52]	; 0x34
 800a30e:	f001 b8f4 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800a312:	4b1e      	ldr	r3, [pc, #120]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a31a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a31e:	d106      	bne.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a322:	2b08      	cmp	r3, #8
 800a324:	d103      	bne.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800a326:	4b1c      	ldr	r3, [pc, #112]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a328:	637b      	str	r3, [r7, #52]	; 0x34
 800a32a:	f001 b8e6 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800a32e:	4b17      	ldr	r3, [pc, #92]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a334:	f003 0302 	and.w	r3, r3, #2
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d107      	bne.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800a33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33e:	2b0c      	cmp	r3, #12
 800a340:	d104      	bne.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800a342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a346:	637b      	str	r3, [r7, #52]	; 0x34
 800a348:	f001 b8d7 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800a34c:	2300      	movs	r3, #0
 800a34e:	637b      	str	r3, [r7, #52]	; 0x34
 800a350:	f001 b8d3 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800a354:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a358:	1f11      	subs	r1, r2, #4
 800a35a:	430b      	orrs	r3, r1
 800a35c:	d13f      	bne.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a35e:	4b0b      	ldr	r3, [pc, #44]	; (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a364:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a368:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d104      	bne.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a370:	f7fe f8dc 	bl	800852c <HAL_RCC_GetPCLK1Freq>
 800a374:	6378      	str	r0, [r7, #52]	; 0x34
 800a376:	f001 b8c0 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800a37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37c:	2b10      	cmp	r3, #16
 800a37e:	d10d      	bne.n	800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a380:	f7fd ffb8 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800a384:	6378      	str	r0, [r7, #52]	; 0x34
 800a386:	f001 b8b8 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a38a:	bf00      	nop
 800a38c:	46020c00 	.word	0x46020c00
 800a390:	02dc6c00 	.word	0x02dc6c00
 800a394:	0800f280 	.word	0x0800f280
 800a398:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800a39c:	4ba8      	ldr	r3, [pc, #672]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3a8:	d106      	bne.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ac:	2b20      	cmp	r3, #32
 800a3ae:	d103      	bne.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800a3b0:	4ba4      	ldr	r3, [pc, #656]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a3b2:	637b      	str	r3, [r7, #52]	; 0x34
 800a3b4:	f001 b8a1 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800a3b8:	4ba1      	ldr	r3, [pc, #644]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a3ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a3be:	f003 0302 	and.w	r3, r3, #2
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d107      	bne.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c8:	2b30      	cmp	r3, #48	; 0x30
 800a3ca:	d104      	bne.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800a3cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a3d2:	f001 b892 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	637b      	str	r3, [r7, #52]	; 0x34
 800a3da:	f001 b88e 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800a3de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3e2:	f1a2 0108 	sub.w	r1, r2, #8
 800a3e6:	430b      	orrs	r3, r1
 800a3e8:	d136      	bne.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a3ea:	4b95      	ldr	r3, [pc, #596]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a3ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a3f4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d104      	bne.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a3fc:	f7fe f896 	bl	800852c <HAL_RCC_GetPCLK1Freq>
 800a400:	6378      	str	r0, [r7, #52]	; 0x34
 800a402:	f001 b87a 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800a406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a408:	2b40      	cmp	r3, #64	; 0x40
 800a40a:	d104      	bne.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a40c:	f7fd ff72 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800a410:	6378      	str	r0, [r7, #52]	; 0x34
 800a412:	f001 b872 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800a416:	4b8a      	ldr	r3, [pc, #552]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a41e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a422:	d106      	bne.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800a424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a426:	2b80      	cmp	r3, #128	; 0x80
 800a428:	d103      	bne.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800a42a:	4b86      	ldr	r3, [pc, #536]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a42c:	637b      	str	r3, [r7, #52]	; 0x34
 800a42e:	f001 b864 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800a432:	4b83      	ldr	r3, [pc, #524]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a438:	f003 0302 	and.w	r3, r3, #2
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d107      	bne.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a442:	2bc0      	cmp	r3, #192	; 0xc0
 800a444:	d104      	bne.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800a446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a44a:	637b      	str	r3, [r7, #52]	; 0x34
 800a44c:	f001 b855 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800a450:	2300      	movs	r3, #0
 800a452:	637b      	str	r3, [r7, #52]	; 0x34
 800a454:	f001 b851 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800a458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a45c:	f1a2 0110 	sub.w	r1, r2, #16
 800a460:	430b      	orrs	r3, r1
 800a462:	d139      	bne.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a464:	4b76      	ldr	r3, [pc, #472]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a46a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a46e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a472:	2b00      	cmp	r3, #0
 800a474:	d104      	bne.n	800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a476:	f7fe f859 	bl	800852c <HAL_RCC_GetPCLK1Freq>
 800a47a:	6378      	str	r0, [r7, #52]	; 0x34
 800a47c:	f001 b83d 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800a480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a486:	d104      	bne.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a488:	f7fd ff34 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800a48c:	6378      	str	r0, [r7, #52]	; 0x34
 800a48e:	f001 b834 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a492:	4b6b      	ldr	r3, [pc, #428]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a49a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a49e:	d107      	bne.n	800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800a4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4a6:	d103      	bne.n	800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800a4a8:	4b66      	ldr	r3, [pc, #408]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a4aa:	637b      	str	r3, [r7, #52]	; 0x34
 800a4ac:	f001 b825 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a4b0:	4b63      	ldr	r3, [pc, #396]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a4b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a4b6:	f003 0302 	and.w	r3, r3, #2
 800a4ba:	2b02      	cmp	r3, #2
 800a4bc:	d108      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4c4:	d104      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800a4c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a4cc:	f001 b815 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	637b      	str	r3, [r7, #52]	; 0x34
 800a4d4:	f001 b811 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800a4d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4dc:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800a4e0:	430b      	orrs	r3, r1
 800a4e2:	d139      	bne.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800a4e4:	4b56      	ldr	r3, [pc, #344]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a4e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a4ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a4ee:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d104      	bne.n	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a4f6:	f7fe f819 	bl	800852c <HAL_RCC_GetPCLK1Freq>
 800a4fa:	6378      	str	r0, [r7, #52]	; 0x34
 800a4fc:	f000 bffd 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800a500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a506:	d104      	bne.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a508:	f7fd fef4 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800a50c:	6378      	str	r0, [r7, #52]	; 0x34
 800a50e:	f000 bff4 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800a512:	4b4b      	ldr	r3, [pc, #300]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a51a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a51e:	d107      	bne.n	800a530 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800a520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a522:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a526:	d103      	bne.n	800a530 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800a528:	4b46      	ldr	r3, [pc, #280]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a52a:	637b      	str	r3, [r7, #52]	; 0x34
 800a52c:	f000 bfe5 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800a530:	4b43      	ldr	r3, [pc, #268]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a536:	f003 0302 	and.w	r3, r3, #2
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d108      	bne.n	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800a53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a540:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a544:	d104      	bne.n	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800a546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a54a:	637b      	str	r3, [r7, #52]	; 0x34
 800a54c:	f000 bfd5 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a550:	2300      	movs	r3, #0
 800a552:	637b      	str	r3, [r7, #52]	; 0x34
 800a554:	f000 bfd1 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800a558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a55c:	f1a2 0120 	sub.w	r1, r2, #32
 800a560:	430b      	orrs	r3, r1
 800a562:	d158      	bne.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a564:	4b36      	ldr	r3, [pc, #216]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a566:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a56a:	f003 0307 	and.w	r3, r3, #7
 800a56e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a572:	2b00      	cmp	r3, #0
 800a574:	d104      	bne.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800a576:	f7fe f801 	bl	800857c <HAL_RCC_GetPCLK3Freq>
 800a57a:	6378      	str	r0, [r7, #52]	; 0x34
 800a57c:	f000 bfbd 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800a580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a582:	2b01      	cmp	r3, #1
 800a584:	d104      	bne.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a586:	f7fd feb5 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800a58a:	6378      	str	r0, [r7, #52]	; 0x34
 800a58c:	f000 bfb5 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a590:	4b2b      	ldr	r3, [pc, #172]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a59c:	d106      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800a59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d103      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800a5a4:	4b27      	ldr	r3, [pc, #156]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a5a6:	637b      	str	r3, [r7, #52]	; 0x34
 800a5a8:	f000 bfa7 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a5ac:	4b24      	ldr	r3, [pc, #144]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a5ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a5b2:	f003 0302 	and.w	r3, r3, #2
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d107      	bne.n	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5bc:	2b03      	cmp	r3, #3
 800a5be:	d104      	bne.n	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800a5c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a5c6:	f000 bf98 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800a5ca:	4b1d      	ldr	r3, [pc, #116]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 0320 	and.w	r3, r3, #32
 800a5d2:	2b20      	cmp	r3, #32
 800a5d4:	d11b      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	2b04      	cmp	r3, #4
 800a5da:	d118      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a5dc:	4b18      	ldr	r3, [pc, #96]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d005      	beq.n	800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800a5e8:	4b15      	ldr	r3, [pc, #84]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	0e1b      	lsrs	r3, r3, #24
 800a5ee:	f003 030f 	and.w	r3, r3, #15
 800a5f2:	e006      	b.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800a5f4:	4b12      	ldr	r3, [pc, #72]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a5f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a5fa:	041b      	lsls	r3, r3, #16
 800a5fc:	0e1b      	lsrs	r3, r3, #24
 800a5fe:	f003 030f 	and.w	r3, r3, #15
 800a602:	4a11      	ldr	r2, [pc, #68]	; (800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a608:	637b      	str	r3, [r7, #52]	; 0x34
 800a60a:	f000 bf76 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800a60e:	2300      	movs	r3, #0
 800a610:	637b      	str	r3, [r7, #52]	; 0x34
 800a612:	f000 bf72 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800a616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a61a:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a61e:	430b      	orrs	r3, r1
 800a620:	d172      	bne.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800a622:	4b07      	ldr	r3, [pc, #28]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a628:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a62c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800a62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a634:	d10a      	bne.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a636:	f7fd fe5d 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800a63a:	6378      	str	r0, [r7, #52]	; 0x34
 800a63c:	f000 bf5d 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a640:	46020c00 	.word	0x46020c00
 800a644:	00f42400 	.word	0x00f42400
 800a648:	0800f280 	.word	0x0800f280
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800a64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a652:	d108      	bne.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a654:	f107 0318 	add.w	r3, r7, #24
 800a658:	4618      	mov	r0, r3
 800a65a:	f7ff f91f 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800a65e:	6a3b      	ldr	r3, [r7, #32]
 800a660:	637b      	str	r3, [r7, #52]	; 0x34
 800a662:	f000 bf4a 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d104      	bne.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800a66c:	f7fd ff44 	bl	80084f8 <HAL_RCC_GetHCLKFreq>
 800a670:	6378      	str	r0, [r7, #52]	; 0x34
 800a672:	f000 bf42 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800a676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a678:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a67c:	d122      	bne.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a67e:	4bb0      	ldr	r3, [pc, #704]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 0320 	and.w	r3, r3, #32
 800a686:	2b20      	cmp	r3, #32
 800a688:	d118      	bne.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a68a:	4bad      	ldr	r3, [pc, #692]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a692:	2b00      	cmp	r3, #0
 800a694:	d005      	beq.n	800a6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800a696:	4baa      	ldr	r3, [pc, #680]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	0e1b      	lsrs	r3, r3, #24
 800a69c:	f003 030f 	and.w	r3, r3, #15
 800a6a0:	e006      	b.n	800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800a6a2:	4ba7      	ldr	r3, [pc, #668]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a6a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a6a8:	041b      	lsls	r3, r3, #16
 800a6aa:	0e1b      	lsrs	r3, r3, #24
 800a6ac:	f003 030f 	and.w	r3, r3, #15
 800a6b0:	4aa4      	ldr	r2, [pc, #656]	; (800a944 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a6b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6b6:	637b      	str	r3, [r7, #52]	; 0x34
 800a6b8:	f000 bf1f 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	637b      	str	r3, [r7, #52]	; 0x34
 800a6c0:	f000 bf1b 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800a6c4:	4b9e      	ldr	r3, [pc, #632]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6d0:	d107      	bne.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800a6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6d8:	d103      	bne.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800a6da:	4b9b      	ldr	r3, [pc, #620]	; (800a948 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a6dc:	637b      	str	r3, [r7, #52]	; 0x34
 800a6de:	f000 bf0c 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800a6e2:	4b97      	ldr	r3, [pc, #604]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6ee:	d107      	bne.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6f6:	d103      	bne.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800a6f8:	4b93      	ldr	r3, [pc, #588]	; (800a948 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a6fa:	637b      	str	r3, [r7, #52]	; 0x34
 800a6fc:	f000 befd 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800a700:	2300      	movs	r3, #0
 800a702:	637b      	str	r3, [r7, #52]	; 0x34
 800a704:	f000 bef9 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800a708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a70c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a710:	430b      	orrs	r3, r1
 800a712:	d158      	bne.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800a714:	4b8a      	ldr	r3, [pc, #552]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a716:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a71a:	f003 0307 	and.w	r3, r3, #7
 800a71e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a722:	2b04      	cmp	r3, #4
 800a724:	d84b      	bhi.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800a726:	a201      	add	r2, pc, #4	; (adr r2, 800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800a728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a72c:	0800a765 	.word	0x0800a765
 800a730:	0800a741 	.word	0x0800a741
 800a734:	0800a753 	.word	0x0800a753
 800a738:	0800a76f 	.word	0x0800a76f
 800a73c:	0800a779 	.word	0x0800a779
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a744:	4618      	mov	r0, r3
 800a746:	f7fe ff4f 	bl	80095e8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a74e:	f000 bed4 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a752:	f107 030c 	add.w	r3, r7, #12
 800a756:	4618      	mov	r0, r3
 800a758:	f7ff f9fa 	bl	8009b50 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a760:	f000 becb 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a764:	f7fd fec8 	bl	80084f8 <HAL_RCC_GetHCLKFreq>
 800a768:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a76a:	f000 bec6 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a76e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a772:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a774:	f000 bec1 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a778:	4b71      	ldr	r3, [pc, #452]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 0320 	and.w	r3, r3, #32
 800a780:	2b20      	cmp	r3, #32
 800a782:	d118      	bne.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a784:	4b6e      	ldr	r3, [pc, #440]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d005      	beq.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800a790:	4b6b      	ldr	r3, [pc, #428]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	0e1b      	lsrs	r3, r3, #24
 800a796:	f003 030f 	and.w	r3, r3, #15
 800a79a:	e006      	b.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800a79c:	4b68      	ldr	r3, [pc, #416]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a79e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a7a2:	041b      	lsls	r3, r3, #16
 800a7a4:	0e1b      	lsrs	r3, r3, #24
 800a7a6:	f003 030f 	and.w	r3, r3, #15
 800a7aa:	4a66      	ldr	r2, [pc, #408]	; (800a944 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7b0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a7b2:	f000 bea2 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a7ba:	f000 be9e 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a7c2:	f000 be9a 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800a7c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7ca:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800a7ce:	430b      	orrs	r3, r1
 800a7d0:	d167      	bne.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800a7d2:	4b5b      	ldr	r3, [pc, #364]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a7d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a7d8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a7dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a7e4:	d036      	beq.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a7ec:	d855      	bhi.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a7f4:	d029      	beq.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a7fc:	d84d      	bhi.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a804:	d013      	beq.n	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a80c:	d845      	bhi.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800a80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a810:	2b00      	cmp	r3, #0
 800a812:	d015      	beq.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800a814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a81a:	d13e      	bne.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a81c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a820:	4618      	mov	r0, r3
 800a822:	f7fe fee1 	bl	80095e8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a828:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a82a:	f000 be66 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a82e:	f107 030c 	add.w	r3, r7, #12
 800a832:	4618      	mov	r0, r3
 800a834:	f7ff f98c 	bl	8009b50 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a83c:	f000 be5d 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a840:	f7fd fe5a 	bl	80084f8 <HAL_RCC_GetHCLKFreq>
 800a844:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a846:	f000 be58 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a84a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a84e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a850:	f000 be53 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a854:	4b3a      	ldr	r3, [pc, #232]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 0320 	and.w	r3, r3, #32
 800a85c:	2b20      	cmp	r3, #32
 800a85e:	d118      	bne.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a860:	4b37      	ldr	r3, [pc, #220]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d005      	beq.n	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800a86c:	4b34      	ldr	r3, [pc, #208]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	0e1b      	lsrs	r3, r3, #24
 800a872:	f003 030f 	and.w	r3, r3, #15
 800a876:	e006      	b.n	800a886 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a878:	4b31      	ldr	r3, [pc, #196]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a87a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a87e:	041b      	lsls	r3, r3, #16
 800a880:	0e1b      	lsrs	r3, r3, #24
 800a882:	f003 030f 	and.w	r3, r3, #15
 800a886:	4a2f      	ldr	r2, [pc, #188]	; (800a944 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a88c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a88e:	f000 be34 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a892:	2300      	movs	r3, #0
 800a894:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a896:	f000 be30 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800a89a:	2300      	movs	r3, #0
 800a89c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a89e:	f000 be2c 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800a8a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8a6:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800a8aa:	430b      	orrs	r3, r1
 800a8ac:	d152      	bne.n	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a8ae:	4b24      	ldr	r3, [pc, #144]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a8b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a8b8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d104      	bne.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a8c0:	f7fd fe34 	bl	800852c <HAL_RCC_GetPCLK1Freq>
 800a8c4:	6378      	str	r0, [r7, #52]	; 0x34
 800a8c6:	f000 be18 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800a8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8d0:	d104      	bne.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a8d2:	f7fd fd0f 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800a8d6:	6378      	str	r0, [r7, #52]	; 0x34
 800a8d8:	f000 be0f 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800a8dc:	4b18      	ldr	r3, [pc, #96]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8e8:	d107      	bne.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800a8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8f0:	d103      	bne.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800a8f2:	4b15      	ldr	r3, [pc, #84]	; (800a948 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a8f4:	637b      	str	r3, [r7, #52]	; 0x34
 800a8f6:	f000 be00 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800a8fa:	4b11      	ldr	r3, [pc, #68]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f003 0320 	and.w	r3, r3, #32
 800a902:	2b20      	cmp	r3, #32
 800a904:	d122      	bne.n	800a94c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800a906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a908:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a90c:	d11e      	bne.n	800a94c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a90e:	4b0c      	ldr	r3, [pc, #48]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a916:	2b00      	cmp	r3, #0
 800a918:	d005      	beq.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800a91a:	4b09      	ldr	r3, [pc, #36]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	0e1b      	lsrs	r3, r3, #24
 800a920:	f003 030f 	and.w	r3, r3, #15
 800a924:	e006      	b.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800a926:	4b06      	ldr	r3, [pc, #24]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a928:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a92c:	041b      	lsls	r3, r3, #16
 800a92e:	0e1b      	lsrs	r3, r3, #24
 800a930:	f003 030f 	and.w	r3, r3, #15
 800a934:	4a03      	ldr	r2, [pc, #12]	; (800a944 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a93a:	637b      	str	r3, [r7, #52]	; 0x34
 800a93c:	f000 bddd 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a940:	46020c00 	.word	0x46020c00
 800a944:	0800f280 	.word	0x0800f280
 800a948:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800a94c:	2300      	movs	r3, #0
 800a94e:	637b      	str	r3, [r7, #52]	; 0x34
 800a950:	f000 bdd3 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800a954:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a958:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800a95c:	430b      	orrs	r3, r1
 800a95e:	d14c      	bne.n	800a9fa <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a960:	4ba8      	ldr	r3, [pc, #672]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a966:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a96a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d104      	bne.n	800a97c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a972:	f7fd fddb 	bl	800852c <HAL_RCC_GetPCLK1Freq>
 800a976:	6378      	str	r0, [r7, #52]	; 0x34
 800a978:	f000 bdbf 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800a97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a982:	d104      	bne.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a984:	f7fd fcb6 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800a988:	6378      	str	r0, [r7, #52]	; 0x34
 800a98a:	f000 bdb6 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800a98e:	4b9d      	ldr	r3, [pc, #628]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a99a:	d107      	bne.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800a99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9a2:	d103      	bne.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800a9a4:	4b98      	ldr	r3, [pc, #608]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a9a6:	637b      	str	r3, [r7, #52]	; 0x34
 800a9a8:	f000 bda7 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800a9ac:	4b95      	ldr	r3, [pc, #596]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f003 0320 	and.w	r3, r3, #32
 800a9b4:	2b20      	cmp	r3, #32
 800a9b6:	d11c      	bne.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800a9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a9be:	d118      	bne.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a9c0:	4b90      	ldr	r3, [pc, #576]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d005      	beq.n	800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800a9cc:	4b8d      	ldr	r3, [pc, #564]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	0e1b      	lsrs	r3, r3, #24
 800a9d2:	f003 030f 	and.w	r3, r3, #15
 800a9d6:	e006      	b.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800a9d8:	4b8a      	ldr	r3, [pc, #552]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a9da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a9de:	041b      	lsls	r3, r3, #16
 800a9e0:	0e1b      	lsrs	r3, r3, #24
 800a9e2:	f003 030f 	and.w	r3, r3, #15
 800a9e6:	4a89      	ldr	r2, [pc, #548]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a9e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9ec:	637b      	str	r3, [r7, #52]	; 0x34
 800a9ee:	f000 bd84 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	637b      	str	r3, [r7, #52]	; 0x34
 800a9f6:	f000 bd80 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800a9fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9fe:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800aa02:	430b      	orrs	r3, r1
 800aa04:	d158      	bne.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800aa06:	4b7f      	ldr	r3, [pc, #508]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aa08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aa0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aa10:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800aa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa14:	2bc0      	cmp	r3, #192	; 0xc0
 800aa16:	d028      	beq.n	800aa6a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800aa18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1a:	2bc0      	cmp	r3, #192	; 0xc0
 800aa1c:	d848      	bhi.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800aa1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa20:	2b80      	cmp	r3, #128	; 0x80
 800aa22:	d00e      	beq.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800aa24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa26:	2b80      	cmp	r3, #128	; 0x80
 800aa28:	d842      	bhi.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d003      	beq.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800aa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa32:	2b40      	cmp	r3, #64	; 0x40
 800aa34:	d014      	beq.n	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800aa36:	e03b      	b.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800aa38:	f7fd fda0 	bl	800857c <HAL_RCC_GetPCLK3Freq>
 800aa3c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800aa3e:	f000 bd5c 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa42:	4b70      	ldr	r3, [pc, #448]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa4e:	d103      	bne.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800aa50:	4b6d      	ldr	r3, [pc, #436]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800aa52:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aa54:	f000 bd51 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa5c:	f000 bd4d 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800aa60:	f7fd fc48 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800aa64:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800aa66:	f000 bd48 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800aa6a:	4b66      	ldr	r3, [pc, #408]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f003 0320 	and.w	r3, r3, #32
 800aa72:	2b20      	cmp	r3, #32
 800aa74:	d118      	bne.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aa76:	4b63      	ldr	r3, [pc, #396]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d005      	beq.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800aa82:	4b60      	ldr	r3, [pc, #384]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	0e1b      	lsrs	r3, r3, #24
 800aa88:	f003 030f 	and.w	r3, r3, #15
 800aa8c:	e006      	b.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800aa8e:	4b5d      	ldr	r3, [pc, #372]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aa90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aa94:	041b      	lsls	r3, r3, #16
 800aa96:	0e1b      	lsrs	r3, r3, #24
 800aa98:	f003 030f 	and.w	r3, r3, #15
 800aa9c:	4a5b      	ldr	r2, [pc, #364]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800aa9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaa2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aaa4:	f000 bd29 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aaac:	f000 bd25 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800aab0:	2300      	movs	r3, #0
 800aab2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aab4:	f000 bd21 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800aab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aabc:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800aac0:	430b      	orrs	r3, r1
 800aac2:	d14c      	bne.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800aac4:	4b4f      	ldr	r3, [pc, #316]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aaca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aace:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800aad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d104      	bne.n	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800aad6:	f7fd fd29 	bl	800852c <HAL_RCC_GetPCLK1Freq>
 800aada:	6378      	str	r0, [r7, #52]	; 0x34
 800aadc:	f000 bd0d 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800aae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aae6:	d104      	bne.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aae8:	f7fd fc04 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800aaec:	6378      	str	r0, [r7, #52]	; 0x34
 800aaee:	f000 bd04 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800aaf2:	4b44      	ldr	r3, [pc, #272]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aafa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aafe:	d107      	bne.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800ab00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab06:	d103      	bne.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800ab08:	4b3f      	ldr	r3, [pc, #252]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ab0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ab0c:	f000 bcf5 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800ab10:	4b3c      	ldr	r3, [pc, #240]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 0320 	and.w	r3, r3, #32
 800ab18:	2b20      	cmp	r3, #32
 800ab1a:	d11c      	bne.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ab22:	d118      	bne.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ab24:	4b37      	ldr	r3, [pc, #220]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d005      	beq.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800ab30:	4b34      	ldr	r3, [pc, #208]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	0e1b      	lsrs	r3, r3, #24
 800ab36:	f003 030f 	and.w	r3, r3, #15
 800ab3a:	e006      	b.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800ab3c:	4b31      	ldr	r3, [pc, #196]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ab3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ab42:	041b      	lsls	r3, r3, #16
 800ab44:	0e1b      	lsrs	r3, r3, #24
 800ab46:	f003 030f 	and.w	r3, r3, #15
 800ab4a:	4a30      	ldr	r2, [pc, #192]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800ab4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab50:	637b      	str	r3, [r7, #52]	; 0x34
 800ab52:	f000 bcd2 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800ab56:	2300      	movs	r3, #0
 800ab58:	637b      	str	r3, [r7, #52]	; 0x34
 800ab5a:	f000 bcce 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800ab5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab62:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800ab66:	430b      	orrs	r3, r1
 800ab68:	d152      	bne.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800ab6a:	4b26      	ldr	r3, [pc, #152]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ab6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ab70:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800ab74:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800ab76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d104      	bne.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ab7c:	f7fd fcd6 	bl	800852c <HAL_RCC_GetPCLK1Freq>
 800ab80:	6378      	str	r0, [r7, #52]	; 0x34
 800ab82:	f000 bcba 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800ab86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ab8c:	d104      	bne.n	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ab8e:	f7fd fbb1 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800ab92:	6378      	str	r0, [r7, #52]	; 0x34
 800ab94:	f000 bcb1 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800ab98:	4b1a      	ldr	r3, [pc, #104]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aba4:	d107      	bne.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abac:	d103      	bne.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800abae:	4b16      	ldr	r3, [pc, #88]	; (800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800abb0:	637b      	str	r3, [r7, #52]	; 0x34
 800abb2:	f000 bca2 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800abb6:	4b13      	ldr	r3, [pc, #76]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 0320 	and.w	r3, r3, #32
 800abbe:	2b20      	cmp	r3, #32
 800abc0:	d11c      	bne.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800abc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800abc8:	d118      	bne.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800abca:	4b0e      	ldr	r3, [pc, #56]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d005      	beq.n	800abe2 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800abd6:	4b0b      	ldr	r3, [pc, #44]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	0e1b      	lsrs	r3, r3, #24
 800abdc:	f003 030f 	and.w	r3, r3, #15
 800abe0:	e006      	b.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800abe2:	4b08      	ldr	r3, [pc, #32]	; (800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800abe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800abe8:	041b      	lsls	r3, r3, #16
 800abea:	0e1b      	lsrs	r3, r3, #24
 800abec:	f003 030f 	and.w	r3, r3, #15
 800abf0:	4a06      	ldr	r2, [pc, #24]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800abf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abf6:	637b      	str	r3, [r7, #52]	; 0x34
 800abf8:	f000 bc7f 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800abfc:	2300      	movs	r3, #0
 800abfe:	637b      	str	r3, [r7, #52]	; 0x34
 800ac00:	f000 bc7b 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ac04:	46020c00 	.word	0x46020c00
 800ac08:	00f42400 	.word	0x00f42400
 800ac0c:	0800f280 	.word	0x0800f280
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800ac10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac14:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800ac18:	430b      	orrs	r3, r1
 800ac1a:	d14c      	bne.n	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800ac1c:	4ba6      	ldr	r3, [pc, #664]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ac1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ac22:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800ac26:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800ac28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d104      	bne.n	800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ac2e:	f7fd fc7d 	bl	800852c <HAL_RCC_GetPCLK1Freq>
 800ac32:	6378      	str	r0, [r7, #52]	; 0x34
 800ac34:	f000 bc61 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800ac38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac3e:	d104      	bne.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ac40:	f7fd fb58 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800ac44:	6378      	str	r0, [r7, #52]	; 0x34
 800ac46:	f000 bc58 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800ac4a:	4b9b      	ldr	r3, [pc, #620]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac56:	d107      	bne.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800ac58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac5e:	d103      	bne.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800ac60:	4b96      	ldr	r3, [pc, #600]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800ac62:	637b      	str	r3, [r7, #52]	; 0x34
 800ac64:	f000 bc49 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800ac68:	4b93      	ldr	r3, [pc, #588]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f003 0320 	and.w	r3, r3, #32
 800ac70:	2b20      	cmp	r3, #32
 800ac72:	d11c      	bne.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800ac74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac76:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ac7a:	d118      	bne.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ac7c:	4b8e      	ldr	r3, [pc, #568]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d005      	beq.n	800ac94 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800ac88:	4b8b      	ldr	r3, [pc, #556]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	0e1b      	lsrs	r3, r3, #24
 800ac8e:	f003 030f 	and.w	r3, r3, #15
 800ac92:	e006      	b.n	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800ac94:	4b88      	ldr	r3, [pc, #544]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ac96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac9a:	041b      	lsls	r3, r3, #16
 800ac9c:	0e1b      	lsrs	r3, r3, #24
 800ac9e:	f003 030f 	and.w	r3, r3, #15
 800aca2:	4a87      	ldr	r2, [pc, #540]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800aca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aca8:	637b      	str	r3, [r7, #52]	; 0x34
 800acaa:	f000 bc26 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800acae:	2300      	movs	r3, #0
 800acb0:	637b      	str	r3, [r7, #52]	; 0x34
 800acb2:	f000 bc22 	b.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800acb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acba:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800acbe:	430b      	orrs	r3, r1
 800acc0:	d164      	bne.n	800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800acc2:	4b7d      	ldr	r3, [pc, #500]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800acc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800acc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800accc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800acce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d120      	bne.n	800ad16 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800acd4:	4b78      	ldr	r3, [pc, #480]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f003 0320 	and.w	r3, r3, #32
 800acdc:	2b20      	cmp	r3, #32
 800acde:	d117      	bne.n	800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ace0:	4b75      	ldr	r3, [pc, #468]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d005      	beq.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800acec:	4b72      	ldr	r3, [pc, #456]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	0e1b      	lsrs	r3, r3, #24
 800acf2:	f003 030f 	and.w	r3, r3, #15
 800acf6:	e006      	b.n	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800acf8:	4b6f      	ldr	r3, [pc, #444]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800acfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800acfe:	041b      	lsls	r3, r3, #16
 800ad00:	0e1b      	lsrs	r3, r3, #24
 800ad02:	f003 030f 	and.w	r3, r3, #15
 800ad06:	4a6e      	ldr	r2, [pc, #440]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800ad08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad0c:	637b      	str	r3, [r7, #52]	; 0x34
 800ad0e:	e3f4      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800ad10:	2300      	movs	r3, #0
 800ad12:	637b      	str	r3, [r7, #52]	; 0x34
 800ad14:	e3f1      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800ad16:	4b68      	ldr	r3, [pc, #416]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ad18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ad1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad24:	d112      	bne.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800ad26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad2c:	d10e      	bne.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ad2e:	4b62      	ldr	r3, [pc, #392]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ad30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ad34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad3c:	d102      	bne.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800ad3e:	23fa      	movs	r3, #250	; 0xfa
 800ad40:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ad42:	e3da      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800ad44:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ad48:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ad4a:	e3d6      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800ad4c:	4b5a      	ldr	r3, [pc, #360]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad58:	d106      	bne.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad60:	d102      	bne.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800ad62:	4b56      	ldr	r3, [pc, #344]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800ad64:	637b      	str	r3, [r7, #52]	; 0x34
 800ad66:	e3c8      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800ad68:	4b53      	ldr	r3, [pc, #332]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ad6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ad6e:	f003 0302 	and.w	r3, r3, #2
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	d107      	bne.n	800ad86 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800ad76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad7c:	d103      	bne.n	800ad86 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800ad7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad82:	637b      	str	r3, [r7, #52]	; 0x34
 800ad84:	e3b9      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800ad86:	2300      	movs	r3, #0
 800ad88:	637b      	str	r3, [r7, #52]	; 0x34
 800ad8a:	e3b6      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800ad8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad90:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ad94:	430b      	orrs	r3, r1
 800ad96:	d164      	bne.n	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800ad98:	4b47      	ldr	r3, [pc, #284]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ad9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ad9e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ada2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800ada4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d120      	bne.n	800adec <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800adaa:	4b43      	ldr	r3, [pc, #268]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f003 0320 	and.w	r3, r3, #32
 800adb2:	2b20      	cmp	r3, #32
 800adb4:	d117      	bne.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800adb6:	4b40      	ldr	r3, [pc, #256]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d005      	beq.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800adc2:	4b3d      	ldr	r3, [pc, #244]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	0e1b      	lsrs	r3, r3, #24
 800adc8:	f003 030f 	and.w	r3, r3, #15
 800adcc:	e006      	b.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800adce:	4b3a      	ldr	r3, [pc, #232]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800add0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800add4:	041b      	lsls	r3, r3, #16
 800add6:	0e1b      	lsrs	r3, r3, #24
 800add8:	f003 030f 	and.w	r3, r3, #15
 800addc:	4a38      	ldr	r2, [pc, #224]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800adde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ade2:	637b      	str	r3, [r7, #52]	; 0x34
 800ade4:	e389      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800ade6:	2300      	movs	r3, #0
 800ade8:	637b      	str	r3, [r7, #52]	; 0x34
 800adea:	e386      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800adec:	4b32      	ldr	r3, [pc, #200]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800adee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800adf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800adfa:	d112      	bne.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800adfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae02:	d10e      	bne.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ae04:	4b2c      	ldr	r3, [pc, #176]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ae06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae12:	d102      	bne.n	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800ae14:	23fa      	movs	r3, #250	; 0xfa
 800ae16:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ae18:	e36f      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800ae1a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ae1e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ae20:	e36b      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800ae22:	4b25      	ldr	r3, [pc, #148]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae2e:	d106      	bne.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800ae30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae36:	d102      	bne.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800ae38:	4b20      	ldr	r3, [pc, #128]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800ae3a:	637b      	str	r3, [r7, #52]	; 0x34
 800ae3c:	e35d      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800ae3e:	4b1e      	ldr	r3, [pc, #120]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ae40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae44:	f003 0302 	and.w	r3, r3, #2
 800ae48:	2b02      	cmp	r3, #2
 800ae4a:	d107      	bne.n	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ae52:	d103      	bne.n	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800ae54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae58:	637b      	str	r3, [r7, #52]	; 0x34
 800ae5a:	e34e      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	637b      	str	r3, [r7, #52]	; 0x34
 800ae60:	e34b      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800ae62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae66:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ae6a:	430b      	orrs	r3, r1
 800ae6c:	d14e      	bne.n	800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800ae6e:	4b12      	ldr	r3, [pc, #72]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ae70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae74:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800ae78:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d103      	bne.n	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ae80:	f7fd fb54 	bl	800852c <HAL_RCC_GetPCLK1Freq>
 800ae84:	6378      	str	r0, [r7, #52]	; 0x34
 800ae86:	e338      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800ae88:	4b0b      	ldr	r3, [pc, #44]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ae8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ae8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae96:	d119      	bne.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800ae98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae9e:	d115      	bne.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aea0:	4b05      	ldr	r3, [pc, #20]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aeae:	d109      	bne.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800aeb0:	23fa      	movs	r3, #250	; 0xfa
 800aeb2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aeb4:	e321      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800aeb6:	bf00      	nop
 800aeb8:	46020c00 	.word	0x46020c00
 800aebc:	00f42400 	.word	0x00f42400
 800aec0:	0800f280 	.word	0x0800f280
      }
      else
      {
        frequency = LSI_VALUE;
 800aec4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800aec8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aeca:	e316      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800aecc:	4ba8      	ldr	r3, [pc, #672]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aed8:	d106      	bne.n	800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800aeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aedc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aee0:	d102      	bne.n	800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800aee2:	4ba4      	ldr	r3, [pc, #656]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800aee4:	637b      	str	r3, [r7, #52]	; 0x34
 800aee6:	e308      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800aee8:	4ba1      	ldr	r3, [pc, #644]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aeea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aeee:	f003 0302 	and.w	r3, r3, #2
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	d107      	bne.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800aef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800aefc:	d103      	bne.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800aefe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af02:	637b      	str	r3, [r7, #52]	; 0x34
 800af04:	e2f9      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800af06:	2300      	movs	r3, #0
 800af08:	637b      	str	r3, [r7, #52]	; 0x34
 800af0a:	e2f6      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800af0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af10:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800af14:	430b      	orrs	r3, r1
 800af16:	d12d      	bne.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800af18:	4b95      	ldr	r3, [pc, #596]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800af1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af1e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800af22:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800af24:	4b92      	ldr	r3, [pc, #584]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af30:	d105      	bne.n	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800af32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af34:	2b00      	cmp	r3, #0
 800af36:	d102      	bne.n	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800af38:	4b8e      	ldr	r3, [pc, #568]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800af3a:	637b      	str	r3, [r7, #52]	; 0x34
 800af3c:	e2dd      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800af3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af44:	d107      	bne.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7fe fb4c 	bl	80095e8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af52:	637b      	str	r3, [r7, #52]	; 0x34
 800af54:	e2d1      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800af56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af5c:	d107      	bne.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af5e:	f107 0318 	add.w	r3, r7, #24
 800af62:	4618      	mov	r0, r3
 800af64:	f7fe fc9a 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	637b      	str	r3, [r7, #52]	; 0x34
 800af6c:	e2c5      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800af6e:	2300      	movs	r3, #0
 800af70:	637b      	str	r3, [r7, #52]	; 0x34
 800af72:	e2c2      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800af74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af78:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800af7c:	430b      	orrs	r3, r1
 800af7e:	d156      	bne.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800af80:	4b7b      	ldr	r3, [pc, #492]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800af82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af86:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800af8a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800af8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af92:	d028      	beq.n	800afe6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800af94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af9a:	d845      	bhi.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800af9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afa2:	d013      	beq.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800afa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afaa:	d83d      	bhi.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800afac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d004      	beq.n	800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800afb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afb8:	d004      	beq.n	800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800afba:	e035      	b.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800afbc:	f7fd faca 	bl	8008554 <HAL_RCC_GetPCLK2Freq>
 800afc0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800afc2:	e29a      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800afc4:	f7fd f996 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800afc8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800afca:	e296      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800afcc:	4b68      	ldr	r3, [pc, #416]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afd8:	d102      	bne.n	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800afda:	4b66      	ldr	r3, [pc, #408]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800afdc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800afde:	e28c      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800afe0:	2300      	movs	r3, #0
 800afe2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afe4:	e289      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800afe6:	4b62      	ldr	r3, [pc, #392]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f003 0320 	and.w	r3, r3, #32
 800afee:	2b20      	cmp	r3, #32
 800aff0:	d117      	bne.n	800b022 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aff2:	4b5f      	ldr	r3, [pc, #380]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800affa:	2b00      	cmp	r3, #0
 800affc:	d005      	beq.n	800b00a <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800affe:	4b5c      	ldr	r3, [pc, #368]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	0e1b      	lsrs	r3, r3, #24
 800b004:	f003 030f 	and.w	r3, r3, #15
 800b008:	e006      	b.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800b00a:	4b59      	ldr	r3, [pc, #356]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b00c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b010:	041b      	lsls	r3, r3, #16
 800b012:	0e1b      	lsrs	r3, r3, #24
 800b014:	f003 030f 	and.w	r3, r3, #15
 800b018:	4a57      	ldr	r2, [pc, #348]	; (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800b01a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b01e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b020:	e26b      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b022:	2300      	movs	r3, #0
 800b024:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b026:	e268      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b028:	2300      	movs	r3, #0
 800b02a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b02c:	e265      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800b02e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b032:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800b036:	430b      	orrs	r3, r1
 800b038:	d156      	bne.n	800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b03a:	4b4d      	ldr	r3, [pc, #308]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b03c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b044:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800b046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b048:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b04c:	d028      	beq.n	800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b050:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b054:	d845      	bhi.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800b056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b058:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b05c:	d013      	beq.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800b05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b060:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b064:	d83d      	bhi.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800b066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d004      	beq.n	800b076 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800b06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b072:	d004      	beq.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800b074:	e035      	b.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800b076:	f7fd fa59 	bl	800852c <HAL_RCC_GetPCLK1Freq>
 800b07a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b07c:	e23d      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b07e:	f7fd f939 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800b082:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b084:	e239      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b086:	4b3a      	ldr	r3, [pc, #232]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b08e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b092:	d102      	bne.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800b094:	4b37      	ldr	r3, [pc, #220]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b096:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b098:	e22f      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b09a:	2300      	movs	r3, #0
 800b09c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b09e:	e22c      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b0a0:	4b33      	ldr	r3, [pc, #204]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f003 0320 	and.w	r3, r3, #32
 800b0a8:	2b20      	cmp	r3, #32
 800b0aa:	d117      	bne.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b0ac:	4b30      	ldr	r3, [pc, #192]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d005      	beq.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800b0b8:	4b2d      	ldr	r3, [pc, #180]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	0e1b      	lsrs	r3, r3, #24
 800b0be:	f003 030f 	and.w	r3, r3, #15
 800b0c2:	e006      	b.n	800b0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800b0c4:	4b2a      	ldr	r3, [pc, #168]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b0c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b0ca:	041b      	lsls	r3, r3, #16
 800b0cc:	0e1b      	lsrs	r3, r3, #24
 800b0ce:	f003 030f 	and.w	r3, r3, #15
 800b0d2:	4a29      	ldr	r2, [pc, #164]	; (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800b0d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0d8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b0da:	e20e      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0e0:	e20b      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0e6:	e208      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800b0e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0ec:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800b0f0:	430b      	orrs	r3, r1
 800b0f2:	d17c      	bne.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800b0f4:	4b1e      	ldr	r3, [pc, #120]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b0f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b0fa:	f003 0318 	and.w	r3, r3, #24
 800b0fe:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800b100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b102:	2b18      	cmp	r3, #24
 800b104:	d870      	bhi.n	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800b106:	a201      	add	r2, pc, #4	; (adr r2, 800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800b108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10c:	0800b17d 	.word	0x0800b17d
 800b110:	0800b1e9 	.word	0x0800b1e9
 800b114:	0800b1e9 	.word	0x0800b1e9
 800b118:	0800b1e9 	.word	0x0800b1e9
 800b11c:	0800b1e9 	.word	0x0800b1e9
 800b120:	0800b1e9 	.word	0x0800b1e9
 800b124:	0800b1e9 	.word	0x0800b1e9
 800b128:	0800b1e9 	.word	0x0800b1e9
 800b12c:	0800b185 	.word	0x0800b185
 800b130:	0800b1e9 	.word	0x0800b1e9
 800b134:	0800b1e9 	.word	0x0800b1e9
 800b138:	0800b1e9 	.word	0x0800b1e9
 800b13c:	0800b1e9 	.word	0x0800b1e9
 800b140:	0800b1e9 	.word	0x0800b1e9
 800b144:	0800b1e9 	.word	0x0800b1e9
 800b148:	0800b1e9 	.word	0x0800b1e9
 800b14c:	0800b18d 	.word	0x0800b18d
 800b150:	0800b1e9 	.word	0x0800b1e9
 800b154:	0800b1e9 	.word	0x0800b1e9
 800b158:	0800b1e9 	.word	0x0800b1e9
 800b15c:	0800b1e9 	.word	0x0800b1e9
 800b160:	0800b1e9 	.word	0x0800b1e9
 800b164:	0800b1e9 	.word	0x0800b1e9
 800b168:	0800b1e9 	.word	0x0800b1e9
 800b16c:	0800b1a7 	.word	0x0800b1a7
 800b170:	46020c00 	.word	0x46020c00
 800b174:	00f42400 	.word	0x00f42400
 800b178:	0800f280 	.word	0x0800f280
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800b17c:	f7fd f9fe 	bl	800857c <HAL_RCC_GetPCLK3Freq>
 800b180:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b182:	e1ba      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b184:	f7fd f8b6 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800b188:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b18a:	e1b6      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b18c:	4b9f      	ldr	r3, [pc, #636]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b198:	d102      	bne.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800b19a:	4b9d      	ldr	r3, [pc, #628]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b19c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b19e:	e1ac      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1a4:	e1a9      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b1a6:	4b99      	ldr	r3, [pc, #612]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f003 0320 	and.w	r3, r3, #32
 800b1ae:	2b20      	cmp	r3, #32
 800b1b0:	d117      	bne.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b1b2:	4b96      	ldr	r3, [pc, #600]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d005      	beq.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800b1be:	4b93      	ldr	r3, [pc, #588]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	0e1b      	lsrs	r3, r3, #24
 800b1c4:	f003 030f 	and.w	r3, r3, #15
 800b1c8:	e006      	b.n	800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800b1ca:	4b90      	ldr	r3, [pc, #576]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b1cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b1d0:	041b      	lsls	r3, r3, #16
 800b1d2:	0e1b      	lsrs	r3, r3, #24
 800b1d4:	f003 030f 	and.w	r3, r3, #15
 800b1d8:	4a8e      	ldr	r2, [pc, #568]	; (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800b1da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1de:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b1e0:	e18b      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1e6:	e188      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1ec:	e185      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800b1ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1f2:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800b1f6:	430b      	orrs	r3, r1
 800b1f8:	d155      	bne.n	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b1fa:	4b84      	ldr	r3, [pc, #528]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b1fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b200:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b204:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b208:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b20c:	d013      	beq.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800b20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b210:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b214:	d844      	bhi.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800b216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b218:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b21c:	d013      	beq.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800b21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b220:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b224:	d83c      	bhi.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800b226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d014      	beq.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800b22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b232:	d014      	beq.n	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800b234:	e034      	b.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b236:	f107 0318 	add.w	r3, r7, #24
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7fe fb2e 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b240:	69fb      	ldr	r3, [r7, #28]
 800b242:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b244:	e159      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7fe f9cc 	bl	80095e8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b252:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b254:	e151      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b256:	f7fd f84d 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800b25a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b25c:	e14d      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b25e:	4b6b      	ldr	r3, [pc, #428]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f003 0320 	and.w	r3, r3, #32
 800b266:	2b20      	cmp	r3, #32
 800b268:	d117      	bne.n	800b29a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b26a:	4b68      	ldr	r3, [pc, #416]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b272:	2b00      	cmp	r3, #0
 800b274:	d005      	beq.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800b276:	4b65      	ldr	r3, [pc, #404]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	0e1b      	lsrs	r3, r3, #24
 800b27c:	f003 030f 	and.w	r3, r3, #15
 800b280:	e006      	b.n	800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800b282:	4b62      	ldr	r3, [pc, #392]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b284:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b288:	041b      	lsls	r3, r3, #16
 800b28a:	0e1b      	lsrs	r3, r3, #24
 800b28c:	f003 030f 	and.w	r3, r3, #15
 800b290:	4a60      	ldr	r2, [pc, #384]	; (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800b292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b296:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b298:	e12f      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b29a:	2300      	movs	r3, #0
 800b29c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b29e:	e12c      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b2a4:	e129      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800b2a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2aa:	1e59      	subs	r1, r3, #1
 800b2ac:	ea52 0301 	orrs.w	r3, r2, r1
 800b2b0:	d13c      	bne.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800b2b2:	4b56      	ldr	r3, [pc, #344]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b2b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b2b8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800b2bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b2c4:	d027      	beq.n	800b316 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800b2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b2cc:	d82b      	bhi.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800b2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b2d4:	d017      	beq.n	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b2dc:	d823      	bhi.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800b2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d004      	beq.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800b2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2ea:	d004      	beq.n	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800b2ec:	e01b      	b.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b2ee:	f7fd f801 	bl	80082f4 <HAL_RCC_GetSysClockFreq>
 800b2f2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b2f4:	e101      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fe f974 	bl	80095e8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b304:	e0f9      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b306:	f107 0318 	add.w	r3, r7, #24
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fe fac6 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b314:	e0f1      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b316:	f107 030c 	add.w	r3, r7, #12
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fe fc18 	bl	8009b50 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b324:	e0e9      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b326:	2300      	movs	r3, #0
 800b328:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b32a:	e0e6      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800b32c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b330:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800b334:	430b      	orrs	r3, r1
 800b336:	d131      	bne.n	800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800b338:	4b34      	ldr	r3, [pc, #208]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b33a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b33e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b342:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800b344:	4b31      	ldr	r3, [pc, #196]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b346:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b34a:	f003 0302 	and.w	r3, r3, #2
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d106      	bne.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800b352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b354:	2b00      	cmp	r3, #0
 800b356:	d103      	bne.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800b358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b35c:	637b      	str	r3, [r7, #52]	; 0x34
 800b35e:	e0cc      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800b360:	4b2a      	ldr	r3, [pc, #168]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b36a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b36e:	d112      	bne.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800b370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b376:	d10e      	bne.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b378:	4b24      	ldr	r3, [pc, #144]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b37a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b37e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b386:	d102      	bne.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800b388:	23fa      	movs	r3, #250	; 0xfa
 800b38a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b38c:	e0b5      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b38e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b392:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b394:	e0b1      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800b396:	2300      	movs	r3, #0
 800b398:	637b      	str	r3, [r7, #52]	; 0x34
 800b39a:	e0ae      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800b39c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3a0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b3a4:	430b      	orrs	r3, r1
 800b3a6:	d13b      	bne.n	800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800b3a8:	4b18      	ldr	r3, [pc, #96]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b3aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b3ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b3b2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800b3b4:	4b15      	ldr	r3, [pc, #84]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b3bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3c0:	d105      	bne.n	800b3ce <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d102      	bne.n	800b3ce <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800b3c8:	4b13      	ldr	r3, [pc, #76]	; (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800b3ca:	637b      	str	r3, [r7, #52]	; 0x34
 800b3cc:	e095      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800b3ce:	4b0f      	ldr	r3, [pc, #60]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b3d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3da:	d106      	bne.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800b3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3e2:	d102      	bne.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800b3e4:	4b0d      	ldr	r3, [pc, #52]	; (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800b3e6:	637b      	str	r3, [r7, #52]	; 0x34
 800b3e8:	e087      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800b3ea:	4b08      	ldr	r3, [pc, #32]	; (800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3f6:	d106      	bne.n	800b406 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800b3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3fe:	d102      	bne.n	800b406 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800b400:	4b03      	ldr	r3, [pc, #12]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b402:	637b      	str	r3, [r7, #52]	; 0x34
 800b404:	e079      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800b406:	2300      	movs	r3, #0
 800b408:	637b      	str	r3, [r7, #52]	; 0x34
 800b40a:	e076      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b40c:	46020c00 	.word	0x46020c00
 800b410:	00f42400 	.word	0x00f42400
 800b414:	0800f280 	.word	0x0800f280
 800b418:	02dc6c00 	.word	0x02dc6c00
 800b41c:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800b420:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b424:	1e99      	subs	r1, r3, #2
 800b426:	ea52 0301 	orrs.w	r3, r2, r1
 800b42a:	d120      	bne.n	800b46e <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800b42c:	4b35      	ldr	r3, [pc, #212]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b42e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b436:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d004      	beq.n	800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800b43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b440:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b444:	d008      	beq.n	800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800b446:	e00f      	b.n	800b468 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b448:	f107 030c 	add.w	r3, r7, #12
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7fe fb7f 	bl	8009b50 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b456:	e050      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b458:	f107 0318 	add.w	r3, r7, #24
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7fe fa1d 	bl	800989c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800b462:	6a3b      	ldr	r3, [r7, #32]
 800b464:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b466:	e048      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b468:	2300      	movs	r3, #0
 800b46a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b46c:	e045      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800b46e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b472:	f1a3 0108 	sub.w	r1, r3, #8
 800b476:	ea52 0301 	orrs.w	r3, r2, r1
 800b47a:	d13c      	bne.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800b47c:	4b21      	ldr	r3, [pc, #132]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b47e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b482:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b486:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800b488:	4b1e      	ldr	r3, [pc, #120]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b494:	d105      	bne.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800b496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d102      	bne.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800b49c:	4b1a      	ldr	r3, [pc, #104]	; (800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800b49e:	637b      	str	r3, [r7, #52]	; 0x34
 800b4a0:	e02b      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800b4a2:	4b18      	ldr	r3, [pc, #96]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4ae:	d106      	bne.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800b4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4b6:	d102      	bne.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800b4b8:	4b14      	ldr	r3, [pc, #80]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800b4ba:	637b      	str	r3, [r7, #52]	; 0x34
 800b4bc:	e01d      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800b4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4c4:	d107      	bne.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7fe f88c 	bl	80095e8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d2:	637b      	str	r3, [r7, #52]	; 0x34
 800b4d4:	e011      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800b4dc:	d108      	bne.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fe f880 	bl	80095e8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ea:	085b      	lsrs	r3, r3, #1
 800b4ec:	637b      	str	r3, [r7, #52]	; 0x34
 800b4ee:	e004      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	637b      	str	r3, [r7, #52]	; 0x34
 800b4f4:	e001      	b.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800b4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3738      	adds	r7, #56	; 0x38
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	46020c00 	.word	0x46020c00
 800b508:	00f42400 	.word	0x00f42400
 800b50c:	007a1200 	.word	0x007a1200

0800b510 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800b510:	b480      	push	{r7}
 800b512:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800b514:	4b06      	ldr	r3, [pc, #24]	; (800b530 <HAL_RCCEx_EnableLSECSS+0x20>)
 800b516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b51a:	4a05      	ldr	r2, [pc, #20]	; (800b530 <HAL_RCCEx_EnableLSECSS+0x20>)
 800b51c:	f043 0320 	orr.w	r3, r3, #32
 800b520:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 800b524:	bf00      	nop
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	46020c00 	.word	0x46020c00

0800b534 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800b53c:	4b47      	ldr	r3, [pc, #284]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a46      	ldr	r2, [pc, #280]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b542:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b546:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b548:	f7f7 fdd4 	bl	80030f4 <HAL_GetTick>
 800b54c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b54e:	e008      	b.n	800b562 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b550:	f7f7 fdd0 	bl	80030f4 <HAL_GetTick>
 800b554:	4602      	mov	r2, r0
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	1ad3      	subs	r3, r2, r3
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	d901      	bls.n	800b562 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b55e:	2303      	movs	r3, #3
 800b560:	e077      	b.n	800b652 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b562:	4b3e      	ldr	r3, [pc, #248]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1f0      	bne.n	800b550 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b56e:	4b3b      	ldr	r3, [pc, #236]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b572:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b576:	f023 0303 	bic.w	r3, r3, #3
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	6811      	ldr	r1, [r2, #0]
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	6852      	ldr	r2, [r2, #4]
 800b582:	3a01      	subs	r2, #1
 800b584:	0212      	lsls	r2, r2, #8
 800b586:	430a      	orrs	r2, r1
 800b588:	4934      	ldr	r1, [pc, #208]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b58a:	4313      	orrs	r3, r2
 800b58c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800b58e:	4b33      	ldr	r3, [pc, #204]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b592:	4b33      	ldr	r3, [pc, #204]	; (800b660 <RCCEx_PLL2_Config+0x12c>)
 800b594:	4013      	ands	r3, r2
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	6892      	ldr	r2, [r2, #8]
 800b59a:	3a01      	subs	r2, #1
 800b59c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	68d2      	ldr	r2, [r2, #12]
 800b5a4:	3a01      	subs	r2, #1
 800b5a6:	0252      	lsls	r2, r2, #9
 800b5a8:	b292      	uxth	r2, r2
 800b5aa:	4311      	orrs	r1, r2
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	6912      	ldr	r2, [r2, #16]
 800b5b0:	3a01      	subs	r2, #1
 800b5b2:	0412      	lsls	r2, r2, #16
 800b5b4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b5b8:	4311      	orrs	r1, r2
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	6952      	ldr	r2, [r2, #20]
 800b5be:	3a01      	subs	r2, #1
 800b5c0:	0612      	lsls	r2, r2, #24
 800b5c2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b5c6:	430a      	orrs	r2, r1
 800b5c8:	4924      	ldr	r1, [pc, #144]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b5ce:	4b23      	ldr	r3, [pc, #140]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d2:	f023 020c 	bic.w	r2, r3, #12
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	699b      	ldr	r3, [r3, #24]
 800b5da:	4920      	ldr	r1, [pc, #128]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b5e0:	4b1e      	ldr	r3, [pc, #120]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b5e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a1b      	ldr	r3, [r3, #32]
 800b5e8:	491c      	ldr	r1, [pc, #112]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800b5ee:	4b1b      	ldr	r3, [pc, #108]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f2:	4a1a      	ldr	r2, [pc, #104]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b5f4:	f023 0310 	bic.w	r3, r3, #16
 800b5f8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b5fa:	4b18      	ldr	r3, [pc, #96]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b602:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	69d2      	ldr	r2, [r2, #28]
 800b60a:	00d2      	lsls	r2, r2, #3
 800b60c:	4913      	ldr	r1, [pc, #76]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b60e:	4313      	orrs	r3, r2
 800b610:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800b612:	4b12      	ldr	r3, [pc, #72]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b616:	4a11      	ldr	r2, [pc, #68]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b618:	f043 0310 	orr.w	r3, r3, #16
 800b61c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800b61e:	4b0f      	ldr	r3, [pc, #60]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a0e      	ldr	r2, [pc, #56]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b624:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b628:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b62a:	f7f7 fd63 	bl	80030f4 <HAL_GetTick>
 800b62e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b630:	e008      	b.n	800b644 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b632:	f7f7 fd5f 	bl	80030f4 <HAL_GetTick>
 800b636:	4602      	mov	r2, r0
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	1ad3      	subs	r3, r2, r3
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d901      	bls.n	800b644 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b640:	2303      	movs	r3, #3
 800b642:	e006      	b.n	800b652 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b644:	4b05      	ldr	r3, [pc, #20]	; (800b65c <RCCEx_PLL2_Config+0x128>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d0f0      	beq.n	800b632 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800b650:	2300      	movs	r3, #0

}
 800b652:	4618      	mov	r0, r3
 800b654:	3710      	adds	r7, #16
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	46020c00 	.word	0x46020c00
 800b660:	80800000 	.word	0x80800000

0800b664 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800b66c:	4b47      	ldr	r3, [pc, #284]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a46      	ldr	r2, [pc, #280]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b676:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b678:	f7f7 fd3c 	bl	80030f4 <HAL_GetTick>
 800b67c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b67e:	e008      	b.n	800b692 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b680:	f7f7 fd38 	bl	80030f4 <HAL_GetTick>
 800b684:	4602      	mov	r2, r0
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	1ad3      	subs	r3, r2, r3
 800b68a:	2b02      	cmp	r3, #2
 800b68c:	d901      	bls.n	800b692 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b68e:	2303      	movs	r3, #3
 800b690:	e077      	b.n	800b782 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b692:	4b3e      	ldr	r3, [pc, #248]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d1f0      	bne.n	800b680 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800b69e:	4b3b      	ldr	r3, [pc, #236]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b6a6:	f023 0303 	bic.w	r3, r3, #3
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	6811      	ldr	r1, [r2, #0]
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	6852      	ldr	r2, [r2, #4]
 800b6b2:	3a01      	subs	r2, #1
 800b6b4:	0212      	lsls	r2, r2, #8
 800b6b6:	430a      	orrs	r2, r1
 800b6b8:	4934      	ldr	r1, [pc, #208]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	630b      	str	r3, [r1, #48]	; 0x30
 800b6be:	4b33      	ldr	r3, [pc, #204]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b6c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b6c2:	4b33      	ldr	r3, [pc, #204]	; (800b790 <RCCEx_PLL3_Config+0x12c>)
 800b6c4:	4013      	ands	r3, r2
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	6892      	ldr	r2, [r2, #8]
 800b6ca:	3a01      	subs	r2, #1
 800b6cc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	68d2      	ldr	r2, [r2, #12]
 800b6d4:	3a01      	subs	r2, #1
 800b6d6:	0252      	lsls	r2, r2, #9
 800b6d8:	b292      	uxth	r2, r2
 800b6da:	4311      	orrs	r1, r2
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	6912      	ldr	r2, [r2, #16]
 800b6e0:	3a01      	subs	r2, #1
 800b6e2:	0412      	lsls	r2, r2, #16
 800b6e4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b6e8:	4311      	orrs	r1, r2
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	6952      	ldr	r2, [r2, #20]
 800b6ee:	3a01      	subs	r2, #1
 800b6f0:	0612      	lsls	r2, r2, #24
 800b6f2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b6f6:	430a      	orrs	r2, r1
 800b6f8:	4924      	ldr	r1, [pc, #144]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800b6fe:	4b23      	ldr	r3, [pc, #140]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b702:	f023 020c 	bic.w	r2, r3, #12
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	4920      	ldr	r1, [pc, #128]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b70c:	4313      	orrs	r3, r2
 800b70e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800b710:	4b1e      	ldr	r3, [pc, #120]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a1b      	ldr	r3, [r3, #32]
 800b718:	491c      	ldr	r1, [pc, #112]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b71a:	4313      	orrs	r3, r2
 800b71c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800b71e:	4b1b      	ldr	r3, [pc, #108]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b722:	4a1a      	ldr	r2, [pc, #104]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b724:	f023 0310 	bic.w	r3, r3, #16
 800b728:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b72a:	4b18      	ldr	r3, [pc, #96]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b72c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b72e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b732:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	69d2      	ldr	r2, [r2, #28]
 800b73a:	00d2      	lsls	r2, r2, #3
 800b73c:	4913      	ldr	r1, [pc, #76]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b73e:	4313      	orrs	r3, r2
 800b740:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800b742:	4b12      	ldr	r3, [pc, #72]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b746:	4a11      	ldr	r2, [pc, #68]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b748:	f043 0310 	orr.w	r3, r3, #16
 800b74c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800b74e:	4b0f      	ldr	r3, [pc, #60]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4a0e      	ldr	r2, [pc, #56]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b758:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b75a:	f7f7 fccb 	bl	80030f4 <HAL_GetTick>
 800b75e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b760:	e008      	b.n	800b774 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b762:	f7f7 fcc7 	bl	80030f4 <HAL_GetTick>
 800b766:	4602      	mov	r2, r0
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	1ad3      	subs	r3, r2, r3
 800b76c:	2b02      	cmp	r3, #2
 800b76e:	d901      	bls.n	800b774 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b770:	2303      	movs	r3, #3
 800b772:	e006      	b.n	800b782 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b774:	4b05      	ldr	r3, [pc, #20]	; (800b78c <RCCEx_PLL3_Config+0x128>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d0f0      	beq.n	800b762 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	46020c00 	.word	0x46020c00
 800b790:	80800000 	.word	0x80800000

0800b794 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b79c:	2301      	movs	r3, #1
 800b79e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d071      	beq.n	800b88a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d106      	bne.n	800b7c0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7f7 f8ce 	bl	800295c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2202      	movs	r2, #2
 800b7c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b7c8:	4b32      	ldr	r3, [pc, #200]	; (800b894 <HAL_RTC_Init+0x100>)
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	f003 0310 	and.w	r3, r3, #16
 800b7d0:	2b10      	cmp	r3, #16
 800b7d2:	d051      	beq.n	800b878 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b7d4:	4b2f      	ldr	r3, [pc, #188]	; (800b894 <HAL_RTC_Init+0x100>)
 800b7d6:	22ca      	movs	r2, #202	; 0xca
 800b7d8:	625a      	str	r2, [r3, #36]	; 0x24
 800b7da:	4b2e      	ldr	r3, [pc, #184]	; (800b894 <HAL_RTC_Init+0x100>)
 800b7dc:	2253      	movs	r2, #83	; 0x53
 800b7de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 f9ad 	bl	800bb40 <RTC_EnterInitMode>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800b7ea:	7bfb      	ldrb	r3, [r7, #15]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d13f      	bne.n	800b870 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800b7f0:	4b28      	ldr	r3, [pc, #160]	; (800b894 <HAL_RTC_Init+0x100>)
 800b7f2:	699b      	ldr	r3, [r3, #24]
 800b7f4:	4a27      	ldr	r2, [pc, #156]	; (800b894 <HAL_RTC_Init+0x100>)
 800b7f6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800b7fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7fe:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800b800:	4b24      	ldr	r3, [pc, #144]	; (800b894 <HAL_RTC_Init+0x100>)
 800b802:	699a      	ldr	r2, [r3, #24]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6859      	ldr	r1, [r3, #4]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	691b      	ldr	r3, [r3, #16]
 800b80c:	4319      	orrs	r1, r3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	699b      	ldr	r3, [r3, #24]
 800b812:	430b      	orrs	r3, r1
 800b814:	491f      	ldr	r1, [pc, #124]	; (800b894 <HAL_RTC_Init+0x100>)
 800b816:	4313      	orrs	r3, r2
 800b818:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	68da      	ldr	r2, [r3, #12]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	041b      	lsls	r3, r3, #16
 800b824:	491b      	ldr	r1, [pc, #108]	; (800b894 <HAL_RTC_Init+0x100>)
 800b826:	4313      	orrs	r3, r2
 800b828:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800b82a:	4b1a      	ldr	r3, [pc, #104]	; (800b894 <HAL_RTC_Init+0x100>)
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b83a:	430b      	orrs	r3, r1
 800b83c:	4915      	ldr	r1, [pc, #84]	; (800b894 <HAL_RTC_Init+0x100>)
 800b83e:	4313      	orrs	r3, r2
 800b840:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 f9b8 	bl	800bbb8 <RTC_ExitInitMode>
 800b848:	4603      	mov	r3, r0
 800b84a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800b84c:	7bfb      	ldrb	r3, [r7, #15]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10e      	bne.n	800b870 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800b852:	4b10      	ldr	r3, [pc, #64]	; (800b894 <HAL_RTC_Init+0x100>)
 800b854:	699b      	ldr	r3, [r3, #24]
 800b856:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a19      	ldr	r1, [r3, #32]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	69db      	ldr	r3, [r3, #28]
 800b862:	4319      	orrs	r1, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	695b      	ldr	r3, [r3, #20]
 800b868:	430b      	orrs	r3, r1
 800b86a:	490a      	ldr	r1, [pc, #40]	; (800b894 <HAL_RTC_Init+0x100>)
 800b86c:	4313      	orrs	r3, r2
 800b86e:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b870:	4b08      	ldr	r3, [pc, #32]	; (800b894 <HAL_RTC_Init+0x100>)
 800b872:	22ff      	movs	r2, #255	; 0xff
 800b874:	625a      	str	r2, [r3, #36]	; 0x24
 800b876:	e001      	b.n	800b87c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800b878:	2300      	movs	r3, #0
 800b87a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b87c:	7bfb      	ldrb	r3, [r7, #15]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d103      	bne.n	800b88a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2201      	movs	r2, #1
 800b886:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800b88a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3710      	adds	r7, #16
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	46007800 	.word	0x46007800

0800b898 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b898:	b590      	push	{r4, r7, lr}
 800b89a:	b087      	sub	sp, #28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d101      	bne.n	800b8b2 <HAL_RTC_SetTime+0x1a>
 800b8ae:	2302      	movs	r3, #2
 800b8b0:	e088      	b.n	800b9c4 <HAL_RTC_SetTime+0x12c>
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2202      	movs	r2, #2
 800b8be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b8c2:	4b42      	ldr	r3, [pc, #264]	; (800b9cc <HAL_RTC_SetTime+0x134>)
 800b8c4:	22ca      	movs	r2, #202	; 0xca
 800b8c6:	625a      	str	r2, [r3, #36]	; 0x24
 800b8c8:	4b40      	ldr	r3, [pc, #256]	; (800b9cc <HAL_RTC_SetTime+0x134>)
 800b8ca:	2253      	movs	r2, #83	; 0x53
 800b8cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f000 f936 	bl	800bb40 <RTC_EnterInitMode>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b8d8:	7cfb      	ldrb	r3, [r7, #19]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d163      	bne.n	800b9a6 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b8de:	4b3b      	ldr	r3, [pc, #236]	; (800b9cc <HAL_RTC_SetTime+0x134>)
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8ea:	d057      	beq.n	800b99c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d125      	bne.n	800b93e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b8f2:	4b36      	ldr	r3, [pc, #216]	; (800b9cc <HAL_RTC_SetTime+0x134>)
 800b8f4:	699b      	ldr	r3, [r3, #24]
 800b8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d102      	bne.n	800b904 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	2200      	movs	r2, #0
 800b902:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	4618      	mov	r0, r3
 800b90a:	f000 f993 	bl	800bc34 <RTC_ByteToBcd2>
 800b90e:	4603      	mov	r3, r0
 800b910:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	785b      	ldrb	r3, [r3, #1]
 800b916:	4618      	mov	r0, r3
 800b918:	f000 f98c 	bl	800bc34 <RTC_ByteToBcd2>
 800b91c:	4603      	mov	r3, r0
 800b91e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b920:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	789b      	ldrb	r3, [r3, #2]
 800b926:	4618      	mov	r0, r3
 800b928:	f000 f984 	bl	800bc34 <RTC_ByteToBcd2>
 800b92c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b92e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	78db      	ldrb	r3, [r3, #3]
 800b936:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b938:	4313      	orrs	r3, r2
 800b93a:	617b      	str	r3, [r7, #20]
 800b93c:	e017      	b.n	800b96e <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b93e:	4b23      	ldr	r3, [pc, #140]	; (800b9cc <HAL_RTC_SetTime+0x134>)
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b946:	2b00      	cmp	r3, #0
 800b948:	d102      	bne.n	800b950 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	2200      	movs	r2, #0
 800b94e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	785b      	ldrb	r3, [r3, #1]
 800b95a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b95c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b95e:	68ba      	ldr	r2, [r7, #8]
 800b960:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b962:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	78db      	ldrb	r3, [r3, #3]
 800b968:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b96a:	4313      	orrs	r3, r2
 800b96c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800b96e:	4a17      	ldr	r2, [pc, #92]	; (800b9cc <HAL_RTC_SetTime+0x134>)
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b976:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b97a:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800b97c:	4b13      	ldr	r3, [pc, #76]	; (800b9cc <HAL_RTC_SetTime+0x134>)
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	4a12      	ldr	r2, [pc, #72]	; (800b9cc <HAL_RTC_SetTime+0x134>)
 800b982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b986:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800b988:	4b10      	ldr	r3, [pc, #64]	; (800b9cc <HAL_RTC_SetTime+0x134>)
 800b98a:	699a      	ldr	r2, [r3, #24]
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	68d9      	ldr	r1, [r3, #12]
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	691b      	ldr	r3, [r3, #16]
 800b994:	430b      	orrs	r3, r1
 800b996:	490d      	ldr	r1, [pc, #52]	; (800b9cc <HAL_RTC_SetTime+0x134>)
 800b998:	4313      	orrs	r3, r2
 800b99a:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b99c:	68f8      	ldr	r0, [r7, #12]
 800b99e:	f000 f90b 	bl	800bbb8 <RTC_ExitInitMode>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b9a6:	4b09      	ldr	r3, [pc, #36]	; (800b9cc <HAL_RTC_SetTime+0x134>)
 800b9a8:	22ff      	movs	r2, #255	; 0xff
 800b9aa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b9ac:	7cfb      	ldrb	r3, [r7, #19]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d103      	bne.n	800b9ba <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800b9c2:	7cfb      	ldrb	r3, [r7, #19]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	371c      	adds	r7, #28
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd90      	pop	{r4, r7, pc}
 800b9cc:	46007800 	.word	0x46007800

0800b9d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b9d0:	b590      	push	{r4, r7, lr}
 800b9d2:	b087      	sub	sp, #28
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d101      	bne.n	800b9ea <HAL_RTC_SetDate+0x1a>
 800b9e6:	2302      	movs	r3, #2
 800b9e8:	e071      	b.n	800bace <HAL_RTC_SetDate+0xfe>
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2202      	movs	r2, #2
 800b9f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10e      	bne.n	800ba1e <HAL_RTC_SetDate+0x4e>
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	785b      	ldrb	r3, [r3, #1]
 800ba04:	f003 0310 	and.w	r3, r3, #16
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d008      	beq.n	800ba1e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	785b      	ldrb	r3, [r3, #1]
 800ba10:	f023 0310 	bic.w	r3, r3, #16
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	330a      	adds	r3, #10
 800ba18:	b2da      	uxtb	r2, r3
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d11c      	bne.n	800ba5e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	78db      	ldrb	r3, [r3, #3]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f000 f903 	bl	800bc34 <RTC_ByteToBcd2>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	785b      	ldrb	r3, [r3, #1]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f000 f8fc 	bl	800bc34 <RTC_ByteToBcd2>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ba40:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	789b      	ldrb	r3, [r3, #2]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f000 f8f4 	bl	800bc34 <RTC_ByteToBcd2>
 800ba4c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ba4e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	617b      	str	r3, [r7, #20]
 800ba5c:	e00e      	b.n	800ba7c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	78db      	ldrb	r3, [r3, #3]
 800ba62:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	785b      	ldrb	r3, [r3, #1]
 800ba68:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ba6a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800ba6c:	68ba      	ldr	r2, [r7, #8]
 800ba6e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ba70:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba7c:	4b16      	ldr	r3, [pc, #88]	; (800bad8 <HAL_RTC_SetDate+0x108>)
 800ba7e:	22ca      	movs	r2, #202	; 0xca
 800ba80:	625a      	str	r2, [r3, #36]	; 0x24
 800ba82:	4b15      	ldr	r3, [pc, #84]	; (800bad8 <HAL_RTC_SetDate+0x108>)
 800ba84:	2253      	movs	r2, #83	; 0x53
 800ba86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f000 f859 	bl	800bb40 <RTC_EnterInitMode>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ba92:	7cfb      	ldrb	r3, [r7, #19]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d10b      	bne.n	800bab0 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800ba98:	4a0f      	ldr	r2, [pc, #60]	; (800bad8 <HAL_RTC_SetDate+0x108>)
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800baa0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800baa4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	f000 f886 	bl	800bbb8 <RTC_ExitInitMode>
 800baac:	4603      	mov	r3, r0
 800baae:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bab0:	4b09      	ldr	r3, [pc, #36]	; (800bad8 <HAL_RTC_SetDate+0x108>)
 800bab2:	22ff      	movs	r2, #255	; 0xff
 800bab4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800bab6:	7cfb      	ldrb	r3, [r7, #19]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d103      	bne.n	800bac4 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800bacc:	7cfb      	ldrb	r3, [r7, #19]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	371c      	adds	r7, #28
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd90      	pop	{r4, r7, pc}
 800bad6:	bf00      	nop
 800bad8:	46007800 	.word	0x46007800

0800badc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800bae4:	4b15      	ldr	r3, [pc, #84]	; (800bb3c <HAL_RTC_WaitForSynchro+0x60>)
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	4a14      	ldr	r2, [pc, #80]	; (800bb3c <HAL_RTC_WaitForSynchro+0x60>)
 800baea:	f023 0320 	bic.w	r3, r3, #32
 800baee:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800baf0:	f7f7 fb00 	bl	80030f4 <HAL_GetTick>
 800baf4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800baf6:	e013      	b.n	800bb20 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800baf8:	f7f7 fafc 	bl	80030f4 <HAL_GetTick>
 800bafc:	4602      	mov	r2, r0
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	1ad3      	subs	r3, r2, r3
 800bb02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb06:	d90b      	bls.n	800bb20 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800bb08:	4b0c      	ldr	r3, [pc, #48]	; (800bb3c <HAL_RTC_WaitForSynchro+0x60>)
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	f003 0320 	and.w	r3, r3, #32
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10c      	bne.n	800bb2e <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2203      	movs	r2, #3
 800bb18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 800bb1c:	2303      	movs	r3, #3
 800bb1e:	e008      	b.n	800bb32 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800bb20:	4b06      	ldr	r3, [pc, #24]	; (800bb3c <HAL_RTC_WaitForSynchro+0x60>)
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	f003 0320 	and.w	r3, r3, #32
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d0e5      	beq.n	800baf8 <HAL_RTC_WaitForSynchro+0x1c>
 800bb2c:	e000      	b.n	800bb30 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800bb2e:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	46007800 	.word	0x46007800

0800bb40 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800bb4c:	4b19      	ldr	r3, [pc, #100]	; (800bbb4 <RTC_EnterInitMode+0x74>)
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d128      	bne.n	800bbaa <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800bb58:	4b16      	ldr	r3, [pc, #88]	; (800bbb4 <RTC_EnterInitMode+0x74>)
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	4a15      	ldr	r2, [pc, #84]	; (800bbb4 <RTC_EnterInitMode+0x74>)
 800bb5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb62:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800bb64:	f7f7 fac6 	bl	80030f4 <HAL_GetTick>
 800bb68:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bb6a:	e013      	b.n	800bb94 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800bb6c:	f7f7 fac2 	bl	80030f4 <HAL_GetTick>
 800bb70:	4602      	mov	r2, r0
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	1ad3      	subs	r3, r2, r3
 800bb76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb7a:	d90b      	bls.n	800bb94 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800bb7c:	4b0d      	ldr	r3, [pc, #52]	; (800bbb4 <RTC_EnterInitMode+0x74>)
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d10f      	bne.n	800bba8 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800bb88:	2303      	movs	r3, #3
 800bb8a:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2203      	movs	r2, #3
 800bb90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bb94:	4b07      	ldr	r3, [pc, #28]	; (800bbb4 <RTC_EnterInitMode+0x74>)
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d104      	bne.n	800bbaa <RTC_EnterInitMode+0x6a>
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
 800bba2:	2b03      	cmp	r3, #3
 800bba4:	d1e2      	bne.n	800bb6c <RTC_EnterInitMode+0x2c>
 800bba6:	e000      	b.n	800bbaa <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800bba8:	bf00      	nop
        }
      }
    }
  }

  return status;
 800bbaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3710      	adds	r7, #16
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	46007800 	.word	0x46007800

0800bbb8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800bbc4:	4b1a      	ldr	r3, [pc, #104]	; (800bc30 <RTC_ExitInitMode+0x78>)
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	4a19      	ldr	r2, [pc, #100]	; (800bc30 <RTC_ExitInitMode+0x78>)
 800bbca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbce:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800bbd0:	4b17      	ldr	r3, [pc, #92]	; (800bc30 <RTC_ExitInitMode+0x78>)
 800bbd2:	699b      	ldr	r3, [r3, #24]
 800bbd4:	f003 0320 	and.w	r3, r3, #32
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d10c      	bne.n	800bbf6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f7ff ff7d 	bl	800badc <HAL_RTC_WaitForSynchro>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d01e      	beq.n	800bc26 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2203      	movs	r2, #3
 800bbec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	73fb      	strb	r3, [r7, #15]
 800bbf4:	e017      	b.n	800bc26 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bbf6:	4b0e      	ldr	r3, [pc, #56]	; (800bc30 <RTC_ExitInitMode+0x78>)
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	4a0d      	ldr	r2, [pc, #52]	; (800bc30 <RTC_ExitInitMode+0x78>)
 800bbfc:	f023 0320 	bic.w	r3, r3, #32
 800bc00:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f7ff ff6a 	bl	800badc <HAL_RTC_WaitForSynchro>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d005      	beq.n	800bc1a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2203      	movs	r2, #3
 800bc12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800bc16:	2303      	movs	r3, #3
 800bc18:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bc1a:	4b05      	ldr	r3, [pc, #20]	; (800bc30 <RTC_ExitInitMode+0x78>)
 800bc1c:	699b      	ldr	r3, [r3, #24]
 800bc1e:	4a04      	ldr	r2, [pc, #16]	; (800bc30 <RTC_ExitInitMode+0x78>)
 800bc20:	f043 0320 	orr.w	r3, r3, #32
 800bc24:	6193      	str	r3, [r2, #24]
  }
  return status;
 800bc26:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	46007800 	.word	0x46007800

0800bc34 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800bc42:	79fb      	ldrb	r3, [r7, #7]
 800bc44:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800bc46:	e005      	b.n	800bc54 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800bc4e:	7afb      	ldrb	r3, [r7, #11]
 800bc50:	3b0a      	subs	r3, #10
 800bc52:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800bc54:	7afb      	ldrb	r3, [r7, #11]
 800bc56:	2b09      	cmp	r3, #9
 800bc58:	d8f6      	bhi.n	800bc48 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	011b      	lsls	r3, r3, #4
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	7afb      	ldrb	r3, [r7, #11]
 800bc64:	4313      	orrs	r3, r2
 800bc66:	b2db      	uxtb	r3, r3
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3714      	adds	r7, #20
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	4910      	ldr	r1, [pc, #64]	; (800bcc8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	689a      	ldr	r2, [r3, #8]
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	68db      	ldr	r3, [r3, #12]
 800bc94:	431a      	orrs	r2, r3
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	699b      	ldr	r3, [r3, #24]
 800bc9a:	490c      	ldr	r1, [pc, #48]	; (800bccc <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800bca0:	4b0a      	ldr	r3, [pc, #40]	; (800bccc <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800bca2:	6a1b      	ldr	r3, [r3, #32]
 800bca4:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	6919      	ldr	r1, [r3, #16]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	695b      	ldr	r3, [r3, #20]
 800bcb0:	041b      	lsls	r3, r3, #16
 800bcb2:	430b      	orrs	r3, r1
 800bcb4:	4905      	ldr	r1, [pc, #20]	; (800bccc <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr
 800bcc8:	46007800 	.word	0x46007800
 800bccc:	46007c00 	.word	0x46007c00

0800bcd0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b08a      	sub	sp, #40	; 0x28
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d101      	bne.n	800bce2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bcde:	2301      	movs	r3, #1
 800bce0:	e075      	b.n	800bdce <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d105      	bne.n	800bcfa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f7f6 fe7d 	bl	80029f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2204      	movs	r2, #4
 800bcfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 f868 	bl	800bdd8 <HAL_SD_InitCard>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d001      	beq.n	800bd12 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e05d      	b.n	800bdce <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800bd12:	f107 0308 	add.w	r3, r7, #8
 800bd16:	4619      	mov	r1, r3
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 fa9d 	bl	800c258 <HAL_SD_GetCardStatus>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d001      	beq.n	800bd28 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800bd24:	2301      	movs	r3, #1
 800bd26:	e052      	b.n	800bdce <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800bd28:	7e3b      	ldrb	r3, [r7, #24]
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800bd2e:	7e7b      	ldrb	r3, [r7, #25]
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d10a      	bne.n	800bd52 <HAL_SD_Init+0x82>
 800bd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d102      	bne.n	800bd48 <HAL_SD_Init+0x78>
 800bd42:	6a3b      	ldr	r3, [r7, #32]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d004      	beq.n	800bd52 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd4e:	659a      	str	r2, [r3, #88]	; 0x58
 800bd50:	e00b      	b.n	800bd6a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d104      	bne.n	800bd64 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd60:	659a      	str	r2, [r3, #88]	; 0x58
 800bd62:	e002      	b.n	800bd6a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	4619      	mov	r1, r3
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 fb2f 	bl	800c3d4 <HAL_SD_ConfigWideBusOperation>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d001      	beq.n	800bd80 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e026      	b.n	800bdce <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800bd80:	f7f7 f9b8 	bl	80030f4 <HAL_GetTick>
 800bd84:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bd86:	e011      	b.n	800bdac <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800bd88:	f7f7 f9b4 	bl	80030f4 <HAL_GetTick>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd96:	d109      	bne.n	800bdac <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bd9e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2201      	movs	r2, #1
 800bda4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800bda8:	2303      	movs	r3, #3
 800bdaa:	e010      	b.n	800bdce <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 fc23 	bl	800c5f8 <HAL_SD_GetCardState>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b04      	cmp	r3, #4
 800bdb6:	d1e7      	bne.n	800bd88 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3728      	adds	r7, #40	; 0x28
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
	...

0800bdd8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bdd8:	b590      	push	{r4, r7, lr}
 800bdda:	b08d      	sub	sp, #52	; 0x34
 800bddc:	af02      	add	r7, sp, #8
 800bdde:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bde0:	2300      	movs	r3, #0
 800bde2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bde4:	2300      	movs	r3, #0
 800bde6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bde8:	2300      	movs	r3, #0
 800bdea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bdec:	2300      	movs	r3, #0
 800bdee:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800bdf0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800bdf4:	f04f 0100 	mov.w	r1, #0
 800bdf8:	f7fe f804 	bl	8009e04 <HAL_RCCEx_GetPeriphCLKFreq>
 800bdfc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800bdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be00:	2b00      	cmp	r3, #0
 800be02:	d109      	bne.n	800be18 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2201      	movs	r2, #1
 800be08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800be12:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800be14:	2301      	movs	r3, #1
 800be16:	e070      	b.n	800befa <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1a:	0a1b      	lsrs	r3, r3, #8
 800be1c:	4a39      	ldr	r2, [pc, #228]	; (800bf04 <HAL_SD_InitCard+0x12c>)
 800be1e:	fba2 2303 	umull	r2, r3, r2, r3
 800be22:	091b      	lsrs	r3, r3, #4
 800be24:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681c      	ldr	r4, [r3, #0]
 800be2a:	466a      	mov	r2, sp
 800be2c:	f107 0318 	add.w	r3, r7, #24
 800be30:	e893 0003 	ldmia.w	r3, {r0, r1}
 800be34:	e882 0003 	stmia.w	r2, {r0, r1}
 800be38:	f107 030c 	add.w	r3, r7, #12
 800be3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800be3e:	4620      	mov	r0, r4
 800be40:	f002 fa1a 	bl	800e278 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4618      	mov	r0, r3
 800be4a:	f002 fa4c 	bl	800e2e6 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d005      	beq.n	800be60 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	005b      	lsls	r3, r3, #1
 800be58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be5e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be62:	2b00      	cmp	r3, #0
 800be64:	d007      	beq.n	800be76 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800be66:	4a28      	ldr	r2, [pc, #160]	; (800bf08 <HAL_SD_InitCard+0x130>)
 800be68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be6e:	3301      	adds	r3, #1
 800be70:	4618      	mov	r0, r3
 800be72:	f7f7 f94b 	bl	800310c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 fcac 	bl	800c7d4 <SD_PowerON>
 800be7c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800be7e:	6a3b      	ldr	r3, [r7, #32]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d00b      	beq.n	800be9c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2201      	movs	r2, #1
 800be88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be90:	6a3b      	ldr	r3, [r7, #32]
 800be92:	431a      	orrs	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800be98:	2301      	movs	r3, #1
 800be9a:	e02e      	b.n	800befa <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 fbcb 	bl	800c638 <SD_InitCard>
 800bea2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bea4:	6a3b      	ldr	r3, [r7, #32]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d00b      	beq.n	800bec2 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2201      	movs	r2, #1
 800beae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800beb6:	6a3b      	ldr	r3, [r7, #32]
 800beb8:	431a      	orrs	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bebe:	2301      	movs	r3, #1
 800bec0:	e01b      	b.n	800befa <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800beca:	4618      	mov	r0, r3
 800becc:	f002 faa0 	bl	800e410 <SDMMC_CmdBlockLength>
 800bed0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bed2:	6a3b      	ldr	r3, [r7, #32]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00f      	beq.n	800bef8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a0b      	ldr	r2, [pc, #44]	; (800bf0c <HAL_SD_InitCard+0x134>)
 800bede:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bee4:	6a3b      	ldr	r3, [r7, #32]
 800bee6:	431a      	orrs	r2, r3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2201      	movs	r2, #1
 800bef0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800bef4:	2301      	movs	r3, #1
 800bef6:	e000      	b.n	800befa <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	372c      	adds	r7, #44	; 0x2c
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd90      	pop	{r4, r7, pc}
 800bf02:	bf00      	nop
 800bf04:	014f8b59 	.word	0x014f8b59
 800bf08:	00012110 	.word	0x00012110
 800bf0c:	1fe00fff 	.word	0x1fe00fff

0800bf10 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf1e:	0f9b      	lsrs	r3, r3, #30
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf2a:	0e9b      	lsrs	r3, r3, #26
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	f003 030f 	and.w	r3, r3, #15
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf3c:	0e1b      	lsrs	r3, r3, #24
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	f003 0303 	and.w	r3, r3, #3
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf4e:	0c1b      	lsrs	r3, r3, #16
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf5a:	0a1b      	lsrs	r3, r3, #8
 800bf5c:	b2da      	uxtb	r2, r3
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf70:	0d1b      	lsrs	r3, r3, #20
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf7c:	0c1b      	lsrs	r3, r3, #16
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	f003 030f 	and.w	r3, r3, #15
 800bf84:	b2da      	uxtb	r2, r3
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf8e:	0bdb      	lsrs	r3, r3, #15
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	f003 0301 	and.w	r3, r3, #1
 800bf96:	b2da      	uxtb	r2, r3
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfa0:	0b9b      	lsrs	r3, r3, #14
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	f003 0301 	and.w	r3, r3, #1
 800bfa8:	b2da      	uxtb	r2, r3
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfb2:	0b5b      	lsrs	r3, r3, #13
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	f003 0301 	and.w	r3, r3, #1
 800bfba:	b2da      	uxtb	r2, r3
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfc4:	0b1b      	lsrs	r3, r3, #12
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	f003 0301 	and.w	r3, r3, #1
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d163      	bne.n	800c0a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfe4:	009a      	lsls	r2, r3, #2
 800bfe6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bfea:	4013      	ands	r3, r2
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800bff0:	0f92      	lsrs	r2, r2, #30
 800bff2:	431a      	orrs	r2, r3
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bffc:	0edb      	lsrs	r3, r3, #27
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	f003 0307 	and.w	r3, r3, #7
 800c004:	b2da      	uxtb	r2, r3
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c00e:	0e1b      	lsrs	r3, r3, #24
 800c010:	b2db      	uxtb	r3, r3
 800c012:	f003 0307 	and.w	r3, r3, #7
 800c016:	b2da      	uxtb	r2, r3
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c020:	0d5b      	lsrs	r3, r3, #21
 800c022:	b2db      	uxtb	r3, r3
 800c024:	f003 0307 	and.w	r3, r3, #7
 800c028:	b2da      	uxtb	r2, r3
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c032:	0c9b      	lsrs	r3, r3, #18
 800c034:	b2db      	uxtb	r3, r3
 800c036:	f003 0307 	and.w	r3, r3, #7
 800c03a:	b2da      	uxtb	r2, r3
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c044:	0bdb      	lsrs	r3, r3, #15
 800c046:	b2db      	uxtb	r3, r3
 800c048:	f003 0307 	and.w	r3, r3, #7
 800c04c:	b2da      	uxtb	r2, r3
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	691b      	ldr	r3, [r3, #16]
 800c056:	1c5a      	adds	r2, r3, #1
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	7e1b      	ldrb	r3, [r3, #24]
 800c060:	b2db      	uxtb	r3, r3
 800c062:	f003 0307 	and.w	r3, r3, #7
 800c066:	3302      	adds	r3, #2
 800c068:	2201      	movs	r2, #1
 800c06a:	fa02 f303 	lsl.w	r3, r2, r3
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c072:	fb03 f202 	mul.w	r2, r3, r2
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	7a1b      	ldrb	r3, [r3, #8]
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	f003 030f 	and.w	r3, r3, #15
 800c084:	2201      	movs	r2, #1
 800c086:	409a      	lsls	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c094:	0a52      	lsrs	r2, r2, #9
 800c096:	fb03 f202 	mul.w	r2, r3, r2
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c0a4:	655a      	str	r2, [r3, #84]	; 0x54
 800c0a6:	e031      	b.n	800c10c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	d11d      	bne.n	800c0ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0b4:	041b      	lsls	r3, r3, #16
 800c0b6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0be:	0c1b      	lsrs	r3, r3, #16
 800c0c0:	431a      	orrs	r2, r3
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	691b      	ldr	r3, [r3, #16]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	029a      	lsls	r2, r3, #10
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c0e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	655a      	str	r2, [r3, #84]	; 0x54
 800c0ea:	e00f      	b.n	800c10c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a58      	ldr	r2, [pc, #352]	; (800c254 <HAL_SD_GetCardCSD+0x344>)
 800c0f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2201      	movs	r2, #1
 800c104:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800c108:	2301      	movs	r3, #1
 800c10a:	e09d      	b.n	800c248 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c110:	0b9b      	lsrs	r3, r3, #14
 800c112:	b2db      	uxtb	r3, r3
 800c114:	f003 0301 	and.w	r3, r3, #1
 800c118:	b2da      	uxtb	r2, r3
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c122:	09db      	lsrs	r3, r3, #7
 800c124:	b2db      	uxtb	r3, r3
 800c126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c12a:	b2da      	uxtb	r2, r3
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c134:	b2db      	uxtb	r3, r3
 800c136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c13a:	b2da      	uxtb	r2, r3
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c144:	0fdb      	lsrs	r3, r3, #31
 800c146:	b2da      	uxtb	r2, r3
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c150:	0f5b      	lsrs	r3, r3, #29
 800c152:	b2db      	uxtb	r3, r3
 800c154:	f003 0303 	and.w	r3, r3, #3
 800c158:	b2da      	uxtb	r2, r3
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c162:	0e9b      	lsrs	r3, r3, #26
 800c164:	b2db      	uxtb	r3, r3
 800c166:	f003 0307 	and.w	r3, r3, #7
 800c16a:	b2da      	uxtb	r2, r3
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c174:	0d9b      	lsrs	r3, r3, #22
 800c176:	b2db      	uxtb	r3, r3
 800c178:	f003 030f 	and.w	r3, r3, #15
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c186:	0d5b      	lsrs	r3, r3, #21
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	f003 0301 	and.w	r3, r3, #1
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	2200      	movs	r2, #0
 800c19a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1a2:	0c1b      	lsrs	r3, r3, #16
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	f003 0301 	and.w	r3, r3, #1
 800c1aa:	b2da      	uxtb	r2, r3
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1b6:	0bdb      	lsrs	r3, r3, #15
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	f003 0301 	and.w	r3, r3, #1
 800c1be:	b2da      	uxtb	r2, r3
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1ca:	0b9b      	lsrs	r3, r3, #14
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	f003 0301 	and.w	r3, r3, #1
 800c1d2:	b2da      	uxtb	r2, r3
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1de:	0b5b      	lsrs	r3, r3, #13
 800c1e0:	b2db      	uxtb	r3, r3
 800c1e2:	f003 0301 	and.w	r3, r3, #1
 800c1e6:	b2da      	uxtb	r2, r3
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1f2:	0b1b      	lsrs	r3, r3, #12
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	f003 0301 	and.w	r3, r3, #1
 800c1fa:	b2da      	uxtb	r2, r3
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c206:	0a9b      	lsrs	r3, r3, #10
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	f003 0303 	and.w	r3, r3, #3
 800c20e:	b2da      	uxtb	r2, r3
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c21a:	0a1b      	lsrs	r3, r3, #8
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	f003 0303 	and.w	r3, r3, #3
 800c222:	b2da      	uxtb	r2, r3
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c22e:	085b      	lsrs	r3, r3, #1
 800c230:	b2db      	uxtb	r3, r3
 800c232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c236:	b2da      	uxtb	r2, r3
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	2201      	movs	r2, #1
 800c242:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr
 800c254:	1fe00fff 	.word	0x1fe00fff

0800c258 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b094      	sub	sp, #80	; 0x50
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	2b03      	cmp	r3, #3
 800c272:	d101      	bne.n	800c278 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800c274:	2301      	movs	r3, #1
 800c276:	e0a7      	b.n	800c3c8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c278:	f107 0308 	add.w	r3, r7, #8
 800c27c:	4619      	mov	r1, r3
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 fb36 	bl	800c8f0 <SD_SendSDStatus>
 800c284:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d011      	beq.n	800c2b0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a4f      	ldr	r2, [pc, #316]	; (800c3d0 <HAL_SD_GetCardStatus+0x178>)
 800c292:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c29a:	431a      	orrs	r2, r3
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c2ae:	e070      	b.n	800c392 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	099b      	lsrs	r3, r3, #6
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	f003 0303 	and.w	r3, r3, #3
 800c2ba:	b2da      	uxtb	r2, r3
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	095b      	lsrs	r3, r3, #5
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	f003 0301 	and.w	r3, r3, #1
 800c2ca:	b2da      	uxtb	r2, r3
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	0a1b      	lsrs	r3, r3, #8
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c2da:	b29a      	uxth	r2, r3
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	0e1b      	lsrs	r3, r3, #24
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	b29a      	uxth	r2, r3
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	061a      	lsls	r2, r3, #24
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	021b      	lsls	r3, r3, #8
 800c2f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c2f6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	0a1b      	lsrs	r3, r3, #8
 800c2fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c300:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	0e1b      	lsrs	r3, r3, #24
 800c306:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	b2da      	uxtb	r2, r3
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	0a1b      	lsrs	r3, r3, #8
 800c318:	b2da      	uxtb	r2, r3
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	0d1b      	lsrs	r3, r3, #20
 800c322:	b2db      	uxtb	r3, r3
 800c324:	f003 030f 	and.w	r3, r3, #15
 800c328:	b2da      	uxtb	r2, r3
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	0c1b      	lsrs	r3, r3, #16
 800c332:	b29b      	uxth	r3, r3
 800c334:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c338:	b29a      	uxth	r2, r3
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	b29b      	uxth	r3, r3
 800c342:	4313      	orrs	r3, r2
 800c344:	b29a      	uxth	r2, r3
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	0a9b      	lsrs	r3, r3, #10
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c354:	b2da      	uxtb	r2, r3
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	0a1b      	lsrs	r3, r3, #8
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	f003 0303 	and.w	r3, r3, #3
 800c364:	b2da      	uxtb	r2, r3
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	091b      	lsrs	r3, r3, #4
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	f003 030f 	and.w	r3, r3, #15
 800c374:	b2da      	uxtb	r2, r3
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	f003 030f 	and.w	r3, r3, #15
 800c382:	b2da      	uxtb	r2, r3
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	0e1b      	lsrs	r3, r3, #24
 800c38c:	b2da      	uxtb	r2, r3
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c39a:	4618      	mov	r0, r3
 800c39c:	f002 f838 	bl	800e410 <SDMMC_CmdBlockLength>
 800c3a0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c3a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00d      	beq.n	800c3c4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a08      	ldr	r2, [pc, #32]	; (800c3d0 <HAL_SD_GetCardStatus+0x178>)
 800c3ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3b4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800c3c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3750      	adds	r7, #80	; 0x50
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	1fe00fff 	.word	0x1fe00fff

0800c3d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c3d4:	b590      	push	{r4, r7, lr}
 800c3d6:	b08d      	sub	sp, #52	; 0x34
 800c3d8:	af02      	add	r7, sp, #8
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2203      	movs	r2, #3
 800c3e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f0:	2b03      	cmp	r3, #3
 800c3f2:	d02e      	beq.n	800c452 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3fa:	d106      	bne.n	800c40a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c400:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	635a      	str	r2, [r3, #52]	; 0x34
 800c408:	e029      	b.n	800c45e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c410:	d10a      	bne.n	800c428 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 fb64 	bl	800cae0 <SD_WideBus_Enable>
 800c418:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c41e:	6a3b      	ldr	r3, [r7, #32]
 800c420:	431a      	orrs	r2, r3
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	635a      	str	r2, [r3, #52]	; 0x34
 800c426:	e01a      	b.n	800c45e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d10a      	bne.n	800c444 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 fba1 	bl	800cb76 <SD_WideBus_Disable>
 800c434:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c43a:	6a3b      	ldr	r3, [r7, #32]
 800c43c:	431a      	orrs	r2, r3
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	635a      	str	r2, [r3, #52]	; 0x34
 800c442:	e00c      	b.n	800c45e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c448:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	635a      	str	r2, [r3, #52]	; 0x34
 800c450:	e005      	b.n	800c45e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c456:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c462:	2b00      	cmp	r3, #0
 800c464:	d007      	beq.n	800c476 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a5f      	ldr	r2, [pc, #380]	; (800c5e8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800c46c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c46e:	2301      	movs	r3, #1
 800c470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c474:	e096      	b.n	800c5a4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c476:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c47a:	f04f 0100 	mov.w	r1, #0
 800c47e:	f7fd fcc1 	bl	8009e04 <HAL_RCCEx_GetPeriphCLKFreq>
 800c482:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	2b00      	cmp	r3, #0
 800c488:	f000 8083 	beq.w	800c592 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	695a      	ldr	r2, [r3, #20]
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	4950      	ldr	r1, [pc, #320]	; (800c5ec <HAL_SD_ConfigWideBusOperation+0x218>)
 800c4aa:	fba1 1303 	umull	r1, r3, r1, r3
 800c4ae:	0e1b      	lsrs	r3, r3, #24
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d303      	bcc.n	800c4bc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	695b      	ldr	r3, [r3, #20]
 800c4b8:	61bb      	str	r3, [r7, #24]
 800c4ba:	e05a      	b.n	800c572 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4c4:	d103      	bne.n	800c4ce <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	695b      	ldr	r3, [r3, #20]
 800c4ca:	61bb      	str	r3, [r7, #24]
 800c4cc:	e051      	b.n	800c572 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4d6:	d126      	bne.n	800c526 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	695b      	ldr	r3, [r3, #20]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d10e      	bne.n	800c4fe <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	4a43      	ldr	r2, [pc, #268]	; (800c5f0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d906      	bls.n	800c4f6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c4e8:	69fb      	ldr	r3, [r7, #28]
 800c4ea:	4a40      	ldr	r2, [pc, #256]	; (800c5ec <HAL_SD_ConfigWideBusOperation+0x218>)
 800c4ec:	fba2 2303 	umull	r2, r3, r2, r3
 800c4f0:	0e5b      	lsrs	r3, r3, #25
 800c4f2:	61bb      	str	r3, [r7, #24]
 800c4f4:	e03d      	b.n	800c572 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	695b      	ldr	r3, [r3, #20]
 800c4fa:	61bb      	str	r3, [r7, #24]
 800c4fc:	e039      	b.n	800c572 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	695b      	ldr	r3, [r3, #20]
 800c502:	005b      	lsls	r3, r3, #1
 800c504:	69fa      	ldr	r2, [r7, #28]
 800c506:	fbb2 f3f3 	udiv	r3, r2, r3
 800c50a:	4a39      	ldr	r2, [pc, #228]	; (800c5f0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d906      	bls.n	800c51e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	4a36      	ldr	r2, [pc, #216]	; (800c5ec <HAL_SD_ConfigWideBusOperation+0x218>)
 800c514:	fba2 2303 	umull	r2, r3, r2, r3
 800c518:	0e5b      	lsrs	r3, r3, #25
 800c51a:	61bb      	str	r3, [r7, #24]
 800c51c:	e029      	b.n	800c572 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	695b      	ldr	r3, [r3, #20]
 800c522:	61bb      	str	r3, [r7, #24]
 800c524:	e025      	b.n	800c572 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	695b      	ldr	r3, [r3, #20]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d10e      	bne.n	800c54c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800c52e:	69fb      	ldr	r3, [r7, #28]
 800c530:	4a30      	ldr	r2, [pc, #192]	; (800c5f4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d906      	bls.n	800c544 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	4a2c      	ldr	r2, [pc, #176]	; (800c5ec <HAL_SD_ConfigWideBusOperation+0x218>)
 800c53a:	fba2 2303 	umull	r2, r3, r2, r3
 800c53e:	0e1b      	lsrs	r3, r3, #24
 800c540:	61bb      	str	r3, [r7, #24]
 800c542:	e016      	b.n	800c572 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	695b      	ldr	r3, [r3, #20]
 800c548:	61bb      	str	r3, [r7, #24]
 800c54a:	e012      	b.n	800c572 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	695b      	ldr	r3, [r3, #20]
 800c550:	005b      	lsls	r3, r3, #1
 800c552:	69fa      	ldr	r2, [r7, #28]
 800c554:	fbb2 f3f3 	udiv	r3, r2, r3
 800c558:	4a26      	ldr	r2, [pc, #152]	; (800c5f4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d906      	bls.n	800c56c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	4a22      	ldr	r2, [pc, #136]	; (800c5ec <HAL_SD_ConfigWideBusOperation+0x218>)
 800c562:	fba2 2303 	umull	r2, r3, r2, r3
 800c566:	0e1b      	lsrs	r3, r3, #24
 800c568:	61bb      	str	r3, [r7, #24]
 800c56a:	e002      	b.n	800c572 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	695b      	ldr	r3, [r3, #20]
 800c570:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681c      	ldr	r4, [r3, #0]
 800c576:	466a      	mov	r2, sp
 800c578:	f107 0314 	add.w	r3, r7, #20
 800c57c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c580:	e882 0003 	stmia.w	r2, {r0, r1}
 800c584:	f107 0308 	add.w	r3, r7, #8
 800c588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c58a:	4620      	mov	r0, r4
 800c58c:	f001 fe74 	bl	800e278 <SDMMC_Init>
 800c590:	e008      	b.n	800c5a4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c596:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f001 ff2f 	bl	800e410 <SDMMC_CmdBlockLength>
 800c5b2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c5b4:	6a3b      	ldr	r3, [r7, #32]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d00c      	beq.n	800c5d4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a0a      	ldr	r2, [pc, #40]	; (800c5e8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800c5c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5c6:	6a3b      	ldr	r3, [r7, #32]
 800c5c8:	431a      	orrs	r2, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800c5dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	372c      	adds	r7, #44	; 0x2c
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd90      	pop	{r4, r7, pc}
 800c5e8:	1fe00fff 	.word	0x1fe00fff
 800c5ec:	55e63b89 	.word	0x55e63b89
 800c5f0:	02faf080 	.word	0x02faf080
 800c5f4:	017d7840 	.word	0x017d7840

0800c5f8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c600:	2300      	movs	r3, #0
 800c602:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c604:	f107 030c 	add.w	r3, r7, #12
 800c608:	4619      	mov	r1, r3
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 fa40 	bl	800ca90 <SD_SendStatus>
 800c610:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d005      	beq.n	800c624 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	431a      	orrs	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	0a5b      	lsrs	r3, r3, #9
 800c628:	f003 030f 	and.w	r3, r3, #15
 800c62c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c62e:	693b      	ldr	r3, [r7, #16]
}
 800c630:	4618      	mov	r0, r3
 800c632:	3718      	adds	r7, #24
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b090      	sub	sp, #64	; 0x40
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800c640:	2300      	movs	r3, #0
 800c642:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800c644:	f7f6 fd56 	bl	80030f4 <HAL_GetTick>
 800c648:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4618      	mov	r0, r3
 800c650:	f001 fe5a 	bl	800e308 <SDMMC_GetPowerState>
 800c654:	4603      	mov	r3, r0
 800c656:	2b00      	cmp	r3, #0
 800c658:	d102      	bne.n	800c660 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c65a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c65e:	e0b5      	b.n	800c7cc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c664:	2b03      	cmp	r3, #3
 800c666:	d02e      	beq.n	800c6c6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f001 ffdb 	bl	800e628 <SDMMC_CmdSendCID>
 800c672:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c676:	2b00      	cmp	r3, #0
 800c678:	d001      	beq.n	800c67e <SD_InitCard+0x46>
    {
      return errorstate;
 800c67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67c:	e0a6      	b.n	800c7cc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	2100      	movs	r1, #0
 800c684:	4618      	mov	r0, r3
 800c686:	f001 fe84 	bl	800e392 <SDMMC_GetResponse>
 800c68a:	4602      	mov	r2, r0
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2104      	movs	r1, #4
 800c696:	4618      	mov	r0, r3
 800c698:	f001 fe7b 	bl	800e392 <SDMMC_GetResponse>
 800c69c:	4602      	mov	r2, r0
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	2108      	movs	r1, #8
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f001 fe72 	bl	800e392 <SDMMC_GetResponse>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	210c      	movs	r1, #12
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f001 fe69 	bl	800e392 <SDMMC_GetResponse>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ca:	2b03      	cmp	r3, #3
 800c6cc:	d01d      	beq.n	800c70a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800c6ce:	e019      	b.n	800c704 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f107 020a 	add.w	r2, r7, #10
 800c6d8:	4611      	mov	r1, r2
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f001 ffe3 	bl	800e6a6 <SDMMC_CmdSetRelAdd>
 800c6e0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800c6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d001      	beq.n	800c6ec <SD_InitCard+0xb4>
      {
        return errorstate;
 800c6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ea:	e06f      	b.n	800c7cc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800c6ec:	f7f6 fd02 	bl	80030f4 <HAL_GetTick>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f4:	1ad3      	subs	r3, r2, r3
 800c6f6:	f241 3287 	movw	r2, #4999	; 0x1387
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d902      	bls.n	800c704 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800c6fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c702:	e063      	b.n	800c7cc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800c704:	897b      	ldrh	r3, [r7, #10]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d0e2      	beq.n	800c6d0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70e:	2b03      	cmp	r3, #3
 800c710:	d036      	beq.n	800c780 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c712:	897b      	ldrh	r3, [r7, #10]
 800c714:	461a      	mov	r2, r3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681a      	ldr	r2, [r3, #0]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c722:	041b      	lsls	r3, r3, #16
 800c724:	4619      	mov	r1, r3
 800c726:	4610      	mov	r0, r2
 800c728:	f001 ff9d 	bl	800e666 <SDMMC_CmdSendCSD>
 800c72c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c730:	2b00      	cmp	r3, #0
 800c732:	d001      	beq.n	800c738 <SD_InitCard+0x100>
    {
      return errorstate;
 800c734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c736:	e049      	b.n	800c7cc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2100      	movs	r1, #0
 800c73e:	4618      	mov	r0, r3
 800c740:	f001 fe27 	bl	800e392 <SDMMC_GetResponse>
 800c744:	4602      	mov	r2, r0
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2104      	movs	r1, #4
 800c750:	4618      	mov	r0, r3
 800c752:	f001 fe1e 	bl	800e392 <SDMMC_GetResponse>
 800c756:	4602      	mov	r2, r0
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2108      	movs	r1, #8
 800c762:	4618      	mov	r0, r3
 800c764:	f001 fe15 	bl	800e392 <SDMMC_GetResponse>
 800c768:	4602      	mov	r2, r0
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	210c      	movs	r1, #12
 800c774:	4618      	mov	r0, r3
 800c776:	f001 fe0c 	bl	800e392 <SDMMC_GetResponse>
 800c77a:	4602      	mov	r2, r0
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	2104      	movs	r1, #4
 800c786:	4618      	mov	r0, r3
 800c788:	f001 fe03 	bl	800e392 <SDMMC_GetResponse>
 800c78c:	4603      	mov	r3, r0
 800c78e:	0d1a      	lsrs	r2, r3, #20
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c794:	f107 030c 	add.w	r3, r7, #12
 800c798:	4619      	mov	r1, r3
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f7ff fbb8 	bl	800bf10 <HAL_SD_GetCardCSD>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d002      	beq.n	800c7ac <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c7a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c7aa:	e00f      	b.n	800c7cc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7b4:	041b      	lsls	r3, r3, #16
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	4610      	mov	r0, r2
 800c7ba:	f001 fe4c 	bl	800e456 <SDMMC_CmdSelDesel>
 800c7be:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d001      	beq.n	800c7ca <SD_InitCard+0x192>
  {
    return errorstate;
 800c7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c8:	e000      	b.n	800c7cc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c7ca:	2300      	movs	r3, #0
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3740      	adds	r7, #64	; 0x40
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b086      	sub	sp, #24
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f001 fe55 	bl	800e49c <SDMMC_CmdGoIdleState>
 800c7f2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d001      	beq.n	800c7fe <SD_PowerON+0x2a>
  {
    return errorstate;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	e072      	b.n	800c8e4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4618      	mov	r0, r3
 800c804:	f001 fe68 	bl	800e4d8 <SDMMC_CmdOperCond>
 800c808:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c810:	d10d      	bne.n	800c82e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f001 fe3d 	bl	800e49c <SDMMC_CmdGoIdleState>
 800c822:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d004      	beq.n	800c834 <SD_PowerON+0x60>
    {
      return errorstate;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	e05a      	b.n	800c8e4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2201      	movs	r2, #1
 800c832:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d137      	bne.n	800c8ac <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2100      	movs	r1, #0
 800c842:	4618      	mov	r0, r3
 800c844:	f001 fe68 	bl	800e518 <SDMMC_CmdAppCommand>
 800c848:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d02d      	beq.n	800c8ac <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c850:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c854:	e046      	b.n	800c8e4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2100      	movs	r1, #0
 800c85c:	4618      	mov	r0, r3
 800c85e:	f001 fe5b 	bl	800e518 <SDMMC_CmdAppCommand>
 800c862:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d001      	beq.n	800c86e <SD_PowerON+0x9a>
    {
      return errorstate;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	e03a      	b.n	800c8e4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	491e      	ldr	r1, [pc, #120]	; (800c8ec <SD_PowerON+0x118>)
 800c874:	4618      	mov	r0, r3
 800c876:	f001 fe72 	bl	800e55e <SDMMC_CmdAppOperCommand>
 800c87a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d002      	beq.n	800c888 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c882:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c886:	e02d      	b.n	800c8e4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	2100      	movs	r1, #0
 800c88e:	4618      	mov	r0, r3
 800c890:	f001 fd7f 	bl	800e392 <SDMMC_GetResponse>
 800c894:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	0fdb      	lsrs	r3, r3, #31
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	d101      	bne.n	800c8a2 <SD_PowerON+0xce>
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e000      	b.n	800c8a4 <SD_PowerON+0xd0>
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	613b      	str	r3, [r7, #16]

    count++;
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d802      	bhi.n	800c8bc <SD_PowerON+0xe8>
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d0cc      	beq.n	800c856 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d902      	bls.n	800c8cc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c8c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c8ca:	e00b      	b.n	800c8e4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d002      	beq.n	800c8e2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800c8e2:	2300      	movs	r3, #0
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3718      	adds	r7, #24
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	c1100000 	.word	0xc1100000

0800c8f0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b08c      	sub	sp, #48	; 0x30
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c8fa:	f7f6 fbfb 	bl	80030f4 <HAL_GetTick>
 800c8fe:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2100      	movs	r1, #0
 800c90a:	4618      	mov	r0, r3
 800c90c:	f001 fd41 	bl	800e392 <SDMMC_GetResponse>
 800c910:	4603      	mov	r3, r0
 800c912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c916:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c91a:	d102      	bne.n	800c922 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c91c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c920:	e0b0      	b.n	800ca84 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2140      	movs	r1, #64	; 0x40
 800c928:	4618      	mov	r0, r3
 800c92a:	f001 fd71 	bl	800e410 <SDMMC_CmdBlockLength>
 800c92e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c930:	6a3b      	ldr	r3, [r7, #32]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d005      	beq.n	800c942 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800c93e:	6a3b      	ldr	r3, [r7, #32]
 800c940:	e0a0      	b.n	800ca84 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c94a:	041b      	lsls	r3, r3, #16
 800c94c:	4619      	mov	r1, r3
 800c94e:	4610      	mov	r0, r2
 800c950:	f001 fde2 	bl	800e518 <SDMMC_CmdAppCommand>
 800c954:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c956:	6a3b      	ldr	r3, [r7, #32]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d005      	beq.n	800c968 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800c964:	6a3b      	ldr	r3, [r7, #32]
 800c966:	e08d      	b.n	800ca84 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c968:	f04f 33ff 	mov.w	r3, #4294967295
 800c96c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800c96e:	2340      	movs	r3, #64	; 0x40
 800c970:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800c972:	2360      	movs	r3, #96	; 0x60
 800c974:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c976:	2302      	movs	r3, #2
 800c978:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c97a:	2300      	movs	r3, #0
 800c97c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c97e:	2301      	movs	r3, #1
 800c980:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f107 0208 	add.w	r2, r7, #8
 800c98a:	4611      	mov	r1, r2
 800c98c:	4618      	mov	r0, r3
 800c98e:	f001 fd13 	bl	800e3b8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4618      	mov	r0, r3
 800c998:	f001 feca 	bl	800e730 <SDMMC_CmdStatusRegister>
 800c99c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c99e:	6a3b      	ldr	r3, [r7, #32]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d02b      	beq.n	800c9fc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800c9ac:	6a3b      	ldr	r3, [r7, #32]
 800c9ae:	e069      	b.n	800ca84 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d013      	beq.n	800c9e6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800c9be:	2300      	movs	r3, #0
 800c9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9c2:	e00d      	b.n	800c9e0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f001 fc7f 	bl	800e2cc <SDMMC_ReadFIFO>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d2:	601a      	str	r2, [r3, #0]
        pData++;
 800c9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800c9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9dc:	3301      	adds	r3, #1
 800c9de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e2:	2b07      	cmp	r3, #7
 800c9e4:	d9ee      	bls.n	800c9c4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800c9e6:	f7f6 fb85 	bl	80030f4 <HAL_GetTick>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ee:	1ad3      	subs	r3, r2, r3
 800c9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9f4:	d102      	bne.n	800c9fc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c9f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c9fa:	e043      	b.n	800ca84 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca02:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d0d2      	beq.n	800c9b0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca10:	f003 0308 	and.w	r3, r3, #8
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d001      	beq.n	800ca1c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ca18:	2308      	movs	r3, #8
 800ca1a:	e033      	b.n	800ca84 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca22:	f003 0302 	and.w	r3, r3, #2
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d001      	beq.n	800ca2e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ca2a:	2302      	movs	r3, #2
 800ca2c:	e02a      	b.n	800ca84 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca34:	f003 0320 	and.w	r3, r3, #32
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d017      	beq.n	800ca6c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ca3c:	2320      	movs	r3, #32
 800ca3e:	e021      	b.n	800ca84 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4618      	mov	r0, r3
 800ca46:	f001 fc41 	bl	800e2cc <SDMMC_ReadFIFO>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4e:	601a      	str	r2, [r3, #0]
    pData++;
 800ca50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca52:	3304      	adds	r3, #4
 800ca54:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800ca56:	f7f6 fb4d 	bl	80030f4 <HAL_GetTick>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5e:	1ad3      	subs	r3, r2, r3
 800ca60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca64:	d102      	bne.n	800ca6c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ca66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca6a:	e00b      	b.n	800ca84 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1e2      	bne.n	800ca40 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4a03      	ldr	r2, [pc, #12]	; (800ca8c <SD_SendSDStatus+0x19c>)
 800ca80:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800ca82:	2300      	movs	r3, #0
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3730      	adds	r7, #48	; 0x30
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}
 800ca8c:	18000f3a 	.word	0x18000f3a

0800ca90 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d102      	bne.n	800caa6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800caa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800caa4:	e018      	b.n	800cad8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caae:	041b      	lsls	r3, r3, #16
 800cab0:	4619      	mov	r1, r3
 800cab2:	4610      	mov	r0, r2
 800cab4:	f001 fe19 	bl	800e6ea <SDMMC_CmdSendStatus>
 800cab8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d001      	beq.n	800cac4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	e009      	b.n	800cad8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2100      	movs	r1, #0
 800caca:	4618      	mov	r0, r3
 800cacc:	f001 fc61 	bl	800e392 <SDMMC_GetResponse>
 800cad0:	4602      	mov	r2, r0
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800cad6:	2300      	movs	r3, #0
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3710      	adds	r7, #16
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b086      	sub	sp, #24
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800cae8:	2300      	movs	r3, #0
 800caea:	60fb      	str	r3, [r7, #12]
 800caec:	2300      	movs	r3, #0
 800caee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2100      	movs	r1, #0
 800caf6:	4618      	mov	r0, r3
 800caf8:	f001 fc4b 	bl	800e392 <SDMMC_GetResponse>
 800cafc:	4603      	mov	r3, r0
 800cafe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb06:	d102      	bne.n	800cb0e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cb08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb0c:	e02f      	b.n	800cb6e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cb0e:	f107 030c 	add.w	r3, r7, #12
 800cb12:	4619      	mov	r1, r3
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 f879 	bl	800cc0c <SD_FindSCR>
 800cb1a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d001      	beq.n	800cb26 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	e023      	b.n	800cb6e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d01c      	beq.n	800cb6a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb38:	041b      	lsls	r3, r3, #16
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	4610      	mov	r0, r2
 800cb3e:	f001 fceb 	bl	800e518 <SDMMC_CmdAppCommand>
 800cb42:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d001      	beq.n	800cb4e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	e00f      	b.n	800cb6e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2102      	movs	r1, #2
 800cb54:	4618      	mov	r0, r3
 800cb56:	f001 fd22 	bl	800e59e <SDMMC_CmdBusWidth>
 800cb5a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d001      	beq.n	800cb66 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	e003      	b.n	800cb6e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cb66:	2300      	movs	r3, #0
 800cb68:	e001      	b.n	800cb6e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cb6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3718      	adds	r7, #24
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b086      	sub	sp, #24
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800cb7e:	2300      	movs	r3, #0
 800cb80:	60fb      	str	r3, [r7, #12]
 800cb82:	2300      	movs	r3, #0
 800cb84:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f001 fc00 	bl	800e392 <SDMMC_GetResponse>
 800cb92:	4603      	mov	r3, r0
 800cb94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb9c:	d102      	bne.n	800cba4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cb9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cba2:	e02f      	b.n	800cc04 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cba4:	f107 030c 	add.w	r3, r7, #12
 800cba8:	4619      	mov	r1, r3
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 f82e 	bl	800cc0c <SD_FindSCR>
 800cbb0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d001      	beq.n	800cbbc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	e023      	b.n	800cc04 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d01c      	beq.n	800cc00 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbce:	041b      	lsls	r3, r3, #16
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	4610      	mov	r0, r2
 800cbd4:	f001 fca0 	bl	800e518 <SDMMC_CmdAppCommand>
 800cbd8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d001      	beq.n	800cbe4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	e00f      	b.n	800cc04 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	2100      	movs	r1, #0
 800cbea:	4618      	mov	r0, r3
 800cbec:	f001 fcd7 	bl	800e59e <SDMMC_CmdBusWidth>
 800cbf0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d001      	beq.n	800cbfc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	e003      	b.n	800cc04 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	e001      	b.n	800cc04 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cc00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3718      	adds	r7, #24
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b08e      	sub	sp, #56	; 0x38
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cc16:	f7f6 fa6d 	bl	80030f4 <HAL_GetTick>
 800cc1a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800cc20:	2300      	movs	r3, #0
 800cc22:	60bb      	str	r3, [r7, #8]
 800cc24:	2300      	movs	r3, #0
 800cc26:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2108      	movs	r1, #8
 800cc32:	4618      	mov	r0, r3
 800cc34:	f001 fbec 	bl	800e410 <SDMMC_CmdBlockLength>
 800cc38:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d001      	beq.n	800cc44 <SD_FindSCR+0x38>
  {
    return errorstate;
 800cc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc42:	e0ad      	b.n	800cda0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc4c:	041b      	lsls	r3, r3, #16
 800cc4e:	4619      	mov	r1, r3
 800cc50:	4610      	mov	r0, r2
 800cc52:	f001 fc61 	bl	800e518 <SDMMC_CmdAppCommand>
 800cc56:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d001      	beq.n	800cc62 <SD_FindSCR+0x56>
  {
    return errorstate;
 800cc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc60:	e09e      	b.n	800cda0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cc62:	f04f 33ff 	mov.w	r3, #4294967295
 800cc66:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800cc68:	2308      	movs	r3, #8
 800cc6a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800cc6c:	2330      	movs	r3, #48	; 0x30
 800cc6e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cc70:	2302      	movs	r3, #2
 800cc72:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cc74:	2300      	movs	r3, #0
 800cc76:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f107 0210 	add.w	r2, r7, #16
 800cc84:	4611      	mov	r1, r2
 800cc86:	4618      	mov	r0, r3
 800cc88:	f001 fb96 	bl	800e3b8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4618      	mov	r0, r3
 800cc92:	f001 fca7 	bl	800e5e4 <SDMMC_CmdSendSCR>
 800cc96:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d027      	beq.n	800ccee <SD_FindSCR+0xe2>
  {
    return errorstate;
 800cc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca0:	e07e      	b.n	800cda0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cca8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d113      	bne.n	800ccd8 <SD_FindSCR+0xcc>
 800ccb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d110      	bne.n	800ccd8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f001 fb06 	bl	800e2cc <SDMMC_ReadFIFO>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f001 faff 	bl	800e2cc <SDMMC_ReadFIFO>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	60fb      	str	r3, [r7, #12]
      index++;
 800ccd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800ccd8:	f7f6 fa0c 	bl	80030f4 <HAL_GetTick>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cce6:	d102      	bne.n	800ccee <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cce8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ccec:	e058      	b.n	800cda0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccf4:	f240 532a 	movw	r3, #1322	; 0x52a
 800ccf8:	4013      	ands	r3, r2
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d0d1      	beq.n	800cca2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd04:	f003 0308 	and.w	r3, r3, #8
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d005      	beq.n	800cd18 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2208      	movs	r2, #8
 800cd12:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cd14:	2308      	movs	r3, #8
 800cd16:	e043      	b.n	800cda0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd1e:	f003 0302 	and.w	r3, r3, #2
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d005      	beq.n	800cd32 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2202      	movs	r2, #2
 800cd2c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cd2e:	2302      	movs	r3, #2
 800cd30:	e036      	b.n	800cda0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd38:	f003 0320 	and.w	r3, r3, #32
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d005      	beq.n	800cd4c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	2220      	movs	r2, #32
 800cd46:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800cd48:	2320      	movs	r3, #32
 800cd4a:	e029      	b.n	800cda0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a15      	ldr	r2, [pc, #84]	; (800cda8 <SD_FindSCR+0x19c>)
 800cd52:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	061a      	lsls	r2, r3, #24
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	021b      	lsls	r3, r3, #8
 800cd5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cd60:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	0a1b      	lsrs	r3, r3, #8
 800cd66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800cd6a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	0e1b      	lsrs	r3, r3, #24
 800cd70:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800cd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd74:	601a      	str	r2, [r3, #0]
    scr++;
 800cd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd78:	3304      	adds	r3, #4
 800cd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	061a      	lsls	r2, r3, #24
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	021b      	lsls	r3, r3, #8
 800cd84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cd88:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	0a1b      	lsrs	r3, r3, #8
 800cd8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800cd92:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	0e1b      	lsrs	r3, r3, #24
 800cd98:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800cd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800cd9e:	2300      	movs	r3, #0
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3738      	adds	r7, #56	; 0x38
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	18000f3a 	.word	0x18000f3a

0800cdac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d101      	bne.n	800cdbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e0fb      	b.n	800cfb6 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4a7f      	ldr	r2, [pc, #508]	; (800cfc0 <HAL_SPI_Init+0x214>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d004      	beq.n	800cdd2 <HAL_SPI_Init+0x26>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a7d      	ldr	r2, [pc, #500]	; (800cfc4 <HAL_SPI_Init+0x218>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	e000      	b.n	800cdd4 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800cdd2:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4a78      	ldr	r2, [pc, #480]	; (800cfc0 <HAL_SPI_Init+0x214>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d004      	beq.n	800cdee <HAL_SPI_Init+0x42>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a76      	ldr	r2, [pc, #472]	; (800cfc4 <HAL_SPI_Init+0x218>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d105      	bne.n	800cdfa <HAL_SPI_Init+0x4e>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	68db      	ldr	r3, [r3, #12]
 800cdf2:	2b0f      	cmp	r3, #15
 800cdf4:	d901      	bls.n	800cdfa <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	e0dd      	b.n	800cfb6 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f8ec 	bl	800cfd8 <SPI_GetPacketSize>
 800ce00:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4a6e      	ldr	r2, [pc, #440]	; (800cfc0 <HAL_SPI_Init+0x214>)
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d004      	beq.n	800ce16 <HAL_SPI_Init+0x6a>
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4a6c      	ldr	r2, [pc, #432]	; (800cfc4 <HAL_SPI_Init+0x218>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d102      	bne.n	800ce1c <HAL_SPI_Init+0x70>
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2b08      	cmp	r3, #8
 800ce1a:	d816      	bhi.n	800ce4a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ce20:	4a69      	ldr	r2, [pc, #420]	; (800cfc8 <HAL_SPI_Init+0x21c>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d00e      	beq.n	800ce44 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a68      	ldr	r2, [pc, #416]	; (800cfcc <HAL_SPI_Init+0x220>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d009      	beq.n	800ce44 <HAL_SPI_Init+0x98>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a66      	ldr	r2, [pc, #408]	; (800cfd0 <HAL_SPI_Init+0x224>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d004      	beq.n	800ce44 <HAL_SPI_Init+0x98>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4a65      	ldr	r2, [pc, #404]	; (800cfd4 <HAL_SPI_Init+0x228>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d104      	bne.n	800ce4e <HAL_SPI_Init+0xa2>
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2b10      	cmp	r3, #16
 800ce48:	d901      	bls.n	800ce4e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e0b3      	b.n	800cfb6 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d106      	bne.n	800ce68 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f7f5 fea0 	bl	8002ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2202      	movs	r2, #2
 800ce6c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f022 0201 	bic.w	r2, r2, #1
 800ce7e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	689b      	ldr	r3, [r3, #8]
 800ce86:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ce8a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	699b      	ldr	r3, [r3, #24]
 800ce90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ce94:	d119      	bne.n	800ceca <HAL_SPI_Init+0x11e>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce9e:	d103      	bne.n	800cea8 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d008      	beq.n	800ceba <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d10c      	bne.n	800ceca <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ceb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ceb8:	d107      	bne.n	800ceca <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cec8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d00f      	beq.n	800cef6 <HAL_SPI_Init+0x14a>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	2b06      	cmp	r3, #6
 800cedc:	d90b      	bls.n	800cef6 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	430a      	orrs	r2, r1
 800cef2:	601a      	str	r2, [r3, #0]
 800cef4:	e007      	b.n	800cf06 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cf04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	69da      	ldr	r2, [r3, #28]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf0e:	431a      	orrs	r2, r3
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	431a      	orrs	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf18:	ea42 0103 	orr.w	r1, r2, r3
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	68da      	ldr	r2, [r3, #12]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	430a      	orrs	r2, r1
 800cf26:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf30:	431a      	orrs	r2, r3
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf36:	431a      	orrs	r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	699b      	ldr	r3, [r3, #24]
 800cf3c:	431a      	orrs	r2, r3
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	691b      	ldr	r3, [r3, #16]
 800cf42:	431a      	orrs	r2, r3
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	695b      	ldr	r3, [r3, #20]
 800cf48:	431a      	orrs	r2, r3
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6a1b      	ldr	r3, [r3, #32]
 800cf4e:	431a      	orrs	r2, r3
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	431a      	orrs	r2, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf5a:	431a      	orrs	r2, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	431a      	orrs	r2, r3
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf66:	431a      	orrs	r2, r3
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf6c:	431a      	orrs	r2, r3
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf72:	ea42 0103 	orr.w	r1, r2, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	430a      	orrs	r2, r1
 800cf80:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d00a      	beq.n	800cfa4 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	430a      	orrs	r2, r1
 800cfa2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800cfb4:	2300      	movs	r3, #0
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	46002000 	.word	0x46002000
 800cfc4:	56002000 	.word	0x56002000
 800cfc8:	40013000 	.word	0x40013000
 800cfcc:	50013000 	.word	0x50013000
 800cfd0:	40003800 	.word	0x40003800
 800cfd4:	50003800 	.word	0x50003800

0800cfd8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfe4:	095b      	lsrs	r3, r3, #5
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	68db      	ldr	r3, [r3, #12]
 800cfee:	3301      	adds	r3, #1
 800cff0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	3307      	adds	r3, #7
 800cff6:	08db      	lsrs	r3, r3, #3
 800cff8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	68fa      	ldr	r2, [r7, #12]
 800cffe:	fb02 f303 	mul.w	r3, r2, r3
}
 800d002:	4618      	mov	r0, r3
 800d004:	3714      	adds	r7, #20
 800d006:	46bd      	mov	sp, r7
 800d008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00c:	4770      	bx	lr

0800d00e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800d00e:	b480      	push	{r7}
 800d010:	b083      	sub	sp, #12
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
 800d016:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	2b01      	cmp	r3, #1
 800d022:	d12e      	bne.n	800d082 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d101      	bne.n	800d032 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800d02e:	2302      	movs	r3, #2
 800d030:	e028      	b.n	800d084 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2201      	movs	r2, #1
 800d036:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2202      	movs	r2, #2
 800d03e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	681a      	ldr	r2, [r3, #0]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f022 0201 	bic.w	r2, r2, #1
 800d050:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800d05e:	ea42 0103 	orr.w	r1, r2, r3
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	689a      	ldr	r2, [r3, #8]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	430a      	orrs	r2, r1
 800d06c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2201      	movs	r2, #1
 800d072:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d07e:	2300      	movs	r3, #0
 800d080:	e000      	b.n	800d084 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800d082:	2301      	movs	r3, #1
  }
}
 800d084:	4618      	mov	r0, r3
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d101      	bne.n	800d0a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	e049      	b.n	800d136 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d106      	bne.n	800d0bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 f841 	bl	800d13e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2202      	movs	r2, #2
 800d0c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	3304      	adds	r3, #4
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	4610      	mov	r0, r2
 800d0d0:	f000 fa58 	bl	800d584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2201      	movs	r2, #1
 800d100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2201      	movs	r2, #1
 800d110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2201      	movs	r2, #1
 800d118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2201      	movs	r2, #1
 800d120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2201      	movs	r2, #1
 800d128:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2201      	movs	r2, #1
 800d130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d134:	2300      	movs	r3, #0
}
 800d136:	4618      	mov	r0, r3
 800d138:	3708      	adds	r7, #8
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d13e:	b480      	push	{r7}
 800d140:	b083      	sub	sp, #12
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d146:	bf00      	nop
 800d148:	370c      	adds	r7, #12
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr
	...

0800d154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d154:	b480      	push	{r7}
 800d156:	b085      	sub	sp, #20
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d162:	b2db      	uxtb	r3, r3
 800d164:	2b01      	cmp	r3, #1
 800d166:	d001      	beq.n	800d16c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d168:	2301      	movs	r3, #1
 800d16a:	e072      	b.n	800d252 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2202      	movs	r2, #2
 800d170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	68da      	ldr	r2, [r3, #12]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f042 0201 	orr.w	r2, r2, #1
 800d182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4a35      	ldr	r2, [pc, #212]	; (800d260 <HAL_TIM_Base_Start_IT+0x10c>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d040      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0xbc>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	4a34      	ldr	r2, [pc, #208]	; (800d264 <HAL_TIM_Base_Start_IT+0x110>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d03b      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0xbc>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1a0:	d036      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0xbc>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d1aa:	d031      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0xbc>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a2d      	ldr	r2, [pc, #180]	; (800d268 <HAL_TIM_Base_Start_IT+0x114>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d02c      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0xbc>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a2c      	ldr	r2, [pc, #176]	; (800d26c <HAL_TIM_Base_Start_IT+0x118>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d027      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0xbc>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a2a      	ldr	r2, [pc, #168]	; (800d270 <HAL_TIM_Base_Start_IT+0x11c>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d022      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0xbc>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4a29      	ldr	r2, [pc, #164]	; (800d274 <HAL_TIM_Base_Start_IT+0x120>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d01d      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0xbc>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4a27      	ldr	r2, [pc, #156]	; (800d278 <HAL_TIM_Base_Start_IT+0x124>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d018      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0xbc>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a26      	ldr	r2, [pc, #152]	; (800d27c <HAL_TIM_Base_Start_IT+0x128>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d013      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0xbc>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a24      	ldr	r2, [pc, #144]	; (800d280 <HAL_TIM_Base_Start_IT+0x12c>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d00e      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0xbc>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a23      	ldr	r2, [pc, #140]	; (800d284 <HAL_TIM_Base_Start_IT+0x130>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d009      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0xbc>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a21      	ldr	r2, [pc, #132]	; (800d288 <HAL_TIM_Base_Start_IT+0x134>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d004      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0xbc>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a20      	ldr	r2, [pc, #128]	; (800d28c <HAL_TIM_Base_Start_IT+0x138>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d115      	bne.n	800d23c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	689a      	ldr	r2, [r3, #8]
 800d216:	4b1e      	ldr	r3, [pc, #120]	; (800d290 <HAL_TIM_Base_Start_IT+0x13c>)
 800d218:	4013      	ands	r3, r2
 800d21a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2b06      	cmp	r3, #6
 800d220:	d015      	beq.n	800d24e <HAL_TIM_Base_Start_IT+0xfa>
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d228:	d011      	beq.n	800d24e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	681a      	ldr	r2, [r3, #0]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f042 0201 	orr.w	r2, r2, #1
 800d238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d23a:	e008      	b.n	800d24e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f042 0201 	orr.w	r2, r2, #1
 800d24a:	601a      	str	r2, [r3, #0]
 800d24c:	e000      	b.n	800d250 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d24e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d250:	2300      	movs	r3, #0
}
 800d252:	4618      	mov	r0, r3
 800d254:	3714      	adds	r7, #20
 800d256:	46bd      	mov	sp, r7
 800d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop
 800d260:	40012c00 	.word	0x40012c00
 800d264:	50012c00 	.word	0x50012c00
 800d268:	40000400 	.word	0x40000400
 800d26c:	50000400 	.word	0x50000400
 800d270:	40000800 	.word	0x40000800
 800d274:	50000800 	.word	0x50000800
 800d278:	40000c00 	.word	0x40000c00
 800d27c:	50000c00 	.word	0x50000c00
 800d280:	40013400 	.word	0x40013400
 800d284:	50013400 	.word	0x50013400
 800d288:	40014000 	.word	0x40014000
 800d28c:	50014000 	.word	0x50014000
 800d290:	00010007 	.word	0x00010007

0800d294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	68db      	ldr	r3, [r3, #12]
 800d2a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	691b      	ldr	r3, [r3, #16]
 800d2aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	f003 0302 	and.w	r3, r3, #2
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d020      	beq.n	800d2f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f003 0302 	and.w	r3, r3, #2
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d01b      	beq.n	800d2f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f06f 0202 	mvn.w	r2, #2
 800d2c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	699b      	ldr	r3, [r3, #24]
 800d2d6:	f003 0303 	and.w	r3, r3, #3
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d003      	beq.n	800d2e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f000 f931 	bl	800d546 <HAL_TIM_IC_CaptureCallback>
 800d2e4:	e005      	b.n	800d2f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 f923 	bl	800d532 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 f934 	bl	800d55a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	f003 0304 	and.w	r3, r3, #4
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d020      	beq.n	800d344 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f003 0304 	and.w	r3, r3, #4
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d01b      	beq.n	800d344 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f06f 0204 	mvn.w	r2, #4
 800d314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2202      	movs	r2, #2
 800d31a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	699b      	ldr	r3, [r3, #24]
 800d322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d326:	2b00      	cmp	r3, #0
 800d328:	d003      	beq.n	800d332 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f000 f90b 	bl	800d546 <HAL_TIM_IC_CaptureCallback>
 800d330:	e005      	b.n	800d33e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 f8fd 	bl	800d532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f000 f90e 	bl	800d55a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2200      	movs	r2, #0
 800d342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	f003 0308 	and.w	r3, r3, #8
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d020      	beq.n	800d390 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f003 0308 	and.w	r3, r3, #8
 800d354:	2b00      	cmp	r3, #0
 800d356:	d01b      	beq.n	800d390 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f06f 0208 	mvn.w	r2, #8
 800d360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2204      	movs	r2, #4
 800d366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	69db      	ldr	r3, [r3, #28]
 800d36e:	f003 0303 	and.w	r3, r3, #3
 800d372:	2b00      	cmp	r3, #0
 800d374:	d003      	beq.n	800d37e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f000 f8e5 	bl	800d546 <HAL_TIM_IC_CaptureCallback>
 800d37c:	e005      	b.n	800d38a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f8d7 	bl	800d532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 f8e8 	bl	800d55a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2200      	movs	r2, #0
 800d38e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	f003 0310 	and.w	r3, r3, #16
 800d396:	2b00      	cmp	r3, #0
 800d398:	d020      	beq.n	800d3dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f003 0310 	and.w	r3, r3, #16
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d01b      	beq.n	800d3dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f06f 0210 	mvn.w	r2, #16
 800d3ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2208      	movs	r2, #8
 800d3b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	69db      	ldr	r3, [r3, #28]
 800d3ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d003      	beq.n	800d3ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 f8bf 	bl	800d546 <HAL_TIM_IC_CaptureCallback>
 800d3c8:	e005      	b.n	800d3d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 f8b1 	bl	800d532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f000 f8c2 	bl	800d55a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	f003 0301 	and.w	r3, r3, #1
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00c      	beq.n	800d400 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f003 0301 	and.w	r3, r3, #1
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d007      	beq.n	800d400 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f06f 0201 	mvn.w	r2, #1
 800d3f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f7f4 fb16 	bl	8001a2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d406:	2b00      	cmp	r3, #0
 800d408:	d104      	bne.n	800d414 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d410:	2b00      	cmp	r3, #0
 800d412:	d00c      	beq.n	800d42e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d007      	beq.n	800d42e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 f9af 	bl	800d78c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d434:	2b00      	cmp	r3, #0
 800d436:	d00c      	beq.n	800d452 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d007      	beq.n	800d452 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d44a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 f9a7 	bl	800d7a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d00c      	beq.n	800d476 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d462:	2b00      	cmp	r3, #0
 800d464:	d007      	beq.n	800d476 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d46e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 f87c 	bl	800d56e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	f003 0320 	and.w	r3, r3, #32
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00c      	beq.n	800d49a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f003 0320 	and.w	r3, r3, #32
 800d486:	2b00      	cmp	r3, #0
 800d488:	d007      	beq.n	800d49a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f06f 0220 	mvn.w	r2, #32
 800d492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 f96f 	bl	800d778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d00c      	beq.n	800d4be <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d007      	beq.n	800d4be <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800d4b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 f97b 	bl	800d7b4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d00c      	beq.n	800d4e2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d007      	beq.n	800d4e2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800d4da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 f973 	bl	800d7c8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d00c      	beq.n	800d506 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d007      	beq.n	800d506 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800d4fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 f96b 	bl	800d7dc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00c      	beq.n	800d52a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d516:	2b00      	cmp	r3, #0
 800d518:	d007      	beq.n	800d52a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800d522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 f963 	bl	800d7f0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d52a:	bf00      	nop
 800d52c:	3710      	adds	r7, #16
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}

0800d532 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d532:	b480      	push	{r7}
 800d534:	b083      	sub	sp, #12
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d53a:	bf00      	nop
 800d53c:	370c      	adds	r7, #12
 800d53e:	46bd      	mov	sp, r7
 800d540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d544:	4770      	bx	lr

0800d546 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d546:	b480      	push	{r7}
 800d548:	b083      	sub	sp, #12
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d54e:	bf00      	nop
 800d550:	370c      	adds	r7, #12
 800d552:	46bd      	mov	sp, r7
 800d554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d558:	4770      	bx	lr

0800d55a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d55a:	b480      	push	{r7}
 800d55c:	b083      	sub	sp, #12
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d562:	bf00      	nop
 800d564:	370c      	adds	r7, #12
 800d566:	46bd      	mov	sp, r7
 800d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56c:	4770      	bx	lr

0800d56e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d56e:	b480      	push	{r7}
 800d570:	b083      	sub	sp, #12
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d576:	bf00      	nop
 800d578:	370c      	adds	r7, #12
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr
	...

0800d584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d584:	b480      	push	{r7}
 800d586:	b085      	sub	sp, #20
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	4a68      	ldr	r2, [pc, #416]	; (800d738 <TIM_Base_SetConfig+0x1b4>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d02b      	beq.n	800d5f4 <TIM_Base_SetConfig+0x70>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4a67      	ldr	r2, [pc, #412]	; (800d73c <TIM_Base_SetConfig+0x1b8>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d027      	beq.n	800d5f4 <TIM_Base_SetConfig+0x70>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5aa:	d023      	beq.n	800d5f4 <TIM_Base_SetConfig+0x70>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d5b2:	d01f      	beq.n	800d5f4 <TIM_Base_SetConfig+0x70>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	4a62      	ldr	r2, [pc, #392]	; (800d740 <TIM_Base_SetConfig+0x1bc>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d01b      	beq.n	800d5f4 <TIM_Base_SetConfig+0x70>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	4a61      	ldr	r2, [pc, #388]	; (800d744 <TIM_Base_SetConfig+0x1c0>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d017      	beq.n	800d5f4 <TIM_Base_SetConfig+0x70>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	4a60      	ldr	r2, [pc, #384]	; (800d748 <TIM_Base_SetConfig+0x1c4>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d013      	beq.n	800d5f4 <TIM_Base_SetConfig+0x70>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	4a5f      	ldr	r2, [pc, #380]	; (800d74c <TIM_Base_SetConfig+0x1c8>)
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	d00f      	beq.n	800d5f4 <TIM_Base_SetConfig+0x70>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	4a5e      	ldr	r2, [pc, #376]	; (800d750 <TIM_Base_SetConfig+0x1cc>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d00b      	beq.n	800d5f4 <TIM_Base_SetConfig+0x70>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	4a5d      	ldr	r2, [pc, #372]	; (800d754 <TIM_Base_SetConfig+0x1d0>)
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d007      	beq.n	800d5f4 <TIM_Base_SetConfig+0x70>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	4a5c      	ldr	r2, [pc, #368]	; (800d758 <TIM_Base_SetConfig+0x1d4>)
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	d003      	beq.n	800d5f4 <TIM_Base_SetConfig+0x70>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	4a5b      	ldr	r2, [pc, #364]	; (800d75c <TIM_Base_SetConfig+0x1d8>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d108      	bne.n	800d606 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	68fa      	ldr	r2, [r7, #12]
 800d602:	4313      	orrs	r3, r2
 800d604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	4a4b      	ldr	r2, [pc, #300]	; (800d738 <TIM_Base_SetConfig+0x1b4>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d043      	beq.n	800d696 <TIM_Base_SetConfig+0x112>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	4a4a      	ldr	r2, [pc, #296]	; (800d73c <TIM_Base_SetConfig+0x1b8>)
 800d612:	4293      	cmp	r3, r2
 800d614:	d03f      	beq.n	800d696 <TIM_Base_SetConfig+0x112>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d61c:	d03b      	beq.n	800d696 <TIM_Base_SetConfig+0x112>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d624:	d037      	beq.n	800d696 <TIM_Base_SetConfig+0x112>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	4a45      	ldr	r2, [pc, #276]	; (800d740 <TIM_Base_SetConfig+0x1bc>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d033      	beq.n	800d696 <TIM_Base_SetConfig+0x112>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4a44      	ldr	r2, [pc, #272]	; (800d744 <TIM_Base_SetConfig+0x1c0>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d02f      	beq.n	800d696 <TIM_Base_SetConfig+0x112>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	4a43      	ldr	r2, [pc, #268]	; (800d748 <TIM_Base_SetConfig+0x1c4>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d02b      	beq.n	800d696 <TIM_Base_SetConfig+0x112>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4a42      	ldr	r2, [pc, #264]	; (800d74c <TIM_Base_SetConfig+0x1c8>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d027      	beq.n	800d696 <TIM_Base_SetConfig+0x112>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4a41      	ldr	r2, [pc, #260]	; (800d750 <TIM_Base_SetConfig+0x1cc>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d023      	beq.n	800d696 <TIM_Base_SetConfig+0x112>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4a40      	ldr	r2, [pc, #256]	; (800d754 <TIM_Base_SetConfig+0x1d0>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d01f      	beq.n	800d696 <TIM_Base_SetConfig+0x112>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	4a3f      	ldr	r2, [pc, #252]	; (800d758 <TIM_Base_SetConfig+0x1d4>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d01b      	beq.n	800d696 <TIM_Base_SetConfig+0x112>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	4a3e      	ldr	r2, [pc, #248]	; (800d75c <TIM_Base_SetConfig+0x1d8>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d017      	beq.n	800d696 <TIM_Base_SetConfig+0x112>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	4a3d      	ldr	r2, [pc, #244]	; (800d760 <TIM_Base_SetConfig+0x1dc>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d013      	beq.n	800d696 <TIM_Base_SetConfig+0x112>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	4a3c      	ldr	r2, [pc, #240]	; (800d764 <TIM_Base_SetConfig+0x1e0>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d00f      	beq.n	800d696 <TIM_Base_SetConfig+0x112>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	4a3b      	ldr	r2, [pc, #236]	; (800d768 <TIM_Base_SetConfig+0x1e4>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d00b      	beq.n	800d696 <TIM_Base_SetConfig+0x112>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	4a3a      	ldr	r2, [pc, #232]	; (800d76c <TIM_Base_SetConfig+0x1e8>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d007      	beq.n	800d696 <TIM_Base_SetConfig+0x112>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	4a39      	ldr	r2, [pc, #228]	; (800d770 <TIM_Base_SetConfig+0x1ec>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d003      	beq.n	800d696 <TIM_Base_SetConfig+0x112>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	4a38      	ldr	r2, [pc, #224]	; (800d774 <TIM_Base_SetConfig+0x1f0>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d108      	bne.n	800d6a8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d69c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	68db      	ldr	r3, [r3, #12]
 800d6a2:	68fa      	ldr	r2, [r7, #12]
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	695b      	ldr	r3, [r3, #20]
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	68fa      	ldr	r2, [r7, #12]
 800d6ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	689a      	ldr	r2, [r3, #8]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	4a1a      	ldr	r2, [pc, #104]	; (800d738 <TIM_Base_SetConfig+0x1b4>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d023      	beq.n	800d71c <TIM_Base_SetConfig+0x198>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	4a19      	ldr	r2, [pc, #100]	; (800d73c <TIM_Base_SetConfig+0x1b8>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d01f      	beq.n	800d71c <TIM_Base_SetConfig+0x198>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	4a1e      	ldr	r2, [pc, #120]	; (800d758 <TIM_Base_SetConfig+0x1d4>)
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d01b      	beq.n	800d71c <TIM_Base_SetConfig+0x198>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	4a1d      	ldr	r2, [pc, #116]	; (800d75c <TIM_Base_SetConfig+0x1d8>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d017      	beq.n	800d71c <TIM_Base_SetConfig+0x198>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	4a1c      	ldr	r2, [pc, #112]	; (800d760 <TIM_Base_SetConfig+0x1dc>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d013      	beq.n	800d71c <TIM_Base_SetConfig+0x198>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	4a1b      	ldr	r2, [pc, #108]	; (800d764 <TIM_Base_SetConfig+0x1e0>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d00f      	beq.n	800d71c <TIM_Base_SetConfig+0x198>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	4a1a      	ldr	r2, [pc, #104]	; (800d768 <TIM_Base_SetConfig+0x1e4>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d00b      	beq.n	800d71c <TIM_Base_SetConfig+0x198>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	4a19      	ldr	r2, [pc, #100]	; (800d76c <TIM_Base_SetConfig+0x1e8>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d007      	beq.n	800d71c <TIM_Base_SetConfig+0x198>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	4a18      	ldr	r2, [pc, #96]	; (800d770 <TIM_Base_SetConfig+0x1ec>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d003      	beq.n	800d71c <TIM_Base_SetConfig+0x198>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	4a17      	ldr	r2, [pc, #92]	; (800d774 <TIM_Base_SetConfig+0x1f0>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d103      	bne.n	800d724 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	691a      	ldr	r2, [r3, #16]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2201      	movs	r2, #1
 800d728:	615a      	str	r2, [r3, #20]
}
 800d72a:	bf00      	nop
 800d72c:	3714      	adds	r7, #20
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr
 800d736:	bf00      	nop
 800d738:	40012c00 	.word	0x40012c00
 800d73c:	50012c00 	.word	0x50012c00
 800d740:	40000400 	.word	0x40000400
 800d744:	50000400 	.word	0x50000400
 800d748:	40000800 	.word	0x40000800
 800d74c:	50000800 	.word	0x50000800
 800d750:	40000c00 	.word	0x40000c00
 800d754:	50000c00 	.word	0x50000c00
 800d758:	40013400 	.word	0x40013400
 800d75c:	50013400 	.word	0x50013400
 800d760:	40014000 	.word	0x40014000
 800d764:	50014000 	.word	0x50014000
 800d768:	40014400 	.word	0x40014400
 800d76c:	50014400 	.word	0x50014400
 800d770:	40014800 	.word	0x40014800
 800d774:	50014800 	.word	0x50014800

0800d778 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d778:	b480      	push	{r7}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d780:	bf00      	nop
 800d782:	370c      	adds	r7, #12
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d794:	bf00      	nop
 800d796:	370c      	adds	r7, #12
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr

0800d7a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d7a8:	bf00      	nop
 800d7aa:	370c      	adds	r7, #12
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr

0800d7b4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d7bc:	bf00      	nop
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d7d0:	bf00      	nop
 800d7d2:	370c      	adds	r7, #12
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d7e4:	bf00      	nop
 800d7e6:	370c      	adds	r7, #12
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr

0800d7f0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d7f8:	bf00      	nop
 800d7fa:	370c      	adds	r7, #12
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b082      	sub	sp, #8
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d101      	bne.n	800d816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d812:	2301      	movs	r3, #1
 800d814:	e042      	b.n	800d89c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d106      	bne.n	800d82e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2200      	movs	r2, #0
 800d824:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f7f4 fcf3 	bl	8002214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2224      	movs	r2, #36	; 0x24
 800d832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f022 0201 	bic.w	r2, r2, #1
 800d844:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d002      	beq.n	800d854 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f000 f9d6 	bl	800dc00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f000 f825 	bl	800d8a4 <UART_SetConfig>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b01      	cmp	r3, #1
 800d85e:	d101      	bne.n	800d864 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d860:	2301      	movs	r3, #1
 800d862:	e01b      	b.n	800d89c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	685a      	ldr	r2, [r3, #4]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	689a      	ldr	r2, [r3, #8]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f042 0201 	orr.w	r2, r2, #1
 800d892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f000 fa55 	bl	800dd44 <UART_CheckIdleState>
 800d89a:	4603      	mov	r3, r0
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3708      	adds	r7, #8
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d8a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d8a8:	b094      	sub	sp, #80	; 0x50
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	4b83      	ldr	r3, [pc, #524]	; (800dac8 <UART_SetConfig+0x224>)
 800d8ba:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8be:	689a      	ldr	r2, [r3, #8]
 800d8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c2:	691b      	ldr	r3, [r3, #16]
 800d8c4:	431a      	orrs	r2, r3
 800d8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c8:	695b      	ldr	r3, [r3, #20]
 800d8ca:	431a      	orrs	r2, r3
 800d8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ce:	69db      	ldr	r3, [r3, #28]
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	497c      	ldr	r1, [pc, #496]	; (800dacc <UART_SetConfig+0x228>)
 800d8dc:	4019      	ands	r1, r3
 800d8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e0:	681a      	ldr	r2, [r3, #0]
 800d8e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8e4:	430b      	orrs	r3, r1
 800d8e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f4:	68d9      	ldr	r1, [r3, #12]
 800d8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	ea40 0301 	orr.w	r3, r0, r1
 800d8fe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d902:	699b      	ldr	r3, [r3, #24]
 800d904:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	4b6f      	ldr	r3, [pc, #444]	; (800dac8 <UART_SetConfig+0x224>)
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d009      	beq.n	800d924 <UART_SetConfig+0x80>
 800d910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	4b6e      	ldr	r3, [pc, #440]	; (800dad0 <UART_SetConfig+0x22c>)
 800d916:	429a      	cmp	r2, r3
 800d918:	d004      	beq.n	800d924 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91c:	6a1a      	ldr	r2, [r3, #32]
 800d91e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d920:	4313      	orrs	r3, r2
 800d922:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	689b      	ldr	r3, [r3, #8]
 800d92a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800d92e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800d932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d934:	681a      	ldr	r2, [r3, #0]
 800d936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d938:	430b      	orrs	r3, r1
 800d93a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d942:	f023 000f 	bic.w	r0, r3, #15
 800d946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d948:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	ea40 0301 	orr.w	r3, r0, r1
 800d952:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	4b5e      	ldr	r3, [pc, #376]	; (800dad4 <UART_SetConfig+0x230>)
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d102      	bne.n	800d964 <UART_SetConfig+0xc0>
 800d95e:	2301      	movs	r3, #1
 800d960:	64bb      	str	r3, [r7, #72]	; 0x48
 800d962:	e032      	b.n	800d9ca <UART_SetConfig+0x126>
 800d964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d966:	681a      	ldr	r2, [r3, #0]
 800d968:	4b5b      	ldr	r3, [pc, #364]	; (800dad8 <UART_SetConfig+0x234>)
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d102      	bne.n	800d974 <UART_SetConfig+0xd0>
 800d96e:	2302      	movs	r3, #2
 800d970:	64bb      	str	r3, [r7, #72]	; 0x48
 800d972:	e02a      	b.n	800d9ca <UART_SetConfig+0x126>
 800d974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d976:	681a      	ldr	r2, [r3, #0]
 800d978:	4b58      	ldr	r3, [pc, #352]	; (800dadc <UART_SetConfig+0x238>)
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d102      	bne.n	800d984 <UART_SetConfig+0xe0>
 800d97e:	2304      	movs	r3, #4
 800d980:	64bb      	str	r3, [r7, #72]	; 0x48
 800d982:	e022      	b.n	800d9ca <UART_SetConfig+0x126>
 800d984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	4b55      	ldr	r3, [pc, #340]	; (800dae0 <UART_SetConfig+0x23c>)
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d102      	bne.n	800d994 <UART_SetConfig+0xf0>
 800d98e:	2308      	movs	r3, #8
 800d990:	64bb      	str	r3, [r7, #72]	; 0x48
 800d992:	e01a      	b.n	800d9ca <UART_SetConfig+0x126>
 800d994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	4b52      	ldr	r3, [pc, #328]	; (800dae4 <UART_SetConfig+0x240>)
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d102      	bne.n	800d9a4 <UART_SetConfig+0x100>
 800d99e:	2310      	movs	r3, #16
 800d9a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d9a2:	e012      	b.n	800d9ca <UART_SetConfig+0x126>
 800d9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a6:	681a      	ldr	r2, [r3, #0]
 800d9a8:	4b4f      	ldr	r3, [pc, #316]	; (800dae8 <UART_SetConfig+0x244>)
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d103      	bne.n	800d9b6 <UART_SetConfig+0x112>
 800d9ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800d9b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d9b4:	e009      	b.n	800d9ca <UART_SetConfig+0x126>
 800d9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b8:	681a      	ldr	r2, [r3, #0]
 800d9ba:	4b43      	ldr	r3, [pc, #268]	; (800dac8 <UART_SetConfig+0x224>)
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d102      	bne.n	800d9c6 <UART_SetConfig+0x122>
 800d9c0:	2320      	movs	r3, #32
 800d9c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d9c4:	e001      	b.n	800d9ca <UART_SetConfig+0x126>
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	4b3e      	ldr	r3, [pc, #248]	; (800dac8 <UART_SetConfig+0x224>)
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d005      	beq.n	800d9e0 <UART_SetConfig+0x13c>
 800d9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	4b3d      	ldr	r3, [pc, #244]	; (800dad0 <UART_SetConfig+0x22c>)
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	f040 8088 	bne.w	800daf0 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d9e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	623b      	str	r3, [r7, #32]
 800d9e6:	627a      	str	r2, [r7, #36]	; 0x24
 800d9e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d9ec:	f7fc fa0a 	bl	8009e04 <HAL_RCCEx_GetPeriphCLKFreq>
 800d9f0:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d9f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	f000 80eb 	beq.w	800dbd0 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9fe:	4a3b      	ldr	r2, [pc, #236]	; (800daec <UART_SetConfig+0x248>)
 800da00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da04:	461a      	mov	r2, r3
 800da06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da08:	fbb3 f3f2 	udiv	r3, r3, r2
 800da0c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800da0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da10:	685a      	ldr	r2, [r3, #4]
 800da12:	4613      	mov	r3, r2
 800da14:	005b      	lsls	r3, r3, #1
 800da16:	4413      	add	r3, r2
 800da18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d305      	bcc.n	800da2a <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800da1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800da24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da26:	429a      	cmp	r2, r3
 800da28:	d903      	bls.n	800da32 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800da2a:	2301      	movs	r3, #1
 800da2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800da30:	e048      	b.n	800dac4 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da34:	2200      	movs	r2, #0
 800da36:	61bb      	str	r3, [r7, #24]
 800da38:	61fa      	str	r2, [r7, #28]
 800da3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da3e:	4a2b      	ldr	r2, [pc, #172]	; (800daec <UART_SetConfig+0x248>)
 800da40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da44:	b29b      	uxth	r3, r3
 800da46:	2200      	movs	r2, #0
 800da48:	613b      	str	r3, [r7, #16]
 800da4a:	617a      	str	r2, [r7, #20]
 800da4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800da50:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800da54:	f7f2 fc2a 	bl	80002ac <__aeabi_uldivmod>
 800da58:	4602      	mov	r2, r0
 800da5a:	460b      	mov	r3, r1
 800da5c:	4610      	mov	r0, r2
 800da5e:	4619      	mov	r1, r3
 800da60:	f04f 0200 	mov.w	r2, #0
 800da64:	f04f 0300 	mov.w	r3, #0
 800da68:	020b      	lsls	r3, r1, #8
 800da6a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800da6e:	0202      	lsls	r2, r0, #8
 800da70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da72:	6849      	ldr	r1, [r1, #4]
 800da74:	0849      	lsrs	r1, r1, #1
 800da76:	2000      	movs	r0, #0
 800da78:	460c      	mov	r4, r1
 800da7a:	4605      	mov	r5, r0
 800da7c:	eb12 0804 	adds.w	r8, r2, r4
 800da80:	eb43 0905 	adc.w	r9, r3, r5
 800da84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	2200      	movs	r2, #0
 800da8a:	60bb      	str	r3, [r7, #8]
 800da8c:	60fa      	str	r2, [r7, #12]
 800da8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800da92:	4640      	mov	r0, r8
 800da94:	4649      	mov	r1, r9
 800da96:	f7f2 fc09 	bl	80002ac <__aeabi_uldivmod>
 800da9a:	4602      	mov	r2, r0
 800da9c:	460b      	mov	r3, r1
 800da9e:	4613      	mov	r3, r2
 800daa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800daa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800daa8:	d308      	bcc.n	800dabc <UART_SetConfig+0x218>
 800daaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dab0:	d204      	bcs.n	800dabc <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800dab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dab8:	60da      	str	r2, [r3, #12]
 800daba:	e003      	b.n	800dac4 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800dabc:	2301      	movs	r3, #1
 800dabe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800dac2:	e085      	b.n	800dbd0 <UART_SetConfig+0x32c>
 800dac4:	e084      	b.n	800dbd0 <UART_SetConfig+0x32c>
 800dac6:	bf00      	nop
 800dac8:	46002400 	.word	0x46002400
 800dacc:	cfff69f3 	.word	0xcfff69f3
 800dad0:	56002400 	.word	0x56002400
 800dad4:	40013800 	.word	0x40013800
 800dad8:	40004400 	.word	0x40004400
 800dadc:	40004800 	.word	0x40004800
 800dae0:	40004c00 	.word	0x40004c00
 800dae4:	40005000 	.word	0x40005000
 800dae8:	40006400 	.word	0x40006400
 800daec:	0800f340 	.word	0x0800f340
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800daf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf2:	69db      	ldr	r3, [r3, #28]
 800daf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800daf8:	d13c      	bne.n	800db74 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800dafa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dafc:	2200      	movs	r2, #0
 800dafe:	603b      	str	r3, [r7, #0]
 800db00:	607a      	str	r2, [r7, #4]
 800db02:	e9d7 0100 	ldrd	r0, r1, [r7]
 800db06:	f7fc f97d 	bl	8009e04 <HAL_RCCEx_GetPeriphCLKFreq>
 800db0a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800db0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d05e      	beq.n	800dbd0 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db16:	4a39      	ldr	r2, [pc, #228]	; (800dbfc <UART_SetConfig+0x358>)
 800db18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db1c:	461a      	mov	r2, r3
 800db1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db20:	fbb3 f3f2 	udiv	r3, r3, r2
 800db24:	005a      	lsls	r2, r3, #1
 800db26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	085b      	lsrs	r3, r3, #1
 800db2c:	441a      	add	r2, r3
 800db2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	fbb2 f3f3 	udiv	r3, r2, r3
 800db36:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db3a:	2b0f      	cmp	r3, #15
 800db3c:	d916      	bls.n	800db6c <UART_SetConfig+0x2c8>
 800db3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db44:	d212      	bcs.n	800db6c <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800db46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db48:	b29b      	uxth	r3, r3
 800db4a:	f023 030f 	bic.w	r3, r3, #15
 800db4e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800db50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db52:	085b      	lsrs	r3, r3, #1
 800db54:	b29b      	uxth	r3, r3
 800db56:	f003 0307 	and.w	r3, r3, #7
 800db5a:	b29a      	uxth	r2, r3
 800db5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800db5e:	4313      	orrs	r3, r2
 800db60:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800db62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800db68:	60da      	str	r2, [r3, #12]
 800db6a:	e031      	b.n	800dbd0 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800db6c:	2301      	movs	r3, #1
 800db6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800db72:	e02d      	b.n	800dbd0 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800db74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db76:	2200      	movs	r2, #0
 800db78:	469a      	mov	sl, r3
 800db7a:	4693      	mov	fp, r2
 800db7c:	4650      	mov	r0, sl
 800db7e:	4659      	mov	r1, fp
 800db80:	f7fc f940 	bl	8009e04 <HAL_RCCEx_GetPeriphCLKFreq>
 800db84:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800db86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d021      	beq.n	800dbd0 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db90:	4a1a      	ldr	r2, [pc, #104]	; (800dbfc <UART_SetConfig+0x358>)
 800db92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db96:	461a      	mov	r2, r3
 800db98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db9a:	fbb3 f2f2 	udiv	r2, r3, r2
 800db9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	085b      	lsrs	r3, r3, #1
 800dba4:	441a      	add	r2, r3
 800dba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbae:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbb2:	2b0f      	cmp	r3, #15
 800dbb4:	d909      	bls.n	800dbca <UART_SetConfig+0x326>
 800dbb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbbc:	d205      	bcs.n	800dbca <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dbbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbc0:	b29a      	uxth	r2, r3
 800dbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	60da      	str	r2, [r3, #12]
 800dbc8:	e002      	b.n	800dbd0 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbda:	2201      	movs	r2, #1
 800dbdc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800dbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe8:	2200      	movs	r2, #0
 800dbea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800dbec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3750      	adds	r7, #80	; 0x50
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbfa:	bf00      	nop
 800dbfc:	0800f340 	.word	0x0800f340

0800dc00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc0c:	f003 0308 	and.w	r3, r3, #8
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d00a      	beq.n	800dc2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	430a      	orrs	r2, r1
 800dc28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc2e:	f003 0301 	and.w	r3, r3, #1
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d00a      	beq.n	800dc4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	430a      	orrs	r2, r1
 800dc4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc50:	f003 0302 	and.w	r3, r3, #2
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d00a      	beq.n	800dc6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	430a      	orrs	r2, r1
 800dc6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc72:	f003 0304 	and.w	r3, r3, #4
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00a      	beq.n	800dc90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	430a      	orrs	r2, r1
 800dc8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc94:	f003 0310 	and.w	r3, r3, #16
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d00a      	beq.n	800dcb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	689b      	ldr	r3, [r3, #8]
 800dca2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	430a      	orrs	r2, r1
 800dcb0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcb6:	f003 0320 	and.w	r3, r3, #32
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d00a      	beq.n	800dcd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	689b      	ldr	r3, [r3, #8]
 800dcc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	430a      	orrs	r2, r1
 800dcd2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d01a      	beq.n	800dd16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	430a      	orrs	r2, r1
 800dcf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcfe:	d10a      	bne.n	800dd16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	430a      	orrs	r2, r1
 800dd14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d00a      	beq.n	800dd38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	430a      	orrs	r2, r1
 800dd36:	605a      	str	r2, [r3, #4]
  }
}
 800dd38:	bf00      	nop
 800dd3a:	370c      	adds	r7, #12
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b098      	sub	sp, #96	; 0x60
 800dd48:	af02      	add	r7, sp, #8
 800dd4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd54:	f7f5 f9ce 	bl	80030f4 <HAL_GetTick>
 800dd58:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f003 0308 	and.w	r3, r3, #8
 800dd64:	2b08      	cmp	r3, #8
 800dd66:	d12f      	bne.n	800ddc8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd6c:	9300      	str	r3, [sp, #0]
 800dd6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd70:	2200      	movs	r2, #0
 800dd72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 f88e 	bl	800de98 <UART_WaitOnFlagUntilTimeout>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d022      	beq.n	800ddc8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd8a:	e853 3f00 	ldrex	r3, [r3]
 800dd8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd96:	653b      	str	r3, [r7, #80]	; 0x50
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dda0:	647b      	str	r3, [r7, #68]	; 0x44
 800dda2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dda6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dda8:	e841 2300 	strex	r3, r2, [r1]
 800ddac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ddae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d1e6      	bne.n	800dd82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2220      	movs	r2, #32
 800ddb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ddc4:	2303      	movs	r3, #3
 800ddc6:	e063      	b.n	800de90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f003 0304 	and.w	r3, r3, #4
 800ddd2:	2b04      	cmp	r3, #4
 800ddd4:	d149      	bne.n	800de6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ddd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ddda:	9300      	str	r3, [sp, #0]
 800dddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddde:	2200      	movs	r2, #0
 800dde0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f000 f857 	bl	800de98 <UART_WaitOnFlagUntilTimeout>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d03c      	beq.n	800de6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf8:	e853 3f00 	ldrex	r3, [r3]
 800ddfc:	623b      	str	r3, [r7, #32]
   return(result);
 800ddfe:	6a3b      	ldr	r3, [r7, #32]
 800de00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800de04:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	461a      	mov	r2, r3
 800de0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de0e:	633b      	str	r3, [r7, #48]	; 0x30
 800de10:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de16:	e841 2300 	strex	r3, r2, [r1]
 800de1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800de1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d1e6      	bne.n	800ddf0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	3308      	adds	r3, #8
 800de28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	e853 3f00 	ldrex	r3, [r3]
 800de30:	60fb      	str	r3, [r7, #12]
   return(result);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f023 0301 	bic.w	r3, r3, #1
 800de38:	64bb      	str	r3, [r7, #72]	; 0x48
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	3308      	adds	r3, #8
 800de40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de42:	61fa      	str	r2, [r7, #28]
 800de44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de46:	69b9      	ldr	r1, [r7, #24]
 800de48:	69fa      	ldr	r2, [r7, #28]
 800de4a:	e841 2300 	strex	r3, r2, [r1]
 800de4e:	617b      	str	r3, [r7, #20]
   return(result);
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d1e5      	bne.n	800de22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2220      	movs	r2, #32
 800de5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2200      	movs	r2, #0
 800de62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de66:	2303      	movs	r3, #3
 800de68:	e012      	b.n	800de90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2220      	movs	r2, #32
 800de6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2220      	movs	r2, #32
 800de76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2200      	movs	r2, #0
 800de7e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2200      	movs	r2, #0
 800de84:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2200      	movs	r2, #0
 800de8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800de8e:	2300      	movs	r3, #0
}
 800de90:	4618      	mov	r0, r3
 800de92:	3758      	adds	r7, #88	; 0x58
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	60f8      	str	r0, [r7, #12]
 800dea0:	60b9      	str	r1, [r7, #8]
 800dea2:	603b      	str	r3, [r7, #0]
 800dea4:	4613      	mov	r3, r2
 800dea6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dea8:	e049      	b.n	800df3e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deb0:	d045      	beq.n	800df3e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800deb2:	f7f5 f91f 	bl	80030f4 <HAL_GetTick>
 800deb6:	4602      	mov	r2, r0
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	1ad3      	subs	r3, r2, r3
 800debc:	69ba      	ldr	r2, [r7, #24]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d302      	bcc.n	800dec8 <UART_WaitOnFlagUntilTimeout+0x30>
 800dec2:	69bb      	ldr	r3, [r7, #24]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d101      	bne.n	800decc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dec8:	2303      	movs	r3, #3
 800deca:	e048      	b.n	800df5e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f003 0304 	and.w	r3, r3, #4
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d031      	beq.n	800df3e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	69db      	ldr	r3, [r3, #28]
 800dee0:	f003 0308 	and.w	r3, r3, #8
 800dee4:	2b08      	cmp	r3, #8
 800dee6:	d110      	bne.n	800df0a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2208      	movs	r2, #8
 800deee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800def0:	68f8      	ldr	r0, [r7, #12]
 800def2:	f000 f838 	bl	800df66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2208      	movs	r2, #8
 800defa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2200      	movs	r2, #0
 800df02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800df06:	2301      	movs	r3, #1
 800df08:	e029      	b.n	800df5e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	69db      	ldr	r3, [r3, #28]
 800df10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df18:	d111      	bne.n	800df3e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f000 f81e 	bl	800df66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2220      	movs	r2, #32
 800df2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2200      	movs	r2, #0
 800df36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800df3a:	2303      	movs	r3, #3
 800df3c:	e00f      	b.n	800df5e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	69da      	ldr	r2, [r3, #28]
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	4013      	ands	r3, r2
 800df48:	68ba      	ldr	r2, [r7, #8]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	bf0c      	ite	eq
 800df4e:	2301      	moveq	r3, #1
 800df50:	2300      	movne	r3, #0
 800df52:	b2db      	uxtb	r3, r3
 800df54:	461a      	mov	r2, r3
 800df56:	79fb      	ldrb	r3, [r7, #7]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d0a6      	beq.n	800deaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df5c:	2300      	movs	r3, #0
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}

0800df66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df66:	b480      	push	{r7}
 800df68:	b095      	sub	sp, #84	; 0x54
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df76:	e853 3f00 	ldrex	r3, [r3]
 800df7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800df7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800df82:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	461a      	mov	r2, r3
 800df8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df8c:	643b      	str	r3, [r7, #64]	; 0x40
 800df8e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df94:	e841 2300 	strex	r3, r2, [r1]
 800df98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d1e6      	bne.n	800df6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	3308      	adds	r3, #8
 800dfa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfa8:	6a3b      	ldr	r3, [r7, #32]
 800dfaa:	e853 3f00 	ldrex	r3, [r3]
 800dfae:	61fb      	str	r3, [r7, #28]
   return(result);
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dfb6:	f023 0301 	bic.w	r3, r3, #1
 800dfba:	64bb      	str	r3, [r7, #72]	; 0x48
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	3308      	adds	r3, #8
 800dfc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dfc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dfca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfcc:	e841 2300 	strex	r3, r2, [r1]
 800dfd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d1e3      	bne.n	800dfa0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d118      	bne.n	800e012 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	e853 3f00 	ldrex	r3, [r3]
 800dfec:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	f023 0310 	bic.w	r3, r3, #16
 800dff4:	647b      	str	r3, [r7, #68]	; 0x44
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	461a      	mov	r2, r3
 800dffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dffe:	61bb      	str	r3, [r7, #24]
 800e000:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e002:	6979      	ldr	r1, [r7, #20]
 800e004:	69ba      	ldr	r2, [r7, #24]
 800e006:	e841 2300 	strex	r3, r2, [r1]
 800e00a:	613b      	str	r3, [r7, #16]
   return(result);
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d1e6      	bne.n	800dfe0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2220      	movs	r2, #32
 800e016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2200      	movs	r2, #0
 800e01e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2200      	movs	r2, #0
 800e024:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e026:	bf00      	nop
 800e028:	3754      	adds	r7, #84	; 0x54
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr

0800e032 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e032:	b480      	push	{r7}
 800e034:	b085      	sub	sp, #20
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e040:	2b01      	cmp	r3, #1
 800e042:	d101      	bne.n	800e048 <HAL_UARTEx_DisableFifoMode+0x16>
 800e044:	2302      	movs	r3, #2
 800e046:	e027      	b.n	800e098 <HAL_UARTEx_DisableFifoMode+0x66>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2201      	movs	r2, #1
 800e04c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2224      	movs	r2, #36	; 0x24
 800e054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f022 0201 	bic.w	r2, r2, #1
 800e06e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e076:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2200      	movs	r2, #0
 800e07c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	68fa      	ldr	r2, [r7, #12]
 800e084:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2220      	movs	r2, #32
 800e08a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2200      	movs	r2, #0
 800e092:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e096:	2300      	movs	r3, #0
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3714      	adds	r7, #20
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr

0800e0a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d101      	bne.n	800e0bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e0b8:	2302      	movs	r3, #2
 800e0ba:	e02d      	b.n	800e118 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2201      	movs	r2, #1
 800e0c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2224      	movs	r2, #36	; 0x24
 800e0c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f022 0201 	bic.w	r2, r2, #1
 800e0e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	689b      	ldr	r3, [r3, #8]
 800e0ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	683a      	ldr	r2, [r7, #0]
 800e0f4:	430a      	orrs	r2, r1
 800e0f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f000 f84f 	bl	800e19c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	68fa      	ldr	r2, [r7, #12]
 800e104:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2220      	movs	r2, #32
 800e10a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2200      	movs	r2, #0
 800e112:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e116:	2300      	movs	r3, #0
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3710      	adds	r7, #16
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b084      	sub	sp, #16
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e130:	2b01      	cmp	r3, #1
 800e132:	d101      	bne.n	800e138 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e134:	2302      	movs	r3, #2
 800e136:	e02d      	b.n	800e194 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2201      	movs	r2, #1
 800e13c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2224      	movs	r2, #36	; 0x24
 800e144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	681a      	ldr	r2, [r3, #0]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f022 0201 	bic.w	r2, r2, #1
 800e15e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	689b      	ldr	r3, [r3, #8]
 800e166:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	683a      	ldr	r2, [r7, #0]
 800e170:	430a      	orrs	r2, r1
 800e172:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 f811 	bl	800e19c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	68fa      	ldr	r2, [r7, #12]
 800e180:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2220      	movs	r2, #32
 800e186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e192:	2300      	movs	r3, #0
}
 800e194:	4618      	mov	r0, r3
 800e196:	3710      	adds	r7, #16
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b085      	sub	sp, #20
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d108      	bne.n	800e1be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e1bc:	e031      	b.n	800e222 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e1be:	2308      	movs	r3, #8
 800e1c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e1c2:	2308      	movs	r3, #8
 800e1c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	689b      	ldr	r3, [r3, #8]
 800e1cc:	0e5b      	lsrs	r3, r3, #25
 800e1ce:	b2db      	uxtb	r3, r3
 800e1d0:	f003 0307 	and.w	r3, r3, #7
 800e1d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	689b      	ldr	r3, [r3, #8]
 800e1dc:	0f5b      	lsrs	r3, r3, #29
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	f003 0307 	and.w	r3, r3, #7
 800e1e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1e6:	7bbb      	ldrb	r3, [r7, #14]
 800e1e8:	7b3a      	ldrb	r2, [r7, #12]
 800e1ea:	4911      	ldr	r1, [pc, #68]	; (800e230 <UARTEx_SetNbDataToProcess+0x94>)
 800e1ec:	5c8a      	ldrb	r2, [r1, r2]
 800e1ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e1f2:	7b3a      	ldrb	r2, [r7, #12]
 800e1f4:	490f      	ldr	r1, [pc, #60]	; (800e234 <UARTEx_SetNbDataToProcess+0x98>)
 800e1f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1fc:	b29a      	uxth	r2, r3
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e204:	7bfb      	ldrb	r3, [r7, #15]
 800e206:	7b7a      	ldrb	r2, [r7, #13]
 800e208:	4909      	ldr	r1, [pc, #36]	; (800e230 <UARTEx_SetNbDataToProcess+0x94>)
 800e20a:	5c8a      	ldrb	r2, [r1, r2]
 800e20c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e210:	7b7a      	ldrb	r2, [r7, #13]
 800e212:	4908      	ldr	r1, [pc, #32]	; (800e234 <UARTEx_SetNbDataToProcess+0x98>)
 800e214:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e216:	fb93 f3f2 	sdiv	r3, r3, r2
 800e21a:	b29a      	uxth	r2, r3
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e222:	bf00      	nop
 800e224:	3714      	adds	r7, #20
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr
 800e22e:	bf00      	nop
 800e230:	0800f358 	.word	0x0800f358
 800e234:	0800f360 	.word	0x0800f360

0800e238 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800e238:	b480      	push	{r7}
 800e23a:	b083      	sub	sp, #12
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f043 0202 	orr.w	r2, r3, #2
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	685a      	ldr	r2, [r3, #4]
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	021b      	lsls	r3, r3, #8
 800e258:	431a      	orrs	r2, r3
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f023 0202 	bic.w	r2, r3, #2
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	601a      	str	r2, [r3, #0]
}
 800e26a:	bf00      	nop
 800e26c:	370c      	adds	r7, #12
 800e26e:	46bd      	mov	sp, r7
 800e270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e274:	4770      	bx	lr
	...

0800e278 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e278:	b084      	sub	sp, #16
 800e27a:	b480      	push	{r7}
 800e27c:	b085      	sub	sp, #20
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
 800e282:	f107 001c 	add.w	r0, r7, #28
 800e286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e28a:	2300      	movs	r3, #0
 800e28c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800e28e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800e290:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800e292:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800e294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800e296:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800e298:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800e29a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800e29e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800e2a0:	68fa      	ldr	r2, [r7, #12]
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	685a      	ldr	r2, [r3, #4]
 800e2aa:	4b07      	ldr	r3, [pc, #28]	; (800e2c8 <SDMMC_Init+0x50>)
 800e2ac:	4013      	ands	r3, r2
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	431a      	orrs	r2, r3
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e2b6:	2300      	movs	r3, #0
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3714      	adds	r7, #20
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	b004      	add	sp, #16
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop
 800e2c8:	ffc02c00 	.word	0xffc02c00

0800e2cc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	370c      	adds	r7, #12
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr

0800e2e6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e2e6:	b480      	push	{r7}
 800e2e8:	b083      	sub	sp, #12
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	f043 0203 	orr.w	r2, r3, #3
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e2fa:	2300      	movs	r3, #0
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	370c      	adds	r7, #12
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr

0800e308 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f003 0303 	and.w	r3, r3, #3
}
 800e318:	4618      	mov	r0, r3
 800e31a:	370c      	adds	r7, #12
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr

0800e324 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e324:	b480      	push	{r7}
 800e326:	b085      	sub	sp, #20
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e32e:	2300      	movs	r3, #0
 800e330:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e342:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800e348:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800e34e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e350:	68fa      	ldr	r2, [r7, #12]
 800e352:	4313      	orrs	r3, r2
 800e354:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	68da      	ldr	r2, [r3, #12]
 800e35a:	4b06      	ldr	r3, [pc, #24]	; (800e374 <SDMMC_SendCommand+0x50>)
 800e35c:	4013      	ands	r3, r2
 800e35e:	68fa      	ldr	r2, [r7, #12]
 800e360:	431a      	orrs	r2, r3
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e366:	2300      	movs	r3, #0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3714      	adds	r7, #20
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr
 800e374:	fffee0c0 	.word	0xfffee0c0

0800e378 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800e378:	b480      	push	{r7}
 800e37a:	b083      	sub	sp, #12
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	691b      	ldr	r3, [r3, #16]
 800e384:	b2db      	uxtb	r3, r3
}
 800e386:	4618      	mov	r0, r3
 800e388:	370c      	adds	r7, #12
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr

0800e392 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e392:	b480      	push	{r7}
 800e394:	b085      	sub	sp, #20
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
 800e39a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	3314      	adds	r3, #20
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	4413      	add	r3, r2
 800e3a6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3714      	adds	r7, #20
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr

0800e3b8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	685a      	ldr	r2, [r3, #4]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e3de:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800e3e4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800e3ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e3ec:	68fa      	ldr	r2, [r7, #12]
 800e3ee:	4313      	orrs	r3, r2
 800e3f0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	431a      	orrs	r2, r3
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e402:	2300      	movs	r3, #0

}
 800e404:	4618      	mov	r0, r3
 800e406:	3714      	adds	r7, #20
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr

0800e410 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b088      	sub	sp, #32
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e41e:	2310      	movs	r3, #16
 800e420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e422:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e426:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e428:	2300      	movs	r3, #0
 800e42a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e42c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e430:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e432:	f107 0308 	add.w	r3, r7, #8
 800e436:	4619      	mov	r1, r3
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f7ff ff73 	bl	800e324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e43e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e442:	2110      	movs	r1, #16
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f000 f995 	bl	800e774 <SDMMC_GetCmdResp1>
 800e44a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e44c:	69fb      	ldr	r3, [r7, #28]
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3720      	adds	r7, #32
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}

0800e456 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800e456:	b580      	push	{r7, lr}
 800e458:	b088      	sub	sp, #32
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
 800e45e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e464:	2307      	movs	r3, #7
 800e466:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e46c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e46e:	2300      	movs	r3, #0
 800e470:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e476:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e478:	f107 0308 	add.w	r3, r7, #8
 800e47c:	4619      	mov	r1, r3
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f7ff ff50 	bl	800e324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e484:	f241 3288 	movw	r2, #5000	; 0x1388
 800e488:	2107      	movs	r1, #7
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f000 f972 	bl	800e774 <SDMMC_GetCmdResp1>
 800e490:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e492:	69fb      	ldr	r3, [r7, #28]
}
 800e494:	4618      	mov	r0, r3
 800e496:	3720      	adds	r7, #32
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b088      	sub	sp, #32
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4ba:	f107 0308 	add.w	r3, r7, #8
 800e4be:	4619      	mov	r1, r3
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f7ff ff2f 	bl	800e324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 fb96 	bl	800ebf8 <SDMMC_GetCmdError>
 800e4cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4ce:	69fb      	ldr	r3, [r7, #28]
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3720      	adds	r7, #32
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b088      	sub	sp, #32
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e4e0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e4e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e4e6:	2308      	movs	r3, #8
 800e4e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e4ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4fa:	f107 0308 	add.w	r3, r7, #8
 800e4fe:	4619      	mov	r1, r3
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f7ff ff0f 	bl	800e324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f000 fb28 	bl	800eb5c <SDMMC_GetCmdResp7>
 800e50c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e50e:	69fb      	ldr	r3, [r7, #28]
}
 800e510:	4618      	mov	r0, r3
 800e512:	3720      	adds	r7, #32
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b088      	sub	sp, #32
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e526:	2337      	movs	r3, #55	; 0x37
 800e528:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e52a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e52e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e530:	2300      	movs	r3, #0
 800e532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e538:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e53a:	f107 0308 	add.w	r3, r7, #8
 800e53e:	4619      	mov	r1, r3
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f7ff feef 	bl	800e324 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e546:	f241 3288 	movw	r2, #5000	; 0x1388
 800e54a:	2137      	movs	r1, #55	; 0x37
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f000 f911 	bl	800e774 <SDMMC_GetCmdResp1>
 800e552:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e554:	69fb      	ldr	r3, [r7, #28]
}
 800e556:	4618      	mov	r0, r3
 800e558:	3720      	adds	r7, #32
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}

0800e55e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e55e:	b580      	push	{r7, lr}
 800e560:	b088      	sub	sp, #32
 800e562:	af00      	add	r7, sp, #0
 800e564:	6078      	str	r0, [r7, #4]
 800e566:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e56c:	2329      	movs	r3, #41	; 0x29
 800e56e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e570:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e576:	2300      	movs	r3, #0
 800e578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e57a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e57e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e580:	f107 0308 	add.w	r3, r7, #8
 800e584:	4619      	mov	r1, r3
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f7ff fecc 	bl	800e324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 fa2d 	bl	800e9ec <SDMMC_GetCmdResp3>
 800e592:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e594:	69fb      	ldr	r3, [r7, #28]
}
 800e596:	4618      	mov	r0, r3
 800e598:	3720      	adds	r7, #32
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b088      	sub	sp, #32
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
 800e5a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e5ac:	2306      	movs	r3, #6
 800e5ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e5b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e5be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5c0:	f107 0308 	add.w	r3, r7, #8
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f7ff feac 	bl	800e324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e5cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5d0:	2106      	movs	r1, #6
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f000 f8ce 	bl	800e774 <SDMMC_GetCmdResp1>
 800e5d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5da:	69fb      	ldr	r3, [r7, #28]
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3720      	adds	r7, #32
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b088      	sub	sp, #32
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e5f0:	2333      	movs	r3, #51	; 0x33
 800e5f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e5f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e602:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e604:	f107 0308 	add.w	r3, r7, #8
 800e608:	4619      	mov	r1, r3
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f7ff fe8a 	bl	800e324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e610:	f241 3288 	movw	r2, #5000	; 0x1388
 800e614:	2133      	movs	r1, #51	; 0x33
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f000 f8ac 	bl	800e774 <SDMMC_GetCmdResp1>
 800e61c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e61e:	69fb      	ldr	r3, [r7, #28]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3720      	adds	r7, #32
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}

0800e628 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b088      	sub	sp, #32
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e630:	2300      	movs	r3, #0
 800e632:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e634:	2302      	movs	r3, #2
 800e636:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e638:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e63c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e63e:	2300      	movs	r3, #0
 800e640:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e646:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e648:	f107 0308 	add.w	r3, r7, #8
 800e64c:	4619      	mov	r1, r3
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f7ff fe68 	bl	800e324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f000 f97f 	bl	800e958 <SDMMC_GetCmdResp2>
 800e65a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e65c:	69fb      	ldr	r3, [r7, #28]
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3720      	adds	r7, #32
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}

0800e666 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e666:	b580      	push	{r7, lr}
 800e668:	b088      	sub	sp, #32
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	6078      	str	r0, [r7, #4]
 800e66e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e674:	2309      	movs	r3, #9
 800e676:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e678:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e67c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e67e:	2300      	movs	r3, #0
 800e680:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e686:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e688:	f107 0308 	add.w	r3, r7, #8
 800e68c:	4619      	mov	r1, r3
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f7ff fe48 	bl	800e324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f000 f95f 	bl	800e958 <SDMMC_GetCmdResp2>
 800e69a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e69c:	69fb      	ldr	r3, [r7, #28]
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3720      	adds	r7, #32
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}

0800e6a6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e6a6:	b580      	push	{r7, lr}
 800e6a8:	b088      	sub	sp, #32
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	6078      	str	r0, [r7, #4]
 800e6ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e6b4:	2303      	movs	r3, #3
 800e6b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e6bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e6c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6c8:	f107 0308 	add.w	r3, r7, #8
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f7ff fe28 	bl	800e324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e6d4:	683a      	ldr	r2, [r7, #0]
 800e6d6:	2103      	movs	r1, #3
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 f9c7 	bl	800ea6c <SDMMC_GetCmdResp6>
 800e6de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6e0:	69fb      	ldr	r3, [r7, #28]
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3720      	adds	r7, #32
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b088      	sub	sp, #32
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
 800e6f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e6f8:	230d      	movs	r3, #13
 800e6fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e700:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e702:	2300      	movs	r3, #0
 800e704:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e70a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e70c:	f107 0308 	add.w	r3, r7, #8
 800e710:	4619      	mov	r1, r3
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f7ff fe06 	bl	800e324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e718:	f241 3288 	movw	r2, #5000	; 0x1388
 800e71c:	210d      	movs	r1, #13
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 f828 	bl	800e774 <SDMMC_GetCmdResp1>
 800e724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e726:	69fb      	ldr	r3, [r7, #28]
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3720      	adds	r7, #32
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b088      	sub	sp, #32
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e738:	2300      	movs	r3, #0
 800e73a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e73c:	230d      	movs	r3, #13
 800e73e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e740:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e744:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e746:	2300      	movs	r3, #0
 800e748:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e74a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e74e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e750:	f107 0308 	add.w	r3, r7, #8
 800e754:	4619      	mov	r1, r3
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f7ff fde4 	bl	800e324 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e75c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e760:	210d      	movs	r1, #13
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f000 f806 	bl	800e774 <SDMMC_GetCmdResp1>
 800e768:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e76a:	69fb      	ldr	r3, [r7, #28]
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3720      	adds	r7, #32
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b088      	sub	sp, #32
 800e778:	af00      	add	r7, sp, #0
 800e77a:	60f8      	str	r0, [r7, #12]
 800e77c:	460b      	mov	r3, r1
 800e77e:	607a      	str	r2, [r7, #4]
 800e780:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e782:	4b70      	ldr	r3, [pc, #448]	; (800e944 <SDMMC_GetCmdResp1+0x1d0>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	4a70      	ldr	r2, [pc, #448]	; (800e948 <SDMMC_GetCmdResp1+0x1d4>)
 800e788:	fba2 2303 	umull	r2, r3, r2, r3
 800e78c:	0a5a      	lsrs	r2, r3, #9
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	fb02 f303 	mul.w	r3, r2, r3
 800e794:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e796:	69fb      	ldr	r3, [r7, #28]
 800e798:	1e5a      	subs	r2, r3, #1
 800e79a:	61fa      	str	r2, [r7, #28]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d102      	bne.n	800e7a6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e7a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e7a4:	e0c9      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7aa:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e7ac:	69ba      	ldr	r2, [r7, #24]
 800e7ae:	4b67      	ldr	r3, [pc, #412]	; (800e94c <SDMMC_GetCmdResp1+0x1d8>)
 800e7b0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d0ef      	beq.n	800e796 <SDMMC_GetCmdResp1+0x22>
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d1ea      	bne.n	800e796 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7c4:	f003 0304 	and.w	r3, r3, #4
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d004      	beq.n	800e7d6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2204      	movs	r2, #4
 800e7d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7d2:	2304      	movs	r3, #4
 800e7d4:	e0b1      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7da:	f003 0301 	and.w	r3, r3, #1
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d004      	beq.n	800e7ec <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	2201      	movs	r2, #1
 800e7e6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	e0a6      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	4a58      	ldr	r2, [pc, #352]	; (800e950 <SDMMC_GetCmdResp1+0x1dc>)
 800e7f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e7f2:	68f8      	ldr	r0, [r7, #12]
 800e7f4:	f7ff fdc0 	bl	800e378 <SDMMC_GetCommandResponse>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	7afb      	ldrb	r3, [r7, #11]
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d001      	beq.n	800e806 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e802:	2301      	movs	r3, #1
 800e804:	e099      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e806:	2100      	movs	r1, #0
 800e808:	68f8      	ldr	r0, [r7, #12]
 800e80a:	f7ff fdc2 	bl	800e392 <SDMMC_GetResponse>
 800e80e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e810:	697a      	ldr	r2, [r7, #20]
 800e812:	4b50      	ldr	r3, [pc, #320]	; (800e954 <SDMMC_GetCmdResp1+0x1e0>)
 800e814:	4013      	ands	r3, r2
 800e816:	2b00      	cmp	r3, #0
 800e818:	d101      	bne.n	800e81e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e81a:	2300      	movs	r3, #0
 800e81c:	e08d      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	2b00      	cmp	r3, #0
 800e822:	da02      	bge.n	800e82a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e824:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e828:	e087      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e830:	2b00      	cmp	r3, #0
 800e832:	d001      	beq.n	800e838 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e834:	2340      	movs	r3, #64	; 0x40
 800e836:	e080      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d001      	beq.n	800e846 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e842:	2380      	movs	r3, #128	; 0x80
 800e844:	e079      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d002      	beq.n	800e856 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e850:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e854:	e071      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d002      	beq.n	800e866 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e860:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e864:	e069      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d002      	beq.n	800e876 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e874:	e061      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d002      	beq.n	800e886 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e880:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e884:	e059      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d002      	beq.n	800e896 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e894:	e051      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d002      	beq.n	800e8a6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e8a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e8a4:	e049      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d002      	beq.n	800e8b6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e8b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e8b4:	e041      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d002      	beq.n	800e8c6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e8c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8c4:	e039      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d002      	beq.n	800e8d6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e8d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e8d4:	e031      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d002      	beq.n	800e8e6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e8e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e8e4:	e029      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d002      	beq.n	800e8f6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e8f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e8f4:	e021      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d002      	beq.n	800e906 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e900:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e904:	e019      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d002      	beq.n	800e916 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e910:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e914:	e011      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d002      	beq.n	800e926 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e920:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e924:	e009      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	f003 0308 	and.w	r3, r3, #8
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d002      	beq.n	800e936 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e930:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e934:	e001      	b.n	800e93a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e936:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3720      	adds	r7, #32
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	20000000 	.word	0x20000000
 800e948:	10624dd3 	.word	0x10624dd3
 800e94c:	00200045 	.word	0x00200045
 800e950:	002000c5 	.word	0x002000c5
 800e954:	fdffe008 	.word	0xfdffe008

0800e958 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e958:	b480      	push	{r7}
 800e95a:	b085      	sub	sp, #20
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e960:	4b1f      	ldr	r3, [pc, #124]	; (800e9e0 <SDMMC_GetCmdResp2+0x88>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4a1f      	ldr	r2, [pc, #124]	; (800e9e4 <SDMMC_GetCmdResp2+0x8c>)
 800e966:	fba2 2303 	umull	r2, r3, r2, r3
 800e96a:	0a5b      	lsrs	r3, r3, #9
 800e96c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e970:	fb02 f303 	mul.w	r3, r2, r3
 800e974:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	1e5a      	subs	r2, r3, #1
 800e97a:	60fa      	str	r2, [r7, #12]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d102      	bne.n	800e986 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e980:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e984:	e026      	b.n	800e9d4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e98a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e992:	2b00      	cmp	r3, #0
 800e994:	d0ef      	beq.n	800e976 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d1ea      	bne.n	800e976 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9a4:	f003 0304 	and.w	r3, r3, #4
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d004      	beq.n	800e9b6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2204      	movs	r2, #4
 800e9b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e9b2:	2304      	movs	r3, #4
 800e9b4:	e00e      	b.n	800e9d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ba:	f003 0301 	and.w	r3, r3, #1
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d004      	beq.n	800e9cc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2201      	movs	r2, #1
 800e9c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	e003      	b.n	800e9d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	4a06      	ldr	r2, [pc, #24]	; (800e9e8 <SDMMC_GetCmdResp2+0x90>)
 800e9d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e9d2:	2300      	movs	r3, #0
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3714      	adds	r7, #20
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr
 800e9e0:	20000000 	.word	0x20000000
 800e9e4:	10624dd3 	.word	0x10624dd3
 800e9e8:	002000c5 	.word	0x002000c5

0800e9ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b085      	sub	sp, #20
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e9f4:	4b1a      	ldr	r3, [pc, #104]	; (800ea60 <SDMMC_GetCmdResp3+0x74>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	4a1a      	ldr	r2, [pc, #104]	; (800ea64 <SDMMC_GetCmdResp3+0x78>)
 800e9fa:	fba2 2303 	umull	r2, r3, r2, r3
 800e9fe:	0a5b      	lsrs	r3, r3, #9
 800ea00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea04:	fb02 f303 	mul.w	r3, r2, r3
 800ea08:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	1e5a      	subs	r2, r3, #1
 800ea0e:	60fa      	str	r2, [r7, #12]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d102      	bne.n	800ea1a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ea14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea18:	e01b      	b.n	800ea52 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea1e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d0ef      	beq.n	800ea0a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d1ea      	bne.n	800ea0a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea38:	f003 0304 	and.w	r3, r3, #4
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d004      	beq.n	800ea4a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2204      	movs	r2, #4
 800ea44:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea46:	2304      	movs	r3, #4
 800ea48:	e003      	b.n	800ea52 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	4a06      	ldr	r2, [pc, #24]	; (800ea68 <SDMMC_GetCmdResp3+0x7c>)
 800ea4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ea50:	2300      	movs	r3, #0
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3714      	adds	r7, #20
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr
 800ea5e:	bf00      	nop
 800ea60:	20000000 	.word	0x20000000
 800ea64:	10624dd3 	.word	0x10624dd3
 800ea68:	002000c5 	.word	0x002000c5

0800ea6c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b088      	sub	sp, #32
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	60f8      	str	r0, [r7, #12]
 800ea74:	460b      	mov	r3, r1
 800ea76:	607a      	str	r2, [r7, #4]
 800ea78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ea7a:	4b35      	ldr	r3, [pc, #212]	; (800eb50 <SDMMC_GetCmdResp6+0xe4>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	4a35      	ldr	r2, [pc, #212]	; (800eb54 <SDMMC_GetCmdResp6+0xe8>)
 800ea80:	fba2 2303 	umull	r2, r3, r2, r3
 800ea84:	0a5b      	lsrs	r3, r3, #9
 800ea86:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea8a:	fb02 f303 	mul.w	r3, r2, r3
 800ea8e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	1e5a      	subs	r2, r3, #1
 800ea94:	61fa      	str	r2, [r7, #28]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d102      	bne.n	800eaa0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ea9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea9e:	e052      	b.n	800eb46 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaa4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eaa6:	69bb      	ldr	r3, [r7, #24]
 800eaa8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d0ef      	beq.n	800ea90 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800eab0:	69bb      	ldr	r3, [r7, #24]
 800eab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d1ea      	bne.n	800ea90 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eabe:	f003 0304 	and.w	r3, r3, #4
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d004      	beq.n	800ead0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2204      	movs	r2, #4
 800eaca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eacc:	2304      	movs	r3, #4
 800eace:	e03a      	b.n	800eb46 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ead4:	f003 0301 	and.w	r3, r3, #1
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d004      	beq.n	800eae6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2201      	movs	r2, #1
 800eae0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eae2:	2301      	movs	r3, #1
 800eae4:	e02f      	b.n	800eb46 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800eae6:	68f8      	ldr	r0, [r7, #12]
 800eae8:	f7ff fc46 	bl	800e378 <SDMMC_GetCommandResponse>
 800eaec:	4603      	mov	r3, r0
 800eaee:	461a      	mov	r2, r3
 800eaf0:	7afb      	ldrb	r3, [r7, #11]
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d001      	beq.n	800eafa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	e025      	b.n	800eb46 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	4a16      	ldr	r2, [pc, #88]	; (800eb58 <SDMMC_GetCmdResp6+0xec>)
 800eafe:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800eb00:	2100      	movs	r1, #0
 800eb02:	68f8      	ldr	r0, [r7, #12]
 800eb04:	f7ff fc45 	bl	800e392 <SDMMC_GetResponse>
 800eb08:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d106      	bne.n	800eb22 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	0c1b      	lsrs	r3, r3, #16
 800eb18:	b29a      	uxth	r2, r3
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	e011      	b.n	800eb46 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d002      	beq.n	800eb32 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eb2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eb30:	e009      	b.n	800eb46 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d002      	beq.n	800eb42 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800eb3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb40:	e001      	b.n	800eb46 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eb42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3720      	adds	r7, #32
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	20000000 	.word	0x20000000
 800eb54:	10624dd3 	.word	0x10624dd3
 800eb58:	002000c5 	.word	0x002000c5

0800eb5c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b085      	sub	sp, #20
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eb64:	4b22      	ldr	r3, [pc, #136]	; (800ebf0 <SDMMC_GetCmdResp7+0x94>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	4a22      	ldr	r2, [pc, #136]	; (800ebf4 <SDMMC_GetCmdResp7+0x98>)
 800eb6a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb6e:	0a5b      	lsrs	r3, r3, #9
 800eb70:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb74:	fb02 f303 	mul.w	r3, r2, r3
 800eb78:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	1e5a      	subs	r2, r3, #1
 800eb7e:	60fa      	str	r2, [r7, #12]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d102      	bne.n	800eb8a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb88:	e02c      	b.n	800ebe4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb8e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d0ef      	beq.n	800eb7a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d1ea      	bne.n	800eb7a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eba8:	f003 0304 	and.w	r3, r3, #4
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d004      	beq.n	800ebba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2204      	movs	r2, #4
 800ebb4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ebb6:	2304      	movs	r3, #4
 800ebb8:	e014      	b.n	800ebe4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebbe:	f003 0301 	and.w	r3, r3, #1
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d004      	beq.n	800ebd0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2201      	movs	r2, #1
 800ebca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ebcc:	2301      	movs	r3, #1
 800ebce:	e009      	b.n	800ebe4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d002      	beq.n	800ebe2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2240      	movs	r2, #64	; 0x40
 800ebe0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ebe2:	2300      	movs	r3, #0

}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3714      	adds	r7, #20
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr
 800ebf0:	20000000 	.word	0x20000000
 800ebf4:	10624dd3 	.word	0x10624dd3

0800ebf8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b085      	sub	sp, #20
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ec00:	4b11      	ldr	r3, [pc, #68]	; (800ec48 <SDMMC_GetCmdError+0x50>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	4a11      	ldr	r2, [pc, #68]	; (800ec4c <SDMMC_GetCmdError+0x54>)
 800ec06:	fba2 2303 	umull	r2, r3, r2, r3
 800ec0a:	0a5b      	lsrs	r3, r3, #9
 800ec0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec10:	fb02 f303 	mul.w	r3, r2, r3
 800ec14:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	1e5a      	subs	r2, r3, #1
 800ec1a:	60fa      	str	r2, [r7, #12]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d102      	bne.n	800ec26 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec24:	e009      	b.n	800ec3a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d0f1      	beq.n	800ec16 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	4a06      	ldr	r2, [pc, #24]	; (800ec50 <SDMMC_GetCmdError+0x58>)
 800ec36:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800ec38:	2300      	movs	r3, #0
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3714      	adds	r7, #20
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr
 800ec46:	bf00      	nop
 800ec48:	20000000 	.word	0x20000000
 800ec4c:	10624dd3 	.word	0x10624dd3
 800ec50:	002000c5 	.word	0x002000c5

0800ec54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ec54:	b084      	sub	sp, #16
 800ec56:	b580      	push	{r7, lr}
 800ec58:	b084      	sub	sp, #16
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	6078      	str	r0, [r7, #4]
 800ec5e:	f107 001c 	add.w	r0, r7, #28
 800ec62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800ec66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec68:	2b03      	cmp	r3, #3
 800ec6a:	d105      	bne.n	800ec78 <USB_CoreInit+0x24>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	68db      	ldr	r3, [r3, #12]
 800ec70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f000 fa89 	bl	800f190 <USB_CoreReset>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 800ec82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d10b      	bne.n	800eca0 <USB_CoreInit+0x4c>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	689b      	ldr	r3, [r3, #8]
 800ec8c:	f043 0208 	orr.w	r2, r3, #8
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	689b      	ldr	r3, [r3, #8]
 800ec98:	f043 0220 	orr.w	r2, r3, #32
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800eca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3710      	adds	r7, #16
 800eca6:	46bd      	mov	sp, r7
 800eca8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ecac:	b004      	add	sp, #16
 800ecae:	4770      	bx	lr

0800ecb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b083      	sub	sp, #12
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	689b      	ldr	r3, [r3, #8]
 800ecbc:	f023 0201 	bic.w	r2, r3, #1
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ecc4:	2300      	movs	r3, #0
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	370c      	adds	r7, #12
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr

0800ecd2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b084      	sub	sp, #16
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
 800ecda:	460b      	mov	r3, r1
 800ecdc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ecde:	2300      	movs	r3, #0
 800ece0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	68db      	ldr	r3, [r3, #12]
 800ece6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ecee:	78fb      	ldrb	r3, [r7, #3]
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d115      	bne.n	800ed20 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	68db      	ldr	r3, [r3, #12]
 800ecf8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ed00:	2001      	movs	r0, #1
 800ed02:	f7f4 fa03 	bl	800310c <HAL_Delay>
      ms++;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	3301      	adds	r3, #1
 800ed0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f000 fa31 	bl	800f174 <USB_GetMode>
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d01e      	beq.n	800ed56 <USB_SetCurrentMode+0x84>
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2b31      	cmp	r3, #49	; 0x31
 800ed1c:	d9f0      	bls.n	800ed00 <USB_SetCurrentMode+0x2e>
 800ed1e:	e01a      	b.n	800ed56 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ed20:	78fb      	ldrb	r3, [r7, #3]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d115      	bne.n	800ed52 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	68db      	ldr	r3, [r3, #12]
 800ed2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ed32:	2001      	movs	r0, #1
 800ed34:	f7f4 f9ea 	bl	800310c <HAL_Delay>
      ms++;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	3301      	adds	r3, #1
 800ed3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f000 fa18 	bl	800f174 <USB_GetMode>
 800ed44:	4603      	mov	r3, r0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d005      	beq.n	800ed56 <USB_SetCurrentMode+0x84>
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2b31      	cmp	r3, #49	; 0x31
 800ed4e:	d9f0      	bls.n	800ed32 <USB_SetCurrentMode+0x60>
 800ed50:	e001      	b.n	800ed56 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ed52:	2301      	movs	r3, #1
 800ed54:	e005      	b.n	800ed62 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	2b32      	cmp	r3, #50	; 0x32
 800ed5a:	d101      	bne.n	800ed60 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	e000      	b.n	800ed62 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ed60:	2300      	movs	r3, #0
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3710      	adds	r7, #16
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
	...

0800ed6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ed6c:	b084      	sub	sp, #16
 800ed6e:	b580      	push	{r7, lr}
 800ed70:	b086      	sub	sp, #24
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	6078      	str	r0, [r7, #4]
 800ed76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ed7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ed86:	2300      	movs	r3, #0
 800ed88:	613b      	str	r3, [r7, #16]
 800ed8a:	e009      	b.n	800eda0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ed8c:	687a      	ldr	r2, [r7, #4]
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	3340      	adds	r3, #64	; 0x40
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	4413      	add	r3, r2
 800ed96:	2200      	movs	r2, #0
 800ed98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	613b      	str	r3, [r7, #16]
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	2b0e      	cmp	r3, #14
 800eda4:	d9f2      	bls.n	800ed8c <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edaa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800edb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d11c      	bne.n	800edf2 <USB_DevInit+0x86>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	68fa      	ldr	r2, [r7, #12]
 800edc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800edc6:	f043 0302 	orr.w	r3, r3, #2
 800edca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edd0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eddc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ede8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	639a      	str	r2, [r3, #56]	; 0x38
 800edf0:	e011      	b.n	800ee16 <USB_DevInit+0xaa>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edf6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee02:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	2300      	movs	r3, #0
 800ee20:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800ee22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee24:	2b03      	cmp	r3, #3
 800ee26:	d10c      	bne.n	800ee42 <USB_DevInit+0xd6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ee28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d104      	bne.n	800ee38 <USB_DevInit+0xcc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ee2e:	2100      	movs	r1, #0
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f000 f965 	bl	800f100 <USB_SetDevSpeed>
 800ee36:	e008      	b.n	800ee4a <USB_DevInit+0xde>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ee38:	2101      	movs	r1, #1
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f000 f960 	bl	800f100 <USB_SetDevSpeed>
 800ee40:	e003      	b.n	800ee4a <USB_DevInit+0xde>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ee42:	2103      	movs	r1, #3
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f000 f95b 	bl	800f100 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ee4a:	2110      	movs	r1, #16
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 f8f3 	bl	800f038 <USB_FlushTxFifo>
 800ee52:	4603      	mov	r3, r0
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d001      	beq.n	800ee5c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ee58:	2301      	movs	r3, #1
 800ee5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f000 f91f 	bl	800f0a0 <USB_FlushRxFifo>
 800ee62:	4603      	mov	r3, r0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d001      	beq.n	800ee6c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800ee68:	2301      	movs	r3, #1
 800ee6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee72:	461a      	mov	r2, r3
 800ee74:	2300      	movs	r3, #0
 800ee76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee7e:	461a      	mov	r2, r3
 800ee80:	2300      	movs	r3, #0
 800ee82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ee90:	2300      	movs	r3, #0
 800ee92:	613b      	str	r3, [r7, #16]
 800ee94:	e043      	b.n	800ef1e <USB_DevInit+0x1b2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	015a      	lsls	r2, r3, #5
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	4413      	add	r3, r2
 800ee9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eeac:	d118      	bne.n	800eee0 <USB_DevInit+0x174>
    {
      if (i == 0U)
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d10a      	bne.n	800eeca <USB_DevInit+0x15e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	015a      	lsls	r2, r3, #5
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	4413      	add	r3, r2
 800eebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eec0:	461a      	mov	r2, r3
 800eec2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eec6:	6013      	str	r3, [r2, #0]
 800eec8:	e013      	b.n	800eef2 <USB_DevInit+0x186>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	015a      	lsls	r2, r3, #5
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	4413      	add	r3, r2
 800eed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eed6:	461a      	mov	r2, r3
 800eed8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800eedc:	6013      	str	r3, [r2, #0]
 800eede:	e008      	b.n	800eef2 <USB_DevInit+0x186>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	015a      	lsls	r2, r3, #5
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	4413      	add	r3, r2
 800eee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeec:	461a      	mov	r2, r3
 800eeee:	2300      	movs	r3, #0
 800eef0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	015a      	lsls	r2, r3, #5
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	4413      	add	r3, r2
 800eefa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eefe:	461a      	mov	r2, r3
 800ef00:	2300      	movs	r3, #0
 800ef02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	015a      	lsls	r2, r3, #5
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	4413      	add	r3, r2
 800ef0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef10:	461a      	mov	r2, r3
 800ef12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ef16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	613b      	str	r3, [r7, #16]
 800ef1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef20:	693a      	ldr	r2, [r7, #16]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d3b7      	bcc.n	800ee96 <USB_DevInit+0x12a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef26:	2300      	movs	r3, #0
 800ef28:	613b      	str	r3, [r7, #16]
 800ef2a:	e043      	b.n	800efb4 <USB_DevInit+0x248>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	015a      	lsls	r2, r3, #5
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	4413      	add	r3, r2
 800ef34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef42:	d118      	bne.n	800ef76 <USB_DevInit+0x20a>
    {
      if (i == 0U)
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d10a      	bne.n	800ef60 <USB_DevInit+0x1f4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ef4a:	693b      	ldr	r3, [r7, #16]
 800ef4c:	015a      	lsls	r2, r3, #5
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	4413      	add	r3, r2
 800ef52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef56:	461a      	mov	r2, r3
 800ef58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ef5c:	6013      	str	r3, [r2, #0]
 800ef5e:	e013      	b.n	800ef88 <USB_DevInit+0x21c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	015a      	lsls	r2, r3, #5
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	4413      	add	r3, r2
 800ef68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ef72:	6013      	str	r3, [r2, #0]
 800ef74:	e008      	b.n	800ef88 <USB_DevInit+0x21c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	015a      	lsls	r2, r3, #5
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef82:	461a      	mov	r2, r3
 800ef84:	2300      	movs	r3, #0
 800ef86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	015a      	lsls	r2, r3, #5
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	4413      	add	r3, r2
 800ef90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef94:	461a      	mov	r2, r3
 800ef96:	2300      	movs	r3, #0
 800ef98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	015a      	lsls	r2, r3, #5
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	4413      	add	r3, r2
 800efa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efa6:	461a      	mov	r2, r3
 800efa8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800efac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	3301      	adds	r3, #1
 800efb2:	613b      	str	r3, [r7, #16]
 800efb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb6:	693a      	ldr	r2, [r7, #16]
 800efb8:	429a      	cmp	r2, r3
 800efba:	d3b7      	bcc.n	800ef2c <USB_DevInit+0x1c0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efc2:	691b      	ldr	r3, [r3, #16]
 800efc4:	68fa      	ldr	r2, [r7, #12]
 800efc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800efca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800efce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800efdc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800efde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d105      	bne.n	800eff0 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	699b      	ldr	r3, [r3, #24]
 800efe8:	f043 0210 	orr.w	r2, r3, #16
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	699a      	ldr	r2, [r3, #24]
 800eff4:	4b0f      	ldr	r3, [pc, #60]	; (800f034 <USB_DevInit+0x2c8>)
 800eff6:	4313      	orrs	r3, r2
 800eff8:	687a      	ldr	r2, [r7, #4]
 800effa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800effc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800effe:	2b00      	cmp	r3, #0
 800f000:	d005      	beq.n	800f00e <USB_DevInit+0x2a2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	699b      	ldr	r3, [r3, #24]
 800f006:	f043 0208 	orr.w	r2, r3, #8
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f00e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f010:	2b01      	cmp	r3, #1
 800f012:	d107      	bne.n	800f024 <USB_DevInit+0x2b8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	699b      	ldr	r3, [r3, #24]
 800f018:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f01c:	f043 0304 	orr.w	r3, r3, #4
 800f020:	687a      	ldr	r2, [r7, #4]
 800f022:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f024:	7dfb      	ldrb	r3, [r7, #23]
}
 800f026:	4618      	mov	r0, r3
 800f028:	3718      	adds	r7, #24
 800f02a:	46bd      	mov	sp, r7
 800f02c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f030:	b004      	add	sp, #16
 800f032:	4770      	bx	lr
 800f034:	803c3800 	.word	0x803c3800

0800f038 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f038:	b480      	push	{r7}
 800f03a:	b085      	sub	sp, #20
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f042:	2300      	movs	r3, #0
 800f044:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	3301      	adds	r3, #1
 800f04a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	4a13      	ldr	r2, [pc, #76]	; (800f09c <USB_FlushTxFifo+0x64>)
 800f050:	4293      	cmp	r3, r2
 800f052:	d901      	bls.n	800f058 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f054:	2303      	movs	r3, #3
 800f056:	e01b      	b.n	800f090 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	691b      	ldr	r3, [r3, #16]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	daf2      	bge.n	800f046 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f060:	2300      	movs	r3, #0
 800f062:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	019b      	lsls	r3, r3, #6
 800f068:	f043 0220 	orr.w	r2, r3, #32
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	3301      	adds	r3, #1
 800f074:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	4a08      	ldr	r2, [pc, #32]	; (800f09c <USB_FlushTxFifo+0x64>)
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d901      	bls.n	800f082 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f07e:	2303      	movs	r3, #3
 800f080:	e006      	b.n	800f090 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	691b      	ldr	r3, [r3, #16]
 800f086:	f003 0320 	and.w	r3, r3, #32
 800f08a:	2b20      	cmp	r3, #32
 800f08c:	d0f0      	beq.n	800f070 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f08e:	2300      	movs	r3, #0
}
 800f090:	4618      	mov	r0, r3
 800f092:	3714      	adds	r7, #20
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr
 800f09c:	00030d40 	.word	0x00030d40

0800f0a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b085      	sub	sp, #20
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	4a11      	ldr	r2, [pc, #68]	; (800f0fc <USB_FlushRxFifo+0x5c>)
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	d901      	bls.n	800f0be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f0ba:	2303      	movs	r3, #3
 800f0bc:	e018      	b.n	800f0f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	691b      	ldr	r3, [r3, #16]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	daf2      	bge.n	800f0ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2210      	movs	r2, #16
 800f0ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	4a08      	ldr	r2, [pc, #32]	; (800f0fc <USB_FlushRxFifo+0x5c>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d901      	bls.n	800f0e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f0de:	2303      	movs	r3, #3
 800f0e0:	e006      	b.n	800f0f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	691b      	ldr	r3, [r3, #16]
 800f0e6:	f003 0310 	and.w	r3, r3, #16
 800f0ea:	2b10      	cmp	r3, #16
 800f0ec:	d0f0      	beq.n	800f0d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f0ee:	2300      	movs	r3, #0
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3714      	adds	r7, #20
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr
 800f0fc:	00030d40 	.word	0x00030d40

0800f100 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f100:	b480      	push	{r7}
 800f102:	b085      	sub	sp, #20
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	460b      	mov	r3, r1
 800f10a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f116:	681a      	ldr	r2, [r3, #0]
 800f118:	78fb      	ldrb	r3, [r7, #3]
 800f11a:	68f9      	ldr	r1, [r7, #12]
 800f11c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f120:	4313      	orrs	r3, r2
 800f122:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f124:	2300      	movs	r3, #0
}
 800f126:	4618      	mov	r0, r3
 800f128:	3714      	adds	r7, #20
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr

0800f132 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f132:	b480      	push	{r7}
 800f134:	b085      	sub	sp, #20
 800f136:	af00      	add	r7, sp, #0
 800f138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	68fa      	ldr	r2, [r7, #12]
 800f148:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f14c:	f023 0303 	bic.w	r3, r3, #3
 800f150:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	68fa      	ldr	r2, [r7, #12]
 800f15c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f160:	f043 0302 	orr.w	r3, r3, #2
 800f164:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f166:	2300      	movs	r3, #0
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3714      	adds	r7, #20
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f174:	b480      	push	{r7}
 800f176:	b083      	sub	sp, #12
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	695b      	ldr	r3, [r3, #20]
 800f180:	f003 0301 	and.w	r3, r3, #1
}
 800f184:	4618      	mov	r0, r3
 800f186:	370c      	adds	r7, #12
 800f188:	46bd      	mov	sp, r7
 800f18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18e:	4770      	bx	lr

0800f190 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f190:	b480      	push	{r7}
 800f192:	b085      	sub	sp, #20
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f198:	2300      	movs	r3, #0
 800f19a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	3301      	adds	r3, #1
 800f1a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	4a13      	ldr	r2, [pc, #76]	; (800f1f4 <USB_CoreReset+0x64>)
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d901      	bls.n	800f1ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f1aa:	2303      	movs	r3, #3
 800f1ac:	e01b      	b.n	800f1e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	691b      	ldr	r3, [r3, #16]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	daf2      	bge.n	800f19c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	691b      	ldr	r3, [r3, #16]
 800f1be:	f043 0201 	orr.w	r2, r3, #1
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	4a09      	ldr	r2, [pc, #36]	; (800f1f4 <USB_CoreReset+0x64>)
 800f1d0:	4293      	cmp	r3, r2
 800f1d2:	d901      	bls.n	800f1d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f1d4:	2303      	movs	r3, #3
 800f1d6:	e006      	b.n	800f1e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	691b      	ldr	r3, [r3, #16]
 800f1dc:	f003 0301 	and.w	r3, r3, #1
 800f1e0:	2b01      	cmp	r3, #1
 800f1e2:	d0f0      	beq.n	800f1c6 <USB_CoreReset+0x36>

  return HAL_OK;
 800f1e4:	2300      	movs	r3, #0
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3714      	adds	r7, #20
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f0:	4770      	bx	lr
 800f1f2:	bf00      	nop
 800f1f4:	00030d40 	.word	0x00030d40

0800f1f8 <memset>:
 800f1f8:	4402      	add	r2, r0
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d100      	bne.n	800f202 <memset+0xa>
 800f200:	4770      	bx	lr
 800f202:	f803 1b01 	strb.w	r1, [r3], #1
 800f206:	e7f9      	b.n	800f1fc <memset+0x4>

0800f208 <__libc_init_array>:
 800f208:	b570      	push	{r4, r5, r6, lr}
 800f20a:	4d0d      	ldr	r5, [pc, #52]	; (800f240 <__libc_init_array+0x38>)
 800f20c:	2600      	movs	r6, #0
 800f20e:	4c0d      	ldr	r4, [pc, #52]	; (800f244 <__libc_init_array+0x3c>)
 800f210:	1b64      	subs	r4, r4, r5
 800f212:	10a4      	asrs	r4, r4, #2
 800f214:	42a6      	cmp	r6, r4
 800f216:	d109      	bne.n	800f22c <__libc_init_array+0x24>
 800f218:	4d0b      	ldr	r5, [pc, #44]	; (800f248 <__libc_init_array+0x40>)
 800f21a:	2600      	movs	r6, #0
 800f21c:	4c0b      	ldr	r4, [pc, #44]	; (800f24c <__libc_init_array+0x44>)
 800f21e:	f000 f817 	bl	800f250 <_init>
 800f222:	1b64      	subs	r4, r4, r5
 800f224:	10a4      	asrs	r4, r4, #2
 800f226:	42a6      	cmp	r6, r4
 800f228:	d105      	bne.n	800f236 <__libc_init_array+0x2e>
 800f22a:	bd70      	pop	{r4, r5, r6, pc}
 800f22c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f230:	3601      	adds	r6, #1
 800f232:	4798      	blx	r3
 800f234:	e7ee      	b.n	800f214 <__libc_init_array+0xc>
 800f236:	f855 3b04 	ldr.w	r3, [r5], #4
 800f23a:	3601      	adds	r6, #1
 800f23c:	4798      	blx	r3
 800f23e:	e7f2      	b.n	800f226 <__libc_init_array+0x1e>
 800f240:	0800f370 	.word	0x0800f370
 800f244:	0800f370 	.word	0x0800f370
 800f248:	0800f370 	.word	0x0800f370
 800f24c:	0800f374 	.word	0x0800f374

0800f250 <_init>:
 800f250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f252:	bf00      	nop
 800f254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f256:	bc08      	pop	{r3}
 800f258:	469e      	mov	lr, r3
 800f25a:	4770      	bx	lr

0800f25c <_fini>:
 800f25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f25e:	bf00      	nop
 800f260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f262:	bc08      	pop	{r3}
 800f264:	469e      	mov	lr, r3
 800f266:	4770      	bx	lr
