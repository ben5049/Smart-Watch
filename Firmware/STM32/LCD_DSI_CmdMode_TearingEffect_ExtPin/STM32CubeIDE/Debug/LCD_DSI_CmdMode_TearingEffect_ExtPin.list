
LCD_DSI_CmdMode_TearingEffect_ExtPin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e8  080001b4  080001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00098780  0800539c  0800539c  0000639c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0809db1c  0809db1c  0009eb1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0809db24  0809db24  0009eb24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0809db28  0809db28  0009eb28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  20000000  0809db2c  0009f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0009f064  2**0
                  CONTENTS
  8 .bss          00000308  20000064  20000064  0009f064  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000036c  2000036c  0009f064  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0009f064  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001192b  00000000  00000000  0009f094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002b0c  00000000  00000000  000b09bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ed0  00000000  00000000  000b34d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000b34  00000000  00000000  000b43a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002be39  00000000  00000000  000b4ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000134c9  00000000  00000000  000e0d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00100bf0  00000000  00000000  000f41d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001f4dc6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003ce0  00000000  00000000  001f4e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 000000a6  00000000  00000000  001f8aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	@ (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	@ (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	20000064 	.word	0x20000064
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08005384 	.word	0x08005384

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	@ (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	@ (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	@ (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000068 	.word	0x20000068
 80001f0:	08005384 	.word	0x08005384

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b96a 	b.w	80004e0 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	460c      	mov	r4, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14e      	bne.n	80002ce <__udivmoddi4+0xaa>
 8000230:	4694      	mov	ip, r2
 8000232:	458c      	cmp	ip, r1
 8000234:	4686      	mov	lr, r0
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	d962      	bls.n	8000302 <__udivmoddi4+0xde>
 800023c:	b14a      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 800023e:	f1c2 0320 	rsb	r3, r2, #32
 8000242:	4091      	lsls	r1, r2
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	fa0c fc02 	lsl.w	ip, ip, r2
 800024c:	4319      	orrs	r1, r3
 800024e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000252:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000256:	fa1f f68c 	uxth.w	r6, ip
 800025a:	fbb1 f4f7 	udiv	r4, r1, r7
 800025e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000262:	fb07 1114 	mls	r1, r7, r4, r1
 8000266:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026a:	fb04 f106 	mul.w	r1, r4, r6
 800026e:	4299      	cmp	r1, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x64>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f104 30ff 	add.w	r0, r4, #4294967295
 800027a:	f080 8112 	bcs.w	80004a2 <__udivmoddi4+0x27e>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 810f 	bls.w	80004a2 <__udivmoddi4+0x27e>
 8000284:	3c02      	subs	r4, #2
 8000286:	4463      	add	r3, ip
 8000288:	1a59      	subs	r1, r3, r1
 800028a:	fa1f f38e 	uxth.w	r3, lr
 800028e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000292:	fb07 1110 	mls	r1, r7, r0, r1
 8000296:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029a:	fb00 f606 	mul.w	r6, r0, r6
 800029e:	429e      	cmp	r6, r3
 80002a0:	d90a      	bls.n	80002b8 <__udivmoddi4+0x94>
 80002a2:	eb1c 0303 	adds.w	r3, ip, r3
 80002a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002aa:	f080 80fc 	bcs.w	80004a6 <__udivmoddi4+0x282>
 80002ae:	429e      	cmp	r6, r3
 80002b0:	f240 80f9 	bls.w	80004a6 <__udivmoddi4+0x282>
 80002b4:	4463      	add	r3, ip
 80002b6:	3802      	subs	r0, #2
 80002b8:	1b9b      	subs	r3, r3, r6
 80002ba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002be:	2100      	movs	r1, #0
 80002c0:	b11d      	cbz	r5, 80002ca <__udivmoddi4+0xa6>
 80002c2:	40d3      	lsrs	r3, r2
 80002c4:	2200      	movs	r2, #0
 80002c6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d905      	bls.n	80002de <__udivmoddi4+0xba>
 80002d2:	b10d      	cbz	r5, 80002d8 <__udivmoddi4+0xb4>
 80002d4:	e9c5 0100 	strd	r0, r1, [r5]
 80002d8:	2100      	movs	r1, #0
 80002da:	4608      	mov	r0, r1
 80002dc:	e7f5      	b.n	80002ca <__udivmoddi4+0xa6>
 80002de:	fab3 f183 	clz	r1, r3
 80002e2:	2900      	cmp	r1, #0
 80002e4:	d146      	bne.n	8000374 <__udivmoddi4+0x150>
 80002e6:	42a3      	cmp	r3, r4
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xcc>
 80002ea:	4290      	cmp	r0, r2
 80002ec:	f0c0 80f0 	bcc.w	80004d0 <__udivmoddi4+0x2ac>
 80002f0:	1a86      	subs	r6, r0, r2
 80002f2:	eb64 0303 	sbc.w	r3, r4, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	d0e6      	beq.n	80002ca <__udivmoddi4+0xa6>
 80002fc:	e9c5 6300 	strd	r6, r3, [r5]
 8000300:	e7e3      	b.n	80002ca <__udivmoddi4+0xa6>
 8000302:	2a00      	cmp	r2, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x204>
 8000308:	eba1 040c 	sub.w	r4, r1, ip
 800030c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000310:	fa1f f78c 	uxth.w	r7, ip
 8000314:	2101      	movs	r1, #1
 8000316:	fbb4 f6f8 	udiv	r6, r4, r8
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb08 4416 	mls	r4, r8, r6, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb07 f006 	mul.w	r0, r7, r6
 800032a:	4298      	cmp	r0, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x11c>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 34ff 	add.w	r4, r6, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x11a>
 8000338:	4298      	cmp	r0, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2b4>
 800033e:	4626      	mov	r6, r4
 8000340:	1a1c      	subs	r4, r3, r0
 8000342:	fa1f f38e 	uxth.w	r3, lr
 8000346:	fbb4 f0f8 	udiv	r0, r4, r8
 800034a:	fb08 4410 	mls	r4, r8, r0, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb00 f707 	mul.w	r7, r0, r7
 8000356:	429f      	cmp	r7, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x148>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x146>
 8000364:	429f      	cmp	r7, r3
 8000366:	f200 80b0 	bhi.w	80004ca <__udivmoddi4+0x2a6>
 800036a:	4620      	mov	r0, r4
 800036c:	1bdb      	subs	r3, r3, r7
 800036e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0x9c>
 8000374:	f1c1 0620 	rsb	r6, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 f706 	lsr.w	r7, r2, r6
 800037e:	431f      	orrs	r7, r3
 8000380:	fa20 fc06 	lsr.w	ip, r0, r6
 8000384:	fa04 f301 	lsl.w	r3, r4, r1
 8000388:	ea43 030c 	orr.w	r3, r3, ip
 800038c:	40f4      	lsrs	r4, r6
 800038e:	fa00 f801 	lsl.w	r8, r0, r1
 8000392:	0c38      	lsrs	r0, r7, #16
 8000394:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000398:	fbb4 fef0 	udiv	lr, r4, r0
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	fb00 441e 	mls	r4, r0, lr, r4
 80003a4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a8:	fb0e f90c 	mul.w	r9, lr, ip
 80003ac:	45a1      	cmp	r9, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	d90a      	bls.n	80003ca <__udivmoddi4+0x1a6>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ba:	f080 8084 	bcs.w	80004c6 <__udivmoddi4+0x2a2>
 80003be:	45a1      	cmp	r9, r4
 80003c0:	f240 8081 	bls.w	80004c6 <__udivmoddi4+0x2a2>
 80003c4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	eba4 0409 	sub.w	r4, r4, r9
 80003ce:	fa1f f983 	uxth.w	r9, r3
 80003d2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d6:	fb00 4413 	mls	r4, r0, r3, r4
 80003da:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003de:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x1d2>
 80003e6:	193c      	adds	r4, r7, r4
 80003e8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003ec:	d267      	bcs.n	80004be <__udivmoddi4+0x29a>
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d965      	bls.n	80004be <__udivmoddi4+0x29a>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003fa:	fba0 9302 	umull	r9, r3, r0, r2
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	429c      	cmp	r4, r3
 8000404:	46ce      	mov	lr, r9
 8000406:	469c      	mov	ip, r3
 8000408:	d351      	bcc.n	80004ae <__udivmoddi4+0x28a>
 800040a:	d04e      	beq.n	80004aa <__udivmoddi4+0x286>
 800040c:	b155      	cbz	r5, 8000424 <__udivmoddi4+0x200>
 800040e:	ebb8 030e 	subs.w	r3, r8, lr
 8000412:	eb64 040c 	sbc.w	r4, r4, ip
 8000416:	fa04 f606 	lsl.w	r6, r4, r6
 800041a:	40cb      	lsrs	r3, r1
 800041c:	431e      	orrs	r6, r3
 800041e:	40cc      	lsrs	r4, r1
 8000420:	e9c5 6400 	strd	r6, r4, [r5]
 8000424:	2100      	movs	r1, #0
 8000426:	e750      	b.n	80002ca <__udivmoddi4+0xa6>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f103 	lsr.w	r1, r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa24 f303 	lsr.w	r3, r4, r3
 8000438:	4094      	lsls	r4, r2
 800043a:	430c      	orrs	r4, r1
 800043c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000440:	fa00 fe02 	lsl.w	lr, r0, r2
 8000444:	fa1f f78c 	uxth.w	r7, ip
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3110 	mls	r1, r8, r0, r3
 8000450:	0c23      	lsrs	r3, r4, #16
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f107 	mul.w	r1, r0, r7
 800045a:	4299      	cmp	r1, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x24c>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 36ff 	add.w	r6, r0, #4294967295
 8000466:	d22c      	bcs.n	80004c2 <__udivmoddi4+0x29e>
 8000468:	4299      	cmp	r1, r3
 800046a:	d92a      	bls.n	80004c2 <__udivmoddi4+0x29e>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb3 f1f8 	udiv	r1, r3, r8
 8000478:	fb08 3311 	mls	r3, r8, r1, r3
 800047c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000480:	fb01 f307 	mul.w	r3, r1, r7
 8000484:	42a3      	cmp	r3, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x276>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000490:	d213      	bcs.n	80004ba <__udivmoddi4+0x296>
 8000492:	42a3      	cmp	r3, r4
 8000494:	d911      	bls.n	80004ba <__udivmoddi4+0x296>
 8000496:	3902      	subs	r1, #2
 8000498:	4464      	add	r4, ip
 800049a:	1ae4      	subs	r4, r4, r3
 800049c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a0:	e739      	b.n	8000316 <__udivmoddi4+0xf2>
 80004a2:	4604      	mov	r4, r0
 80004a4:	e6f0      	b.n	8000288 <__udivmoddi4+0x64>
 80004a6:	4608      	mov	r0, r1
 80004a8:	e706      	b.n	80002b8 <__udivmoddi4+0x94>
 80004aa:	45c8      	cmp	r8, r9
 80004ac:	d2ae      	bcs.n	800040c <__udivmoddi4+0x1e8>
 80004ae:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7a8      	b.n	800040c <__udivmoddi4+0x1e8>
 80004ba:	4631      	mov	r1, r6
 80004bc:	e7ed      	b.n	800049a <__udivmoddi4+0x276>
 80004be:	4603      	mov	r3, r0
 80004c0:	e799      	b.n	80003f6 <__udivmoddi4+0x1d2>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e7d4      	b.n	8000470 <__udivmoddi4+0x24c>
 80004c6:	46d6      	mov	lr, sl
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1a6>
 80004ca:	4463      	add	r3, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e74d      	b.n	800036c <__udivmoddi4+0x148>
 80004d0:	4606      	mov	r6, r0
 80004d2:	4623      	mov	r3, r4
 80004d4:	4608      	mov	r0, r1
 80004d6:	e70f      	b.n	80002f8 <__udivmoddi4+0xd4>
 80004d8:	3e02      	subs	r6, #2
 80004da:	4463      	add	r3, ip
 80004dc:	e730      	b.n	8000340 <__udivmoddi4+0x11c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b0b2      	sub	sp, #200	@ 0xc8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
  NT35510_IO_Delay(120);
 80004ee:	2078      	movs	r0, #120	@ 0x78
 80004f0:	f000 fa0e 	bl	8000910 <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 80004f4:	4ac8      	ldr	r2, [pc, #800]	@ (8000818 <NT35510_Init+0x334>)
 80004f6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80004fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004fe:	6018      	str	r0, [r3, #0]
 8000500:	3304      	adds	r3, #4
 8000502:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 8000504:	4bc5      	ldr	r3, [pc, #788]	@ (800081c <NT35510_Init+0x338>)
 8000506:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 800050a:	4bc5      	ldr	r3, [pc, #788]	@ (8000820 <NT35510_Init+0x33c>)
 800050c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 8000510:	4bc4      	ldr	r3, [pc, #784]	@ (8000824 <NT35510_Init+0x340>)
 8000512:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 8000516:	4bc4      	ldr	r3, [pc, #784]	@ (8000828 <NT35510_Init+0x344>)
 8000518:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 800051c:	4bc3      	ldr	r3, [pc, #780]	@ (800082c <NT35510_Init+0x348>)
 800051e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 8000522:	4bc3      	ldr	r3, [pc, #780]	@ (8000830 <NT35510_Init+0x34c>)
 8000524:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 8000528:	f240 13bf 	movw	r3, #447	@ 0x1bf
 800052c:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 8000530:	4bc0      	ldr	r3, [pc, #768]	@ (8000834 <NT35510_Init+0x350>)
 8000532:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 8000536:	4bc0      	ldr	r3, [pc, #768]	@ (8000838 <NT35510_Init+0x354>)
 8000538:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 800053c:	4bbf      	ldr	r3, [pc, #764]	@ (800083c <NT35510_Init+0x358>)
 800053e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 8000542:	4bbf      	ldr	r3, [pc, #764]	@ (8000840 <NT35510_Init+0x35c>)
 8000544:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8000548:	4bbe      	ldr	r3, [pc, #760]	@ (8000844 <NT35510_Init+0x360>)
 800054a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 800054e:	4bbe      	ldr	r3, [pc, #760]	@ (8000848 <NT35510_Init+0x364>)
 8000550:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8000554:	4abd      	ldr	r2, [pc, #756]	@ (800084c <NT35510_Init+0x368>)
 8000556:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800055a:	6812      	ldr	r2, [r2, #0]
 800055c:	4611      	mov	r1, r2
 800055e:	8019      	strh	r1, [r3, #0]
 8000560:	3302      	adds	r3, #2
 8000562:	0c12      	lsrs	r2, r2, #16
 8000564:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 8000566:	4aba      	ldr	r2, [pc, #744]	@ (8000850 <NT35510_Init+0x36c>)
 8000568:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800056c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000570:	6018      	str	r0, [r3, #0]
 8000572:	3304      	adds	r3, #4
 8000574:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 8000576:	4ab7      	ldr	r2, [pc, #732]	@ (8000854 <NT35510_Init+0x370>)
 8000578:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800057c:	6812      	ldr	r2, [r2, #0]
 800057e:	4611      	mov	r1, r2
 8000580:	8019      	strh	r1, [r3, #0]
 8000582:	3302      	adds	r3, #2
 8000584:	0c12      	lsrs	r2, r2, #16
 8000586:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8000588:	f240 33b6 	movw	r3, #950	@ 0x3b6
 800058c:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  const uint8_t nt35510_reg19[] = {0xB5, 0x51};
 8000590:	f245 13b5 	movw	r3, #20917	@ 0x51b5
 8000594:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 8000598:	4aaf      	ldr	r2, [pc, #700]	@ (8000858 <NT35510_Init+0x374>)
 800059a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800059e:	6812      	ldr	r2, [r2, #0]
 80005a0:	4611      	mov	r1, r2
 80005a2:	8019      	strh	r1, [r3, #0]
 80005a4:	3302      	adds	r3, #2
 80005a6:	0c12      	lsrs	r2, r2, #16
 80005a8:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 80005aa:	4aac      	ldr	r2, [pc, #688]	@ (800085c <NT35510_Init+0x378>)
 80005ac:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80005b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005b4:	6018      	str	r0, [r3, #0]
 80005b6:	3304      	adds	r3, #4
 80005b8:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 80005ba:	f04f 433c 	mov.w	r3, #3154116608	@ 0xbc000000
 80005be:	667b      	str	r3, [r7, #100]	@ 0x64
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 80005c0:	4ba7      	ldr	r3, [pc, #668]	@ (8000860 <NT35510_Init+0x37c>)
 80005c2:	663b      	str	r3, [r7, #96]	@ 0x60
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 80005c4:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 80005c8:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 80005cc:	2336      	movs	r3, #54	@ 0x36
 80005ce:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 80005d2:	4aa4      	ldr	r2, [pc, #656]	@ (8000864 <NT35510_Init+0x380>)
 80005d4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80005d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005dc:	6018      	str	r0, [r3, #0]
 80005de:	3304      	adds	r3, #4
 80005e0:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 80005e2:	4aa1      	ldr	r2, [pc, #644]	@ (8000868 <NT35510_Init+0x384>)
 80005e4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80005e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ec:	6018      	str	r0, [r3, #0]
 80005ee:	3304      	adds	r3, #4
 80005f0:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 80005f2:	f246 0336 	movw	r3, #24630	@ 0x6036
 80005f6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 80005fa:	4a9c      	ldr	r2, [pc, #624]	@ (800086c <NT35510_Init+0x388>)
 80005fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000600:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000604:	6018      	str	r0, [r3, #0]
 8000606:	3304      	adds	r3, #4
 8000608:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 800060a:	4a99      	ldr	r2, [pc, #612]	@ (8000870 <NT35510_Init+0x38c>)
 800060c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000610:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000614:	6018      	str	r0, [r3, #0]
 8000616:	3304      	adds	r3, #4
 8000618:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 800061a:	2335      	movs	r3, #53	@ 0x35
 800061c:	863b      	strh	r3, [r7, #48]	@ 0x30
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 800061e:	2311      	movs	r3, #17
 8000620:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 8000622:	2329      	movs	r3, #41	@ 0x29
 8000624:	853b      	strh	r3, [r7, #40]	@ 0x28

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 8000626:	f647 7351 	movw	r3, #32593	@ 0x7f51
 800062a:	84bb      	strh	r3, [r7, #36]	@ 0x24
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 800062c:	f642 4353 	movw	r3, #11347	@ 0x2c53
 8000630:	843b      	strh	r3, [r7, #32]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 8000632:	f240 2355 	movw	r3, #597	@ 0x255
 8000636:	83bb      	strh	r3, [r7, #28]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 8000638:	f64f 735e 	movw	r3, #65374	@ 0xff5e
 800063c:	833b      	strh	r3, [r7, #24]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 800063e:	232c      	movs	r3, #44	@ 0x2c
 8000640:	82bb      	strh	r3, [r7, #20]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 8000642:	f245 533a 	movw	r3, #21818	@ 0x553a
 8000646:	823b      	strh	r3, [r7, #16]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8000648:	f247 733a 	movw	r3, #30522	@ 0x773a
 800064c:	81bb      	strh	r3, [r7, #12]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 800064e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000652:	4619      	mov	r1, r3
 8000654:	2005      	movs	r0, #5
 8000656:	f000 fba5 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 800065a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800065e:	4619      	mov	r1, r3
 8000660:	2003      	movs	r0, #3
 8000662:	f000 fb9f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 8000666:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800066a:	4619      	mov	r1, r3
 800066c:	2003      	movs	r0, #3
 800066e:	f000 fb99 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 8000672:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000676:	4619      	mov	r1, r3
 8000678:	2003      	movs	r0, #3
 800067a:	f000 fb93 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 800067e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8000682:	4619      	mov	r1, r3
 8000684:	2003      	movs	r0, #3
 8000686:	f000 fb8d 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 800068a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800068e:	4619      	mov	r1, r3
 8000690:	2003      	movs	r0, #3
 8000692:	f000 fb87 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 8000696:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800069a:	4619      	mov	r1, r3
 800069c:	2003      	movs	r0, #3
 800069e:	f000 fb81 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 80006a2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80006a6:	4619      	mov	r1, r3
 80006a8:	2001      	movs	r0, #1
 80006aa:	f000 fb7b 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 80006ae:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80006b2:	4619      	mov	r1, r3
 80006b4:	2003      	movs	r0, #3
 80006b6:	f000 fb75 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 80006ba:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80006be:	4619      	mov	r1, r3
 80006c0:	2003      	movs	r0, #3
 80006c2:	f000 fb6f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 80006c6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80006ca:	4619      	mov	r1, r3
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 fb69 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 80006d2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80006d6:	4619      	mov	r1, r3
 80006d8:	2003      	movs	r0, #3
 80006da:	f000 fb63 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 80006de:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80006e2:	4619      	mov	r1, r3
 80006e4:	2003      	movs	r0, #3
 80006e6:	f000 fb5d 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 80006ea:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80006ee:	4619      	mov	r1, r3
 80006f0:	2003      	movs	r0, #3
 80006f2:	f000 fb57 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 80006f6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80006fa:	4619      	mov	r1, r3
 80006fc:	2002      	movs	r0, #2
 80006fe:	f000 fb51 	bl	8000da4 <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 8000702:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000706:	4619      	mov	r1, r3
 8000708:	2005      	movs	r0, #5
 800070a:	f000 fb4b 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 800070e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000712:	4619      	mov	r1, r3
 8000714:	2002      	movs	r0, #2
 8000716:	f000 fb45 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 800071a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800071e:	4619      	mov	r1, r3
 8000720:	2001      	movs	r0, #1
 8000722:	f000 fb3f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 8000726:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800072a:	4619      	mov	r1, r3
 800072c:	2001      	movs	r0, #1
 800072e:	f000 fb39 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 8000732:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000736:	4619      	mov	r1, r3
 8000738:	2002      	movs	r0, #2
 800073a:	f000 fb33 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 800073e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000742:	4619      	mov	r1, r3
 8000744:	2004      	movs	r0, #4
 8000746:	f000 fb2d 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 800074a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800074e:	4619      	mov	r1, r3
 8000750:	2003      	movs	r0, #3
 8000752:	f000 fb27 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 8000756:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800075a:	4619      	mov	r1, r3
 800075c:	2003      	movs	r0, #3
 800075e:	f000 fb21 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 8000762:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000766:	4619      	mov	r1, r3
 8000768:	2001      	movs	r0, #1
 800076a:	f000 fb1b 	bl	8000da4 <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 800076e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000772:	4619      	mov	r1, r3
 8000774:	2000      	movs	r0, #0
 8000776:	f000 fb15 	bl	8000da4 <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	4619      	mov	r1, r3
 8000780:	2000      	movs	r0, #0
 8000782:	f000 fb0f 	bl	8000da4 <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 8000786:	20c8      	movs	r0, #200	@ 0xc8
 8000788:	f000 f8c2 	bl	8000910 <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d112      	bne.n	80007b8 <NT35510_Init+0x2d4>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 8000792:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000796:	4619      	mov	r1, r3
 8000798:	2001      	movs	r0, #1
 800079a:	f000 fb03 	bl	8000da4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 800079e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80007a2:	4619      	mov	r1, r3
 80007a4:	2004      	movs	r0, #4
 80007a6:	f000 fafd 	bl	8000da4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 80007aa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007ae:	4619      	mov	r1, r3
 80007b0:	2004      	movs	r0, #4
 80007b2:	f000 faf7 	bl	8000da4 <DSI_IO_WriteCmd>
 80007b6:	e011      	b.n	80007dc <NT35510_Init+0x2f8>
  }
  else
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 80007b8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80007bc:	4619      	mov	r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 faf0 	bl	8000da4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 80007c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80007c8:	4619      	mov	r1, r3
 80007ca:	2004      	movs	r0, #4
 80007cc:	f000 faea 	bl	8000da4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 80007d0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80007d4:	4619      	mov	r1, r3
 80007d6:	2004      	movs	r0, #4
 80007d8:	f000 fae4 	bl	8000da4 <DSI_IO_WriteCmd>
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 80007dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007e0:	4619      	mov	r1, r3
 80007e2:	2000      	movs	r0, #0
 80007e4:	f000 fade 	bl	8000da4 <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 80007e8:	2078      	movs	r0, #120	@ 0x78
 80007ea:	f000 f891 	bl	8000910 <NT35510_IO_Delay>

  switch(ColorCoding)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d009      	beq.n	8000808 <NT35510_Init+0x324>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d13c      	bne.n	8000874 <NT35510_Init+0x390>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 80007fa:	f107 0310 	add.w	r3, r7, #16
 80007fe:	4619      	mov	r1, r3
 8000800:	2001      	movs	r0, #1
 8000802:	f000 facf 	bl	8000da4 <DSI_IO_WriteCmd>
      break;
 8000806:	e03c      	b.n	8000882 <NT35510_Init+0x39e>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	4619      	mov	r1, r3
 800080e:	2001      	movs	r0, #1
 8000810:	f000 fac8 	bl	8000da4 <DSI_IO_WriteCmd>
      break;
 8000814:	e035      	b.n	8000882 <NT35510_Init+0x39e>
 8000816:	bf00      	nop
 8000818:	0800539c 	.word	0x0800539c
 800081c:	b0030303 	.word	0xb0030303
 8000820:	b6464646 	.word	0xb6464646
 8000824:	b1030303 	.word	0xb1030303
 8000828:	b7363636 	.word	0xb7363636
 800082c:	b2020000 	.word	0xb2020000
 8000830:	b8262626 	.word	0xb8262626
 8000834:	b3090909 	.word	0xb3090909
 8000838:	b9363636 	.word	0xb9363636
 800083c:	b5080808 	.word	0xb5080808
 8000840:	ba262626 	.word	0xba262626
 8000844:	bc008000 	.word	0xbc008000
 8000848:	bd008000 	.word	0xbd008000
 800084c:	080053a4 	.word	0x080053a4
 8000850:	080053a8 	.word	0x080053a8
 8000854:	080053b0 	.word	0x080053b0
 8000858:	080053b4 	.word	0x080053b4
 800085c:	080053b8 	.word	0x080053b8
 8000860:	cc000003 	.word	0xcc000003
 8000864:	080053c0 	.word	0x080053c0
 8000868:	080053c8 	.word	0x080053c8
 800086c:	080053d0 	.word	0x080053d0
 8000870:	080053d8 	.word	0x080053d8
    default :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4619      	mov	r1, r3
 800087a:	2001      	movs	r0, #1
 800087c:	f000 fa92 	bl	8000da4 <DSI_IO_WriteCmd>
      break;
 8000880:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 8000882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000886:	4619      	mov	r1, r3
 8000888:	2001      	movs	r0, #1
 800088a:	f000 fa8b 	bl	8000da4 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	4619      	mov	r1, r3
 8000894:	2001      	movs	r0, #1
 8000896:	f000 fa85 	bl	8000da4 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	2001      	movs	r0, #1
 80008a2:	f000 fa7f 	bl	8000da4 <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 80008a6:	f107 0318 	add.w	r3, r7, #24
 80008aa:	4619      	mov	r1, r3
 80008ac:	2001      	movs	r0, #1
 80008ae:	f000 fa79 	bl	8000da4 <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 80008b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008b6:	4619      	mov	r1, r3
 80008b8:	2000      	movs	r0, #0
 80008ba:	f000 fa73 	bl	8000da4 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	2000      	movs	r0, #0
 80008c6:	f000 fa6d 	bl	8000da4 <DSI_IO_WriteCmd>

  return 0;
 80008ca:	2300      	movs	r3, #0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	37c8      	adds	r7, #200	@ 0xc8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <BSP_LED_On>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b03      	cmp	r3, #3
 80008e2:	d80c      	bhi.n	80008fe <BSP_LED_On+0x2a>
  {
     HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	4a08      	ldr	r2, [pc, #32]	@ (8000908 <BSP_LED_On+0x34>)
 80008e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	4a07      	ldr	r2, [pc, #28]	@ (800090c <BSP_LED_On+0x38>)
 80008f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	2200      	movs	r2, #0
 80008f8:	4619      	mov	r1, r3
 80008fa:	f002 fb6b 	bl	8002fd4 <HAL_GPIO_WritePin>
  }

}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000010 	.word	0x20000010
 800090c:	20000000 	.word	0x20000000

08000910 <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f000 fe87 	bl	800162c <HAL_Delay>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  *         This signal is only cabled on Discovery Rev B and beyond.
  */
void BSP_LCD_Reset(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
#if !defined(USE_STM32469I_DISCO_REVA)
  /* Disco Rev B and beyond : reset the LCD by activation of XRES (active low) connected to PH7 */
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b16      	ldr	r3, [pc, #88]	@ (800098c <BSP_LCD_Reset+0x64>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a15      	ldr	r2, [pc, #84]	@ (800098c <BSP_LCD_Reset+0x64>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b13      	ldr	r3, [pc, #76]	@ (800098c <BSP_LCD_Reset+0x64>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PH7 */
    gpio_init_structure.Pin   = GPIO_PIN_7;
 800094a:	2380      	movs	r3, #128	@ 0x80
 800094c:	607b      	str	r3, [r7, #4]
#if defined(USE_STM32469I_DISCO_REVC)
    /* Push Pull Mode is required for TechShine LCD (NT35510) */
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	60bb      	str	r3, [r7, #8]
#else
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
#endif
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	4619      	mov	r1, r3
 800095e:	480c      	ldr	r0, [pc, #48]	@ (8000990 <BSP_LCD_Reset+0x68>)
 8000960:	f002 f98c 	bl	8002c7c <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2180      	movs	r1, #128	@ 0x80
 8000968:	4809      	ldr	r0, [pc, #36]	@ (8000990 <BSP_LCD_Reset+0x68>)
 800096a:	f002 fb33 	bl	8002fd4 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800096e:	2014      	movs	r0, #20
 8000970:	f000 fe5c 	bl	800162c <HAL_Delay>

    /* Deactivate XRES */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2180      	movs	r1, #128	@ 0x80
 8000978:	4805      	ldr	r0, [pc, #20]	@ (8000990 <BSP_LCD_Reset+0x68>)
 800097a:	f002 fb2b 	bl	8002fd4 <HAL_GPIO_WritePin>
    
    /* Wait for 20ms after releasing XRES before sending commands */
    HAL_Delay(20);    
 800097e:	2014      	movs	r0, #20
 8000980:	f000 fe54 	bl	800162c <HAL_Delay>
#else
  /* Nothing to do in case of Disco Rev A */
#endif /* USE_STM32469I_DISCO_REVA == 0 */
}
 8000984:	bf00      	nop
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	40021c00 	.word	0x40021c00

08000994 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <BSP_LCD_GetXSize+0x14>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000030 	.word	0x20000030

080009ac <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80009b0:	4b03      	ldr	r3, [pc, #12]	@ (80009c0 <BSP_LCD_GetYSize+0x14>)
 80009b2:	681b      	ldr	r3, [r3, #0]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000034 	.word	0x20000034

080009c4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80009cc:	4a04      	ldr	r2, [pc, #16]	@ (80009e0 <BSP_LCD_SelectLayer+0x1c>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000184 	.word	0x20000184

080009e4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80009ec:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <BSP_LCD_SetTextColor+0x28>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4907      	ldr	r1, [pc, #28]	@ (8000a10 <BSP_LCD_SetTextColor+0x2c>)
 80009f2:	4613      	mov	r3, r2
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	4413      	add	r3, r2
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	440b      	add	r3, r1
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	20000184 	.word	0x20000184
 8000a10:	20000188 	.word	0x20000188

08000a14 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <BSP_LCD_SetBackColor+0x2c>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4908      	ldr	r1, [pc, #32]	@ (8000a44 <BSP_LCD_SetBackColor+0x30>)
 8000a22:	4613      	mov	r3, r2
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	4413      	add	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	601a      	str	r2, [r3, #0]
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000184 	.word	0x20000184
 8000a44:	20000188 	.word	0x20000188

08000a48 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <BSP_LCD_SetFont+0x2c>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4908      	ldr	r1, [pc, #32]	@ (8000a78 <BSP_LCD_SetFont+0x30>)
 8000a56:	4613      	mov	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	440b      	add	r3, r1
 8000a60:	3308      	adds	r3, #8
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	601a      	str	r2, [r3, #0]
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000184 	.word	0x20000184
 8000a78:	20000188 	.word	0x20000188

08000a7c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8000a80:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <BSP_LCD_GetFont+0x24>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4907      	ldr	r1, [pc, #28]	@ (8000aa4 <BSP_LCD_GetFont+0x28>)
 8000a86:	4613      	mov	r3, r2
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	4413      	add	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	440b      	add	r3, r1
 8000a90:	3308      	adds	r3, #8
 8000a92:	681b      	ldr	r3, [r3, #0]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000184 	.word	0x20000184
 8000aa4:	20000188 	.word	0x20000188

08000aa8 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	80fb      	strh	r3, [r7, #6]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	80bb      	strh	r3, [r7, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000aba:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <BSP_LCD_DisplayChar+0x80>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	491b      	ldr	r1, [pc, #108]	@ (8000b2c <BSP_LCD_DisplayChar+0x84>)
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	4413      	add	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	440b      	add	r3, r1
 8000aca:	3308      	adds	r3, #8
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	6819      	ldr	r1, [r3, #0]
 8000ad0:	78fb      	ldrb	r3, [r7, #3]
 8000ad2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000ad6:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <BSP_LCD_DisplayChar+0x80>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	4c14      	ldr	r4, [pc, #80]	@ (8000b2c <BSP_LCD_DisplayChar+0x84>)
 8000adc:	4613      	mov	r3, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	4413      	add	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4423      	add	r3, r4
 8000ae6:	3308      	adds	r3, #8
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000aec:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000af0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <BSP_LCD_DisplayChar+0x80>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4c0d      	ldr	r4, [pc, #52]	@ (8000b2c <BSP_LCD_DisplayChar+0x84>)
 8000af6:	4613      	mov	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4413      	add	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4423      	add	r3, r4
 8000b00:	3308      	adds	r3, #8
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	889b      	ldrh	r3, [r3, #4]
 8000b06:	3307      	adds	r3, #7
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	da00      	bge.n	8000b0e <BSP_LCD_DisplayChar+0x66>
 8000b0c:	3307      	adds	r3, #7
 8000b0e:	10db      	asrs	r3, r3, #3
 8000b10:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b14:	18ca      	adds	r2, r1, r3
 8000b16:	88b9      	ldrh	r1, [r7, #4]
 8000b18:	88fb      	ldrh	r3, [r7, #6]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 fa02 	bl	8000f24 <DrawChar>
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	20000184 	.word	0x20000184
 8000b2c:	20000188 	.word	0x20000188

08000b30 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000b30:	b5b0      	push	{r4, r5, r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60ba      	str	r2, [r7, #8]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	81fb      	strh	r3, [r7, #14]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	81bb      	strh	r3, [r7, #12]
 8000b42:	4613      	mov	r3, r2
 8000b44:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8000b46:	2301      	movs	r3, #1
 8000b48:	83fb      	strh	r3, [r7, #30]
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8000b5a:	e002      	b.n	8000b62 <BSP_LCD_DisplayStringAt+0x32>
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	617a      	str	r2, [r7, #20]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1f6      	bne.n	8000b5c <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000b6e:	f7ff ff11 	bl	8000994 <BSP_LCD_GetXSize>
 8000b72:	4601      	mov	r1, r0
 8000b74:	4b50      	ldr	r3, [pc, #320]	@ (8000cb8 <BSP_LCD_DisplayStringAt+0x188>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4850      	ldr	r0, [pc, #320]	@ (8000cbc <BSP_LCD_DisplayStringAt+0x18c>)
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4413      	add	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4403      	add	r3, r0
 8000b84:	3308      	adds	r3, #8
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	889b      	ldrh	r3, [r3, #4]
 8000b8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b8e:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2b03      	cmp	r3, #3
 8000b94:	d01c      	beq.n	8000bd0 <BSP_LCD_DisplayStringAt+0xa0>
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	dc33      	bgt.n	8000c02 <BSP_LCD_DisplayStringAt+0xd2>
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d002      	beq.n	8000ba4 <BSP_LCD_DisplayStringAt+0x74>
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d019      	beq.n	8000bd6 <BSP_LCD_DisplayStringAt+0xa6>
 8000ba2:	e02e      	b.n	8000c02 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	1ad1      	subs	r1, r2, r3
 8000baa:	4b43      	ldr	r3, [pc, #268]	@ (8000cb8 <BSP_LCD_DisplayStringAt+0x188>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4843      	ldr	r0, [pc, #268]	@ (8000cbc <BSP_LCD_DisplayStringAt+0x18c>)
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	4403      	add	r3, r0
 8000bba:	3308      	adds	r3, #8
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	889b      	ldrh	r3, [r3, #4]
 8000bc0:	fb01 f303 	mul.w	r3, r1, r3
 8000bc4:	085b      	lsrs	r3, r3, #1
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	89fb      	ldrh	r3, [r7, #14]
 8000bca:	4413      	add	r3, r2
 8000bcc:	83fb      	strh	r3, [r7, #30]
      break;
 8000bce:	e01b      	b.n	8000c08 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8000bd0:	89fb      	ldrh	r3, [r7, #14]
 8000bd2:	83fb      	strh	r3, [r7, #30]
      break;
 8000bd4:	e018      	b.n	8000c08 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	b299      	uxth	r1, r3
 8000bde:	4b36      	ldr	r3, [pc, #216]	@ (8000cb8 <BSP_LCD_DisplayStringAt+0x188>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	4836      	ldr	r0, [pc, #216]	@ (8000cbc <BSP_LCD_DisplayStringAt+0x18c>)
 8000be4:	4613      	mov	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	4413      	add	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4403      	add	r3, r0
 8000bee:	3308      	adds	r3, #8
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	889b      	ldrh	r3, [r3, #4]
 8000bf4:	fb11 f303 	smulbb	r3, r1, r3
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	89fb      	ldrh	r3, [r7, #14]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	83fb      	strh	r3, [r7, #30]
      break;
 8000c00:	e002      	b.n	8000c08 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 8000c02:	89fb      	ldrh	r3, [r7, #14]
 8000c04:	83fb      	strh	r3, [r7, #30]
      break;
 8000c06:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8000c08:	8bfb      	ldrh	r3, [r7, #30]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <BSP_LCD_DisplayStringAt+0xe6>
 8000c0e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	da1d      	bge.n	8000c52 <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 8000c16:	2301      	movs	r3, #1
 8000c18:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000c1a:	e01a      	b.n	8000c52 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	781a      	ldrb	r2, [r3, #0]
 8000c20:	89b9      	ldrh	r1, [r7, #12]
 8000c22:	8bfb      	ldrh	r3, [r7, #30]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff3f 	bl	8000aa8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8000c2a:	4b23      	ldr	r3, [pc, #140]	@ (8000cb8 <BSP_LCD_DisplayStringAt+0x188>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	4923      	ldr	r1, [pc, #140]	@ (8000cbc <BSP_LCD_DisplayStringAt+0x18c>)
 8000c30:	4613      	mov	r3, r2
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	4413      	add	r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	440b      	add	r3, r1
 8000c3a:	3308      	adds	r3, #8
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	889a      	ldrh	r2, [r3, #4]
 8000c40:	8bfb      	ldrh	r3, [r7, #30]
 8000c42:	4413      	add	r3, r2
 8000c44:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
    i++;
 8000c4c:	8bbb      	ldrh	r3, [r7, #28]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	bf14      	ite	ne
 8000c5a:	2301      	movne	r3, #1
 8000c5c:	2300      	moveq	r3, #0
 8000c5e:	b2dc      	uxtb	r4, r3
 8000c60:	f7ff fe98 	bl	8000994 <BSP_LCD_GetXSize>
 8000c64:	8bb9      	ldrh	r1, [r7, #28]
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <BSP_LCD_DisplayStringAt+0x188>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	4d14      	ldr	r5, [pc, #80]	@ (8000cbc <BSP_LCD_DisplayStringAt+0x18c>)
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4413      	add	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	442b      	add	r3, r5
 8000c76:	3308      	adds	r3, #8
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	889b      	ldrh	r3, [r3, #4]
 8000c7c:	fb01 f303 	mul.w	r3, r1, r3
 8000c80:	1ac3      	subs	r3, r0, r3
 8000c82:	b299      	uxth	r1, r3
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <BSP_LCD_DisplayStringAt+0x188>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <BSP_LCD_DisplayStringAt+0x18c>)
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	4413      	add	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4403      	add	r3, r0
 8000c94:	3308      	adds	r3, #8
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	889b      	ldrh	r3, [r3, #4]
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	bf2c      	ite	cs
 8000c9e:	2301      	movcs	r3, #1
 8000ca0:	2300      	movcc	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	4023      	ands	r3, r4
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1b7      	bne.n	8000c1c <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3720      	adds	r7, #32
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000184 	.word	0x20000184
 8000cbc:	20000188 	.word	0x20000188

08000cc0 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 60 characters on the LCD.
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8000ccc:	f7ff fed6 	bl	8000a7c <BSP_LCD_GetFont>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	88db      	ldrh	r3, [r3, #6]
 8000cd4:	88fa      	ldrh	r2, [r7, #6]
 8000cd6:	fb12 f303 	smulbb	r3, r2, r3
 8000cda:	b299      	uxth	r1, r3
 8000cdc:	2303      	movs	r3, #3
 8000cde:	683a      	ldr	r2, [r7, #0]
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff ff25 	bl	8000b30 <BSP_LCD_DisplayStringAt>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af02      	add	r7, sp, #8
 8000cf8:	4604      	mov	r4, r0
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4623      	mov	r3, r4
 8000d02:	80fb      	strh	r3, [r7, #6]
 8000d04:	4603      	mov	r3, r0
 8000d06:	80bb      	strh	r3, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000d14:	4b20      	ldr	r3, [pc, #128]	@ (8000d98 <BSP_LCD_FillRect+0xa8>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4920      	ldr	r1, [pc, #128]	@ (8000d9c <BSP_LCD_FillRect+0xac>)
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	440b      	add	r3, r1
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fe5c 	bl	80009e4 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d98 <BSP_LCD_FillRect+0xa8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a1b      	ldr	r2, [pc, #108]	@ (8000da0 <BSP_LCD_FillRect+0xb0>)
 8000d32:	2134      	movs	r1, #52	@ 0x34
 8000d34:	fb01 f303 	mul.w	r3, r1, r3
 8000d38:	4413      	add	r3, r2
 8000d3a:	335c      	adds	r3, #92	@ 0x5c
 8000d3c:	681c      	ldr	r4, [r3, #0]
 8000d3e:	f7ff fe29 	bl	8000994 <BSP_LCD_GetXSize>
 8000d42:	4602      	mov	r2, r0
 8000d44:	88bb      	ldrh	r3, [r7, #4]
 8000d46:	fb03 f202 	mul.w	r2, r3, r2
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4423      	add	r3, r4
 8000d52:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8000d54:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <BSP_LCD_FillRect+0xa8>)
 8000d56:	681c      	ldr	r4, [r3, #0]
 8000d58:	68fd      	ldr	r5, [r7, #12]
 8000d5a:	887e      	ldrh	r6, [r7, #2]
 8000d5c:	f8b7 8000 	ldrh.w	r8, [r7]
 8000d60:	f7ff fe18 	bl	8000994 <BSP_LCD_GetXSize>
 8000d64:	4602      	mov	r2, r0
 8000d66:	887b      	ldrh	r3, [r7, #2]
 8000d68:	1ad1      	subs	r1, r2, r3
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <BSP_LCD_FillRect+0xa8>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	480b      	ldr	r0, [pc, #44]	@ (8000d9c <BSP_LCD_FillRect+0xac>)
 8000d70:	4613      	mov	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4413      	add	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4403      	add	r3, r0
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	9100      	str	r1, [sp, #0]
 8000d80:	4643      	mov	r3, r8
 8000d82:	4632      	mov	r2, r6
 8000d84:	4629      	mov	r1, r5
 8000d86:	4620      	mov	r0, r4
 8000d88:	f000 f984 	bl	8001094 <LL_FillBuffer>
}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d96:	bf00      	nop
 8000d98:	20000184 	.word	0x20000184
 8000d9c:	20000188 	.word	0x20000188
 8000da0:	200000c0 	.word	0x200000c0

08000da4 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d80d      	bhi.n	8000dd0 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_eval, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	2215      	movs	r2, #21
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	480a      	ldr	r0, [pc, #40]	@ (8000df4 <DSI_IO_WriteCmd+0x50>)
 8000dca:	f001 fe9c 	bl	8002b06 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  }
}
 8000dce:	e00d      	b.n	8000dec <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	9200      	str	r2, [sp, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2239      	movs	r2, #57	@ 0x39
 8000de4:	2100      	movs	r1, #0
 8000de6:	4803      	ldr	r0, [pc, #12]	@ (8000df4 <DSI_IO_WriteCmd+0x50>)
 8000de8:	f001 feaf 	bl	8002b4a <HAL_DSI_LongWrite>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000168 	.word	0x20000168

08000df8 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b34      	ldr	r3, [pc, #208]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e06:	4a33      	ldr	r2, [pc, #204]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e08:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e0e:	4b31      	ldr	r3, [pc, #196]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e12:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e24:	6253      	str	r3, [r2, #36]	@ 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8000e26:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e2c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000e30:	6253      	str	r3, [r2, #36]	@ 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	4b27      	ldr	r3, [pc, #156]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a26      	ldr	r2, [pc, #152]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b24      	ldr	r3, [pc, #144]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8000e4e:	4b21      	ldr	r3, [pc, #132]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	4a20      	ldr	r2, [pc, #128]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e58:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e60:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000e64:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6e:	4a19      	ldr	r2, [pc, #100]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e76:	4b17      	ldr	r3, [pc, #92]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8000e82:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e86:	4a13      	ldr	r2, [pc, #76]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e8c:	6253      	str	r3, [r2, #36]	@ 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8000e8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e92:	4a10      	ldr	r2, [pc, #64]	@ (8000ed4 <BSP_LCD_MspInit+0xdc>)
 8000e94:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000e98:	6253      	str	r3, [r2, #36]	@ 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2103      	movs	r1, #3
 8000e9e:	2058      	movs	r0, #88	@ 0x58
 8000ea0:	f000 fcc3 	bl	800182a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000ea4:	2058      	movs	r0, #88	@ 0x58
 8000ea6:	f000 fcdc 	bl	8001862 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2103      	movs	r1, #3
 8000eae:	205a      	movs	r0, #90	@ 0x5a
 8000eb0:	f000 fcbb 	bl	800182a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000eb4:	205a      	movs	r0, #90	@ 0x5a
 8000eb6:	f000 fcd4 	bl	8001862 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2103      	movs	r1, #3
 8000ebe:	205c      	movs	r0, #92	@ 0x5c
 8000ec0:	f000 fcb3 	bl	800182a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000ec4:	205c      	movs	r0, #92	@ 0x5c
 8000ec6:	f000 fccc 	bl	8001862 <HAL_NVIC_EnableIRQ>
}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800

08000ed8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	603a      	str	r2, [r7, #0]
 8000ee2:	80fb      	strh	r3, [r7, #6]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <BSP_LCD_DrawPixel+0x44>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0c      	ldr	r2, [pc, #48]	@ (8000f20 <BSP_LCD_DrawPixel+0x48>)
 8000eee:	2134      	movs	r1, #52	@ 0x34
 8000ef0:	fb01 f303 	mul.w	r3, r1, r3
 8000ef4:	4413      	add	r3, r2
 8000ef6:	335c      	adds	r3, #92	@ 0x5c
 8000ef8:	681c      	ldr	r4, [r3, #0]
 8000efa:	88bd      	ldrh	r5, [r7, #4]
 8000efc:	f7ff fd4a 	bl	8000994 <BSP_LCD_GetXSize>
 8000f00:	4603      	mov	r3, r0
 8000f02:	fb03 f205 	mul.w	r2, r3, r5
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	4413      	add	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4423      	add	r3, r4
 8000f0e:	461a      	mov	r2, r3
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f1c:	20000184 	.word	0x20000184
 8000f20:	200000c0 	.word	0x200000c0

08000f24 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	603a      	str	r2, [r7, #0]
 8000f2e:	80fb      	strh	r3, [r7, #6]
 8000f30:	460b      	mov	r3, r1
 8000f32:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8000f3c:	4b53      	ldr	r3, [pc, #332]	@ (800108c <DrawChar+0x168>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4953      	ldr	r1, [pc, #332]	@ (8001090 <DrawChar+0x16c>)
 8000f42:	4613      	mov	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	3308      	adds	r3, #8
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	88db      	ldrh	r3, [r3, #6]
 8000f52:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8000f54:	4b4d      	ldr	r3, [pc, #308]	@ (800108c <DrawChar+0x168>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	494d      	ldr	r1, [pc, #308]	@ (8001090 <DrawChar+0x16c>)
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4413      	add	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	440b      	add	r3, r1
 8000f64:	3308      	adds	r3, #8
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	889b      	ldrh	r3, [r3, #4]
 8000f6a:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8000f6c:	8a3b      	ldrh	r3, [r7, #16]
 8000f6e:	3307      	adds	r3, #7
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	da00      	bge.n	8000f76 <DrawChar+0x52>
 8000f74:	3307      	adds	r3, #7
 8000f76:	10db      	asrs	r3, r3, #3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	8a3b      	ldrh	r3, [r7, #16]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
 8000f8a:	e076      	b.n	800107a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8000f8c:	8a3b      	ldrh	r3, [r7, #16]
 8000f8e:	3307      	adds	r3, #7
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	da00      	bge.n	8000f96 <DrawChar+0x72>
 8000f94:	3307      	adds	r3, #7
 8000f96:	10db      	asrs	r3, r3, #3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fb02 f303 	mul.w	r3, r2, r3
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8000fa6:	8a3b      	ldrh	r3, [r7, #16]
 8000fa8:	3307      	adds	r3, #7
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	da00      	bge.n	8000fb0 <DrawChar+0x8c>
 8000fae:	3307      	adds	r3, #7
 8000fb0:	10db      	asrs	r3, r3, #3
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d002      	beq.n	8000fbc <DrawChar+0x98>
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d004      	beq.n	8000fc4 <DrawChar+0xa0>
 8000fba:	e00c      	b.n	8000fd6 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	617b      	str	r3, [r7, #20]
      break;
 8000fc2:	e016      	b.n	8000ff2 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	3201      	adds	r2, #1
 8000fce:	7812      	ldrb	r2, [r2, #0]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	617b      	str	r3, [r7, #20]
      break;
 8000fd4:	e00d      	b.n	8000ff2 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	041a      	lsls	r2, r3, #16
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	3202      	adds	r2, #2
 8000fea:	7812      	ldrb	r2, [r2, #0]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	617b      	str	r3, [r7, #20]
      break;
 8000ff0:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61bb      	str	r3, [r7, #24]
 8000ff6:	e036      	b.n	8001066 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8000ff8:	8a3a      	ldrh	r2, [r7, #16]
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	1ad2      	subs	r2, r2, r3
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	4413      	add	r3, r2
 8001002:	3b01      	subs	r3, #1
 8001004:	2201      	movs	r2, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	461a      	mov	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	4013      	ands	r3, r2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d012      	beq.n	800103a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	b29a      	uxth	r2, r3
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	4413      	add	r3, r2
 800101c:	b298      	uxth	r0, r3
 800101e:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <DrawChar+0x168>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	491b      	ldr	r1, [pc, #108]	@ (8001090 <DrawChar+0x16c>)
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	88bb      	ldrh	r3, [r7, #4]
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff ff50 	bl	8000ed8 <BSP_LCD_DrawPixel>
 8001038:	e012      	b.n	8001060 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	b29a      	uxth	r2, r3
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	4413      	add	r3, r2
 8001042:	b298      	uxth	r0, r3
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <DrawChar+0x168>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4911      	ldr	r1, [pc, #68]	@ (8001090 <DrawChar+0x16c>)
 800104a:	4613      	mov	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4413      	add	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	440b      	add	r3, r1
 8001054:	3304      	adds	r3, #4
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	88bb      	ldrh	r3, [r7, #4]
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff ff3c 	bl	8000ed8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	3301      	adds	r3, #1
 8001064:	61bb      	str	r3, [r7, #24]
 8001066:	8a3b      	ldrh	r3, [r7, #16]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	429a      	cmp	r2, r3
 800106c:	d3c4      	bcc.n	8000ff8 <DrawChar+0xd4>
      }
    }
    Ypos++;
 800106e:	88bb      	ldrh	r3, [r7, #4]
 8001070:	3301      	adds	r3, #1
 8001072:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	3301      	adds	r3, #1
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	8a7b      	ldrh	r3, [r7, #18]
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	429a      	cmp	r2, r3
 8001080:	d384      	bcc.n	8000f8c <DrawChar+0x68>
  }
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000184 	.word	0x20000184
 8001090:	20000188 	.word	0x20000188

08001094 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af02      	add	r7, sp, #8
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 80010a2:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <LL_FillBuffer+0x68>)
 80010a4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010a8:	605a      	str	r2, [r3, #4]
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 80010aa:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <LL_FillBuffer+0x68>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hdma2d_eval.Init.OutputOffset = OffLine;
 80010b0:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <LL_FillBuffer+0x68>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	60d3      	str	r3, [r2, #12]

  hdma2d_eval.Instance = DMA2D;
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <LL_FillBuffer+0x68>)
 80010b8:	4a11      	ldr	r2, [pc, #68]	@ (8001100 <LL_FillBuffer+0x6c>)
 80010ba:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 80010bc:	480f      	ldr	r0, [pc, #60]	@ (80010fc <LL_FillBuffer+0x68>)
 80010be:	f000 fda9 	bl	8001c14 <HAL_DMA2D_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d115      	bne.n	80010f4 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, LayerIndex) == HAL_OK)
 80010c8:	68f9      	ldr	r1, [r7, #12]
 80010ca:	480c      	ldr	r0, [pc, #48]	@ (80010fc <LL_FillBuffer+0x68>)
 80010cc:	f000 ff0a 	bl	8001ee4 <HAL_DMA2D_ConfigLayer>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10e      	bne.n	80010f4 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69f9      	ldr	r1, [r7, #28]
 80010e0:	4806      	ldr	r0, [pc, #24]	@ (80010fc <LL_FillBuffer+0x68>)
 80010e2:	f000 fdea 	bl	8001cba <HAL_DMA2D_Start>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d103      	bne.n	80010f4 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 80010ec:	210a      	movs	r1, #10
 80010ee:	4803      	ldr	r0, [pc, #12]	@ (80010fc <LL_FillBuffer+0x68>)
 80010f0:	f000 fe0e 	bl	8001d10 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000080 	.word	0x20000080
 8001100:	4002b000 	.word	0x4002b000

08001104 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001108:	4b29      	ldr	r3, [pc, #164]	@ (80011b0 <BSP_SDRAM_Init+0xac>)
 800110a:	4a2a      	ldr	r2, [pc, #168]	@ (80011b4 <BSP_SDRAM_Init+0xb0>)
 800110c:	601a      	str	r2, [r3, #0]

  /* Timing configuration for 90 MHz as SD clock frequency (System clock is up to 180 MHz) */
  Timing.LoadToActiveDelay    = 2;
 800110e:	4b2a      	ldr	r3, [pc, #168]	@ (80011b8 <BSP_SDRAM_Init+0xb4>)
 8001110:	2202      	movs	r2, #2
 8001112:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001114:	4b28      	ldr	r3, [pc, #160]	@ (80011b8 <BSP_SDRAM_Init+0xb4>)
 8001116:	2207      	movs	r2, #7
 8001118:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800111a:	4b27      	ldr	r3, [pc, #156]	@ (80011b8 <BSP_SDRAM_Init+0xb4>)
 800111c:	2204      	movs	r2, #4
 800111e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001120:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <BSP_SDRAM_Init+0xb4>)
 8001122:	2207      	movs	r2, #7
 8001124:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8001126:	4b24      	ldr	r3, [pc, #144]	@ (80011b8 <BSP_SDRAM_Init+0xb4>)
 8001128:	2202      	movs	r2, #2
 800112a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800112c:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <BSP_SDRAM_Init+0xb4>)
 800112e:	2202      	movs	r2, #2
 8001130:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8001132:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <BSP_SDRAM_Init+0xb4>)
 8001134:	2202      	movs	r2, #2
 8001136:	619a      	str	r2, [r3, #24]

  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001138:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <BSP_SDRAM_Init+0xac>)
 800113a:	2200      	movs	r2, #0
 800113c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <BSP_SDRAM_Init+0xac>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001144:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <BSP_SDRAM_Init+0xac>)
 8001146:	2204      	movs	r2, #4
 8001148:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800114a:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <BSP_SDRAM_Init+0xac>)
 800114c:	2220      	movs	r2, #32
 800114e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001150:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <BSP_SDRAM_Init+0xac>)
 8001152:	2240      	movs	r2, #64	@ 0x40
 8001154:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8001156:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <BSP_SDRAM_Init+0xac>)
 8001158:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800115c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800115e:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <BSP_SDRAM_Init+0xac>)
 8001160:	2200      	movs	r2, #0
 8001162:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001164:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <BSP_SDRAM_Init+0xac>)
 8001166:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800116a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800116c:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <BSP_SDRAM_Init+0xac>)
 800116e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001172:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001174:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <BSP_SDRAM_Init+0xac>)
 8001176:	2200      	movs	r2, #0
 8001178:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 800117a:	2100      	movs	r1, #0
 800117c:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <BSP_SDRAM_Init+0xac>)
 800117e:	f000 f87f 	bl	8001280 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001182:	490d      	ldr	r1, [pc, #52]	@ (80011b8 <BSP_SDRAM_Init+0xb4>)
 8001184:	480a      	ldr	r0, [pc, #40]	@ (80011b0 <BSP_SDRAM_Init+0xac>)
 8001186:	f003 fa97 	bl	80046b8 <HAL_SDRAM_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001190:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <BSP_SDRAM_Init+0xb8>)
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e002      	b.n	800119e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001198:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <BSP_SDRAM_Init+0xb8>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800119e:	f240 5069 	movw	r0, #1385	@ 0x569
 80011a2:	f000 f80d 	bl	80011c0 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 80011a6:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <BSP_SDRAM_Init+0xb8>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200001a0 	.word	0x200001a0
 80011b4:	a0000140 	.word	0xa0000140
 80011b8:	200001d4 	.word	0x200001d4
 80011bc:	20000038 	.word	0x20000038

080011c0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80011cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011d2:	4b29      	ldr	r3, [pc, #164]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011d4:	2210      	movs	r2, #16
 80011d6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80011d8:	4b27      	ldr	r3, [pc, #156]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011da:	2201      	movs	r2, #1
 80011dc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80011de:	4b26      	ldr	r3, [pc, #152]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80011e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011e8:	4923      	ldr	r1, [pc, #140]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011ea:	4824      	ldr	r0, [pc, #144]	@ (800127c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80011ec:	f003 faa2 	bl	8004734 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f000 fa1b 	bl	800162c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80011f6:	4b20      	ldr	r3, [pc, #128]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011f8:	2202      	movs	r2, #2
 80011fa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80011fe:	2210      	movs	r2, #16
 8001200:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001202:	4b1d      	ldr	r3, [pc, #116]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001204:	2201      	movs	r2, #1
 8001206:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001208:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800120e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001212:	4919      	ldr	r1, [pc, #100]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001214:	4819      	ldr	r0, [pc, #100]	@ (800127c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001216:	f003 fa8d 	bl	8004734 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800121a:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800121c:	2203      	movs	r2, #3
 800121e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001220:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001222:	2210      	movs	r2, #16
 8001224:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001226:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001228:	2208      	movs	r2, #8
 800122a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001232:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001236:	4910      	ldr	r1, [pc, #64]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001238:	4810      	ldr	r0, [pc, #64]	@ (800127c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800123a:	f003 fa7b 	bl	8004734 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800123e:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001242:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001246:	2204      	movs	r2, #4
 8001248:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800124c:	2210      	movs	r2, #16
 800124e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001252:	2201      	movs	r2, #1
 8001254:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4a07      	ldr	r2, [pc, #28]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800125a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800125c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001260:	4905      	ldr	r1, [pc, #20]	@ (8001278 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001262:	4806      	ldr	r0, [pc, #24]	@ (800127c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001264:	f003 fa66 	bl	8004734 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4804      	ldr	r0, [pc, #16]	@ (800127c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800126c:	f003 fa97 	bl	800479e <HAL_SDRAM_ProgramRefreshRate>
}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200001f0 	.word	0x200001f0
 800127c:	200001a0 	.word	0x200001a0

08001280 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b090      	sub	sp, #64	@ 0x40
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 8104 	beq.w	800149a <BSP_SDRAM_MspInit+0x21a>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001296:	4b83      	ldr	r3, [pc, #524]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 8001298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800129a:	4a82      	ldr	r2, [pc, #520]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6393      	str	r3, [r2, #56]	@ 0x38
 80012a2:	4b80      	ldr	r3, [pc, #512]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 80012a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80012b2:	4b7c      	ldr	r3, [pc, #496]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a7b      	ldr	r2, [pc, #492]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 80012b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b79      	ldr	r3, [pc, #484]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80012c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
 80012ce:	4b75      	ldr	r3, [pc, #468]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a74      	ldr	r2, [pc, #464]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b72      	ldr	r3, [pc, #456]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	623b      	str	r3, [r7, #32]
 80012e4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	4b6e      	ldr	r3, [pc, #440]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a6d      	ldr	r2, [pc, #436]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 80012f0:	f043 0308 	orr.w	r3, r3, #8
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b6b      	ldr	r3, [pc, #428]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
 8001306:	4b67      	ldr	r3, [pc, #412]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a66      	ldr	r2, [pc, #408]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 800130c:	f043 0310 	orr.w	r3, r3, #16
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b64      	ldr	r3, [pc, #400]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	61bb      	str	r3, [r7, #24]
 800131c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	4b60      	ldr	r3, [pc, #384]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a5f      	ldr	r2, [pc, #380]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 8001328:	f043 0320 	orr.w	r3, r3, #32
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b5d      	ldr	r3, [pc, #372]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0320 	and.w	r3, r3, #32
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b59      	ldr	r3, [pc, #356]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	4a58      	ldr	r2, [pc, #352]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 8001344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001348:	6313      	str	r3, [r2, #48]	@ 0x30
 800134a:	4b56      	ldr	r3, [pc, #344]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b52      	ldr	r3, [pc, #328]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a51      	ldr	r2, [pc, #324]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 8001360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b4f      	ldr	r3, [pc, #316]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	4b4b      	ldr	r3, [pc, #300]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a4a      	ldr	r2, [pc, #296]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 800137c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b48      	ldr	r3, [pc, #288]	@ (80014a4 <BSP_SDRAM_MspInit+0x224>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]

    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8001392:	2301      	movs	r3, #1
 8001394:	637b      	str	r3, [r7, #52]	@ 0x34
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001396:	2302      	movs	r3, #2
 8001398:	63bb      	str	r3, [r7, #56]	@ 0x38
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800139a:	230c      	movs	r3, #12
 800139c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
 800139e:	2301      	movs	r3, #1
 80013a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80013a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013a6:	4619      	mov	r1, r3
 80013a8:	483f      	ldr	r0, [pc, #252]	@ (80014a8 <BSP_SDRAM_MspInit+0x228>)
 80013aa:	f001 fc67 	bl	8002c7c <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80013ae:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80013b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80013b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013b8:	4619      	mov	r1, r3
 80013ba:	483c      	ldr	r0, [pc, #240]	@ (80014ac <BSP_SDRAM_MspInit+0x22c>)
 80013bc:	f001 fc5e 	bl	8002c7c <HAL_GPIO_Init>

    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80013c0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80013c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80013c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ca:	4619      	mov	r1, r3
 80013cc:	4838      	ldr	r0, [pc, #224]	@ (80014b0 <BSP_SDRAM_MspInit+0x230>)
 80013ce:	f001 fc55 	bl	8002c7c <HAL_GPIO_Init>

    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80013d2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80013d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80013d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013dc:	4619      	mov	r1, r3
 80013de:	4835      	ldr	r0, [pc, #212]	@ (80014b4 <BSP_SDRAM_MspInit+0x234>)
 80013e0:	f001 fc4c 	bl	8002c7c <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80013e4:	f248 1333 	movw	r3, #33075	@ 0x8133
 80013e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80013ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ee:	4619      	mov	r1, r3
 80013f0:	4831      	ldr	r0, [pc, #196]	@ (80014b8 <BSP_SDRAM_MspInit+0x238>)
 80013f2:	f001 fc43 	bl	8002c7c <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80013f6:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 80013fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80013fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001400:	4619      	mov	r1, r3
 8001402:	482e      	ldr	r0, [pc, #184]	@ (80014bc <BSP_SDRAM_MspInit+0x23c>)
 8001404:	f001 fc3a 	bl	8002c7c <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001408:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 800140c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800140e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001412:	4619      	mov	r1, r3
 8001414:	482a      	ldr	r0, [pc, #168]	@ (80014c0 <BSP_SDRAM_MspInit+0x240>)
 8001416:	f001 fc31 	bl	8002c7c <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800141a:	4b2a      	ldr	r3, [pc, #168]	@ (80014c4 <BSP_SDRAM_MspInit+0x244>)
 800141c:	2200      	movs	r2, #0
 800141e:	605a      	str	r2, [r3, #4]
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001420:	4b28      	ldr	r3, [pc, #160]	@ (80014c4 <BSP_SDRAM_MspInit+0x244>)
 8001422:	2280      	movs	r2, #128	@ 0x80
 8001424:	609a      	str	r2, [r3, #8]
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001426:	4b27      	ldr	r3, [pc, #156]	@ (80014c4 <BSP_SDRAM_MspInit+0x244>)
 8001428:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800142c:	60da      	str	r2, [r3, #12]
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800142e:	4b25      	ldr	r3, [pc, #148]	@ (80014c4 <BSP_SDRAM_MspInit+0x244>)
 8001430:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001434:	611a      	str	r2, [r3, #16]
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001436:	4b23      	ldr	r3, [pc, #140]	@ (80014c4 <BSP_SDRAM_MspInit+0x244>)
 8001438:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800143c:	615a      	str	r2, [r3, #20]
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800143e:	4b21      	ldr	r3, [pc, #132]	@ (80014c4 <BSP_SDRAM_MspInit+0x244>)
 8001440:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001444:	619a      	str	r2, [r3, #24]
    dma_handle.Init.Mode                = DMA_NORMAL;
 8001446:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <BSP_SDRAM_MspInit+0x244>)
 8001448:	2200      	movs	r2, #0
 800144a:	61da      	str	r2, [r3, #28]
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800144c:	4b1d      	ldr	r3, [pc, #116]	@ (80014c4 <BSP_SDRAM_MspInit+0x244>)
 800144e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001452:	621a      	str	r2, [r3, #32]
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <BSP_SDRAM_MspInit+0x244>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	@ 0x24
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800145a:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <BSP_SDRAM_MspInit+0x244>)
 800145c:	2203      	movs	r2, #3
 800145e:	629a      	str	r2, [r3, #40]	@ 0x28
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001460:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <BSP_SDRAM_MspInit+0x244>)
 8001462:	2200      	movs	r2, #0
 8001464:	62da      	str	r2, [r3, #44]	@ 0x2c
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8001466:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <BSP_SDRAM_MspInit+0x244>)
 8001468:	2200      	movs	r2, #0
 800146a:	631a      	str	r2, [r3, #48]	@ 0x30

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <BSP_SDRAM_MspInit+0x244>)
 800146e:	4a16      	ldr	r2, [pc, #88]	@ (80014c8 <BSP_SDRAM_MspInit+0x248>)
 8001470:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a13      	ldr	r2, [pc, #76]	@ (80014c4 <BSP_SDRAM_MspInit+0x244>)
 8001476:	631a      	str	r2, [r3, #48]	@ 0x30
 8001478:	4a12      	ldr	r2, [pc, #72]	@ (80014c4 <BSP_SDRAM_MspInit+0x244>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 800147e:	4811      	ldr	r0, [pc, #68]	@ (80014c4 <BSP_SDRAM_MspInit+0x244>)
 8001480:	f000 fab8 	bl	80019f4 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 8001484:	480f      	ldr	r0, [pc, #60]	@ (80014c4 <BSP_SDRAM_MspInit+0x244>)
 8001486:	f000 fa07 	bl	8001898 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2105      	movs	r1, #5
 800148e:	2038      	movs	r0, #56	@ 0x38
 8001490:	f000 f9cb 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001494:	2038      	movs	r0, #56	@ 0x38
 8001496:	f000 f9e4 	bl	8001862 <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800149a:	bf00      	nop
 800149c:	3740      	adds	r7, #64	@ 0x40
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020c00 	.word	0x40020c00
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40021400 	.word	0x40021400
 80014b8:	40021800 	.word	0x40021800
 80014bc:	40021c00 	.word	0x40021c00
 80014c0:	40022000 	.word	0x40022000
 80014c4:	20000200 	.word	0x20000200
 80014c8:	40026410 	.word	0x40026410

080014cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d0:	4b16      	ldr	r3, [pc, #88]	@ (800152c <SystemInit+0x60>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d6:	4a15      	ldr	r2, [pc, #84]	@ (800152c <SystemInit+0x60>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80014e0:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <SystemInit+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a12      	ldr	r2, [pc, #72]	@ (8001530 <SystemInit+0x64>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014ec:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <SystemInit+0x64>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80014f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <SystemInit+0x64>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001530 <SystemInit+0x64>)
 80014f8:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 80014fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001500:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001502:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <SystemInit+0x64>)
 8001504:	4a0b      	ldr	r2, [pc, #44]	@ (8001534 <SystemInit+0x68>)
 8001506:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001508:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <SystemInit+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a08      	ldr	r2, [pc, #32]	@ (8001530 <SystemInit+0x64>)
 800150e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001512:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001514:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <SystemInit+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800151a:	4b04      	ldr	r3, [pc, #16]	@ (800152c <SystemInit+0x60>)
 800151c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001520:	609a      	str	r2, [r3, #8]
#endif
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00
 8001530:	40023800 	.word	0x40023800
 8001534:	24003010 	.word	0x24003010

08001538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800153c:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <HAL_Init+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0d      	ldr	r2, [pc, #52]	@ (8001578 <HAL_Init+0x40>)
 8001542:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001548:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <HAL_Init+0x40>)
 800154e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a07      	ldr	r2, [pc, #28]	@ (8001578 <HAL_Init+0x40>)
 800155a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800155e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001560:	2003      	movs	r0, #3
 8001562:	f000 f957 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001566:	200f      	movs	r0, #15
 8001568:	f000 f810 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800156c:	f000 f806 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023c00 	.word	0x40023c00

0800157c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001594:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <HAL_InitTick+0x54>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <HAL_InitTick+0x58>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f967 	bl	800187e <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00e      	b.n	80015d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d80a      	bhi.n	80015d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f000 f92f 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015cc:	4a06      	ldr	r2, [pc, #24]	@ (80015e8 <HAL_InitTick+0x5c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000003c 	.word	0x2000003c
 80015e4:	20000044 	.word	0x20000044
 80015e8:	20000040 	.word	0x20000040

080015ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_IncTick+0x20>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_IncTick+0x24>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <HAL_IncTick+0x24>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000044 	.word	0x20000044
 8001610:	20000260 	.word	0x20000260

08001614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return uwTick;
 8001618:	4b03      	ldr	r3, [pc, #12]	@ (8001628 <HAL_GetTick+0x14>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000260 	.word	0x20000260

0800162c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff ffee 	bl	8001614 <HAL_GetTick>
 8001638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001644:	d005      	beq.n	8001652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_Delay+0x44>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001652:	bf00      	nop
 8001654:	f7ff ffde 	bl	8001614 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	429a      	cmp	r2, r3
 8001662:	d8f7      	bhi.n	8001654 <HAL_Delay+0x28>
  {
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000044 	.word	0x20000044

08001674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	@ (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	db0b      	blt.n	8001702 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	4907      	ldr	r1, [pc, #28]	@ (8001710 <__NVIC_EnableIRQ+0x38>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	2001      	movs	r0, #1
 80016fa:	fa00 f202 	lsl.w	r2, r0, r2
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	@ (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	@ (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	@ 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	@ 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff8e 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff29 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff3e 	bl	80016bc <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff8e 	bl	8001768 <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5d 	bl	8001714 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff31 	bl	80016d8 <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa2 	bl	80017d0 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff feb6 	bl	8001614 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e099      	b.n	80019e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d4:	e00f      	b.n	80018f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018d6:	f7ff fe9d 	bl	8001614 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d908      	bls.n	80018f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2220      	movs	r2, #32
 80018e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2203      	movs	r2, #3
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e078      	b.n	80019e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1e8      	bne.n	80018d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	4b38      	ldr	r3, [pc, #224]	@ (80019f0 <HAL_DMA_Init+0x158>)
 8001910:	4013      	ands	r3, r2
 8001912:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001922:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800192e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4313      	orrs	r3, r2
 8001946:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194c:	2b04      	cmp	r3, #4
 800194e:	d107      	bne.n	8001960 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001958:	4313      	orrs	r3, r2
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4313      	orrs	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f023 0307 	bic.w	r3, r3, #7
 8001976:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	4313      	orrs	r3, r2
 8001980:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001986:	2b04      	cmp	r3, #4
 8001988:	d117      	bne.n	80019ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4313      	orrs	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00e      	beq.n	80019ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f8bd 	bl	8001b1c <DMA_CheckFifoParam>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2240      	movs	r2, #64	@ 0x40
 80019ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80019b6:	2301      	movs	r3, #1
 80019b8:	e016      	b.n	80019e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f874 	bl	8001ab0 <DMA_CalcBaseAndBitshift>
 80019c8:	4603      	mov	r3, r0
 80019ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d0:	223f      	movs	r2, #63	@ 0x3f
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	f010803f 	.word	0xf010803f

080019f4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e050      	b.n	8001aa8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d101      	bne.n	8001a16 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001a12:	2302      	movs	r3, #2
 8001a14:	e048      	b.n	8001aa8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2200      	movs	r2, #0
 8001a34:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2221      	movs	r2, #33	@ 0x21
 8001a54:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f82a 	bl	8001ab0 <DMA_CalcBaseAndBitshift>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a88:	223f      	movs	r2, #63	@ 0x3f
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	3b10      	subs	r3, #16
 8001ac0:	4a14      	ldr	r2, [pc, #80]	@ (8001b14 <DMA_CalcBaseAndBitshift+0x64>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	091b      	lsrs	r3, r3, #4
 8001ac8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001aca:	4a13      	ldr	r2, [pc, #76]	@ (8001b18 <DMA_CalcBaseAndBitshift+0x68>)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d909      	bls.n	8001af2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ae6:	f023 0303 	bic.w	r3, r3, #3
 8001aea:	1d1a      	adds	r2, r3, #4
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	659a      	str	r2, [r3, #88]	@ 0x58
 8001af0:	e007      	b.n	8001b02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001afa:	f023 0303 	bic.w	r3, r3, #3
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	aaaaaaab 	.word	0xaaaaaaab
 8001b18:	08007b14 	.word	0x08007b14

08001b1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d11f      	bne.n	8001b76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d856      	bhi.n	8001bea <DMA_CheckFifoParam+0xce>
 8001b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b44 <DMA_CheckFifoParam+0x28>)
 8001b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b42:	bf00      	nop
 8001b44:	08001b55 	.word	0x08001b55
 8001b48:	08001b67 	.word	0x08001b67
 8001b4c:	08001b55 	.word	0x08001b55
 8001b50:	08001beb 	.word	0x08001beb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d046      	beq.n	8001bee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b64:	e043      	b.n	8001bee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b6e:	d140      	bne.n	8001bf2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b74:	e03d      	b.n	8001bf2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b7e:	d121      	bne.n	8001bc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d837      	bhi.n	8001bf6 <DMA_CheckFifoParam+0xda>
 8001b86:	a201      	add	r2, pc, #4	@ (adr r2, 8001b8c <DMA_CheckFifoParam+0x70>)
 8001b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8c:	08001b9d 	.word	0x08001b9d
 8001b90:	08001ba3 	.word	0x08001ba3
 8001b94:	08001b9d 	.word	0x08001b9d
 8001b98:	08001bb5 	.word	0x08001bb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001ba0:	e030      	b.n	8001c04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d025      	beq.n	8001bfa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bb2:	e022      	b.n	8001bfa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001bbc:	d11f      	bne.n	8001bfe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bc2:	e01c      	b.n	8001bfe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d903      	bls.n	8001bd2 <DMA_CheckFifoParam+0xb6>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d003      	beq.n	8001bd8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bd0:	e018      	b.n	8001c04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd6:	e015      	b.n	8001c04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00e      	beq.n	8001c02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
      break;
 8001be8:	e00b      	b.n	8001c02 <DMA_CheckFifoParam+0xe6>
      break;
 8001bea:	bf00      	nop
 8001bec:	e00a      	b.n	8001c04 <DMA_CheckFifoParam+0xe8>
      break;
 8001bee:	bf00      	nop
 8001bf0:	e008      	b.n	8001c04 <DMA_CheckFifoParam+0xe8>
      break;
 8001bf2:	bf00      	nop
 8001bf4:	e006      	b.n	8001c04 <DMA_CheckFifoParam+0xe8>
      break;
 8001bf6:	bf00      	nop
 8001bf8:	e004      	b.n	8001c04 <DMA_CheckFifoParam+0xe8>
      break;
 8001bfa:	bf00      	nop
 8001bfc:	e002      	b.n	8001c04 <DMA_CheckFifoParam+0xe8>
      break;   
 8001bfe:	bf00      	nop
 8001c00:	e000      	b.n	8001c04 <DMA_CheckFifoParam+0xe8>
      break;
 8001c02:	bf00      	nop
    }
  } 
  
  return status; 
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop

08001c14 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e03b      	b.n	8001c9e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d106      	bne.n	8001c40 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f833 	bl	8001ca6 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2202      	movs	r2, #2
 8001c44:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c64:	f023 0107 	bic.w	r1, r3, #7
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c7e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68d1      	ldr	r1, [r2, #12]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af02      	add	r7, sp, #8
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_DMA2D_Start+0x1c>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e018      	b.n	8001d08 <HAL_DMA2D_Start+0x4e>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	68b9      	ldr	r1, [r7, #8]
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 f989 	bl	8002008 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 0201 	orr.w	r2, r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d056      	beq.n	8001dda <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d2c:	f7ff fc72 	bl	8001614 <HAL_GetTick>
 8001d30:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001d32:	e04b      	b.n	8001dcc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d023      	beq.n	8001d8e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f003 0320 	and.w	r3, r3, #32
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d54:	f043 0202 	orr.w	r2, r3, #2
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d005      	beq.n	8001d72 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d6a:	f043 0201 	orr.w	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2221      	movs	r2, #33	@ 0x21
 8001d78:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0a5      	b.n	8001eda <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d01a      	beq.n	8001dcc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d96:	f7ff fc3d 	bl	8001614 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d302      	bcc.n	8001dac <HAL_DMA2D_PollForTransfer+0x9c>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10f      	bne.n	8001dcc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db0:	f043 0220 	orr.w	r2, r3, #32
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2203      	movs	r2, #3
 8001dbc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e086      	b.n	8001eda <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0ac      	beq.n	8001d34 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	f003 0320 	and.w	r3, r3, #32
 8001de4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d061      	beq.n	8001ec0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dfc:	f7ff fc0a 	bl	8001614 <HAL_GetTick>
 8001e00:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001e02:	e056      	b.n	8001eb2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d02e      	beq.n	8001e74 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e24:	f043 0204 	orr.w	r2, r3, #4
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0320 	and.w	r3, r3, #32
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d005      	beq.n	8001e42 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e3a:	f043 0202 	orr.w	r2, r3, #2
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e50:	f043 0201 	orr.w	r2, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2229      	movs	r2, #41	@ 0x29
 8001e5e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2204      	movs	r2, #4
 8001e64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e032      	b.n	8001eda <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7a:	d01a      	beq.n	8001eb2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e7c:	f7ff fbca 	bl	8001614 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d302      	bcc.n	8001e92 <HAL_DMA2D_PollForTransfer+0x182>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10f      	bne.n	8001eb2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e96:	f043 0220 	orr.w	r2, r3, #32
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e013      	b.n	8001eda <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0a1      	beq.n	8001e04 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2212      	movs	r2, #18
 8001ec6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_DMA2D_ConfigLayer+0x20>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e079      	b.n	8001ff8 <HAL_DMA2D_ConfigLayer+0x114>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	3318      	adds	r3, #24
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	041b      	lsls	r3, r3, #16
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001f2e:	4b35      	ldr	r3, [pc, #212]	@ (8002004 <HAL_DMA2D_ConfigLayer+0x120>)
 8001f30:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b0a      	cmp	r3, #10
 8001f38:	d003      	beq.n	8001f42 <HAL_DMA2D_ConfigLayer+0x5e>
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b09      	cmp	r3, #9
 8001f40:	d107      	bne.n	8001f52 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e005      	b.n	8001f5e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	061b      	lsls	r3, r3, #24
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d120      	bne.n	8001fa6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	ea02 0103 	and.w	r1, r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b0a      	cmp	r3, #10
 8001f8c:	d003      	beq.n	8001f96 <HAL_DMA2D_ConfigLayer+0xb2>
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b09      	cmp	r3, #9
 8001f94:	d127      	bne.n	8001fe6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001fa2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fa4:	e01f      	b.n	8001fe6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	69da      	ldr	r2, [r3, #28]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	ea02 0103 	and.w	r1, r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b0a      	cmp	r3, #10
 8001fce:	d003      	beq.n	8001fd8 <HAL_DMA2D_ConfigLayer+0xf4>
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b09      	cmp	r3, #9
 8001fd6:	d106      	bne.n	8001fe6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001fe4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	371c      	adds	r7, #28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	ff03000f 	.word	0xff03000f

08002008 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002008:	b480      	push	{r7}
 800200a:	b08b      	sub	sp, #44	@ 0x2c
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	041a      	lsls	r2, r3, #16
 8002024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002026:	431a      	orrs	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002040:	d174      	bne.n	800212c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002048:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002050:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002058:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d108      	bne.n	800207a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	431a      	orrs	r2, r3
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	4313      	orrs	r3, r2
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	4313      	orrs	r3, r2
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
 8002078:	e053      	b.n	8002122 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d106      	bne.n	8002090 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	4313      	orrs	r3, r2
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4313      	orrs	r3, r2
 800208c:	627b      	str	r3, [r7, #36]	@ 0x24
 800208e:	e048      	b.n	8002122 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d111      	bne.n	80020bc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	0cdb      	lsrs	r3, r3, #19
 800209c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	0a9b      	lsrs	r3, r3, #10
 80020a2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	08db      	lsrs	r3, r3, #3
 80020a8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	02db      	lsls	r3, r3, #11
 80020b2:	4313      	orrs	r3, r2
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ba:	e032      	b.n	8002122 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d117      	bne.n	80020f4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	0fdb      	lsrs	r3, r3, #31
 80020c8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	0cdb      	lsrs	r3, r3, #19
 80020ce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	0adb      	lsrs	r3, r3, #11
 80020d4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	08db      	lsrs	r3, r3, #3
 80020da:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	029b      	lsls	r3, r3, #10
 80020e4:	431a      	orrs	r2, r3
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	03db      	lsls	r3, r3, #15
 80020ea:	4313      	orrs	r3, r2
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80020f2:	e016      	b.n	8002122 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	0f1b      	lsrs	r3, r3, #28
 80020f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	0d1b      	lsrs	r3, r3, #20
 80020fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	0b1b      	lsrs	r3, r3, #12
 8002104:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	011a      	lsls	r2, r3, #4
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	431a      	orrs	r2, r3
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	031b      	lsls	r3, r3, #12
 800211a:	4313      	orrs	r3, r2
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	4313      	orrs	r3, r2
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002128:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800212a:	e003      	b.n	8002134 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	60da      	str	r2, [r3, #12]
}
 8002134:	bf00      	nop
 8002136:	372c      	adds	r7, #44	@ 0x2c
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	019a      	lsls	r2, r3, #6
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	431a      	orrs	r2, r3
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	431a      	orrs	r2, r3
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	041b      	lsls	r3, r3, #16
 8002160:	431a      	orrs	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002180:	f7ff fa48 	bl	8001614 <HAL_GetTick>
 8002184:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002186:	e009      	b.n	800219c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002188:	f7ff fa44 	bl	8001614 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002196:	d901      	bls.n	800219c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e015      	b.n	80021c8 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0ee      	beq.n	8002188 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	019a      	lsls	r2, r3, #6
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	ea42 0103 	orr.w	r1, r2, r3
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	041a      	lsls	r2, r3, #16
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e10b      	b.n	80023fc <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	7c5b      	ldrb	r3, [r3, #17]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d102      	bne.n	80021f4 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f97e 	bl	80024f0 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2203      	movs	r2, #3
 80021f8:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800220e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800221a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002222:	f7ff f9f7 	bl	8001614 <HAL_GetTick>
 8002226:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002228:	e009      	b.n	800223e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800222a:	f7ff f9f3 	bl	8001614 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002238:	d901      	bls.n	800223e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e0de      	b.n	80023fc <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002246:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0ed      	beq.n	800222a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 800225e:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8002262:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800227a:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002282:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80022b6:	2001      	movs	r0, #1
 80022b8:	f7ff f9b8 	bl	800162c <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80022bc:	f7ff f9aa 	bl	8001614 <HAL_GetTick>
 80022c0:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80022c2:	e009      	b.n	80022d8 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80022c4:	f7ff f9a6 	bl	8001614 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022d2:	d901      	bls.n	80022d8 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e091      	b.n	80023fc <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80022e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0ed      	beq.n	80022c4 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0206 	orr.w	r2, r2, #6
 80022f8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0203 	bic.w	r2, r2, #3
 800230c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0203 	bic.w	r2, r2, #3
 800233a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002362:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6899      	ldr	r1, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <HAL_DSI_Init+0x1b4>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	e000      	b.n	8002386 <HAL_DSI_Init+0x1b6>
 8002384:	2301      	movs	r3, #1
 8002386:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	4a1e      	ldr	r2, [pc, #120]	@ (8002404 <HAL_DSI_Init+0x234>)
 800238c:	fb03 f202 	mul.w	r2, r3, r2
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	409a      	lsls	r2, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80023bc:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2200      	movs	r2, #0
 80023da:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3720      	adds	r7, #32
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	003d0900 	.word	0x003d0900

08002408 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e066      	b.n	80024e8 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2203      	movs	r2, #3
 800241e:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0208 	bic.w	r2, r2, #8
 8002434:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0201 	bic.w	r2, r2, #1
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0206 	bic.w	r2, r2, #6
 800247a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80024ba:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80024c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f818 	bl	8002504 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00f      	beq.n	8002550 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2201      	movs	r2, #1
 8002546:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f002 fb42 	bl	8004bd4 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00f      	beq.n	8002580 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d007      	beq.n	8002580 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2202      	movs	r2, #2
 8002576:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f002 fb3e 	bl	8004bfc <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 808c 	beq.w	80026a2 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002592:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4013      	ands	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025aa:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	4013      	ands	r3, r2
 80025b8:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	f043 0202 	orr.w	r2, r3, #2
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f043 0204 	orr.w	r2, r3, #4
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f043 0208 	orr.w	r2, r3, #8
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f043 0210 	orr.w	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f043 0220 	orr.w	r2, r3, #32
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f003 0320 	and.w	r3, r3, #32
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f804 	bl	80026aa <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7c1b      	ldrb	r3, [r3, #16]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e0c5      	b.n	8002860 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0201 	orr.w	r2, r2, #1
 80026e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0201 	orr.w	r2, r2, #1
 800270e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0203 	bic.w	r2, r2, #3
 8002720:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68d9      	ldr	r1, [r3, #12]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0207 	bic.w	r2, r2, #7
 8002742:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6959      	ldr	r1, [r3, #20]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	69da      	ldr	r2, [r3, #28]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	431a      	orrs	r2, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 020f 	bic.w	r2, r2, #15
 8002770:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6919      	ldr	r1, [r3, #16]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 020e 	bic.w	r2, r2, #14
 8002794:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	005a      	lsls	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	0c1b      	lsrs	r3, r3, #16
 80027bc:	041b      	lsls	r3, r3, #16
 80027be:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80027e2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0201 	orr.w	r2, r2, #1
 8002840:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0202 	orr.w	r2, r2, #2
 8002854:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	7c1b      	ldrb	r3, [r3, #16]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_DSI_ConfigCommand+0x16>
 800287e:	2302      	movs	r3, #2
 8002880:	e049      	b.n	8002916 <HAL_DSI_ConfigCommand+0xaa>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4b24      	ldr	r3, [pc, #144]	@ (8002924 <HAL_DSI_ConfigCommand+0xb8>)
 8002894:	400b      	ands	r3, r1
 8002896:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80028a6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80028ac:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80028b2:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80028b8:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80028be:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80028c4:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80028ca:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80028d0:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80028d6:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80028dc:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80028e2:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0202 	bic.w	r2, r2, #2
 80028fa:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	fef080ff 	.word	0xfef080ff

08002928 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	7c1b      	ldrb	r3, [r3, #16]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_DSI_ConfigFlowControl+0x16>
 800293a:	2302      	movs	r3, #2
 800293c:	e016      	b.n	800296c <HAL_DSI_ConfigFlowControl+0x44>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 021f 	bic.w	r2, r2, #31
 8002952:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7c1b      	ldrb	r3, [r3, #16]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_DSI_ConfigPhyTimer+0x16>
 800298a:	2302      	movs	r3, #2
 800298c:	e058      	b.n	8002a40 <HAL_DSI_ConfigPhyTimer+0xc8>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4293      	cmp	r3, r2
 800299e:	bf38      	it	cc
 80029a0:	4613      	movcc	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80029b4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	041a      	lsls	r2, r3, #16
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80029e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	041b      	lsls	r3, r3, #16
 80029f8:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002a1c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	021a      	lsls	r2, r3, #8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	7c1b      	ldrb	r3, [r3, #16]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_DSI_Start+0x14>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e02b      	b.n	8002ab8 <HAL_DSI_Start+0x6c>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0201 	orr.w	r2, r2, #1
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0208 	orr.w	r2, r2, #8
 8002a9c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_DSI_Refresh>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7c1b      	ldrb	r3, [r3, #16]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_DSI_Refresh+0x14>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e010      	b.n	8002afa <HAL_DSI_Refresh+0x36>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	741a      	strb	r2, [r3, #16]

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0204 	orr.w	r2, r2, #4
 8002aee:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b088      	sub	sp, #32
 8002b0a:	af02      	add	r7, sp, #8
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	7c1b      	ldrb	r3, [r3, #16]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_DSI_ShortWrite+0x1a>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e010      	b.n	8002b42 <HAL_DSI_ShortWrite+0x3c>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f7ff fb1e 	bl	8002172 <DSI_ShortWrite>
 8002b36:	4603      	mov	r3, r0
 8002b38:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	741a      	strb	r2, [r3, #16]

  return status;
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b08c      	sub	sp, #48	@ 0x30
 8002b4e:	af02      	add	r7, sp, #8
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8002b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5a:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	7c1b      	ldrb	r3, [r3, #16]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_DSI_LongWrite+0x1e>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e084      	b.n	8002c72 <HAL_DSI_LongWrite+0x128>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b6e:	f7fe fd51 	bl	8001614 <HAL_GetTick>
 8002b72:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002b74:	e00c      	b.n	8002b90 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002b76:	f7fe fd4d 	bl	8001614 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b84:	d904      	bls.n	8002b90 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e070      	b.n	8002c72 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0eb      	beq.n	8002b76 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba0:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	bf28      	it	cs
 8002ba8:	2303      	movcs	r3, #3
 8002baa:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	623b      	str	r3, [r7, #32]
 8002bb0:	e00f      	b.n	8002bd2 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	623b      	str	r3, [r7, #32]
 8002bd2:	6a3a      	ldr	r2, [r7, #32]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d3eb      	bcc.n	8002bb2 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69fa      	ldr	r2, [r7, #28]
 8002be0:	671a      	str	r2, [r3, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24
  pparams += nbBytes;
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8002bf2:	e028      	b.n	8002c46 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	bf28      	it	cs
 8002bfa:	2304      	movcs	r3, #4
 8002bfc:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002c02:	2300      	movs	r3, #0
 8002c04:	623b      	str	r3, [r7, #32]
 8002c06:	e00e      	b.n	8002c26 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	3301      	adds	r3, #1
 8002c24:	623b      	str	r3, [r7, #32]
 8002c26:	6a3a      	ldr	r2, [r7, #32]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d3ec      	bcc.n	8002c08 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	671a      	str	r2, [r3, #112]	@ 0x70

    uicounter -= nbBytes;
 8002c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    pparams += nbBytes;
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4413      	add	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1d3      	bne.n	8002bf4 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002c54:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	f7ff fa6b 	bl	8002140 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3728      	adds	r7, #40	@ 0x28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	@ 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	e177      	b.n	8002f88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c98:	2201      	movs	r2, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	f040 8166 	bne.w	8002f82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d005      	beq.n	8002cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d130      	bne.n	8002d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	2203      	movs	r2, #3
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d04:	2201      	movs	r2, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 0201 	and.w	r2, r3, #1
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d017      	beq.n	8002d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	2203      	movs	r2, #3
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d123      	bne.n	8002dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	08da      	lsrs	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3208      	adds	r2, #8
 8002d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	220f      	movs	r2, #15
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	08da      	lsrs	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3208      	adds	r2, #8
 8002dba:	69b9      	ldr	r1, [r7, #24]
 8002dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2203      	movs	r2, #3
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0203 	and.w	r2, r3, #3
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80c0 	beq.w	8002f82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	4b66      	ldr	r3, [pc, #408]	@ (8002fa0 <HAL_GPIO_Init+0x324>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0a:	4a65      	ldr	r2, [pc, #404]	@ (8002fa0 <HAL_GPIO_Init+0x324>)
 8002e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e12:	4b63      	ldr	r3, [pc, #396]	@ (8002fa0 <HAL_GPIO_Init+0x324>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e1e:	4a61      	ldr	r2, [pc, #388]	@ (8002fa4 <HAL_GPIO_Init+0x328>)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	3302      	adds	r3, #2
 8002e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	220f      	movs	r2, #15
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a58      	ldr	r2, [pc, #352]	@ (8002fa8 <HAL_GPIO_Init+0x32c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d037      	beq.n	8002eba <HAL_GPIO_Init+0x23e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a57      	ldr	r2, [pc, #348]	@ (8002fac <HAL_GPIO_Init+0x330>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d031      	beq.n	8002eb6 <HAL_GPIO_Init+0x23a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a56      	ldr	r2, [pc, #344]	@ (8002fb0 <HAL_GPIO_Init+0x334>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d02b      	beq.n	8002eb2 <HAL_GPIO_Init+0x236>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a55      	ldr	r2, [pc, #340]	@ (8002fb4 <HAL_GPIO_Init+0x338>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d025      	beq.n	8002eae <HAL_GPIO_Init+0x232>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a54      	ldr	r2, [pc, #336]	@ (8002fb8 <HAL_GPIO_Init+0x33c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d01f      	beq.n	8002eaa <HAL_GPIO_Init+0x22e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a53      	ldr	r2, [pc, #332]	@ (8002fbc <HAL_GPIO_Init+0x340>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d019      	beq.n	8002ea6 <HAL_GPIO_Init+0x22a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a52      	ldr	r2, [pc, #328]	@ (8002fc0 <HAL_GPIO_Init+0x344>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_GPIO_Init+0x226>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a51      	ldr	r2, [pc, #324]	@ (8002fc4 <HAL_GPIO_Init+0x348>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00d      	beq.n	8002e9e <HAL_GPIO_Init+0x222>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a50      	ldr	r2, [pc, #320]	@ (8002fc8 <HAL_GPIO_Init+0x34c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d007      	beq.n	8002e9a <HAL_GPIO_Init+0x21e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a4f      	ldr	r2, [pc, #316]	@ (8002fcc <HAL_GPIO_Init+0x350>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d101      	bne.n	8002e96 <HAL_GPIO_Init+0x21a>
 8002e92:	2309      	movs	r3, #9
 8002e94:	e012      	b.n	8002ebc <HAL_GPIO_Init+0x240>
 8002e96:	230a      	movs	r3, #10
 8002e98:	e010      	b.n	8002ebc <HAL_GPIO_Init+0x240>
 8002e9a:	2308      	movs	r3, #8
 8002e9c:	e00e      	b.n	8002ebc <HAL_GPIO_Init+0x240>
 8002e9e:	2307      	movs	r3, #7
 8002ea0:	e00c      	b.n	8002ebc <HAL_GPIO_Init+0x240>
 8002ea2:	2306      	movs	r3, #6
 8002ea4:	e00a      	b.n	8002ebc <HAL_GPIO_Init+0x240>
 8002ea6:	2305      	movs	r3, #5
 8002ea8:	e008      	b.n	8002ebc <HAL_GPIO_Init+0x240>
 8002eaa:	2304      	movs	r3, #4
 8002eac:	e006      	b.n	8002ebc <HAL_GPIO_Init+0x240>
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e004      	b.n	8002ebc <HAL_GPIO_Init+0x240>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e002      	b.n	8002ebc <HAL_GPIO_Init+0x240>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_GPIO_Init+0x240>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	69fa      	ldr	r2, [r7, #28]
 8002ebe:	f002 0203 	and.w	r2, r2, #3
 8002ec2:	0092      	lsls	r2, r2, #2
 8002ec4:	4093      	lsls	r3, r2
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ecc:	4935      	ldr	r1, [pc, #212]	@ (8002fa4 <HAL_GPIO_Init+0x328>)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	089b      	lsrs	r3, r3, #2
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eda:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd0 <HAL_GPIO_Init+0x354>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002efe:	4a34      	ldr	r2, [pc, #208]	@ (8002fd0 <HAL_GPIO_Init+0x354>)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f04:	4b32      	ldr	r3, [pc, #200]	@ (8002fd0 <HAL_GPIO_Init+0x354>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f28:	4a29      	ldr	r2, [pc, #164]	@ (8002fd0 <HAL_GPIO_Init+0x354>)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f2e:	4b28      	ldr	r3, [pc, #160]	@ (8002fd0 <HAL_GPIO_Init+0x354>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f52:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd0 <HAL_GPIO_Init+0x354>)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f58:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd0 <HAL_GPIO_Init+0x354>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f7c:	4a14      	ldr	r2, [pc, #80]	@ (8002fd0 <HAL_GPIO_Init+0x354>)
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3301      	adds	r3, #1
 8002f86:	61fb      	str	r3, [r7, #28]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	f67f ae84 	bls.w	8002c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	3724      	adds	r7, #36	@ 0x24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40013800 	.word	0x40013800
 8002fa8:	40020000 	.word	0x40020000
 8002fac:	40020400 	.word	0x40020400
 8002fb0:	40020800 	.word	0x40020800
 8002fb4:	40020c00 	.word	0x40020c00
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40021400 	.word	0x40021400
 8002fc0:	40021800 	.word	0x40021800
 8002fc4:	40021c00 	.word	0x40021c00
 8002fc8:	40022000 	.word	0x40022000
 8002fcc:	40022400 	.word	0x40022400
 8002fd0:	40013c00 	.word	0x40013c00

08002fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	807b      	strh	r3, [r7, #2]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe4:	787b      	ldrb	r3, [r7, #1]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ff0:	e003      	b.n	8002ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ff2:	887b      	ldrh	r3, [r7, #2]
 8002ff4:	041a      	lsls	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	619a      	str	r2, [r3, #24]
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e0bf      	b.n	800319a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f911 	bl	8003256 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800304a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6999      	ldr	r1, [r3, #24]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003060:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6899      	ldr	r1, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4b4a      	ldr	r3, [pc, #296]	@ (80031a4 <HAL_LTDC_Init+0x19c>)
 800307c:	400b      	ands	r3, r1
 800307e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6899      	ldr	r1, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68d9      	ldr	r1, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b3e      	ldr	r3, [pc, #248]	@ (80031a4 <HAL_LTDC_Init+0x19c>)
 80030aa:	400b      	ands	r3, r1
 80030ac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	041b      	lsls	r3, r3, #16
 80030b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68d9      	ldr	r1, [r3, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1a      	ldr	r2, [r3, #32]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6919      	ldr	r1, [r3, #16]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4b33      	ldr	r3, [pc, #204]	@ (80031a4 <HAL_LTDC_Init+0x19c>)
 80030d8:	400b      	ands	r3, r1
 80030da:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	041b      	lsls	r3, r3, #16
 80030e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6919      	ldr	r1, [r3, #16]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6959      	ldr	r1, [r3, #20]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4b27      	ldr	r3, [pc, #156]	@ (80031a4 <HAL_LTDC_Init+0x19c>)
 8003106:	400b      	ands	r3, r1
 8003108:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310e:	041b      	lsls	r3, r3, #16
 8003110:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6959      	ldr	r1, [r3, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800312e:	021b      	lsls	r3, r3, #8
 8003130:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003138:	041b      	lsls	r3, r3, #16
 800313a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800314a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0206 	orr.w	r2, r2, #6
 8003176:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	f000f800 	.word	0xf000f800

080031a8 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_LTDC_DeInit+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e049      	b.n	800324e <HAL_LTDC_DeInit+0xa6>

  /* Check function parameters */
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));

  /* Disable LTDC Layer 1 */
  __HAL_LTDC_LAYER_DISABLE(hltdc, LTDC_LAYER_1);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3384      	adds	r3, #132	@ 0x84
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	3284      	adds	r2, #132	@ 0x84
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	6013      	str	r3, [r2, #0]

#if defined(LTDC_Layer2_BASE)
  /* Disable LTDC Layer 2 */
  __HAL_LTDC_LAYER_DISABLE(hltdc, LTDC_LAYER_2);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	6013      	str	r3, [r2, #0]
#endif /* LTDC_Layer2_BASE */

  /* Reload during vertical blanking period */
  __HAL_LTDC_VERTICAL_BLANKING_RELOAD_CONFIG(hltdc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0202 	orr.w	r2, r2, #2
 80031f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Get tick */
  tickstart = HAL_GetTick();
 80031f6:	f7fe fa0d 	bl	8001614 <HAL_GetTick>
 80031fa:	60f8      	str	r0, [r7, #12]

  /* Wait for VSYNC Interrupt */
  while (READ_BIT(hltdc->Instance->CDSR, LTDC_CDSR_VSYNCS) == 0U)
 80031fc:	e006      	b.n	800320c <HAL_LTDC_DeInit+0x64>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > LTDC_TIMEOUT_VALUE)
 80031fe:	f7fe fa09 	bl	8001614 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b64      	cmp	r3, #100	@ 0x64
 800320a:	d807      	bhi.n	800321c <HAL_LTDC_DeInit+0x74>
  while (READ_BIT(hltdc->Instance->CDSR, LTDC_CDSR_VSYNCS) == 0U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f1      	beq.n	80031fe <HAL_LTDC_DeInit+0x56>
 800321a:	e000      	b.n	800321e <HAL_LTDC_DeInit+0x76>
    {
      break;
 800321c:	bf00      	nop
    }
  }

  /* Disable LTDC  */
  __HAL_LTDC_DISABLE(hltdc);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699a      	ldr	r2, [r3, #24]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	619a      	str	r2, [r3, #24]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f81b 	bl	800326a <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_LTDC_MspDeInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspDeInit could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003294:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d023      	beq.n	80032e8 <HAL_LTDC_IRQHandler+0x6a>
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d01e      	beq.n	80032e8 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0204 	bic.w	r2, r2, #4
 80032b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2204      	movs	r2, #4
 80032c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80032c8:	f043 0201 	orr.w	r2, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2204      	movs	r2, #4
 80032d6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f86f 	bl	80033c6 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d023      	beq.n	800333a <HAL_LTDC_IRQHandler+0xbc>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01e      	beq.n	800333a <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0202 	bic.w	r2, r2, #2
 800330a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2202      	movs	r2, #2
 8003312:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800331a:	f043 0202 	orr.w	r2, r3, #2
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2204      	movs	r2, #4
 8003328:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f846 	bl	80033c6 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01b      	beq.n	800337c <HAL_LTDC_IRQHandler+0xfe>
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0201 	bic.w	r2, r2, #1
 800335c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2201      	movs	r2, #1
 8003364:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f82f 	bl	80033da <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d01b      	beq.n	80033be <HAL_LTDC_IRQHandler+0x140>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d016      	beq.n	80033be <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0208 	bic.w	r2, r2, #8
 800339e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2208      	movs	r2, #8
 80033a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f818 	bl	80033ee <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003402:	b5b0      	push	{r4, r5, r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_LTDC_ConfigLayer+0x1a>
 8003418:	2302      	movs	r3, #2
 800341a:	e02c      	b.n	8003476 <HAL_LTDC_ConfigLayer+0x74>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2134      	movs	r1, #52	@ 0x34
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	4413      	add	r3, r2
 8003438:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4614      	mov	r4, r2
 8003440:	461d      	mov	r5, r3
 8003442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800344a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800344c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800344e:	682b      	ldr	r3, [r5, #0]
 8003450:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f898 	bl	800358c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2201      	movs	r2, #1
 8003462:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003480 <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 8003480:	b480      	push	{r7}
 8003482:	b089      	sub	sp, #36	@ 0x24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_LTDC_SetPitch+0x1a>
 8003496:	2302      	movs	r3, #2
 8003498:	e06f      	b.n	800357a <HAL_LTDC_SetPitch+0xfa>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2202      	movs	r2, #2
 80034a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2134      	movs	r1, #52	@ 0x34
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	3348      	adds	r3, #72	@ 0x48
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 80034c2:	2304      	movs	r3, #4
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	e016      	b.n	80034f6 <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d102      	bne.n	80034d4 <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 80034ce:	2303      	movs	r3, #3
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	e010      	b.n	80034f6 <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d008      	beq.n	80034ec <HAL_LTDC_SetPitch+0x6c>
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d005      	beq.n	80034ec <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d002      	beq.n	80034ec <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2b07      	cmp	r3, #7
 80034ea:	d102      	bne.n	80034f2 <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 80034ec:	2302      	movs	r3, #2
 80034ee:	61fb      	str	r3, [r7, #28]
 80034f0:	e001      	b.n	80034f6 <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 80034f2:	2301      	movs	r3, #1
 80034f4:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	fb02 f303 	mul.w	r3, r2, r3
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	01db      	lsls	r3, r3, #7
 800350c:	4413      	add	r3, r2
 800350e:	3384      	adds	r3, #132	@ 0x84
 8003510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	4611      	mov	r1, r2
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	01d2      	lsls	r2, r2, #7
 800351c:	440a      	add	r2, r1
 800351e:	3284      	adds	r2, #132	@ 0x84
 8003520:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003524:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003528:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800352a:	4b17      	ldr	r3, [pc, #92]	@ (8003588 <HAL_LTDC_SetPitch+0x108>)
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	4a16      	ldr	r2, [pc, #88]	@ (8003588 <HAL_LTDC_SetPitch+0x108>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	01db      	lsls	r3, r3, #7
 8003540:	4413      	add	r3, r2
 8003542:	3384      	adds	r3, #132	@ 0x84
 8003544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4619      	mov	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	01db      	lsls	r3, r3, #7
 8003550:	440b      	add	r3, r1
 8003552:	3384      	adds	r3, #132	@ 0x84
 8003554:	4619      	mov	r1, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800355c:	4b0a      	ldr	r3, [pc, #40]	@ (8003588 <HAL_LTDC_SetPitch+0x108>)
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	4a09      	ldr	r2, [pc, #36]	@ (8003588 <HAL_LTDC_SetPitch+0x108>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3724      	adds	r7, #36	@ 0x24
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40016800 	.word	0x40016800

0800358c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800358c:	b480      	push	{r7}
 800358e:	b089      	sub	sp, #36	@ 0x24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	0c1b      	lsrs	r3, r3, #16
 80035a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a8:	4413      	add	r3, r2
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	01db      	lsls	r3, r3, #7
 80035b8:	4413      	add	r3, r2
 80035ba:	3384      	adds	r3, #132	@ 0x84
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	4611      	mov	r1, r2
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	01d2      	lsls	r2, r2, #7
 80035c8:	440a      	add	r2, r1
 80035ca:	3284      	adds	r2, #132	@ 0x84
 80035cc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80035d0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80035e2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80035e4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4619      	mov	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	01db      	lsls	r3, r3, #7
 80035f0:	440b      	add	r3, r1
 80035f2:	3384      	adds	r3, #132	@ 0x84
 80035f4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80035fa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800360a:	4413      	add	r3, r2
 800360c:	041b      	lsls	r3, r3, #16
 800360e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	01db      	lsls	r3, r3, #7
 800361a:	4413      	add	r3, r2
 800361c:	3384      	adds	r3, #132	@ 0x84
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	4611      	mov	r1, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	01d2      	lsls	r2, r2, #7
 800362a:	440a      	add	r2, r1
 800362c:	3284      	adds	r2, #132	@ 0x84
 800362e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003632:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003642:	4413      	add	r3, r2
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4619      	mov	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	01db      	lsls	r3, r3, #7
 8003650:	440b      	add	r3, r1
 8003652:	3384      	adds	r3, #132	@ 0x84
 8003654:	4619      	mov	r1, r3
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	4313      	orrs	r3, r2
 800365a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	01db      	lsls	r3, r3, #7
 8003666:	4413      	add	r3, r2
 8003668:	3384      	adds	r3, #132	@ 0x84
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	4611      	mov	r1, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	01d2      	lsls	r2, r2, #7
 8003676:	440a      	add	r2, r1
 8003678:	3284      	adds	r2, #132	@ 0x84
 800367a:	f023 0307 	bic.w	r3, r3, #7
 800367e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	01db      	lsls	r3, r3, #7
 800368a:	4413      	add	r3, r2
 800368c:	3384      	adds	r3, #132	@ 0x84
 800368e:	461a      	mov	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80036a6:	041b      	lsls	r3, r3, #16
 80036a8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	061b      	lsls	r3, r3, #24
 80036b0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	01db      	lsls	r3, r3, #7
 80036bc:	4413      	add	r3, r2
 80036be:	3384      	adds	r3, #132	@ 0x84
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	01db      	lsls	r3, r3, #7
 80036cc:	4413      	add	r3, r2
 80036ce:	3384      	adds	r3, #132	@ 0x84
 80036d0:	461a      	mov	r2, r3
 80036d2:	2300      	movs	r3, #0
 80036d4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80036dc:	461a      	mov	r2, r3
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	431a      	orrs	r2, r3
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4619      	mov	r1, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	01db      	lsls	r3, r3, #7
 80036f0:	440b      	add	r3, r1
 80036f2:	3384      	adds	r3, #132	@ 0x84
 80036f4:	4619      	mov	r1, r3
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	01db      	lsls	r3, r3, #7
 8003706:	4413      	add	r3, r2
 8003708:	3384      	adds	r3, #132	@ 0x84
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	4611      	mov	r1, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	01d2      	lsls	r2, r2, #7
 8003716:	440a      	add	r2, r1
 8003718:	3284      	adds	r2, #132	@ 0x84
 800371a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800371e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	01db      	lsls	r3, r3, #7
 800372a:	4413      	add	r3, r2
 800372c:	3384      	adds	r3, #132	@ 0x84
 800372e:	461a      	mov	r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	01db      	lsls	r3, r3, #7
 8003740:	4413      	add	r3, r2
 8003742:	3384      	adds	r3, #132	@ 0x84
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	4611      	mov	r1, r2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	01d2      	lsls	r2, r2, #7
 8003750:	440a      	add	r2, r1
 8003752:	3284      	adds	r2, #132	@ 0x84
 8003754:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003758:	f023 0307 	bic.w	r3, r3, #7
 800375c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	69da      	ldr	r2, [r3, #28]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	68f9      	ldr	r1, [r7, #12]
 8003768:	6809      	ldr	r1, [r1, #0]
 800376a:	4608      	mov	r0, r1
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	01c9      	lsls	r1, r1, #7
 8003770:	4401      	add	r1, r0
 8003772:	3184      	adds	r1, #132	@ 0x84
 8003774:	4313      	orrs	r3, r2
 8003776:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	01db      	lsls	r3, r3, #7
 8003782:	4413      	add	r3, r2
 8003784:	3384      	adds	r3, #132	@ 0x84
 8003786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	01db      	lsls	r3, r3, #7
 8003792:	4413      	add	r3, r2
 8003794:	3384      	adds	r3, #132	@ 0x84
 8003796:	461a      	mov	r2, r3
 8003798:	2300      	movs	r3, #0
 800379a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	01db      	lsls	r3, r3, #7
 80037a6:	4413      	add	r3, r2
 80037a8:	3384      	adds	r3, #132	@ 0x84
 80037aa:	461a      	mov	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80037ba:	2304      	movs	r3, #4
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	e01b      	b.n	80037f8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d102      	bne.n	80037ce <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80037c8:	2303      	movs	r3, #3
 80037ca:	61fb      	str	r3, [r7, #28]
 80037cc:	e014      	b.n	80037f8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d00b      	beq.n	80037ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d007      	beq.n	80037ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d003      	beq.n	80037ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80037ea:	2b07      	cmp	r3, #7
 80037ec:	d102      	bne.n	80037f4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80037ee:	2302      	movs	r3, #2
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	e001      	b.n	80037f8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80037f4:	2301      	movs	r3, #1
 80037f6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	01db      	lsls	r3, r3, #7
 8003802:	4413      	add	r3, r2
 8003804:	3384      	adds	r3, #132	@ 0x84
 8003806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	4611      	mov	r1, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	01d2      	lsls	r2, r2, #7
 8003812:	440a      	add	r2, r1
 8003814:	3284      	adds	r2, #132	@ 0x84
 8003816:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800381a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	fb02 f303 	mul.w	r3, r2, r3
 8003826:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	6859      	ldr	r1, [r3, #4]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	1acb      	subs	r3, r1, r3
 8003832:	69f9      	ldr	r1, [r7, #28]
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800383a:	68f9      	ldr	r1, [r7, #12]
 800383c:	6809      	ldr	r1, [r1, #0]
 800383e:	4608      	mov	r0, r1
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	01c9      	lsls	r1, r1, #7
 8003844:	4401      	add	r1, r0
 8003846:	3184      	adds	r1, #132	@ 0x84
 8003848:	4313      	orrs	r3, r2
 800384a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	01db      	lsls	r3, r3, #7
 8003856:	4413      	add	r3, r2
 8003858:	3384      	adds	r3, #132	@ 0x84
 800385a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	4611      	mov	r1, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	01d2      	lsls	r2, r2, #7
 8003866:	440a      	add	r2, r1
 8003868:	3284      	adds	r2, #132	@ 0x84
 800386a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800386e:	f023 0307 	bic.w	r3, r3, #7
 8003872:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	01db      	lsls	r3, r3, #7
 800387e:	4413      	add	r3, r2
 8003880:	3384      	adds	r3, #132	@ 0x84
 8003882:	461a      	mov	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003888:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	01db      	lsls	r3, r3, #7
 8003894:	4413      	add	r3, r2
 8003896:	3384      	adds	r3, #132	@ 0x84
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	6812      	ldr	r2, [r2, #0]
 800389e:	4611      	mov	r1, r2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	01d2      	lsls	r2, r2, #7
 80038a4:	440a      	add	r2, r1
 80038a6:	3284      	adds	r2, #132	@ 0x84
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	6013      	str	r3, [r2, #0]
}
 80038ae:	bf00      	nop
 80038b0:	3724      	adds	r7, #36	@ 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	603b      	str	r3, [r7, #0]
 80038ca:	4b20      	ldr	r3, [pc, #128]	@ (800394c <HAL_PWREx_EnableOverDrive+0x90>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	4a1f      	ldr	r2, [pc, #124]	@ (800394c <HAL_PWREx_EnableOverDrive+0x90>)
 80038d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038d6:	4b1d      	ldr	r3, [pc, #116]	@ (800394c <HAL_PWREx_EnableOverDrive+0x90>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003950 <HAL_PWREx_EnableOverDrive+0x94>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038e8:	f7fd fe94 	bl	8001614 <HAL_GetTick>
 80038ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038ee:	e009      	b.n	8003904 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038f0:	f7fd fe90 	bl	8001614 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038fe:	d901      	bls.n	8003904 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e01f      	b.n	8003944 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003904:	4b13      	ldr	r3, [pc, #76]	@ (8003954 <HAL_PWREx_EnableOverDrive+0x98>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800390c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003910:	d1ee      	bne.n	80038f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003912:	4b11      	ldr	r3, [pc, #68]	@ (8003958 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003914:	2201      	movs	r2, #1
 8003916:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003918:	f7fd fe7c 	bl	8001614 <HAL_GetTick>
 800391c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800391e:	e009      	b.n	8003934 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003920:	f7fd fe78 	bl	8001614 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800392e:	d901      	bls.n	8003934 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e007      	b.n	8003944 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003934:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <HAL_PWREx_EnableOverDrive+0x98>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003940:	d1ee      	bne.n	8003920 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40023800 	.word	0x40023800
 8003950:	420e0040 	.word	0x420e0040
 8003954:	40007000 	.word	0x40007000
 8003958:	420e0044 	.word	0x420e0044

0800395c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0cc      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003970:	4b68      	ldr	r3, [pc, #416]	@ (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 030f 	and.w	r3, r3, #15
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d90c      	bls.n	8003998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b65      	ldr	r3, [pc, #404]	@ (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003986:	4b63      	ldr	r3, [pc, #396]	@ (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0b8      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d020      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b0:	4b59      	ldr	r3, [pc, #356]	@ (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4a58      	ldr	r2, [pc, #352]	@ (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039c8:	4b53      	ldr	r3, [pc, #332]	@ (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	4a52      	ldr	r2, [pc, #328]	@ (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d4:	4b50      	ldr	r3, [pc, #320]	@ (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	494d      	ldr	r1, [pc, #308]	@ (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d044      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d107      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fa:	4b47      	ldr	r3, [pc, #284]	@ (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d119      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e07f      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d003      	beq.n	8003a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d107      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e06f      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e067      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a3a:	4b37      	ldr	r3, [pc, #220]	@ (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f023 0203 	bic.w	r2, r3, #3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4934      	ldr	r1, [pc, #208]	@ (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a4c:	f7fd fde2 	bl	8001614 <HAL_GetTick>
 8003a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a54:	f7fd fdde 	bl	8001614 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e04f      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 020c 	and.w	r2, r3, #12
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d1eb      	bne.n	8003a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7c:	4b25      	ldr	r3, [pc, #148]	@ (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d20c      	bcs.n	8003aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8a:	4b22      	ldr	r3, [pc, #136]	@ (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a92:	4b20      	ldr	r3, [pc, #128]	@ (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e032      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab0:	4b19      	ldr	r3, [pc, #100]	@ (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4916      	ldr	r1, [pc, #88]	@ (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d009      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ace:	4b12      	ldr	r3, [pc, #72]	@ (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	490e      	ldr	r1, [pc, #56]	@ (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ae2:	f000 f821 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	490a      	ldr	r1, [pc, #40]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003af4:	5ccb      	ldrb	r3, [r1, r3]
 8003af6:	fa22 f303 	lsr.w	r3, r2, r3
 8003afa:	4a09      	ldr	r2, [pc, #36]	@ (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003afe:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <HAL_RCC_ClockConfig+0x1c8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd fd42 	bl	800158c <HAL_InitTick>

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40023c00 	.word	0x40023c00
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	08007b04 	.word	0x08007b04
 8003b20:	2000003c 	.word	0x2000003c
 8003b24:	20000040 	.word	0x20000040

08003b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b2c:	b094      	sub	sp, #80	@ 0x50
 8003b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b34:	2300      	movs	r3, #0
 8003b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b38:	2300      	movs	r3, #0
 8003b3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b40:	4b79      	ldr	r3, [pc, #484]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 030c 	and.w	r3, r3, #12
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d00d      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0x40>
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	f200 80e1 	bhi.w	8003d14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <HAL_RCC_GetSysClockFreq+0x34>
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d003      	beq.n	8003b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b5a:	e0db      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b5c:	4b73      	ldr	r3, [pc, #460]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003b60:	e0db      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b62:	4b73      	ldr	r3, [pc, #460]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b66:	e0d8      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b68:	4b6f      	ldr	r3, [pc, #444]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b70:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b72:	4b6d      	ldr	r3, [pc, #436]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d063      	beq.n	8003c46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7e:	4b6a      	ldr	r3, [pc, #424]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	099b      	lsrs	r3, r3, #6
 8003b84:	2200      	movs	r2, #0
 8003b86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b90:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b92:	2300      	movs	r3, #0
 8003b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b9a:	4622      	mov	r2, r4
 8003b9c:	462b      	mov	r3, r5
 8003b9e:	f04f 0000 	mov.w	r0, #0
 8003ba2:	f04f 0100 	mov.w	r1, #0
 8003ba6:	0159      	lsls	r1, r3, #5
 8003ba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bac:	0150      	lsls	r0, r2, #5
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	1a51      	subs	r1, r2, r1
 8003bb6:	6139      	str	r1, [r7, #16]
 8003bb8:	4629      	mov	r1, r5
 8003bba:	eb63 0301 	sbc.w	r3, r3, r1
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bcc:	4659      	mov	r1, fp
 8003bce:	018b      	lsls	r3, r1, #6
 8003bd0:	4651      	mov	r1, sl
 8003bd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bd6:	4651      	mov	r1, sl
 8003bd8:	018a      	lsls	r2, r1, #6
 8003bda:	4651      	mov	r1, sl
 8003bdc:	ebb2 0801 	subs.w	r8, r2, r1
 8003be0:	4659      	mov	r1, fp
 8003be2:	eb63 0901 	sbc.w	r9, r3, r1
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bfa:	4690      	mov	r8, r2
 8003bfc:	4699      	mov	r9, r3
 8003bfe:	4623      	mov	r3, r4
 8003c00:	eb18 0303 	adds.w	r3, r8, r3
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	462b      	mov	r3, r5
 8003c08:	eb49 0303 	adc.w	r3, r9, r3
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	024b      	lsls	r3, r1, #9
 8003c1e:	4621      	mov	r1, r4
 8003c20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c24:	4621      	mov	r1, r4
 8003c26:	024a      	lsls	r2, r1, #9
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c2e:	2200      	movs	r2, #0
 8003c30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c38:	f7fc fadc 	bl	80001f4 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4613      	mov	r3, r2
 8003c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c44:	e058      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c46:	4b38      	ldr	r3, [pc, #224]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	099b      	lsrs	r3, r3, #6
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	4611      	mov	r1, r2
 8003c52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c56:	623b      	str	r3, [r7, #32]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c60:	4642      	mov	r2, r8
 8003c62:	464b      	mov	r3, r9
 8003c64:	f04f 0000 	mov.w	r0, #0
 8003c68:	f04f 0100 	mov.w	r1, #0
 8003c6c:	0159      	lsls	r1, r3, #5
 8003c6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c72:	0150      	lsls	r0, r2, #5
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4641      	mov	r1, r8
 8003c7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c7e:	4649      	mov	r1, r9
 8003c80:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c98:	ebb2 040a 	subs.w	r4, r2, sl
 8003c9c:	eb63 050b 	sbc.w	r5, r3, fp
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	00eb      	lsls	r3, r5, #3
 8003caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cae:	00e2      	lsls	r2, r4, #3
 8003cb0:	4614      	mov	r4, r2
 8003cb2:	461d      	mov	r5, r3
 8003cb4:	4643      	mov	r3, r8
 8003cb6:	18e3      	adds	r3, r4, r3
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	464b      	mov	r3, r9
 8003cbc:	eb45 0303 	adc.w	r3, r5, r3
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cce:	4629      	mov	r1, r5
 8003cd0:	028b      	lsls	r3, r1, #10
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cd8:	4621      	mov	r1, r4
 8003cda:	028a      	lsls	r2, r1, #10
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	61fa      	str	r2, [r7, #28]
 8003ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cec:	f7fc fa82 	bl	80001f4 <__aeabi_uldivmod>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	0c1b      	lsrs	r3, r3, #16
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	3301      	adds	r3, #1
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003d08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d12:	e002      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d14:	4b05      	ldr	r3, [pc, #20]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3750      	adds	r7, #80	@ 0x50
 8003d20:	46bd      	mov	sp, r7
 8003d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	00f42400 	.word	0x00f42400
 8003d30:	007a1200 	.word	0x007a1200

08003d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d5c:	4b66      	ldr	r3, [pc, #408]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d62:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d6a:	4963      	ldr	r1, [pc, #396]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003d7e:	4b5e      	ldr	r3, [pc, #376]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d84:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8c:	495a      	ldr	r1, [pc, #360]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10b      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d105      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d075      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003db8:	4b50      	ldr	r3, [pc, #320]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dbe:	f7fd fc29 	bl	8001614 <HAL_GetTick>
 8003dc2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003dc6:	f7fd fc25 	bl	8001614 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e1dc      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dd8:	4b47      	ldr	r3, [pc, #284]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f0      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d009      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	019a      	lsls	r2, r3, #6
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	071b      	lsls	r3, r3, #28
 8003dfc:	493e      	ldr	r1, [pc, #248]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01f      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e10:	4b39      	ldr	r3, [pc, #228]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e16:	0f1b      	lsrs	r3, r3, #28
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	019a      	lsls	r2, r3, #6
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	061b      	lsls	r3, r3, #24
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	071b      	lsls	r3, r3, #28
 8003e30:	4931      	ldr	r1, [pc, #196]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e38:	4b2f      	ldr	r3, [pc, #188]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e3e:	f023 021f 	bic.w	r2, r3, #31
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	492b      	ldr	r1, [pc, #172]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00d      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	019a      	lsls	r2, r3, #6
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	061b      	lsls	r3, r3, #24
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	071b      	lsls	r3, r3, #28
 8003e70:	4921      	ldr	r1, [pc, #132]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e78:	4b20      	ldr	r3, [pc, #128]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e7e:	f7fd fbc9 	bl	8001614 <HAL_GetTick>
 8003e82:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e86:	f7fd fbc5 	bl	8001614 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e17c      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e98:	4b17      	ldr	r3, [pc, #92]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d112      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10c      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80ce 	beq.w	8004066 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8003ece:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ed2:	f040 80c8 	bne.w	8004066 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003edc:	f7fd fb9a 	bl	8001614 <HAL_GetTick>
 8003ee0:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ee2:	e00f      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003ee4:	f7fd fb96 	bl	8001614 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d908      	bls.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e14d      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003ef6:	bf00      	nop
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	42470068 	.word	0x42470068
 8003f00:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f04:	4ba5      	ldr	r3, [pc, #660]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f10:	d0e8      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d02e      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003f1e:	4b9f      	ldr	r3, [pc, #636]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f24:	0c1b      	lsrs	r3, r3, #16
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f30:	4b9a      	ldr	r3, [pc, #616]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f36:	0f1b      	lsrs	r3, r3, #28
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	019a      	lsls	r2, r3, #6
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	085b      	lsrs	r3, r3, #1
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	041b      	lsls	r3, r3, #16
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	061b      	lsls	r3, r3, #24
 8003f54:	431a      	orrs	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	071b      	lsls	r3, r3, #28
 8003f5a:	4990      	ldr	r1, [pc, #576]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f62:	4b8e      	ldr	r3, [pc, #568]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f68:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	3b01      	subs	r3, #1
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	4989      	ldr	r1, [pc, #548]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d02c      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003f88:	4b84      	ldr	r3, [pc, #528]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8e:	0c1b      	lsrs	r3, r3, #16
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	3301      	adds	r3, #1
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f9a:	4b80      	ldr	r3, [pc, #512]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa0:	0e1b      	lsrs	r3, r3, #24
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	019a      	lsls	r2, r3, #6
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	041b      	lsls	r3, r3, #16
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	061b      	lsls	r3, r3, #24
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	071b      	lsls	r3, r3, #28
 8003fc4:	4975      	ldr	r1, [pc, #468]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003fcc:	4b73      	ldr	r3, [pc, #460]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fd2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fda:	4970      	ldr	r1, [pc, #448]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d024      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8003ff2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ff6:	d11f      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ff8:	4b68      	ldr	r3, [pc, #416]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffe:	0e1b      	lsrs	r3, r3, #24
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004006:	4b65      	ldr	r3, [pc, #404]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400c:	0f1b      	lsrs	r3, r3, #28
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	019a      	lsls	r2, r3, #6
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	085b      	lsrs	r3, r3, #1
 8004020:	3b01      	subs	r3, #1
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	431a      	orrs	r2, r3
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	061b      	lsls	r3, r3, #24
 800402a:	431a      	orrs	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	071b      	lsls	r3, r3, #28
 8004030:	495a      	ldr	r1, [pc, #360]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004038:	4b59      	ldr	r3, [pc, #356]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800403e:	f7fd fae9 	bl	8001614 <HAL_GetTick>
 8004042:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004046:	f7fd fae5 	bl	8001614 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e09c      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004058:	4b50      	ldr	r3, [pc, #320]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004060:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004064:	d1ef      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 8083 	beq.w	800417a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004074:	2300      	movs	r3, #0
 8004076:	60bb      	str	r3, [r7, #8]
 8004078:	4b48      	ldr	r3, [pc, #288]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800407a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407c:	4a47      	ldr	r2, [pc, #284]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800407e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004082:	6413      	str	r3, [r2, #64]	@ 0x40
 8004084:	4b45      	ldr	r3, [pc, #276]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004090:	4b44      	ldr	r3, [pc, #272]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a43      	ldr	r2, [pc, #268]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800409a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800409c:	f7fd faba 	bl	8001614 <HAL_GetTick>
 80040a0:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040a4:	f7fd fab6 	bl	8001614 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e06d      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040b6:	4b3b      	ldr	r3, [pc, #236]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040c2:	4b36      	ldr	r3, [pc, #216]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ca:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d02f      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d028      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040e0:	4b2e      	ldr	r3, [pc, #184]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80040e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040e8:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040ea:	4b2f      	ldr	r3, [pc, #188]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040f0:	4b2d      	ldr	r3, [pc, #180]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040f6:	4a29      	ldr	r2, [pc, #164]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040fc:	4b27      	ldr	r3, [pc, #156]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b01      	cmp	r3, #1
 8004106:	d114      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004108:	f7fd fa84 	bl	8001614 <HAL_GetTick>
 800410c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410e:	e00a      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004110:	f7fd fa80 	bl	8001614 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e035      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004126:	4b1d      	ldr	r3, [pc, #116]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0ee      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800413a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800413e:	d10d      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004140:	4b16      	ldr	r3, [pc, #88]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004154:	4911      	ldr	r1, [pc, #68]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
 800415a:	e005      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800415c:	4b0f      	ldr	r3, [pc, #60]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a0e      	ldr	r2, [pc, #56]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004162:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004166:	6093      	str	r3, [r2, #8]
 8004168:	4b0c      	ldr	r3, [pc, #48]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800416a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004174:	4909      	ldr	r1, [pc, #36]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004176:	4313      	orrs	r3, r2
 8004178:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	2b00      	cmp	r3, #0
 8004184:	d004      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800418c:	4b07      	ldr	r3, [pc, #28]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800418e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40023800 	.word	0x40023800
 80041a0:	42470070 	.word	0x42470070
 80041a4:	40007000 	.word	0x40007000
 80041a8:	42470e40 	.word	0x42470e40
 80041ac:	424711e0 	.word	0x424711e0

080041b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e273      	b.n	80046aa <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d075      	beq.n	80042ba <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041ce:	4b88      	ldr	r3, [pc, #544]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d00c      	beq.n	80041f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041da:	4b85      	ldr	r3, [pc, #532]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d112      	bne.n	800420c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041e6:	4b82      	ldr	r3, [pc, #520]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041f2:	d10b      	bne.n	800420c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f4:	4b7e      	ldr	r3, [pc, #504]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d05b      	beq.n	80042b8 <HAL_RCC_OscConfig+0x108>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d157      	bne.n	80042b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e24e      	b.n	80046aa <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004214:	d106      	bne.n	8004224 <HAL_RCC_OscConfig+0x74>
 8004216:	4b76      	ldr	r3, [pc, #472]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a75      	ldr	r2, [pc, #468]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 800421c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	e01d      	b.n	8004260 <HAL_RCC_OscConfig+0xb0>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800422c:	d10c      	bne.n	8004248 <HAL_RCC_OscConfig+0x98>
 800422e:	4b70      	ldr	r3, [pc, #448]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a6f      	ldr	r2, [pc, #444]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 8004234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	4b6d      	ldr	r3, [pc, #436]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a6c      	ldr	r2, [pc, #432]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 8004240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e00b      	b.n	8004260 <HAL_RCC_OscConfig+0xb0>
 8004248:	4b69      	ldr	r3, [pc, #420]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a68      	ldr	r2, [pc, #416]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 800424e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	4b66      	ldr	r3, [pc, #408]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a65      	ldr	r2, [pc, #404]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 800425a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800425e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d013      	beq.n	8004290 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fd f9d4 	bl	8001614 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004270:	f7fd f9d0 	bl	8001614 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	@ 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e213      	b.n	80046aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004282:	4b5b      	ldr	r3, [pc, #364]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0xc0>
 800428e:	e014      	b.n	80042ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004290:	f7fd f9c0 	bl	8001614 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004298:	f7fd f9bc 	bl	8001614 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	@ 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e1ff      	b.n	80046aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042aa:	4b51      	ldr	r3, [pc, #324]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0xe8>
 80042b6:	e000      	b.n	80042ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d063      	beq.n	800438e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042c6:	4b4a      	ldr	r3, [pc, #296]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00b      	beq.n	80042ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042d2:	4b47      	ldr	r3, [pc, #284]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d11c      	bne.n	8004318 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042de:	4b44      	ldr	r3, [pc, #272]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d116      	bne.n	8004318 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ea:	4b41      	ldr	r3, [pc, #260]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d005      	beq.n	8004302 <HAL_RCC_OscConfig+0x152>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d001      	beq.n	8004302 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e1d3      	b.n	80046aa <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004302:	4b3b      	ldr	r3, [pc, #236]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	4937      	ldr	r1, [pc, #220]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 8004312:	4313      	orrs	r3, r2
 8004314:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004316:	e03a      	b.n	800438e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d020      	beq.n	8004362 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004320:	4b34      	ldr	r3, [pc, #208]	@ (80043f4 <HAL_RCC_OscConfig+0x244>)
 8004322:	2201      	movs	r2, #1
 8004324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004326:	f7fd f975 	bl	8001614 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800432e:	f7fd f971 	bl	8001614 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e1b4      	b.n	80046aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004340:	4b2b      	ldr	r3, [pc, #172]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434c:	4b28      	ldr	r3, [pc, #160]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4925      	ldr	r1, [pc, #148]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 800435c:	4313      	orrs	r3, r2
 800435e:	600b      	str	r3, [r1, #0]
 8004360:	e015      	b.n	800438e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004362:	4b24      	ldr	r3, [pc, #144]	@ (80043f4 <HAL_RCC_OscConfig+0x244>)
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fd f954 	bl	8001614 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004370:	f7fd f950 	bl	8001614 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e193      	b.n	80046aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004382:	4b1b      	ldr	r3, [pc, #108]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d036      	beq.n	8004408 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d016      	beq.n	80043d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043a2:	4b15      	ldr	r3, [pc, #84]	@ (80043f8 <HAL_RCC_OscConfig+0x248>)
 80043a4:	2201      	movs	r2, #1
 80043a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a8:	f7fd f934 	bl	8001614 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b0:	f7fd f930 	bl	8001614 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e173      	b.n	80046aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c2:	4b0b      	ldr	r3, [pc, #44]	@ (80043f0 <HAL_RCC_OscConfig+0x240>)
 80043c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0x200>
 80043ce:	e01b      	b.n	8004408 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043d0:	4b09      	ldr	r3, [pc, #36]	@ (80043f8 <HAL_RCC_OscConfig+0x248>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d6:	f7fd f91d 	bl	8001614 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043dc:	e00e      	b.n	80043fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043de:	f7fd f919 	bl	8001614 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d907      	bls.n	80043fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e15c      	b.n	80046aa <HAL_RCC_OscConfig+0x4fa>
 80043f0:	40023800 	.word	0x40023800
 80043f4:	42470000 	.word	0x42470000
 80043f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043fc:	4b8a      	ldr	r3, [pc, #552]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 80043fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1ea      	bne.n	80043de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8097 	beq.w	8004544 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004416:	2300      	movs	r3, #0
 8004418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800441a:	4b83      	ldr	r3, [pc, #524]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10f      	bne.n	8004446 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004426:	2300      	movs	r3, #0
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	4b7f      	ldr	r3, [pc, #508]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	4a7e      	ldr	r2, [pc, #504]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 8004430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004434:	6413      	str	r3, [r2, #64]	@ 0x40
 8004436:	4b7c      	ldr	r3, [pc, #496]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800443e:	60bb      	str	r3, [r7, #8]
 8004440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004442:	2301      	movs	r3, #1
 8004444:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004446:	4b79      	ldr	r3, [pc, #484]	@ (800462c <HAL_RCC_OscConfig+0x47c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800444e:	2b00      	cmp	r3, #0
 8004450:	d118      	bne.n	8004484 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004452:	4b76      	ldr	r3, [pc, #472]	@ (800462c <HAL_RCC_OscConfig+0x47c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a75      	ldr	r2, [pc, #468]	@ (800462c <HAL_RCC_OscConfig+0x47c>)
 8004458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800445c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800445e:	f7fd f8d9 	bl	8001614 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004466:	f7fd f8d5 	bl	8001614 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e118      	b.n	80046aa <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004478:	4b6c      	ldr	r3, [pc, #432]	@ (800462c <HAL_RCC_OscConfig+0x47c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d106      	bne.n	800449a <HAL_RCC_OscConfig+0x2ea>
 800448c:	4b66      	ldr	r3, [pc, #408]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004490:	4a65      	ldr	r2, [pc, #404]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	6713      	str	r3, [r2, #112]	@ 0x70
 8004498:	e01c      	b.n	80044d4 <HAL_RCC_OscConfig+0x324>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b05      	cmp	r3, #5
 80044a0:	d10c      	bne.n	80044bc <HAL_RCC_OscConfig+0x30c>
 80044a2:	4b61      	ldr	r3, [pc, #388]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a6:	4a60      	ldr	r2, [pc, #384]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 80044a8:	f043 0304 	orr.w	r3, r3, #4
 80044ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ae:	4b5e      	ldr	r3, [pc, #376]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b2:	4a5d      	ldr	r2, [pc, #372]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ba:	e00b      	b.n	80044d4 <HAL_RCC_OscConfig+0x324>
 80044bc:	4b5a      	ldr	r3, [pc, #360]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 80044be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c0:	4a59      	ldr	r2, [pc, #356]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 80044c2:	f023 0301 	bic.w	r3, r3, #1
 80044c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044c8:	4b57      	ldr	r3, [pc, #348]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 80044ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044cc:	4a56      	ldr	r2, [pc, #344]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 80044ce:	f023 0304 	bic.w	r3, r3, #4
 80044d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d015      	beq.n	8004508 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044dc:	f7fd f89a 	bl	8001614 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e2:	e00a      	b.n	80044fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e4:	f7fd f896 	bl	8001614 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e0d7      	b.n	80046aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0ee      	beq.n	80044e4 <HAL_RCC_OscConfig+0x334>
 8004506:	e014      	b.n	8004532 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004508:	f7fd f884 	bl	8001614 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800450e:	e00a      	b.n	8004526 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004510:	f7fd f880 	bl	8001614 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e0c1      	b.n	80046aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004526:	4b40      	ldr	r3, [pc, #256]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 8004528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1ee      	bne.n	8004510 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004532:	7dfb      	ldrb	r3, [r7, #23]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d105      	bne.n	8004544 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004538:	4b3b      	ldr	r3, [pc, #236]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 800453a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453c:	4a3a      	ldr	r2, [pc, #232]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 800453e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004542:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80ad 	beq.w	80046a8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800454e:	4b36      	ldr	r3, [pc, #216]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b08      	cmp	r3, #8
 8004558:	d060      	beq.n	800461c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d145      	bne.n	80045ee <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004562:	4b33      	ldr	r3, [pc, #204]	@ (8004630 <HAL_RCC_OscConfig+0x480>)
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fd f854 	bl	8001614 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004570:	f7fd f850 	bl	8001614 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e093      	b.n	80046aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004582:	4b29      	ldr	r3, [pc, #164]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69da      	ldr	r2, [r3, #28]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	019b      	lsls	r3, r3, #6
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a4:	085b      	lsrs	r3, r3, #1
 80045a6:	3b01      	subs	r3, #1
 80045a8:	041b      	lsls	r3, r3, #16
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b0:	061b      	lsls	r3, r3, #24
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b8:	071b      	lsls	r3, r3, #28
 80045ba:	491b      	ldr	r1, [pc, #108]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004630 <HAL_RCC_OscConfig+0x480>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c6:	f7fd f825 	bl	8001614 <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ce:	f7fd f821 	bl	8001614 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e064      	b.n	80046aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e0:	4b11      	ldr	r3, [pc, #68]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0f0      	beq.n	80045ce <HAL_RCC_OscConfig+0x41e>
 80045ec:	e05c      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ee:	4b10      	ldr	r3, [pc, #64]	@ (8004630 <HAL_RCC_OscConfig+0x480>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fd f80e 	bl	8001614 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045fc:	f7fd f80a 	bl	8001614 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e04d      	b.n	80046aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	4b06      	ldr	r3, [pc, #24]	@ (8004628 <HAL_RCC_OscConfig+0x478>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x44c>
 800461a:	e045      	b.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d107      	bne.n	8004634 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e040      	b.n	80046aa <HAL_RCC_OscConfig+0x4fa>
 8004628:	40023800 	.word	0x40023800
 800462c:	40007000 	.word	0x40007000
 8004630:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004634:	4b1f      	ldr	r3, [pc, #124]	@ (80046b4 <HAL_RCC_OscConfig+0x504>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d030      	beq.n	80046a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800464c:	429a      	cmp	r2, r3
 800464e:	d129      	bne.n	80046a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465a:	429a      	cmp	r2, r3
 800465c:	d122      	bne.n	80046a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004664:	4013      	ands	r3, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800466a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800466c:	4293      	cmp	r3, r2
 800466e:	d119      	bne.n	80046a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467a:	085b      	lsrs	r3, r3, #1
 800467c:	3b01      	subs	r3, #1
 800467e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d10f      	bne.n	80046a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d107      	bne.n	80046a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d001      	beq.n	80046a8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40023800 	.word	0x40023800

080046b8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e025      	b.n	8004718 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f81d 	bl	8004720 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2202      	movs	r2, #2
 80046ea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3304      	adds	r3, #4
 80046f6:	4619      	mov	r1, r3
 80046f8:	4610      	mov	r0, r2
 80046fa:	f000 f878 	bl	80047ee <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	461a      	mov	r2, r3
 8004708:	6839      	ldr	r1, [r7, #0]
 800470a:	f000 f8cd 	bl	80048a8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004746:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8004748:	7dfb      	ldrb	r3, [r7, #23]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d101      	bne.n	8004752 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800474e:	2302      	movs	r3, #2
 8004750:	e021      	b.n	8004796 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8004752:	7dfb      	ldrb	r3, [r7, #23]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d002      	beq.n	800475e <HAL_SDRAM_SendCommand+0x2a>
 8004758:	7dfb      	ldrb	r3, [r7, #23]
 800475a:	2b05      	cmp	r3, #5
 800475c:	d118      	bne.n	8004790 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2202      	movs	r2, #2
 8004762:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	4618      	mov	r0, r3
 8004770:	f000 f903 	bl	800497a <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d104      	bne.n	8004786 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2205      	movs	r2, #5
 8004780:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004784:	e006      	b.n	8004794 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800478e:	e001      	b.n	8004794 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b082      	sub	sp, #8
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d101      	bne.n	80047b8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80047b4:	2302      	movs	r3, #2
 80047b6:	e016      	b.n	80047e6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d10f      	bne.n	80047e4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6839      	ldr	r1, [r7, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 f90e 	bl	80049f4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	e000      	b.n	80047e6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d123      	bne.n	8004848 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004808:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	6851      	ldr	r1, [r2, #4]
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	6892      	ldr	r2, [r2, #8]
 8004814:	4311      	orrs	r1, r2
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	68d2      	ldr	r2, [r2, #12]
 800481a:	4311      	orrs	r1, r2
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	6912      	ldr	r2, [r2, #16]
 8004820:	4311      	orrs	r1, r2
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	6952      	ldr	r2, [r2, #20]
 8004826:	4311      	orrs	r1, r2
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	6992      	ldr	r2, [r2, #24]
 800482c:	4311      	orrs	r1, r2
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	69d2      	ldr	r2, [r2, #28]
 8004832:	4311      	orrs	r1, r2
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	6a12      	ldr	r2, [r2, #32]
 8004838:	4311      	orrs	r1, r2
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800483e:	430a      	orrs	r2, r1
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	e028      	b.n	800489a <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	69d9      	ldr	r1, [r3, #28]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	4319      	orrs	r1, r3
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485e:	430b      	orrs	r3, r1
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800486e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	6851      	ldr	r1, [r2, #4]
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	6892      	ldr	r2, [r2, #8]
 800487a:	4311      	orrs	r1, r2
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	68d2      	ldr	r2, [r2, #12]
 8004880:	4311      	orrs	r1, r2
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	6912      	ldr	r2, [r2, #16]
 8004886:	4311      	orrs	r1, r2
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	6952      	ldr	r2, [r2, #20]
 800488c:	4311      	orrs	r1, r2
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	6992      	ldr	r2, [r2, #24]
 8004892:	430a      	orrs	r2, r1
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d128      	bne.n	800490c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	1e59      	subs	r1, r3, #1
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	4319      	orrs	r1, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	4319      	orrs	r1, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	3b01      	subs	r3, #1
 80048e2:	031b      	lsls	r3, r3, #12
 80048e4:	4319      	orrs	r1, r3
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	041b      	lsls	r3, r3, #16
 80048ee:	4319      	orrs	r1, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	051b      	lsls	r3, r3, #20
 80048f8:	4319      	orrs	r1, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	3b01      	subs	r3, #1
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	430b      	orrs	r3, r1
 8004904:	431a      	orrs	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	609a      	str	r2, [r3, #8]
 800490a:	e02f      	b.n	800496c <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004914:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	68d2      	ldr	r2, [r2, #12]
 800491c:	3a01      	subs	r2, #1
 800491e:	0311      	lsls	r1, r2, #12
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	6952      	ldr	r2, [r2, #20]
 8004924:	3a01      	subs	r2, #1
 8004926:	0512      	lsls	r2, r2, #20
 8004928:	430a      	orrs	r2, r1
 800492a:	431a      	orrs	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	1e59      	subs	r1, r3, #1
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	3b01      	subs	r3, #1
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	4319      	orrs	r1, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	3b01      	subs	r3, #1
 800494e:	021b      	lsls	r3, r3, #8
 8004950:	4319      	orrs	r1, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	3b01      	subs	r3, #1
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	4319      	orrs	r1, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	3b01      	subs	r3, #1
 8004962:	061b      	lsls	r3, r3, #24
 8004964:	430b      	orrs	r3, r1
 8004966:	431a      	orrs	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b086      	sub	sp, #24
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	0d9b      	lsrs	r3, r3, #22
 8004990:	059b      	lsls	r3, r3, #22
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	6811      	ldr	r1, [r2, #0]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	6852      	ldr	r2, [r2, #4]
 800499a:	4311      	orrs	r1, r2
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	6892      	ldr	r2, [r2, #8]
 80049a0:	3a01      	subs	r2, #1
 80049a2:	0152      	lsls	r2, r2, #5
 80049a4:	4311      	orrs	r1, r2
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	68d2      	ldr	r2, [r2, #12]
 80049aa:	0252      	lsls	r2, r2, #9
 80049ac:	430a      	orrs	r2, r1
 80049ae:	431a      	orrs	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80049b4:	f7fc fe2e 	bl	8001614 <HAL_GetTick>
 80049b8:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80049ba:	e010      	b.n	80049de <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c2:	d00c      	beq.n	80049de <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d007      	beq.n	80049da <FMC_SDRAM_SendCommand+0x60>
 80049ca:	f7fc fe23 	bl	8001614 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d201      	bcs.n	80049de <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e006      	b.n	80049ec <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d0e8      	beq.n	80049bc <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004a06:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	0052      	lsls	r2, r2, #1
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004a24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a28:	480d      	ldr	r0, [pc, #52]	@ (8004a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004a2a:	490e      	ldr	r1, [pc, #56]	@ (8004a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8004a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a30:	e002      	b.n	8004a38 <LoopCopyDataInit>

08004a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a36:	3304      	adds	r3, #4

08004a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a3c:	d3f9      	bcc.n	8004a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a3e:	4a0b      	ldr	r2, [pc, #44]	@ (8004a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004a40:	4c0b      	ldr	r4, [pc, #44]	@ (8004a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a44:	e001      	b.n	8004a4a <LoopFillZerobss>

08004a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a48:	3204      	adds	r2, #4

08004a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a4c:	d3fb      	bcc.n	8004a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004a4e:	f7fc fd3d 	bl	80014cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a52:	f000 fc73 	bl	800533c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a56:	f000 f81f 	bl	8004a98 <main>
  bx  lr    
 8004a5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004a5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a64:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8004a68:	0809db2c 	.word	0x0809db2c
  ldr r2, =_sbss
 8004a6c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8004a70:	2000036c 	.word	0x2000036c

08004a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a74:	e7fe      	b.n	8004a74 <ADC_IRQHandler>

08004a76 <OnError_Handler>:
  * @brief  On Error Handler on condition TRUE.
  * @param  condition : Can be TRUE or FALSE
  * @retval None
  */
static void OnError_Handler(uint32_t condition)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  if(condition)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <OnError_Handler+0x18>
  {
    BSP_LED_On(LED3);
 8004a84:	2002      	movs	r0, #2
 8004a86:	f7fb ff25 	bl	80008d4 <BSP_LED_On>
    while(1) { ; } /* Blocking on error */
 8004a8a:	bf00      	nop
 8004a8c:	e7fd      	b.n	8004a8a <OnError_Handler+0x14>
  }
}
 8004a8e:	bf00      	nop
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af02      	add	r7, sp, #8
  uint8_t  lcd_status = LCD_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	71fb      	strb	r3, [r7, #7]
      duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
      handled in milliseconds basis.
    - Set NVIC Group Priority to 4
    - Low Level Initialization: global MSP (MCU Support Package) initialization
  */
  HAL_Init();
 8004aa2:	f7fc fd49 	bl	8001538 <HAL_Init>
  
  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8004aa6:	f000 f95f 	bl	8004d68 <SystemClock_Config>
  
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8004aaa:	f7fc fb2b 	bl	8001104 <BSP_SDRAM_Init>
  
  /* Initialize the LCD   */
  lcd_status = LCD_Init();
 8004aae:	f000 f9cf 	bl	8004e50 <LCD_Init>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	71fb      	strb	r3, [r7, #7]
  OnError_Handler(lcd_status != LCD_OK); 
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	bf14      	ite	ne
 8004abc:	2301      	movne	r3, #1
 8004abe:	2300      	moveq	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff ffd7 	bl	8004a76 <OnError_Handler>

  /* Initialize LTDC layer 0 iused for Hint */
  LCD_LayertInit(0, LAYER0_ADDRESS);     
 8004ac8:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8004acc:	2000      	movs	r0, #0
 8004ace:	f000 fb0d 	bl	80050ec <LCD_LayertInit>
  BSP_LCD_SelectLayer(0); 
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	f7fb ff76 	bl	80009c4 <BSP_LCD_SelectLayer>
    
  HAL_DSI_LongWrite(&hdsi_eval, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8004ad8:	4b34      	ldr	r3, [pc, #208]	@ (8004bac <main+0x114>)
 8004ada:	9301      	str	r3, [sp, #4]
 8004adc:	232a      	movs	r3, #42	@ 0x2a
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	2239      	movs	r2, #57	@ 0x39
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4832      	ldr	r0, [pc, #200]	@ (8004bb0 <main+0x118>)
 8004ae8:	f7fe f82f 	bl	8002b4a <HAL_DSI_LongWrite>
  HAL_DSI_LongWrite(&hdsi_eval, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_PASET, pPage);
 8004aec:	4b31      	ldr	r3, [pc, #196]	@ (8004bb4 <main+0x11c>)
 8004aee:	9301      	str	r3, [sp, #4]
 8004af0:	232b      	movs	r3, #43	@ 0x2b
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	2304      	movs	r3, #4
 8004af6:	2239      	movs	r2, #57	@ 0x39
 8004af8:	2100      	movs	r1, #0
 8004afa:	482d      	ldr	r0, [pc, #180]	@ (8004bb0 <main+0x118>)
 8004afc:	f7fe f825 	bl	8002b4a <HAL_DSI_LongWrite>
 
  /* Update pitch : the draw is done on the whole physical X Size */
  HAL_LTDC_SetPitch(&hltdc_eval, BSP_LCD_GetXSize(), 0);
 8004b00:	f7fb ff48 	bl	8000994 <BSP_LCD_GetXSize>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2200      	movs	r2, #0
 8004b08:	4619      	mov	r1, r3
 8004b0a:	482b      	ldr	r0, [pc, #172]	@ (8004bb8 <main+0x120>)
 8004b0c:	f7fe fcb8 	bl	8003480 <HAL_LTDC_SetPitch>

  /* Display example brief   */
  LCD_BriefDisplay();
 8004b10:	f000 fb2c 	bl	800516c <LCD_BriefDisplay>
  
  /* Show first image */
  CopyPicture((uint32_t *)Images[ImageIndex++], (uint32_t *)LAYER0_ADDRESS, 240, 160, 320, 240);
 8004b14:	4b29      	ldr	r3, [pc, #164]	@ (8004bbc <main+0x124>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	4928      	ldr	r1, [pc, #160]	@ (8004bbc <main+0x124>)
 8004b1c:	600a      	str	r2, [r1, #0]
 8004b1e:	4a28      	ldr	r2, [pc, #160]	@ (8004bc0 <main+0x128>)
 8004b20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004b24:	23f0      	movs	r3, #240	@ 0xf0
 8004b26:	9301      	str	r3, [sp, #4]
 8004b28:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	23a0      	movs	r3, #160	@ 0xa0
 8004b30:	22f0      	movs	r2, #240	@ 0xf0
 8004b32:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8004b36:	f000 fb55 	bl	80051e4 <CopyPicture>

#if !defined(USE_STM32469I_DISCO_REVC)
  pending_buffer = 0;
#endif
  active_area = LEFT_AREA;
 8004b3a:	4b22      	ldr	r3, [pc, #136]	@ (8004bc4 <main+0x12c>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
  
  HAL_DSI_LongWrite(&hdsi_eval, 0, DSI_DCS_LONG_PKT_WRITE, 2, OTM8009A_CMD_WRTESCN, pScanCol);
 8004b40:	4b21      	ldr	r3, [pc, #132]	@ (8004bc8 <main+0x130>)
 8004b42:	9301      	str	r3, [sp, #4]
 8004b44:	2344      	movs	r3, #68	@ 0x44
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	2302      	movs	r3, #2
 8004b4a:	2239      	movs	r2, #57	@ 0x39
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	4818      	ldr	r0, [pc, #96]	@ (8004bb0 <main+0x118>)
 8004b50:	f7fd fffb 	bl	8002b4a <HAL_DSI_LongWrite>
  
  /* Infinite loop */
  while (1)
  {
    if(pending_buffer < 0)
 8004b54:	4b1d      	ldr	r3, [pc, #116]	@ (8004bcc <main+0x134>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	da22      	bge.n	8004ba2 <main+0x10a>
    {
      CopyPicture((uint32_t *)Images[ImageIndex++], (uint32_t *)LAYER0_ADDRESS, 240, 160, 320, 240);
 8004b5c:	4b17      	ldr	r3, [pc, #92]	@ (8004bbc <main+0x124>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	4916      	ldr	r1, [pc, #88]	@ (8004bbc <main+0x124>)
 8004b64:	600a      	str	r2, [r1, #0]
 8004b66:	4a16      	ldr	r2, [pc, #88]	@ (8004bc0 <main+0x128>)
 8004b68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004b6c:	23f0      	movs	r3, #240	@ 0xf0
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	23a0      	movs	r3, #160	@ 0xa0
 8004b78:	22f0      	movs	r2, #240	@ 0xf0
 8004b7a:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8004b7e:	f000 fb31 	bl	80051e4 <CopyPicture>
      
      if(ImageIndex >= 2)
 8004b82:	4b0e      	ldr	r3, [pc, #56]	@ (8004bbc <main+0x124>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d902      	bls.n	8004b90 <main+0xf8>
      {
        ImageIndex = 0;
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004bbc <main+0x124>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
      }
      pending_buffer = 1;
 8004b90:	4b0e      	ldr	r3, [pc, #56]	@ (8004bcc <main+0x134>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	601a      	str	r2, [r3, #0]
      
      /* UnMask the TE */
      __DSI_UNMASK_TE(); 
 8004b96:	4b0e      	ldr	r3, [pc, #56]	@ (8004bd0 <main+0x138>)
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	4a0d      	ldr	r2, [pc, #52]	@ (8004bd0 <main+0x138>)
 8004b9c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8004ba0:	6213      	str	r3, [r2, #32]
    }
    /* Wait some time before switching to next image */
    HAL_Delay(2000);
 8004ba2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004ba6:	f7fc fd41 	bl	800162c <HAL_Delay>
    if(pending_buffer < 0)
 8004baa:	e7d3      	b.n	8004b54 <main+0xbc>
 8004bac:	20000054 	.word	0x20000054
 8004bb0:	20000168 	.word	0x20000168
 8004bb4:	2000005c 	.word	0x2000005c
 8004bb8:	200000c0 	.word	0x200000c0
 8004bbc:	200002a8 	.word	0x200002a8
 8004bc0:	2000004c 	.word	0x2000004c
 8004bc4:	200002a4 	.word	0x200002a4
 8004bc8:	20000060 	.word	0x20000060
 8004bcc:	20000048 	.word	0x20000048
 8004bd0:	40022400 	.word	0x40022400

08004bd4 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi: pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Mask the TE */
  __DSI_MASK_TE();
 8004bdc:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <HAL_DSI_TearingEffectCallback+0x24>)
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	4a05      	ldr	r2, [pc, #20]	@ (8004bf8 <HAL_DSI_TearingEffectCallback+0x24>)
 8004be2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004be6:	6213      	str	r3, [r2, #32]
  
  /* Refresh the right part of the display */
  HAL_DSI_Refresh(hdsi);   
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fd ff6b 	bl	8002ac4 <HAL_DSI_Refresh>
}
 8004bee:	bf00      	nop
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40022400 	.word	0x40022400

08004bfc <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi: pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	6078      	str	r0, [r7, #4]
  if(pending_buffer >= 0)
 8004c04:	4b51      	ldr	r3, [pc, #324]	@ (8004d4c <HAL_DSI_EndOfRefreshCallback+0x150>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f2c0 8091 	blt.w	8004d30 <HAL_DSI_EndOfRefreshCallback+0x134>
  {
    if(active_area == LEFT_AREA)
 8004c0e:	4b50      	ldr	r3, [pc, #320]	@ (8004d50 <HAL_DSI_EndOfRefreshCallback+0x154>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d143      	bne.n	8004c9e <HAL_DSI_EndOfRefreshCallback+0xa2>
    {     
      /* Disable DSI Wrapper */
      __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0208 	bic.w	r2, r2, #8
 8004c2a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	697b      	ldr	r3, [r7, #20]
      /* Update LTDC configuration */
      LTDC_LAYER(&hltdc_eval, 0)->CFBAR = LAYER0_ADDRESS + 400 * 4;
 8004c3e:	4b45      	ldr	r3, [pc, #276]	@ (8004d54 <HAL_DSI_EndOfRefreshCallback+0x158>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3384      	adds	r3, #132	@ 0x84
 8004c44:	461a      	mov	r2, r3
 8004c46:	4b44      	ldr	r3, [pc, #272]	@ (8004d58 <HAL_DSI_EndOfRefreshCallback+0x15c>)
 8004c48:	6293      	str	r3, [r2, #40]	@ 0x28
      __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc_eval);
 8004c4a:	4b42      	ldr	r3, [pc, #264]	@ (8004d54 <HAL_DSI_EndOfRefreshCallback+0x158>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c50:	4b40      	ldr	r3, [pc, #256]	@ (8004d54 <HAL_DSI_EndOfRefreshCallback+0x158>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0201 	orr.w	r2, r2, #1
 8004c58:	625a      	str	r2, [r3, #36]	@ 0x24
      /* Enable DSI Wrapper */
      __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0208 	orr.w	r2, r2, #8
 8004c6e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	693b      	ldr	r3, [r7, #16]
      
      HAL_DSI_LongWrite(hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8004c82:	4b36      	ldr	r3, [pc, #216]	@ (8004d5c <HAL_DSI_EndOfRefreshCallback+0x160>)
 8004c84:	9301      	str	r3, [sp, #4]
 8004c86:	232a      	movs	r3, #42	@ 0x2a
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	2304      	movs	r3, #4
 8004c8c:	2239      	movs	r2, #57	@ 0x39
 8004c8e:	2100      	movs	r1, #0
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7fd ff5a 	bl	8002b4a <HAL_DSI_LongWrite>
      /* Refresh the right part of the display */
      HAL_DSI_Refresh(hdsi);    
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fd ff14 	bl	8002ac4 <HAL_DSI_Refresh>
 8004c9c:	e048      	b.n	8004d30 <HAL_DSI_EndOfRefreshCallback+0x134>
      
    }
    else if(active_area == RIGHT_AREA)
 8004c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d50 <HAL_DSI_EndOfRefreshCallback+0x154>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d144      	bne.n	8004d30 <HAL_DSI_EndOfRefreshCallback+0x134>
    {

      /* Disable DSI Wrapper */
      __HAL_DSI_WRAPPER_DISABLE(&hdsi_eval);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	4b2d      	ldr	r3, [pc, #180]	@ (8004d60 <HAL_DSI_EndOfRefreshCallback+0x164>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8004cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8004d60 <HAL_DSI_EndOfRefreshCallback+0x164>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0208 	bic.w	r2, r2, #8
 8004cba:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8004cbe:	4b28      	ldr	r3, [pc, #160]	@ (8004d60 <HAL_DSI_EndOfRefreshCallback+0x164>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
      /* Update LTDC configuration */
      LTDC_LAYER(&hltdc_eval, 0)->CFBAR = LAYER0_ADDRESS;
 8004cce:	4b21      	ldr	r3, [pc, #132]	@ (8004d54 <HAL_DSI_EndOfRefreshCallback+0x158>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3384      	adds	r3, #132	@ 0x84
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8004cda:	6293      	str	r3, [r2, #40]	@ 0x28
      __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc_eval);
 8004cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8004d54 <HAL_DSI_EndOfRefreshCallback+0x158>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8004d54 <HAL_DSI_EndOfRefreshCallback+0x158>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	625a      	str	r2, [r3, #36]	@ 0x24
      /* Enable DSI Wrapper */
      __HAL_DSI_WRAPPER_ENABLE(&hdsi_eval);
 8004cec:	2300      	movs	r3, #0
 8004cee:	60bb      	str	r3, [r7, #8]
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d60 <HAL_DSI_EndOfRefreshCallback+0x164>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8004cf8:	4b19      	ldr	r3, [pc, #100]	@ (8004d60 <HAL_DSI_EndOfRefreshCallback+0x164>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0208 	orr.w	r2, r2, #8
 8004d00:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8004d04:	4b16      	ldr	r3, [pc, #88]	@ (8004d60 <HAL_DSI_EndOfRefreshCallback+0x164>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	68bb      	ldr	r3, [r7, #8]
      
      HAL_DSI_LongWrite(hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft); 
 8004d14:	4b13      	ldr	r3, [pc, #76]	@ (8004d64 <HAL_DSI_EndOfRefreshCallback+0x168>)
 8004d16:	9301      	str	r3, [sp, #4]
 8004d18:	232a      	movs	r3, #42	@ 0x2a
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	2239      	movs	r2, #57	@ 0x39
 8004d20:	2100      	movs	r1, #0
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fd ff11 	bl	8002b4a <HAL_DSI_LongWrite>
      pending_buffer = -1;     
 8004d28:	4b08      	ldr	r3, [pc, #32]	@ (8004d4c <HAL_DSI_EndOfRefreshCallback+0x150>)
 8004d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2e:	601a      	str	r2, [r3, #0]
    }
  }
  active_area = (active_area == LEFT_AREA)? RIGHT_AREA : LEFT_AREA; 
 8004d30:	4b07      	ldr	r3, [pc, #28]	@ (8004d50 <HAL_DSI_EndOfRefreshCallback+0x154>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_DSI_EndOfRefreshCallback+0x140>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e000      	b.n	8004d3e <HAL_DSI_EndOfRefreshCallback+0x142>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	4a04      	ldr	r2, [pc, #16]	@ (8004d50 <HAL_DSI_EndOfRefreshCallback+0x154>)
 8004d40:	6013      	str	r3, [r2, #0]
}
 8004d42:	bf00      	nop
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000048 	.word	0x20000048
 8004d50:	200002a4 	.word	0x200002a4
 8004d54:	200000c0 	.word	0x200000c0
 8004d58:	c0000640 	.word	0xc0000640
 8004d5c:	20000058 	.word	0x20000058
 8004d60:	20000168 	.word	0x20000168
 8004d64:	20000054 	.word	0x20000054

08004d68 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b096      	sub	sp, #88	@ 0x58
 8004d6c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d74:	2300      	movs	r3, #0
 8004d76:	60bb      	str	r3, [r7, #8]
 8004d78:	4b33      	ldr	r3, [pc, #204]	@ (8004e48 <SystemClock_Config+0xe0>)
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7c:	4a32      	ldr	r2, [pc, #200]	@ (8004e48 <SystemClock_Config+0xe0>)
 8004d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d82:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d84:	4b30      	ldr	r3, [pc, #192]	@ (8004e48 <SystemClock_Config+0xe0>)
 8004d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d8c:	60bb      	str	r3, [r7, #8]
 8004d8e:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d90:	2300      	movs	r3, #0
 8004d92:	607b      	str	r3, [r7, #4]
 8004d94:	4b2d      	ldr	r3, [pc, #180]	@ (8004e4c <SystemClock_Config+0xe4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a2c      	ldr	r2, [pc, #176]	@ (8004e4c <SystemClock_Config+0xe4>)
 8004d9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	4b2a      	ldr	r3, [pc, #168]	@ (8004e4c <SystemClock_Config+0xe4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004da8:	607b      	str	r3, [r7, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004dac:	2301      	movs	r3, #1
 8004dae:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004db0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004db4:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004db6:	2302      	movs	r3, #2
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004dba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
#if defined(USE_STM32469I_DISCO_REVA)
  RCC_OscInitStruct.PLL.PLLM = 25;
#else
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004dc0:	2308      	movs	r3, #8
 8004dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* USE_STM32469I_DISCO_REVA */
  RCC_OscInitStruct.PLL.PLLN = 360;
 8004dc4:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8004dc8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004dca:	2302      	movs	r3, #2
 8004dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004dce:	2307      	movs	r3, #7
 8004dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLR = 6;
 8004dd2:	2306      	movs	r3, #6
 8004dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004dd6:	f107 030c 	add.w	r3, r7, #12
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff f9e8 	bl	80041b0 <HAL_RCC_OscConfig>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  if(ret != HAL_OK)
 8004de6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <SystemClock_Config+0x8a>
  {
    while(1) { ; }
 8004dee:	bf00      	nop
 8004df0:	e7fd      	b.n	8004dee <SystemClock_Config+0x86>
  }
  
  /* Activate the OverDrive to reach the 180 MHz Frequency */  
  ret = HAL_PWREx_EnableOverDrive();
 8004df2:	f7fe fd63 	bl	80038bc <HAL_PWREx_EnableOverDrive>
 8004df6:	4603      	mov	r3, r0
 8004df8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  if(ret != HAL_OK)
 8004dfc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <SystemClock_Config+0xa0>
  {
    while(1) { ; }
 8004e04:	bf00      	nop
 8004e06:	e7fd      	b.n	8004e04 <SystemClock_Config+0x9c>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004e08:	230f      	movs	r3, #15
 8004e0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e10:	2300      	movs	r3, #0
 8004e12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8004e14:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8004e1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e1e:	653b      	str	r3, [r7, #80]	@ 0x50
  
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8004e20:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004e24:	2105      	movs	r1, #5
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fe fd98 	bl	800395c <HAL_RCC_ClockConfig>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  if(ret != HAL_OK)
 8004e32:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <SystemClock_Config+0xd6>
  {
    while(1) { ; }
 8004e3a:	bf00      	nop
 8004e3c:	e7fd      	b.n	8004e3a <SystemClock_Config+0xd2>
  }
}
 8004e3e:	bf00      	nop
 8004e40:	3758      	adds	r7, #88	@ 0x58
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	40007000 	.word	0x40007000

08004e50 <LCD_Init>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  None
  * @retval LCD state
  */
static uint8_t LCD_Init(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
  static DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  
  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8004e56:	f7fb fd67 	bl	8000928 <BSP_LCD_Reset>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8004e5a:	f7fb ffcd 	bl	8000df8 <BSP_LCD_MspInit>
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 417 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 417 MHz / 5 = 83.4 MHz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 83.4 / 2 = 41.7 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004e5e:	4b76      	ldr	r3, [pc, #472]	@ (8005038 <LCD_Init+0x1e8>)
 8004e60:	2208      	movs	r2, #8
 8004e62:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 417;
 8004e64:	4b74      	ldr	r3, [pc, #464]	@ (8005038 <LCD_Init+0x1e8>)
 8004e66:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8004e6a:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8004e6c:	4b72      	ldr	r3, [pc, #456]	@ (8005038 <LCD_Init+0x1e8>)
 8004e6e:	2205      	movs	r2, #5
 8004e70:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8004e72:	4b71      	ldr	r3, [pc, #452]	@ (8005038 <LCD_Init+0x1e8>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004e78:	486f      	ldr	r0, [pc, #444]	@ (8005038 <LCD_Init+0x1e8>)
 8004e7a:	f7fe ff5b 	bl	8003d34 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_eval.Instance = DSI;
 8004e7e:	4b6f      	ldr	r3, [pc, #444]	@ (800503c <LCD_Init+0x1ec>)
 8004e80:	4a6f      	ldr	r2, [pc, #444]	@ (8005040 <LCD_Init+0x1f0>)
 8004e82:	601a      	str	r2, [r3, #0]
  
  HAL_DSI_DeInit(&(hdsi_eval));
 8004e84:	486d      	ldr	r0, [pc, #436]	@ (800503c <LCD_Init+0x1ec>)
 8004e86:	f7fd fabf 	bl	8002408 <HAL_DSI_DeInit>
  
#if defined(USE_STM32469I_DISCO_REVA)  
  dsiPllInit.PLLNDIV  = 100;
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
#else
  dsiPllInit.PLLNDIV  = 125;
 8004e8a:	4b6e      	ldr	r3, [pc, #440]	@ (8005044 <LCD_Init+0x1f4>)
 8004e8c:	227d      	movs	r2, #125	@ 0x7d
 8004e8e:	601a      	str	r2, [r3, #0]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;  
 8004e90:	4b6c      	ldr	r3, [pc, #432]	@ (8005044 <LCD_Init+0x1f4>)
 8004e92:	2202      	movs	r2, #2
 8004e94:	605a      	str	r2, [r3, #4]
#endif  /* USE_STM32469I_DISCO_REVA */
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;  
 8004e96:	4b6b      	ldr	r3, [pc, #428]	@ (8005044 <LCD_Init+0x1f4>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	609a      	str	r2, [r3, #8]

  hdsi_eval.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8004e9c:	4b67      	ldr	r3, [pc, #412]	@ (800503c <LCD_Init+0x1ec>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	60da      	str	r2, [r3, #12]
  hdsi_eval.Init.TXEscapeCkdiv = 0x4;
 8004ea2:	4b66      	ldr	r3, [pc, #408]	@ (800503c <LCD_Init+0x1ec>)
 8004ea4:	2204      	movs	r2, #4
 8004ea6:	609a      	str	r2, [r3, #8]
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 8004ea8:	4966      	ldr	r1, [pc, #408]	@ (8005044 <LCD_Init+0x1f4>)
 8004eaa:	4864      	ldr	r0, [pc, #400]	@ (800503c <LCD_Init+0x1ec>)
 8004eac:	f7fd f990 	bl	80021d0 <HAL_DSI_Init>
    
  /* Configure the DSI for Command mode */
  CmdCfg.VirtualChannelID      = 0;
 8004eb0:	4b65      	ldr	r3, [pc, #404]	@ (8005048 <LCD_Init+0x1f8>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
  CmdCfg.HSPolarity            = DSI_HSYNC_ACTIVE_HIGH;
 8004eb6:	4b64      	ldr	r3, [pc, #400]	@ (8005048 <LCD_Init+0x1f8>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	615a      	str	r2, [r3, #20]
  CmdCfg.VSPolarity            = DSI_VSYNC_ACTIVE_HIGH;
 8004ebc:	4b62      	ldr	r3, [pc, #392]	@ (8005048 <LCD_Init+0x1f8>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	619a      	str	r2, [r3, #24]
  CmdCfg.DEPolarity            = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8004ec2:	4b61      	ldr	r3, [pc, #388]	@ (8005048 <LCD_Init+0x1f8>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	61da      	str	r2, [r3, #28]
  CmdCfg.ColorCoding           = DSI_RGB888;
 8004ec8:	4b5f      	ldr	r3, [pc, #380]	@ (8005048 <LCD_Init+0x1f8>)
 8004eca:	2205      	movs	r2, #5
 8004ecc:	605a      	str	r2, [r3, #4]
  CmdCfg.CommandSize           = HACT;
 8004ece:	4b5e      	ldr	r3, [pc, #376]	@ (8005048 <LCD_Init+0x1f8>)
 8004ed0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8004ed4:	609a      	str	r2, [r3, #8]
  CmdCfg.TearingEffectSource   = DSI_TE_EXTERNAL;
 8004ed6:	4b5c      	ldr	r3, [pc, #368]	@ (8005048 <LCD_Init+0x1f8>)
 8004ed8:	2210      	movs	r2, #16
 8004eda:	60da      	str	r2, [r3, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8004edc:	4b5a      	ldr	r3, [pc, #360]	@ (8005048 <LCD_Init+0x1f8>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	611a      	str	r2, [r3, #16]
  CmdCfg.VSyncPol              = DSI_VSYNC_FALLING;
 8004ee2:	4b59      	ldr	r3, [pc, #356]	@ (8005048 <LCD_Init+0x1f8>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	621a      	str	r2, [r3, #32]
  CmdCfg.AutomaticRefresh      = DSI_AR_DISABLE;
 8004ee8:	4b57      	ldr	r3, [pc, #348]	@ (8005048 <LCD_Init+0x1f8>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	625a      	str	r2, [r3, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest  = DSI_TE_ACKNOWLEDGE_ENABLE;
 8004eee:	4b56      	ldr	r3, [pc, #344]	@ (8005048 <LCD_Init+0x1f8>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_DSI_ConfigAdaptedCommandMode(&hdsi_eval, &CmdCfg);
 8004ef4:	4954      	ldr	r1, [pc, #336]	@ (8005048 <LCD_Init+0x1f8>)
 8004ef6:	4851      	ldr	r0, [pc, #324]	@ (800503c <LCD_Init+0x1ec>)
 8004ef8:	f7fd fbe1 	bl	80026be <HAL_DSI_ConfigAdaptedCommandMode>
  
  LPCmd.LPGenShortWriteNoP    = DSI_LP_GSW0P_ENABLE;
 8004efc:	4b53      	ldr	r3, [pc, #332]	@ (800504c <LCD_Init+0x1fc>)
 8004efe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f02:	601a      	str	r2, [r3, #0]
  LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_ENABLE;
 8004f04:	4b51      	ldr	r3, [pc, #324]	@ (800504c <LCD_Init+0x1fc>)
 8004f06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f0a:	605a      	str	r2, [r3, #4]
  LPCmd.LPGenShortWriteTwoP   = DSI_LP_GSW2P_ENABLE;
 8004f0c:	4b4f      	ldr	r3, [pc, #316]	@ (800504c <LCD_Init+0x1fc>)
 8004f0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f12:	609a      	str	r2, [r3, #8]
  LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_ENABLE;
 8004f14:	4b4d      	ldr	r3, [pc, #308]	@ (800504c <LCD_Init+0x1fc>)
 8004f16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f1a:	60da      	str	r2, [r3, #12]
  LPCmd.LPGenShortReadOneP    = DSI_LP_GSR1P_ENABLE;
 8004f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800504c <LCD_Init+0x1fc>)
 8004f1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004f22:	611a      	str	r2, [r3, #16]
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_ENABLE;
 8004f24:	4b49      	ldr	r3, [pc, #292]	@ (800504c <LCD_Init+0x1fc>)
 8004f26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004f2a:	615a      	str	r2, [r3, #20]
  LPCmd.LPGenLongWrite        = DSI_LP_GLW_ENABLE;
 8004f2c:	4b47      	ldr	r3, [pc, #284]	@ (800504c <LCD_Init+0x1fc>)
 8004f2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004f32:	619a      	str	r2, [r3, #24]
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_ENABLE;
 8004f34:	4b45      	ldr	r3, [pc, #276]	@ (800504c <LCD_Init+0x1fc>)
 8004f36:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004f3a:	61da      	str	r2, [r3, #28]
  LPCmd.LPDcsShortWriteOneP   = DSI_LP_DSW1P_ENABLE;
 8004f3c:	4b43      	ldr	r3, [pc, #268]	@ (800504c <LCD_Init+0x1fc>)
 8004f3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004f42:	621a      	str	r2, [r3, #32]
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_ENABLE;
 8004f44:	4b41      	ldr	r3, [pc, #260]	@ (800504c <LCD_Init+0x1fc>)
 8004f46:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004f4a:	625a      	str	r2, [r3, #36]	@ 0x24
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_ENABLE;
 8004f4c:	4b3f      	ldr	r3, [pc, #252]	@ (800504c <LCD_Init+0x1fc>)
 8004f4e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004f52:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_DSI_ConfigCommand(&hdsi_eval, &LPCmd);
 8004f54:	493d      	ldr	r1, [pc, #244]	@ (800504c <LCD_Init+0x1fc>)
 8004f56:	4839      	ldr	r0, [pc, #228]	@ (800503c <LCD_Init+0x1ec>)
 8004f58:	f7fd fc88 	bl	800286c <HAL_DSI_ConfigCommand>

  /* Configure DSI PHY HS2LP and LP2HS timings */
  PhyTimings.ClockLaneHS2LPTime = 35;
 8004f5c:	4b3c      	ldr	r3, [pc, #240]	@ (8005050 <LCD_Init+0x200>)
 8004f5e:	2223      	movs	r2, #35	@ 0x23
 8004f60:	601a      	str	r2, [r3, #0]
  PhyTimings.ClockLaneLP2HSTime = 35;
 8004f62:	4b3b      	ldr	r3, [pc, #236]	@ (8005050 <LCD_Init+0x200>)
 8004f64:	2223      	movs	r2, #35	@ 0x23
 8004f66:	605a      	str	r2, [r3, #4]
  PhyTimings.DataLaneHS2LPTime = 35;
 8004f68:	4b39      	ldr	r3, [pc, #228]	@ (8005050 <LCD_Init+0x200>)
 8004f6a:	2223      	movs	r2, #35	@ 0x23
 8004f6c:	609a      	str	r2, [r3, #8]
  PhyTimings.DataLaneLP2HSTime = 35;
 8004f6e:	4b38      	ldr	r3, [pc, #224]	@ (8005050 <LCD_Init+0x200>)
 8004f70:	2223      	movs	r2, #35	@ 0x23
 8004f72:	60da      	str	r2, [r3, #12]
  PhyTimings.DataLaneMaxReadTime = 0;
 8004f74:	4b36      	ldr	r3, [pc, #216]	@ (8005050 <LCD_Init+0x200>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	611a      	str	r2, [r3, #16]
  PhyTimings.StopWaitTime = 10;
 8004f7a:	4b35      	ldr	r3, [pc, #212]	@ (8005050 <LCD_Init+0x200>)
 8004f7c:	220a      	movs	r2, #10
 8004f7e:	615a      	str	r2, [r3, #20]
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 8004f80:	4933      	ldr	r1, [pc, #204]	@ (8005050 <LCD_Init+0x200>)
 8004f82:	482e      	ldr	r0, [pc, #184]	@ (800503c <LCD_Init+0x1ec>)
 8004f84:	f7fd fcf8 	bl	8002978 <HAL_DSI_ConfigPhyTimer>

  /* Initialize LTDC */
  LTDC_Init();
 8004f88:	f000 f868 	bl	800505c <LTDC_Init>
  
  /* Start DSI */
  HAL_DSI_Start(&(hdsi_eval));
 8004f8c:	482b      	ldr	r0, [pc, #172]	@ (800503c <LCD_Init+0x1ec>)
 8004f8e:	f7fd fd5d 	bl	8002a4c <HAL_DSI_Start>
    
#if defined (USE_STM32469I_DISCO_REVC)
  /* Initialize the NT35510 LCD Display IC Driver (3K138 LCD IC Driver) */
  NT35510_Init(NT35510_FORMAT_RGB888, LCD_ORIENTATION_LANDSCAPE);
 8004f92:	2101      	movs	r1, #1
 8004f94:	2000      	movs	r0, #0
 8004f96:	f7fb faa5 	bl	80004e4 <NT35510_Init>
#else
  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver) */
  OTM8009A_Init(OTM8009A_COLMOD_RGB888, LCD_ORIENTATION_LANDSCAPE);
#endif
  
  LPCmd.LPGenShortWriteNoP    = DSI_LP_GSW0P_DISABLE;
 8004f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800504c <LCD_Init+0x1fc>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
  LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_DISABLE;
 8004fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800504c <LCD_Init+0x1fc>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	605a      	str	r2, [r3, #4]
  LPCmd.LPGenShortWriteTwoP   = DSI_LP_GSW2P_DISABLE;
 8004fa6:	4b29      	ldr	r3, [pc, #164]	@ (800504c <LCD_Init+0x1fc>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	609a      	str	r2, [r3, #8]
  LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_DISABLE;
 8004fac:	4b27      	ldr	r3, [pc, #156]	@ (800504c <LCD_Init+0x1fc>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	60da      	str	r2, [r3, #12]
  LPCmd.LPGenShortReadOneP    = DSI_LP_GSR1P_DISABLE;
 8004fb2:	4b26      	ldr	r3, [pc, #152]	@ (800504c <LCD_Init+0x1fc>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	611a      	str	r2, [r3, #16]
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_DISABLE;
 8004fb8:	4b24      	ldr	r3, [pc, #144]	@ (800504c <LCD_Init+0x1fc>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	615a      	str	r2, [r3, #20]
  LPCmd.LPGenLongWrite        = DSI_LP_GLW_DISABLE;
 8004fbe:	4b23      	ldr	r3, [pc, #140]	@ (800504c <LCD_Init+0x1fc>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	619a      	str	r2, [r3, #24]
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_DISABLE;
 8004fc4:	4b21      	ldr	r3, [pc, #132]	@ (800504c <LCD_Init+0x1fc>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	61da      	str	r2, [r3, #28]
  LPCmd.LPDcsShortWriteOneP   = DSI_LP_DSW1P_DISABLE;
 8004fca:	4b20      	ldr	r3, [pc, #128]	@ (800504c <LCD_Init+0x1fc>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	621a      	str	r2, [r3, #32]
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_DISABLE;
 8004fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800504c <LCD_Init+0x1fc>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	625a      	str	r2, [r3, #36]	@ 0x24
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_DISABLE;
 8004fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800504c <LCD_Init+0x1fc>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_DSI_ConfigCommand(&hdsi_eval, &LPCmd);
 8004fdc:	491b      	ldr	r1, [pc, #108]	@ (800504c <LCD_Init+0x1fc>)
 8004fde:	4817      	ldr	r0, [pc, #92]	@ (800503c <LCD_Init+0x1ec>)
 8004fe0:	f7fd fc44 	bl	800286c <HAL_DSI_ConfigCommand>
  
  HAL_DSI_ConfigFlowControl(&hdsi_eval, DSI_FLOW_CONTROL_BTA);
 8004fe4:	2104      	movs	r1, #4
 8004fe6:	4815      	ldr	r0, [pc, #84]	@ (800503c <LCD_Init+0x1ec>)
 8004fe8:	f7fd fc9e 	bl	8002928 <HAL_DSI_ConfigFlowControl>

  /* Enable GPIOJ clock */
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004fec:	2300      	movs	r3, #0
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	4b18      	ldr	r3, [pc, #96]	@ (8005054 <LCD_Init+0x204>)
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff4:	4a17      	ldr	r2, [pc, #92]	@ (8005054 <LCD_Init+0x204>)
 8004ff6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ffa:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ffc:	4b15      	ldr	r3, [pc, #84]	@ (8005054 <LCD_Init+0x204>)
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005004:	603b      	str	r3, [r7, #0]
 8005006:	683b      	ldr	r3, [r7, #0]

  /* Configure DSI_TE pin from MB1166 : Tearing effect on separated GPIO from KoD LCD */
  /* that is mapped on GPIOJ2 as alternate DSI function (DSI_TE)                      */
  /* This pin is used only when the LCD and DSI link is configured in command mode    */
  /* Not used in DSI Video mode.                                                      */
  GPIO_Init_Structure.Pin       = GPIO_PIN_2;
 8005008:	2304      	movs	r3, #4
 800500a:	607b      	str	r3, [r7, #4]
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 800500c:	2302      	movs	r3, #2
 800500e:	60bb      	str	r3, [r7, #8]
  GPIO_Init_Structure.Pull      = GPIO_NOPULL;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
 8005014:	2303      	movs	r3, #3
 8005016:	613b      	str	r3, [r7, #16]
  GPIO_Init_Structure.Alternate = GPIO_AF13_DSI;
 8005018:	230d      	movs	r3, #13
 800501a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);   
 800501c:	1d3b      	adds	r3, r7, #4
 800501e:	4619      	mov	r1, r3
 8005020:	480d      	ldr	r0, [pc, #52]	@ (8005058 <LCD_Init+0x208>)
 8005022:	f7fd fe2b 	bl	8002c7c <HAL_GPIO_Init>

  /* Refresh the display */
  HAL_DSI_Refresh(&hdsi_eval);
 8005026:	4805      	ldr	r0, [pc, #20]	@ (800503c <LCD_Init+0x1ec>)
 8005028:	f7fd fd4c 	bl	8002ac4 <HAL_DSI_Refresh>

  return LCD_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	200002ac 	.word	0x200002ac
 800503c:	20000168 	.word	0x20000168
 8005040:	40016c00 	.word	0x40016c00
 8005044:	200002e8 	.word	0x200002e8
 8005048:	200002f4 	.word	0x200002f4
 800504c:	20000320 	.word	0x20000320
 8005050:	20000354 	.word	0x20000354
 8005054:	40023800 	.word	0x40023800
 8005058:	40022400 	.word	0x40022400

0800505c <LTDC_Init>:
  * @brief  Initialize the LTDC
  * @param  None
  * @retval None
  */
void LTDC_Init(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* DeInit */
  hltdc_eval.Instance = LTDC;
 8005060:	4b20      	ldr	r3, [pc, #128]	@ (80050e4 <LTDC_Init+0x88>)
 8005062:	4a21      	ldr	r2, [pc, #132]	@ (80050e8 <LTDC_Init+0x8c>)
 8005064:	601a      	str	r2, [r3, #0]
  HAL_LTDC_DeInit(&hltdc_eval);
 8005066:	481f      	ldr	r0, [pc, #124]	@ (80050e4 <LTDC_Init+0x88>)
 8005068:	f7fe f89e 	bl	80031a8 <HAL_LTDC_DeInit>
  
  /* LTDC Config */
  /* Timing and polarity */
  hltdc_eval.Init.HorizontalSync = HSYNC;
 800506c:	4b1d      	ldr	r3, [pc, #116]	@ (80050e4 <LTDC_Init+0x88>)
 800506e:	2201      	movs	r2, #1
 8005070:	615a      	str	r2, [r3, #20]
  hltdc_eval.Init.VerticalSync = VSYNC;
 8005072:	4b1c      	ldr	r3, [pc, #112]	@ (80050e4 <LTDC_Init+0x88>)
 8005074:	2201      	movs	r2, #1
 8005076:	619a      	str	r2, [r3, #24]
  hltdc_eval.Init.AccumulatedHBP = HSYNC+HBP;
 8005078:	4b1a      	ldr	r3, [pc, #104]	@ (80050e4 <LTDC_Init+0x88>)
 800507a:	2202      	movs	r2, #2
 800507c:	61da      	str	r2, [r3, #28]
  hltdc_eval.Init.AccumulatedVBP = VSYNC+VBP;
 800507e:	4b19      	ldr	r3, [pc, #100]	@ (80050e4 <LTDC_Init+0x88>)
 8005080:	2202      	movs	r2, #2
 8005082:	621a      	str	r2, [r3, #32]
  hltdc_eval.Init.AccumulatedActiveH = VSYNC+VBP+VACT;
 8005084:	4b17      	ldr	r3, [pc, #92]	@ (80050e4 <LTDC_Init+0x88>)
 8005086:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800508a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc_eval.Init.AccumulatedActiveW = HSYNC+HBP+HACT;
 800508c:	4b15      	ldr	r3, [pc, #84]	@ (80050e4 <LTDC_Init+0x88>)
 800508e:	f44f 72c9 	mov.w	r2, #402	@ 0x192
 8005092:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc_eval.Init.TotalHeigh = VSYNC+VBP+VACT+VFP;
 8005094:	4b13      	ldr	r3, [pc, #76]	@ (80050e4 <LTDC_Init+0x88>)
 8005096:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800509a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc_eval.Init.TotalWidth = HSYNC+HBP+HACT+HFP;
 800509c:	4b11      	ldr	r3, [pc, #68]	@ (80050e4 <LTDC_Init+0x88>)
 800509e:	f240 1293 	movw	r2, #403	@ 0x193
 80050a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* background value */
  hltdc_eval.Init.Backcolor.Blue = 0;
 80050a4:	4b0f      	ldr	r3, [pc, #60]	@ (80050e4 <LTDC_Init+0x88>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc_eval.Init.Backcolor.Green = 0;
 80050ac:	4b0d      	ldr	r3, [pc, #52]	@ (80050e4 <LTDC_Init+0x88>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc_eval.Init.Backcolor.Red = 0;
 80050b4:	4b0b      	ldr	r3, [pc, #44]	@ (80050e4 <LTDC_Init+0x88>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hltdc_eval.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80050bc:	4b09      	ldr	r3, [pc, #36]	@ (80050e4 <LTDC_Init+0x88>)
 80050be:	2200      	movs	r2, #0
 80050c0:	605a      	str	r2, [r3, #4]
  hltdc_eval.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80050c2:	4b08      	ldr	r3, [pc, #32]	@ (80050e4 <LTDC_Init+0x88>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	609a      	str	r2, [r3, #8]
  hltdc_eval.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80050c8:	4b06      	ldr	r3, [pc, #24]	@ (80050e4 <LTDC_Init+0x88>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	60da      	str	r2, [r3, #12]
  hltdc_eval.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80050ce:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <LTDC_Init+0x88>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	611a      	str	r2, [r3, #16]
  hltdc_eval.Instance = LTDC;
 80050d4:	4b03      	ldr	r3, [pc, #12]	@ (80050e4 <LTDC_Init+0x88>)
 80050d6:	4a04      	ldr	r2, [pc, #16]	@ (80050e8 <LTDC_Init+0x8c>)
 80050d8:	601a      	str	r2, [r3, #0]

  HAL_LTDC_Init(&hltdc_eval);
 80050da:	4802      	ldr	r0, [pc, #8]	@ (80050e4 <LTDC_Init+0x88>)
 80050dc:	f7fd ff94 	bl	8003008 <HAL_LTDC_Init>
}
 80050e0:	bf00      	nop
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	200000c0 	.word	0x200000c0
 80050e8:	40016800 	.word	0x40016800

080050ec <LCD_LayertInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void LCD_LayertInit(uint16_t LayerIndex, uint32_t Address)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b090      	sub	sp, #64	@ 0x40
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	4603      	mov	r3, r0
 80050f4:	6039      	str	r1, [r7, #0]
 80050f6:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize()/2;
 80050fc:	f7fb fc4a 	bl	8000994 <BSP_LCD_GetXSize>
 8005100:	4603      	mov	r3, r0
 8005102:	085b      	lsrs	r3, r3, #1
 8005104:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800510a:	f7fb fc4f 	bl	80009ac <BSP_LCD_GetYSize>
 800510e:	4603      	mov	r3, r0
 8005110:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = Address;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 800511a:	23ff      	movs	r3, #255	@ 0xff
 800511c:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800511e:	2300      	movs	r3, #0
 8005120:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005134:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005138:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800513a:	2307      	movs	r3, #7
 800513c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize()/2;
 800513e:	f7fb fc29 	bl	8000994 <BSP_LCD_GetXSize>
 8005142:	4603      	mov	r3, r0
 8005144:	085b      	lsrs	r3, r3, #1
 8005146:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8005148:	f7fb fc30 	bl	80009ac <BSP_LCD_GetYSize>
 800514c:	4603      	mov	r3, r0
 800514e:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 8005150:	88fa      	ldrh	r2, [r7, #6]
 8005152:	f107 030c 	add.w	r3, r7, #12
 8005156:	4619      	mov	r1, r3
 8005158:	4803      	ldr	r0, [pc, #12]	@ (8005168 <LCD_LayertInit+0x7c>)
 800515a:	f7fe f952 	bl	8003402 <HAL_LTDC_ConfigLayer>
}
 800515e:	bf00      	nop
 8005160:	3740      	adds	r7, #64	@ 0x40
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	200000c0 	.word	0x200000c0

0800516c <LCD_BriefDisplay>:
  * @brief  Display Example description.
  * @param  None
  * @retval None
  */
static void LCD_BriefDisplay(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  BSP_LCD_SetFont(&Font24);  
 8005170:	4816      	ldr	r0, [pc, #88]	@ (80051cc <LCD_BriefDisplay+0x60>)
 8005172:	f7fb fc69 	bl	8000a48 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8005176:	4816      	ldr	r0, [pc, #88]	@ (80051d0 <LCD_BriefDisplay+0x64>)
 8005178:	f7fb fc34 	bl	80009e4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, 800, 112);  
 800517c:	2370      	movs	r3, #112	@ 0x70
 800517e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005182:	2100      	movs	r1, #0
 8005184:	2000      	movs	r0, #0
 8005186:	f7fb fdb3 	bl	8000cf0 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800518a:	f04f 30ff 	mov.w	r0, #4294967295
 800518e:	f7fb fc29 	bl	80009e4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 112, 800, 368);
 8005192:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8005196:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800519a:	2170      	movs	r1, #112	@ 0x70
 800519c:	2000      	movs	r0, #0
 800519e:	f7fb fda7 	bl	8000cf0 <BSP_LCD_FillRect>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80051a2:	480b      	ldr	r0, [pc, #44]	@ (80051d0 <LCD_BriefDisplay+0x64>)
 80051a4:	f7fb fc36 	bl	8000a14 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAtLine(1, (uint8_t *)"   LCD_DSI_CmdMode_TearingEffect_ExtPin");
 80051a8:	490a      	ldr	r1, [pc, #40]	@ (80051d4 <LCD_BriefDisplay+0x68>)
 80051aa:	2001      	movs	r0, #1
 80051ac:	f7fb fd88 	bl	8000cc0 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_SetFont(&Font16);
 80051b0:	4809      	ldr	r0, [pc, #36]	@ (80051d8 <LCD_BriefDisplay+0x6c>)
 80051b2:	f7fb fc49 	bl	8000a48 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"This example shows how to display images on LCD DSI and prevent");
 80051b6:	4909      	ldr	r1, [pc, #36]	@ (80051dc <LCD_BriefDisplay+0x70>)
 80051b8:	2004      	movs	r0, #4
 80051ba:	f7fb fd81 	bl	8000cc0 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(5, (uint8_t *)"Tearing Effect using DSI_TE pin ");
 80051be:	4908      	ldr	r1, [pc, #32]	@ (80051e0 <LCD_BriefDisplay+0x74>)
 80051c0:	2005      	movs	r0, #5
 80051c2:	f7fb fd7d 	bl	8000cc0 <BSP_LCD_DisplayStringAtLine>
  
}
 80051c6:	bf00      	nop
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	20000020 	.word	0x20000020
 80051d0:	ff0000ff 	.word	0xff0000ff
 80051d4:	080053e0 	.word	0x080053e0
 80051d8:	20000028 	.word	0x20000028
 80051dc:	08005408 	.word	0x08005408
 80051e0:	08005448 	.word	0x08005448

080051e4 <CopyPicture>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void CopyPicture(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize)
{   
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	4611      	mov	r1, r2
 80051f0:	461a      	mov	r2, r3
 80051f2:	460b      	mov	r3, r1
 80051f4:	80fb      	strh	r3, [r7, #6]
 80051f6:	4613      	mov	r3, r2
 80051f8:	80bb      	strh	r3, [r7, #4]
  
  uint32_t destination = (uint32_t)pDst + (y * 800 + x) * 4;
 80051fa:	88bb      	ldrh	r3, [r7, #4]
 80051fc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005200:	fb03 f202 	mul.w	r2, r3, r2
 8005204:	88fb      	ldrh	r3, [r7, #6]
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	461a      	mov	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4413      	add	r3, r2
 8005210:	617b      	str	r3, [r7, #20]
  uint32_t source      = (uint32_t)pSrc;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	613b      	str	r3, [r7, #16]
  
  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/ 
  hdma2d.Init.Mode         = DMA2D_M2M;
 8005216:	4b1f      	ldr	r3, [pc, #124]	@ (8005294 <CopyPicture+0xb0>)
 8005218:	2200      	movs	r2, #0
 800521a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
 800521c:	4b1d      	ldr	r3, [pc, #116]	@ (8005294 <CopyPicture+0xb0>)
 800521e:	2200      	movs	r2, #0
 8005220:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 800 - xsize;     
 8005222:	8c3b      	ldrh	r3, [r7, #32]
 8005224:	f5c3 7348 	rsb	r3, r3, #800	@ 0x320
 8005228:	461a      	mov	r2, r3
 800522a:	4b1a      	ldr	r3, [pc, #104]	@ (8005294 <CopyPicture+0xb0>)
 800522c:	60da      	str	r2, [r3, #12]
  
  /*##-2- DMA2D Callbacks Configuration ######################################*/
  hdma2d.XferCpltCallback  = NULL;
 800522e:	4b19      	ldr	r3, [pc, #100]	@ (8005294 <CopyPicture+0xb0>)
 8005230:	2200      	movs	r2, #0
 8005232:	611a      	str	r2, [r3, #16]
  
  /*##-3- Foreground Configuration ###########################################*/
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005234:	4b17      	ldr	r3, [pc, #92]	@ (8005294 <CopyPicture+0xb0>)
 8005236:	2200      	movs	r2, #0
 8005238:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 800523a:	4b16      	ldr	r3, [pc, #88]	@ (8005294 <CopyPicture+0xb0>)
 800523c:	22ff      	movs	r2, #255	@ 0xff
 800523e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8005240:	4b14      	ldr	r3, [pc, #80]	@ (8005294 <CopyPicture+0xb0>)
 8005242:	2200      	movs	r2, #0
 8005244:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].InputOffset = 0;
 8005246:	4b13      	ldr	r3, [pc, #76]	@ (8005294 <CopyPicture+0xb0>)
 8005248:	2200      	movs	r2, #0
 800524a:	629a      	str	r2, [r3, #40]	@ 0x28

  hdma2d.Instance          = DMA2D; 
 800524c:	4b11      	ldr	r3, [pc, #68]	@ (8005294 <CopyPicture+0xb0>)
 800524e:	4a12      	ldr	r2, [pc, #72]	@ (8005298 <CopyPicture+0xb4>)
 8005250:	601a      	str	r2, [r3, #0]
   
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) 
 8005252:	4810      	ldr	r0, [pc, #64]	@ (8005294 <CopyPicture+0xb0>)
 8005254:	f7fc fcde 	bl	8001c14 <HAL_DMA2D_Init>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d116      	bne.n	800528c <CopyPicture+0xa8>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) == HAL_OK) 
 800525e:	2101      	movs	r1, #1
 8005260:	480c      	ldr	r0, [pc, #48]	@ (8005294 <CopyPicture+0xb0>)
 8005262:	f7fc fe3f 	bl	8001ee4 <HAL_DMA2D_ConfigLayer>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10f      	bne.n	800528c <CopyPicture+0xa8>
    {
      if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 800526c:	8c3a      	ldrh	r2, [r7, #32]
 800526e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	4613      	mov	r3, r2
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	6939      	ldr	r1, [r7, #16]
 8005278:	4806      	ldr	r0, [pc, #24]	@ (8005294 <CopyPicture+0xb0>)
 800527a:	f7fc fd1e 	bl	8001cba <HAL_DMA2D_Start>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d103      	bne.n	800528c <CopyPicture+0xa8>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8005284:	2164      	movs	r1, #100	@ 0x64
 8005286:	4803      	ldr	r0, [pc, #12]	@ (8005294 <CopyPicture+0xb0>)
 8005288:	f7fc fd42 	bl	8001d10 <HAL_DMA2D_PollForTransfer>
      }
    }
  }   
}
 800528c:	bf00      	nop
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20000264 	.word	0x20000264
 8005298:	4002b000 	.word	0x4002b000

0800529c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
}
 80052a0:	bf00      	nop
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80052aa:	b480      	push	{r7}
 80052ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80052ae:	bf00      	nop
 80052b0:	e7fd      	b.n	80052ae <HardFault_Handler+0x4>

080052b2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80052b2:	b480      	push	{r7}
 80052b4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80052b6:	bf00      	nop
 80052b8:	e7fd      	b.n	80052b6 <MemManage_Handler+0x4>

080052ba <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80052ba:	b480      	push	{r7}
 80052bc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80052be:	bf00      	nop
 80052c0:	e7fd      	b.n	80052be <BusFault_Handler+0x4>

080052c2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80052c2:	b480      	push	{r7}
 80052c4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80052c6:	bf00      	nop
 80052c8:	e7fd      	b.n	80052c6 <UsageFault_Handler+0x4>

080052ca <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80052ca:	b480      	push	{r7}
 80052cc:	af00      	add	r7, sp, #0
}
 80052ce:	bf00      	nop
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
}
 80052dc:	bf00      	nop
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80052e6:	b480      	push	{r7}
 80052e8:	af00      	add	r7, sp, #0
}
 80052ea:	bf00      	nop
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80052f8:	f7fc f978 	bl	80015ec <HAL_IncTick>
}
 80052fc:	bf00      	nop
 80052fe:	bd80      	pop	{r7, pc}

08005300 <LTDC_IRQHandler>:
  * @brief  This function handles LTDC interrupt request.
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hltdc_eval);
 8005304:	4802      	ldr	r0, [pc, #8]	@ (8005310 <LTDC_IRQHandler+0x10>)
 8005306:	f7fd ffba 	bl	800327e <HAL_LTDC_IRQHandler>
}
 800530a:	bf00      	nop
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	200000c0 	.word	0x200000c0

08005314 <LTDC_ER_IRQHandler>:

void LTDC_ER_IRQHandler(void)
{ 
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* Check the interrupt and clear flag */
  HAL_LTDC_IRQHandler(&hltdc_eval);
 8005318:	4802      	ldr	r0, [pc, #8]	@ (8005324 <LTDC_ER_IRQHandler+0x10>)
 800531a:	f7fd ffb0 	bl	800327e <HAL_LTDC_IRQHandler>

//  Interrupt_Error_Detected = 1;
}
 800531e:	bf00      	nop
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	200000c0 	.word	0x200000c0

08005328 <DSI_IRQHandler>:
  * @brief  This function handles DSI Handler.
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  HAL_DSI_IRQHandler(&hdsi_eval);
 800532c:	4802      	ldr	r0, [pc, #8]	@ (8005338 <DSI_IRQHandler+0x10>)
 800532e:	f7fd f8f3 	bl	8002518 <HAL_DSI_IRQHandler>
}
 8005332:	bf00      	nop
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20000168 	.word	0x20000168

0800533c <__libc_init_array>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	4d0d      	ldr	r5, [pc, #52]	@ (8005374 <__libc_init_array+0x38>)
 8005340:	4c0d      	ldr	r4, [pc, #52]	@ (8005378 <__libc_init_array+0x3c>)
 8005342:	1b64      	subs	r4, r4, r5
 8005344:	10a4      	asrs	r4, r4, #2
 8005346:	2600      	movs	r6, #0
 8005348:	42a6      	cmp	r6, r4
 800534a:	d109      	bne.n	8005360 <__libc_init_array+0x24>
 800534c:	4d0b      	ldr	r5, [pc, #44]	@ (800537c <__libc_init_array+0x40>)
 800534e:	4c0c      	ldr	r4, [pc, #48]	@ (8005380 <__libc_init_array+0x44>)
 8005350:	f000 f818 	bl	8005384 <_init>
 8005354:	1b64      	subs	r4, r4, r5
 8005356:	10a4      	asrs	r4, r4, #2
 8005358:	2600      	movs	r6, #0
 800535a:	42a6      	cmp	r6, r4
 800535c:	d105      	bne.n	800536a <__libc_init_array+0x2e>
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	f855 3b04 	ldr.w	r3, [r5], #4
 8005364:	4798      	blx	r3
 8005366:	3601      	adds	r6, #1
 8005368:	e7ee      	b.n	8005348 <__libc_init_array+0xc>
 800536a:	f855 3b04 	ldr.w	r3, [r5], #4
 800536e:	4798      	blx	r3
 8005370:	3601      	adds	r6, #1
 8005372:	e7f2      	b.n	800535a <__libc_init_array+0x1e>
 8005374:	0809db24 	.word	0x0809db24
 8005378:	0809db24 	.word	0x0809db24
 800537c:	0809db24 	.word	0x0809db24
 8005380:	0809db28 	.word	0x0809db28

08005384 <_init>:
 8005384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005386:	bf00      	nop
 8005388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538a:	bc08      	pop	{r3}
 800538c:	469e      	mov	lr, r3
 800538e:	4770      	bx	lr

08005390 <_fini>:
 8005390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005392:	bf00      	nop
 8005394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005396:	bc08      	pop	{r3}
 8005398:	469e      	mov	lr, r3
 800539a:	4770      	bx	lr
