
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbdc  0800026c  0800026c  0001026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800ce48  0800ce48  0001ce48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cf48  0800cf48  0001cf48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cf50  0800cf50  0001cf50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cf54  0800cf54  0001cf54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000d09  20000000  0800cf58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000828  20000d0c  0800dc61  00020d0c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001534  0800dc61  00021534  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020d09  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020d3f  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002ffde  00000000  00000000  00020d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005054  00000000  00000000  00050d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000027d8  00000000  00000000  00055db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001f13  00000000  00000000  00058590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00044a6d  00000000  00000000  0005a4a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00034f61  00000000  00000000  0009ef10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a1780  00000000  00000000  000d3e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000ae18  00000000  00000000  002755f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  0028040c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800026c <__do_global_dtors_aux>:
 800026c:	b510      	push	{r4, lr}
 800026e:	4c05      	ldr	r4, [pc, #20]	; (8000284 <__do_global_dtors_aux+0x18>)
 8000270:	7823      	ldrb	r3, [r4, #0]
 8000272:	b933      	cbnz	r3, 8000282 <__do_global_dtors_aux+0x16>
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <__do_global_dtors_aux+0x1c>)
 8000276:	b113      	cbz	r3, 800027e <__do_global_dtors_aux+0x12>
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <__do_global_dtors_aux+0x20>)
 800027a:	f3af 8000 	nop.w
 800027e:	2301      	movs	r3, #1
 8000280:	7023      	strb	r3, [r4, #0]
 8000282:	bd10      	pop	{r4, pc}
 8000284:	20000d0c 	.word	0x20000d0c
 8000288:	00000000 	.word	0x00000000
 800028c:	0800ce30 	.word	0x0800ce30

08000290 <frame_dummy>:
 8000290:	b508      	push	{r3, lr}
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <frame_dummy+0x10>)
 8000294:	b11b      	cbz	r3, 800029e <frame_dummy+0xe>
 8000296:	4903      	ldr	r1, [pc, #12]	; (80002a4 <frame_dummy+0x14>)
 8000298:	4803      	ldr	r0, [pc, #12]	; (80002a8 <frame_dummy+0x18>)
 800029a:	f3af 8000 	nop.w
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	00000000 	.word	0x00000000
 80002a4:	20000d10 	.word	0x20000d10
 80002a8:	0800ce30 	.word	0x0800ce30

080002ac <__aeabi_uldivmod>:
 80002ac:	b953      	cbnz	r3, 80002c4 <__aeabi_uldivmod+0x18>
 80002ae:	b94a      	cbnz	r2, 80002c4 <__aeabi_uldivmod+0x18>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	bf08      	it	eq
 80002b4:	2800      	cmpeq	r0, #0
 80002b6:	bf1c      	itt	ne
 80002b8:	f04f 31ff 	movne.w	r1, #4294967295
 80002bc:	f04f 30ff 	movne.w	r0, #4294967295
 80002c0:	f000 b982 	b.w	80005c8 <__aeabi_idiv0>
 80002c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002cc:	f000 f806 	bl	80002dc <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4770      	bx	lr

080002dc <__udivmoddi4>:
 80002dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002e2:	460d      	mov	r5, r1
 80002e4:	4604      	mov	r4, r0
 80002e6:	460f      	mov	r7, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d146      	bne.n	800037a <__udivmoddi4+0x9e>
 80002ec:	428a      	cmp	r2, r1
 80002ee:	4694      	mov	ip, r2
 80002f0:	d95e      	bls.n	80003b0 <__udivmoddi4+0xd4>
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	b143      	cbz	r3, 800030a <__udivmoddi4+0x2e>
 80002f8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002fc:	f1c3 0220 	rsb	r2, r3, #32
 8000300:	409f      	lsls	r7, r3
 8000302:	409c      	lsls	r4, r3
 8000304:	fa20 f202 	lsr.w	r2, r0, r2
 8000308:	4317      	orrs	r7, r2
 800030a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800030e:	fa1f f58c 	uxth.w	r5, ip
 8000312:	0c22      	lsrs	r2, r4, #16
 8000314:	fbb7 f1fe 	udiv	r1, r7, lr
 8000318:	fb0e 7711 	mls	r7, lr, r1, r7
 800031c:	fb01 f005 	mul.w	r0, r1, r5
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	4290      	cmp	r0, r2
 8000326:	d908      	bls.n	800033a <__udivmoddi4+0x5e>
 8000328:	eb1c 0202 	adds.w	r2, ip, r2
 800032c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x5c>
 8000332:	4290      	cmp	r0, r2
 8000334:	f200 8134 	bhi.w	80005a0 <__udivmoddi4+0x2c4>
 8000338:	4639      	mov	r1, r7
 800033a:	1a12      	subs	r2, r2, r0
 800033c:	b2a4      	uxth	r4, r4
 800033e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000342:	fb0e 2210 	mls	r2, lr, r0, r2
 8000346:	fb00 f505 	mul.w	r5, r0, r5
 800034a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034e:	42a5      	cmp	r5, r4
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x88>
 8000352:	eb1c 0404 	adds.w	r4, ip, r4
 8000356:	f100 32ff 	add.w	r2, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x86>
 800035c:	42a5      	cmp	r5, r4
 800035e:	f200 8119 	bhi.w	8000594 <__udivmoddi4+0x2b8>
 8000362:	4610      	mov	r0, r2
 8000364:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	2100      	movs	r1, #0
 800036c:	b11e      	cbz	r6, 8000376 <__udivmoddi4+0x9a>
 800036e:	40dc      	lsrs	r4, r3
 8000370:	2300      	movs	r3, #0
 8000372:	e9c6 4300 	strd	r4, r3, [r6]
 8000376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0xb4>
 800037e:	2e00      	cmp	r6, #0
 8000380:	f000 80fc 	beq.w	800057c <__udivmoddi4+0x2a0>
 8000384:	2100      	movs	r1, #0
 8000386:	e9c6 0500 	strd	r0, r5, [r6]
 800038a:	4608      	mov	r0, r1
 800038c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000390:	fab3 f183 	clz	r1, r3
 8000394:	2900      	cmp	r1, #0
 8000396:	d14c      	bne.n	8000432 <__udivmoddi4+0x156>
 8000398:	42ab      	cmp	r3, r5
 800039a:	f0c0 80f2 	bcc.w	8000582 <__udivmoddi4+0x2a6>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f240 80ef 	bls.w	8000582 <__udivmoddi4+0x2a6>
 80003a4:	4608      	mov	r0, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d0e5      	beq.n	8000376 <__udivmoddi4+0x9a>
 80003aa:	e9c6 4700 	strd	r4, r7, [r6]
 80003ae:	e7e2      	b.n	8000376 <__udivmoddi4+0x9a>
 80003b0:	b902      	cbnz	r2, 80003b4 <__udivmoddi4+0xd8>
 80003b2:	deff      	udf	#255	; 0xff
 80003b4:	fab2 f382 	clz	r3, r2
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	f040 809f 	bne.w	80004fc <__udivmoddi4+0x220>
 80003be:	1a8a      	subs	r2, r1, r2
 80003c0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c4:	fa1f f78c 	uxth.w	r7, ip
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ce:	fb0e 2015 	mls	r0, lr, r5, r2
 80003d2:	0c22      	lsrs	r2, r4, #16
 80003d4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003d8:	fb07 f005 	mul.w	r0, r7, r5
 80003dc:	4290      	cmp	r0, r2
 80003de:	d90f      	bls.n	8000400 <__udivmoddi4+0x124>
 80003e0:	eb1c 0202 	adds.w	r2, ip, r2
 80003e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003e8:	bf2c      	ite	cs
 80003ea:	f04f 0901 	movcs.w	r9, #1
 80003ee:	f04f 0900 	movcc.w	r9, #0
 80003f2:	4290      	cmp	r0, r2
 80003f4:	d903      	bls.n	80003fe <__udivmoddi4+0x122>
 80003f6:	f1b9 0f00 	cmp.w	r9, #0
 80003fa:	f000 80ce 	beq.w	800059a <__udivmoddi4+0x2be>
 80003fe:	4645      	mov	r5, r8
 8000400:	1a12      	subs	r2, r2, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb2 f0fe 	udiv	r0, r2, lr
 8000408:	fb0e 2210 	mls	r2, lr, r0, r2
 800040c:	fb00 f707 	mul.w	r7, r0, r7
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	42a7      	cmp	r7, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x14e>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x14c>
 8000422:	42a7      	cmp	r7, r4
 8000424:	f200 80b3 	bhi.w	800058e <__udivmoddi4+0x2b2>
 8000428:	4610      	mov	r0, r2
 800042a:	1be4      	subs	r4, r4, r7
 800042c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000430:	e79c      	b.n	800036c <__udivmoddi4+0x90>
 8000432:	f1c1 0420 	rsb	r4, r1, #32
 8000436:	408b      	lsls	r3, r1
 8000438:	fa05 fc01 	lsl.w	ip, r5, r1
 800043c:	fa22 f704 	lsr.w	r7, r2, r4
 8000440:	40e5      	lsrs	r5, r4
 8000442:	408a      	lsls	r2, r1
 8000444:	431f      	orrs	r7, r3
 8000446:	fa20 f304 	lsr.w	r3, r0, r4
 800044a:	4088      	lsls	r0, r1
 800044c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000450:	ea43 030c 	orr.w	r3, r3, ip
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800045c:	fbb5 fef8 	udiv	lr, r5, r8
 8000460:	fb08 551e 	mls	r5, r8, lr, r5
 8000464:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000468:	fb0e f90c 	mul.w	r9, lr, ip
 800046c:	45a9      	cmp	r9, r5
 800046e:	d90e      	bls.n	800048e <__udivmoddi4+0x1b2>
 8000470:	197d      	adds	r5, r7, r5
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	bf2c      	ite	cs
 8000478:	f04f 0b01 	movcs.w	fp, #1
 800047c:	f04f 0b00 	movcc.w	fp, #0
 8000480:	45a9      	cmp	r9, r5
 8000482:	d903      	bls.n	800048c <__udivmoddi4+0x1b0>
 8000484:	f1bb 0f00 	cmp.w	fp, #0
 8000488:	f000 808d 	beq.w	80005a6 <__udivmoddi4+0x2ca>
 800048c:	46d6      	mov	lr, sl
 800048e:	eba5 0509 	sub.w	r5, r5, r9
 8000492:	fa1f f983 	uxth.w	r9, r3
 8000496:	fbb5 f3f8 	udiv	r3, r5, r8
 800049a:	fb08 5513 	mls	r5, r8, r3, r5
 800049e:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a2:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80004a6:	45ac      	cmp	ip, r5
 80004a8:	d906      	bls.n	80004b8 <__udivmoddi4+0x1dc>
 80004aa:	197d      	adds	r5, r7, r5
 80004ac:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x1da>
 80004b2:	45ac      	cmp	ip, r5
 80004b4:	d87e      	bhi.n	80005b4 <__udivmoddi4+0x2d8>
 80004b6:	4643      	mov	r3, r8
 80004b8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004bc:	eba5 050c 	sub.w	r5, r5, ip
 80004c0:	fba3 9802 	umull	r9, r8, r3, r2
 80004c4:	4545      	cmp	r5, r8
 80004c6:	46ce      	mov	lr, r9
 80004c8:	46c4      	mov	ip, r8
 80004ca:	d302      	bcc.n	80004d2 <__udivmoddi4+0x1f6>
 80004cc:	d106      	bne.n	80004dc <__udivmoddi4+0x200>
 80004ce:	4548      	cmp	r0, r9
 80004d0:	d204      	bcs.n	80004dc <__udivmoddi4+0x200>
 80004d2:	3b01      	subs	r3, #1
 80004d4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004dc:	2e00      	cmp	r6, #0
 80004de:	d06f      	beq.n	80005c0 <__udivmoddi4+0x2e4>
 80004e0:	ebb0 020e 	subs.w	r2, r0, lr
 80004e4:	eb65 050c 	sbc.w	r5, r5, ip
 80004e8:	40ca      	lsrs	r2, r1
 80004ea:	fa05 f404 	lsl.w	r4, r5, r4
 80004ee:	40cd      	lsrs	r5, r1
 80004f0:	4618      	mov	r0, r3
 80004f2:	4314      	orrs	r4, r2
 80004f4:	2100      	movs	r1, #0
 80004f6:	e9c6 4500 	strd	r4, r5, [r6]
 80004fa:	e73c      	b.n	8000376 <__udivmoddi4+0x9a>
 80004fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000500:	f1c3 0220 	rsb	r2, r3, #32
 8000504:	4099      	lsls	r1, r3
 8000506:	409c      	lsls	r4, r3
 8000508:	40d5      	lsrs	r5, r2
 800050a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800050e:	fa20 f202 	lsr.w	r2, r0, r2
 8000512:	fa1f f78c 	uxth.w	r7, ip
 8000516:	fbb5 f0fe 	udiv	r0, r5, lr
 800051a:	430a      	orrs	r2, r1
 800051c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000520:	0c11      	lsrs	r1, r2, #16
 8000522:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000526:	fb00 f507 	mul.w	r5, r0, r7
 800052a:	428d      	cmp	r5, r1
 800052c:	d90e      	bls.n	800054c <__udivmoddi4+0x270>
 800052e:	eb1c 0101 	adds.w	r1, ip, r1
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	bf2c      	ite	cs
 8000538:	f04f 0901 	movcs.w	r9, #1
 800053c:	f04f 0900 	movcc.w	r9, #0
 8000540:	428d      	cmp	r5, r1
 8000542:	d902      	bls.n	800054a <__udivmoddi4+0x26e>
 8000544:	f1b9 0f00 	cmp.w	r9, #0
 8000548:	d031      	beq.n	80005ae <__udivmoddi4+0x2d2>
 800054a:	4640      	mov	r0, r8
 800054c:	1b49      	subs	r1, r1, r5
 800054e:	b292      	uxth	r2, r2
 8000550:	fbb1 f5fe 	udiv	r5, r1, lr
 8000554:	fb0e 1115 	mls	r1, lr, r5, r1
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	fb05 f107 	mul.w	r1, r5, r7
 8000560:	4291      	cmp	r1, r2
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x298>
 8000564:	eb1c 0202 	adds.w	r2, ip, r2
 8000568:	f105 38ff 	add.w	r8, r5, #4294967295
 800056c:	d201      	bcs.n	8000572 <__udivmoddi4+0x296>
 800056e:	4291      	cmp	r1, r2
 8000570:	d823      	bhi.n	80005ba <__udivmoddi4+0x2de>
 8000572:	4645      	mov	r5, r8
 8000574:	1a52      	subs	r2, r2, r1
 8000576:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800057a:	e726      	b.n	80003ca <__udivmoddi4+0xee>
 800057c:	4631      	mov	r1, r6
 800057e:	4630      	mov	r0, r6
 8000580:	e6f9      	b.n	8000376 <__udivmoddi4+0x9a>
 8000582:	1a84      	subs	r4, r0, r2
 8000584:	eb65 0203 	sbc.w	r2, r5, r3
 8000588:	2001      	movs	r0, #1
 800058a:	4617      	mov	r7, r2
 800058c:	e70b      	b.n	80003a6 <__udivmoddi4+0xca>
 800058e:	4464      	add	r4, ip
 8000590:	3802      	subs	r0, #2
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14e>
 8000594:	4464      	add	r4, ip
 8000596:	3802      	subs	r0, #2
 8000598:	e6e4      	b.n	8000364 <__udivmoddi4+0x88>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e72f      	b.n	8000400 <__udivmoddi4+0x124>
 80005a0:	3902      	subs	r1, #2
 80005a2:	4462      	add	r2, ip
 80005a4:	e6c9      	b.n	800033a <__udivmoddi4+0x5e>
 80005a6:	f1ae 0e02 	sub.w	lr, lr, #2
 80005aa:	443d      	add	r5, r7
 80005ac:	e76f      	b.n	800048e <__udivmoddi4+0x1b2>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	e7cb      	b.n	800054c <__udivmoddi4+0x270>
 80005b4:	3b02      	subs	r3, #2
 80005b6:	443d      	add	r5, r7
 80005b8:	e77e      	b.n	80004b8 <__udivmoddi4+0x1dc>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	e7d9      	b.n	8000574 <__udivmoddi4+0x298>
 80005c0:	4618      	mov	r0, r3
 80005c2:	4631      	mov	r1, r6
 80005c4:	e6d7      	b.n	8000376 <__udivmoddi4+0x9a>
 80005c6:	bf00      	nop

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f002 fcce 	bl	8002f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f83c 	bl	8000650 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005d8:	f000 f8d8 	bl	800078c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f001 f81a 	bl	8001614 <MX_GPIO_Init>
  MX_DCACHE1_Init();
 80005e0:	f000 f952 	bl	8000888 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 80005e4:	f000 f966 	bl	80008b4 <MX_DCACHE2_Init>
  MX_ICACHE_Init();
 80005e8:	f000 fc58 	bl	8000e9c <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80005ec:	f000 fc88 	bl	8000f00 <MX_LPUART1_UART_Init>
  MX_OCTOSPI1_Init();
 80005f0:	f000 fdee 	bl	80011d0 <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 80005f4:	f000 f926 	bl	8000844 <MX_CRC_Init>
  MX_DMA2D_Init();
 80005f8:	f000 f972 	bl	80008e0 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80005fc:	f000 f9ae 	bl	800095c <MX_DSIHOST_DSI_Init>
  MX_GFXMMU_Init();
 8000600:	f000 faa8 	bl	8000b54 <MX_GFXMMU_Init>
  MX_GPU2D_Init();
 8000604:	f000 faf6 	bl	8000bf4 <MX_GPU2D_Init>
  MX_LTDC_Init();
 8000608:	f000 fd5e 	bl	80010c8 <MX_LTDC_Init>
  MX_RTC_Init();
 800060c:	f000 ff12 	bl	8001434 <MX_RTC_Init>
  MX_OCTOSPI2_Init();
 8000610:	f000 fe78 	bl	8001304 <MX_OCTOSPI2_Init>
  MX_ADF1_Init();
 8000614:	f000 f8c8 	bl	80007a8 <MX_ADF1_Init>
  MX_I2C1_Init();
 8000618:	f000 fb00 	bl	8000c1c <MX_I2C1_Init>
  MX_I2C2_Init();
 800061c:	f000 fb3e 	bl	8000c9c <MX_I2C2_Init>
  MX_I2C4_Init();
 8000620:	f000 fbbc 	bl	8000d9c <MX_I2C4_Init>
  MX_I2C6_Init();
 8000624:	f000 fbfa 	bl	8000e1c <MX_I2C6_Init>
  MX_USART1_UART_Init();
 8000628:	f000 fcb6 	bl	8000f98 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800062c:	f000 fd00 	bl	8001030 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8000630:	f000 ff82 	bl	8001538 <MX_SPI1_Init>
  MX_I2C3_Init();
 8000634:	f000 fb72 	bl	8000d1c <MX_I2C3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIO3_GPIO_Port, GPIO3_Pin);
 8000638:	2120      	movs	r1, #32
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <main+0x80>)
 800063c:	f004 fb86 	bl	8004d4c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000644:	f002 fce2 	bl	800300c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIO3_GPIO_Port, GPIO3_Pin);
 8000648:	e7f6      	b.n	8000638 <main+0x6c>
 800064a:	bf00      	nop
 800064c:	42020400 	.word	0x42020400

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b0a6      	sub	sp, #152	; 0x98
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800065a:	2260      	movs	r2, #96	; 0x60
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f00c fbb9 	bl	800cdd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
 8000674:	615a      	str	r2, [r3, #20]
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
 8000686:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000688:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800068c:	f006 fa80 	bl	8006b90 <HAL_PWREx_ControlVoltageScaling>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000696:	f001 fa47 	bl	8001b28 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800069a:	f006 fa69 	bl	8006b70 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800069e:	4b3a      	ldr	r3, [pc, #232]	; (8000788 <SystemClock_Config+0x138>)
 80006a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <SystemClock_Config+0x138>)
 80006a6:	f023 0318 	bic.w	r3, r3, #24
 80006aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80006ae:	2325      	movs	r3, #37	; 0x25
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006b8:	2381      	movs	r3, #129	; 0x81
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	2303      	movs	r3, #3
 80006c8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006d2:	230a      	movs	r3, #10
 80006d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80006ea:	230c      	movs	r3, #12
 80006ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006fa:	4618      	mov	r0, r3
 80006fc:	f006 fb34 	bl	8006d68 <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000706:	f001 fa0f 	bl	8001b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	231f      	movs	r3, #31
 800070c:	623b      	str	r3, [r7, #32]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2303      	movs	r3, #3
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2104      	movs	r1, #4
 8000728:	4618      	mov	r0, r3
 800072a:	f007 f9f9 	bl	8007b20 <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000734:	f001 f9f8 	bl	8001b28 <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <SystemClock_Config+0x138>)
 800073a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <SystemClock_Config+0x138>)
 8000740:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000744:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemClock_Config+0x138>)
 800074a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800074e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 800075a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800075e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 8000764:	f240 53b7 	movw	r3, #1463	; 0x5b7
 8000768:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 800076a:	2322      	movs	r3, #34	; 0x22
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 800076e:	2320      	movs	r3, #32
 8000770:	61fb      	str	r3, [r7, #28]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	4618      	mov	r0, r3
 8000778:	f00a fcb8 	bl	800b0ec <HAL_RCCEx_CRSConfig>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 800077c:	f00a fca4 	bl	800b0c8 <HAL_RCCEx_EnableLSECSS>
}
 8000780:	bf00      	nop
 8000782:	3798      	adds	r7, #152	; 0x98
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	46020c00 	.word	0x46020c00

0800078c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000790:	f006 fada 	bl	8006d48 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000794:	2002      	movs	r0, #2
 8000796:	f006 fa87 	bl	8006ca8 <HAL_PWREx_ConfigSupply>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80007a0:	f001 f9c2 	bl	8001b28 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <MX_ADF1_Init+0x90>)
 80007ae:	4a23      	ldr	r2, [pc, #140]	; (800083c <MX_ADF1_Init+0x94>)
 80007b0:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 80007b2:	4b21      	ldr	r3, [pc, #132]	; (8000838 <MX_ADF1_Init+0x90>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_ADF1_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_ADF1_Init+0x90>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_ADF1_Init+0x90>)
 80007c8:	2210      	movs	r2, #16
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_ADF1_Init+0x90>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_ADF1_Init+0x90>)
 80007d4:	2204      	movs	r2, #4
 80007d6:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_ADF1_Init+0x90>)
 80007da:	2201      	movs	r2, #1
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 80007de:	4816      	ldr	r0, [pc, #88]	; (8000838 <MX_ADF1_Init+0x90>)
 80007e0:	f005 f866 	bl	80058b0 <HAL_MDF_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADF1_Init+0x46>
  {
    Error_Handler();
 80007ea:	f001 f99d 	bl	8001b28 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_ADF1_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_ADF1_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_ADF1_Init+0x98>)
 80007fc:	2240      	movs	r2, #64	; 0x40
 80007fe:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_ADF1_Init+0x98>)
 8000802:	2202      	movs	r2, #2
 8000804:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_ADF1_Init+0x98>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_ADF1_Init+0x98>)
 800080e:	2200      	movs	r2, #0
 8000810:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_ADF1_Init+0x98>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_ADF1_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <MX_ADF1_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <MX_ADF1_Init+0x98>)
 800082a:	2200      	movs	r2, #0
 800082c:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <MX_ADF1_Init+0x98>)
 8000830:	2200      	movs	r2, #0
 8000832:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000d28 	.word	0x20000d28
 800083c:	46024080 	.word	0x46024080
 8000840:	20000d6c 	.word	0x20000d6c

08000844 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <MX_CRC_Init+0x3c>)
 800084a:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <MX_CRC_Init+0x40>)
 800084c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_CRC_Init+0x3c>)
 8000850:	2200      	movs	r2, #0
 8000852:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_CRC_Init+0x3c>)
 8000856:	2200      	movs	r2, #0
 8000858:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_CRC_Init+0x3c>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <MX_CRC_Init+0x3c>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_CRC_Init+0x3c>)
 8000868:	2201      	movs	r2, #1
 800086a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_CRC_Init+0x3c>)
 800086e:	f002 fcd1 	bl	8003214 <HAL_CRC_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000878:	f001 f956 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000de8 	.word	0x20000de8
 8000884:	40023000 	.word	0x40023000

08000888 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <MX_DCACHE1_Init+0x24>)
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <MX_DCACHE1_Init+0x28>)
 8000890:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_DCACHE1_Init+0x24>)
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_DCACHE1_Init+0x24>)
 800089a:	f002 fdad 	bl	80033f8 <HAL_DCACHE_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 80008a4:	f001 f940 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000e0c 	.word	0x20000e0c
 80008b0:	40031400 	.word	0x40031400

080008b4 <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_DCACHE2_Init+0x24>)
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <MX_DCACHE2_Init+0x28>)
 80008bc:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_DCACHE2_Init+0x24>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_DCACHE2_Init+0x24>)
 80008c6:	f002 fd97 	bl	80033f8 <HAL_DCACHE_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_DCACHE2_Init+0x20>
  {
    Error_Handler();
 80008d0:	f001 f92a 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000e38 	.word	0x20000e38
 80008dc:	40031800 	.word	0x40031800

080008e0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_DMA2D_Init+0x74>)
 80008e6:	4a1c      	ldr	r2, [pc, #112]	; (8000958 <MX_DMA2D_Init+0x78>)
 80008e8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <MX_DMA2D_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_DMA2D_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 608;
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_DMA2D_Init+0x74>)
 80008f8:	f44f 7218 	mov.w	r2, #608	; 0x260
 80008fc:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_DMA2D_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_DMA2D_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_DMA2D_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MX_DMA2D_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_DMA2D_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MX_DMA2D_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_DMA2D_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_DMA2D_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800092e:	4809      	ldr	r0, [pc, #36]	; (8000954 <MX_DMA2D_Init+0x74>)
 8000930:	f002 fe89 	bl	8003646 <HAL_DMA2D_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 800093a:	f001 f8f5 	bl	8001b28 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800093e:	2101      	movs	r1, #1
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_DMA2D_Init+0x74>)
 8000942:	f002 fff1 	bl	8003928 <HAL_DMA2D_ConfigLayer>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 800094c:	f001 f8ec 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000e64 	.word	0x20000e64
 8000958:	4002b000 	.word	0x4002b000

0800095c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b0ae      	sub	sp, #184	; 0xb8
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000962:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
 8000972:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000974:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000978:	2224      	movs	r2, #36	; 0x24
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f00c fa2a 	bl	800cdd6 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000982:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
 8000992:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000994:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000998:	2234      	movs	r2, #52	; 0x34
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f00c fa1a 	bl	800cdd6 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	222c      	movs	r2, #44	; 0x2c
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f00c fa14 	bl	800cdd6 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80009ae:	4b67      	ldr	r3, [pc, #412]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1f0>)
 80009b0:	4a67      	ldr	r2, [pc, #412]	; (8000b50 <MX_DSIHOST_DSI_Init+0x1f4>)
 80009b2:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009b4:	4b65      	ldr	r3, [pc, #404]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1f0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80009ba:	4b64      	ldr	r3, [pc, #400]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1f0>)
 80009bc:	2204      	movs	r2, #4
 80009be:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 80009c0:	4b62      	ldr	r3, [pc, #392]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1f0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 80009c6:	4b61      	ldr	r3, [pc, #388]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1f0>)
 80009c8:	2208      	movs	r2, #8
 80009ca:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 80009cc:	4b5f      	ldr	r3, [pc, #380]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1f0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 80009d2:	237d      	movs	r3, #125	; 0x7d
 80009d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 80009d8:	2304      	movs	r3, #4
 80009da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80009de:	2302      	movs	r3, #2
 80009e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 80009e4:	2301      	movs	r3, #1
 80009e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 80009ea:	2300      	movs	r3, #0
 80009ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80009fa:	4619      	mov	r1, r3
 80009fc:	4853      	ldr	r0, [pc, #332]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1f0>)
 80009fe:	f003 f93b 	bl	8003c78 <HAL_DSI_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 8000a08:	f001 f88e 	bl	8001b28 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.LowPowerReadTimeout = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.BTATimeout = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000a40:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a44:	4619      	mov	r1, r3
 8000a46:	4841      	ldr	r0, [pc, #260]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a48:	f003 fdc6 	bl	80045d8 <HAL_DSI_ConfigHostTimeouts>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_DSIHOST_DSI_Init+0xfa>
  {
    Error_Handler();
 8000a52:	f001 f869 	bl	8001b28 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 10;
 8000a56:	230a      	movs	r3, #10
 8000a58:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.ClockLaneLP2HSTime = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneHS2LPTime = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneLP2HSTime = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.DataLaneMaxReadTime = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.StopWaitTime = 10;
 8000a6a:	230a      	movs	r3, #10
 8000a6c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a6e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a72:	4619      	mov	r1, r3
 8000a74:	4835      	ldr	r0, [pc, #212]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a76:	f003 fd19 	bl	80044ac <HAL_DSI_ConfigPhyTimer>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000a80:	f001 f852 	bl	8001b28 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a84:	2104      	movs	r1, #4
 8000a86:	4831      	ldr	r0, [pc, #196]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a88:	f003 fce8 	bl	800445c <HAL_DSI_ConfigFlowControl>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000a92:	f001 f849 	bl	8001b28 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a96:	2100      	movs	r1, #0
 8000a98:	482c      	ldr	r0, [pc, #176]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1f0>)
 8000a9a:	f003 f9c1 	bl	8003e20 <HAL_DSI_ConfigErrorMonitor>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 8000aa4:	f001 f840 	bl	8001b28 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000adc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481a      	ldr	r0, [pc, #104]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1f0>)
 8000ae4:	f003 fc5c 	bl	80043a0 <HAL_DSI_ConfigCommand>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_DSIHOST_DSI_Init+0x196>
  {
    Error_Handler();
 8000aee:	f001 f81b 	bl	8001b28 <Error_Handler>
  }
  CmdCfg.ColorCoding = DSI_RGB888;
 8000af2:	2305      	movs	r3, #5
 8000af4:	60bb      	str	r3, [r7, #8]
  CmdCfg.CommandSize = 416;
 8000af6:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8000afa:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000afc:	2310      	movs	r3, #16
 8000afe:	613b      	str	r3, [r7, #16]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000b14:	2340      	movs	r3, #64	; 0x40
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480a      	ldr	r0, [pc, #40]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1f0>)
 8000b22:	f003 fb66 	bl	80041f2 <HAL_DSI_ConfigAdaptedCommandMode>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 8000b2c:	f000 fffc 	bl	8001b28 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b30:	2100      	movs	r1, #0
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1f0>)
 8000b34:	f003 fb32 	bl	800419c <HAL_DSI_SetGenericVCID>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 8000b3e:	f000 fff3 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	37b8      	adds	r7, #184	; 0xb8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000ec4 	.word	0x20000ec4
 8000b50:	40016c00 	.word	0x40016c00

08000b54 <MX_GFXMMU_Init>:
  * @brief GFXMMU Initialization Function
  * @param None
  * @retval None
  */
static void MX_GFXMMU_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END GFXMMU_Init 0 */

  /* USER CODE BEGIN GFXMMU_Init 1 */

  /* USER CODE END GFXMMU_Init 1 */
  hgfxmmu.Instance = GFXMMU;
 8000b58:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <MX_GFXMMU_Init+0x94>)
 8000b5a:	4a24      	ldr	r2, [pc, #144]	; (8000bec <MX_GFXMMU_Init+0x98>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hgfxmmu.Init.BlocksPerLine = GFXMMU_256BLOCKS;
 8000b5e:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <MX_GFXMMU_Init+0x94>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
  hgfxmmu.Init.DefaultValue = 0;
 8000b64:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <MX_GFXMMU_Init+0x94>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hgfxmmu.Init.Buffers.Buf0Address = 0;
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <MX_GFXMMU_Init+0x94>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  hgfxmmu.Init.Buffers.Buf1Address = 0;
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <MX_GFXMMU_Init+0x94>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hgfxmmu.Init.Buffers.Buf2Address = 0;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <MX_GFXMMU_Init+0x94>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
  hgfxmmu.Init.Buffers.Buf3Address = 0;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_GFXMMU_Init+0x94>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  hgfxmmu.Init.CachePrefetch.Activation = ENABLE;
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_GFXMMU_Init+0x94>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	771a      	strb	r2, [r3, #28]
  hgfxmmu.Init.CachePrefetch.CacheLock = GFXMMU_CACHE_LOCK_ENABLE;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_GFXMMU_Init+0x94>)
 8000b8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b8e:	621a      	str	r2, [r3, #32]
  hgfxmmu.Init.CachePrefetch.CacheLockBuffer = GFXMMU_CACHE_LOCK_BUFFER0;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_GFXMMU_Init+0x94>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  hgfxmmu.Init.CachePrefetch.CacheForce = GFXMMU_CACHE_FORCE_ENABLE;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_GFXMMU_Init+0x94>)
 8000b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hgfxmmu.Init.CachePrefetch.OutterBufferability = GFXMMU_OUTTER_BUFFERABILITY_ENABLE;
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_GFXMMU_Init+0x94>)
 8000ba0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  hgfxmmu.Init.CachePrefetch.OutterCachability = GFXMMU_OUTTER_CACHABILITY_ENABLE;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_GFXMMU_Init+0x94>)
 8000ba8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bac:	631a      	str	r2, [r3, #48]	; 0x30
  hgfxmmu.Init.CachePrefetch.Prefetch = GFXMMU_PREFETCH_ENABLE;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_GFXMMU_Init+0x94>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	635a      	str	r2, [r3, #52]	; 0x34
  hgfxmmu.Init.Interrupts.Activation = ENABLE;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_GFXMMU_Init+0x94>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_GFXMMU_Init(&hgfxmmu) != HAL_OK)
 8000bbc:	480a      	ldr	r0, [pc, #40]	; (8000be8 <MX_GFXMMU_Init+0x94>)
 8000bbe:	f003 fdd1 	bl	8004764 <HAL_GFXMMU_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_GFXMMU_Init+0x78>
  {
    Error_Handler();
 8000bc8:	f000 ffae 	bl	8001b28 <Error_Handler>
  }
  if (HAL_GFXMMU_ConfigLut(&hgfxmmu, GFXMMU_LUT_FIRST, GFXMMU_LUT_SIZE, (uint32_t)gfxmmu_lut_config) != HAL_OK)
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_GFXMMU_Init+0x9c>)
 8000bce:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_GFXMMU_Init+0x94>)
 8000bd6:	f003 fe45 	bl	8004864 <HAL_GFXMMU_ConfigLut>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_GFXMMU_Init+0x90>
  {
    Error_Handler();
 8000be0:	f000 ffa2 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN GFXMMU_Init 2 */

  /* USER CODE END GFXMMU_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000ee8 	.word	0x20000ee8
 8000bec:	4002c000 	.word	0x4002c000
 8000bf0:	20000000 	.word	0x20000000

08000bf4 <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_GPU2D_Init+0x20>)
 8000bfa:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <MX_GPU2D_Init+0x24>)
 8000bfc:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_GPU2D_Init+0x20>)
 8000c00:	f004 f8be 	bl	8004d80 <HAL_GPU2D_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 8000c0a:	f000 ff8d 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000f30 	.word	0x20000f30
 8000c18:	4002f000 	.word	0x4002f000

08000c1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c22:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <MX_I2C1_Init+0x78>)
 8000c24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c28:	4a1b      	ldr	r2, [pc, #108]	; (8000c98 <MX_I2C1_Init+0x7c>)
 8000c2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c56:	480e      	ldr	r0, [pc, #56]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c58:	f004 f8fd 	bl	8004e56 <HAL_I2C_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c62:	f000 ff61 	bl	8001b28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c66:	2100      	movs	r1, #0
 8000c68:	4809      	ldr	r0, [pc, #36]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c6a:	f004 f98f 	bl	8004f8c <HAL_I2CEx_ConfigAnalogFilter>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c74:	f000 ff58 	bl	8001b28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c7c:	f004 f9d1 	bl	8005022 <HAL_I2CEx_ConfigDigitalFilter>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c86:	f000 ff4f 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000f3c 	.word	0x20000f3c
 8000c94:	40005400 	.word	0x40005400
 8000c98:	30909dec 	.word	0x30909dec

08000c9c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_I2C2_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <MX_I2C2_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_I2C2_Init+0x74>)
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	; (8000d18 <MX_I2C2_Init+0x7c>)
 8000caa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_I2C2_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_I2C2_Init+0x74>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_I2C2_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_I2C2_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_I2C2_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_I2C2_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_I2C2_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cd6:	480e      	ldr	r0, [pc, #56]	; (8000d10 <MX_I2C2_Init+0x74>)
 8000cd8:	f004 f8bd 	bl	8004e56 <HAL_I2C_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ce2:	f000 ff21 	bl	8001b28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <MX_I2C2_Init+0x74>)
 8000cea:	f004 f94f 	bl	8004f8c <HAL_I2CEx_ConfigAnalogFilter>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000cf4:	f000 ff18 	bl	8001b28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_I2C2_Init+0x74>)
 8000cfc:	f004 f991 	bl	8005022 <HAL_I2CEx_ConfigDigitalFilter>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d06:	f000 ff0f 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000f90 	.word	0x20000f90
 8000d14:	40005800 	.word	0x40005800
 8000d18:	30909dec 	.word	0x30909dec

08000d1c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_I2C3_Init+0x74>)
 8000d22:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <MX_I2C3_Init+0x78>)
 8000d24:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_I2C3_Init+0x74>)
 8000d28:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <MX_I2C3_Init+0x7c>)
 8000d2a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_I2C3_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_I2C3_Init+0x74>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_I2C3_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_I2C3_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_I2C3_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_I2C3_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_I2C3_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d56:	480e      	ldr	r0, [pc, #56]	; (8000d90 <MX_I2C3_Init+0x74>)
 8000d58:	f004 f87d 	bl	8004e56 <HAL_I2C_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000d62:	f000 fee1 	bl	8001b28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d66:	2100      	movs	r1, #0
 8000d68:	4809      	ldr	r0, [pc, #36]	; (8000d90 <MX_I2C3_Init+0x74>)
 8000d6a:	f004 f90f 	bl	8004f8c <HAL_I2CEx_ConfigAnalogFilter>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000d74:	f000 fed8 	bl	8001b28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_I2C3_Init+0x74>)
 8000d7c:	f004 f951 	bl	8005022 <HAL_I2CEx_ConfigDigitalFilter>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000d86:	f000 fecf 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000fe4 	.word	0x20000fe4
 8000d94:	46002800 	.word	0x46002800
 8000d98:	30909dec 	.word	0x30909dec

08000d9c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <MX_I2C4_Init+0x74>)
 8000da2:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <MX_I2C4_Init+0x78>)
 8000da4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30909DEC;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <MX_I2C4_Init+0x74>)
 8000da8:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <MX_I2C4_Init+0x7c>)
 8000daa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000dac:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <MX_I2C4_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <MX_I2C4_Init+0x74>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <MX_I2C4_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <MX_I2C4_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <MX_I2C4_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_I2C4_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_I2C4_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000dd6:	480e      	ldr	r0, [pc, #56]	; (8000e10 <MX_I2C4_Init+0x74>)
 8000dd8:	f004 f83d 	bl	8004e56 <HAL_I2C_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000de2:	f000 fea1 	bl	8001b28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000de6:	2100      	movs	r1, #0
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <MX_I2C4_Init+0x74>)
 8000dea:	f004 f8cf 	bl	8004f8c <HAL_I2CEx_ConfigAnalogFilter>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000df4:	f000 fe98 	bl	8001b28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_I2C4_Init+0x74>)
 8000dfc:	f004 f911 	bl	8005022 <HAL_I2CEx_ConfigDigitalFilter>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000e06:	f000 fe8f 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20001038 	.word	0x20001038
 8000e14:	40008400 	.word	0x40008400
 8000e18:	30909dec 	.word	0x30909dec

08000e1c <MX_I2C6_Init>:
  * @brief I2C6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C6_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C6_Init 0 */

  /* USER CODE BEGIN I2C6_Init 1 */

  /* USER CODE END I2C6_Init 1 */
  hi2c6.Instance = I2C6;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <MX_I2C6_Init+0x74>)
 8000e22:	4a1c      	ldr	r2, [pc, #112]	; (8000e94 <MX_I2C6_Init+0x78>)
 8000e24:	601a      	str	r2, [r3, #0]
  hi2c6.Init.Timing = 0x30909DEC;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_I2C6_Init+0x74>)
 8000e28:	4a1b      	ldr	r2, [pc, #108]	; (8000e98 <MX_I2C6_Init+0x7c>)
 8000e2a:	605a      	str	r2, [r3, #4]
  hi2c6.Init.OwnAddress1 = 0;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <MX_I2C6_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hi2c6.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <MX_I2C6_Init+0x74>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	60da      	str	r2, [r3, #12]
  hi2c6.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <MX_I2C6_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  hi2c6.Init.OwnAddress2 = 0;
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_I2C6_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
  hi2c6.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <MX_I2C6_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  hi2c6.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_I2C6_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	61da      	str	r2, [r3, #28]
  hi2c6.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_I2C6_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c6) != HAL_OK)
 8000e56:	480e      	ldr	r0, [pc, #56]	; (8000e90 <MX_I2C6_Init+0x74>)
 8000e58:	f003 fffd 	bl	8004e56 <HAL_I2C_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_I2C6_Init+0x4a>
  {
    Error_Handler();
 8000e62:	f000 fe61 	bl	8001b28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c6, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e66:	2100      	movs	r1, #0
 8000e68:	4809      	ldr	r0, [pc, #36]	; (8000e90 <MX_I2C6_Init+0x74>)
 8000e6a:	f004 f88f 	bl	8004f8c <HAL_I2CEx_ConfigAnalogFilter>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_I2C6_Init+0x5c>
  {
    Error_Handler();
 8000e74:	f000 fe58 	bl	8001b28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c6, 0) != HAL_OK)
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_I2C6_Init+0x74>)
 8000e7c:	f004 f8d1 	bl	8005022 <HAL_I2CEx_ConfigDigitalFilter>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_I2C6_Init+0x6e>
  {
    Error_Handler();
 8000e86:	f000 fe4f 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C6_Init 2 */

  /* USER CODE END I2C6_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000108c 	.word	0x2000108c
 8000e94:	40009c00 	.word	0x40009c00
 8000e98:	30909dec 	.word	0x30909dec

08000e9c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8000eb0:	f004 f914 	bl	80050dc <HAL_ICACHE_Disable>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000eba:	f000 fe35 	bl	8001b28 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 8000ebe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec2:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8000ec4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000ec8:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	2000      	movs	r0, #0
 8000edc:	f004 f92e 	bl	800513c <HAL_ICACHE_EnableRemapRegion>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 8000ee6:	f000 fe1f 	bl	8001b28 <Error_Handler>
  }

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000eea:	f004 f8e7 	bl	80050bc <HAL_ICACHE_Enable>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ICACHE_Init+0x5c>
  {
    Error_Handler();
 8000ef4:	f000 fe18 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f06:	4a22      	ldr	r2, [pc, #136]	; (8000f90 <MX_LPUART1_UART_Init+0x90>)
 8000f08:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f0c:	4a21      	ldr	r2, [pc, #132]	; (8000f94 <MX_LPUART1_UART_Init+0x94>)
 8000f0e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f24:	220c      	movs	r2, #12
 8000f26:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f2a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f2e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f42:	4812      	ldr	r0, [pc, #72]	; (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f44:	f00b fa0e 	bl	800c364 <HAL_UART_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f4e:	f000 fdeb 	bl	8001b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f52:	2100      	movs	r1, #0
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f56:	f00b fe55 	bl	800cc04 <HAL_UARTEx_SetTxFifoThreshold>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000f60:	f000 fde2 	bl	8001b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f64:	2100      	movs	r1, #0
 8000f66:	4809      	ldr	r0, [pc, #36]	; (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f68:	f00b fe8a 	bl	800cc80 <HAL_UARTEx_SetRxFifoThreshold>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000f72:	f000 fdd9 	bl	8001b28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f78:	f00b fe0b 	bl	800cb92 <HAL_UARTEx_DisableFifoMode>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000f82:	f000 fdd1 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200010e0 	.word	0x200010e0
 8000f90:	46002400 	.word	0x46002400
 8000f94:	00033324 	.word	0x00033324

08000f98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f9c:	4b22      	ldr	r3, [pc, #136]	; (8001028 <MX_USART1_UART_Init+0x90>)
 8000f9e:	4a23      	ldr	r2, [pc, #140]	; (800102c <MX_USART1_UART_Init+0x94>)
 8000fa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fa2:	4b21      	ldr	r3, [pc, #132]	; (8001028 <MX_USART1_UART_Init+0x90>)
 8000fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000faa:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <MX_USART1_UART_Init+0x90>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb0:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <MX_USART1_UART_Init+0x90>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <MX_USART1_UART_Init+0x90>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <MX_USART1_UART_Init+0x90>)
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <MX_USART1_UART_Init+0x90>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_USART1_UART_Init+0x90>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_USART1_UART_Init+0x90>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_USART1_UART_Init+0x90>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_USART1_UART_Init+0x90>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fe0:	4811      	ldr	r0, [pc, #68]	; (8001028 <MX_USART1_UART_Init+0x90>)
 8000fe2:	f00b f9bf 	bl	800c364 <HAL_UART_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000fec:	f000 fd9c 	bl	8001b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <MX_USART1_UART_Init+0x90>)
 8000ff4:	f00b fe06 	bl	800cc04 <HAL_UARTEx_SetTxFifoThreshold>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ffe:	f000 fd93 	bl	8001b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001002:	2100      	movs	r1, #0
 8001004:	4808      	ldr	r0, [pc, #32]	; (8001028 <MX_USART1_UART_Init+0x90>)
 8001006:	f00b fe3b 	bl	800cc80 <HAL_UARTEx_SetRxFifoThreshold>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001010:	f000 fd8a 	bl	8001b28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_USART1_UART_Init+0x90>)
 8001016:	f00b fdbc 	bl	800cb92 <HAL_UARTEx_DisableFifoMode>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001020:	f000 fd82 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20001174 	.word	0x20001174
 800102c:	40013800 	.word	0x40013800

08001030 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <MX_USART6_UART_Init+0x90>)
 8001036:	4a23      	ldr	r2, [pc, #140]	; (80010c4 <MX_USART6_UART_Init+0x94>)
 8001038:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <MX_USART6_UART_Init+0x90>)
 800103c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001040:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <MX_USART6_UART_Init+0x90>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <MX_USART6_UART_Init+0x90>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <MX_USART6_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <MX_USART6_UART_Init+0x90>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <MX_USART6_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_USART6_UART_Init+0x90>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <MX_USART6_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_USART6_UART_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <MX_USART6_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001078:	4811      	ldr	r0, [pc, #68]	; (80010c0 <MX_USART6_UART_Init+0x90>)
 800107a:	f00b f973 	bl	800c364 <HAL_UART_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001084:	f000 fd50 	bl	8001b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001088:	2100      	movs	r1, #0
 800108a:	480d      	ldr	r0, [pc, #52]	; (80010c0 <MX_USART6_UART_Init+0x90>)
 800108c:	f00b fdba 	bl	800cc04 <HAL_UARTEx_SetTxFifoThreshold>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001096:	f000 fd47 	bl	8001b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800109a:	2100      	movs	r1, #0
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <MX_USART6_UART_Init+0x90>)
 800109e:	f00b fdef 	bl	800cc80 <HAL_UARTEx_SetRxFifoThreshold>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80010a8:	f000 fd3e 	bl	8001b28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_USART6_UART_Init+0x90>)
 80010ae:	f00b fd70 	bl	800cb92 <HAL_UARTEx_DisableFifoMode>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80010b8:	f000 fd36 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20001208 	.word	0x20001208
 80010c4:	40006400 	.word	0x40006400

080010c8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08e      	sub	sp, #56	; 0x38
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2234      	movs	r2, #52	; 0x34
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f00b fe7e 	bl	800cdd6 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80010da:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <MX_LTDC_Init+0x100>)
 80010dc:	4a3b      	ldr	r2, [pc, #236]	; (80011cc <MX_LTDC_Init+0x104>)
 80010de:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 80010e0:	4b39      	ldr	r3, [pc, #228]	; (80011c8 <MX_LTDC_Init+0x100>)
 80010e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010e6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 80010e8:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <MX_LTDC_Init+0x100>)
 80010ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ee:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80010f0:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <MX_LTDC_Init+0x100>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80010f6:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <MX_LTDC_Init+0x100>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 80010fc:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <MX_LTDC_Init+0x100>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8001102:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <MX_LTDC_Init+0x100>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 0;
 8001108:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <MX_LTDC_Init+0x100>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 0;
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <MX_LTDC_Init+0x100>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 416;
 8001114:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <MX_LTDC_Init+0x100>)
 8001116:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 416;
 800111c:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <MX_LTDC_Init+0x100>)
 800111e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001122:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 416;
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <MX_LTDC_Init+0x100>)
 8001126:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 416;
 800112c:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <MX_LTDC_Init+0x100>)
 800112e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001132:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <MX_LTDC_Init+0x100>)
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <MX_LTDC_Init+0x100>)
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001144:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <MX_LTDC_Init+0x100>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800114c:	481e      	ldr	r0, [pc, #120]	; (80011c8 <MX_LTDC_Init+0x100>)
 800114e:	f004 f847 	bl	80051e0 <HAL_LTDC_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8001158:	f000 fce6 	bl	8001b28 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 416;
 8001160:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001164:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 416;
 800116a:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800116e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001174:	23ff      	movs	r3, #255	; 0xff
 8001176:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800117c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001180:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001182:	2305      	movs	r3, #5
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = GFXMMU_VIRTUAL_BUFFER0_BASE;
 8001186:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 416;
 800118c:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 416;
 8001192:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2200      	movs	r2, #0
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_LTDC_Init+0x100>)
 80011b2:	f004 f9a7 	bl	8005504 <HAL_LTDC_ConfigLayer>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 80011bc:	f000 fcb4 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	3738      	adds	r7, #56	; 0x38
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2000129c 	.word	0x2000129c
 80011cc:	40016800 	.word	0x40016800

080011d0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	; 0x30
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80011d6:	f107 0318 	add.w	r3, r7, #24
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]
 80011e6:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80011f6:	463b      	mov	r3, r7
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80011fe:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 8001200:	4a3d      	ldr	r2, [pc, #244]	; (80012f8 <MX_OCTOSPI1_Init+0x128>)
 8001202:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001204:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 8001206:	2201      	movs	r2, #1
 8001208:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800120a:	4b3a      	ldr	r3, [pc, #232]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8001210:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 8001212:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001216:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8001218:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 800121a:	221a      	movs	r2, #26
 800121c:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800121e:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 8001220:	2201      	movs	r2, #1
 8001222:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001224:	4b33      	ldr	r3, [pc, #204]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800122a:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 800122c:	2200      	movs	r2, #0
 800122e:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_64_BYTES;
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 8001232:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001236:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 16;
 8001238:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 800123a:	2210      	movs	r2, #16
 800123c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 8001240:	2200      	movs	r2, #0
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 8001246:	2200      	movs	r2, #0
 8001248:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 800124a:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 800124c:	2200      	movs	r2, #0
 800124e:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 8001252:	2208      	movs	r2, #8
 8001254:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 16;
 8001256:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 8001258:	2210      	movs	r2, #16
 800125a:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 800125c:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 800125e:	2200      	movs	r2, #0
 8001260:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001262:	4824      	ldr	r0, [pc, #144]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 8001264:	f004 fcd0 	bl	8005c08 <HAL_OSPI_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_OCTOSPI1_Init+0xa2>
  {
    Error_Handler();
 800126e:	f000 fc5b 	bl	8001b28 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001272:	2301      	movs	r3, #1
 8001274:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 8001276:	2301      	movs	r3, #1
 8001278:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_OCTOSPI1_Init+0x12c>)
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_OCTOSPI1_Init+0x130>)
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 8001286:	2301      	movs	r3, #1
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800128a:	f107 0318 	add.w	r3, r7, #24
 800128e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001292:	4619      	mov	r1, r3
 8001294:	4817      	ldr	r0, [pc, #92]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 8001296:	f004 fe37 	bl	8005f08 <HAL_OSPIM_Config>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_OCTOSPI1_Init+0xd4>
  {
    Error_Handler();
 80012a0:	f000 fc42 	bl	8001b28 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 80012ac:	2302      	movs	r3, #2
 80012ae:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi1, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012bc:	4619      	mov	r1, r3
 80012be:	480d      	ldr	r0, [pc, #52]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 80012c0:	f004 fd5e 	bl	8005d80 <HAL_OSPI_HyperbusCfg>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_OCTOSPI1_Init+0xfe>
  {
    Error_Handler();
 80012ca:	f000 fc2d 	bl	8001b28 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 80012d6:	463b      	mov	r3, r7
 80012d8:	4619      	mov	r1, r3
 80012da:	4806      	ldr	r0, [pc, #24]	; (80012f4 <MX_OCTOSPI1_Init+0x124>)
 80012dc:	f005 fc00 	bl	8006ae0 <HAL_OSPI_DLYB_SetConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_OCTOSPI1_Init+0x11a>
  {
    Error_Handler();
 80012e6:	f000 fc1f 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	3730      	adds	r7, #48	; 0x30
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20001344 	.word	0x20001344
 80012f8:	420d1400 	.word	0x420d1400
 80012fc:	00010002 	.word	0x00010002
 8001300:	01000002 	.word	0x01000002

08001304 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	; 0x30
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800130a:	f107 0318 	add.w	r3, r7, #24
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
 800131a:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 800132a:	463b      	mov	r3, r7
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8001332:	4b3c      	ldr	r3, [pc, #240]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 8001334:	4a3c      	ldr	r2, [pc, #240]	; (8001428 <MX_OCTOSPI2_Init+0x124>)
 8001336:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8001338:	4b3a      	ldr	r3, [pc, #232]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 800133a:	2201      	movs	r2, #1
 800133c:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800133e:	4b39      	ldr	r3, [pc, #228]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8001344:	4b37      	ldr	r3, [pc, #220]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 8001346:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800134a:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 800134c:	4b35      	ldr	r3, [pc, #212]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 800134e:	2220      	movs	r2, #32
 8001350:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8001352:	4b34      	ldr	r3, [pc, #208]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 8001354:	2201      	movs	r2, #1
 8001356:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001358:	4b32      	ldr	r3, [pc, #200]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800135e:	4b31      	ldr	r3, [pc, #196]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 8001360:	2200      	movs	r2, #0
 8001362:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001364:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 8001366:	2200      	movs	r2, #0
 8001368:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 800136a:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 800136c:	2201      	movs	r2, #1
 800136e:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001370:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 8001372:	2200      	movs	r2, #0
 8001374:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001376:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 8001378:	2200      	movs	r2, #0
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 800137c:	4b29      	ldr	r3, [pc, #164]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 800137e:	2200      	movs	r2, #0
 8001380:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001382:	4b28      	ldr	r3, [pc, #160]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 8001384:	2208      	movs	r2, #8
 8001386:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.MaxTran = 0;
 8001388:	4b26      	ldr	r3, [pc, #152]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 800138a:	2200      	movs	r2, #0
 800138c:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.Refresh = 0;
 800138e:	4b25      	ldr	r3, [pc, #148]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 8001390:	2200      	movs	r2, #0
 8001392:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8001394:	4823      	ldr	r0, [pc, #140]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 8001396:	f004 fc37 	bl	8005c08 <HAL_OSPI_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_OCTOSPI2_Init+0xa0>
  {
    Error_Handler();
 80013a0:	f000 fbc2 	bl	8001b28 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 2;
 80013ac:	2302      	movs	r3, #2
 80013ae:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_OCTOSPI2_Init+0x128>)
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <MX_OCTOSPI2_Init+0x12c>)
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013bc:	f107 0318 	add.w	r3, r7, #24
 80013c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c4:	4619      	mov	r1, r3
 80013c6:	4817      	ldr	r0, [pc, #92]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 80013c8:	f004 fd9e 	bl	8005f08 <HAL_OSPIM_Config>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_OCTOSPI2_Init+0xd2>
  {
    Error_Handler();
 80013d2:	f000 fba9 	bl	8001b28 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 80013de:	2302      	movs	r3, #2
 80013e0:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ee:	4619      	mov	r1, r3
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 80013f2:	f004 fcc5 	bl	8005d80 <HAL_OSPI_HyperbusCfg>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_OCTOSPI2_Init+0xfc>
  {
    Error_Handler();
 80013fc:	f000 fb94 	bl	8001b28 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_OCTOSPI2_Init+0x120>)
 800140e:	f005 fb67 	bl	8006ae0 <HAL_OSPI_DLYB_SetConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_OCTOSPI2_Init+0x118>
  {
    Error_Handler();
 8001418:	f000 fb86 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	3730      	adds	r7, #48	; 0x30
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200013a0 	.word	0x200013a0
 8001428:	420d2400 	.word	0x420d2400
 800142c:	00010002 	.word	0x00010002
 8001430:	01000002 	.word	0x01000002

08001434 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08e      	sub	sp, #56	; 0x38
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
 800144a:	615a      	str	r2, [r3, #20]
 800144c:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001462:	4b33      	ldr	r3, [pc, #204]	; (8001530 <MX_RTC_Init+0xfc>)
 8001464:	4a33      	ldr	r2, [pc, #204]	; (8001534 <MX_RTC_Init+0x100>)
 8001466:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001468:	4b31      	ldr	r3, [pc, #196]	; (8001530 <MX_RTC_Init+0xfc>)
 800146a:	2200      	movs	r2, #0
 800146c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <MX_RTC_Init+0xfc>)
 8001470:	227f      	movs	r2, #127	; 0x7f
 8001472:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001474:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <MX_RTC_Init+0xfc>)
 8001476:	22ff      	movs	r2, #255	; 0xff
 8001478:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800147a:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <MX_RTC_Init+0xfc>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001480:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <MX_RTC_Init+0xfc>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001486:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <MX_RTC_Init+0xfc>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800148c:	4b28      	ldr	r3, [pc, #160]	; (8001530 <MX_RTC_Init+0xfc>)
 800148e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001492:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001494:	4b26      	ldr	r3, [pc, #152]	; (8001530 <MX_RTC_Init+0xfc>)
 8001496:	2200      	movs	r2, #0
 8001498:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800149a:	4b25      	ldr	r3, [pc, #148]	; (8001530 <MX_RTC_Init+0xfc>)
 800149c:	2200      	movs	r2, #0
 800149e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014a0:	4823      	ldr	r0, [pc, #140]	; (8001530 <MX_RTC_Init+0xfc>)
 80014a2:	f009 ff95 	bl	800b3d0 <HAL_RTC_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80014ac:	f000 fb3c 	bl	8001b28 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80014bc:	2300      	movs	r3, #0
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	481a      	ldr	r0, [pc, #104]	; (8001530 <MX_RTC_Init+0xfc>)
 80014c8:	f00a f9f2 	bl	800b8b0 <HAL_RTCEx_PrivilegeModeSet>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80014d2:	f000 fb29 	bl	8001b28 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80014da:	2300      	movs	r3, #0
 80014dc:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80014de:	2300      	movs	r3, #0
 80014e0:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014ea:	f107 0308 	add.w	r3, r7, #8
 80014ee:	2201      	movs	r2, #1
 80014f0:	4619      	mov	r1, r3
 80014f2:	480f      	ldr	r0, [pc, #60]	; (8001530 <MX_RTC_Init+0xfc>)
 80014f4:	f009 ffee 	bl	800b4d4 <HAL_RTC_SetTime>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80014fe:	f000 fb13 	bl	8001b28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001502:	2301      	movs	r3, #1
 8001504:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8001506:	2301      	movs	r3, #1
 8001508:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 800150a:	2301      	movs	r3, #1
 800150c:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 800150e:	2300      	movs	r3, #0
 8001510:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2201      	movs	r2, #1
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_RTC_Init+0xfc>)
 800151a:	f00a f877 	bl	800b60c <HAL_RTC_SetDate>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8001524:	f000 fb00 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3738      	adds	r7, #56	; 0x38
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200013fc 	.word	0x200013fc
 8001534:	46007800 	.word	0x46007800

08001538 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001548:	4b30      	ldr	r3, [pc, #192]	; (800160c <MX_SPI1_Init+0xd4>)
 800154a:	4a31      	ldr	r2, [pc, #196]	; (8001610 <MX_SPI1_Init+0xd8>)
 800154c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800154e:	4b2f      	ldr	r3, [pc, #188]	; (800160c <MX_SPI1_Init+0xd4>)
 8001550:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001554:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001556:	4b2d      	ldr	r3, [pc, #180]	; (800160c <MX_SPI1_Init+0xd4>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800155c:	4b2b      	ldr	r3, [pc, #172]	; (800160c <MX_SPI1_Init+0xd4>)
 800155e:	2203      	movs	r2, #3
 8001560:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001562:	4b2a      	ldr	r3, [pc, #168]	; (800160c <MX_SPI1_Init+0xd4>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001568:	4b28      	ldr	r3, [pc, #160]	; (800160c <MX_SPI1_Init+0xd4>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800156e:	4b27      	ldr	r3, [pc, #156]	; (800160c <MX_SPI1_Init+0xd4>)
 8001570:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001574:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <MX_SPI1_Init+0xd4>)
 8001578:	2200      	movs	r2, #0
 800157a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800157c:	4b23      	ldr	r3, [pc, #140]	; (800160c <MX_SPI1_Init+0xd4>)
 800157e:	2200      	movs	r2, #0
 8001580:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <MX_SPI1_Init+0xd4>)
 8001584:	2200      	movs	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001588:	4b20      	ldr	r3, [pc, #128]	; (800160c <MX_SPI1_Init+0xd4>)
 800158a:	2200      	movs	r2, #0
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <MX_SPI1_Init+0xd4>)
 8001590:	2207      	movs	r2, #7
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_SPI1_Init+0xd4>)
 8001596:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800159a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <MX_SPI1_Init+0xd4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <MX_SPI1_Init+0xd4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <MX_SPI1_Init+0xd4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <MX_SPI1_Init+0xd4>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015b4:	4b15      	ldr	r3, [pc, #84]	; (800160c <MX_SPI1_Init+0xd4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <MX_SPI1_Init+0xd4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <MX_SPI1_Init+0xd4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_SPI1_Init+0xd4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <MX_SPI1_Init+0xd4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015d2:	480e      	ldr	r0, [pc, #56]	; (800160c <MX_SPI1_Init+0xd4>)
 80015d4:	f00a f99a 	bl	800b90c <HAL_SPI_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 80015de:	f000 faa3 	bl	8001b28 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80015e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015ea:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_SPI1_Init+0xd4>)
 80015f6:	f00a faba 	bl	800bb6e <HAL_SPIEx_SetConfigAutonomousMode>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8001600:	f000 fa92 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000142c 	.word	0x2000142c
 8001610:	40013000 	.word	0x40013000

08001614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b090      	sub	sp, #64	; 0x40
 8001618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
 8001628:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	4bbf      	ldr	r3, [pc, #764]	; (8001928 <MX_GPIO_Init+0x314>)
 800162c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001630:	4abd      	ldr	r2, [pc, #756]	; (8001928 <MX_GPIO_Init+0x314>)
 8001632:	f043 0302 	orr.w	r3, r3, #2
 8001636:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800163a:	4bbb      	ldr	r3, [pc, #748]	; (8001928 <MX_GPIO_Init+0x314>)
 800163c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
 8001646:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001648:	4bb7      	ldr	r3, [pc, #732]	; (8001928 <MX_GPIO_Init+0x314>)
 800164a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800164e:	4ab6      	ldr	r2, [pc, #728]	; (8001928 <MX_GPIO_Init+0x314>)
 8001650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001654:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001658:	4bb3      	ldr	r3, [pc, #716]	; (8001928 <MX_GPIO_Init+0x314>)
 800165a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800165e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001666:	4bb0      	ldr	r3, [pc, #704]	; (8001928 <MX_GPIO_Init+0x314>)
 8001668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800166c:	4aae      	ldr	r2, [pc, #696]	; (8001928 <MX_GPIO_Init+0x314>)
 800166e:	f043 0308 	orr.w	r3, r3, #8
 8001672:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001676:	4bac      	ldr	r3, [pc, #688]	; (8001928 <MX_GPIO_Init+0x314>)
 8001678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	623b      	str	r3, [r7, #32]
 8001682:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001684:	4ba8      	ldr	r3, [pc, #672]	; (8001928 <MX_GPIO_Init+0x314>)
 8001686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800168a:	4aa7      	ldr	r2, [pc, #668]	; (8001928 <MX_GPIO_Init+0x314>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001694:	4ba4      	ldr	r3, [pc, #656]	; (8001928 <MX_GPIO_Init+0x314>)
 8001696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	61fb      	str	r3, [r7, #28]
 80016a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	4ba1      	ldr	r3, [pc, #644]	; (8001928 <MX_GPIO_Init+0x314>)
 80016a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016a8:	4a9f      	ldr	r2, [pc, #636]	; (8001928 <MX_GPIO_Init+0x314>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016b2:	4b9d      	ldr	r3, [pc, #628]	; (8001928 <MX_GPIO_Init+0x314>)
 80016b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	61bb      	str	r3, [r7, #24]
 80016be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016c0:	4b99      	ldr	r3, [pc, #612]	; (8001928 <MX_GPIO_Init+0x314>)
 80016c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016c6:	4a98      	ldr	r2, [pc, #608]	; (8001928 <MX_GPIO_Init+0x314>)
 80016c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016cc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016d0:	4b95      	ldr	r3, [pc, #596]	; (8001928 <MX_GPIO_Init+0x314>)
 80016d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016de:	4b92      	ldr	r3, [pc, #584]	; (8001928 <MX_GPIO_Init+0x314>)
 80016e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016e4:	4a90      	ldr	r2, [pc, #576]	; (8001928 <MX_GPIO_Init+0x314>)
 80016e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016ee:	4b8e      	ldr	r3, [pc, #568]	; (8001928 <MX_GPIO_Init+0x314>)
 80016f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80016fc:	4b8a      	ldr	r3, [pc, #552]	; (8001928 <MX_GPIO_Init+0x314>)
 80016fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001702:	4a89      	ldr	r2, [pc, #548]	; (8001928 <MX_GPIO_Init+0x314>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800170c:	4b86      	ldr	r3, [pc, #536]	; (8001928 <MX_GPIO_Init+0x314>)
 800170e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800171a:	4b83      	ldr	r3, [pc, #524]	; (8001928 <MX_GPIO_Init+0x314>)
 800171c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001720:	4a81      	ldr	r2, [pc, #516]	; (8001928 <MX_GPIO_Init+0x314>)
 8001722:	f043 0320 	orr.w	r3, r3, #32
 8001726:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800172a:	4b7f      	ldr	r3, [pc, #508]	; (8001928 <MX_GPIO_Init+0x314>)
 800172c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001730:	f003 0320 	and.w	r3, r3, #32
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001738:	4b7b      	ldr	r3, [pc, #492]	; (8001928 <MX_GPIO_Init+0x314>)
 800173a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800173e:	4a7a      	ldr	r2, [pc, #488]	; (8001928 <MX_GPIO_Init+0x314>)
 8001740:	f043 0310 	orr.w	r3, r3, #16
 8001744:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001748:	4b77      	ldr	r3, [pc, #476]	; (8001928 <MX_GPIO_Init+0x314>)
 800174a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800175c:	4873      	ldr	r0, [pc, #460]	; (800192c <MX_GPIO_Init+0x318>)
 800175e:	f003 fadd 	bl	8004d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SDMMC_EN_Pin|LRA_EN_Pin, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001768:	4871      	ldr	r0, [pc, #452]	; (8001930 <MX_GPIO_Init+0x31c>)
 800176a:	f003 fad7 	bl	8004d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO3_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f248 0120 	movw	r1, #32800	; 0x8020
 8001774:	486f      	ldr	r0, [pc, #444]	; (8001934 <MX_GPIO_Init+0x320>)
 8001776:	f003 fad1 	bl	8004d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GNSS_RST_Pin|TP_RST_Pin|GNSS_WAKEUP_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	21c8      	movs	r1, #200	; 0xc8
 800177e:	486e      	ldr	r0, [pc, #440]	; (8001938 <MX_GPIO_Init+0x324>)
 8001780:	f003 facc 	bl	8004d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_RST_GPIO_Port, FLASH_RST_Pin, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800178a:	486c      	ldr	r0, [pc, #432]	; (800193c <MX_GPIO_Init+0x328>)
 800178c:	f003 fac6 	bl	8004d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, GPIO_PIN_RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	2180      	movs	r1, #128	; 0x80
 8001794:	486a      	ldr	r0, [pc, #424]	; (8001940 <MX_GPIO_Init+0x32c>)
 8001796:	f003 fac1 	bl	8004d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a0:	4868      	ldr	r0, [pc, #416]	; (8001944 <MX_GPIO_Init+0x330>)
 80017a2:	f003 fabb 	bl	8004d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPLAY_SWIRE_IN_Pin DISPLAY_SWIRE_OUT_Pin */
  GPIO_InitStruct.Pin = DISPLAY_SWIRE_IN_Pin|DISPLAY_SWIRE_OUT_Pin;
 80017a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ac:	2300      	movs	r3, #0
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b8:	4619      	mov	r1, r3
 80017ba:	485c      	ldr	r0, [pc, #368]	; (800192c <MX_GPIO_Init+0x318>)
 80017bc:	f003 f8d6 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : AVDDEN_Pin */
  GPIO_InitStruct.Pin = AVDDEN_Pin;
 80017c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017ca:	2302      	movs	r3, #2
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(AVDDEN_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d6:	4619      	mov	r1, r3
 80017d8:	4854      	ldr	r0, [pc, #336]	; (800192c <MX_GPIO_Init+0x318>)
 80017da:	f003 f8c7 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_EN_Pin */
  GPIO_InitStruct.Pin = SDMMC_EN_Pin;
 80017de:	2310      	movs	r3, #16
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SDMMC_EN_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f2:	4619      	mov	r1, r3
 80017f4:	484e      	ldr	r0, [pc, #312]	; (8001930 <MX_GPIO_Init+0x31c>)
 80017f6:	f003 f8b9 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_CD_Pin PWR_INT_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|PWR_INT_Pin;
 80017fa:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001800:	2300      	movs	r3, #0
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001804:	2301      	movs	r3, #1
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001808:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800180c:	4619      	mov	r1, r3
 800180e:	4848      	ldr	r0, [pc, #288]	; (8001930 <MX_GPIO_Init+0x31c>)
 8001810:	f003 f8ac 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC8 PC11 PC12
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
 8001814:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001822:	2302      	movs	r3, #2
 8001824:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001826:	230c      	movs	r3, #12
 8001828:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182e:	4619      	mov	r1, r3
 8001830:	4845      	ldr	r0, [pc, #276]	; (8001948 <MX_GPIO_Init+0x334>)
 8001832:	f003 f89b 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|PWR_ENCHG_Pin;
 8001836:	f248 0320 	movw	r3, #32800	; 0x8020
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001840:	2302      	movs	r3, #2
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184c:	4619      	mov	r1, r3
 800184e:	4839      	ldr	r0, [pc, #228]	; (8001934 <MX_GPIO_Init+0x320>)
 8001850:	f003 f88c 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001854:	2304      	movs	r3, #4
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001860:	2302      	movs	r3, #2
 8001862:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001864:	230c      	movs	r3, #12
 8001866:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001868:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186c:	4619      	mov	r1, r3
 800186e:	4830      	ldr	r0, [pc, #192]	; (8001930 <MX_GPIO_Init+0x31c>)
 8001870:	f003 f87c 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001874:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800188a:	4619      	mov	r1, r3
 800188c:	482f      	ldr	r0, [pc, #188]	; (800194c <MX_GPIO_Init+0x338>)
 800188e:	f003 f86d 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT2_Pin */
  GPIO_InitStruct.Pin = BT_INT2_Pin;
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001896:	2300      	movs	r3, #0
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800189a:	2302      	movs	r3, #2
 800189c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BT_INT2_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a2:	4619      	mov	r1, r3
 80018a4:	4828      	ldr	r0, [pc, #160]	; (8001948 <MX_GPIO_Init+0x334>)
 80018a6:	f003 f861 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b8:	2302      	movs	r3, #2
 80018ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 80018bc:	2308      	movs	r3, #8
 80018be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c4:	4619      	mov	r1, r3
 80018c6:	481b      	ldr	r0, [pc, #108]	; (8001934 <MX_GPIO_Init+0x320>)
 80018c8:	f003 f850 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_Pin GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO1_Pin;
 80018cc:	2303      	movs	r3, #3
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d0:	2300      	movs	r3, #0
 80018d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018d4:	2302      	movs	r3, #2
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018dc:	4619      	mov	r1, r3
 80018de:	4814      	ldr	r0, [pc, #80]	; (8001930 <MX_GPIO_Init+0x31c>)
 80018e0:	f003 f844 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT1_Pin */
  GPIO_InitStruct.Pin = BT_INT1_Pin;
 80018e4:	2340      	movs	r3, #64	; 0x40
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <MX_GPIO_Init+0x33c>)
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ec:	2302      	movs	r3, #2
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BT_INT1_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f4:	4619      	mov	r1, r3
 80018f6:	4814      	ldr	r0, [pc, #80]	; (8001948 <MX_GPIO_Init+0x334>)
 80018f8:	f003 f838 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin|TP_RST_Pin;
 80018fc:	2388      	movs	r3, #136	; 0x88
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001900:	2301      	movs	r3, #1
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001904:	2301      	movs	r3, #1
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800190c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001910:	4619      	mov	r1, r3
 8001912:	4809      	ldr	r0, [pc, #36]	; (8001938 <MX_GPIO_Init+0x324>)
 8001914:	f003 f82a 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_PPS_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin;
 8001918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <MX_GPIO_Init+0x33c>)
 8001920:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
 8001926:	e015      	b.n	8001954 <MX_GPIO_Init+0x340>
 8001928:	46020c00 	.word	0x46020c00
 800192c:	42021800 	.word	0x42021800
 8001930:	42020c00 	.word	0x42020c00
 8001934:	42020400 	.word	0x42020400
 8001938:	42022400 	.word	0x42022400
 800193c:	42022000 	.word	0x42022000
 8001940:	42021400 	.word	0x42021400
 8001944:	42021000 	.word	0x42021000
 8001948:	42020800 	.word	0x42020800
 800194c:	42020000 	.word	0x42020000
 8001950:	10110000 	.word	0x10110000
  HAL_GPIO_Init(GNSS_PPS_GPIO_Port, &GPIO_InitStruct);
 8001954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001958:	4619      	mov	r1, r3
 800195a:	4860      	ldr	r0, [pc, #384]	; (8001adc <MX_GPIO_Init+0x4c8>)
 800195c:	f003 f806 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_WAKEUP_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin;
 8001960:	2340      	movs	r3, #64	; 0x40
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	2301      	movs	r3, #1
 8001966:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GNSS_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001974:	4619      	mov	r1, r3
 8001976:	485a      	ldr	r0, [pc, #360]	; (8001ae0 <MX_GPIO_Init+0x4cc>)
 8001978:	f002 fff8 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 800197c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001982:	4b58      	ldr	r3, [pc, #352]	; (8001ae4 <MX_GPIO_Init+0x4d0>)
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001986:	2301      	movs	r3, #1
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198e:	4619      	mov	r1, r3
 8001990:	4853      	ldr	r0, [pc, #332]	; (8001ae0 <MX_GPIO_Init+0x4cc>)
 8001992:	f002 ffeb 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RST_Pin */
  GPIO_InitStruct.Pin = FLASH_RST_Pin;
 8001996:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2301      	movs	r3, #1
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a0:	2301      	movs	r3, #1
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FLASH_RST_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ac:	4619      	mov	r1, r3
 80019ae:	484e      	ldr	r0, [pc, #312]	; (8001ae8 <MX_GPIO_Init+0x4d4>)
 80019b0:	f002 ffdc 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_INT_Pin */
  GPIO_InitStruct.Pin = FLASH_INT_Pin;
 80019b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ba:	4b4a      	ldr	r3, [pc, #296]	; (8001ae4 <MX_GPIO_Init+0x4d0>)
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019be:	2301      	movs	r3, #1
 80019c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(FLASH_INT_GPIO_Port, &GPIO_InitStruct);
 80019c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c6:	4619      	mov	r1, r3
 80019c8:	4847      	ldr	r0, [pc, #284]	; (8001ae8 <MX_GPIO_Init+0x4d4>)
 80019ca:	f002 ffcf 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RSTO_Pin */
  GPIO_InitStruct.Pin = FLASH_RSTO_Pin;
 80019ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d4:	2300      	movs	r3, #0
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d8:	2301      	movs	r3, #1
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(FLASH_RSTO_GPIO_Port, &GPIO_InitStruct);
 80019dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e0:	4619      	mov	r1, r3
 80019e2:	4841      	ldr	r0, [pc, #260]	; (8001ae8 <MX_GPIO_Init+0x4d4>)
 80019e4:	f002 ffc2 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin;
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ec:	2301      	movs	r3, #1
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f4:	2300      	movs	r3, #0
 80019f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DISPLAY_RST_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fc:	4619      	mov	r1, r3
 80019fe:	483b      	ldr	r0, [pc, #236]	; (8001aec <MX_GPIO_Init+0x4d8>)
 8001a00:	f002 ffb4 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : ALS_INT_Pin */
  GPIO_InitStruct.Pin = ALS_INT_Pin;
 8001a04:	2340      	movs	r3, #64	; 0x40
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ALS_INT_GPIO_Port, &GPIO_InitStruct);
 8001a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a14:	4619      	mov	r1, r3
 8001a16:	4835      	ldr	r0, [pc, #212]	; (8001aec <MX_GPIO_Init+0x4d8>)
 8001a18:	f002 ffa8 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a20:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <MX_GPIO_Init+0x4d0>)
 8001a22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8001a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4830      	ldr	r0, [pc, #192]	; (8001af0 <MX_GPIO_Init+0x4dc>)
 8001a30:	f002 ff9c 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8001a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4828      	ldr	r0, [pc, #160]	; (8001af0 <MX_GPIO_Init+0x4dc>)
 8001a4e:	f002 ff8d 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : HR_INT_Pin */
  GPIO_InitStruct.Pin = HR_INT_Pin;
 8001a52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a58:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <MX_GPIO_Init+0x4d0>)
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HR_INT_GPIO_Port, &GPIO_InitStruct);
 8001a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a64:	4619      	mov	r1, r3
 8001a66:	4823      	ldr	r0, [pc, #140]	; (8001af4 <MX_GPIO_Init+0x4e0>)
 8001a68:	f002 ff80 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : LRA_EN_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin;
 8001a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a76:	2302      	movs	r3, #2
 8001a78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LRA_EN_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a82:	4619      	mov	r1, r3
 8001a84:	481b      	ldr	r0, [pc, #108]	; (8001af4 <MX_GPIO_Init+0x4e0>)
 8001a86:	f002 ff71 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_INT_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin;
 8001a8a:	2310      	movs	r3, #16
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <MX_GPIO_Init+0x4d0>)
 8001a90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a92:	2301      	movs	r3, #1
 8001a94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MAG_INT_GPIO_Port, &GPIO_InitStruct);
 8001a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4816      	ldr	r0, [pc, #88]	; (8001af8 <MX_GPIO_Init+0x4e4>)
 8001a9e:	f002 ff65 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <MX_GPIO_Init+0x4e8>)
 8001aa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 8001aae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4812      	ldr	r0, [pc, #72]	; (8001b00 <MX_GPIO_Init+0x4ec>)
 8001ab6:	f002 ff59 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin;
 8001aba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IMU_INT2_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001acc:	4619      	mov	r1, r3
 8001ace:	4807      	ldr	r0, [pc, #28]	; (8001aec <MX_GPIO_Init+0x4d8>)
 8001ad0:	f002 ff4c 	bl	800496c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ad4:	bf00      	nop
 8001ad6:	3740      	adds	r7, #64	; 0x40
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	42020000 	.word	0x42020000
 8001ae0:	42022400 	.word	0x42022400
 8001ae4:	10210000 	.word	0x10210000
 8001ae8:	42022000 	.word	0x42022000
 8001aec:	42021400 	.word	0x42021400
 8001af0:	42021000 	.word	0x42021000
 8001af4:	42020c00 	.word	0x42020c00
 8001af8:	42020800 	.word	0x42020800
 8001afc:	10110000 	.word	0x10110000
 8001b00:	42020400 	.word	0x42020400

08001b04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d101      	bne.n	8001b1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b16:	f001 fa59 	bl	8002fcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40001000 	.word	0x40001000

08001b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
}
 8001b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <Error_Handler+0x8>
	...

08001b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_MspInit+0x30>)
 8001b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b40:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <HAL_MspInit+0x30>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_MspInit+0x30>)
 8001b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	46020c00 	.word	0x46020c00

08001b68 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b0c2      	sub	sp, #264	; 0x108
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b76:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b88:	f107 0310 	add.w	r3, r7, #16
 8001b8c:	22e0      	movs	r2, #224	; 0xe0
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f00b f920 	bl	800cdd6 <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8001b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a2b      	ldr	r2, [pc, #172]	; (8001c50 <HAL_MDF_MspInit+0xe8>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d14e      	bne.n	8001c46 <HAL_MDF_MspInit+0xde>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001ba8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bba:	f107 0310 	add.w	r3, r7, #16
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f006 fbb6 	bl	8008330 <HAL_RCCEx_PeriphCLKConfig>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_MDF_MspInit+0x66>
    {
      Error_Handler();
 8001bca:	f7ff ffad 	bl	8001b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_MDF_MspInit+0xec>)
 8001bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd4:	4a1f      	ldr	r2, [pc, #124]	; (8001c54 <HAL_MDF_MspInit+0xec>)
 8001bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_MDF_MspInit+0xec>)
 8001be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_MDF_MspInit+0xec>)
 8001bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bf2:	4a18      	ldr	r2, [pc, #96]	; (8001c54 <HAL_MDF_MspInit+0xec>)
 8001bf4:	f043 0310 	orr.w	r3, r3, #16
 8001bf8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_MDF_MspInit+0xec>)
 8001bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c02:	f003 0210 	and.w	r2, r3, #16
 8001c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c0a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c14:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c18:	681b      	ldr	r3, [r3, #0]
    /**ADF1 GPIO Configuration
    PE9     ------> ADF1_CCK0
    PE10     ------> ADF1_SDI0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c1e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8001c34:	2303      	movs	r3, #3
 8001c36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c3a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	; (8001c58 <HAL_MDF_MspInit+0xf0>)
 8001c42:	f002 fe93 	bl	800496c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 8001c46:	bf00      	nop
 8001c48:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	46024080 	.word	0x46024080
 8001c54:	46020c00 	.word	0x46020c00
 8001c58:	42021000 	.word	0x42021000

08001c5c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <HAL_CRC_MspInit+0x3c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d10e      	bne.n	8001c8c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_CRC_MspInit+0x40>)
 8001c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c74:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <HAL_CRC_MspInit+0x40>)
 8001c76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c7a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <HAL_CRC_MspInit+0x40>)
 8001c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	40023000 	.word	0x40023000
 8001c9c:	46020c00 	.word	0x46020c00

08001ca0 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a16      	ldr	r2, [pc, #88]	; (8001d08 <HAL_DCACHE_MspInit+0x68>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d10f      	bne.n	8001cd2 <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8001cb2:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <HAL_DCACHE_MspInit+0x6c>)
 8001cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb8:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <HAL_DCACHE_MspInit+0x6c>)
 8001cba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cbe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_DCACHE_MspInit+0x6c>)
 8001cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 8001cd0:	e013      	b.n	8001cfa <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <HAL_DCACHE_MspInit+0x70>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d10e      	bne.n	8001cfa <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_DCACHE_MspInit+0x6c>)
 8001cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <HAL_DCACHE_MspInit+0x6c>)
 8001ce4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001cec:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <HAL_DCACHE_MspInit+0x6c>)
 8001cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40031400 	.word	0x40031400
 8001d0c:	46020c00 	.word	0x46020c00
 8001d10:	40031800 	.word	0x40031800

08001d14 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <HAL_DMA2D_MspInit+0x48>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d116      	bne.n	8001d54 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_DMA2D_MspInit+0x4c>)
 8001d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2c:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <HAL_DMA2D_MspInit+0x4c>)
 8001d2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_DMA2D_MspInit+0x4c>)
 8001d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	2076      	movs	r0, #118	; 0x76
 8001d4a:	f001 fa3b 	bl	80031c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001d4e:	2076      	movs	r0, #118	; 0x76
 8001d50:	f001 fa52 	bl	80031f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	4002b000 	.word	0x4002b000
 8001d60:	46020c00 	.word	0x46020c00

08001d64 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b0c2      	sub	sp, #264	; 0x108
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d72:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d84:	f107 0310 	add.w	r3, r7, #16
 8001d88:	22e0      	movs	r2, #224	; 0xe0
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f00b f822 	bl	800cdd6 <memset>
  if(hdsi->Instance==DSI)
 8001d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a30      	ldr	r2, [pc, #192]	; (8001e60 <HAL_DSI_MspInit+0xfc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d157      	bne.n	8001e54 <HAL_DSI_MspInit+0xf0>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 0304 	mov.w	r3, #4
 8001dac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 8001db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001db4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f006 fab7 	bl	8008330 <HAL_RCCEx_PeriphCLKConfig>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <HAL_DSI_MspInit+0x68>
    {
      Error_Handler();
 8001dc8:	f7ff feae 	bl	8001b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001dcc:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <HAL_DSI_MspInit+0x100>)
 8001dce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001dd2:	4a24      	ldr	r2, [pc, #144]	; (8001e64 <HAL_DSI_MspInit+0x100>)
 8001dd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001dd8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001ddc:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <HAL_DSI_MspInit+0x100>)
 8001dde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001de2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HAL_DSI_MspInit+0x100>)
 8001dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001df0:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_DSI_MspInit+0x100>)
 8001df2:	f043 0320 	orr.w	r3, r3, #32
 8001df6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <HAL_DSI_MspInit+0x100>)
 8001dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e00:	f003 0220 	and.w	r2, r3, #32
 8001e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e12:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e16:	681b      	ldr	r3, [r3, #0]
    DSI_CKN     ------> DSIHOST_CKN
    DSI_D1N     ------> DSIHOST_D1N
    DSI_D1P     ------> DSIHOST_D1P
    PF10     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8001e32:	230b      	movs	r3, #11
 8001e34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e38:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480a      	ldr	r0, [pc, #40]	; (8001e68 <HAL_DSI_MspInit+0x104>)
 8001e40:	f002 fd94 	bl	800496c <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2100      	movs	r1, #0
 8001e48:	2089      	movs	r0, #137	; 0x89
 8001e4a:	f001 f9bb 	bl	80031c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001e4e:	2089      	movs	r0, #137	; 0x89
 8001e50:	f001 f9d2 	bl	80031f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001e54:	bf00      	nop
 8001e56:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40016c00 	.word	0x40016c00
 8001e64:	46020c00 	.word	0x46020c00
 8001e68:	42021400 	.word	0x42021400

08001e6c <HAL_GFXMMU_MspInit>:
* This function configures the hardware resources used in this example
* @param hgfxmmu: GFXMMU handle pointer
* @retval None
*/
void HAL_GFXMMU_MspInit(GFXMMU_HandleTypeDef* hgfxmmu)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if(hgfxmmu->Instance==GFXMMU)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0e      	ldr	r2, [pc, #56]	; (8001eb4 <HAL_GFXMMU_MspInit+0x48>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d116      	bne.n	8001eac <HAL_GFXMMU_MspInit+0x40>
  {
  /* USER CODE BEGIN GFXMMU_MspInit 0 */

  /* USER CODE END GFXMMU_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GFXMMU_CLK_ENABLE();
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_GFXMMU_MspInit+0x4c>)
 8001e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e84:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <HAL_GFXMMU_MspInit+0x4c>)
 8001e86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <HAL_GFXMMU_MspInit+0x4c>)
 8001e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
    /* GFXMMU interrupt Init */
    HAL_NVIC_SetPriority(GFXMMU_IRQn, 0, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2086      	movs	r0, #134	; 0x86
 8001ea2:	f001 f98f 	bl	80031c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GFXMMU_IRQn);
 8001ea6:	2086      	movs	r0, #134	; 0x86
 8001ea8:	f001 f9a6 	bl	80031f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GFXMMU_MspInit 1 */

  /* USER CODE END GFXMMU_MspInit 1 */
  }

}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	4002c000 	.word	0x4002c000
 8001eb8:	46020c00 	.word	0x46020c00

08001ebc <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1a      	ldr	r2, [pc, #104]	; (8001f34 <HAL_GPU2D_MspInit+0x78>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d12d      	bne.n	8001f2a <HAL_GPU2D_MspInit+0x6e>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_GPU2D_MspInit+0x7c>)
 8001ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed4:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <HAL_GPU2D_MspInit+0x7c>)
 8001ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eda:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001ede:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <HAL_GPU2D_MspInit+0x7c>)
 8001ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_GPU2D_MspInit+0x7c>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef2:	4a11      	ldr	r2, [pc, #68]	; (8001f38 <HAL_GPU2D_MspInit+0x7c>)
 8001ef4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_GPU2D_MspInit+0x7c>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2084      	movs	r0, #132	; 0x84
 8001f10:	f001 f958 	bl	80031c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 8001f14:	2084      	movs	r0, #132	; 0x84
 8001f16:	f001 f96f 	bl	80031f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2085      	movs	r0, #133	; 0x85
 8001f20:	f001 f950 	bl	80031c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 8001f24:	2085      	movs	r0, #133	; 0x85
 8001f26:	f001 f967 	bl	80031f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */

  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	4002f000 	.word	0x4002f000
 8001f38:	46020c00 	.word	0x46020c00

08001f3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b0cc      	sub	sp, #304	; 0x130
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f4a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f60:	22e0      	movs	r2, #224	; 0xe0
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f00a ff36 	bl	800cdd6 <memset>
  if(hi2c->Instance==I2C1)
 8001f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4aba      	ldr	r2, [pc, #744]	; (8002260 <HAL_I2C_MspInit+0x324>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d14f      	bne.n	800201c <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f7c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f92:	4618      	mov	r0, r3
 8001f94:	f006 f9cc 	bl	8008330 <HAL_RCCEx_PeriphCLKConfig>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001f9e:	f7ff fdc3 	bl	8001b28 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fa2:	4bb0      	ldr	r3, [pc, #704]	; (8002264 <HAL_I2C_MspInit+0x328>)
 8001fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fa8:	4aae      	ldr	r2, [pc, #696]	; (8002264 <HAL_I2C_MspInit+0x328>)
 8001faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fb2:	4bac      	ldr	r3, [pc, #688]	; (8002264 <HAL_I2C_MspInit+0x328>)
 8001fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8001fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001fc0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001fc4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc8:	2312      	movs	r3, #18
 8001fca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fda:	2304      	movs	r3, #4
 8001fdc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fe0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	48a0      	ldr	r0, [pc, #640]	; (8002268 <HAL_I2C_MspInit+0x32c>)
 8001fe8:	f002 fcc0 	bl	800496c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fec:	4b9d      	ldr	r3, [pc, #628]	; (8002264 <HAL_I2C_MspInit+0x328>)
 8001fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ff2:	4a9c      	ldr	r2, [pc, #624]	; (8002264 <HAL_I2C_MspInit+0x328>)
 8001ff4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ff8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001ffc:	4b99      	ldr	r3, [pc, #612]	; (8002264 <HAL_I2C_MspInit+0x328>)
 8001ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002002:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800200a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002014:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002018:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C6_MspInit 1 */

  /* USER CODE END I2C6_MspInit 1 */
  }

}
 800201a:	e1c0      	b.n	800239e <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C2)
 800201c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002020:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a90      	ldr	r2, [pc, #576]	; (800226c <HAL_I2C_MspInit+0x330>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d157      	bne.n	80020de <HAL_I2C_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800202e:	f04f 0280 	mov.w	r2, #128	; 0x80
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800203a:	2300      	movs	r3, #0
 800203c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002040:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002044:	4618      	mov	r0, r3
 8002046:	f006 f973 	bl	8008330 <HAL_RCCEx_PeriphCLKConfig>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8002050:	f7ff fd6a 	bl	8001b28 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002054:	4b83      	ldr	r3, [pc, #524]	; (8002264 <HAL_I2C_MspInit+0x328>)
 8002056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800205a:	4a82      	ldr	r2, [pc, #520]	; (8002264 <HAL_I2C_MspInit+0x328>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002064:	4b7f      	ldr	r3, [pc, #508]	; (8002264 <HAL_I2C_MspInit+0x328>)
 8002066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800206a:	f003 0202 	and.w	r2, r3, #2
 800206e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002072:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800207c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002080:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002082:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002086:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208a:	2312      	movs	r3, #18
 800208c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800209c:	2304      	movs	r3, #4
 800209e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80020a6:	4619      	mov	r1, r3
 80020a8:	4871      	ldr	r0, [pc, #452]	; (8002270 <HAL_I2C_MspInit+0x334>)
 80020aa:	f002 fc5f 	bl	800496c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020ae:	4b6d      	ldr	r3, [pc, #436]	; (8002264 <HAL_I2C_MspInit+0x328>)
 80020b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020b4:	4a6b      	ldr	r2, [pc, #428]	; (8002264 <HAL_I2C_MspInit+0x328>)
 80020b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80020be:	4b69      	ldr	r3, [pc, #420]	; (8002264 <HAL_I2C_MspInit+0x328>)
 80020c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80020cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80020d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	e15f      	b.n	800239e <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C3)
 80020de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80020e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a62      	ldr	r2, [pc, #392]	; (8002274 <HAL_I2C_MspInit+0x338>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d156      	bne.n	800219e <HAL_I2C_MspInit+0x262>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80020f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002102:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002106:	4618      	mov	r0, r3
 8002108:	f006 f912 	bl	8008330 <HAL_RCCEx_PeriphCLKConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_MspInit+0x1da>
      Error_Handler();
 8002112:	f7ff fd09 	bl	8001b28 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002116:	4b53      	ldr	r3, [pc, #332]	; (8002264 <HAL_I2C_MspInit+0x328>)
 8002118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800211c:	4a51      	ldr	r2, [pc, #324]	; (8002264 <HAL_I2C_MspInit+0x328>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002126:	4b4f      	ldr	r3, [pc, #316]	; (8002264 <HAL_I2C_MspInit+0x328>)
 8002128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800212c:	f003 0204 	and.w	r2, r3, #4
 8002130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002134:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800213e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002142:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002144:	2303      	movs	r3, #3
 8002146:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800214a:	2312      	movs	r3, #18
 800214c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800215c:	2304      	movs	r3, #4
 800215e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002162:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002166:	4619      	mov	r1, r3
 8002168:	4843      	ldr	r0, [pc, #268]	; (8002278 <HAL_I2C_MspInit+0x33c>)
 800216a:	f002 fbff 	bl	800496c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800216e:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <HAL_I2C_MspInit+0x328>)
 8002170:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002174:	4a3b      	ldr	r2, [pc, #236]	; (8002264 <HAL_I2C_MspInit+0x328>)
 8002176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800217a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800217e:	4b39      	ldr	r3, [pc, #228]	; (8002264 <HAL_I2C_MspInit+0x328>)
 8002180:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002184:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800218c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002196:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	e0ff      	b.n	800239e <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C4)
 800219e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a34      	ldr	r2, [pc, #208]	; (800227c <HAL_I2C_MspInit+0x340>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d169      	bne.n	8002284 <HAL_I2C_MspInit+0x348>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80021b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021c6:	4618      	mov	r0, r3
 80021c8:	f006 f8b2 	bl	8008330 <HAL_RCCEx_PeriphCLKConfig>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_MspInit+0x29a>
      Error_Handler();
 80021d2:	f7ff fca9 	bl	8001b28 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d6:	4b23      	ldr	r3, [pc, #140]	; (8002264 <HAL_I2C_MspInit+0x328>)
 80021d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021dc:	4a21      	ldr	r2, [pc, #132]	; (8002264 <HAL_I2C_MspInit+0x328>)
 80021de:	f043 0308 	orr.w	r3, r3, #8
 80021e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021e6:	4b1f      	ldr	r3, [pc, #124]	; (8002264 <HAL_I2C_MspInit+0x328>)
 80021e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021ec:	f003 0208 	and.w	r2, r3, #8
 80021f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002202:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002204:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002208:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800220c:	2312      	movs	r3, #18
 800220e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800221e:	2304      	movs	r3, #4
 8002220:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002224:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002228:	4619      	mov	r1, r3
 800222a:	4815      	ldr	r0, [pc, #84]	; (8002280 <HAL_I2C_MspInit+0x344>)
 800222c:	f002 fb9e 	bl	800496c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_I2C_MspInit+0x328>)
 8002232:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002236:	4a0b      	ldr	r2, [pc, #44]	; (8002264 <HAL_I2C_MspInit+0x328>)
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <HAL_I2C_MspInit+0x328>)
 8002242:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002246:	f003 0202 	and.w	r2, r3, #2
 800224a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800224e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002258:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800225c:	681b      	ldr	r3, [r3, #0]
}
 800225e:	e09e      	b.n	800239e <HAL_I2C_MspInit+0x462>
 8002260:	40005400 	.word	0x40005400
 8002264:	46020c00 	.word	0x46020c00
 8002268:	42021800 	.word	0x42021800
 800226c:	40005800 	.word	0x40005800
 8002270:	42020400 	.word	0x42020400
 8002274:	46002800 	.word	0x46002800
 8002278:	42020800 	.word	0x42020800
 800227c:	40008400 	.word	0x40008400
 8002280:	42020c00 	.word	0x42020c00
  else if(hi2c->Instance==I2C6)
 8002284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002288:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a45      	ldr	r2, [pc, #276]	; (80023a8 <HAL_I2C_MspInit+0x46c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	f040 8083 	bne.w	800239e <HAL_I2C_MspInit+0x462>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C6;
 8002298:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c6ClockSelection = RCC_I2C6CLKSOURCE_PCLK1;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022ae:	4618      	mov	r0, r3
 80022b0:	f006 f83e 	bl	8008330 <HAL_RCCEx_PeriphCLKConfig>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_MspInit+0x382>
      Error_Handler();
 80022ba:	f7ff fc35 	bl	8001b28 <Error_Handler>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80022be:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_I2C_MspInit+0x470>)
 80022c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022c4:	4a39      	ldr	r2, [pc, #228]	; (80023ac <HAL_I2C_MspInit+0x470>)
 80022c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022ce:	4b37      	ldr	r3, [pc, #220]	; (80023ac <HAL_I2C_MspInit+0x470>)
 80022d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022d4:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80022d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022dc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022ea:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022ec:	4b2f      	ldr	r3, [pc, #188]	; (80023ac <HAL_I2C_MspInit+0x470>)
 80022ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022f2:	4a2e      	ldr	r2, [pc, #184]	; (80023ac <HAL_I2C_MspInit+0x470>)
 80022f4:	f043 0320 	orr.w	r3, r3, #32
 80022f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022fc:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <HAL_I2C_MspInit+0x470>)
 80022fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002302:	f003 0220 	and.w	r2, r3, #32
 8002306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800230a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002314:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002318:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800231a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800231e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002322:	2312      	movs	r3, #18
 8002324:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2300      	movs	r3, #0
 8002330:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 8002334:	2302      	movs	r3, #2
 8002336:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800233a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800233e:	4619      	mov	r1, r3
 8002340:	481b      	ldr	r0, [pc, #108]	; (80023b0 <HAL_I2C_MspInit+0x474>)
 8002342:	f002 fb13 	bl	800496c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002346:	2301      	movs	r3, #1
 8002348:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800234c:	2312      	movs	r3, #18
 800234e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 800235e:	2302      	movs	r3, #2
 8002360:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002364:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002368:	4619      	mov	r1, r3
 800236a:	4812      	ldr	r0, [pc, #72]	; (80023b4 <HAL_I2C_MspInit+0x478>)
 800236c:	f002 fafe 	bl	800496c <HAL_GPIO_Init>
    __HAL_RCC_I2C6_CLK_ENABLE();
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <HAL_I2C_MspInit+0x470>)
 8002372:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002376:	4a0d      	ldr	r2, [pc, #52]	; (80023ac <HAL_I2C_MspInit+0x470>)
 8002378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800237c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_I2C_MspInit+0x470>)
 8002382:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002386:	f003 0280 	and.w	r2, r3, #128	; 0x80
 800238a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800238e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002398:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800239c:	681b      	ldr	r3, [r3, #0]
}
 800239e:	bf00      	nop
 80023a0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40009c00 	.word	0x40009c00
 80023ac:	46020c00 	.word	0x46020c00
 80023b0:	42022400 	.word	0x42022400
 80023b4:	42021400 	.word	0x42021400

080023b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b0c8      	sub	sp, #288	; 0x120
 80023bc:	af00      	add	r7, sp, #0
 80023be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80023c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80023c6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023dc:	22e0      	movs	r2, #224	; 0xe0
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f00a fcf8 	bl	800cdd6 <memset>
  if(huart->Instance==LPUART1)
 80023e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80023ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4aa1      	ldr	r2, [pc, #644]	; (8002678 <HAL_UART_MspInit+0x2c0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d17b      	bne.n	80024f0 <HAL_UART_MspInit+0x138>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80023f8:	f04f 0220 	mov.w	r2, #32
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800240a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800240e:	4618      	mov	r0, r3
 8002410:	f005 ff8e 	bl	8008330 <HAL_RCCEx_PeriphCLKConfig>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 800241a:	f7ff fb85 	bl	8001b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800241e:	4b97      	ldr	r3, [pc, #604]	; (800267c <HAL_UART_MspInit+0x2c4>)
 8002420:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002424:	4a95      	ldr	r2, [pc, #596]	; (800267c <HAL_UART_MspInit+0x2c4>)
 8002426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800242a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800242e:	4b93      	ldr	r3, [pc, #588]	; (800267c <HAL_UART_MspInit+0x2c4>)
 8002430:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800243c:	4b8f      	ldr	r3, [pc, #572]	; (800267c <HAL_UART_MspInit+0x2c4>)
 800243e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002442:	4a8e      	ldr	r2, [pc, #568]	; (800267c <HAL_UART_MspInit+0x2c4>)
 8002444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002448:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800244c:	4b8b      	ldr	r3, [pc, #556]	; (800267c <HAL_UART_MspInit+0x2c4>)
 800244e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002452:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002456:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800245a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002464:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002468:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246a:	4b84      	ldr	r3, [pc, #528]	; (800267c <HAL_UART_MspInit+0x2c4>)
 800246c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002470:	4a82      	ldr	r2, [pc, #520]	; (800267c <HAL_UART_MspInit+0x2c4>)
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800247a:	4b80      	ldr	r3, [pc, #512]	; (800267c <HAL_UART_MspInit+0x2c4>)
 800247c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002480:	f003 0202 	and.w	r2, r3, #2
 8002484:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002488:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002496:	681b      	ldr	r3, [r3, #0]
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    PG5     ------> LPUART1_CTS
    PB1     ------> LPUART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_5;
 8002498:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800249c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80024b2:	2308      	movs	r3, #8
 80024b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024b8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80024bc:	4619      	mov	r1, r3
 80024be:	4870      	ldr	r0, [pc, #448]	; (8002680 <HAL_UART_MspInit+0x2c8>)
 80024c0:	f002 fa54 	bl	800496c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024c4:	2302      	movs	r3, #2
 80024c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80024dc:	2308      	movs	r3, #8
 80024de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80024e6:	4619      	mov	r1, r3
 80024e8:	4866      	ldr	r0, [pc, #408]	; (8002684 <HAL_UART_MspInit+0x2cc>)
 80024ea:	f002 fa3f 	bl	800496c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80024ee:	e0bd      	b.n	800266c <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART1)
 80024f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80024f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a62      	ldr	r2, [pc, #392]	; (8002688 <HAL_UART_MspInit+0x2d0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d155      	bne.n	80025ae <HAL_UART_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002502:	f04f 0201 	mov.w	r2, #1
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800250e:	2300      	movs	r3, #0
 8002510:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002516:	4618      	mov	r0, r3
 8002518:	f005 ff0a 	bl	8008330 <HAL_RCCEx_PeriphCLKConfig>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8002522:	f7ff fb01 	bl	8001b28 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002526:	4b55      	ldr	r3, [pc, #340]	; (800267c <HAL_UART_MspInit+0x2c4>)
 8002528:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800252c:	4a53      	ldr	r2, [pc, #332]	; (800267c <HAL_UART_MspInit+0x2c4>)
 800252e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002532:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002536:	4b51      	ldr	r3, [pc, #324]	; (800267c <HAL_UART_MspInit+0x2c4>)
 8002538:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800253c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002540:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800254e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002552:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002554:	4b49      	ldr	r3, [pc, #292]	; (800267c <HAL_UART_MspInit+0x2c4>)
 8002556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800255a:	4a48      	ldr	r2, [pc, #288]	; (800267c <HAL_UART_MspInit+0x2c4>)
 800255c:	f043 0302 	orr.w	r3, r3, #2
 8002560:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002564:	4b45      	ldr	r3, [pc, #276]	; (800267c <HAL_UART_MspInit+0x2c4>)
 8002566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800256a:	f003 0202 	and.w	r2, r3, #2
 800256e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002572:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800257c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002580:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002582:	23c0      	movs	r3, #192	; 0xc0
 8002584:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	2302      	movs	r3, #2
 800258a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002594:	2300      	movs	r3, #0
 8002596:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800259a:	2307      	movs	r3, #7
 800259c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80025a4:	4619      	mov	r1, r3
 80025a6:	4837      	ldr	r0, [pc, #220]	; (8002684 <HAL_UART_MspInit+0x2cc>)
 80025a8:	f002 f9e0 	bl	800496c <HAL_GPIO_Init>
}
 80025ac:	e05e      	b.n	800266c <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART6)
 80025ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80025b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a34      	ldr	r2, [pc, #208]	; (800268c <HAL_UART_MspInit+0x2d4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d155      	bne.n	800266c <HAL_UART_MspInit+0x2b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80025c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025d6:	4618      	mov	r0, r3
 80025d8:	f005 feaa 	bl	8008330 <HAL_RCCEx_PeriphCLKConfig>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 80025e2:	f7ff faa1 	bl	8001b28 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025e6:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_UART_MspInit+0x2c4>)
 80025e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025ec:	4a23      	ldr	r2, [pc, #140]	; (800267c <HAL_UART_MspInit+0x2c4>)
 80025ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025f2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80025f6:	4b21      	ldr	r3, [pc, #132]	; (800267c <HAL_UART_MspInit+0x2c4>)
 80025f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025fc:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002600:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002604:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800260e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002612:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002614:	4b19      	ldr	r3, [pc, #100]	; (800267c <HAL_UART_MspInit+0x2c4>)
 8002616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800261a:	4a18      	ldr	r2, [pc, #96]	; (800267c <HAL_UART_MspInit+0x2c4>)
 800261c:	f043 0304 	orr.w	r3, r3, #4
 8002620:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002624:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_UART_MspInit+0x2c4>)
 8002626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800262a:	f003 0204 	and.w	r2, r3, #4
 800262e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002632:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800263c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002640:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002642:	230c      	movs	r3, #12
 8002644:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002648:	2302      	movs	r3, #2
 800264a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	2300      	movs	r3, #0
 8002656:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800265a:	2307      	movs	r3, #7
 800265c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002660:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002664:	4619      	mov	r1, r3
 8002666:	480a      	ldr	r0, [pc, #40]	; (8002690 <HAL_UART_MspInit+0x2d8>)
 8002668:	f002 f980 	bl	800496c <HAL_GPIO_Init>
}
 800266c:	bf00      	nop
 800266e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	46002400 	.word	0x46002400
 800267c:	46020c00 	.word	0x46020c00
 8002680:	42021800 	.word	0x42021800
 8002684:	42020400 	.word	0x42020400
 8002688:	40013800 	.word	0x40013800
 800268c:	40006400 	.word	0x40006400
 8002690:	42020800 	.word	0x42020800

08002694 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b0bc      	sub	sp, #240	; 0xf0
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	22e0      	movs	r2, #224	; 0xe0
 80026a2:	2100      	movs	r1, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f00a fb96 	bl	800cdd6 <memset>
  if(hltdc->Instance==LTDC)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a22      	ldr	r2, [pc, #136]	; (8002738 <HAL_LTDC_MspInit+0xa4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d13d      	bne.n	8002730 <HAL_LTDC_MspInit+0x9c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0302 	mov.w	r3, #2
 80026bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 80026c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80026c8:	2303      	movs	r3, #3
 80026ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLL2.PLL2M = 1;
 80026cc:	2301      	movs	r3, #1
 80026ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLL2.PLL2N = 20;
 80026d0:	2314      	movs	r3, #20
 80026d2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2P = 2;
 80026d4:	2302      	movs	r3, #2
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLL2.PLL2Q = 2;
 80026d8:	2302      	movs	r3, #2
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLL2.PLL2R = 2;
 80026dc:	2302      	movs	r3, #2
 80026de:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 80026e0:	230c      	movs	r3, #12
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 80026e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026ec:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ee:	f107 0310 	add.w	r3, r7, #16
 80026f2:	4618      	mov	r0, r3
 80026f4:	f005 fe1c 	bl	8008330 <HAL_RCCEx_PeriphCLKConfig>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 80026fe:	f7ff fa13 	bl	8001b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002702:	4b0e      	ldr	r3, [pc, #56]	; (800273c <HAL_LTDC_MspInit+0xa8>)
 8002704:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002708:	4a0c      	ldr	r2, [pc, #48]	; (800273c <HAL_LTDC_MspInit+0xa8>)
 800270a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800270e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_LTDC_MspInit+0xa8>)
 8002714:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002720:	2200      	movs	r2, #0
 8002722:	2100      	movs	r1, #0
 8002724:	2087      	movs	r0, #135	; 0x87
 8002726:	f000 fd4d 	bl	80031c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800272a:	2087      	movs	r0, #135	; 0x87
 800272c:	f000 fd64 	bl	80031f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002730:	bf00      	nop
 8002732:	37f0      	adds	r7, #240	; 0xf0
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40016800 	.word	0x40016800
 800273c:	46020c00 	.word	0x46020c00

08002740 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b0ca      	sub	sp, #296	; 0x128
 8002744:	af00      	add	r7, sp, #0
 8002746:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800274a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800274e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002764:	22e0      	movs	r2, #224	; 0xe0
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f00a fb34 	bl	800cdd6 <memset>
  if(hospi->Instance==OCTOSPI1)
 800276e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002772:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a93      	ldr	r2, [pc, #588]	; (80029c8 <HAL_OSPI_MspInit+0x288>)
 800277c:	4293      	cmp	r3, r2
 800277e:	f040 8133 	bne.w	80029e8 <HAL_OSPI_MspInit+0x2a8>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002782:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800278e:	2300      	movs	r3, #0
 8002790:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002794:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002798:	4618      	mov	r0, r3
 800279a:	f005 fdc9 	bl	8008330 <HAL_RCCEx_PeriphCLKConfig>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 80027a4:	f7ff f9c0 	bl	8001b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 80027a8:	4b88      	ldr	r3, [pc, #544]	; (80029cc <HAL_OSPI_MspInit+0x28c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	3301      	adds	r3, #1
 80027ae:	4a87      	ldr	r2, [pc, #540]	; (80029cc <HAL_OSPI_MspInit+0x28c>)
 80027b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 80027b2:	4b86      	ldr	r3, [pc, #536]	; (80029cc <HAL_OSPI_MspInit+0x28c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d10e      	bne.n	80027d8 <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 80027ba:	4b85      	ldr	r3, [pc, #532]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 80027bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027c0:	4a83      	ldr	r2, [pc, #524]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 80027c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027ca:	4b81      	ldr	r3, [pc, #516]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 80027cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80027d8:	4b7d      	ldr	r3, [pc, #500]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027de:	4a7c      	ldr	r2, [pc, #496]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 80027e0:	f043 0310 	orr.w	r3, r3, #16
 80027e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027e8:	4b79      	ldr	r3, [pc, #484]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ee:	f003 0210 	and.w	r2, r3, #16
 80027f2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80027f6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002800:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002804:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002806:	4b72      	ldr	r3, [pc, #456]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 8002808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800280c:	4a70      	ldr	r2, [pc, #448]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 800280e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002812:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002816:	4b6e      	ldr	r3, [pc, #440]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 8002818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800281c:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002820:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002824:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800282e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002832:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002834:	4b66      	ldr	r3, [pc, #408]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 8002836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800283a:	4a65      	ldr	r2, [pc, #404]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 800283c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002840:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002844:	4b62      	ldr	r3, [pc, #392]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 8002846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800284a:	f003 0240 	and.w	r2, r3, #64	; 0x40
 800284e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800285c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002860:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002862:	4b5b      	ldr	r3, [pc, #364]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 8002864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002868:	4a59      	ldr	r2, [pc, #356]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 800286a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002872:	4b57      	ldr	r3, [pc, #348]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 8002874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002878:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800287c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002880:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800288a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800288e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002890:	4b4f      	ldr	r3, [pc, #316]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 8002892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002896:	4a4e      	ldr	r2, [pc, #312]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028a0:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 80028a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a6:	f003 0202 	and.w	r2, r3, #2
 80028aa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80028ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80028b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028bc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028be:	4b44      	ldr	r3, [pc, #272]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 80028c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c4:	4a42      	ldr	r2, [pc, #264]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 80028c6:	f043 0310 	orr.w	r3, r3, #16
 80028ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028ce:	4b40      	ldr	r3, [pc, #256]	; (80029d0 <HAL_OSPI_MspInit+0x290>)
 80028d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028d4:	f003 0210 	and.w	r2, r3, #16
 80028d8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80028dc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80028e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028ea:	681b      	ldr	r3, [r3, #0]
    PH9     ------> OCTOSPIM_P2_IO4
    PH12     ------> OCTOSPIM_P2_IO7
    PB10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9
 80028ec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80028f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002900:	2303      	movs	r3, #3
 8002902:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8002906:	2305      	movs	r3, #5
 8002908:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800290c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002910:	4619      	mov	r1, r3
 8002912:	4830      	ldr	r0, [pc, #192]	; (80029d4 <HAL_OSPI_MspInit+0x294>)
 8002914:	f002 f82a 	bl	800496c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002918:	2340      	movs	r3, #64	; 0x40
 800291a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292a:	2303      	movs	r3, #3
 800292c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8002930:	2303      	movs	r3, #3
 8002932:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002936:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800293a:	4619      	mov	r1, r3
 800293c:	4826      	ldr	r0, [pc, #152]	; (80029d8 <HAL_OSPI_MspInit+0x298>)
 800293e:	f002 f815 	bl	800496c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002942:	230e      	movs	r3, #14
 8002944:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002954:	2303      	movs	r3, #3
 8002956:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPI2;
 800295a:	2306      	movs	r3, #6
 800295c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002960:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002964:	4619      	mov	r1, r3
 8002966:	481d      	ldr	r0, [pc, #116]	; (80029dc <HAL_OSPI_MspInit+0x29c>)
 8002968:	f002 f800 	bl	800496c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 800296c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002970:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002974:	2302      	movs	r3, #2
 8002976:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297a:	2300      	movs	r3, #0
 800297c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002980:	2303      	movs	r3, #3
 8002982:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002986:	230a      	movs	r3, #10
 8002988:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002990:	4619      	mov	r1, r3
 8002992:	4813      	ldr	r0, [pc, #76]	; (80029e0 <HAL_OSPI_MspInit+0x2a0>)
 8002994:	f001 ffea 	bl	800496c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002998:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800299c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ac:	2303      	movs	r3, #3
 80029ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80029b2:	230a      	movs	r3, #10
 80029b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029b8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80029bc:	4619      	mov	r1, r3
 80029be:	4809      	ldr	r0, [pc, #36]	; (80029e4 <HAL_OSPI_MspInit+0x2a4>)
 80029c0:	f001 ffd4 	bl	800496c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 80029c4:	e08f      	b.n	8002ae6 <HAL_OSPI_MspInit+0x3a6>
 80029c6:	bf00      	nop
 80029c8:	420d1400 	.word	0x420d1400
 80029cc:	200014bc 	.word	0x200014bc
 80029d0:	46020c00 	.word	0x46020c00
 80029d4:	42021c00 	.word	0x42021c00
 80029d8:	42021800 	.word	0x42021800
 80029dc:	42022000 	.word	0x42022000
 80029e0:	42020400 	.word	0x42020400
 80029e4:	42021000 	.word	0x42021000
  else if(hospi->Instance==OCTOSPI2)
 80029e8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80029ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a3e      	ldr	r2, [pc, #248]	; (8002af0 <HAL_OSPI_MspInit+0x3b0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d175      	bne.n	8002ae6 <HAL_OSPI_MspInit+0x3a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80029fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a10:	4618      	mov	r0, r3
 8002a12:	f005 fc8d 	bl	8008330 <HAL_RCCEx_PeriphCLKConfig>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_OSPI_MspInit+0x2e0>
      Error_Handler();
 8002a1c:	f7ff f884 	bl	8001b28 <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8002a20:	4b34      	ldr	r3, [pc, #208]	; (8002af4 <HAL_OSPI_MspInit+0x3b4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	3301      	adds	r3, #1
 8002a26:	4a33      	ldr	r2, [pc, #204]	; (8002af4 <HAL_OSPI_MspInit+0x3b4>)
 8002a28:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8002a2a:	4b32      	ldr	r3, [pc, #200]	; (8002af4 <HAL_OSPI_MspInit+0x3b4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d116      	bne.n	8002a60 <HAL_OSPI_MspInit+0x320>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8002a32:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <HAL_OSPI_MspInit+0x3b8>)
 8002a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a38:	4a2f      	ldr	r2, [pc, #188]	; (8002af8 <HAL_OSPI_MspInit+0x3b8>)
 8002a3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a42:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_OSPI_MspInit+0x3b8>)
 8002a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a48:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002a4c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a50:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a5a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a5e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8002a60:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <HAL_OSPI_MspInit+0x3b8>)
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a66:	4a24      	ldr	r2, [pc, #144]	; (8002af8 <HAL_OSPI_MspInit+0x3b8>)
 8002a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a70:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <HAL_OSPI_MspInit+0x3b8>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a76:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002a7a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a7e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a88:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a8c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8e:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <HAL_OSPI_MspInit+0x3b8>)
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	4a18      	ldr	r2, [pc, #96]	; (8002af8 <HAL_OSPI_MspInit+0x3b8>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a9e:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <HAL_OSPI_MspInit+0x3b8>)
 8002aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aa4:	f003 0201 	and.w	r2, r3, #1
 8002aa8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002aac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002ab6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002aba:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002abc:	2301      	movs	r3, #1
 8002abe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI2;
 8002ad4:	230a      	movs	r3, #10
 8002ad6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ada:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4806      	ldr	r0, [pc, #24]	; (8002afc <HAL_OSPI_MspInit+0x3bc>)
 8002ae2:	f001 ff43 	bl	800496c <HAL_GPIO_Init>
}
 8002ae6:	bf00      	nop
 8002ae8:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	420d2400 	.word	0x420d2400
 8002af4:	200014bc 	.word	0x200014bc
 8002af8:	46020c00 	.word	0x46020c00
 8002afc:	42020000 	.word	0x42020000

08002b00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b0bc      	sub	sp, #240	; 0xf0
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b08:	f107 0310 	add.w	r3, r7, #16
 8002b0c:	22e0      	movs	r2, #224	; 0xe0
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f00a f960 	bl	800cdd6 <memset>
  if(hrtc->Instance==RTC)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1d      	ldr	r2, [pc, #116]	; (8002b90 <HAL_RTC_MspInit+0x90>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d132      	bne.n	8002b86 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b20:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b34:	f107 0310 	add.w	r3, r7, #16
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f005 fbf9 	bl	8008330 <HAL_RCCEx_PeriphCLKConfig>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002b44:	f7fe fff0 	bl	8001b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b48:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <HAL_RTC_MspInit+0x94>)
 8002b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b4e:	4a11      	ldr	r2, [pc, #68]	; (8002b94 <HAL_RTC_MspInit+0x94>)
 8002b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002b58:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <HAL_RTC_MspInit+0x94>)
 8002b5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b5e:	4a0d      	ldr	r2, [pc, #52]	; (8002b94 <HAL_RTC_MspInit+0x94>)
 8002b60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b64:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002b68:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <HAL_RTC_MspInit+0x94>)
 8002b6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <HAL_RTC_MspInit+0x94>)
 8002b78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b7c:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <HAL_RTC_MspInit+0x94>)
 8002b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b86:	bf00      	nop
 8002b88:	37f0      	adds	r7, #240	; 0xf0
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	46007800 	.word	0x46007800
 8002b94:	46020c00 	.word	0x46020c00

08002b98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b0c4      	sub	sp, #272	; 0x110
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ba2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ba6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bb8:	f107 0318 	add.w	r3, r7, #24
 8002bbc:	22e0      	movs	r2, #224	; 0xe0
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f00a f908 	bl	800cdd6 <memset>
  if(hspi->Instance==SPI1)
 8002bc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a41      	ldr	r2, [pc, #260]	; (8002cd8 <HAL_SPI_MspInit+0x140>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d17a      	bne.n	8002cce <HAL_SPI_MspInit+0x136>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002bd8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8002be4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002be8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bec:	f107 0318 	add.w	r3, r7, #24
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f005 fb9d 	bl	8008330 <HAL_RCCEx_PeriphCLKConfig>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8002bfc:	f7fe ff94 	bl	8001b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c00:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <HAL_SPI_MspInit+0x144>)
 8002c02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c06:	4a35      	ldr	r2, [pc, #212]	; (8002cdc <HAL_SPI_MspInit+0x144>)
 8002c08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c0c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002c10:	4b32      	ldr	r3, [pc, #200]	; (8002cdc <HAL_SPI_MspInit+0x144>)
 8002c12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1e:	4b2f      	ldr	r3, [pc, #188]	; (8002cdc <HAL_SPI_MspInit+0x144>)
 8002c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c24:	4a2d      	ldr	r2, [pc, #180]	; (8002cdc <HAL_SPI_MspInit+0x144>)
 8002c26:	f043 0302 	orr.w	r3, r3, #2
 8002c2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c2e:	4b2b      	ldr	r3, [pc, #172]	; (8002cdc <HAL_SPI_MspInit+0x144>)
 8002c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c34:	f003 0202 	and.w	r2, r3, #2
 8002c38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c3c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c46:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c4a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4c:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <HAL_SPI_MspInit+0x144>)
 8002c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c52:	4a22      	ldr	r2, [pc, #136]	; (8002cdc <HAL_SPI_MspInit+0x144>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c5c:	4b1f      	ldr	r3, [pc, #124]	; (8002cdc <HAL_SPI_MspInit+0x144>)
 8002c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c62:	f003 0201 	and.w	r2, r3, #1
 8002c66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c78:	681b      	ldr	r3, [r3, #0]
    PB0     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c92:	2305      	movs	r3, #5
 8002c94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c98:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4810      	ldr	r0, [pc, #64]	; (8002ce0 <HAL_SPI_MspInit+0x148>)
 8002ca0:	f001 fe64 	bl	800496c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 8002ca4:	23e0      	movs	r3, #224	; 0xe0
 8002ca6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	2302      	movs	r3, #2
 8002cac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cbc:	2305      	movs	r3, #5
 8002cbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4806      	ldr	r0, [pc, #24]	; (8002ce4 <HAL_SPI_MspInit+0x14c>)
 8002cca:	f001 fe4f 	bl	800496c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002cce:	bf00      	nop
 8002cd0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40013000 	.word	0x40013000
 8002cdc:	46020c00 	.word	0x46020c00
 8002ce0:	42020400 	.word	0x42020400
 8002ce4:	42020000 	.word	0x42020000

08002ce8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08e      	sub	sp, #56	; 0x38
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002cf8:	4b2e      	ldr	r3, [pc, #184]	; (8002db4 <HAL_InitTick+0xcc>)
 8002cfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cfe:	4a2d      	ldr	r2, [pc, #180]	; (8002db4 <HAL_InitTick+0xcc>)
 8002d00:	f043 0310 	orr.w	r3, r3, #16
 8002d04:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002d08:	4b2a      	ldr	r3, [pc, #168]	; (8002db4 <HAL_InitTick+0xcc>)
 8002d0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d16:	f107 0210 	add.w	r2, r7, #16
 8002d1a:	f107 0314 	add.w	r3, r7, #20
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f005 fa47 	bl	80081b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002d26:	f005 fa09 	bl	800813c <HAL_RCC_GetPCLK1Freq>
 8002d2a:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2e:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <HAL_InitTick+0xd0>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	0c9b      	lsrs	r3, r3, #18
 8002d36:	3b01      	subs	r3, #1
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002d3a:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <HAL_InitTick+0xd4>)
 8002d3c:	4a20      	ldr	r2, [pc, #128]	; (8002dc0 <HAL_InitTick+0xd8>)
 8002d3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002d40:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <HAL_InitTick+0xd4>)
 8002d42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d46:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d48:	4a1c      	ldr	r2, [pc, #112]	; (8002dbc <HAL_InitTick+0xd4>)
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <HAL_InitTick+0xd4>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d54:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <HAL_InitTick+0xd4>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002d5a:	4818      	ldr	r0, [pc, #96]	; (8002dbc <HAL_InitTick+0xd4>)
 8002d5c:	f008 ff48 	bl	800bbf0 <HAL_TIM_Base_Init>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8002d66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d118      	bne.n	8002da0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002d6e:	4813      	ldr	r0, [pc, #76]	; (8002dbc <HAL_InitTick+0xd4>)
 8002d70:	f008 ffa0 	bl	800bcb4 <HAL_TIM_Base_Start_IT>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8002d7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10e      	bne.n	8002da0 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b0f      	cmp	r3, #15
 8002d86:	d808      	bhi.n	8002d9a <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	2031      	movs	r0, #49	; 0x31
 8002d8e:	f000 fa19 	bl	80031c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d92:	4a0c      	ldr	r2, [pc, #48]	; (8002dc4 <HAL_InitTick+0xdc>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	e002      	b.n	8002da0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002da0:	2031      	movs	r0, #49	; 0x31
 8002da2:	f000 fa29 	bl	80031f8 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8002da6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3738      	adds	r7, #56	; 0x38
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	46020c00 	.word	0x46020c00
 8002db8:	431bde83 	.word	0x431bde83
 8002dbc:	200014c0 	.word	0x200014c0
 8002dc0:	40001000 	.word	0x40001000
 8002dc4:	20000d04 	.word	0x20000d04

08002dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002dcc:	e7fe      	b.n	8002dcc <NMI_Handler+0x4>

08002dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dd2:	e7fe      	b.n	8002dd2 <HardFault_Handler+0x4>

08002dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd8:	e7fe      	b.n	8002dd8 <MemManage_Handler+0x4>

08002dda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dde:	e7fe      	b.n	8002dde <BusFault_Handler+0x4>

08002de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <UsageFault_Handler+0x4>

08002de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e24:	4802      	ldr	r0, [pc, #8]	; (8002e30 <TIM6_IRQHandler+0x10>)
 8002e26:	f008 ffe5 	bl	800bdf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200014c0 	.word	0x200014c0

08002e34 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002e38:	4802      	ldr	r0, [pc, #8]	; (8002e44 <DMA2D_IRQHandler+0x10>)
 8002e3a:	f000 fc65 	bl	8003708 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000e64 	.word	0x20000e64

08002e48 <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 8002e4c:	4802      	ldr	r0, [pc, #8]	; (8002e58 <GPU2D_IRQHandler+0x10>)
 8002e4e:	f001 ffc1 	bl	8004dd4 <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000f30 	.word	0x20000f30

08002e5c <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 8002e60:	4802      	ldr	r0, [pc, #8]	; (8002e6c <GPU2D_ER_IRQHandler+0x10>)
 8002e62:	f001 ffdd 	bl	8004e20 <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000f30 	.word	0x20000f30

08002e70 <GFXMMU_IRQHandler>:

/**
  * @brief This function handles GFXMMU global interrupt.
  */
void GFXMMU_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GFXMMU_IRQn 0 */

  /* USER CODE END GFXMMU_IRQn 0 */
  HAL_GFXMMU_IRQHandler(&hgfxmmu);
 8002e74:	4802      	ldr	r0, [pc, #8]	; (8002e80 <GFXMMU_IRQHandler+0x10>)
 8002e76:	f001 fd49 	bl	800490c <HAL_GFXMMU_IRQHandler>
  /* USER CODE BEGIN GFXMMU_IRQn 1 */

  /* USER CODE END GFXMMU_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000ee8 	.word	0x20000ee8

08002e84 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002e88:	4802      	ldr	r0, [pc, #8]	; (8002e94 <LTDC_IRQHandler+0x10>)
 8002e8a:	f002 fa79 	bl	8005380 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	2000129c 	.word	0x2000129c

08002e98 <DSI_IRQHandler>:

/**
  * @brief This function handles DSIHOST global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002e9c:	4802      	ldr	r0, [pc, #8]	; (8002ea8 <DSI_IRQHandler+0x10>)
 8002e9e:	f001 f88b 	bl	8003fb8 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000ec4 	.word	0x20000ec4

08002eac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002eb0:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <SystemInit+0x68>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	4a17      	ldr	r2, [pc, #92]	; (8002f14 <SystemInit+0x68>)
 8002eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002ec0:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <SystemInit+0x6c>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002ec6:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <SystemInit+0x6c>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002ecc:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <SystemInit+0x6c>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <SystemInit+0x6c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <SystemInit+0x6c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0e      	ldr	r2, [pc, #56]	; (8002f18 <SystemInit+0x6c>)
 8002ede:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002ee2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002ee6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <SystemInit+0x6c>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002eee:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <SystemInit+0x6c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a09      	ldr	r2, [pc, #36]	; (8002f18 <SystemInit+0x6c>)
 8002ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002efa:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <SystemInit+0x6c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f00:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <SystemInit+0x68>)
 8002f02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f06:	609a      	str	r2, [r3, #8]
  #endif
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000ed00 	.word	0xe000ed00
 8002f18:	46020c00 	.word	0x46020c00

08002f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f54 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f20:	f7ff ffc4 	bl	8002eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f26:	e003      	b.n	8002f30 <LoopCopyDataInit>

08002f28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002f2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f2e:	3104      	adds	r1, #4

08002f30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f30:	480a      	ldr	r0, [pc, #40]	; (8002f5c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002f32:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002f34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f38:	d3f6      	bcc.n	8002f28 <CopyDataInit>
	ldr	r2, =_sbss
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002f3c:	e002      	b.n	8002f44 <LoopFillZerobss>

08002f3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002f3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002f40:	f842 3b04 	str.w	r3, [r2], #4

08002f44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <LoopForever+0x16>)
	cmp	r2, r3
 8002f46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002f48:	d3f9      	bcc.n	8002f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f4a:	f009 ff4d 	bl	800cde8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f4e:	f7fd fb3d 	bl	80005cc <main>

08002f52 <LoopForever>:

LoopForever:
    b LoopForever
 8002f52:	e7fe      	b.n	8002f52 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002f54:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8002f58:	0800cf58 	.word	0x0800cf58
	ldr	r0, =_sdata
 8002f5c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002f60:	20000d09 	.word	0x20000d09
	ldr	r2, =_sbss
 8002f64:	20000d0c 	.word	0x20000d0c
	ldr	r3, = _ebss
 8002f68:	20001534 	.word	0x20001534

08002f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f6c:	e7fe      	b.n	8002f6c <ADC1_2_IRQHandler>
	...

08002f70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <HAL_Init+0x4c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a10      	ldr	r2, [pc, #64]	; (8002fbc <HAL_Init+0x4c>)
 8002f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f80:	2003      	movs	r0, #3
 8002f82:	f000 f914 	bl	80031ae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002f86:	f004 ffbd 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <HAL_Init+0x50>)
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	490b      	ldr	r1, [pc, #44]	; (8002fc4 <HAL_Init+0x54>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9c:	4a0a      	ldr	r2, [pc, #40]	; (8002fc8 <HAL_Init+0x58>)
 8002f9e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fa0:	200f      	movs	r0, #15
 8002fa2:	f7ff fea1 	bl	8002ce8 <HAL_InitTick>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e002      	b.n	8002fb6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb0:	f7fe fdc0 	bl	8001b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40022000 	.word	0x40022000
 8002fc0:	46020c00 	.word	0x46020c00
 8002fc4:	0800ce48 	.word	0x0800ce48
 8002fc8:	20000d00 	.word	0x20000d00

08002fcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_IncTick+0x20>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_IncTick+0x24>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4413      	add	r3, r2
 8002fdc:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <HAL_IncTick+0x24>)
 8002fde:	6013      	str	r3, [r2, #0]
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000d08 	.word	0x20000d08
 8002ff0:	2000150c 	.word	0x2000150c

08002ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ff8:	4b03      	ldr	r3, [pc, #12]	; (8003008 <HAL_GetTick+0x14>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	2000150c 	.word	0x2000150c

0800300c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003014:	f7ff ffee 	bl	8002ff4 <HAL_GetTick>
 8003018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003024:	d005      	beq.n	8003032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003026:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <HAL_Delay+0x44>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4413      	add	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003032:	bf00      	nop
 8003034:	f7ff ffde 	bl	8002ff4 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	429a      	cmp	r2, r3
 8003042:	d8f7      	bhi.n	8003034 <HAL_Delay+0x28>
  {
  }
}
 8003044:	bf00      	nop
 8003046:	bf00      	nop
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000d08 	.word	0x20000d08

08003054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <__NVIC_SetPriorityGrouping+0x44>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003070:	4013      	ands	r3, r2
 8003072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800307c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003086:	4a04      	ldr	r2, [pc, #16]	; (8003098 <__NVIC_SetPriorityGrouping+0x44>)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	60d3      	str	r3, [r2, #12]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <__NVIC_GetPriorityGrouping+0x18>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	f003 0307 	and.w	r3, r3, #7
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	db0b      	blt.n	80030e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	f003 021f 	and.w	r2, r3, #31
 80030d0:	4907      	ldr	r1, [pc, #28]	; (80030f0 <__NVIC_EnableIRQ+0x38>)
 80030d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	2001      	movs	r0, #1
 80030da:	fa00 f202 	lsl.w	r2, r0, r2
 80030de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	e000e100 	.word	0xe000e100

080030f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	6039      	str	r1, [r7, #0]
 80030fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003104:	2b00      	cmp	r3, #0
 8003106:	db0a      	blt.n	800311e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	b2da      	uxtb	r2, r3
 800310c:	490c      	ldr	r1, [pc, #48]	; (8003140 <__NVIC_SetPriority+0x4c>)
 800310e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003112:	0112      	lsls	r2, r2, #4
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	440b      	add	r3, r1
 8003118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800311c:	e00a      	b.n	8003134 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4908      	ldr	r1, [pc, #32]	; (8003144 <__NVIC_SetPriority+0x50>)
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	3b04      	subs	r3, #4
 800312c:	0112      	lsls	r2, r2, #4
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	440b      	add	r3, r1
 8003132:	761a      	strb	r2, [r3, #24]
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000e100 	.word	0xe000e100
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003148:	b480      	push	{r7}
 800314a:	b089      	sub	sp, #36	; 0x24
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f1c3 0307 	rsb	r3, r3, #7
 8003162:	2b04      	cmp	r3, #4
 8003164:	bf28      	it	cs
 8003166:	2304      	movcs	r3, #4
 8003168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3304      	adds	r3, #4
 800316e:	2b06      	cmp	r3, #6
 8003170:	d902      	bls.n	8003178 <NVIC_EncodePriority+0x30>
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3b03      	subs	r3, #3
 8003176:	e000      	b.n	800317a <NVIC_EncodePriority+0x32>
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800317c:	f04f 32ff 	mov.w	r2, #4294967295
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43da      	mvns	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	401a      	ands	r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003190:	f04f 31ff 	mov.w	r1, #4294967295
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	fa01 f303 	lsl.w	r3, r1, r3
 800319a:	43d9      	mvns	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a0:	4313      	orrs	r3, r2
         );
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3724      	adds	r7, #36	; 0x24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff ff4c 	bl	8003054 <__NVIC_SetPriorityGrouping>
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031d2:	f7ff ff63 	bl	800309c <__NVIC_GetPriorityGrouping>
 80031d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	68b9      	ldr	r1, [r7, #8]
 80031dc:	6978      	ldr	r0, [r7, #20]
 80031de:	f7ff ffb3 	bl	8003148 <NVIC_EncodePriority>
 80031e2:	4602      	mov	r2, r0
 80031e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff ff82 	bl	80030f4 <__NVIC_SetPriority>
}
 80031f0:	bf00      	nop
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff ff56 	bl	80030b8 <__NVIC_EnableIRQ>
}
 800320c:	bf00      	nop
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e054      	b.n	80032d0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	7f5b      	ldrb	r3, [r3, #29]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d105      	bne.n	800323c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fe fd10 	bl	8001c5c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	791b      	ldrb	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10c      	bne.n	8003264 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <HAL_CRC_Init+0xc4>)
 8003250:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0218 	bic.w	r2, r2, #24
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	e00c      	b.n	800327e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6899      	ldr	r1, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	461a      	mov	r2, r3
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f834 	bl	80032dc <HAL_CRCEx_Polynomial_Set>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e028      	b.n	80032d0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	795b      	ldrb	r3, [r3, #5]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d105      	bne.n	8003292 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f04f 32ff 	mov.w	r2, #4294967295
 800328e:	611a      	str	r2, [r3, #16]
 8003290:	e004      	b.n	800329c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6912      	ldr	r2, [r2, #16]
 800329a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699a      	ldr	r2, [r3, #24]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	04c11db7 	.word	0x04c11db7

080032dc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80032ec:	231f      	movs	r3, #31
 80032ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d102      	bne.n	8003300 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
 80032fe:	e063      	b.n	80033c8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003300:	bf00      	nop
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1e5a      	subs	r2, r3, #1
 8003306:	613a      	str	r2, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d009      	beq.n	8003320 <HAL_CRCEx_Polynomial_Set+0x44>
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b18      	cmp	r3, #24
 8003324:	d846      	bhi.n	80033b4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003326:	a201      	add	r2, pc, #4	; (adr r2, 800332c <HAL_CRCEx_Polynomial_Set+0x50>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	080033bb 	.word	0x080033bb
 8003330:	080033b5 	.word	0x080033b5
 8003334:	080033b5 	.word	0x080033b5
 8003338:	080033b5 	.word	0x080033b5
 800333c:	080033b5 	.word	0x080033b5
 8003340:	080033b5 	.word	0x080033b5
 8003344:	080033b5 	.word	0x080033b5
 8003348:	080033b5 	.word	0x080033b5
 800334c:	080033a9 	.word	0x080033a9
 8003350:	080033b5 	.word	0x080033b5
 8003354:	080033b5 	.word	0x080033b5
 8003358:	080033b5 	.word	0x080033b5
 800335c:	080033b5 	.word	0x080033b5
 8003360:	080033b5 	.word	0x080033b5
 8003364:	080033b5 	.word	0x080033b5
 8003368:	080033b5 	.word	0x080033b5
 800336c:	0800339d 	.word	0x0800339d
 8003370:	080033b5 	.word	0x080033b5
 8003374:	080033b5 	.word	0x080033b5
 8003378:	080033b5 	.word	0x080033b5
 800337c:	080033b5 	.word	0x080033b5
 8003380:	080033b5 	.word	0x080033b5
 8003384:	080033b5 	.word	0x080033b5
 8003388:	080033b5 	.word	0x080033b5
 800338c:	08003391 	.word	0x08003391
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2b06      	cmp	r3, #6
 8003394:	d913      	bls.n	80033be <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800339a:	e010      	b.n	80033be <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b07      	cmp	r3, #7
 80033a0:	d90f      	bls.n	80033c2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80033a6:	e00c      	b.n	80033c2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	d90b      	bls.n	80033c6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80033b2:	e008      	b.n	80033c6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	75fb      	strb	r3, [r7, #23]
        break;
 80033b8:	e006      	b.n	80033c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033ba:	bf00      	nop
 80033bc:	e004      	b.n	80033c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033be:	bf00      	nop
 80033c0:	e002      	b.n	80033c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033c2:	bf00      	nop
 80033c4:	e000      	b.n	80033c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033c6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10d      	bne.n	80033ea <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f023 0118 	bic.w	r1, r3, #24
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	371c      	adds	r7, #28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e037      	b.n	800347a <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d119      	bne.n	800344a <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1a      	ldr	r2, [pc, #104]	; (8003484 <HAL_DCACHE_Init+0x8c>)
 800341a:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a1a      	ldr	r2, [pc, #104]	; (8003488 <HAL_DCACHE_Init+0x90>)
 8003420:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a19      	ldr	r2, [pc, #100]	; (800348c <HAL_DCACHE_Init+0x94>)
 8003426:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a19      	ldr	r2, [pc, #100]	; (8003490 <HAL_DCACHE_Init+0x98>)
 800342c:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a18      	ldr	r2, [pc, #96]	; (8003494 <HAL_DCACHE_Init+0x9c>)
 8003432:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d102      	bne.n	8003442 <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a16      	ldr	r2, [pc, #88]	; (8003498 <HAL_DCACHE_Init+0xa0>)
 8003440:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f814 	bl	800349c <HAL_DCACHE_Enable>
 8003474:	4603      	mov	r3, r0
 8003476:	73fb      	strb	r3, [r7, #15]

  return status;
 8003478:	7bfb      	ldrb	r3, [r7, #15]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	0800353b 	.word	0x0800353b
 8003488:	080034eb 	.word	0x080034eb
 800348c:	080034ff 	.word	0x080034ff
 8003490:	08003527 	.word	0x08003527
 8003494:	08003513 	.word	0x08003513
 8003498:	08001ca1 	.word	0x08001ca1

0800349c <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e015      	b.n	80034de <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0309 	and.w	r3, r3, #9
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 80034c0:	2302      	movs	r3, #2
 80034c2:	73fb      	strb	r3, [r7, #15]
 80034c4:	e00a      	b.n	80034dc <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
  }

  return status;
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003556:	f7ff fd4d 	bl	8002ff4 <HAL_GetTick>
 800355a:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e06b      	b.n	800363e <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d008      	beq.n	8003584 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e05c      	b.n	800363e <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0204 	orr.w	r2, r2, #4
 8003592:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2205      	movs	r2, #5
 8003598:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800359c:	e020      	b.n	80035e0 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800359e:	f7ff fd29 	bl	8002ff4 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b05      	cmp	r3, #5
 80035aa:	d919      	bls.n	80035e0 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b0:	f043 0210 	orr.w	r2, r3, #16
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2203      	movs	r2, #3
 80035bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d0:	2201      	movs	r2, #1
 80035d2:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e02e      	b.n	800363e <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0d7      	beq.n	800359e <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0202 	orr.w	r2, r2, #2
 80035fc:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2204      	movs	r2, #4
 8003602:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800360e:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003628:	2201      	movs	r2, #1
 800362a:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2200      	movs	r2, #0
 8003632:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e053      	b.n	8003700 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d106      	bne.n	8003672 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7fe fb51 	bl	8001d14 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2202      	movs	r2, #2
 8003676:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6851      	ldr	r1, [r2, #4]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	69d2      	ldr	r2, [r2, #28]
 8003690:	4311      	orrs	r1, r2
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	430b      	orrs	r3, r1
 8003698:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a0:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 80036a4:	f023 0301 	bic.w	r3, r3, #1
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6891      	ldr	r1, [r2, #8]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6992      	ldr	r2, [r2, #24]
 80036b0:	4311      	orrs	r1, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	430b      	orrs	r3, r1
 80036b8:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	0c1b      	lsrs	r3, r3, #16
 80036c2:	041b      	lsls	r3, r3, #16
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	68d1      	ldr	r1, [r2, #12]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	430b      	orrs	r3, r1
 80036ce:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	051a      	lsls	r2, r3, #20
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	055b      	lsls	r3, r3, #21
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d026      	beq.n	8003778 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d021      	beq.n	8003778 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003742:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003748:	f043 0201 	orr.w	r2, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2201      	movs	r2, #1
 8003756:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2204      	movs	r2, #4
 800375c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b00      	cmp	r3, #0
 8003780:	d026      	beq.n	80037d0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d021      	beq.n	80037d0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800379a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2220      	movs	r2, #32
 80037a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a8:	f043 0202 	orr.w	r2, r3, #2
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2204      	movs	r2, #4
 80037b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d026      	beq.n	8003828 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d021      	beq.n	8003828 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037f2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2208      	movs	r2, #8
 80037fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003800:	f043 0204 	orr.w	r2, r3, #4
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2204      	movs	r2, #4
 800380c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d013      	beq.n	800385a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00e      	beq.n	800385a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2204      	movs	r2, #4
 8003852:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f853 	bl	8003900 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d024      	beq.n	80038ae <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386a:	2b00      	cmp	r3, #0
 800386c:	d01f      	beq.n	80038ae <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800387c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2202      	movs	r2, #2
 8003884:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferCpltCallback != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d01f      	beq.n	80038f8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d01a      	beq.n	80038f8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038d0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2210      	movs	r2, #16
 80038d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f80e 	bl	8003914 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_DMA2D_ConfigLayer+0x20>
 8003944:	2302      	movs	r3, #2
 8003946:	e084      	b.n	8003a52 <HAL_DMA2D_ConfigLayer+0x12a>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4413      	add	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	3328      	adds	r3, #40	; 0x28
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	4413      	add	r3, r2
 8003968:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	041b      	lsls	r3, r3, #16
 8003974:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800397c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003988:	4b35      	ldr	r3, [pc, #212]	; (8003a60 <HAL_DMA2D_ConfigLayer+0x138>)
 800398a:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b0a      	cmp	r3, #10
 8003992:	d003      	beq.n	800399c <HAL_DMA2D_ConfigLayer+0x74>
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b09      	cmp	r3, #9
 800399a:	d107      	bne.n	80039ac <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	e005      	b.n	80039b8 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	061b      	lsls	r3, r3, #24
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d120      	bne.n	8003a00 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	43db      	mvns	r3, r3
 80039c8:	ea02 0103 	and.w	r1, r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b0a      	cmp	r3, #10
 80039e6:	d003      	beq.n	80039f0 <HAL_DMA2D_ConfigLayer+0xc8>
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b09      	cmp	r3, #9
 80039ee:	d127      	bne.n	8003a40 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80039fc:	629a      	str	r2, [r3, #40]	; 0x28
 80039fe:	e01f      	b.n	8003a40 <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	ea02 0103 	and.w	r1, r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b0a      	cmp	r3, #10
 8003a28:	d003      	beq.n	8003a32 <HAL_DMA2D_ConfigLayer+0x10a>
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b09      	cmp	r3, #9
 8003a30:	d106      	bne.n	8003a40 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003a3e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	ff33000f 	.word	0xff33000f

08003a64 <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003a7c:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	; 0xc04
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	00da      	lsls	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	220e      	movs	r2, #14
 8003a9e:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	; 0xc70
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 021f 	bic.w	r2, r2, #31
 8003ab2:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6912      	ldr	r2, [r2, #16]
 8003abe:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	220e      	movs	r2, #14
 8003ac8:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	; 0xd08
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 021f 	bic.w	r2, r2, #31
 8003adc:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6912      	ldr	r2, [r2, #16]
 8003ae8:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	220e      	movs	r2, #14
 8003af2:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	; 0xc5c
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003b06:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003b1a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d007      	beq.n	8003b36 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d003      	beq.n	8003b36 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8003b32:	2b05      	cmp	r3, #5
 8003b34:	d10a      	bne.n	8003b4c <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8003b4a:	e02c      	b.n	8003ba6 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00b      	beq.n	8003b6c <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d007      	beq.n	8003b6c <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d003      	beq.n	8003b6c <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8003b68:	2b06      	cmp	r3, #6
 8003b6a:	d10a      	bne.n	8003b82 <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2210      	movs	r2, #16
 8003b72:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2210      	movs	r2, #16
 8003b7c:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8003b80:	e011      	b.n	8003ba6 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	2b07      	cmp	r3, #7
 8003b88:	d003      	beq.n	8003b92 <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d109      	bne.n	8003ba6 <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	; 0xc60
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 020f 	bic.w	r2, r2, #15
 8003bb6:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	; 0xcf8
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 020f 	bic.w	r2, r2, #15
 8003bca:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6952      	ldr	r2, [r2, #20]
 8003bd6:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6952      	ldr	r2, [r2, #20]
 8003be2:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003c0c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	075a      	lsls	r2, r3, #29
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003c38:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	031a      	lsls	r2, r3, #12
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	021a      	lsls	r2, r3, #8
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0c3      	b.n	8003e14 <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	7e5b      	ldrb	r3, [r3, #25]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d102      	bne.n	8003c9c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fe f864 	bl	8001d64 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb2:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 8003cb6:	2002      	movs	r0, #2
 8003cb8:	f7ff f9a8 	bl	800300c <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	4b54      	ldr	r3, [pc, #336]	; (8003e1c <HAL_DSI_Init+0x1a4>)
 8003cca:	400b      	ands	r3, r1
 8003ccc:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003ce4:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003cec:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff feb3 	bl	8003a64 <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 8003cfe:	6839      	ldr	r1, [r7, #0]
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ff76 	bl	8003bf2 <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003d06:	2300      	movs	r3, #0
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	60bb      	str	r3, [r7, #8]
 8003d2c:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8003d2e:	2001      	movs	r0, #1
 8003d30:	f7ff f96c 	bl	800300c <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d34:	f7ff f95e 	bl	8002ff4 <HAL_GetTick>
 8003d38:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003d3c:	f7ff f95a 	bl	8002ff4 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e062      	b.n	8003e14 <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0ee      	beq.n	8003d3c <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0206 	orr.w	r2, r2, #6
 8003d6e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0203 	bic.w	r2, r2, #3
 8003d82:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0201 	orr.w	r2, r2, #1
 8003d9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0203 	bic.w	r2, r2, #3
 8003db0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dd8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6899      	ldr	r1, [r3, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	e0000003 	.word	0xe0000003

08003e20 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	7e1b      	ldrb	r3, [r3, #24]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_DSI_ConfigErrorMonitor+0x16>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e0ba      	b.n	8003fac <HAL_DSI_ConfigErrorMonitor+0x18c>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00b      	beq.n	8003e78 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003e70:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003e74:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003e92:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d009      	beq.n	8003eb4 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0201 	orr.w	r2, r2, #1
 8003eb0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d009      	beq.n	8003ed2 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0202 	orr.w	r2, r2, #2
 8003ece:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d009      	beq.n	8003ef0 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 020c 	orr.w	r2, r2, #12
 8003eec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d009      	beq.n	8003f0e <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0210 	orr.w	r2, r2, #16
 8003f0a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d009      	beq.n	8003f2c <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0220 	orr.w	r2, r2, #32
 8003f28:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d009      	beq.n	8003f4a <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f46:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d009      	beq.n	8003f68 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f64:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003f82:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003fa0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00f      	beq.n	8003ff0 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d007      	beq.n	8003ff0 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f8b8 	bl	8004160 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00f      	beq.n	8004020 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2202      	movs	r2, #2
 8004016:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f8aa 	bl	8004174 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 8097 	beq.w	8004158 <HAL_DSI_IRQHandler+0x1a0>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004032:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4013      	ands	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800404a:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	4013      	ands	r3, r2
 8004058:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d005      	beq.n	800406e <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f043 0201 	orr.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	f043 0202 	orr.w	r2, r3, #2
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f043 0204 	orr.w	r2, r3, #4
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	f043 0208 	orr.w	r2, r3, #8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d005      	beq.n	80040c6 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f043 0210 	orr.w	r2, r3, #16
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	f043 0220 	orr.w	r2, r3, #32
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PBU_MASK) != 0U)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_DSI_IRQHandler+0x192>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PBU;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	61da      	str	r2, [r3, #28]
    }
    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_DSI_IRQHandler+0x1a0>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f818 	bl	8004188 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	7e1b      	ldrb	r3, [r3, #24]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_DSI_SetGenericVCID+0x16>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e019      	b.n	80041e6 <HAL_DSI_SetGenericVCID+0x4a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
 80041c6:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	7e1b      	ldrb	r3, [r3, #24]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004204:	2302      	movs	r3, #2
 8004206:	e0c5      	b.n	8004394 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0201 	orr.w	r2, r2, #1
 800421c:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0201 	bic.w	r2, r2, #1
 800422e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0203 	bic.w	r2, r2, #3
 8004254:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68d9      	ldr	r1, [r3, #12]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695a      	ldr	r2, [r3, #20]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0207 	bic.w	r2, r2, #7
 8004276:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6959      	ldr	r1, [r3, #20]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	69da      	ldr	r2, [r3, #28]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	431a      	orrs	r2, r3
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 020f 	bic.w	r2, r2, #15
 80042a4:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6919      	ldr	r1, [r3, #16]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 020e 	bic.w	r2, r2, #14
 80042c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	005a      	lsls	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6812      	ldr	r2, [r2, #0]
 80042ee:	0c1b      	lsrs	r3, r3, #16
 80042f0:	041b      	lsls	r3, r3, #16
 80042f2:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004316:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	431a      	orrs	r2, r3
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0201 	bic.w	r2, r2, #1
 8004350:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f042 0201 	orr.w	r2, r2, #1
 8004374:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0202 	orr.w	r2, r2, #2
 8004388:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	7e1b      	ldrb	r3, [r3, #24]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_DSI_ConfigCommand+0x16>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e049      	b.n	800444a <HAL_DSI_ConfigCommand+0xaa>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b24      	ldr	r3, [pc, #144]	; (8004458 <HAL_DSI_ConfigCommand+0xb8>)
 80043c8:	400b      	ands	r3, r1
 80043ca:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80043da:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80043e0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80043e6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80043ec:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80043f2:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80043f8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80043fe:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004404:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800440a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004410:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004416:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0202 	bic.w	r2, r2, #2
 800442e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	fef080ff 	.word	0xfef080ff

0800445c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	7e1b      	ldrb	r3, [r3, #24]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_DSI_ConfigFlowControl+0x16>
 800446e:	2302      	movs	r3, #2
 8004470:	e016      	b.n	80044a0 <HAL_DSI_ConfigFlowControl+0x44>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	7e1b      	ldrb	r3, [r3, #24]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_DSI_ConfigPhyTimer+0x16>
 80044be:	2302      	movs	r3, #2
 80044c0:	e084      	b.n	80045cc <HAL_DSI_ConfigPhyTimer+0x120>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	441a      	add	r2, r3
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6859      	ldr	r1, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695a      	ldr	r2, [r3, #20]
 80044de:	4613      	mov	r3, r2
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	4413      	add	r3, r2
 80044e4:	18ca      	adds	r2, r1, r3
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	441a      	add	r2, r3
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	4293      	cmp	r3, r2
 8004504:	bf38      	it	cc
 8004506:	4613      	movcc	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800451a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	041a      	lsls	r2, r3, #16
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004548:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	041b      	lsls	r3, r3, #16
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6812      	ldr	r2, [r2, #0]
 8004576:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800457a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800457e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80045a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	021a      	lsls	r2, r3, #8
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	7e1b      	ldrb	r3, [r3, #24]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_DSI_ConfigHostTimeouts+0x16>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e0b4      	b.n	8004758 <HAL_DSI_ConfigHostTimeouts+0x180>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004602:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6899      	ldr	r1, [r3, #8]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	021a      	lsls	r2, r3, #8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	b292      	uxth	r2, r2
 8004624:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	041a      	lsls	r2, r3, #16
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	0c1b      	lsrs	r3, r3, #16
 8004646:	041b      	lsls	r3, r3, #16
 8004648:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6812      	ldr	r2, [r2, #0]
 8004666:	0c1b      	lsrs	r3, r3, #16
 8004668:	041b      	lsls	r3, r3, #16
 800466a:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	0c1b      	lsrs	r3, r3, #16
 800468c:	041b      	lsls	r3, r3, #16
 800468e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	0c1b      	lsrs	r3, r3, #16
 80046b6:	041b      	lsls	r3, r3, #16
 80046b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	695a      	ldr	r2, [r3, #20]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80046e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	041b      	lsls	r3, r3, #16
 800470c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	69da      	ldr	r2, [r3, #28]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	0c1b      	lsrs	r3, r3, #16
 8004734:	041b      	lsls	r3, r3, #16
 8004736:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6a1a      	ldr	r2, [r3, #32]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_GFXMMU_Init>:
  *         GFXMMU_InitTypeDef structure and initialize the associated handle.
  * @param  hgfxmmu GFXMMU handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GFXMMU_Init(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	73fb      	strb	r3, [r7, #15]

  /* Check GFXMMU handle */
  if (hgfxmmu == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d102      	bne.n	800477c <HAL_GFXMMU_Init+0x18>
  {
    status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	73fb      	strb	r3, [r7, #15]
 800477a:	e06e      	b.n	800485a <HAL_GFXMMU_Init+0xf6>
      hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
    }
    hgfxmmu->MspInitCallback(hgfxmmu);
#else
    /* Call GFXMMU MSP init function */
    HAL_GFXMMU_MspInit(hgfxmmu);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7fd fb75 	bl	8001e6c <HAL_GFXMMU_MspInit>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */

    /* Configure GFXMMU_CR register */
    hgfxmmu->Instance->CR = 0U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
    hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlocksPerLine);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6819      	ldr	r1, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	601a      	str	r2, [r3, #0]
#if defined(GFXMMU_CR_CE)
    if (hgfxmmu->Init.CachePrefetch.Activation == ENABLE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	7f1b      	ldrb	r3, [r3, #28]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d12c      	bne.n	80047fe <HAL_GFXMMU_Init+0x9a>
    {
      assert_param(IS_GFXMMU_CACHE_LOCK(hgfxmmu->Init.CachePrefetch.CacheLock));
      assert_param(IS_GFXMMU_PREFETCH(hgfxmmu->Init.CachePrefetch.Prefetch));
      assert_param(IS_GFXMMU_OUTTER_BUFFERABILITY(hgfxmmu->Init.CachePrefetch.OutterBufferability));
      assert_param(IS_GFXMMU_OUTTER_CACHABILITY(hgfxmmu->Init.CachePrefetch.OutterCachability));
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a19      	ldr	r1, [r3, #32]
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 80047b2:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 80047b8:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterCachability);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 80047be:	430b      	orrs	r3, r1
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047ca:	601a      	str	r2, [r3, #0]
      if (hgfxmmu->Init.CachePrefetch.CacheLock == GFXMMU_CACHE_LOCK_ENABLE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d4:	d10b      	bne.n	80047ee <HAL_GFXMMU_Init+0x8a>
      {
        assert_param(IS_GFXMMU_CACHE_LOCK_BUFFER(hgfxmmu->Init.CachePrefetch.CacheLockBuffer));
        assert_param(IS_GFXMMU_CACHE_FORCE(hgfxmmu->Init.CachePrefetch.CacheForce));
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6819      	ldr	r1, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                  hgfxmmu->Init.CachePrefetch.CacheForce);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	601a      	str	r2, [r3, #0]
      }

      /* Force invalidate cache if cache is enabled */
      hgfxmmu->Instance->CCR |= GFXMMU_CACHE_FORCE_INVALIDATE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0202 	orr.w	r2, r2, #2
 80047fc:	60da      	str	r2, [r3, #12]
      assert_param(IS_GFXMMU_ADDRESSCACHE_LOCK_BUFFER(hgfxmmu->Init.AddressCache.AddressCacheLockBuffer));
      hgfxmmu->Instance->CR |= GFXMMU_CR_ACE |
                               hgfxmmu->Init.AddressCache.AddressCacheLockBuffer;
    }
#endif /* GFXMMU_CR_ACE */
    if (hgfxmmu->Init.Interrupts.Activation == ENABLE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004804:	2b01      	cmp	r3, #1
 8004806:	d108      	bne.n	800481a <HAL_GFXMMU_Init+0xb6>
    {
      assert_param(IS_GFXMMU_INTERRUPTS(hgfxmmu->Init.Interrupts.UsedInterrupts));
      hgfxmmu->Instance->CR |= hgfxmmu->Init.Interrupts.UsedInterrupts;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6819      	ldr	r1, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	601a      	str	r2, [r3, #0]
    }

    /* Configure default value on GFXMMU_DVR register */
    hgfxmmu->Instance->DVR = hgfxmmu->Init.DefaultValue;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6892      	ldr	r2, [r2, #8]
 8004822:	611a      	str	r2, [r3, #16]

    /* Configure physical buffer addresses on GFXMMU_BxCR registers */
    hgfxmmu->Instance->B0CR = hgfxmmu->Init.Buffers.Buf0Address;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	68d2      	ldr	r2, [r2, #12]
 800482c:	621a      	str	r2, [r3, #32]
    hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6912      	ldr	r2, [r2, #16]
 8004836:	625a      	str	r2, [r3, #36]	; 0x24
    hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6952      	ldr	r2, [r2, #20]
 8004840:	629a      	str	r2, [r3, #40]	; 0x28
    hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6992      	ldr	r2, [r2, #24]
 800484a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Reset GFXMMU error code */
    hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set GFXMMU to ready state */
    hgfxmmu->State = HAL_GFXMMU_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }
  /* Return function status */
  return status;
 800485a:	7bfb      	ldrb	r3, [r7, #15]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_GFXMMU_ConfigLut>:
  */
HAL_StatusTypeDef HAL_GFXMMU_ConfigLut(GFXMMU_HandleTypeDef *hgfxmmu,
                                       uint32_t FirstLine,
                                       uint32_t LinesNumber,
                                       uint32_t Address)
{
 8004864:	b480      	push	{r7}
 8004866:	b08b      	sub	sp, #44	; 0x2c
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
  assert_param(IS_GFXMMU_LUT_LINE(FirstLine));
  assert_param(IS_GFXMMU_LUT_LINES_NUMBER(LinesNumber));

  /* Check GFXMMU state and coherent parameters */
  if ((hgfxmmu->State != HAL_GFXMMU_STATE_READY) || ((FirstLine + LinesNumber) > 1024U))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800487e:	2b01      	cmp	r3, #1
 8004880:	d105      	bne.n	800488e <HAL_GFXMMU_ConfigLut+0x2a>
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4413      	add	r3, r2
 8004888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800488c:	d903      	bls.n	8004896 <HAL_GFXMMU_ConfigLut+0x32>
  {
    status = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004894:	e032      	b.n	80048fc <HAL_GFXMMU_ConfigLut+0x98>
    uint32_t current_line;
    uint32_t lutxl_address;
    uint32_t lutxh_address;

    /* Initialize local variables */
    current_address = Address;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	623b      	str	r3, [r7, #32]
    current_line    = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
    lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
    lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * FirstLine) + 1U]);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	3301      	adds	r3, #1
 80048ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]

    /* Copy LUT from flash to look up RAM */
    while (current_line < LinesNumber)
 80048c4:	e016      	b.n	80048f4 <HAL_GFXMMU_ConfigLut+0x90>
    {
      *((uint32_t *)lutxl_address) = *((uint32_t *)current_address);
 80048c6:	6a3a      	ldr	r2, [r7, #32]
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	6812      	ldr	r2, [r2, #0]
 80048cc:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	3304      	adds	r3, #4
 80048d2:	623b      	str	r3, [r7, #32]
      *((uint32_t *)lutxh_address) = *((uint32_t *)current_address);
 80048d4:	6a3a      	ldr	r2, [r7, #32]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	3304      	adds	r3, #4
 80048e0:	623b      	str	r3, [r7, #32]
      lutxl_address += 8U;
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	3308      	adds	r3, #8
 80048e6:	61bb      	str	r3, [r7, #24]
      lutxh_address += 8U;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	3308      	adds	r3, #8
 80048ec:	617b      	str	r3, [r7, #20]
      current_line++;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	3301      	adds	r3, #1
 80048f2:	61fb      	str	r3, [r7, #28]
    while (current_line < LinesNumber)
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d3e4      	bcc.n	80048c6 <HAL_GFXMMU_ConfigLut+0x62>
    }
  }
  /* Return function status */
  return status;
 80048fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004900:	4618      	mov	r0, r3
 8004902:	372c      	adds	r7, #44	; 0x2c
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_GFXMMU_IRQHandler>:
  * @brief  This function handles the GFXMMU interrupts.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
void HAL_GFXMMU_IRQHandler(GFXMMU_HandleTypeDef *hgfxmmu)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t flags, interrupts, error;

  /* Read current flags and interrupts and determine which error occurs */
  flags = hgfxmmu->Instance->SR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	617b      	str	r3, [r7, #20]
  interrupts = (hgfxmmu->Instance->CR & GFXMMU_CR_ITS_MASK);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 031f 	and.w	r3, r3, #31
 8004926:	613b      	str	r3, [r7, #16]
  error = (flags & interrupts);
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4013      	ands	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]

  if (error != 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00c      	beq.n	8004950 <HAL_GFXMMU_IRQHandler+0x44>
  {
    /* Clear flags on GFXMMU_FCR register */
    hgfxmmu->Instance->FCR = error;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	609a      	str	r2, [r3, #8]

    /* Update GFXMMU error code */
    hgfxmmu->ErrorCode |= error;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	645a      	str	r2, [r3, #68]	; 0x44

    /* Call GFXMMU error callback */
#if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
    hgfxmmu->ErrorCallback(hgfxmmu);
#else
    HAL_GFXMMU_ErrorCallback(hgfxmmu);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f804 	bl	8004958 <HAL_GFXMMU_ErrorCallback>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
  }
}
 8004950:	bf00      	nop
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_GFXMMU_ErrorCallback>:
  * @brief  Error callback.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
__weak void HAL_GFXMMU_ErrorCallback(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(hgfxmmu);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_GFXMMU_ErrorCallback could be implemented in the user file.
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800496c:	b480      	push	{r7}
 800496e:	b089      	sub	sp, #36	; 0x24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800497e:	e1ba      	b.n	8004cf6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	2101      	movs	r1, #1
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	fa01 f303 	lsl.w	r3, r1, r3
 800498c:	4013      	ands	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 81aa 	beq.w	8004cf0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a55      	ldr	r2, [pc, #340]	; (8004af4 <HAL_GPIO_Init+0x188>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d15d      	bne.n	8004a60 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80049aa:	2201      	movs	r2, #1
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	4013      	ands	r3, r2
 80049b8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f003 0201 	and.w	r2, r3, #1
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69fa      	ldr	r2, [r7, #28]
 80049d2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80049d4:	4a48      	ldr	r2, [pc, #288]	; (8004af8 <HAL_GPIO_Init+0x18c>)
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049dc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80049de:	4a46      	ldr	r2, [pc, #280]	; (8004af8 <HAL_GPIO_Init+0x18c>)
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	4413      	add	r3, r2
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	08da      	lsrs	r2, r3, #3
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	3208      	adds	r2, #8
 80049f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	220f      	movs	r2, #15
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	43db      	mvns	r3, r3
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	220b      	movs	r2, #11
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	08da      	lsrs	r2, r3, #3
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	3208      	adds	r2, #8
 8004a2a:	69f9      	ldr	r1, [r7, #28]
 8004a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	43db      	mvns	r3, r3
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	4013      	ands	r3, r2
 8004a46:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e067      	b.n	8004b30 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d003      	beq.n	8004a70 <HAL_GPIO_Init+0x104>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b12      	cmp	r3, #18
 8004a6e:	d145      	bne.n	8004afc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	08da      	lsrs	r2, r3, #3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3208      	adds	r2, #8
 8004a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	220f      	movs	r2, #15
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f003 020f 	and.w	r2, r3, #15
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	08da      	lsrs	r2, r3, #3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3208      	adds	r2, #8
 8004ab6:	69f9      	ldr	r1, [r7, #28]
 8004ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 0203 	and.w	r2, r3, #3
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	e01e      	b.n	8004b30 <HAL_GPIO_Init+0x1c4>
 8004af2:	bf00      	nop
 8004af4:	46020000 	.word	0x46020000
 8004af8:	0800cea0 	.word	0x0800cea0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	2203      	movs	r2, #3
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	4013      	ands	r3, r2
 8004b12:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 0203 	and.w	r2, r3, #3
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d00b      	beq.n	8004b50 <HAL_GPIO_Init+0x1e4>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d007      	beq.n	8004b50 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b44:	2b11      	cmp	r3, #17
 8004b46:	d003      	beq.n	8004b50 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b12      	cmp	r3, #18
 8004b4e:	d130      	bne.n	8004bb2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	2203      	movs	r2, #3
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	43db      	mvns	r3, r3
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	4013      	ands	r3, r2
 8004b66:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	69fa      	ldr	r2, [r7, #28]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	69fa      	ldr	r2, [r7, #28]
 8004b7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004b86:	2201      	movs	r2, #1
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	4013      	ands	r3, r2
 8004b94:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	091b      	lsrs	r3, r3, #4
 8004b9c:	f003 0201 	and.w	r2, r3, #1
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d017      	beq.n	8004bea <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bca:	43db      	mvns	r3, r3
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d07c      	beq.n	8004cf0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004bf6:	4a47      	ldr	r2, [pc, #284]	; (8004d14 <HAL_GPIO_Init+0x3a8>)
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	089b      	lsrs	r3, r3, #2
 8004bfc:	3318      	adds	r3, #24
 8004bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c02:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	220f      	movs	r2, #15
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43db      	mvns	r3, r3
 8004c14:	69fa      	ldr	r2, [r7, #28]
 8004c16:	4013      	ands	r3, r2
 8004c18:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	0a9a      	lsrs	r2, r3, #10
 8004c1e:	4b3e      	ldr	r3, [pc, #248]	; (8004d18 <HAL_GPIO_Init+0x3ac>)
 8004c20:	4013      	ands	r3, r2
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	f002 0203 	and.w	r2, r2, #3
 8004c28:	00d2      	lsls	r2, r2, #3
 8004c2a:	4093      	lsls	r3, r2
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004c32:	4938      	ldr	r1, [pc, #224]	; (8004d14 <HAL_GPIO_Init+0x3a8>)
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	089b      	lsrs	r3, r3, #2
 8004c38:	3318      	adds	r3, #24
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004c40:	4b34      	ldr	r3, [pc, #208]	; (8004d14 <HAL_GPIO_Init+0x3a8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	69fa      	ldr	r2, [r7, #28]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004c5c:	69fa      	ldr	r2, [r7, #28]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004c64:	4a2b      	ldr	r2, [pc, #172]	; (8004d14 <HAL_GPIO_Init+0x3a8>)
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004c6a:	4b2a      	ldr	r3, [pc, #168]	; (8004d14 <HAL_GPIO_Init+0x3a8>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	43db      	mvns	r3, r3
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	4013      	ands	r3, r2
 8004c78:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004c8e:	4a21      	ldr	r2, [pc, #132]	; (8004d14 <HAL_GPIO_Init+0x3a8>)
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004c94:	4b1f      	ldr	r3, [pc, #124]	; (8004d14 <HAL_GPIO_Init+0x3a8>)
 8004c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c9a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004cba:	4a16      	ldr	r2, [pc, #88]	; (8004d14 <HAL_GPIO_Init+0x3a8>)
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8004cc2:	4b14      	ldr	r3, [pc, #80]	; (8004d14 <HAL_GPIO_Init+0x3a8>)
 8004cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004ce8:	4a0a      	ldr	r2, [pc, #40]	; (8004d14 <HAL_GPIO_Init+0x3a8>)
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f47f ae3d 	bne.w	8004980 <HAL_GPIO_Init+0x14>
  }
}
 8004d06:	bf00      	nop
 8004d08:	bf00      	nop
 8004d0a:	3724      	adds	r7, #36	; 0x24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	46022000 	.word	0x46022000
 8004d18:	002f7f7f 	.word	0x002f7f7f

08004d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	807b      	strh	r3, [r7, #2]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d2c:	787b      	ldrb	r3, [r7, #1]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d32:	887a      	ldrh	r2, [r7, #2]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004d38:	e002      	b.n	8004d40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004d3a:	887a      	ldrh	r2, [r7, #2]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d5e:	887a      	ldrh	r2, [r7, #2]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4013      	ands	r3, r2
 8004d64:	041a      	lsls	r2, r3, #16
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	43d9      	mvns	r1, r3
 8004d6a:	887b      	ldrh	r3, [r7, #2]
 8004d6c:	400b      	ands	r3, r1
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	619a      	str	r2, [r3, #24]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e01c      	b.n	8004dcc <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	795b      	ldrb	r3, [r3, #5]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d105      	bne.n	8004da6 <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fd f88e 	bl	8001ebc <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	791b      	ldrb	r3, [r3, #4]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_GPU2D_Init+0x32>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e00c      	b.n	8004dcc <HAL_GPU2D_Init+0x4c>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	33f8      	adds	r3, #248	; 0xf8
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d013      	beq.n	8004e18 <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	33f8      	adds	r3, #248	; 0xf8
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f023 0201 	bic.w	r2, r3, #1
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 8004e10:	68f9      	ldr	r1, [r7, #12]
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f80f 	bl	8004e36 <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 8004e18:	bf00      	nop
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f80f 	bl	8004e4c <HAL_GPU2D_ErrorCallback>
}
 8004e2e:	bf00      	nop
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_GPU2D_CommandListCpltCallback>:
  *                the configuration information for the GPU2D.
  * @param  CmdListID Command list ID that got completed.
  * @retval None
  */
__weak void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
  UNUSED(CmdListID);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_GPU2D_CommandListCpltCallback can be implemented in the user file.
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 8004e54:	e7fe      	b.n	8004e54 <HAL_GPU2D_ErrorCallback+0x8>

08004e56 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e08d      	b.n	8004f84 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7fd f85d 	bl	8001f3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2224      	movs	r2, #36	; 0x24
 8004e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0201 	bic.w	r2, r2, #1
 8004e98:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ea6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eb6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d107      	bne.n	8004ed0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ecc:	609a      	str	r2, [r3, #8]
 8004ece:	e006      	b.n	8004ede <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004edc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d108      	bne.n	8004ef8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef4:	605a      	str	r2, [r3, #4]
 8004ef6:	e007      	b.n	8004f08 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f06:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f2a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69d9      	ldr	r1, [r3, #28]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1a      	ldr	r2, [r3, #32]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0201 	orr.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d138      	bne.n	8005014 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004fac:	2302      	movs	r3, #2
 8004fae:	e032      	b.n	8005016 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2224      	movs	r2, #36	; 0x24
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0201 	bic.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6819      	ldr	r1, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	e000      	b.n	8005016 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005014:	2302      	movs	r3, #2
  }
}
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005022:	b480      	push	{r7}
 8005024:	b085      	sub	sp, #20
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b20      	cmp	r3, #32
 8005036:	d139      	bne.n	80050ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005042:	2302      	movs	r3, #2
 8005044:	e033      	b.n	80050ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2224      	movs	r2, #36	; 0x24
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0201 	bic.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005074:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	021b      	lsls	r3, r3, #8
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	e000      	b.n	80050ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80050ac:	2302      	movs	r3, #2
  }
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
	...

080050bc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80050c0:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <HAL_ICACHE_Enable+0x1c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a04      	ldr	r2, [pc, #16]	; (80050d8 <HAL_ICACHE_Enable+0x1c>)
 80050c6:	f043 0301 	orr.w	r3, r3, #1
 80050ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	40030400 	.word	0x40030400

080050dc <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 80050e6:	4b14      	ldr	r3, [pc, #80]	; (8005138 <HAL_ICACHE_Disable+0x5c>)
 80050e8:	2202      	movs	r2, #2
 80050ea:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 80050ec:	4b12      	ldr	r3, [pc, #72]	; (8005138 <HAL_ICACHE_Disable+0x5c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a11      	ldr	r2, [pc, #68]	; (8005138 <HAL_ICACHE_Disable+0x5c>)
 80050f2:	f023 0301 	bic.w	r3, r3, #1
 80050f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050f8:	f7fd ff7c 	bl	8002ff4 <HAL_GetTick>
 80050fc:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80050fe:	e00f      	b.n	8005120 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8005100:	f7fd ff78 	bl	8002ff4 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b01      	cmp	r3, #1
 800510c:	d908      	bls.n	8005120 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800510e:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <HAL_ICACHE_Disable+0x5c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	71fb      	strb	r3, [r7, #7]
        break;
 800511e:	e005      	b.n	800512c <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005120:	4b05      	ldr	r3, [pc, #20]	; (8005138 <HAL_ICACHE_Disable+0x5c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1e9      	bne.n	8005100 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 800512c:	79fb      	ldrb	r3, [r7, #7]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	40030400 	.word	0x40030400

0800513c <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800514a:	4b22      	ldr	r3, [pc, #136]	; (80051d4 <HAL_ICACHE_EnableRemapRegion+0x98>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	75fb      	strb	r3, [r7, #23]
 800515a:	e034      	b.n	80051c6 <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	009a      	lsls	r2, r3, #2
 8005160:	4b1d      	ldr	r3, [pc, #116]	; (80051d8 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8005162:	4413      	add	r3, r2
 8005164:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	75fb      	strb	r3, [r7, #23]
 8005176:	e026      	b.n	80051c6 <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8005184:	4013      	ands	r3, r2
 8005186:	b2db      	uxtb	r3, r3
 8005188:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	425b      	negs	r3, r3
 8005196:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8005198:	401a      	ands	r2, r3
 800519a:	4b10      	ldr	r3, [pc, #64]	; (80051dc <HAL_ICACHE_EnableRemapRegion+0xa0>)
 800519c:	4013      	ands	r3, r2
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	025a      	lsls	r2, r3, #9
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80051b4:	4313      	orrs	r3, r2
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 80051c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	40030400 	.word	0x40030400
 80051d8:	40030420 	.word	0x40030420
 80051dc:	07ff0000 	.word	0x07ff0000

080051e0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e0bf      	b.n	8005372 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fd fa44 	bl	8002694 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005222:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6999      	ldr	r1, [r3, #24]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005238:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6899      	ldr	r1, [r3, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4b4a      	ldr	r3, [pc, #296]	; (800537c <HAL_LTDC_Init+0x19c>)
 8005254:	400b      	ands	r3, r1
 8005256:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	041b      	lsls	r3, r3, #16
 800525e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6899      	ldr	r1, [r3, #8]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68d9      	ldr	r1, [r3, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	4b3e      	ldr	r3, [pc, #248]	; (800537c <HAL_LTDC_Init+0x19c>)
 8005282:	400b      	ands	r3, r1
 8005284:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68d9      	ldr	r1, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a1a      	ldr	r2, [r3, #32]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6919      	ldr	r1, [r3, #16]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	4b33      	ldr	r3, [pc, #204]	; (800537c <HAL_LTDC_Init+0x19c>)
 80052b0:	400b      	ands	r3, r1
 80052b2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	041b      	lsls	r3, r3, #16
 80052ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6919      	ldr	r1, [r3, #16]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	431a      	orrs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6959      	ldr	r1, [r3, #20]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4b27      	ldr	r3, [pc, #156]	; (800537c <HAL_LTDC_Init+0x19c>)
 80052de:	400b      	ands	r3, r1
 80052e0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	041b      	lsls	r3, r3, #16
 80052e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6959      	ldr	r1, [r3, #20]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005306:	021b      	lsls	r3, r3, #8
 8005308:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005310:	041b      	lsls	r3, r3, #16
 8005312:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005322:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0206 	orr.w	r2, r2, #6
 800534e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699a      	ldr	r2, [r3, #24]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	f000f800 	.word	0xf000f800

08005380 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005396:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d023      	beq.n	80053ea <HAL_LTDC_IRQHandler+0x6a>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01e      	beq.n	80053ea <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0204 	bic.w	r2, r2, #4
 80053ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2204      	movs	r2, #4
 80053c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053ca:	f043 0201 	orr.w	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2204      	movs	r2, #4
 80053d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f86f 	bl	80054c8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d023      	beq.n	800543c <HAL_LTDC_IRQHandler+0xbc>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01e      	beq.n	800543c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0202 	bic.w	r2, r2, #2
 800540c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2202      	movs	r2, #2
 8005414:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800541c:	f043 0202 	orr.w	r2, r3, #2
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2204      	movs	r2, #4
 800542a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f846 	bl	80054c8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d01b      	beq.n	800547e <HAL_LTDC_IRQHandler+0xfe>
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d016      	beq.n	800547e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0201 	bic.w	r2, r2, #1
 800545e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2201      	movs	r2, #1
 8005466:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f82f 	bl	80054dc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f003 0308 	and.w	r3, r3, #8
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01b      	beq.n	80054c0 <HAL_LTDC_IRQHandler+0x140>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d016      	beq.n	80054c0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0208 	bic.w	r2, r2, #8
 80054a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2208      	movs	r2, #8
 80054a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f818 	bl	80054f0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80054c0:	bf00      	nop
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005504:	b5b0      	push	{r4, r5, r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005516:	2b01      	cmp	r3, #1
 8005518:	d101      	bne.n	800551e <HAL_LTDC_ConfigLayer+0x1a>
 800551a:	2302      	movs	r3, #2
 800551c:	e02c      	b.n	8005578 <HAL_LTDC_ConfigLayer+0x74>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2202      	movs	r2, #2
 800552a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2134      	movs	r1, #52	; 0x34
 8005534:	fb01 f303 	mul.w	r3, r1, r3
 8005538:	4413      	add	r3, r2
 800553a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	4614      	mov	r4, r2
 8005542:	461d      	mov	r5, r3
 8005544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800554a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800554c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800554e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	68b9      	ldr	r1, [r7, #8]
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f811 	bl	8005580 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2201      	movs	r2, #1
 8005564:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bdb0      	pop	{r4, r5, r7, pc}

08005580 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005580:	b480      	push	{r7}
 8005582:	b089      	sub	sp, #36	; 0x24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	0c1b      	lsrs	r3, r3, #16
 8005598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800559c:	4413      	add	r3, r2
 800559e:	041b      	lsls	r3, r3, #16
 80055a0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	01db      	lsls	r3, r3, #7
 80055ac:	4413      	add	r3, r2
 80055ae:	3384      	adds	r3, #132	; 0x84
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	6812      	ldr	r2, [r2, #0]
 80055b6:	4611      	mov	r1, r2
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	01d2      	lsls	r2, r2, #7
 80055bc:	440a      	add	r2, r1
 80055be:	3284      	adds	r2, #132	; 0x84
 80055c0:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80055c4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	0c1b      	lsrs	r3, r3, #16
 80055d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80055d6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80055d8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4619      	mov	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	01db      	lsls	r3, r3, #7
 80055e4:	440b      	add	r3, r1
 80055e6:	3384      	adds	r3, #132	; 0x84
 80055e8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80055ee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055fe:	4413      	add	r3, r2
 8005600:	041b      	lsls	r3, r3, #16
 8005602:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	01db      	lsls	r3, r3, #7
 800560e:	4413      	add	r3, r2
 8005610:	3384      	adds	r3, #132	; 0x84
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	6812      	ldr	r2, [r2, #0]
 8005618:	4611      	mov	r1, r2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	01d2      	lsls	r2, r2, #7
 800561e:	440a      	add	r2, r1
 8005620:	3284      	adds	r2, #132	; 0x84
 8005622:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8005626:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005636:	4413      	add	r3, r2
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4619      	mov	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	01db      	lsls	r3, r3, #7
 8005644:	440b      	add	r3, r1
 8005646:	3384      	adds	r3, #132	; 0x84
 8005648:	4619      	mov	r1, r3
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4313      	orrs	r3, r2
 800564e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	01db      	lsls	r3, r3, #7
 800565a:	4413      	add	r3, r2
 800565c:	3384      	adds	r3, #132	; 0x84
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	6812      	ldr	r2, [r2, #0]
 8005664:	4611      	mov	r1, r2
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	01d2      	lsls	r2, r2, #7
 800566a:	440a      	add	r2, r1
 800566c:	3284      	adds	r2, #132	; 0x84
 800566e:	f023 0307 	bic.w	r3, r3, #7
 8005672:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	01db      	lsls	r3, r3, #7
 800567e:	4413      	add	r3, r2
 8005680:	3384      	adds	r3, #132	; 0x84
 8005682:	461a      	mov	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005690:	021b      	lsls	r3, r3, #8
 8005692:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800569a:	041b      	lsls	r3, r3, #16
 800569c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	061b      	lsls	r3, r3, #24
 80056a4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	01db      	lsls	r3, r3, #7
 80056b0:	4413      	add	r3, r2
 80056b2:	3384      	adds	r3, #132	; 0x84
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	01db      	lsls	r3, r3, #7
 80056c0:	4413      	add	r3, r2
 80056c2:	3384      	adds	r3, #132	; 0x84
 80056c4:	461a      	mov	r2, r3
 80056c6:	2300      	movs	r3, #0
 80056c8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056d0:	461a      	mov	r2, r3
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	431a      	orrs	r2, r3
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	431a      	orrs	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4619      	mov	r1, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	01db      	lsls	r3, r3, #7
 80056e4:	440b      	add	r3, r1
 80056e6:	3384      	adds	r3, #132	; 0x84
 80056e8:	4619      	mov	r1, r3
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	461a      	mov	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	01db      	lsls	r3, r3, #7
 80056fa:	4413      	add	r3, r2
 80056fc:	3384      	adds	r3, #132	; 0x84
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	6812      	ldr	r2, [r2, #0]
 8005704:	4611      	mov	r1, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	01d2      	lsls	r2, r2, #7
 800570a:	440a      	add	r2, r1
 800570c:	3284      	adds	r2, #132	; 0x84
 800570e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005712:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	461a      	mov	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	01db      	lsls	r3, r3, #7
 800571e:	4413      	add	r3, r2
 8005720:	3384      	adds	r3, #132	; 0x84
 8005722:	461a      	mov	r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	01db      	lsls	r3, r3, #7
 8005734:	4413      	add	r3, r2
 8005736:	3384      	adds	r3, #132	; 0x84
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	6812      	ldr	r2, [r2, #0]
 800573e:	4611      	mov	r1, r2
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	01d2      	lsls	r2, r2, #7
 8005744:	440a      	add	r2, r1
 8005746:	3284      	adds	r2, #132	; 0x84
 8005748:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800574c:	f023 0307 	bic.w	r3, r3, #7
 8005750:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	69da      	ldr	r2, [r3, #28]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	68f9      	ldr	r1, [r7, #12]
 800575c:	6809      	ldr	r1, [r1, #0]
 800575e:	4608      	mov	r0, r1
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	01c9      	lsls	r1, r1, #7
 8005764:	4401      	add	r1, r0
 8005766:	3184      	adds	r1, #132	; 0x84
 8005768:	4313      	orrs	r3, r2
 800576a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	461a      	mov	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	01db      	lsls	r3, r3, #7
 8005776:	4413      	add	r3, r2
 8005778:	3384      	adds	r3, #132	; 0x84
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	01db      	lsls	r3, r3, #7
 8005786:	4413      	add	r3, r2
 8005788:	3384      	adds	r3, #132	; 0x84
 800578a:	461a      	mov	r2, r3
 800578c:	2300      	movs	r3, #0
 800578e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	461a      	mov	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	01db      	lsls	r3, r3, #7
 800579a:	4413      	add	r3, r2
 800579c:	3384      	adds	r3, #132	; 0x84
 800579e:	461a      	mov	r2, r3
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d102      	bne.n	80057b4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80057ae:	2304      	movs	r3, #4
 80057b0:	61fb      	str	r3, [r7, #28]
 80057b2:	e01b      	b.n	80057ec <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d102      	bne.n	80057c2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80057bc:	2303      	movs	r3, #3
 80057be:	61fb      	str	r3, [r7, #28]
 80057c0:	e014      	b.n	80057ec <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d00b      	beq.n	80057e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d007      	beq.n	80057e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d003      	beq.n	80057e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80057de:	2b07      	cmp	r3, #7
 80057e0:	d102      	bne.n	80057e8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80057e2:	2302      	movs	r3, #2
 80057e4:	61fb      	str	r3, [r7, #28]
 80057e6:	e001      	b.n	80057ec <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80057e8:	2301      	movs	r3, #1
 80057ea:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	461a      	mov	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	01db      	lsls	r3, r3, #7
 80057f6:	4413      	add	r3, r2
 80057f8:	3384      	adds	r3, #132	; 0x84
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	6812      	ldr	r2, [r2, #0]
 8005800:	4611      	mov	r1, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	01d2      	lsls	r2, r2, #7
 8005806:	440a      	add	r2, r1
 8005808:	3284      	adds	r2, #132	; 0x84
 800580a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800580e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	fb02 f303 	mul.w	r3, r2, r3
 800581a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6859      	ldr	r1, [r3, #4]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	1acb      	subs	r3, r1, r3
 8005826:	69f9      	ldr	r1, [r7, #28]
 8005828:	fb01 f303 	mul.w	r3, r1, r3
 800582c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800582e:	68f9      	ldr	r1, [r7, #12]
 8005830:	6809      	ldr	r1, [r1, #0]
 8005832:	4608      	mov	r0, r1
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	01c9      	lsls	r1, r1, #7
 8005838:	4401      	add	r1, r0
 800583a:	3184      	adds	r1, #132	; 0x84
 800583c:	4313      	orrs	r3, r2
 800583e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	01db      	lsls	r3, r3, #7
 800584a:	4413      	add	r3, r2
 800584c:	3384      	adds	r3, #132	; 0x84
 800584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	6812      	ldr	r2, [r2, #0]
 8005854:	4611      	mov	r1, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	01d2      	lsls	r2, r2, #7
 800585a:	440a      	add	r2, r1
 800585c:	3284      	adds	r2, #132	; 0x84
 800585e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005862:	f023 0307 	bic.w	r3, r3, #7
 8005866:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	01db      	lsls	r3, r3, #7
 8005872:	4413      	add	r3, r2
 8005874:	3384      	adds	r3, #132	; 0x84
 8005876:	461a      	mov	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	01db      	lsls	r3, r3, #7
 8005888:	4413      	add	r3, r2
 800588a:	3384      	adds	r3, #132	; 0x84
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	6812      	ldr	r2, [r2, #0]
 8005892:	4611      	mov	r1, r2
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	01d2      	lsls	r2, r2, #7
 8005898:	440a      	add	r2, r1
 800589a:	3284      	adds	r2, #132	; 0x84
 800589c:	f043 0301 	orr.w	r3, r3, #1
 80058a0:	6013      	str	r3, [r2, #0]
}
 80058a2:	bf00      	nop
 80058a4:	3724      	adds	r7, #36	; 0x24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d102      	bne.n	80058c8 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	73fb      	strb	r3, [r7, #15]
 80058c6:	e141      	b.n	8005b4c <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 f947 	bl	8005b60 <MDF_GetHandleNumberFromInstance>
 80058d2:	4603      	mov	r3, r0
 80058d4:	4a86      	ldr	r2, [pc, #536]	; (8005af0 <HAL_MDF_Init+0x240>)
 80058d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	73fb      	strb	r3, [r7, #15]
 80058e2:	e133      	b.n	8005b4c <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7fc f93f 	bl	8001b68 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 80058ea:	4b82      	ldr	r3, [pc, #520]	; (8005af4 <HAL_MDF_Init+0x244>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d11d      	bne.n	800592e <HAL_MDF_Init+0x7e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a80      	ldr	r2, [pc, #512]	; (8005af8 <HAL_MDF_Init+0x248>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d023      	beq.n	8005944 <HAL_MDF_Init+0x94>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a7e      	ldr	r2, [pc, #504]	; (8005afc <HAL_MDF_Init+0x24c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d01e      	beq.n	8005944 <HAL_MDF_Init+0x94>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a7d      	ldr	r2, [pc, #500]	; (8005b00 <HAL_MDF_Init+0x250>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d019      	beq.n	8005944 <HAL_MDF_Init+0x94>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a7b      	ldr	r2, [pc, #492]	; (8005b04 <HAL_MDF_Init+0x254>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d014      	beq.n	8005944 <HAL_MDF_Init+0x94>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a7a      	ldr	r2, [pc, #488]	; (8005b08 <HAL_MDF_Init+0x258>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00f      	beq.n	8005944 <HAL_MDF_Init+0x94>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a78      	ldr	r2, [pc, #480]	; (8005b0c <HAL_MDF_Init+0x25c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00a      	beq.n	8005944 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 800592e:	4b78      	ldr	r3, [pc, #480]	; (8005b10 <HAL_MDF_Init+0x260>)
 8005930:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8005932:	2b00      	cmp	r3, #0
 8005934:	f040 8090 	bne.w	8005a58 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a75      	ldr	r2, [pc, #468]	; (8005b14 <HAL_MDF_Init+0x264>)
 800593e:	4293      	cmp	r3, r2
 8005940:	f040 808a 	bne.w	8005a58 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a72      	ldr	r2, [pc, #456]	; (8005b14 <HAL_MDF_Init+0x264>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d101      	bne.n	8005952 <HAL_MDF_Init+0xa2>
 800594e:	4b72      	ldr	r3, [pc, #456]	; (8005b18 <HAL_MDF_Init+0x268>)
 8005950:	e000      	b.n	8005954 <HAL_MDF_Init+0xa4>
 8005952:	4b72      	ldr	r3, [pc, #456]	; (8005b1c <HAL_MDF_Init+0x26c>)
 8005954:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	da02      	bge.n	8005964 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	73fb      	strb	r3, [r7, #15]
 8005962:	e079      	b.n	8005a58 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a63      	ldr	r2, [pc, #396]	; (8005af8 <HAL_MDF_Init+0x248>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d018      	beq.n	80059a0 <HAL_MDF_Init+0xf0>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a62      	ldr	r2, [pc, #392]	; (8005afc <HAL_MDF_Init+0x24c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d013      	beq.n	80059a0 <HAL_MDF_Init+0xf0>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a60      	ldr	r2, [pc, #384]	; (8005b00 <HAL_MDF_Init+0x250>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00e      	beq.n	80059a0 <HAL_MDF_Init+0xf0>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a5f      	ldr	r2, [pc, #380]	; (8005b04 <HAL_MDF_Init+0x254>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d009      	beq.n	80059a0 <HAL_MDF_Init+0xf0>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a5d      	ldr	r2, [pc, #372]	; (8005b08 <HAL_MDF_Init+0x258>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d004      	beq.n	80059a0 <HAL_MDF_Init+0xf0>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a5c      	ldr	r2, [pc, #368]	; (8005b0c <HAL_MDF_Init+0x25c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d10d      	bne.n	80059bc <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	431a      	orrs	r2, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2200      	movs	r2, #0
 80059c0:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	061b      	lsls	r3, r3, #24
 80059ce:	431a      	orrs	r2, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	7b1b      	ldrb	r3, [r3, #12]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d137      	bne.n	8005a4c <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80059ec:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 80059f4:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80059f6:	431a      	orrs	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	7e1b      	ldrb	r3, [r3, #24]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d123      	bne.n	8005a4c <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a3b      	ldr	r2, [pc, #236]	; (8005af8 <HAL_MDF_Init+0x248>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d012      	beq.n	8005a34 <HAL_MDF_Init+0x184>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a3a      	ldr	r2, [pc, #232]	; (8005afc <HAL_MDF_Init+0x24c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00d      	beq.n	8005a34 <HAL_MDF_Init+0x184>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a38      	ldr	r2, [pc, #224]	; (8005b00 <HAL_MDF_Init+0x250>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d008      	beq.n	8005a34 <HAL_MDF_Init+0x184>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a37      	ldr	r2, [pc, #220]	; (8005b04 <HAL_MDF_Init+0x254>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <HAL_MDF_Init+0x184>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a35      	ldr	r2, [pc, #212]	; (8005b08 <HAL_MDF_Init+0x258>)
 8005a32:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8005a40:	430b      	orrs	r3, r1
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f043 0210 	orr.w	r2, r3, #16
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f043 0201 	orr.w	r2, r3, #1
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d128      	bne.n	8005ab0 <HAL_MDF_Init+0x200>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d123      	bne.n	8005ab0 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	da02      	bge.n	8005a78 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	73fb      	strb	r3, [r7, #15]
 8005a76:	e01b      	b.n	8005ab0 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6819      	ldr	r1, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8005a90:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 0201 	orr.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d14a      	bne.n	8005b4c <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 021f 	bic.w	r2, r2, #31
 8005ac4:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6859      	ldr	r1, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a0d      	ldr	r2, [pc, #52]	; (8005b14 <HAL_MDF_Init+0x264>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d11e      	bne.n	8005b20 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8005ae2:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <HAL_MDF_Init+0x260>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	4a09      	ldr	r2, [pc, #36]	; (8005b10 <HAL_MDF_Init+0x260>)
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	e01d      	b.n	8005b2a <HAL_MDF_Init+0x27a>
 8005aee:	bf00      	nop
 8005af0:	20001518 	.word	0x20001518
 8005af4:	20001510 	.word	0x20001510
 8005af8:	40025080 	.word	0x40025080
 8005afc:	40025100 	.word	0x40025100
 8005b00:	40025180 	.word	0x40025180
 8005b04:	40025200 	.word	0x40025200
 8005b08:	40025280 	.word	0x40025280
 8005b0c:	40025300 	.word	0x40025300
 8005b10:	20001514 	.word	0x20001514
 8005b14:	46024080 	.word	0x46024080
 8005b18:	46024000 	.word	0x46024000
 8005b1c:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8005b20:	4b0d      	ldr	r3, [pc, #52]	; (8005b58 <HAL_MDF_Init+0x2a8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3301      	adds	r3, #1
 8005b26:	4a0c      	ldr	r2, [pc, #48]	; (8005b58 <HAL_MDF_Init+0x2a8>)
 8005b28:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 f816 	bl	8005b60 <MDF_GetHandleNumberFromInstance>
 8005b34:	4602      	mov	r2, r0
 8005b36:	4909      	ldr	r1, [pc, #36]	; (8005b5c <HAL_MDF_Init+0x2ac>)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20001510 	.word	0x20001510
 8005b5c:	20001518 	.word	0x20001518

08005b60 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a19      	ldr	r2, [pc, #100]	; (8005bd0 <MDF_GetHandleNumberFromInstance+0x70>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d102      	bne.n	8005b76 <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	e024      	b.n	8005bc0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a16      	ldr	r2, [pc, #88]	; (8005bd4 <MDF_GetHandleNumberFromInstance+0x74>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d102      	bne.n	8005b84 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	e01d      	b.n	8005bc0 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a14      	ldr	r2, [pc, #80]	; (8005bd8 <MDF_GetHandleNumberFromInstance+0x78>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d102      	bne.n	8005b92 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	e016      	b.n	8005bc0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a11      	ldr	r2, [pc, #68]	; (8005bdc <MDF_GetHandleNumberFromInstance+0x7c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d102      	bne.n	8005ba0 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	e00f      	b.n	8005bc0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a0f      	ldr	r2, [pc, #60]	; (8005be0 <MDF_GetHandleNumberFromInstance+0x80>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d102      	bne.n	8005bae <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8005ba8:	2304      	movs	r3, #4
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	e008      	b.n	8005bc0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a0c      	ldr	r2, [pc, #48]	; (8005be4 <MDF_GetHandleNumberFromInstance+0x84>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d102      	bne.n	8005bbc <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8005bb6:	2305      	movs	r3, #5
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	e001      	b.n	8005bc0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8005bbc:	2306      	movs	r3, #6
 8005bbe:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40025080 	.word	0x40025080
 8005bd4:	40025100 	.word	0x40025100
 8005bd8:	40025180 	.word	0x40025180
 8005bdc:	40025200 	.word	0x40025200
 8005be0:	40025280 	.word	0x40025280
 8005be4:	40025300 	.word	0x40025300

08005be8 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f043 0201 	orr.w	r2, r3, #1
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	601a      	str	r2, [r3, #0]
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005c14:	f7fd f9ee 	bl	8002ff4 <HAL_GetTick>
 8005c18:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d102      	bne.n	8005c26 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	73fb      	strb	r3, [r7, #15]
 8005c24:	e0a5      	b.n	8005d72 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f040 809e 	bne.w	8005d72 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7fc fd82 	bl	8002740 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8005c3c:	f241 3188 	movw	r1, #5000	; 0x1388
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f951 	bl	8005ee8 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	4b4b      	ldr	r3, [pc, #300]	; (8005d7c <HAL_OSPI_Init+0x174>)
 8005c4e:	4013      	ands	r3, r2
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	68d1      	ldr	r1, [r2, #12]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6912      	ldr	r2, [r2, #16]
 8005c58:	3a01      	subs	r2, #1
 8005c5a:	0412      	lsls	r2, r2, #16
 8005c5c:	4311      	orrs	r1, r2
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6952      	ldr	r2, [r2, #20]
 8005c62:	3a01      	subs	r2, #1
 8005c64:	0212      	lsls	r2, r2, #8
 8005c66:	4311      	orrs	r1, r2
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c6c:	4311      	orrs	r1, r2
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	69d2      	ldr	r2, [r2, #28]
 8005c72:	4311      	orrs	r1, r2
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1a      	ldr	r2, [r3, #32]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c96:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005cac:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	021a      	lsls	r2, r3, #8
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2120      	movs	r1, #32
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fe09 	bl	80068ec <OSPI_WaitFlagStateUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d146      	bne.n	8005d72 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	1e5a      	subs	r2, r3, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005d1a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	431a      	orrs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f042 0201 	orr.w	r2, r2, #1
 8005d40:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d107      	bne.n	8005d5a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0202 	orr.w	r2, r2, #2
 8005d58:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d62:	d103      	bne.n	8005d6c <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	651a      	str	r2, [r3, #80]	; 0x50
 8005d6a:	e002      	b.n	8005d72 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	f8e0c0f4 	.word	0xf8e0c0f4

08005d80 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08a      	sub	sp, #40	; 0x28
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8005d8c:	f7fd f932 	bl	8002ff4 <HAL_GetTick>
 8005d90:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d96:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d002      	beq.n	8005da4 <HAL_OSPI_HyperbusCfg+0x24>
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d122      	bne.n	8005dea <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	2200      	movs	r2, #0
 8005dac:	2120      	movs	r1, #32
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 fd9c 	bl	80068ec <OSPI_WaitFlagStateUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8005db8:	7ffb      	ldrb	r3, [r7, #31]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d11a      	bne.n	8005df4 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	041a      	lsls	r2, r3, #16
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	021b      	lsls	r3, r3, #8
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	ea42 0103 	orr.w	r1, r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2202      	movs	r2, #2
 8005de6:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8005de8:	e004      	b.n	8005df4 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2210      	movs	r2, #16
 8005df2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 8005df4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3720      	adds	r7, #32
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b088      	sub	sp, #32
 8005e02:	af02      	add	r7, sp, #8
 8005e04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8005e0a:	f7fd f8f3 	bl	8002ff4 <HAL_GetTick>
 8005e0e:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e14:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d104      	bne.n	8005e2a <HAL_OSPI_Abort+0x2c>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d052      	beq.n	8005ed0 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d014      	beq.n	8005e62 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0204 	bic.w	r2, r2, #4
 8005e46:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fd fb7e 	bl	800354e <HAL_DMA_Abort>
 8005e52:	4603      	mov	r3, r0
 8005e54:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8005e56:	7dfb      	ldrb	r3, [r7, #23]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2204      	movs	r2, #4
 8005e60:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	f003 0320 	and.w	r3, r3, #32
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d02b      	beq.n	8005ec8 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0202 	orr.w	r2, r2, #2
 8005e7e:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	2102      	movs	r1, #2
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fd2d 	bl	80068ec <OSPI_WaitFlagStateUntilTimeout>
 8005e92:	4603      	mov	r3, r0
 8005e94:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d11f      	bne.n	8005edc <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2200      	movs	r2, #0
 8005eae:	2120      	movs	r1, #32
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fd1b 	bl	80068ec <OSPI_WaitFlagStateUntilTimeout>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10d      	bne.n	8005edc <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005ec6:	e009      	b.n	8005edc <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005ece:	e005      	b.n	8005edc <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2210      	movs	r2, #16
 8005ed8:	655a      	str	r2, [r3, #84]	; 0x54
 8005eda:	e000      	b.n	8005ede <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005edc:	bf00      	nop
  }

  /* Return function status */
  return status;
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
	...

08005f08 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b094      	sub	sp, #80	; 0x50
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a9d      	ldr	r2, [pc, #628]	; (800619c <HAL_OSPIM_Config+0x294>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d105      	bne.n	8005f36 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8005f34:	e004      	b.n	8005f40 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8005f36:	2301      	movs	r3, #1
 8005f38:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005f40:	2300      	movs	r3, #0
 8005f42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005f46:	e01d      	b.n	8005f84 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8005f48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	b2d8      	uxtb	r0, r3
 8005f50:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005f54:	f107 0114 	add.w	r1, r7, #20
 8005f58:	4613      	mov	r3, r2
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	4413      	add	r3, r2
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	440b      	add	r3, r1
 8005f62:	4619      	mov	r1, r3
 8005f64:	f000 fd02 	bl	800696c <OSPIM_GetConfig>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2208      	movs	r2, #8
 8005f78:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005f7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f7e:	3301      	adds	r3, #1
 8005f80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005f84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d9dd      	bls.n	8005f48 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8005f8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f040 849e 	bne.w	80068d2 <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8005f96:	4b81      	ldr	r3, [pc, #516]	; (800619c <HAL_OSPIM_Config+0x294>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00b      	beq.n	8005fba <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005fa2:	4b7e      	ldr	r3, [pc, #504]	; (800619c <HAL_OSPIM_Config+0x294>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a7d      	ldr	r2, [pc, #500]	; (800619c <HAL_OSPIM_Config+0x294>)
 8005fa8:	f023 0301 	bic.w	r3, r3, #1
 8005fac:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8005fae:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005fb2:	f043 0301 	orr.w	r3, r3, #1
 8005fb6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8005fba:	4b79      	ldr	r3, [pc, #484]	; (80061a0 <HAL_OSPIM_Config+0x298>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00b      	beq.n	8005fde <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005fc6:	4b76      	ldr	r3, [pc, #472]	; (80061a0 <HAL_OSPIM_Config+0x298>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a75      	ldr	r2, [pc, #468]	; (80061a0 <HAL_OSPIM_Config+0x298>)
 8005fcc:	f023 0301 	bic.w	r3, r3, #1
 8005fd0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8005fd2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005fd6:	f043 0302 	orr.w	r3, r3, #2
 8005fda:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005fde:	4971      	ldr	r1, [pc, #452]	; (80061a4 <HAL_OSPIM_Config+0x29c>)
 8005fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	4413      	add	r3, r2
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	3350      	adds	r3, #80	; 0x50
 8005fec:	443b      	add	r3, r7
 8005fee:	3b34      	subs	r3, #52	; 0x34
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	440b      	add	r3, r1
 8005ff8:	6859      	ldr	r1, [r3, #4]
 8005ffa:	486a      	ldr	r0, [pc, #424]	; (80061a4 <HAL_OSPIM_Config+0x29c>)
 8005ffc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ffe:	4613      	mov	r3, r2
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	4413      	add	r3, r2
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	3350      	adds	r3, #80	; 0x50
 8006008:	443b      	add	r3, r7
 800600a:	3b34      	subs	r3, #52	; 0x34
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3b01      	subs	r3, #1
 8006010:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4403      	add	r3, r0
 8006018:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800601a:	4b62      	ldr	r3, [pc, #392]	; (80061a4 <HAL_OSPIM_Config+0x29c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 80c0 	beq.w	80061a8 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006028:	4b5e      	ldr	r3, [pc, #376]	; (80061a4 <HAL_OSPIM_Config+0x29c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a5d      	ldr	r2, [pc, #372]	; (80061a4 <HAL_OSPIM_Config+0x29c>)
 800602e:	f023 0301 	bic.w	r3, r3, #1
 8006032:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8006034:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006038:	2b01      	cmp	r3, #1
 800603a:	f040 8162 	bne.w	8006302 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800603e:	4959      	ldr	r1, [pc, #356]	; (80061a4 <HAL_OSPIM_Config+0x29c>)
 8006040:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006044:	4613      	mov	r3, r2
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	4413      	add	r3, r2
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	3350      	adds	r3, #80	; 0x50
 800604e:	443b      	add	r3, r7
 8006050:	3b3c      	subs	r3, #60	; 0x3c
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3b01      	subs	r3, #1
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	440b      	add	r3, r1
 800605a:	6859      	ldr	r1, [r3, #4]
 800605c:	4851      	ldr	r0, [pc, #324]	; (80061a4 <HAL_OSPIM_Config+0x29c>)
 800605e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006062:	4613      	mov	r3, r2
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	4413      	add	r3, r2
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	3350      	adds	r3, #80	; 0x50
 800606c:	443b      	add	r3, r7
 800606e:	3b3c      	subs	r3, #60	; 0x3c
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3b01      	subs	r3, #1
 8006074:	f041 0202 	orr.w	r2, r1, #2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4403      	add	r3, r0
 800607c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800607e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006082:	4613      	mov	r3, r2
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	4413      	add	r3, r2
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	3350      	adds	r3, #80	; 0x50
 800608c:	443b      	add	r3, r7
 800608e:	3b38      	subs	r3, #56	; 0x38
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d01f      	beq.n	80060d6 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8006096:	4943      	ldr	r1, [pc, #268]	; (80061a4 <HAL_OSPIM_Config+0x29c>)
 8006098:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800609c:	4613      	mov	r3, r2
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	4413      	add	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	3350      	adds	r3, #80	; 0x50
 80060a6:	443b      	add	r3, r7
 80060a8:	3b38      	subs	r3, #56	; 0x38
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	440b      	add	r3, r1
 80060b2:	6859      	ldr	r1, [r3, #4]
 80060b4:	483b      	ldr	r0, [pc, #236]	; (80061a4 <HAL_OSPIM_Config+0x29c>)
 80060b6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80060ba:	4613      	mov	r3, r2
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	4413      	add	r3, r2
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	3350      	adds	r3, #80	; 0x50
 80060c4:	443b      	add	r3, r7
 80060c6:	3b38      	subs	r3, #56	; 0x38
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	f041 0220 	orr.w	r2, r1, #32
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4403      	add	r3, r0
 80060d4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80060d6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80060da:	4613      	mov	r3, r2
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	4413      	add	r3, r2
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	3350      	adds	r3, #80	; 0x50
 80060e4:	443b      	add	r3, r7
 80060e6:	3b30      	subs	r3, #48	; 0x30
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d023      	beq.n	8006136 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80060ee:	492d      	ldr	r1, [pc, #180]	; (80061a4 <HAL_OSPIM_Config+0x29c>)
 80060f0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80060f4:	4613      	mov	r3, r2
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	4413      	add	r3, r2
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	3350      	adds	r3, #80	; 0x50
 80060fe:	443b      	add	r3, r7
 8006100:	3b30      	subs	r3, #48	; 0x30
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3b01      	subs	r3, #1
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	6859      	ldr	r1, [r3, #4]
 8006110:	4824      	ldr	r0, [pc, #144]	; (80061a4 <HAL_OSPIM_Config+0x29c>)
 8006112:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006116:	4613      	mov	r3, r2
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	4413      	add	r3, r2
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	3350      	adds	r3, #80	; 0x50
 8006120:	443b      	add	r3, r7
 8006122:	3b30      	subs	r3, #48	; 0x30
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3b01      	subs	r3, #1
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4403      	add	r3, r0
 8006134:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006136:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800613a:	4613      	mov	r3, r2
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	4413      	add	r3, r2
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	3350      	adds	r3, #80	; 0x50
 8006144:	443b      	add	r3, r7
 8006146:	3b2c      	subs	r3, #44	; 0x2c
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 80d9 	beq.w	8006302 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006150:	4914      	ldr	r1, [pc, #80]	; (80061a4 <HAL_OSPIM_Config+0x29c>)
 8006152:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006156:	4613      	mov	r3, r2
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	4413      	add	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	3350      	adds	r3, #80	; 0x50
 8006160:	443b      	add	r3, r7
 8006162:	3b2c      	subs	r3, #44	; 0x2c
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3b01      	subs	r3, #1
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	440b      	add	r3, r1
 8006170:	6859      	ldr	r1, [r3, #4]
 8006172:	480c      	ldr	r0, [pc, #48]	; (80061a4 <HAL_OSPIM_Config+0x29c>)
 8006174:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006178:	4613      	mov	r3, r2
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	4413      	add	r3, r2
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	3350      	adds	r3, #80	; 0x50
 8006182:	443b      	add	r3, r7
 8006184:	3b2c      	subs	r3, #44	; 0x2c
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3b01      	subs	r3, #1
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4403      	add	r3, r0
 8006196:	605a      	str	r2, [r3, #4]
 8006198:	e0b3      	b.n	8006302 <HAL_OSPIM_Config+0x3fa>
 800619a:	bf00      	nop
 800619c:	420d1400 	.word	0x420d1400
 80061a0:	420d2400 	.word	0x420d2400
 80061a4:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80061a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061aa:	4613      	mov	r3, r2
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	4413      	add	r3, r2
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	3350      	adds	r3, #80	; 0x50
 80061b4:	443b      	add	r3, r7
 80061b6:	3b3c      	subs	r3, #60	; 0x3c
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 80a1 	beq.w	8006302 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80061c0:	4993      	ldr	r1, [pc, #588]	; (8006410 <HAL_OSPIM_Config+0x508>)
 80061c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061c4:	4613      	mov	r3, r2
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	4413      	add	r3, r2
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	3350      	adds	r3, #80	; 0x50
 80061ce:	443b      	add	r3, r7
 80061d0:	3b3c      	subs	r3, #60	; 0x3c
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	6859      	ldr	r1, [r3, #4]
 80061dc:	488c      	ldr	r0, [pc, #560]	; (8006410 <HAL_OSPIM_Config+0x508>)
 80061de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061e0:	4613      	mov	r3, r2
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	4413      	add	r3, r2
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	3350      	adds	r3, #80	; 0x50
 80061ea:	443b      	add	r3, r7
 80061ec:	3b3c      	subs	r3, #60	; 0x3c
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	f021 0201 	bic.w	r2, r1, #1
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4403      	add	r3, r0
 80061fa:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80061fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061fe:	4613      	mov	r3, r2
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	4413      	add	r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	3350      	adds	r3, #80	; 0x50
 8006208:	443b      	add	r3, r7
 800620a:	3b38      	subs	r3, #56	; 0x38
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d01d      	beq.n	800624e <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006212:	497f      	ldr	r1, [pc, #508]	; (8006410 <HAL_OSPIM_Config+0x508>)
 8006214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006216:	4613      	mov	r3, r2
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	4413      	add	r3, r2
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	3350      	adds	r3, #80	; 0x50
 8006220:	443b      	add	r3, r7
 8006222:	3b38      	subs	r3, #56	; 0x38
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3b01      	subs	r3, #1
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	440b      	add	r3, r1
 800622c:	6859      	ldr	r1, [r3, #4]
 800622e:	4878      	ldr	r0, [pc, #480]	; (8006410 <HAL_OSPIM_Config+0x508>)
 8006230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006232:	4613      	mov	r3, r2
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	4413      	add	r3, r2
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	3350      	adds	r3, #80	; 0x50
 800623c:	443b      	add	r3, r7
 800623e:	3b38      	subs	r3, #56	; 0x38
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3b01      	subs	r3, #1
 8006244:	f021 0210 	bic.w	r2, r1, #16
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4403      	add	r3, r0
 800624c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800624e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006250:	4613      	mov	r3, r2
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	4413      	add	r3, r2
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	3350      	adds	r3, #80	; 0x50
 800625a:	443b      	add	r3, r7
 800625c:	3b30      	subs	r3, #48	; 0x30
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d021      	beq.n	80062a8 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006264:	496a      	ldr	r1, [pc, #424]	; (8006410 <HAL_OSPIM_Config+0x508>)
 8006266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006268:	4613      	mov	r3, r2
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	4413      	add	r3, r2
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	3350      	adds	r3, #80	; 0x50
 8006272:	443b      	add	r3, r7
 8006274:	3b30      	subs	r3, #48	; 0x30
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3b01      	subs	r3, #1
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	440b      	add	r3, r1
 8006282:	6859      	ldr	r1, [r3, #4]
 8006284:	4862      	ldr	r0, [pc, #392]	; (8006410 <HAL_OSPIM_Config+0x508>)
 8006286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006288:	4613      	mov	r3, r2
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	4413      	add	r3, r2
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	3350      	adds	r3, #80	; 0x50
 8006292:	443b      	add	r3, r7
 8006294:	3b30      	subs	r3, #48	; 0x30
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3b01      	subs	r3, #1
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4403      	add	r3, r0
 80062a6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80062a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062aa:	4613      	mov	r3, r2
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	4413      	add	r3, r2
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	3350      	adds	r3, #80	; 0x50
 80062b4:	443b      	add	r3, r7
 80062b6:	3b2c      	subs	r3, #44	; 0x2c
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d021      	beq.n	8006302 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80062be:	4954      	ldr	r1, [pc, #336]	; (8006410 <HAL_OSPIM_Config+0x508>)
 80062c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062c2:	4613      	mov	r3, r2
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	4413      	add	r3, r2
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	3350      	adds	r3, #80	; 0x50
 80062cc:	443b      	add	r3, r7
 80062ce:	3b2c      	subs	r3, #44	; 0x2c
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	440b      	add	r3, r1
 80062dc:	6859      	ldr	r1, [r3, #4]
 80062de:	484c      	ldr	r0, [pc, #304]	; (8006410 <HAL_OSPIM_Config+0x508>)
 80062e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062e2:	4613      	mov	r3, r2
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	4413      	add	r3, r2
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	3350      	adds	r3, #80	; 0x50
 80062ec:	443b      	add	r3, r7
 80062ee:	3b2c      	subs	r3, #44	; 0x2c
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4403      	add	r3, r0
 8006300:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	6819      	ldr	r1, [r3, #0]
 8006306:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800630a:	4613      	mov	r3, r2
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	4413      	add	r3, r2
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	3350      	adds	r3, #80	; 0x50
 8006314:	443b      	add	r3, r7
 8006316:	3b3c      	subs	r3, #60	; 0x3c
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4299      	cmp	r1, r3
 800631c:	d038      	beq.n	8006390 <HAL_OSPIM_Config+0x488>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	6859      	ldr	r1, [r3, #4]
 8006322:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006326:	4613      	mov	r3, r2
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	4413      	add	r3, r2
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	3350      	adds	r3, #80	; 0x50
 8006330:	443b      	add	r3, r7
 8006332:	3b38      	subs	r3, #56	; 0x38
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4299      	cmp	r1, r3
 8006338:	d02a      	beq.n	8006390 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	6899      	ldr	r1, [r3, #8]
 800633e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006342:	4613      	mov	r3, r2
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	4413      	add	r3, r2
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	3350      	adds	r3, #80	; 0x50
 800634c:	443b      	add	r3, r7
 800634e:	3b34      	subs	r3, #52	; 0x34
 8006350:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006352:	4299      	cmp	r1, r3
 8006354:	d01c      	beq.n	8006390 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	68d9      	ldr	r1, [r3, #12]
 800635a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800635e:	4613      	mov	r3, r2
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	4413      	add	r3, r2
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	3350      	adds	r3, #80	; 0x50
 8006368:	443b      	add	r3, r7
 800636a:	3b30      	subs	r3, #48	; 0x30
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4299      	cmp	r1, r3
 8006370:	d00e      	beq.n	8006390 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	6919      	ldr	r1, [r3, #16]
 8006376:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800637a:	4613      	mov	r3, r2
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	4413      	add	r3, r2
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	3350      	adds	r3, #80	; 0x50
 8006384:	443b      	add	r3, r7
 8006386:	3b2c      	subs	r3, #44	; 0x2c
 8006388:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800638a:	4299      	cmp	r1, r3
 800638c:	f040 810e 	bne.w	80065ac <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	6819      	ldr	r1, [r3, #0]
 8006394:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006398:	4613      	mov	r3, r2
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	4413      	add	r3, r2
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	3350      	adds	r3, #80	; 0x50
 80063a2:	443b      	add	r3, r7
 80063a4:	3b3c      	subs	r3, #60	; 0x3c
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4299      	cmp	r1, r3
 80063aa:	d133      	bne.n	8006414 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	6859      	ldr	r1, [r3, #4]
 80063b0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80063b4:	4613      	mov	r3, r2
 80063b6:	005b      	lsls	r3, r3, #1
 80063b8:	4413      	add	r3, r2
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	3350      	adds	r3, #80	; 0x50
 80063be:	443b      	add	r3, r7
 80063c0:	3b38      	subs	r3, #56	; 0x38
 80063c2:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80063c4:	4299      	cmp	r1, r3
 80063c6:	d125      	bne.n	8006414 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	68d9      	ldr	r1, [r3, #12]
 80063cc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80063d0:	4613      	mov	r3, r2
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	4413      	add	r3, r2
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	3350      	adds	r3, #80	; 0x50
 80063da:	443b      	add	r3, r7
 80063dc:	3b30      	subs	r3, #48	; 0x30
 80063de:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80063e0:	4299      	cmp	r1, r3
 80063e2:	d117      	bne.n	8006414 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	6919      	ldr	r1, [r3, #16]
 80063e8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80063ec:	4613      	mov	r3, r2
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	4413      	add	r3, r2
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	3350      	adds	r3, #80	; 0x50
 80063f6:	443b      	add	r3, r7
 80063f8:	3b2c      	subs	r3, #44	; 0x2c
 80063fa:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80063fc:	4299      	cmp	r1, r3
 80063fe:	d109      	bne.n	8006414 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006400:	4b03      	ldr	r3, [pc, #12]	; (8006410 <HAL_OSPIM_Config+0x508>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a02      	ldr	r2, [pc, #8]	; (8006410 <HAL_OSPIM_Config+0x508>)
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	e0ce      	b.n	80065ac <HAL_OSPIM_Config+0x6a4>
 800640e:	bf00      	nop
 8006410:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006414:	49a4      	ldr	r1, [pc, #656]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 8006416:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800641a:	4613      	mov	r3, r2
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	4413      	add	r3, r2
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	3350      	adds	r3, #80	; 0x50
 8006424:	443b      	add	r3, r7
 8006426:	3b3c      	subs	r3, #60	; 0x3c
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3b01      	subs	r3, #1
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	440b      	add	r3, r1
 8006430:	6859      	ldr	r1, [r3, #4]
 8006432:	489d      	ldr	r0, [pc, #628]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 8006434:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006438:	4613      	mov	r3, r2
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	4413      	add	r3, r2
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	3350      	adds	r3, #80	; 0x50
 8006442:	443b      	add	r3, r7
 8006444:	3b3c      	subs	r3, #60	; 0x3c
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3b01      	subs	r3, #1
 800644a:	f021 0201 	bic.w	r2, r1, #1
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4403      	add	r3, r0
 8006452:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006454:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006458:	4613      	mov	r3, r2
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	4413      	add	r3, r2
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	3350      	adds	r3, #80	; 0x50
 8006462:	443b      	add	r3, r7
 8006464:	3b38      	subs	r3, #56	; 0x38
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01f      	beq.n	80064ac <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800646c:	498e      	ldr	r1, [pc, #568]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 800646e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006472:	4613      	mov	r3, r2
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	4413      	add	r3, r2
 8006478:	00db      	lsls	r3, r3, #3
 800647a:	3350      	adds	r3, #80	; 0x50
 800647c:	443b      	add	r3, r7
 800647e:	3b38      	subs	r3, #56	; 0x38
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3b01      	subs	r3, #1
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	440b      	add	r3, r1
 8006488:	6859      	ldr	r1, [r3, #4]
 800648a:	4887      	ldr	r0, [pc, #540]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 800648c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006490:	4613      	mov	r3, r2
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	4413      	add	r3, r2
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	3350      	adds	r3, #80	; 0x50
 800649a:	443b      	add	r3, r7
 800649c:	3b38      	subs	r3, #56	; 0x38
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	f021 0210 	bic.w	r2, r1, #16
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4403      	add	r3, r0
 80064aa:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80064ac:	497e      	ldr	r1, [pc, #504]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 80064ae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80064b2:	4613      	mov	r3, r2
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	4413      	add	r3, r2
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	3350      	adds	r3, #80	; 0x50
 80064bc:	443b      	add	r3, r7
 80064be:	3b34      	subs	r3, #52	; 0x34
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	440b      	add	r3, r1
 80064c8:	6859      	ldr	r1, [r3, #4]
 80064ca:	4877      	ldr	r0, [pc, #476]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 80064cc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80064d0:	4613      	mov	r3, r2
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	4413      	add	r3, r2
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	3350      	adds	r3, #80	; 0x50
 80064da:	443b      	add	r3, r7
 80064dc:	3b34      	subs	r3, #52	; 0x34
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4403      	add	r3, r0
 80064ea:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80064ec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80064f0:	4613      	mov	r3, r2
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	4413      	add	r3, r2
 80064f6:	00db      	lsls	r3, r3, #3
 80064f8:	3350      	adds	r3, #80	; 0x50
 80064fa:	443b      	add	r3, r7
 80064fc:	3b30      	subs	r3, #48	; 0x30
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d023      	beq.n	800654c <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006504:	4968      	ldr	r1, [pc, #416]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 8006506:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800650a:	4613      	mov	r3, r2
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	4413      	add	r3, r2
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	3350      	adds	r3, #80	; 0x50
 8006514:	443b      	add	r3, r7
 8006516:	3b30      	subs	r3, #48	; 0x30
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3b01      	subs	r3, #1
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	6859      	ldr	r1, [r3, #4]
 8006526:	4860      	ldr	r0, [pc, #384]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 8006528:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800652c:	4613      	mov	r3, r2
 800652e:	005b      	lsls	r3, r3, #1
 8006530:	4413      	add	r3, r2
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	3350      	adds	r3, #80	; 0x50
 8006536:	443b      	add	r3, r7
 8006538:	3b30      	subs	r3, #48	; 0x30
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3b01      	subs	r3, #1
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4403      	add	r3, r0
 800654a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800654c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006550:	4613      	mov	r3, r2
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	4413      	add	r3, r2
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	3350      	adds	r3, #80	; 0x50
 800655a:	443b      	add	r3, r7
 800655c:	3b2c      	subs	r3, #44	; 0x2c
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d023      	beq.n	80065ac <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006564:	4950      	ldr	r1, [pc, #320]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 8006566:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800656a:	4613      	mov	r3, r2
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	4413      	add	r3, r2
 8006570:	00db      	lsls	r3, r3, #3
 8006572:	3350      	adds	r3, #80	; 0x50
 8006574:	443b      	add	r3, r7
 8006576:	3b2c      	subs	r3, #44	; 0x2c
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3b01      	subs	r3, #1
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	440b      	add	r3, r1
 8006584:	6859      	ldr	r1, [r3, #4]
 8006586:	4848      	ldr	r0, [pc, #288]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 8006588:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800658c:	4613      	mov	r3, r2
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	4413      	add	r3, r2
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	3350      	adds	r3, #80	; 0x50
 8006596:	443b      	add	r3, r7
 8006598:	3b2c      	subs	r3, #44	; 0x2c
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3b01      	subs	r3, #1
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4403      	add	r3, r0
 80065aa:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80065ac:	4a3e      	ldr	r2, [pc, #248]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	3b01      	subs	r3, #1
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065c0:	025b      	lsls	r3, r3, #9
 80065c2:	431a      	orrs	r2, r3
 80065c4:	4938      	ldr	r1, [pc, #224]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	440b      	add	r3, r1
 80065d4:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d018      	beq.n	8006610 <HAL_OSPIM_Config+0x708>
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e6:	d813      	bhi.n	8006610 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	1e5a      	subs	r2, r3, #1
 80065ee:	4b2e      	ldr	r3, [pc, #184]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	0c1b      	lsrs	r3, r3, #16
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d90a      	bls.n	8006610 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80065fa:	4b2b      	ldr	r3, [pc, #172]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	3b01      	subs	r3, #1
 8006608:	041b      	lsls	r3, r3, #16
 800660a:	4927      	ldr	r1, [pc, #156]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 800660c:	4313      	orrs	r3, r2
 800660e:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006610:	4b25      	ldr	r3, [pc, #148]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 809a 	beq.w	8006752 <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800661e:	4a22      	ldr	r2, [pc, #136]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3b01      	subs	r3, #1
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f023 0203 	bic.w	r2, r3, #3
 8006630:	491d      	ldr	r1, [pc, #116]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3b01      	subs	r3, #1
 8006638:	f042 0201 	orr.w	r2, r2, #1
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	440b      	add	r3, r1
 8006640:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d011      	beq.n	800666e <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800664a:	4a17      	ldr	r2, [pc, #92]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	3b01      	subs	r3, #1
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800665c:	4912      	ldr	r1, [pc, #72]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	3b01      	subs	r3, #1
 8006664:	f042 0210 	orr.w	r2, r2, #16
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d018      	beq.n	80066ac <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800667a:	4a0b      	ldr	r2, [pc, #44]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	3b01      	subs	r3, #1
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006690:	4905      	ldr	r1, [pc, #20]	; (80066a8 <HAL_OSPIM_Config+0x7a0>)
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	3b01      	subs	r3, #1
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	440b      	add	r3, r1
 80066a4:	605a      	str	r2, [r3, #4]
 80066a6:	e01b      	b.n	80066e0 <HAL_OSPIM_Config+0x7d8>
 80066a8:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d015      	beq.n	80066e0 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80066b4:	4a8a      	ldr	r2, [pc, #552]	; (80068e0 <HAL_OSPIM_Config+0x9d8>)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80066ca:	4985      	ldr	r1, [pc, #532]	; (80068e0 <HAL_OSPIM_Config+0x9d8>)
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	440b      	add	r3, r1
 80066de:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d016      	beq.n	800671a <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80066ec:	4a7c      	ldr	r2, [pc, #496]	; (80068e0 <HAL_OSPIM_Config+0x9d8>)
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006702:	4977      	ldr	r1, [pc, #476]	; (80068e0 <HAL_OSPIM_Config+0x9d8>)
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	3b01      	subs	r3, #1
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	440b      	add	r3, r1
 8006716:	605a      	str	r2, [r3, #4]
 8006718:	e0c3      	b.n	80068a2 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 80bf 	beq.w	80068a2 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006724:	4a6e      	ldr	r2, [pc, #440]	; (80068e0 <HAL_OSPIM_Config+0x9d8>)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	3b01      	subs	r3, #1
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800673a:	4969      	ldr	r1, [pc, #420]	; (80068e0 <HAL_OSPIM_Config+0x9d8>)
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	3b01      	subs	r3, #1
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	440b      	add	r3, r1
 800674e:	605a      	str	r2, [r3, #4]
 8006750:	e0a7      	b.n	80068a2 <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8006752:	4a63      	ldr	r2, [pc, #396]	; (80068e0 <HAL_OSPIM_Config+0x9d8>)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3b01      	subs	r3, #1
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f023 0203 	bic.w	r2, r3, #3
 8006764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	431a      	orrs	r2, r3
 800676a:	495d      	ldr	r1, [pc, #372]	; (80068e0 <HAL_OSPIM_Config+0x9d8>)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3b01      	subs	r3, #1
 8006772:	f042 0201 	orr.w	r2, r2, #1
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d014      	beq.n	80067ae <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8006784:	4a56      	ldr	r2, [pc, #344]	; (80068e0 <HAL_OSPIM_Config+0x9d8>)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	3b01      	subs	r3, #1
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006798:	015b      	lsls	r3, r3, #5
 800679a:	431a      	orrs	r2, r3
 800679c:	4950      	ldr	r1, [pc, #320]	; (80068e0 <HAL_OSPIM_Config+0x9d8>)
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	f042 0210 	orr.w	r2, r2, #16
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	440b      	add	r3, r1
 80067ac:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d019      	beq.n	80067ee <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80067ba:	4a49      	ldr	r2, [pc, #292]	; (80068e0 <HAL_OSPIM_Config+0x9d8>)
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80067d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067d2:	049b      	lsls	r3, r3, #18
 80067d4:	431a      	orrs	r2, r3
 80067d6:	4942      	ldr	r1, [pc, #264]	; (80068e0 <HAL_OSPIM_Config+0x9d8>)
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	3b01      	subs	r3, #1
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	440b      	add	r3, r1
 80067ea:	605a      	str	r2, [r3, #4]
 80067ec:	e01c      	b.n	8006828 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d018      	beq.n	8006828 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80067f6:	4a3a      	ldr	r2, [pc, #232]	; (80068e0 <HAL_OSPIM_Config+0x9d8>)
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800680c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800680e:	069b      	lsls	r3, r3, #26
 8006810:	431a      	orrs	r2, r3
 8006812:	4933      	ldr	r1, [pc, #204]	; (80068e0 <HAL_OSPIM_Config+0x9d8>)
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	3b01      	subs	r3, #1
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	440b      	add	r3, r1
 8006826:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d019      	beq.n	8006868 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006834:	4a2a      	ldr	r2, [pc, #168]	; (80068e0 <HAL_OSPIM_Config+0x9d8>)
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	3b01      	subs	r3, #1
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800684a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800684c:	049b      	lsls	r3, r3, #18
 800684e:	431a      	orrs	r2, r3
 8006850:	4923      	ldr	r1, [pc, #140]	; (80068e0 <HAL_OSPIM_Config+0x9d8>)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	3b01      	subs	r3, #1
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	605a      	str	r2, [r3, #4]
 8006866:	e01c      	b.n	80068a2 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d018      	beq.n	80068a2 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006870:	4a1b      	ldr	r2, [pc, #108]	; (80068e0 <HAL_OSPIM_Config+0x9d8>)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	3b01      	subs	r3, #1
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006888:	069b      	lsls	r3, r3, #26
 800688a:	431a      	orrs	r2, r3
 800688c:	4914      	ldr	r1, [pc, #80]	; (80068e0 <HAL_OSPIM_Config+0x9d8>)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	3b01      	subs	r3, #1
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80068a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d005      	beq.n	80068ba <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80068ae:	4b0d      	ldr	r3, [pc, #52]	; (80068e4 <HAL_OSPIM_Config+0x9dc>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a0c      	ldr	r2, [pc, #48]	; (80068e4 <HAL_OSPIM_Config+0x9dc>)
 80068b4:	f043 0301 	orr.w	r3, r3, #1
 80068b8:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80068ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d005      	beq.n	80068d2 <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80068c6:	4b08      	ldr	r3, [pc, #32]	; (80068e8 <HAL_OSPIM_Config+0x9e0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a07      	ldr	r2, [pc, #28]	; (80068e8 <HAL_OSPIM_Config+0x9e0>)
 80068cc:	f043 0301 	orr.w	r3, r3, #1
 80068d0:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80068d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3750      	adds	r7, #80	; 0x50
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	420c4000 	.word	0x420c4000
 80068e4:	420d1400 	.word	0x420d1400
 80068e8:	420d2400 	.word	0x420d2400

080068ec <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	603b      	str	r3, [r7, #0]
 80068f8:	4613      	mov	r3, r2
 80068fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80068fc:	e022      	b.n	8006944 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006904:	d01e      	beq.n	8006944 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006906:	f7fc fb75 	bl	8002ff4 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	429a      	cmp	r2, r3
 8006914:	d302      	bcc.n	800691c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d113      	bne.n	8006944 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6a1a      	ldr	r2, [r3, #32]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	401a      	ands	r2, r3
 8006926:	79fb      	ldrb	r3, [r7, #7]
 8006928:	429a      	cmp	r2, r3
 800692a:	d00b      	beq.n	8006944 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006932:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006938:	f043 0201 	orr.w	r2, r3, #1
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e00e      	b.n	8006962 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6a1a      	ldr	r2, [r3, #32]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	4013      	ands	r3, r2
 800694e:	2b00      	cmp	r3, #0
 8006950:	bf14      	ite	ne
 8006952:	2301      	movne	r3, #1
 8006954:	2300      	moveq	r3, #0
 8006956:	b2db      	uxtb	r3, r3
 8006958:	461a      	mov	r2, r3
 800695a:	79fb      	ldrb	r3, [r7, #7]
 800695c:	429a      	cmp	r2, r3
 800695e:	d1ce      	bne.n	80068fe <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
	...

0800696c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800696c:	b480      	push	{r7}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	4603      	mov	r3, r0
 8006974:	6039      	str	r1, [r7, #0]
 8006976:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8006980:	79fb      	ldrb	r3, [r7, #7]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d005      	beq.n	8006992 <OSPIM_GetConfig+0x26>
 8006986:	79fb      	ldrb	r3, [r7, #7]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d802      	bhi.n	8006992 <OSPIM_GetConfig+0x26>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d102      	bne.n	8006998 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	75fb      	strb	r3, [r7, #23]
 8006996:	e098      	b.n	8006aca <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	2200      	movs	r2, #0
 800699c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2200      	movs	r2, #0
 80069a2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	2200      	movs	r2, #0
 80069a8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2200      	movs	r2, #0
 80069ae:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	2200      	movs	r2, #0
 80069b4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80069b6:	79fb      	ldrb	r3, [r7, #7]
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d10b      	bne.n	80069d4 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80069bc:	4b46      	ldr	r3, [pc, #280]	; (8006ad8 <OSPIM_GetConfig+0x16c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d102      	bne.n	80069ce <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80069c8:	4b44      	ldr	r3, [pc, #272]	; (8006adc <OSPIM_GetConfig+0x170>)
 80069ca:	613b      	str	r3, [r7, #16]
 80069cc:	e002      	b.n	80069d4 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80069ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069d2:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80069d4:	2300      	movs	r3, #0
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	e074      	b.n	8006ac4 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80069da:	4a3f      	ldr	r2, [pc, #252]	; (8006ad8 <OSPIM_GetConfig+0x16c>)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00a      	beq.n	8006a06 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	4053      	eors	r3, r2
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d103      	bne.n	8006a06 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f003 0310 	and.w	r3, r3, #16
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00a      	beq.n	8006a26 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	4053      	eors	r3, r2
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d103      	bne.n	8006a26 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00a      	beq.n	8006a46 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	4053      	eors	r3, r2
 8006a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d103      	bne.n	8006a46 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d018      	beq.n	8006a82 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	4053      	eors	r3, r2
 8006a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d111      	bne.n	8006a82 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d106      	bne.n	8006a76 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	60da      	str	r2, [r3, #12]
 8006a74:	e005      	b.n	8006a82 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d018      	beq.n	8006abe <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	4053      	eors	r3, r2
 8006a92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d111      	bne.n	8006abe <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d106      	bne.n	8006ab2 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	611a      	str	r2, [r3, #16]
 8006ab0:	e005      	b.n	8006abe <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d987      	bls.n	80069da <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8006aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	371c      	adds	r7, #28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	420c4000 	.word	0x420c4000
 8006adc:	04040222 	.word	0x04040222

08006ae0 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0202 	orr.w	r2, r2, #2
 8006afc:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2208      	movs	r2, #8
 8006b02:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a15      	ldr	r2, [pc, #84]	; (8006b60 <HAL_OSPI_DLYB_SetConfig+0x80>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d109      	bne.n	8006b22 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8006b0e:	4815      	ldr	r0, [pc, #84]	; (8006b64 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8006b10:	f7ff f86a 	bl	8005be8 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	4813      	ldr	r0, [pc, #76]	; (8006b64 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8006b18:	f006 f93e 	bl	800cd98 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	73fb      	strb	r3, [r7, #15]
 8006b20:	e00d      	b.n	8006b3e <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a10      	ldr	r2, [pc, #64]	; (8006b68 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d108      	bne.n	8006b3e <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8006b2c:	480f      	ldr	r0, [pc, #60]	; (8006b6c <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8006b2e:	f7ff f85b 	bl	8005be8 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	480d      	ldr	r0, [pc, #52]	; (8006b6c <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8006b36:	f006 f92f 	bl	800cd98 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff f95d 	bl	8005dfe <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689a      	ldr	r2, [r3, #8]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 0202 	bic.w	r2, r2, #2
 8006b52:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	420d1400 	.word	0x420d1400
 8006b64:	420cf000 	.word	0x420cf000
 8006b68:	420d2400 	.word	0x420d2400
 8006b6c:	420cf400 	.word	0x420cf400

08006b70 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006b74:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b78:	4a04      	ldr	r2, [pc, #16]	; (8006b8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006b7a:	f043 0301 	orr.w	r3, r3, #1
 8006b7e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006b80:	bf00      	nop
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	46020800 	.word	0x46020800

08006b90 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8006b98:	4b39      	ldr	r3, [pc, #228]	; (8006c80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ba0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d10b      	bne.n	8006bc2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb0:	d905      	bls.n	8006bbe <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006bb2:	4b33      	ldr	r3, [pc, #204]	; (8006c80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	4a32      	ldr	r2, [pc, #200]	; (8006c80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bbc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	e057      	b.n	8006c72 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc8:	d90a      	bls.n	8006be0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8006bca:	4b2d      	ldr	r3, [pc, #180]	; (8006c80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	4a2a      	ldr	r2, [pc, #168]	; (8006c80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bdc:	60d3      	str	r3, [r2, #12]
 8006bde:	e007      	b.n	8006bf0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8006be0:	4b27      	ldr	r3, [pc, #156]	; (8006c80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006be8:	4925      	ldr	r1, [pc, #148]	; (8006c80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006bf0:	4b24      	ldr	r3, [pc, #144]	; (8006c84 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a24      	ldr	r2, [pc, #144]	; (8006c88 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfa:	099b      	lsrs	r3, r3, #6
 8006bfc:	2232      	movs	r2, #50	; 0x32
 8006bfe:	fb02 f303 	mul.w	r3, r2, r3
 8006c02:	4a21      	ldr	r2, [pc, #132]	; (8006c88 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006c04:	fba2 2303 	umull	r2, r3, r2, r3
 8006c08:	099b      	lsrs	r3, r3, #6
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006c0e:	e002      	b.n	8006c16 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006c16:	4b1a      	ldr	r3, [pc, #104]	; (8006c80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d102      	bne.n	8006c28 <HAL_PWREx_ControlVoltageScaling+0x98>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1f3      	bne.n	8006c10 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d01b      	beq.n	8006c66 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006c2e:	4b15      	ldr	r3, [pc, #84]	; (8006c84 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a15      	ldr	r2, [pc, #84]	; (8006c88 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006c34:	fba2 2303 	umull	r2, r3, r2, r3
 8006c38:	099b      	lsrs	r3, r3, #6
 8006c3a:	2232      	movs	r2, #50	; 0x32
 8006c3c:	fb02 f303 	mul.w	r3, r2, r3
 8006c40:	4a11      	ldr	r2, [pc, #68]	; (8006c88 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006c42:	fba2 2303 	umull	r2, r3, r2, r3
 8006c46:	099b      	lsrs	r3, r3, #6
 8006c48:	3301      	adds	r3, #1
 8006c4a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006c4c:	e002      	b.n	8006c54 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3b01      	subs	r3, #1
 8006c52:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006c54:	4b0a      	ldr	r3, [pc, #40]	; (8006c80 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d102      	bne.n	8006c66 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f3      	bne.n	8006c4e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e000      	b.n	8006c72 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	46020800 	.word	0x46020800
 8006c84:	20000d00 	.word	0x20000d00
 8006c88:	10624dd3 	.word	0x10624dd3

08006c8c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8006c90:	4b04      	ldr	r3, [pc, #16]	; (8006ca4 <HAL_PWREx_GetVoltageRange+0x18>)
 8006c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	46020800 	.word	0x46020800

08006ca8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006cb0:	4b22      	ldr	r3, [pc, #136]	; (8006d3c <HAL_PWREx_ConfigSupply+0x94>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a22      	ldr	r2, [pc, #136]	; (8006d40 <HAL_PWREx_ConfigSupply+0x98>)
 8006cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cba:	099b      	lsrs	r3, r3, #6
 8006cbc:	2232      	movs	r2, #50	; 0x32
 8006cbe:	fb02 f303 	mul.w	r3, r2, r3
 8006cc2:	4a1f      	ldr	r2, [pc, #124]	; (8006d40 <HAL_PWREx_ConfigSupply+0x98>)
 8006cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc8:	099b      	lsrs	r3, r3, #6
 8006cca:	3301      	adds	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d113      	bne.n	8006cfc <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006cd4:	4b1b      	ldr	r3, [pc, #108]	; (8006d44 <HAL_PWREx_ConfigSupply+0x9c>)
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	4a1a      	ldr	r2, [pc, #104]	; (8006d44 <HAL_PWREx_ConfigSupply+0x9c>)
 8006cda:	f023 0302 	bic.w	r3, r3, #2
 8006cde:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006ce0:	e002      	b.n	8006ce8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006ce8:	4b16      	ldr	r3, [pc, #88]	; (8006d44 <HAL_PWREx_ConfigSupply+0x9c>)
 8006cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d116      	bne.n	8006d22 <HAL_PWREx_ConfigSupply+0x7a>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1f3      	bne.n	8006ce2 <HAL_PWREx_ConfigSupply+0x3a>
 8006cfa:	e012      	b.n	8006d22 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006cfc:	4b11      	ldr	r3, [pc, #68]	; (8006d44 <HAL_PWREx_ConfigSupply+0x9c>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	4a10      	ldr	r2, [pc, #64]	; (8006d44 <HAL_PWREx_ConfigSupply+0x9c>)
 8006d02:	f043 0302 	orr.w	r3, r3, #2
 8006d06:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006d08:	e002      	b.n	8006d10 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006d10:	4b0c      	ldr	r3, [pc, #48]	; (8006d44 <HAL_PWREx_ConfigSupply+0x9c>)
 8006d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d102      	bne.n	8006d22 <HAL_PWREx_ConfigSupply+0x7a>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f3      	bne.n	8006d0a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e000      	b.n	8006d2e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	20000d00 	.word	0x20000d00
 8006d40:	10624dd3 	.word	0x10624dd3
 8006d44:	46020800 	.word	0x46020800

08006d48 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8006d4c:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	4a04      	ldr	r2, [pc, #16]	; (8006d64 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006d52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d56:	6113      	str	r3, [r2, #16]
}
 8006d58:	bf00      	nop
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	46020800 	.word	0x46020800

08006d68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08e      	sub	sp, #56	; 0x38
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006d70:	2300      	movs	r3, #0
 8006d72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d102      	bne.n	8006d82 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	f000 bec8 	b.w	8007b12 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d82:	4b99      	ldr	r3, [pc, #612]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	f003 030c 	and.w	r3, r3, #12
 8006d8a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d8c:	4b96      	ldr	r3, [pc, #600]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d90:	f003 0303 	and.w	r3, r3, #3
 8006d94:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0310 	and.w	r3, r3, #16
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 816c 	beq.w	800707c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d007      	beq.n	8006dba <HAL_RCC_OscConfig+0x52>
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	2b0c      	cmp	r3, #12
 8006dae:	f040 80de 	bne.w	8006f6e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	f040 80da 	bne.w	8006f6e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d102      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	f000 bea5 	b.w	8007b12 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dcc:	4b86      	ldr	r3, [pc, #536]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d004      	beq.n	8006de2 <HAL_RCC_OscConfig+0x7a>
 8006dd8:	4b83      	ldr	r3, [pc, #524]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006de0:	e005      	b.n	8006dee <HAL_RCC_OscConfig+0x86>
 8006de2:	4b81      	ldr	r3, [pc, #516]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006de4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006de8:	041b      	lsls	r3, r3, #16
 8006dea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d255      	bcs.n	8006e9e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f001 fa11 	bl	8008224 <RCC_SetFlashLatencyFromMSIRange>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	f000 be82 	b.w	8007b12 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006e0e:	4b76      	ldr	r3, [pc, #472]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	4a75      	ldr	r2, [pc, #468]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e18:	6093      	str	r3, [r2, #8]
 8006e1a:	4b73      	ldr	r3, [pc, #460]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e26:	4970      	ldr	r1, [pc, #448]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006e34:	d309      	bcc.n	8006e4a <HAL_RCC_OscConfig+0xe2>
 8006e36:	4b6c      	ldr	r3, [pc, #432]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f023 021f 	bic.w	r2, r3, #31
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	4969      	ldr	r1, [pc, #420]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60cb      	str	r3, [r1, #12]
 8006e48:	e07e      	b.n	8006f48 <HAL_RCC_OscConfig+0x1e0>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	da0a      	bge.n	8006e68 <HAL_RCC_OscConfig+0x100>
 8006e52:	4b65      	ldr	r3, [pc, #404]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	015b      	lsls	r3, r3, #5
 8006e60:	4961      	ldr	r1, [pc, #388]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60cb      	str	r3, [r1, #12]
 8006e66:	e06f      	b.n	8006f48 <HAL_RCC_OscConfig+0x1e0>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e70:	d30a      	bcc.n	8006e88 <HAL_RCC_OscConfig+0x120>
 8006e72:	4b5d      	ldr	r3, [pc, #372]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	029b      	lsls	r3, r3, #10
 8006e80:	4959      	ldr	r1, [pc, #356]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60cb      	str	r3, [r1, #12]
 8006e86:	e05f      	b.n	8006f48 <HAL_RCC_OscConfig+0x1e0>
 8006e88:	4b57      	ldr	r3, [pc, #348]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	03db      	lsls	r3, r3, #15
 8006e96:	4954      	ldr	r1, [pc, #336]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60cb      	str	r3, [r1, #12]
 8006e9c:	e054      	b.n	8006f48 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006e9e:	4b52      	ldr	r3, [pc, #328]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	4a51      	ldr	r2, [pc, #324]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006ea4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ea8:	6093      	str	r3, [r2, #8]
 8006eaa:	4b4f      	ldr	r3, [pc, #316]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	494c      	ldr	r1, [pc, #304]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006ec4:	d309      	bcc.n	8006eda <HAL_RCC_OscConfig+0x172>
 8006ec6:	4b48      	ldr	r3, [pc, #288]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f023 021f 	bic.w	r2, r3, #31
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	4945      	ldr	r1, [pc, #276]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	60cb      	str	r3, [r1, #12]
 8006ed8:	e028      	b.n	8006f2c <HAL_RCC_OscConfig+0x1c4>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	da0a      	bge.n	8006ef8 <HAL_RCC_OscConfig+0x190>
 8006ee2:	4b41      	ldr	r3, [pc, #260]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	015b      	lsls	r3, r3, #5
 8006ef0:	493d      	ldr	r1, [pc, #244]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	60cb      	str	r3, [r1, #12]
 8006ef6:	e019      	b.n	8006f2c <HAL_RCC_OscConfig+0x1c4>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f00:	d30a      	bcc.n	8006f18 <HAL_RCC_OscConfig+0x1b0>
 8006f02:	4b39      	ldr	r3, [pc, #228]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	029b      	lsls	r3, r3, #10
 8006f10:	4935      	ldr	r1, [pc, #212]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60cb      	str	r3, [r1, #12]
 8006f16:	e009      	b.n	8006f2c <HAL_RCC_OscConfig+0x1c4>
 8006f18:	4b33      	ldr	r3, [pc, #204]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	03db      	lsls	r3, r3, #15
 8006f26:	4930      	ldr	r1, [pc, #192]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10a      	bne.n	8006f48 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	4618      	mov	r0, r3
 8006f38:	f001 f974 	bl	8008224 <RCC_SetFlashLatencyFromMSIRange>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	f000 bde5 	b.w	8007b12 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8006f48:	f001 f8de 	bl	8008108 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006f4c:	4b27      	ldr	r3, [pc, #156]	; (8006fec <HAL_RCC_OscConfig+0x284>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fb fec9 	bl	8002ce8 <HAL_InitTick>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8006f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 808a 	beq.w	800707a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8006f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f6a:	f000 bdd2 	b.w	8007b12 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d066      	beq.n	8007044 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8006f76:	4b1c      	ldr	r3, [pc, #112]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a1b      	ldr	r2, [pc, #108]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006f7c:	f043 0301 	orr.w	r3, r3, #1
 8006f80:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006f82:	f7fc f837 	bl	8002ff4 <HAL_GetTick>
 8006f86:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006f88:	e009      	b.n	8006f9e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f8a:	f7fc f833 	bl	8002ff4 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d902      	bls.n	8006f9e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	f000 bdba 	b.w	8007b12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006f9e:	4b12      	ldr	r3, [pc, #72]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0304 	and.w	r3, r3, #4
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0ef      	beq.n	8006f8a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006faa:	4b0f      	ldr	r3, [pc, #60]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	4a0e      	ldr	r2, [pc, #56]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006fb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006fb4:	6093      	str	r3, [r2, #8]
 8006fb6:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	4909      	ldr	r1, [pc, #36]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fcc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006fd0:	d30e      	bcc.n	8006ff0 <HAL_RCC_OscConfig+0x288>
 8006fd2:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	f023 021f 	bic.w	r2, r3, #31
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	4902      	ldr	r1, [pc, #8]	; (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60cb      	str	r3, [r1, #12]
 8006fe4:	e04a      	b.n	800707c <HAL_RCC_OscConfig+0x314>
 8006fe6:	bf00      	nop
 8006fe8:	46020c00 	.word	0x46020c00
 8006fec:	20000d04 	.word	0x20000d04
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	da0a      	bge.n	800700e <HAL_RCC_OscConfig+0x2a6>
 8006ff8:	4b98      	ldr	r3, [pc, #608]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	015b      	lsls	r3, r3, #5
 8007006:	4995      	ldr	r1, [pc, #596]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 8007008:	4313      	orrs	r3, r2
 800700a:	60cb      	str	r3, [r1, #12]
 800700c:	e036      	b.n	800707c <HAL_RCC_OscConfig+0x314>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007016:	d30a      	bcc.n	800702e <HAL_RCC_OscConfig+0x2c6>
 8007018:	4b90      	ldr	r3, [pc, #576]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a1b      	ldr	r3, [r3, #32]
 8007024:	029b      	lsls	r3, r3, #10
 8007026:	498d      	ldr	r1, [pc, #564]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 8007028:	4313      	orrs	r3, r2
 800702a:	60cb      	str	r3, [r1, #12]
 800702c:	e026      	b.n	800707c <HAL_RCC_OscConfig+0x314>
 800702e:	4b8b      	ldr	r3, [pc, #556]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	03db      	lsls	r3, r3, #15
 800703c:	4987      	ldr	r1, [pc, #540]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 800703e:	4313      	orrs	r3, r2
 8007040:	60cb      	str	r3, [r1, #12]
 8007042:	e01b      	b.n	800707c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8007044:	4b85      	ldr	r3, [pc, #532]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a84      	ldr	r2, [pc, #528]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 800704a:	f023 0301 	bic.w	r3, r3, #1
 800704e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007050:	f7fb ffd0 	bl	8002ff4 <HAL_GetTick>
 8007054:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007056:	e009      	b.n	800706c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007058:	f7fb ffcc 	bl	8002ff4 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b02      	cmp	r3, #2
 8007064:	d902      	bls.n	800706c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	f000 bd53 	b.w	8007b12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800706c:	4b7b      	ldr	r3, [pc, #492]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0304 	and.w	r3, r3, #4
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1ef      	bne.n	8007058 <HAL_RCC_OscConfig+0x2f0>
 8007078:	e000      	b.n	800707c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800707a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 808b 	beq.w	80071a0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800708a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708c:	2b08      	cmp	r3, #8
 800708e:	d005      	beq.n	800709c <HAL_RCC_OscConfig+0x334>
 8007090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007092:	2b0c      	cmp	r3, #12
 8007094:	d109      	bne.n	80070aa <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007098:	2b03      	cmp	r3, #3
 800709a:	d106      	bne.n	80070aa <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d17d      	bne.n	80071a0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	f000 bd34 	b.w	8007b12 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b2:	d106      	bne.n	80070c2 <HAL_RCC_OscConfig+0x35a>
 80070b4:	4b69      	ldr	r3, [pc, #420]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a68      	ldr	r2, [pc, #416]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 80070ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	e041      	b.n	8007146 <HAL_RCC_OscConfig+0x3de>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070ca:	d112      	bne.n	80070f2 <HAL_RCC_OscConfig+0x38a>
 80070cc:	4b63      	ldr	r3, [pc, #396]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a62      	ldr	r2, [pc, #392]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 80070d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	4b60      	ldr	r3, [pc, #384]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a5f      	ldr	r2, [pc, #380]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 80070de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	4b5d      	ldr	r3, [pc, #372]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a5c      	ldr	r2, [pc, #368]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 80070ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	e029      	b.n	8007146 <HAL_RCC_OscConfig+0x3de>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80070fa:	d112      	bne.n	8007122 <HAL_RCC_OscConfig+0x3ba>
 80070fc:	4b57      	ldr	r3, [pc, #348]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a56      	ldr	r2, [pc, #344]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 8007102:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	4b54      	ldr	r3, [pc, #336]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a53      	ldr	r2, [pc, #332]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 800710e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	4b51      	ldr	r3, [pc, #324]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a50      	ldr	r2, [pc, #320]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 800711a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	e011      	b.n	8007146 <HAL_RCC_OscConfig+0x3de>
 8007122:	4b4e      	ldr	r3, [pc, #312]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a4d      	ldr	r2, [pc, #308]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 8007128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	4b4b      	ldr	r3, [pc, #300]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a4a      	ldr	r2, [pc, #296]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 8007134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	4b48      	ldr	r3, [pc, #288]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a47      	ldr	r2, [pc, #284]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 8007140:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007144:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d014      	beq.n	8007178 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800714e:	f7fb ff51 	bl	8002ff4 <HAL_GetTick>
 8007152:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007154:	e009      	b.n	800716a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007156:	f7fb ff4d 	bl	8002ff4 <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	2b64      	cmp	r3, #100	; 0x64
 8007162:	d902      	bls.n	800716a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	f000 bcd4 	b.w	8007b12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800716a:	4b3c      	ldr	r3, [pc, #240]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0ef      	beq.n	8007156 <HAL_RCC_OscConfig+0x3ee>
 8007176:	e013      	b.n	80071a0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8007178:	f7fb ff3c 	bl	8002ff4 <HAL_GetTick>
 800717c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800717e:	e009      	b.n	8007194 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007180:	f7fb ff38 	bl	8002ff4 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b64      	cmp	r3, #100	; 0x64
 800718c:	d902      	bls.n	8007194 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	f000 bcbf 	b.w	8007b12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007194:	4b31      	ldr	r3, [pc, #196]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1ef      	bne.n	8007180 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d05f      	beq.n	800726c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ae:	2b04      	cmp	r3, #4
 80071b0:	d005      	beq.n	80071be <HAL_RCC_OscConfig+0x456>
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	2b0c      	cmp	r3, #12
 80071b6:	d114      	bne.n	80071e2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80071b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d111      	bne.n	80071e2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d102      	bne.n	80071cc <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	f000 bca3 	b.w	8007b12 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80071cc:	4b23      	ldr	r3, [pc, #140]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	041b      	lsls	r3, r3, #16
 80071da:	4920      	ldr	r1, [pc, #128]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80071e0:	e044      	b.n	800726c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d024      	beq.n	8007234 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80071ea:	4b1c      	ldr	r3, [pc, #112]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a1b      	ldr	r2, [pc, #108]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 80071f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071f4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80071f6:	f7fb fefd 	bl	8002ff4 <HAL_GetTick>
 80071fa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071fc:	e009      	b.n	8007212 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071fe:	f7fb fef9 	bl	8002ff4 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b02      	cmp	r3, #2
 800720a:	d902      	bls.n	8007212 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	f000 bc80 	b.w	8007b12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007212:	4b12      	ldr	r3, [pc, #72]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0ef      	beq.n	80071fe <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800721e:	4b0f      	ldr	r3, [pc, #60]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	041b      	lsls	r3, r3, #16
 800722c:	490b      	ldr	r1, [pc, #44]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 800722e:	4313      	orrs	r3, r2
 8007230:	610b      	str	r3, [r1, #16]
 8007232:	e01b      	b.n	800726c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8007234:	4b09      	ldr	r3, [pc, #36]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a08      	ldr	r2, [pc, #32]	; (800725c <HAL_RCC_OscConfig+0x4f4>)
 800723a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800723e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007240:	f7fb fed8 	bl	8002ff4 <HAL_GetTick>
 8007244:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007246:	e00b      	b.n	8007260 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007248:	f7fb fed4 	bl	8002ff4 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d904      	bls.n	8007260 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	f000 bc5b 	b.w	8007b12 <HAL_RCC_OscConfig+0xdaa>
 800725c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007260:	4baf      	ldr	r3, [pc, #700]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1ed      	bne.n	8007248 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0308 	and.w	r3, r3, #8
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 80c8 	beq.w	800740a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800727a:	2300      	movs	r3, #0
 800727c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007280:	4ba7      	ldr	r3, [pc, #668]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 8007282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007286:	f003 0304 	and.w	r3, r3, #4
 800728a:	2b00      	cmp	r3, #0
 800728c:	d111      	bne.n	80072b2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800728e:	4ba4      	ldr	r3, [pc, #656]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 8007290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007294:	4aa2      	ldr	r2, [pc, #648]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 8007296:	f043 0304 	orr.w	r3, r3, #4
 800729a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800729e:	4ba0      	ldr	r3, [pc, #640]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 80072a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	617b      	str	r3, [r7, #20]
 80072aa:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80072ac:	2301      	movs	r3, #1
 80072ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80072b2:	4b9c      	ldr	r3, [pc, #624]	; (8007524 <HAL_RCC_OscConfig+0x7bc>)
 80072b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d119      	bne.n	80072f2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80072be:	4b99      	ldr	r3, [pc, #612]	; (8007524 <HAL_RCC_OscConfig+0x7bc>)
 80072c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c2:	4a98      	ldr	r2, [pc, #608]	; (8007524 <HAL_RCC_OscConfig+0x7bc>)
 80072c4:	f043 0301 	orr.w	r3, r3, #1
 80072c8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072ca:	f7fb fe93 	bl	8002ff4 <HAL_GetTick>
 80072ce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80072d0:	e009      	b.n	80072e6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072d2:	f7fb fe8f 	bl	8002ff4 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d902      	bls.n	80072e6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	f000 bc16 	b.w	8007b12 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80072e6:	4b8f      	ldr	r3, [pc, #572]	; (8007524 <HAL_RCC_OscConfig+0x7bc>)
 80072e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0ef      	beq.n	80072d2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d05f      	beq.n	80073ba <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80072fa:	4b89      	ldr	r3, [pc, #548]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 80072fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007300:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	699a      	ldr	r2, [r3, #24]
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800730c:	429a      	cmp	r2, r3
 800730e:	d037      	beq.n	8007380 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d006      	beq.n	8007328 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e3f4      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d01b      	beq.n	800736a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8007332:	4b7b      	ldr	r3, [pc, #492]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 8007334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007338:	4a79      	ldr	r2, [pc, #484]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 800733a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800733e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8007342:	f7fb fe57 	bl	8002ff4 <HAL_GetTick>
 8007346:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007348:	e008      	b.n	800735c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800734a:	f7fb fe53 	bl	8002ff4 <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	2b05      	cmp	r3, #5
 8007356:	d901      	bls.n	800735c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e3da      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800735c:	4b70      	ldr	r3, [pc, #448]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 800735e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007362:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1ef      	bne.n	800734a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800736a:	4b6d      	ldr	r3, [pc, #436]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 800736c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007370:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	4969      	ldr	r1, [pc, #420]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 800737a:	4313      	orrs	r3, r2
 800737c:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8007380:	4b67      	ldr	r3, [pc, #412]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 8007382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007386:	4a66      	ldr	r2, [pc, #408]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 8007388:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800738c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8007390:	f7fb fe30 	bl	8002ff4 <HAL_GetTick>
 8007394:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007396:	e008      	b.n	80073aa <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007398:	f7fb fe2c 	bl	8002ff4 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b05      	cmp	r3, #5
 80073a4:	d901      	bls.n	80073aa <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e3b3      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80073aa:	4b5d      	ldr	r3, [pc, #372]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 80073ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d0ef      	beq.n	8007398 <HAL_RCC_OscConfig+0x630>
 80073b8:	e01b      	b.n	80073f2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80073ba:	4b59      	ldr	r3, [pc, #356]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 80073bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073c0:	4a57      	ldr	r2, [pc, #348]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 80073c2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80073c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80073ca:	f7fb fe13 	bl	8002ff4 <HAL_GetTick>
 80073ce:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80073d0:	e008      	b.n	80073e4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073d2:	f7fb fe0f 	bl	8002ff4 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	2b05      	cmp	r3, #5
 80073de:	d901      	bls.n	80073e4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e396      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80073e4:	4b4e      	ldr	r3, [pc, #312]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 80073e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1ef      	bne.n	80073d2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073f2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d107      	bne.n	800740a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073fa:	4b49      	ldr	r3, [pc, #292]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 80073fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007400:	4a47      	ldr	r2, [pc, #284]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 8007402:	f023 0304 	bic.w	r3, r3, #4
 8007406:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0304 	and.w	r3, r3, #4
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 8111 	beq.w	800763a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8007418:	2300      	movs	r3, #0
 800741a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800741e:	4b40      	ldr	r3, [pc, #256]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 8007420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007424:	f003 0304 	and.w	r3, r3, #4
 8007428:	2b00      	cmp	r3, #0
 800742a:	d111      	bne.n	8007450 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800742c:	4b3c      	ldr	r3, [pc, #240]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 800742e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007432:	4a3b      	ldr	r2, [pc, #236]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 8007434:	f043 0304 	orr.w	r3, r3, #4
 8007438:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800743c:	4b38      	ldr	r3, [pc, #224]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 800743e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007442:	f003 0304 	and.w	r3, r3, #4
 8007446:	613b      	str	r3, [r7, #16]
 8007448:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800744a:	2301      	movs	r3, #1
 800744c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007450:	4b34      	ldr	r3, [pc, #208]	; (8007524 <HAL_RCC_OscConfig+0x7bc>)
 8007452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b00      	cmp	r3, #0
 800745a:	d118      	bne.n	800748e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800745c:	4b31      	ldr	r3, [pc, #196]	; (8007524 <HAL_RCC_OscConfig+0x7bc>)
 800745e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007460:	4a30      	ldr	r2, [pc, #192]	; (8007524 <HAL_RCC_OscConfig+0x7bc>)
 8007462:	f043 0301 	orr.w	r3, r3, #1
 8007466:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007468:	f7fb fdc4 	bl	8002ff4 <HAL_GetTick>
 800746c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800746e:	e008      	b.n	8007482 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007470:	f7fb fdc0 	bl	8002ff4 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	2b02      	cmp	r3, #2
 800747c:	d901      	bls.n	8007482 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e347      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007482:	4b28      	ldr	r3, [pc, #160]	; (8007524 <HAL_RCC_OscConfig+0x7bc>)
 8007484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0f0      	beq.n	8007470 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d01f      	beq.n	80074da <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f003 0304 	and.w	r3, r3, #4
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d010      	beq.n	80074c8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80074a6:	4b1e      	ldr	r3, [pc, #120]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 80074a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074ac:	4a1c      	ldr	r2, [pc, #112]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 80074ae:	f043 0304 	orr.w	r3, r3, #4
 80074b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80074b6:	4b1a      	ldr	r3, [pc, #104]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 80074b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074bc:	4a18      	ldr	r2, [pc, #96]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 80074be:	f043 0301 	orr.w	r3, r3, #1
 80074c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80074c6:	e018      	b.n	80074fa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80074c8:	4b15      	ldr	r3, [pc, #84]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 80074ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074ce:	4a14      	ldr	r2, [pc, #80]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 80074d0:	f043 0301 	orr.w	r3, r3, #1
 80074d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80074d8:	e00f      	b.n	80074fa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80074da:	4b11      	ldr	r3, [pc, #68]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 80074dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074e0:	4a0f      	ldr	r2, [pc, #60]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 80074e2:	f023 0301 	bic.w	r3, r3, #1
 80074e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80074ea:	4b0d      	ldr	r3, [pc, #52]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 80074ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074f0:	4a0b      	ldr	r2, [pc, #44]	; (8007520 <HAL_RCC_OscConfig+0x7b8>)
 80074f2:	f023 0304 	bic.w	r3, r3, #4
 80074f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d057      	beq.n	80075b2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8007502:	f7fb fd77 	bl	8002ff4 <HAL_GetTick>
 8007506:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007508:	e00e      	b.n	8007528 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800750a:	f7fb fd73 	bl	8002ff4 <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	f241 3288 	movw	r2, #5000	; 0x1388
 8007518:	4293      	cmp	r3, r2
 800751a:	d905      	bls.n	8007528 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e2f8      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
 8007520:	46020c00 	.word	0x46020c00
 8007524:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007528:	4b9c      	ldr	r3, [pc, #624]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 800752a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0e9      	beq.n	800750a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753e:	2b00      	cmp	r3, #0
 8007540:	d01b      	beq.n	800757a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007542:	4b96      	ldr	r3, [pc, #600]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 8007544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007548:	4a94      	ldr	r2, [pc, #592]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 800754a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800754e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007552:	e00a      	b.n	800756a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007554:	f7fb fd4e 	bl	8002ff4 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007562:	4293      	cmp	r3, r2
 8007564:	d901      	bls.n	800756a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e2d3      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800756a:	4b8c      	ldr	r3, [pc, #560]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 800756c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007574:	2b00      	cmp	r3, #0
 8007576:	d0ed      	beq.n	8007554 <HAL_RCC_OscConfig+0x7ec>
 8007578:	e053      	b.n	8007622 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800757a:	4b88      	ldr	r3, [pc, #544]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 800757c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007580:	4a86      	ldr	r2, [pc, #536]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 8007582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007586:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800758a:	e00a      	b.n	80075a2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800758c:	f7fb fd32 	bl	8002ff4 <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	f241 3288 	movw	r2, #5000	; 0x1388
 800759a:	4293      	cmp	r3, r2
 800759c:	d901      	bls.n	80075a2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e2b7      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80075a2:	4b7e      	ldr	r3, [pc, #504]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 80075a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1ed      	bne.n	800758c <HAL_RCC_OscConfig+0x824>
 80075b0:	e037      	b.n	8007622 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80075b2:	f7fb fd1f 	bl	8002ff4 <HAL_GetTick>
 80075b6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075b8:	e00a      	b.n	80075d0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075ba:	f7fb fd1b 	bl	8002ff4 <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d901      	bls.n	80075d0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e2a0      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075d0:	4b72      	ldr	r3, [pc, #456]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 80075d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1ed      	bne.n	80075ba <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80075de:	4b6f      	ldr	r3, [pc, #444]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 80075e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01a      	beq.n	8007622 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80075ec:	4b6b      	ldr	r3, [pc, #428]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 80075ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075f2:	4a6a      	ldr	r2, [pc, #424]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 80075f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80075fc:	e00a      	b.n	8007614 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075fe:	f7fb fcf9 	bl	8002ff4 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	f241 3288 	movw	r2, #5000	; 0x1388
 800760c:	4293      	cmp	r3, r2
 800760e:	d901      	bls.n	8007614 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e27e      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007614:	4b61      	ldr	r3, [pc, #388]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 8007616:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800761a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1ed      	bne.n	80075fe <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007622:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8007626:	2b01      	cmp	r3, #1
 8007628:	d107      	bne.n	800763a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800762a:	4b5c      	ldr	r3, [pc, #368]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 800762c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007630:	4a5a      	ldr	r2, [pc, #360]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 8007632:	f023 0304 	bic.w	r3, r3, #4
 8007636:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b00      	cmp	r3, #0
 8007644:	d036      	beq.n	80076b4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	2b00      	cmp	r3, #0
 800764c:	d019      	beq.n	8007682 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800764e:	4b53      	ldr	r3, [pc, #332]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a52      	ldr	r2, [pc, #328]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 8007654:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007658:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800765a:	f7fb fccb 	bl	8002ff4 <HAL_GetTick>
 800765e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007660:	e008      	b.n	8007674 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007662:	f7fb fcc7 	bl	8002ff4 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	2b02      	cmp	r3, #2
 800766e:	d901      	bls.n	8007674 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e24e      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007674:	4b49      	ldr	r3, [pc, #292]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d0f0      	beq.n	8007662 <HAL_RCC_OscConfig+0x8fa>
 8007680:	e018      	b.n	80076b4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8007682:	4b46      	ldr	r3, [pc, #280]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a45      	ldr	r2, [pc, #276]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 8007688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800768c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800768e:	f7fb fcb1 	bl	8002ff4 <HAL_GetTick>
 8007692:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007694:	e008      	b.n	80076a8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007696:	f7fb fcad 	bl	8002ff4 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d901      	bls.n	80076a8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e234      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80076a8:	4b3c      	ldr	r3, [pc, #240]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1f0      	bne.n	8007696 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d036      	beq.n	800772e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d019      	beq.n	80076fc <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80076c8:	4b34      	ldr	r3, [pc, #208]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a33      	ldr	r2, [pc, #204]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 80076ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076d2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80076d4:	f7fb fc8e 	bl	8002ff4 <HAL_GetTick>
 80076d8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80076da:	e008      	b.n	80076ee <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80076dc:	f7fb fc8a 	bl	8002ff4 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d901      	bls.n	80076ee <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e211      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80076ee:	4b2b      	ldr	r3, [pc, #172]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d0f0      	beq.n	80076dc <HAL_RCC_OscConfig+0x974>
 80076fa:	e018      	b.n	800772e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80076fc:	4b27      	ldr	r3, [pc, #156]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a26      	ldr	r2, [pc, #152]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 8007702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007706:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007708:	f7fb fc74 	bl	8002ff4 <HAL_GetTick>
 800770c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800770e:	e008      	b.n	8007722 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007710:	f7fb fc70 	bl	8002ff4 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	2b02      	cmp	r3, #2
 800771c:	d901      	bls.n	8007722 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e1f7      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007722:	4b1e      	ldr	r3, [pc, #120]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1f0      	bne.n	8007710 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007736:	2b00      	cmp	r3, #0
 8007738:	d07f      	beq.n	800783a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800773e:	2b00      	cmp	r3, #0
 8007740:	d062      	beq.n	8007808 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8007742:	4b16      	ldr	r3, [pc, #88]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	4a15      	ldr	r2, [pc, #84]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 8007748:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800774c:	6093      	str	r3, [r2, #8]
 800774e:	4b13      	ldr	r3, [pc, #76]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	4910      	ldr	r1, [pc, #64]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 800775c:	4313      	orrs	r3, r2
 800775e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007764:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007768:	d309      	bcc.n	800777e <HAL_RCC_OscConfig+0xa16>
 800776a:	4b0c      	ldr	r3, [pc, #48]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	f023 021f 	bic.w	r2, r3, #31
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	4909      	ldr	r1, [pc, #36]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 8007778:	4313      	orrs	r3, r2
 800777a:	60cb      	str	r3, [r1, #12]
 800777c:	e02a      	b.n	80077d4 <HAL_RCC_OscConfig+0xa6c>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007782:	2b00      	cmp	r3, #0
 8007784:	da0c      	bge.n	80077a0 <HAL_RCC_OscConfig+0xa38>
 8007786:	4b05      	ldr	r3, [pc, #20]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	015b      	lsls	r3, r3, #5
 8007794:	4901      	ldr	r1, [pc, #4]	; (800779c <HAL_RCC_OscConfig+0xa34>)
 8007796:	4313      	orrs	r3, r2
 8007798:	60cb      	str	r3, [r1, #12]
 800779a:	e01b      	b.n	80077d4 <HAL_RCC_OscConfig+0xa6c>
 800779c:	46020c00 	.word	0x46020c00
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a8:	d30a      	bcc.n	80077c0 <HAL_RCC_OscConfig+0xa58>
 80077aa:	4ba1      	ldr	r3, [pc, #644]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	029b      	lsls	r3, r3, #10
 80077b8:	499d      	ldr	r1, [pc, #628]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	60cb      	str	r3, [r1, #12]
 80077be:	e009      	b.n	80077d4 <HAL_RCC_OscConfig+0xa6c>
 80077c0:	4b9b      	ldr	r3, [pc, #620]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	03db      	lsls	r3, r3, #15
 80077ce:	4998      	ldr	r1, [pc, #608]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80077d4:	4b96      	ldr	r3, [pc, #600]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a95      	ldr	r2, [pc, #596]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80077da:	f043 0310 	orr.w	r3, r3, #16
 80077de:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80077e0:	f7fb fc08 	bl	8002ff4 <HAL_GetTick>
 80077e4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80077e6:	e008      	b.n	80077fa <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80077e8:	f7fb fc04 	bl	8002ff4 <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d901      	bls.n	80077fa <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e18b      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80077fa:	4b8d      	ldr	r3, [pc, #564]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0320 	and.w	r3, r3, #32
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0f0      	beq.n	80077e8 <HAL_RCC_OscConfig+0xa80>
 8007806:	e018      	b.n	800783a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8007808:	4b89      	ldr	r3, [pc, #548]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a88      	ldr	r2, [pc, #544]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 800780e:	f023 0310 	bic.w	r3, r3, #16
 8007812:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007814:	f7fb fbee 	bl	8002ff4 <HAL_GetTick>
 8007818:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800781a:	e008      	b.n	800782e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800781c:	f7fb fbea 	bl	8002ff4 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b02      	cmp	r3, #2
 8007828:	d901      	bls.n	800782e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e171      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800782e:	4b80      	ldr	r3, [pc, #512]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0320 	and.w	r3, r3, #32
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1f0      	bne.n	800781c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 8166 	beq.w	8007b10 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8007844:	2300      	movs	r3, #0
 8007846:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800784a:	4b79      	ldr	r3, [pc, #484]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	f003 030c 	and.w	r3, r3, #12
 8007852:	2b0c      	cmp	r3, #12
 8007854:	f000 80f2 	beq.w	8007a3c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785c:	2b02      	cmp	r3, #2
 800785e:	f040 80c5 	bne.w	80079ec <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007862:	4b73      	ldr	r3, [pc, #460]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a72      	ldr	r2, [pc, #456]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 8007868:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800786c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800786e:	f7fb fbc1 	bl	8002ff4 <HAL_GetTick>
 8007872:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007874:	e008      	b.n	8007888 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007876:	f7fb fbbd 	bl	8002ff4 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	2b02      	cmp	r3, #2
 8007882:	d901      	bls.n	8007888 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	e144      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007888:	4b69      	ldr	r3, [pc, #420]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1f0      	bne.n	8007876 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007894:	4b66      	ldr	r3, [pc, #408]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 8007896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800789a:	f003 0304 	and.w	r3, r3, #4
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d111      	bne.n	80078c6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80078a2:	4b63      	ldr	r3, [pc, #396]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80078a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078a8:	4a61      	ldr	r2, [pc, #388]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80078aa:	f043 0304 	orr.w	r3, r3, #4
 80078ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80078b2:	4b5f      	ldr	r3, [pc, #380]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80078b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078b8:	f003 0304 	and.w	r3, r3, #4
 80078bc:	60fb      	str	r3, [r7, #12]
 80078be:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80078c0:	2301      	movs	r3, #1
 80078c2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80078c6:	4b5b      	ldr	r3, [pc, #364]	; (8007a34 <HAL_RCC_OscConfig+0xccc>)
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80078d2:	d102      	bne.n	80078da <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80078d4:	2301      	movs	r3, #1
 80078d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80078da:	4b56      	ldr	r3, [pc, #344]	; (8007a34 <HAL_RCC_OscConfig+0xccc>)
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	4a55      	ldr	r2, [pc, #340]	; (8007a34 <HAL_RCC_OscConfig+0xccc>)
 80078e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078e4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80078e6:	4b52      	ldr	r3, [pc, #328]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80078e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078ee:	f023 0303 	bic.w	r3, r3, #3
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80078fa:	3a01      	subs	r2, #1
 80078fc:	0212      	lsls	r2, r2, #8
 80078fe:	4311      	orrs	r1, r2
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007904:	430a      	orrs	r2, r1
 8007906:	494a      	ldr	r1, [pc, #296]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 8007908:	4313      	orrs	r3, r2
 800790a:	628b      	str	r3, [r1, #40]	; 0x28
 800790c:	4b48      	ldr	r3, [pc, #288]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 800790e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007910:	4b49      	ldr	r3, [pc, #292]	; (8007a38 <HAL_RCC_OscConfig+0xcd0>)
 8007912:	4013      	ands	r3, r2
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007918:	3a01      	subs	r2, #1
 800791a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007922:	3a01      	subs	r2, #1
 8007924:	0252      	lsls	r2, r2, #9
 8007926:	b292      	uxth	r2, r2
 8007928:	4311      	orrs	r1, r2
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800792e:	3a01      	subs	r2, #1
 8007930:	0412      	lsls	r2, r2, #16
 8007932:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007936:	4311      	orrs	r1, r2
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800793c:	3a01      	subs	r2, #1
 800793e:	0612      	lsls	r2, r2, #24
 8007940:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007944:	430a      	orrs	r2, r1
 8007946:	493a      	ldr	r1, [pc, #232]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 8007948:	4313      	orrs	r3, r2
 800794a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800794c:	4b38      	ldr	r3, [pc, #224]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 800794e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007950:	4a37      	ldr	r2, [pc, #220]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 8007952:	f023 0310 	bic.w	r3, r3, #16
 8007956:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800795c:	4a34      	ldr	r2, [pc, #208]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 800795e:	00db      	lsls	r3, r3, #3
 8007960:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007962:	4b33      	ldr	r3, [pc, #204]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 8007964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007966:	4a32      	ldr	r2, [pc, #200]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 8007968:	f043 0310 	orr.w	r3, r3, #16
 800796c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800796e:	4b30      	ldr	r3, [pc, #192]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 8007970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007972:	f023 020c 	bic.w	r2, r3, #12
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797a:	492d      	ldr	r1, [pc, #180]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 800797c:	4313      	orrs	r3, r2
 800797e:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8007980:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007984:	2b01      	cmp	r3, #1
 8007986:	d105      	bne.n	8007994 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007988:	4b2a      	ldr	r3, [pc, #168]	; (8007a34 <HAL_RCC_OscConfig+0xccc>)
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	4a29      	ldr	r2, [pc, #164]	; (8007a34 <HAL_RCC_OscConfig+0xccc>)
 800798e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007992:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8007994:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007998:	2b01      	cmp	r3, #1
 800799a:	d107      	bne.n	80079ac <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800799c:	4b24      	ldr	r3, [pc, #144]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 800799e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079a2:	4a23      	ldr	r2, [pc, #140]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80079a4:	f023 0304 	bic.w	r3, r3, #4
 80079a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80079ac:	4b20      	ldr	r3, [pc, #128]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80079ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b0:	4a1f      	ldr	r2, [pc, #124]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80079b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079b6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80079b8:	4b1d      	ldr	r3, [pc, #116]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a1c      	ldr	r2, [pc, #112]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80079be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079c2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80079c4:	f7fb fb16 	bl	8002ff4 <HAL_GetTick>
 80079c8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80079ca:	e008      	b.n	80079de <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079cc:	f7fb fb12 	bl	8002ff4 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d901      	bls.n	80079de <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e099      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80079de:	4b14      	ldr	r3, [pc, #80]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0f0      	beq.n	80079cc <HAL_RCC_OscConfig+0xc64>
 80079ea:	e091      	b.n	8007b10 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80079ec:	4b10      	ldr	r3, [pc, #64]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a0f      	ldr	r2, [pc, #60]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 80079f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079f6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80079f8:	f7fb fafc 	bl	8002ff4 <HAL_GetTick>
 80079fc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80079fe:	e008      	b.n	8007a12 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a00:	f7fb faf8 	bl	8002ff4 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e07f      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007a12:	4b07      	ldr	r3, [pc, #28]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1f0      	bne.n	8007a00 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007a1e:	4b04      	ldr	r3, [pc, #16]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 8007a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a22:	4a03      	ldr	r2, [pc, #12]	; (8007a30 <HAL_RCC_OscConfig+0xcc8>)
 8007a24:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007a28:	f023 0303 	bic.w	r3, r3, #3
 8007a2c:	6293      	str	r3, [r2, #40]	; 0x28
 8007a2e:	e06f      	b.n	8007b10 <HAL_RCC_OscConfig+0xda8>
 8007a30:	46020c00 	.word	0x46020c00
 8007a34:	46020800 	.word	0x46020800
 8007a38:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007a3c:	4b37      	ldr	r3, [pc, #220]	; (8007b1c <HAL_RCC_OscConfig+0xdb4>)
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a40:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007a42:	4b36      	ldr	r3, [pc, #216]	; (8007b1c <HAL_RCC_OscConfig+0xdb4>)
 8007a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a46:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d039      	beq.n	8007ac4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	f003 0203 	and.w	r2, r3, #3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d132      	bne.n	8007ac4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	0a1b      	lsrs	r3, r3, #8
 8007a62:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d129      	bne.n	8007ac4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d122      	bne.n	8007ac4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a88:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d11a      	bne.n	8007ac4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	0a5b      	lsrs	r3, r3, #9
 8007a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a9a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d111      	bne.n	8007ac4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	0c1b      	lsrs	r3, r3, #16
 8007aa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aac:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d108      	bne.n	8007ac4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	0e1b      	lsrs	r3, r3, #24
 8007ab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007abe:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d001      	beq.n	8007ac8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e024      	b.n	8007b12 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007ac8:	4b14      	ldr	r3, [pc, #80]	; (8007b1c <HAL_RCC_OscConfig+0xdb4>)
 8007aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007acc:	08db      	lsrs	r3, r3, #3
 8007ace:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d01a      	beq.n	8007b10 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007ada:	4b10      	ldr	r3, [pc, #64]	; (8007b1c <HAL_RCC_OscConfig+0xdb4>)
 8007adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ade:	4a0f      	ldr	r2, [pc, #60]	; (8007b1c <HAL_RCC_OscConfig+0xdb4>)
 8007ae0:	f023 0310 	bic.w	r3, r3, #16
 8007ae4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae6:	f7fb fa85 	bl	8002ff4 <HAL_GetTick>
 8007aea:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8007aec:	bf00      	nop
 8007aee:	f7fb fa81 	bl	8002ff4 <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d0f9      	beq.n	8007aee <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007afe:	4a07      	ldr	r2, [pc, #28]	; (8007b1c <HAL_RCC_OscConfig+0xdb4>)
 8007b00:	00db      	lsls	r3, r3, #3
 8007b02:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007b04:	4b05      	ldr	r3, [pc, #20]	; (8007b1c <HAL_RCC_OscConfig+0xdb4>)
 8007b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b08:	4a04      	ldr	r2, [pc, #16]	; (8007b1c <HAL_RCC_OscConfig+0xdb4>)
 8007b0a:	f043 0310 	orr.w	r3, r3, #16
 8007b0e:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3738      	adds	r7, #56	; 0x38
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	46020c00 	.word	0x46020c00

08007b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e1d9      	b.n	8007ee8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b34:	4b9b      	ldr	r3, [pc, #620]	; (8007da4 <HAL_RCC_ClockConfig+0x284>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 030f 	and.w	r3, r3, #15
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d910      	bls.n	8007b64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b42:	4b98      	ldr	r3, [pc, #608]	; (8007da4 <HAL_RCC_ClockConfig+0x284>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f023 020f 	bic.w	r2, r3, #15
 8007b4a:	4996      	ldr	r1, [pc, #600]	; (8007da4 <HAL_RCC_ClockConfig+0x284>)
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b52:	4b94      	ldr	r3, [pc, #592]	; (8007da4 <HAL_RCC_ClockConfig+0x284>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 030f 	and.w	r3, r3, #15
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d001      	beq.n	8007b64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e1c1      	b.n	8007ee8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0310 	and.w	r3, r3, #16
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d010      	beq.n	8007b92 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	695a      	ldr	r2, [r3, #20]
 8007b74:	4b8c      	ldr	r3, [pc, #560]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d908      	bls.n	8007b92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007b80:	4b89      	ldr	r3, [pc, #548]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	695b      	ldr	r3, [r3, #20]
 8007b8c:	4986      	ldr	r1, [pc, #536]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0308 	and.w	r3, r3, #8
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d012      	beq.n	8007bc4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	691a      	ldr	r2, [r3, #16]
 8007ba2:	4b81      	ldr	r3, [pc, #516]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	091b      	lsrs	r3, r3, #4
 8007ba8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d909      	bls.n	8007bc4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007bb0:	4b7d      	ldr	r3, [pc, #500]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	011b      	lsls	r3, r3, #4
 8007bbe:	497a      	ldr	r1, [pc, #488]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0304 	and.w	r3, r3, #4
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d010      	beq.n	8007bf2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	4b74      	ldr	r3, [pc, #464]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d908      	bls.n	8007bf2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007be0:	4b71      	ldr	r3, [pc, #452]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	496e      	ldr	r1, [pc, #440]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d010      	beq.n	8007c20 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	689a      	ldr	r2, [r3, #8]
 8007c02:	4b69      	ldr	r3, [pc, #420]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	f003 030f 	and.w	r3, r3, #15
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d908      	bls.n	8007c20 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007c0e:	4b66      	ldr	r3, [pc, #408]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	f023 020f 	bic.w	r2, r3, #15
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	4963      	ldr	r1, [pc, #396]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 80d2 	beq.w	8007dd2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d143      	bne.n	8007cc2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c3a:	4b5b      	ldr	r3, [pc, #364]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c40:	f003 0304 	and.w	r3, r3, #4
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d110      	bne.n	8007c6a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007c48:	4b57      	ldr	r3, [pc, #348]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c4e:	4a56      	ldr	r2, [pc, #344]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007c50:	f043 0304 	orr.w	r3, r3, #4
 8007c54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007c58:	4b53      	ldr	r3, [pc, #332]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c5e:	f003 0304 	and.w	r3, r3, #4
 8007c62:	60bb      	str	r3, [r7, #8]
 8007c64:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8007c66:	2301      	movs	r3, #1
 8007c68:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007c6a:	f7fb f9c3 	bl	8002ff4 <HAL_GetTick>
 8007c6e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007c70:	4b4e      	ldr	r3, [pc, #312]	; (8007dac <HAL_RCC_ClockConfig+0x28c>)
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00f      	beq.n	8007c9c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007c7c:	e008      	b.n	8007c90 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8007c7e:	f7fb f9b9 	bl	8002ff4 <HAL_GetTick>
 8007c82:	4602      	mov	r2, r0
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d901      	bls.n	8007c90 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e12b      	b.n	8007ee8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007c90:	4b46      	ldr	r3, [pc, #280]	; (8007dac <HAL_RCC_ClockConfig+0x28c>)
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d0f0      	beq.n	8007c7e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d107      	bne.n	8007cb2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007ca2:	4b41      	ldr	r3, [pc, #260]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ca8:	4a3f      	ldr	r2, [pc, #252]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007caa:	f023 0304 	bic.w	r3, r3, #4
 8007cae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007cb2:	4b3d      	ldr	r3, [pc, #244]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d121      	bne.n	8007d02 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e112      	b.n	8007ee8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d107      	bne.n	8007cda <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007cca:	4b37      	ldr	r3, [pc, #220]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d115      	bne.n	8007d02 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e106      	b.n	8007ee8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d107      	bne.n	8007cf2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007ce2:	4b31      	ldr	r3, [pc, #196]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0304 	and.w	r3, r3, #4
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d109      	bne.n	8007d02 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e0fa      	b.n	8007ee8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007cf2:	4b2d      	ldr	r3, [pc, #180]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e0f2      	b.n	8007ee8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8007d02:	4b29      	ldr	r3, [pc, #164]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	f023 0203 	bic.w	r2, r3, #3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	4926      	ldr	r1, [pc, #152]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8007d14:	f7fb f96e 	bl	8002ff4 <HAL_GetTick>
 8007d18:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d112      	bne.n	8007d48 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d22:	e00a      	b.n	8007d3a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d24:	f7fb f966 	bl	8002ff4 <HAL_GetTick>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d901      	bls.n	8007d3a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e0d6      	b.n	8007ee8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d3a:	4b1b      	ldr	r3, [pc, #108]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	f003 030c 	and.w	r3, r3, #12
 8007d42:	2b0c      	cmp	r3, #12
 8007d44:	d1ee      	bne.n	8007d24 <HAL_RCC_ClockConfig+0x204>
 8007d46:	e044      	b.n	8007dd2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d112      	bne.n	8007d76 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d50:	e00a      	b.n	8007d68 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d52:	f7fb f94f 	bl	8002ff4 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d901      	bls.n	8007d68 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e0bf      	b.n	8007ee8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d68:	4b0f      	ldr	r3, [pc, #60]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007d6a:	69db      	ldr	r3, [r3, #28]
 8007d6c:	f003 030c 	and.w	r3, r3, #12
 8007d70:	2b08      	cmp	r3, #8
 8007d72:	d1ee      	bne.n	8007d52 <HAL_RCC_ClockConfig+0x232>
 8007d74:	e02d      	b.n	8007dd2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d123      	bne.n	8007dc6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007d7e:	e00a      	b.n	8007d96 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d80:	f7fb f938 	bl	8002ff4 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d901      	bls.n	8007d96 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e0a8      	b.n	8007ee8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007d96:	4b04      	ldr	r3, [pc, #16]	; (8007da8 <HAL_RCC_ClockConfig+0x288>)
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	f003 030c 	and.w	r3, r3, #12
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1ee      	bne.n	8007d80 <HAL_RCC_ClockConfig+0x260>
 8007da2:	e016      	b.n	8007dd2 <HAL_RCC_ClockConfig+0x2b2>
 8007da4:	40022000 	.word	0x40022000
 8007da8:	46020c00 	.word	0x46020c00
 8007dac:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007db0:	f7fb f920 	bl	8002ff4 <HAL_GetTick>
 8007db4:	4602      	mov	r2, r0
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e090      	b.n	8007ee8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007dc6:	4b4a      	ldr	r3, [pc, #296]	; (8007ef0 <HAL_RCC_ClockConfig+0x3d0>)
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	f003 030c 	and.w	r3, r3, #12
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d1ee      	bne.n	8007db0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d010      	beq.n	8007e00 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	4b43      	ldr	r3, [pc, #268]	; (8007ef0 <HAL_RCC_ClockConfig+0x3d0>)
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d208      	bcs.n	8007e00 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007dee:	4b40      	ldr	r3, [pc, #256]	; (8007ef0 <HAL_RCC_ClockConfig+0x3d0>)
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	f023 020f 	bic.w	r2, r3, #15
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	493d      	ldr	r1, [pc, #244]	; (8007ef0 <HAL_RCC_ClockConfig+0x3d0>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e00:	4b3c      	ldr	r3, [pc, #240]	; (8007ef4 <HAL_RCC_ClockConfig+0x3d4>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 030f 	and.w	r3, r3, #15
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d210      	bcs.n	8007e30 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e0e:	4b39      	ldr	r3, [pc, #228]	; (8007ef4 <HAL_RCC_ClockConfig+0x3d4>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f023 020f 	bic.w	r2, r3, #15
 8007e16:	4937      	ldr	r1, [pc, #220]	; (8007ef4 <HAL_RCC_ClockConfig+0x3d4>)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e1e:	4b35      	ldr	r3, [pc, #212]	; (8007ef4 <HAL_RCC_ClockConfig+0x3d4>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 030f 	and.w	r3, r3, #15
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d001      	beq.n	8007e30 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e05b      	b.n	8007ee8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0304 	and.w	r3, r3, #4
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d010      	beq.n	8007e5e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	4b2b      	ldr	r3, [pc, #172]	; (8007ef0 <HAL_RCC_ClockConfig+0x3d0>)
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d208      	bcs.n	8007e5e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007e4c:	4b28      	ldr	r3, [pc, #160]	; (8007ef0 <HAL_RCC_ClockConfig+0x3d0>)
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	4925      	ldr	r1, [pc, #148]	; (8007ef0 <HAL_RCC_ClockConfig+0x3d0>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0308 	and.w	r3, r3, #8
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d012      	beq.n	8007e90 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	691a      	ldr	r2, [r3, #16]
 8007e6e:	4b20      	ldr	r3, [pc, #128]	; (8007ef0 <HAL_RCC_ClockConfig+0x3d0>)
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	091b      	lsrs	r3, r3, #4
 8007e74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d209      	bcs.n	8007e90 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007e7c:	4b1c      	ldr	r3, [pc, #112]	; (8007ef0 <HAL_RCC_ClockConfig+0x3d0>)
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	011b      	lsls	r3, r3, #4
 8007e8a:	4919      	ldr	r1, [pc, #100]	; (8007ef0 <HAL_RCC_ClockConfig+0x3d0>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0310 	and.w	r3, r3, #16
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d010      	beq.n	8007ebe <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	695a      	ldr	r2, [r3, #20]
 8007ea0:	4b13      	ldr	r3, [pc, #76]	; (8007ef0 <HAL_RCC_ClockConfig+0x3d0>)
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d208      	bcs.n	8007ebe <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007eac:	4b10      	ldr	r3, [pc, #64]	; (8007ef0 <HAL_RCC_ClockConfig+0x3d0>)
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	490d      	ldr	r1, [pc, #52]	; (8007ef0 <HAL_RCC_ClockConfig+0x3d0>)
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007ebe:	f000 f821 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	4b0a      	ldr	r3, [pc, #40]	; (8007ef0 <HAL_RCC_ClockConfig+0x3d0>)
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	f003 030f 	and.w	r3, r3, #15
 8007ecc:	490a      	ldr	r1, [pc, #40]	; (8007ef8 <HAL_RCC_ClockConfig+0x3d8>)
 8007ece:	5ccb      	ldrb	r3, [r1, r3]
 8007ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed4:	4a09      	ldr	r2, [pc, #36]	; (8007efc <HAL_RCC_ClockConfig+0x3dc>)
 8007ed6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007ed8:	4b09      	ldr	r3, [pc, #36]	; (8007f00 <HAL_RCC_ClockConfig+0x3e0>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fa ff03 	bl	8002ce8 <HAL_InitTick>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73fb      	strb	r3, [r7, #15]

  return status;
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3718      	adds	r7, #24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	46020c00 	.word	0x46020c00
 8007ef4:	40022000 	.word	0x40022000
 8007ef8:	0800ce48 	.word	0x0800ce48
 8007efc:	20000d00 	.word	0x20000d00
 8007f00:	20000d04 	.word	0x20000d04

08007f04 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b08b      	sub	sp, #44	; 0x2c
 8007f08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f12:	4b78      	ldr	r3, [pc, #480]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	f003 030c 	and.w	r3, r3, #12
 8007f1a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f1c:	4b75      	ldr	r3, [pc, #468]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f20:	f003 0303 	and.w	r3, r3, #3
 8007f24:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d005      	beq.n	8007f38 <HAL_RCC_GetSysClockFreq+0x34>
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	2b0c      	cmp	r3, #12
 8007f30:	d121      	bne.n	8007f76 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d11e      	bne.n	8007f76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8007f38:	4b6e      	ldr	r3, [pc, #440]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d107      	bne.n	8007f54 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8007f44:	4b6b      	ldr	r3, [pc, #428]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f4a:	0b1b      	lsrs	r3, r3, #12
 8007f4c:	f003 030f 	and.w	r3, r3, #15
 8007f50:	627b      	str	r3, [r7, #36]	; 0x24
 8007f52:	e005      	b.n	8007f60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8007f54:	4b67      	ldr	r3, [pc, #412]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	0f1b      	lsrs	r3, r3, #28
 8007f5a:	f003 030f 	and.w	r3, r3, #15
 8007f5e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007f60:	4a65      	ldr	r2, [pc, #404]	; (80080f8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8007f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f68:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d110      	bne.n	8007f92 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007f74:	e00d      	b.n	8007f92 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007f76:	4b5f      	ldr	r3, [pc, #380]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	f003 030c 	and.w	r3, r3, #12
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d102      	bne.n	8007f88 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007f82:	4b5e      	ldr	r3, [pc, #376]	; (80080fc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007f84:	623b      	str	r3, [r7, #32]
 8007f86:	e004      	b.n	8007f92 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	2b08      	cmp	r3, #8
 8007f8c:	d101      	bne.n	8007f92 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f8e:	4b5b      	ldr	r3, [pc, #364]	; (80080fc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007f90:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	2b0c      	cmp	r3, #12
 8007f96:	f040 80a5 	bne.w	80080e4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007f9a:	4b56      	ldr	r3, [pc, #344]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9e:	f003 0303 	and.w	r3, r3, #3
 8007fa2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007fa4:	4b53      	ldr	r3, [pc, #332]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa8:	0a1b      	lsrs	r3, r3, #8
 8007faa:	f003 030f 	and.w	r3, r3, #15
 8007fae:	3301      	adds	r3, #1
 8007fb0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007fb2:	4b50      	ldr	r3, [pc, #320]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb6:	091b      	lsrs	r3, r3, #4
 8007fb8:	f003 0301 	and.w	r3, r3, #1
 8007fbc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007fbe:	4b4d      	ldr	r3, [pc, #308]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc2:	08db      	lsrs	r3, r3, #3
 8007fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	fb02 f303 	mul.w	r3, r2, r3
 8007fce:	ee07 3a90 	vmov	s15, r3
 8007fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d003      	beq.n	8007fe8 <HAL_RCC_GetSysClockFreq+0xe4>
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d022      	beq.n	800802c <HAL_RCC_GetSysClockFreq+0x128>
 8007fe6:	e043      	b.n	8008070 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	ee07 3a90 	vmov	s15, r3
 8007fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff2:	eddf 6a43 	vldr	s13, [pc, #268]	; 8008100 <HAL_RCC_GetSysClockFreq+0x1fc>
 8007ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ffa:	4b3e      	ldr	r3, [pc, #248]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008002:	ee07 3a90 	vmov	s15, r3
 8008006:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800800a:	ed97 6a01 	vldr	s12, [r7, #4]
 800800e:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8008104 <HAL_RCC_GetSysClockFreq+0x200>
 8008012:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008016:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800801a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800801e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800802a:	e046      	b.n	80080ba <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	ee07 3a90 	vmov	s15, r3
 8008032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008036:	eddf 6a32 	vldr	s13, [pc, #200]	; 8008100 <HAL_RCC_GetSysClockFreq+0x1fc>
 800803a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800803e:	4b2d      	ldr	r3, [pc, #180]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008046:	ee07 3a90 	vmov	s15, r3
 800804a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800804e:	ed97 6a01 	vldr	s12, [r7, #4]
 8008052:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8008104 <HAL_RCC_GetSysClockFreq+0x200>
 8008056:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800805a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800805e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008062:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800806a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800806e:	e024      	b.n	80080ba <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	ee07 3a90 	vmov	s15, r3
 8008076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	ee07 3a90 	vmov	s15, r3
 8008080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008088:	4b1a      	ldr	r3, [pc, #104]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800808a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800808c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008090:	ee07 3a90 	vmov	s15, r3
 8008094:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008098:	ed97 6a01 	vldr	s12, [r7, #4]
 800809c:	eddf 5a19 	vldr	s11, [pc, #100]	; 8008104 <HAL_RCC_GetSysClockFreq+0x200>
 80080a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80080a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80080a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80080b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080b8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80080ba:	4b0e      	ldr	r3, [pc, #56]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80080bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080be:	0e1b      	lsrs	r3, r3, #24
 80080c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c4:	3301      	adds	r3, #1
 80080c6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	ee07 3a90 	vmov	s15, r3
 80080ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80080d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80080d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080de:	ee17 3a90 	vmov	r3, s15
 80080e2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80080e4:	6a3b      	ldr	r3, [r7, #32]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	372c      	adds	r7, #44	; 0x2c
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	46020c00 	.word	0x46020c00
 80080f8:	0800ce60 	.word	0x0800ce60
 80080fc:	00f42400 	.word	0x00f42400
 8008100:	4b742400 	.word	0x4b742400
 8008104:	46000000 	.word	0x46000000

08008108 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800810c:	f7ff fefa 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 8008110:	4602      	mov	r2, r0
 8008112:	4b07      	ldr	r3, [pc, #28]	; (8008130 <HAL_RCC_GetHCLKFreq+0x28>)
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	f003 030f 	and.w	r3, r3, #15
 800811a:	4906      	ldr	r1, [pc, #24]	; (8008134 <HAL_RCC_GetHCLKFreq+0x2c>)
 800811c:	5ccb      	ldrb	r3, [r1, r3]
 800811e:	fa22 f303 	lsr.w	r3, r2, r3
 8008122:	4a05      	ldr	r2, [pc, #20]	; (8008138 <HAL_RCC_GetHCLKFreq+0x30>)
 8008124:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8008126:	4b04      	ldr	r3, [pc, #16]	; (8008138 <HAL_RCC_GetHCLKFreq+0x30>)
 8008128:	681b      	ldr	r3, [r3, #0]
}
 800812a:	4618      	mov	r0, r3
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	46020c00 	.word	0x46020c00
 8008134:	0800ce48 	.word	0x0800ce48
 8008138:	20000d00 	.word	0x20000d00

0800813c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8008140:	f7ff ffe2 	bl	8008108 <HAL_RCC_GetHCLKFreq>
 8008144:	4602      	mov	r2, r0
 8008146:	4b05      	ldr	r3, [pc, #20]	; (800815c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	091b      	lsrs	r3, r3, #4
 800814c:	f003 0307 	and.w	r3, r3, #7
 8008150:	4903      	ldr	r1, [pc, #12]	; (8008160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008152:	5ccb      	ldrb	r3, [r1, r3]
 8008154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008158:	4618      	mov	r0, r3
 800815a:	bd80      	pop	{r7, pc}
 800815c:	46020c00 	.word	0x46020c00
 8008160:	0800ce58 	.word	0x0800ce58

08008164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8008168:	f7ff ffce 	bl	8008108 <HAL_RCC_GetHCLKFreq>
 800816c:	4602      	mov	r2, r0
 800816e:	4b05      	ldr	r3, [pc, #20]	; (8008184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	0a1b      	lsrs	r3, r3, #8
 8008174:	f003 0307 	and.w	r3, r3, #7
 8008178:	4903      	ldr	r1, [pc, #12]	; (8008188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800817a:	5ccb      	ldrb	r3, [r1, r3]
 800817c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008180:	4618      	mov	r0, r3
 8008182:	bd80      	pop	{r7, pc}
 8008184:	46020c00 	.word	0x46020c00
 8008188:	0800ce58 	.word	0x0800ce58

0800818c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8008190:	f7ff ffba 	bl	8008108 <HAL_RCC_GetHCLKFreq>
 8008194:	4602      	mov	r2, r0
 8008196:	4b05      	ldr	r3, [pc, #20]	; (80081ac <HAL_RCC_GetPCLK3Freq+0x20>)
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	091b      	lsrs	r3, r3, #4
 800819c:	f003 0307 	and.w	r3, r3, #7
 80081a0:	4903      	ldr	r1, [pc, #12]	; (80081b0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80081a2:	5ccb      	ldrb	r3, [r1, r3]
 80081a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	46020c00 	.word	0x46020c00
 80081b0:	0800ce58 	.word	0x0800ce58

080081b4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	221f      	movs	r2, #31
 80081c2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80081c4:	4b15      	ldr	r3, [pc, #84]	; (800821c <HAL_RCC_GetClockConfig+0x68>)
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	f003 0203 	and.w	r2, r3, #3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80081d0:	4b12      	ldr	r3, [pc, #72]	; (800821c <HAL_RCC_GetClockConfig+0x68>)
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	f003 020f 	and.w	r2, r3, #15
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80081dc:	4b0f      	ldr	r3, [pc, #60]	; (800821c <HAL_RCC_GetClockConfig+0x68>)
 80081de:	6a1b      	ldr	r3, [r3, #32]
 80081e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80081e8:	4b0c      	ldr	r3, [pc, #48]	; (800821c <HAL_RCC_GetClockConfig+0x68>)
 80081ea:	6a1b      	ldr	r3, [r3, #32]
 80081ec:	091b      	lsrs	r3, r3, #4
 80081ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80081f6:	4b09      	ldr	r3, [pc, #36]	; (800821c <HAL_RCC_GetClockConfig+0x68>)
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008202:	4b07      	ldr	r3, [pc, #28]	; (8008220 <HAL_RCC_GetClockConfig+0x6c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 020f 	and.w	r2, r3, #15
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	601a      	str	r2, [r3, #0]
}
 800820e:	bf00      	nop
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	46020c00 	.word	0x46020c00
 8008220:	40022000 	.word	0x40022000

08008224 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800822c:	4b3e      	ldr	r3, [pc, #248]	; (8008328 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800822e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008232:	f003 0304 	and.w	r3, r3, #4
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800823a:	f7fe fd27 	bl	8006c8c <HAL_PWREx_GetVoltageRange>
 800823e:	6178      	str	r0, [r7, #20]
 8008240:	e019      	b.n	8008276 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008242:	4b39      	ldr	r3, [pc, #228]	; (8008328 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008248:	4a37      	ldr	r2, [pc, #220]	; (8008328 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800824a:	f043 0304 	orr.w	r3, r3, #4
 800824e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008252:	4b35      	ldr	r3, [pc, #212]	; (8008328 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008258:	f003 0304 	and.w	r3, r3, #4
 800825c:	60fb      	str	r3, [r7, #12]
 800825e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008260:	f7fe fd14 	bl	8006c8c <HAL_PWREx_GetVoltageRange>
 8008264:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008266:	4b30      	ldr	r3, [pc, #192]	; (8008328 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800826c:	4a2e      	ldr	r2, [pc, #184]	; (8008328 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800826e:	f023 0304 	bic.w	r3, r3, #4
 8008272:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800827c:	d003      	beq.n	8008286 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008284:	d109      	bne.n	800829a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800828c:	d202      	bcs.n	8008294 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800828e:	2301      	movs	r3, #1
 8008290:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008292:	e033      	b.n	80082fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8008294:	2300      	movs	r3, #0
 8008296:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008298:	e030      	b.n	80082fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082a0:	d208      	bcs.n	80082b4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082a8:	d102      	bne.n	80082b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80082aa:	2303      	movs	r3, #3
 80082ac:	613b      	str	r3, [r7, #16]
 80082ae:	e025      	b.n	80082fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e035      	b.n	8008320 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082ba:	d90f      	bls.n	80082dc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d109      	bne.n	80082d6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80082c8:	d902      	bls.n	80082d0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80082ca:	2300      	movs	r3, #0
 80082cc:	613b      	str	r3, [r7, #16]
 80082ce:	e015      	b.n	80082fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80082d0:	2301      	movs	r3, #1
 80082d2:	613b      	str	r3, [r7, #16]
 80082d4:	e012      	b.n	80082fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80082d6:	2300      	movs	r3, #0
 80082d8:	613b      	str	r3, [r7, #16]
 80082da:	e00f      	b.n	80082fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082e2:	d109      	bne.n	80082f8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ea:	d102      	bne.n	80082f2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80082ec:	2301      	movs	r3, #1
 80082ee:	613b      	str	r3, [r7, #16]
 80082f0:	e004      	b.n	80082fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80082f2:	2302      	movs	r3, #2
 80082f4:	613b      	str	r3, [r7, #16]
 80082f6:	e001      	b.n	80082fc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80082f8:	2301      	movs	r3, #1
 80082fa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80082fc:	4b0b      	ldr	r3, [pc, #44]	; (800832c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f023 020f 	bic.w	r2, r3, #15
 8008304:	4909      	ldr	r1, [pc, #36]	; (800832c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	4313      	orrs	r3, r2
 800830a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800830c:	4b07      	ldr	r3, [pc, #28]	; (800832c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 030f 	and.w	r3, r3, #15
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	429a      	cmp	r2, r3
 8008318:	d001      	beq.n	800831e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e000      	b.n	8008320 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3718      	adds	r7, #24
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	46020c00 	.word	0x46020c00
 800832c:	40022000 	.word	0x40022000

08008330 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008334:	b0c8      	sub	sp, #288	; 0x120
 8008336:	af00      	add	r7, sp, #0
 8008338:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800833c:	2300      	movs	r3, #0
 800833e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008342:	2300      	movs	r3, #0
 8008344:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	f002 0401 	and.w	r4, r2, #1
 8008354:	2500      	movs	r5, #0
 8008356:	ea54 0305 	orrs.w	r3, r4, r5
 800835a:	d00b      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800835c:	4bd5      	ldr	r3, [pc, #852]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800835e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008362:	f023 0103 	bic.w	r1, r3, #3
 8008366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800836a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800836c:	4ad1      	ldr	r2, [pc, #836]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800836e:	430b      	orrs	r3, r1
 8008370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837c:	f002 0802 	and.w	r8, r2, #2
 8008380:	f04f 0900 	mov.w	r9, #0
 8008384:	ea58 0309 	orrs.w	r3, r8, r9
 8008388:	d00b      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800838a:	4bca      	ldr	r3, [pc, #808]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800838c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008390:	f023 010c 	bic.w	r1, r3, #12
 8008394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839a:	4ac6      	ldr	r2, [pc, #792]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800839c:	430b      	orrs	r3, r1
 800839e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80083a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083aa:	f002 0a04 	and.w	sl, r2, #4
 80083ae:	f04f 0b00 	mov.w	fp, #0
 80083b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80083b6:	d00b      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80083b8:	4bbe      	ldr	r3, [pc, #760]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80083ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083be:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80083c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c8:	4aba      	ldr	r2, [pc, #744]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80083ca:	430b      	orrs	r3, r1
 80083cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80083d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d8:	f002 0308 	and.w	r3, r2, #8
 80083dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083e0:	2300      	movs	r3, #0
 80083e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80083e6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80083ea:	460b      	mov	r3, r1
 80083ec:	4313      	orrs	r3, r2
 80083ee:	d00b      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80083f0:	4bb0      	ldr	r3, [pc, #704]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80083f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80083fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008400:	4aac      	ldr	r2, [pc, #688]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008402:	430b      	orrs	r3, r1
 8008404:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	f002 0310 	and.w	r3, r2, #16
 8008414:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008418:	2300      	movs	r3, #0
 800841a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800841e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008422:	460b      	mov	r3, r1
 8008424:	4313      	orrs	r3, r2
 8008426:	d00b      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8008428:	4ba2      	ldr	r3, [pc, #648]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800842a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800842e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008438:	4a9e      	ldr	r2, [pc, #632]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800843a:	430b      	orrs	r3, r1
 800843c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008448:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800844c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008450:	2300      	movs	r3, #0
 8008452:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008456:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800845a:	460b      	mov	r3, r1
 800845c:	4313      	orrs	r3, r2
 800845e:	d00b      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8008460:	4b94      	ldr	r3, [pc, #592]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008462:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008466:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800846a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800846e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008470:	4a90      	ldr	r2, [pc, #576]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008472:	430b      	orrs	r3, r1
 8008474:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008480:	f002 0320 	and.w	r3, r2, #32
 8008484:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008488:	2300      	movs	r3, #0
 800848a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800848e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008492:	460b      	mov	r3, r1
 8008494:	4313      	orrs	r3, r2
 8008496:	d00b      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008498:	4b86      	ldr	r3, [pc, #536]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800849a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800849e:	f023 0107 	bic.w	r1, r3, #7
 80084a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084a8:	4a82      	ldr	r2, [pc, #520]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80084aa:	430b      	orrs	r3, r1
 80084ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80084bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084c0:	2300      	movs	r3, #0
 80084c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084c6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80084ca:	460b      	mov	r3, r1
 80084cc:	4313      	orrs	r3, r2
 80084ce:	d00b      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80084d0:	4b78      	ldr	r3, [pc, #480]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80084d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084d6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80084da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084e0:	4a74      	ldr	r2, [pc, #464]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80084e2:	430b      	orrs	r3, r1
 80084e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80084f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80084f8:	2300      	movs	r3, #0
 80084fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80084fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008502:	460b      	mov	r3, r1
 8008504:	4313      	orrs	r3, r2
 8008506:	d00b      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8008508:	4b6a      	ldr	r3, [pc, #424]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800850a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800850e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008518:	4a66      	ldr	r2, [pc, #408]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800851a:	430b      	orrs	r3, r1
 800851c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008528:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800852c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008530:	2300      	movs	r3, #0
 8008532:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008536:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800853a:	460b      	mov	r3, r1
 800853c:	4313      	orrs	r3, r2
 800853e:	d00b      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8008540:	4b5c      	ldr	r3, [pc, #368]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008542:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008546:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800854a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800854e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008550:	4a58      	ldr	r2, [pc, #352]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008552:	430b      	orrs	r3, r1
 8008554:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008564:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008568:	2300      	movs	r3, #0
 800856a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800856e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008572:	460b      	mov	r3, r1
 8008574:	4313      	orrs	r3, r2
 8008576:	d00b      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008578:	4b4e      	ldr	r3, [pc, #312]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800857a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800857e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8008582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008588:	4a4a      	ldr	r2, [pc, #296]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800858a:	430b      	orrs	r3, r1
 800858c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8008590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008598:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800859c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085a0:	2300      	movs	r3, #0
 80085a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80085aa:	460b      	mov	r3, r1
 80085ac:	4313      	orrs	r3, r2
 80085ae:	d00b      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 80085b0:	4b40      	ldr	r3, [pc, #256]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80085b6:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 80085ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085c0:	4a3c      	ldr	r2, [pc, #240]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085c2:	430b      	orrs	r3, r1
 80085c4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 80085c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80085d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085d8:	2300      	movs	r3, #0
 80085da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80085de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80085e2:	460b      	mov	r3, r1
 80085e4:	4313      	orrs	r3, r2
 80085e6:	d00c      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 80085e8:	4b32      	ldr	r3, [pc, #200]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80085ee:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80085f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085fa:	4a2e      	ldr	r2, [pc, #184]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085fc:	430b      	orrs	r3, r1
 80085fe:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860a:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800860e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008612:	2300      	movs	r3, #0
 8008614:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008618:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800861c:	460b      	mov	r3, r1
 800861e:	4313      	orrs	r3, r2
 8008620:	d00c      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8008622:	4b24      	ldr	r3, [pc, #144]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008628:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800862c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008634:	4a1f      	ldr	r2, [pc, #124]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008636:	430b      	orrs	r3, r1
 8008638:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800863c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008644:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800864c:	2300      	movs	r3, #0
 800864e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008652:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008656:	460b      	mov	r3, r1
 8008658:	4313      	orrs	r3, r2
 800865a:	d00c      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800865c:	4b15      	ldr	r3, [pc, #84]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800865e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008662:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8008666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800866a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800866e:	4a11      	ldr	r2, [pc, #68]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008670:	430b      	orrs	r3, r1
 8008672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8008676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008686:	2300      	movs	r3, #0
 8008688:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800868c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008690:	460b      	mov	r3, r1
 8008692:	4313      	orrs	r3, r2
 8008694:	d010      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8008696:	4b07      	ldr	r3, [pc, #28]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800869c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80086a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086a8:	4a02      	ldr	r2, [pc, #8]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80086aa:	430b      	orrs	r3, r1
 80086ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80086b0:	e002      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80086b2:	bf00      	nop
 80086b4:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80086b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c0:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80086c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80086c8:	2300      	movs	r3, #0
 80086ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80086d2:	460b      	mov	r3, r1
 80086d4:	4313      	orrs	r3, r2
 80086d6:	d04c      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80086d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086e0:	2b80      	cmp	r3, #128	; 0x80
 80086e2:	d02d      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80086e4:	2b80      	cmp	r3, #128	; 0x80
 80086e6:	d827      	bhi.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80086e8:	2b60      	cmp	r3, #96	; 0x60
 80086ea:	d02b      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80086ec:	2b60      	cmp	r3, #96	; 0x60
 80086ee:	d823      	bhi.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80086f0:	2b40      	cmp	r3, #64	; 0x40
 80086f2:	d006      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80086f4:	2b40      	cmp	r3, #64	; 0x40
 80086f6:	d81f      	bhi.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d009      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80086fc:	2b20      	cmp	r3, #32
 80086fe:	d011      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008700:	e01a      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008702:	4bc0      	ldr	r3, [pc, #768]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008706:	4abf      	ldr	r2, [pc, #764]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800870c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800870e:	e01a      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008714:	3308      	adds	r3, #8
 8008716:	4618      	mov	r0, r3
 8008718:	f002 fd2a 	bl	800b170 <RCCEx_PLL2_Config>
 800871c:	4603      	mov	r3, r0
 800871e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008722:	e010      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008728:	332c      	adds	r3, #44	; 0x2c
 800872a:	4618      	mov	r0, r3
 800872c:	f002 fdb8 	bl	800b2a0 <RCCEx_PLL3_Config>
 8008730:	4603      	mov	r3, r0
 8008732:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008736:	e006      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800873e:	e002      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8008740:	bf00      	nop
 8008742:	e000      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8008744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008746:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10d      	bne.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800874e:	4bad      	ldr	r3, [pc, #692]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008750:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008754:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8008758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800875c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008760:	4aa8      	ldr	r2, [pc, #672]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008762:	430b      	orrs	r3, r1
 8008764:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008768:	e003      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800876a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800876e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800877e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008782:	2300      	movs	r3, #0
 8008784:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008788:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800878c:	460b      	mov	r3, r1
 800878e:	4313      	orrs	r3, r2
 8008790:	d053      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8008792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008796:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800879a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800879e:	d033      	beq.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 80087a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087a4:	d82c      	bhi.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80087a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087aa:	d02f      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 80087ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087b0:	d826      	bhi.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80087b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087b6:	d008      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x49a>
 80087b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087bc:	d820      	bhi.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00a      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80087c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c6:	d011      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80087c8:	e01a      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80087ca:	4b8e      	ldr	r3, [pc, #568]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80087cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ce:	4a8d      	ldr	r2, [pc, #564]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80087d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087d4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80087d6:	e01a      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80087d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087dc:	3308      	adds	r3, #8
 80087de:	4618      	mov	r0, r3
 80087e0:	f002 fcc6 	bl	800b170 <RCCEx_PLL2_Config>
 80087e4:	4603      	mov	r3, r0
 80087e6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80087ea:	e010      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80087ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087f0:	332c      	adds	r3, #44	; 0x2c
 80087f2:	4618      	mov	r0, r3
 80087f4:	f002 fd54 	bl	800b2a0 <RCCEx_PLL3_Config>
 80087f8:	4603      	mov	r3, r0
 80087fa:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80087fe:	e006      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008806:	e002      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8008808:	bf00      	nop
 800880a:	e000      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800880c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800880e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10d      	bne.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8008816:	4b7b      	ldr	r3, [pc, #492]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008818:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800881c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8008820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008824:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008828:	4a76      	ldr	r2, [pc, #472]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800882a:	430b      	orrs	r3, r1
 800882c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008830:	e003      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008832:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008836:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800883a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008842:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008846:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800884a:	2300      	movs	r3, #0
 800884c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008850:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008854:	460b      	mov	r3, r1
 8008856:	4313      	orrs	r3, r2
 8008858:	d046      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800885a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800885e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008862:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008866:	d028      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008868:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800886c:	d821      	bhi.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800886e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008872:	d022      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008878:	d81b      	bhi.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800887a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800887e:	d01c      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008880:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008884:	d815      	bhi.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800888a:	d008      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800888c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008890:	d80f      	bhi.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008892:	2b00      	cmp	r3, #0
 8008894:	d011      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800889a:	d00e      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800889c:	e009      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800889e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088a2:	3308      	adds	r3, #8
 80088a4:	4618      	mov	r0, r3
 80088a6:	f002 fc63 	bl	800b170 <RCCEx_PLL2_Config>
 80088aa:	4603      	mov	r3, r0
 80088ac:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80088b0:	e004      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80088b8:	e000      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 80088ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088bc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10d      	bne.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80088c4:	4b4f      	ldr	r3, [pc, #316]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80088c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80088ca:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80088ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80088d6:	4a4b      	ldr	r2, [pc, #300]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80088d8:	430b      	orrs	r3, r1
 80088da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80088de:	e003      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80088e4:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80088e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f0:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80088f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088f8:	2300      	movs	r3, #0
 80088fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008902:	460b      	mov	r3, r1
 8008904:	4313      	orrs	r3, r2
 8008906:	d03f      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8008908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800890c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008910:	2b04      	cmp	r3, #4
 8008912:	d81e      	bhi.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8008914:	a201      	add	r2, pc, #4	; (adr r2, 800891c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8008916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891a:	bf00      	nop
 800891c:	0800895b 	.word	0x0800895b
 8008920:	08008931 	.word	0x08008931
 8008924:	0800893f 	.word	0x0800893f
 8008928:	0800895b 	.word	0x0800895b
 800892c:	0800895b 	.word	0x0800895b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008930:	4b34      	ldr	r3, [pc, #208]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008934:	4a33      	ldr	r2, [pc, #204]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800893a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800893c:	e00e      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800893e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008942:	332c      	adds	r3, #44	; 0x2c
 8008944:	4618      	mov	r0, r3
 8008946:	f002 fcab 	bl	800b2a0 <RCCEx_PLL3_Config>
 800894a:	4603      	mov	r3, r0
 800894c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008950:	e004      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008958:	e000      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800895a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800895c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10d      	bne.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8008964:	4b27      	ldr	r3, [pc, #156]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008966:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800896a:	f023 0107 	bic.w	r1, r3, #7
 800896e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008976:	4a23      	ldr	r2, [pc, #140]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008978:	430b      	orrs	r3, r1
 800897a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800897e:	e003      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008980:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008984:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8008988:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008994:	67bb      	str	r3, [r7, #120]	; 0x78
 8008996:	2300      	movs	r3, #0
 8008998:	67fb      	str	r3, [r7, #124]	; 0x7c
 800899a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800899e:	460b      	mov	r3, r1
 80089a0:	4313      	orrs	r3, r2
 80089a2:	d04c      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80089a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80089b0:	d02a      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80089b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80089b6:	d821      	bhi.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80089b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80089bc:	d026      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 80089be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80089c2:	d81b      	bhi.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80089c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089c8:	d00e      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80089ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089ce:	d815      	bhi.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d01d      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 80089d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089d8:	d110      	bne.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80089da:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80089dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089de:	4a09      	ldr	r2, [pc, #36]	; (8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80089e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089e4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80089e6:	e014      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80089e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089ec:	332c      	adds	r3, #44	; 0x2c
 80089ee:	4618      	mov	r0, r3
 80089f0:	f002 fc56 	bl	800b2a0 <RCCEx_PLL3_Config>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 80089fa:	e00a      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008a02:	e006      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008a04:	46020c00 	.word	0x46020c00
        break;
 8008a08:	bf00      	nop
 8008a0a:	e002      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8008a0c:	bf00      	nop
 8008a0e:	e000      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8008a10:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008a12:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10d      	bne.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8008a1a:	4baf      	ldr	r3, [pc, #700]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008a1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008a20:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a2c:	4aaa      	ldr	r2, [pc, #680]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008a2e:	430b      	orrs	r3, r1
 8008a30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008a34:	e003      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a36:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008a3a:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008a4a:	673b      	str	r3, [r7, #112]	; 0x70
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	677b      	str	r3, [r7, #116]	; 0x74
 8008a50:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008a54:	460b      	mov	r3, r1
 8008a56:	4313      	orrs	r3, r2
 8008a58:	f000 80b5 	beq.w	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a62:	4b9d      	ldr	r3, [pc, #628]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a68:	f003 0304 	and.w	r3, r3, #4
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d113      	bne.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a70:	4b99      	ldr	r3, [pc, #612]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a76:	4a98      	ldr	r2, [pc, #608]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008a78:	f043 0304 	orr.w	r3, r3, #4
 8008a7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008a80:	4b95      	ldr	r3, [pc, #596]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a86:	f003 0304 	and.w	r3, r3, #4
 8008a8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008a8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
      pwrclkchanged = SET;
 8008a92:	2301      	movs	r3, #1
 8008a94:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008a98:	4b90      	ldr	r3, [pc, #576]	; (8008cdc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9c:	4a8f      	ldr	r2, [pc, #572]	; (8008cdc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008a9e:	f043 0301 	orr.w	r3, r3, #1
 8008aa2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008aa4:	f7fa faa6 	bl	8002ff4 <HAL_GetTick>
 8008aa8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008aac:	e00b      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008aae:	f7fa faa1 	bl	8002ff4 <HAL_GetTick>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d903      	bls.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008ac4:	e005      	b.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008ac6:	4b85      	ldr	r3, [pc, #532]	; (8008cdc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0ed      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 8008ad2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d165      	bne.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008ada:	4b7f      	ldr	r3, [pc, #508]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ae4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8008ae8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d023      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8008af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008af4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8008af8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d01b      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008b00:	4b75      	ldr	r3, [pc, #468]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b0e:	4b72      	ldr	r3, [pc, #456]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b14:	4a70      	ldr	r2, [pc, #448]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b1e:	4b6e      	ldr	r3, [pc, #440]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b24:	4a6c      	ldr	r2, [pc, #432]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008b2e:	4a6a      	ldr	r2, [pc, #424]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008b34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008b38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d019      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b44:	f7fa fa56 	bl	8002ff4 <HAL_GetTick>
 8008b48:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b4c:	e00d      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b4e:	f7fa fa51 	bl	8002ff4 <HAL_GetTick>
 8008b52:	4602      	mov	r2, r0
 8008b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b58:	1ad2      	subs	r2, r2, r3
 8008b5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d903      	bls.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
            break;
 8008b68:	e006      	b.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b6a:	4b5b      	ldr	r3, [pc, #364]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b70:	f003 0302 	and.w	r3, r3, #2
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d0ea      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 8008b78:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10d      	bne.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8008b80:	4b55      	ldr	r3, [pc, #340]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008b86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b8e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8008b92:	4a51      	ldr	r2, [pc, #324]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b94:	430b      	orrs	r3, r1
 8008b96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008b9a:	e008      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008b9c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008ba0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 8008ba4:	e003      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008baa:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008bae:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d107      	bne.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bb6:	4b48      	ldr	r3, [pc, #288]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bbc:	4a46      	ldr	r2, [pc, #280]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008bbe:	f023 0304 	bic.w	r3, r3, #4
 8008bc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8008bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bce:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008bd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bd8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008bdc:	460b      	mov	r3, r1
 8008bde:	4313      	orrs	r3, r2
 8008be0:	d042      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8008be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008be6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008bea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008bee:	d022      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x906>
 8008bf0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008bf4:	d81b      	bhi.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8008bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bfa:	d011      	beq.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8008bfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c00:	d815      	bhi.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d019      	beq.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8008c06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c0a:	d110      	bne.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c10:	3308      	adds	r3, #8
 8008c12:	4618      	mov	r0, r3
 8008c14:	f002 faac 	bl	800b170 <RCCEx_PLL2_Config>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008c1e:	e00d      	b.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c20:	4b2d      	ldr	r3, [pc, #180]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c24:	4a2c      	ldr	r2, [pc, #176]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c2a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8008c2c:	e006      	b.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008c34:	e002      	b.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8008c36:	bf00      	nop
 8008c38:	e000      	b.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8008c3a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008c3c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10d      	bne.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8008c44:	4b24      	ldr	r3, [pc, #144]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c4a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c56:	4a20      	ldr	r2, [pc, #128]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008c58:	430b      	orrs	r3, r1
 8008c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008c5e:	e003      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c60:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008c64:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c70:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008c74:	663b      	str	r3, [r7, #96]	; 0x60
 8008c76:	2300      	movs	r3, #0
 8008c78:	667b      	str	r3, [r7, #100]	; 0x64
 8008c7a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4313      	orrs	r3, r2
 8008c82:	d031      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c90:	d00b      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8008c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c96:	d804      	bhi.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d008      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8008c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ca0:	d007      	beq.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008ca8:	e004      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8008caa:	bf00      	nop
 8008cac:	e002      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8008cae:	bf00      	nop
 8008cb0:	e000      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8008cb2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008cb4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d111      	bne.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008cbc:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008cbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008cc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008cce:	4a02      	ldr	r2, [pc, #8]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008cd0:	430b      	orrs	r3, r1
 8008cd2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008cd6:	e007      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8008cd8:	46020c00 	.word	0x46020c00
 8008cdc:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008ce4:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8008ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008cf4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cfa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4313      	orrs	r3, r2
 8008d02:	d00c      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8008d04:	4bb2      	ldr	r3, [pc, #712]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d0a:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8008d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d16:	4aae      	ldr	r2, [pc, #696]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d18:	430b      	orrs	r3, r1
 8008d1a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8008d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008d2a:	653b      	str	r3, [r7, #80]	; 0x50
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	657b      	str	r3, [r7, #84]	; 0x54
 8008d30:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008d34:	460b      	mov	r3, r1
 8008d36:	4313      	orrs	r3, r2
 8008d38:	d019      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8008d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d46:	d105      	bne.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008d48:	4ba1      	ldr	r3, [pc, #644]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4c:	4aa0      	ldr	r2, [pc, #640]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d52:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8008d54:	4b9e      	ldr	r3, [pc, #632]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d5a:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d66:	4a9a      	ldr	r2, [pc, #616]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d68:	430b      	orrs	r3, r1
 8008d6a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8008d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d80:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008d84:	460b      	mov	r3, r1
 8008d86:	4313      	orrs	r3, r2
 8008d88:	d00c      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008d8a:	4b91      	ldr	r3, [pc, #580]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d90:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d98:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008d9c:	4a8c      	ldr	r2, [pc, #560]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d9e:	430b      	orrs	r3, r1
 8008da0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dac:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008db0:	643b      	str	r3, [r7, #64]	; 0x40
 8008db2:	2300      	movs	r3, #0
 8008db4:	647b      	str	r3, [r7, #68]	; 0x44
 8008db6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	d00c      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008dc0:	4b83      	ldr	r3, [pc, #524]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008dc6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008dd2:	4a7f      	ldr	r2, [pc, #508]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008dd4:	430b      	orrs	r3, r1
 8008dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de2:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008de6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008de8:	2300      	movs	r3, #0
 8008dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008df0:	460b      	mov	r3, r1
 8008df2:	4313      	orrs	r3, r2
 8008df4:	d00c      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008df6:	4b76      	ldr	r3, [pc, #472]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008dfc:	f023 0118 	bic.w	r1, r3, #24
 8008e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e04:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8008e08:	4a71      	ldr	r2, [pc, #452]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e0a:	430b      	orrs	r3, r1
 8008e0c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e18:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8008e1c:	633b      	str	r3, [r7, #48]	; 0x30
 8008e1e:	2300      	movs	r3, #0
 8008e20:	637b      	str	r3, [r7, #52]	; 0x34
 8008e22:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008e26:	460b      	mov	r3, r1
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	d032      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8008e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e30:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008e34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e38:	d105      	bne.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e3a:	4b65      	ldr	r3, [pc, #404]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3e:	4a64      	ldr	r2, [pc, #400]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e44:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8008e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e4a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008e4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e52:	d108      	bne.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e58:	3308      	adds	r3, #8
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f002 f988 	bl	800b170 <RCCEx_PLL2_Config>
 8008e60:	4603      	mov	r3, r0
 8008e62:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }
    if (ret == HAL_OK)
 8008e66:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10d      	bne.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008e6e:	4b58      	ldr	r3, [pc, #352]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008e74:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e7c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008e80:	4a53      	ldr	r2, [pc, #332]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e82:	430b      	orrs	r3, r1
 8008e84:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008e88:	e003      	b.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e8a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008e8e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8008e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ea4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	d04a      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8008eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008eb2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008eb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008eba:	d01e      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8008ebc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008ec0:	d825      	bhi.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8008ec2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ec6:	d00e      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 8008ec8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ecc:	d81f      	bhi.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d021      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8008ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ed6:	d11a      	bne.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ed8:	4b3d      	ldr	r3, [pc, #244]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008edc:	4a3c      	ldr	r2, [pc, #240]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ee2:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8008ee4:	e018      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008eea:	3308      	adds	r3, #8
 8008eec:	4618      	mov	r0, r3
 8008eee:	f002 f93f 	bl	800b170 <RCCEx_PLL2_Config>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8008ef8:	e00e      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008efe:	332c      	adds	r3, #44	; 0x2c
 8008f00:	4618      	mov	r0, r3
 8008f02:	f002 f9cd 	bl	800b2a0 <RCCEx_PLL3_Config>
 8008f06:	4603      	mov	r3, r0
 8008f08:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8008f0c:	e004      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008f14:	e000      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 8008f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f18:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10d      	bne.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8008f20:	4b2b      	ldr	r3, [pc, #172]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008f26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f2e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008f32:	4927      	ldr	r1, [pc, #156]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f34:	4313      	orrs	r3, r2
 8008f36:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8008f3a:	e003      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f3c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008f40:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8008f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8008f50:	623b      	str	r3, [r7, #32]
 8008f52:	2300      	movs	r3, #0
 8008f54:	627b      	str	r3, [r7, #36]	; 0x24
 8008f56:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	d03d      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8008f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f6c:	d00e      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8008f6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f72:	d815      	bhi.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d017      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f7c:	d110      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f7e:	4b14      	ldr	r3, [pc, #80]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f82:	4a13      	ldr	r2, [pc, #76]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f88:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008f8a:	e00e      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f90:	3308      	adds	r3, #8
 8008f92:	4618      	mov	r0, r3
 8008f94:	f002 f8ec 	bl	800b170 <RCCEx_PLL2_Config>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008f9e:	e004      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8008fa6:	e000      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008fa8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008faa:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d110      	bne.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8008fb2:	4b07      	ldr	r3, [pc, #28]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fb8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fc4:	4902      	ldr	r1, [pc, #8]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8008fcc:	e006      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008fce:	bf00      	nop
 8008fd0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8008fd8:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008fe8:	61bb      	str	r3, [r7, #24]
 8008fea:	2300      	movs	r3, #0
 8008fec:	61fb      	str	r3, [r7, #28]
 8008fee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	d00c      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8008ff8:	4b68      	ldr	r3, [pc, #416]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8008ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008ffe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009006:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800900a:	4964      	ldr	r1, [pc, #400]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800900c:	4313      	orrs	r3, r2
 800900e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901a:	2100      	movs	r1, #0
 800901c:	6139      	str	r1, [r7, #16]
 800901e:	f003 0302 	and.w	r3, r3, #2
 8009022:	617b      	str	r3, [r7, #20]
 8009024:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009028:	460b      	mov	r3, r1
 800902a:	4313      	orrs	r3, r2
 800902c:	d036      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800902e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009032:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00c      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800903a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800903e:	d113      	bne.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009044:	3308      	adds	r3, #8
 8009046:	4618      	mov	r0, r3
 8009048:	f002 f892 	bl	800b170 <RCCEx_PLL2_Config>
 800904c:	4603      	mov	r3, r0
 800904e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8009052:	e00d      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009058:	332c      	adds	r3, #44	; 0x2c
 800905a:	4618      	mov	r0, r3
 800905c:	f002 f920 	bl	800b2a0 <RCCEx_PLL3_Config>
 8009060:	4603      	mov	r3, r0
 8009062:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8009066:	e003      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800906e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009070:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10d      	bne.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 8009078:	4b48      	ldr	r3, [pc, #288]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800907a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800907e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009086:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800908a:	4944      	ldr	r1, [pc, #272]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800908c:	4313      	orrs	r3, r2
 800908e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009092:	e003      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009094:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009098:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800909c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a4:	2100      	movs	r1, #0
 80090a6:	60b9      	str	r1, [r7, #8]
 80090a8:	f003 0304 	and.w	r3, r3, #4
 80090ac:	60fb      	str	r3, [r7, #12]
 80090ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80090b2:	460b      	mov	r3, r1
 80090b4:	4313      	orrs	r3, r2
 80090b6:	d024      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 80090b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d108      	bne.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80090c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090c8:	332c      	adds	r3, #44	; 0x2c
 80090ca:	4618      	mov	r0, r3
 80090cc:	f002 f8e8 	bl	800b2a0 <RCCEx_PLL3_Config>
 80090d0:	4603      	mov	r3, r0
 80090d2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }

    if (ret == HAL_OK)
 80090d6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10d      	bne.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 80090de:	4b2f      	ldr	r3, [pc, #188]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80090e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80090e4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80090e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80090f0:	492a      	ldr	r1, [pc, #168]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80090f2:	4313      	orrs	r3, r2
 80090f4:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80090f8:	e003      	b.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090fa:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80090fe:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8009102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	2100      	movs	r1, #0
 800910c:	6039      	str	r1, [r7, #0]
 800910e:	f003 0308 	and.w	r3, r3, #8
 8009112:	607b      	str	r3, [r7, #4]
 8009114:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009118:	460b      	mov	r3, r1
 800911a:	4313      	orrs	r3, r2
 800911c:	d036      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800911e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009122:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009126:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800912a:	d00d      	beq.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800912c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009130:	d811      	bhi.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8009132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009136:	d012      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8009138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800913c:	d80b      	bhi.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00d      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8009142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009146:	d106      	bne.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009148:	4b14      	ldr	r3, [pc, #80]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800914a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914c:	4a13      	ldr	r2, [pc, #76]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800914e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009152:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8009154:	e004      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800915c:	e000      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800915e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009160:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10d      	bne.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8009168:	4b0c      	ldr	r3, [pc, #48]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800916a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800916e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009176:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800917a:	4908      	ldr	r1, [pc, #32]	; (800919c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800917c:	4313      	orrs	r3, r2
 800917e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009182:	e003      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009184:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009188:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800918c:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
}
 8009190:	4618      	mov	r0, r3
 8009192:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8009196:	46bd      	mov	sp, r7
 8009198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800919c:	46020c00 	.word	0x46020c00

080091a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b089      	sub	sp, #36	; 0x24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80091a8:	4ba6      	ldr	r3, [pc, #664]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80091aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80091b2:	4ba4      	ldr	r3, [pc, #656]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80091b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b6:	f003 0303 	and.w	r3, r3, #3
 80091ba:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80091bc:	4ba1      	ldr	r3, [pc, #644]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80091be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c0:	0a1b      	lsrs	r3, r3, #8
 80091c2:	f003 030f 	and.w	r3, r3, #15
 80091c6:	3301      	adds	r3, #1
 80091c8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80091ca:	4b9e      	ldr	r3, [pc, #632]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80091cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ce:	091b      	lsrs	r3, r3, #4
 80091d0:	f003 0301 	and.w	r3, r3, #1
 80091d4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80091d6:	4b9b      	ldr	r3, [pc, #620]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80091d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091da:	08db      	lsrs	r3, r3, #3
 80091dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	fb02 f303 	mul.w	r3, r2, r3
 80091e6:	ee07 3a90 	vmov	s15, r3
 80091ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ee:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	2b03      	cmp	r3, #3
 80091f6:	d062      	beq.n	80092be <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	f200 8081 	bhi.w	8009302 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d024      	beq.n	8009250 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	2b02      	cmp	r3, #2
 800920a:	d17a      	bne.n	8009302 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	ee07 3a90 	vmov	s15, r3
 8009212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009216:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8009448 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800921a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800921e:	4b89      	ldr	r3, [pc, #548]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800922e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009232:	eddf 5a86 	vldr	s11, [pc, #536]	; 800944c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009236:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800923a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800923e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009242:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800924a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800924e:	e08f      	b.n	8009370 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009250:	4b7c      	ldr	r3, [pc, #496]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009258:	2b00      	cmp	r3, #0
 800925a:	d005      	beq.n	8009268 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800925c:	4b79      	ldr	r3, [pc, #484]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	0f1b      	lsrs	r3, r3, #28
 8009262:	f003 030f 	and.w	r3, r3, #15
 8009266:	e006      	b.n	8009276 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8009268:	4b76      	ldr	r3, [pc, #472]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800926a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800926e:	041b      	lsls	r3, r3, #16
 8009270:	0f1b      	lsrs	r3, r3, #28
 8009272:	f003 030f 	and.w	r3, r3, #15
 8009276:	4a76      	ldr	r2, [pc, #472]	; (8009450 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800927c:	ee07 3a90 	vmov	s15, r3
 8009280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	ee07 3a90 	vmov	s15, r3
 800928a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	ee07 3a90 	vmov	s15, r3
 8009298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800929c:	ed97 6a02 	vldr	s12, [r7, #8]
 80092a0:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800944c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80092a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80092b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092bc:	e058      	b.n	8009370 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	ee07 3a90 	vmov	s15, r3
 80092c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c8:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009448 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80092cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092d0:	4b5c      	ldr	r3, [pc, #368]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80092d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092d8:	ee07 3a90 	vmov	s15, r3
 80092dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80092e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80092e4:	eddf 5a59 	vldr	s11, [pc, #356]	; 800944c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80092e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80092ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80092f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80092f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009300:	e036      	b.n	8009370 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009302:	4b50      	ldr	r3, [pc, #320]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800930a:	2b00      	cmp	r3, #0
 800930c:	d005      	beq.n	800931a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800930e:	4b4d      	ldr	r3, [pc, #308]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	0f1b      	lsrs	r3, r3, #28
 8009314:	f003 030f 	and.w	r3, r3, #15
 8009318:	e006      	b.n	8009328 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800931a:	4b4a      	ldr	r3, [pc, #296]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800931c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009320:	041b      	lsls	r3, r3, #16
 8009322:	0f1b      	lsrs	r3, r3, #28
 8009324:	f003 030f 	and.w	r3, r3, #15
 8009328:	4a49      	ldr	r2, [pc, #292]	; (8009450 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800932a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800932e:	ee07 3a90 	vmov	s15, r3
 8009332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	ee07 3a90 	vmov	s15, r3
 800933c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	ee07 3a90 	vmov	s15, r3
 800934a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800934e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009352:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800944c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800935a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800935e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009362:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800936a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800936e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8009370:	4b34      	ldr	r3, [pc, #208]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d017      	beq.n	80093ac <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800937c:	4b31      	ldr	r3, [pc, #196]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800937e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009380:	0a5b      	lsrs	r3, r3, #9
 8009382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800938e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009392:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009396:	edd7 6a07 	vldr	s13, [r7, #28]
 800939a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800939e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093a2:	ee17 2a90 	vmov	r2, s15
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	601a      	str	r2, [r3, #0]
 80093aa:	e002      	b.n	80093b2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80093b2:	4b24      	ldr	r3, [pc, #144]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80093b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d017      	beq.n	80093ee <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80093be:	4b21      	ldr	r3, [pc, #132]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80093c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c2:	0c1b      	lsrs	r3, r3, #16
 80093c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093c8:	ee07 3a90 	vmov	s15, r3
 80093cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80093d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093d4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80093d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80093dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093e4:	ee17 2a90 	vmov	r2, s15
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	605a      	str	r2, [r3, #4]
 80093ec:	e002      	b.n	80093f4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80093f4:	4b13      	ldr	r3, [pc, #76]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80093f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d017      	beq.n	8009430 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009400:	4b10      	ldr	r3, [pc, #64]	; (8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009404:	0e1b      	lsrs	r3, r3, #24
 8009406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800940a:	ee07 3a90 	vmov	s15, r3
 800940e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8009412:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009416:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800941a:	edd7 6a07 	vldr	s13, [r7, #28]
 800941e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009426:	ee17 2a90 	vmov	r2, s15
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800942e:	e002      	b.n	8009436 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	609a      	str	r2, [r3, #8]
}
 8009436:	bf00      	nop
 8009438:	3724      	adds	r7, #36	; 0x24
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	46020c00 	.word	0x46020c00
 8009448:	4b742400 	.word	0x4b742400
 800944c:	46000000 	.word	0x46000000
 8009450:	0800ce60 	.word	0x0800ce60

08009454 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009454:	b480      	push	{r7}
 8009456:	b089      	sub	sp, #36	; 0x24
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800945c:	4ba6      	ldr	r3, [pc, #664]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800945e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009464:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009466:	4ba4      	ldr	r3, [pc, #656]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946a:	f003 0303 	and.w	r3, r3, #3
 800946e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8009470:	4ba1      	ldr	r3, [pc, #644]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009474:	0a1b      	lsrs	r3, r3, #8
 8009476:	f003 030f 	and.w	r3, r3, #15
 800947a:	3301      	adds	r3, #1
 800947c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800947e:	4b9e      	ldr	r3, [pc, #632]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009482:	091b      	lsrs	r3, r3, #4
 8009484:	f003 0301 	and.w	r3, r3, #1
 8009488:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800948a:	4b9b      	ldr	r3, [pc, #620]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800948c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948e:	08db      	lsrs	r3, r3, #3
 8009490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	fb02 f303 	mul.w	r3, r2, r3
 800949a:	ee07 3a90 	vmov	s15, r3
 800949e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	2b03      	cmp	r3, #3
 80094aa:	d062      	beq.n	8009572 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	f200 8081 	bhi.w	80095b6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d024      	beq.n	8009504 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d17a      	bne.n	80095b6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	ee07 3a90 	vmov	s15, r3
 80094c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ca:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80096fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80094ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094d2:	4b89      	ldr	r3, [pc, #548]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80094d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094da:	ee07 3a90 	vmov	s15, r3
 80094de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80094e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80094e6:	eddf 5a86 	vldr	s11, [pc, #536]	; 8009700 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80094ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80094ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80094f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80094fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009502:	e08f      	b.n	8009624 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009504:	4b7c      	ldr	r3, [pc, #496]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d005      	beq.n	800951c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8009510:	4b79      	ldr	r3, [pc, #484]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	0f1b      	lsrs	r3, r3, #28
 8009516:	f003 030f 	and.w	r3, r3, #15
 800951a:	e006      	b.n	800952a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800951c:	4b76      	ldr	r3, [pc, #472]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800951e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009522:	041b      	lsls	r3, r3, #16
 8009524:	0f1b      	lsrs	r3, r3, #28
 8009526:	f003 030f 	and.w	r3, r3, #15
 800952a:	4a76      	ldr	r2, [pc, #472]	; (8009704 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800952c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009530:	ee07 3a90 	vmov	s15, r3
 8009534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	ee07 3a90 	vmov	s15, r3
 800953e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	ee07 3a90 	vmov	s15, r3
 800954c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009550:	ed97 6a02 	vldr	s12, [r7, #8]
 8009554:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8009700 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009558:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800955c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009564:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800956c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009570:	e058      	b.n	8009624 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	ee07 3a90 	vmov	s15, r3
 8009578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800957c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80096fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8009580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009584:	4b5c      	ldr	r3, [pc, #368]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800958c:	ee07 3a90 	vmov	s15, r3
 8009590:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009594:	ed97 6a02 	vldr	s12, [r7, #8]
 8009598:	eddf 5a59 	vldr	s11, [pc, #356]	; 8009700 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800959c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80095a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80095a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80095ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095b4:	e036      	b.n	8009624 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80095b6:	4b50      	ldr	r3, [pc, #320]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d005      	beq.n	80095ce <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80095c2:	4b4d      	ldr	r3, [pc, #308]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	0f1b      	lsrs	r3, r3, #28
 80095c8:	f003 030f 	and.w	r3, r3, #15
 80095cc:	e006      	b.n	80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80095ce:	4b4a      	ldr	r3, [pc, #296]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80095d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80095d4:	041b      	lsls	r3, r3, #16
 80095d6:	0f1b      	lsrs	r3, r3, #28
 80095d8:	f003 030f 	and.w	r3, r3, #15
 80095dc:	4a49      	ldr	r2, [pc, #292]	; (8009704 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80095de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095e2:	ee07 3a90 	vmov	s15, r3
 80095e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	ee07 3a90 	vmov	s15, r3
 80095f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	ee07 3a90 	vmov	s15, r3
 80095fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009602:	ed97 6a02 	vldr	s12, [r7, #8]
 8009606:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009700 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800960a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800960e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009616:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800961a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800961e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009622:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8009624:	4b34      	ldr	r3, [pc, #208]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d017      	beq.n	8009660 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009630:	4b31      	ldr	r3, [pc, #196]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009634:	0a5b      	lsrs	r3, r3, #9
 8009636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800963a:	ee07 3a90 	vmov	s15, r3
 800963e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8009642:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009646:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800964a:	edd7 6a07 	vldr	s13, [r7, #28]
 800964e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009656:	ee17 2a90 	vmov	r2, s15
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	601a      	str	r2, [r3, #0]
 800965e:	e002      	b.n	8009666 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009666:	4b24      	ldr	r3, [pc, #144]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800966e:	2b00      	cmp	r3, #0
 8009670:	d017      	beq.n	80096a2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009672:	4b21      	ldr	r3, [pc, #132]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009676:	0c1b      	lsrs	r3, r3, #16
 8009678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800967c:	ee07 3a90 	vmov	s15, r3
 8009680:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009688:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800968c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009698:	ee17 2a90 	vmov	r2, s15
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	605a      	str	r2, [r3, #4]
 80096a0:	e002      	b.n	80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80096a8:	4b13      	ldr	r3, [pc, #76]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80096aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d017      	beq.n	80096e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80096b4:	4b10      	ldr	r3, [pc, #64]	; (80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80096b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b8:	0e1b      	lsrs	r3, r3, #24
 80096ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096be:	ee07 3a90 	vmov	s15, r3
 80096c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80096c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096ca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80096ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80096d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096da:	ee17 2a90 	vmov	r2, s15
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80096e2:	e002      	b.n	80096ea <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	609a      	str	r2, [r3, #8]
}
 80096ea:	bf00      	nop
 80096ec:	3724      	adds	r7, #36	; 0x24
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	46020c00 	.word	0x46020c00
 80096fc:	4b742400 	.word	0x4b742400
 8009700:	46000000 	.word	0x46000000
 8009704:	0800ce60 	.word	0x0800ce60

08009708 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009708:	b480      	push	{r7}
 800970a:	b089      	sub	sp, #36	; 0x24
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009710:	4ba6      	ldr	r3, [pc, #664]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009718:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800971a:	4ba4      	ldr	r3, [pc, #656]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800971c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971e:	f003 0303 	and.w	r3, r3, #3
 8009722:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8009724:	4ba1      	ldr	r3, [pc, #644]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009728:	0a1b      	lsrs	r3, r3, #8
 800972a:	f003 030f 	and.w	r3, r3, #15
 800972e:	3301      	adds	r3, #1
 8009730:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8009732:	4b9e      	ldr	r3, [pc, #632]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009736:	091b      	lsrs	r3, r3, #4
 8009738:	f003 0301 	and.w	r3, r3, #1
 800973c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800973e:	4b9b      	ldr	r3, [pc, #620]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009742:	08db      	lsrs	r3, r3, #3
 8009744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	fb02 f303 	mul.w	r3, r2, r3
 800974e:	ee07 3a90 	vmov	s15, r3
 8009752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009756:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2b03      	cmp	r3, #3
 800975e:	d062      	beq.n	8009826 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	2b03      	cmp	r3, #3
 8009764:	f200 8081 	bhi.w	800986a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d024      	beq.n	80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	2b02      	cmp	r3, #2
 8009772:	d17a      	bne.n	800986a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	ee07 3a90 	vmov	s15, r3
 800977a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80099b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8009782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009786:	4b89      	ldr	r3, [pc, #548]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800978a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800978e:	ee07 3a90 	vmov	s15, r3
 8009792:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009796:	ed97 6a02 	vldr	s12, [r7, #8]
 800979a:	eddf 5a86 	vldr	s11, [pc, #536]	; 80099b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800979e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80097a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80097a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80097ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80097b6:	e08f      	b.n	80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80097b8:	4b7c      	ldr	r3, [pc, #496]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d005      	beq.n	80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80097c4:	4b79      	ldr	r3, [pc, #484]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	0f1b      	lsrs	r3, r3, #28
 80097ca:	f003 030f 	and.w	r3, r3, #15
 80097ce:	e006      	b.n	80097de <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80097d0:	4b76      	ldr	r3, [pc, #472]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80097d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80097d6:	041b      	lsls	r3, r3, #16
 80097d8:	0f1b      	lsrs	r3, r3, #28
 80097da:	f003 030f 	and.w	r3, r3, #15
 80097de:	4a76      	ldr	r2, [pc, #472]	; (80099b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80097e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097e4:	ee07 3a90 	vmov	s15, r3
 80097e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	ee07 3a90 	vmov	s15, r3
 80097f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	ee07 3a90 	vmov	s15, r3
 8009800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009804:	ed97 6a02 	vldr	s12, [r7, #8]
 8009808:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80099b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800980c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009810:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009814:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009818:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800981c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009820:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009824:	e058      	b.n	80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	ee07 3a90 	vmov	s15, r3
 800982c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009830:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80099b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8009834:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009838:	4b5c      	ldr	r3, [pc, #368]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800983a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800983c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009840:	ee07 3a90 	vmov	s15, r3
 8009844:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009848:	ed97 6a02 	vldr	s12, [r7, #8]
 800984c:	eddf 5a59 	vldr	s11, [pc, #356]	; 80099b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009850:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009854:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009858:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800985c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009864:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009868:	e036      	b.n	80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800986a:	4b50      	ldr	r3, [pc, #320]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009872:	2b00      	cmp	r3, #0
 8009874:	d005      	beq.n	8009882 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8009876:	4b4d      	ldr	r3, [pc, #308]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	0f1b      	lsrs	r3, r3, #28
 800987c:	f003 030f 	and.w	r3, r3, #15
 8009880:	e006      	b.n	8009890 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8009882:	4b4a      	ldr	r3, [pc, #296]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009884:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009888:	041b      	lsls	r3, r3, #16
 800988a:	0f1b      	lsrs	r3, r3, #28
 800988c:	f003 030f 	and.w	r3, r3, #15
 8009890:	4a49      	ldr	r2, [pc, #292]	; (80099b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8009892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009896:	ee07 3a90 	vmov	s15, r3
 800989a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	ee07 3a90 	vmov	s15, r3
 80098a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	ee07 3a90 	vmov	s15, r3
 80098b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80098ba:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80099b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80098be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80098ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098d6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80098d8:	4b34      	ldr	r3, [pc, #208]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80098da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d017      	beq.n	8009914 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80098e4:	4b31      	ldr	r3, [pc, #196]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80098e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e8:	0a5b      	lsrs	r3, r3, #9
 80098ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098ee:	ee07 3a90 	vmov	s15, r3
 80098f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80098f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80098fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800990a:	ee17 2a90 	vmov	r2, s15
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	601a      	str	r2, [r3, #0]
 8009912:	e002      	b.n	800991a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800991a:	4b24      	ldr	r3, [pc, #144]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800991c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800991e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d017      	beq.n	8009956 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009926:	4b21      	ldr	r3, [pc, #132]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800992a:	0c1b      	lsrs	r3, r3, #16
 800992c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009930:	ee07 3a90 	vmov	s15, r3
 8009934:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8009938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800993c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009940:	edd7 6a07 	vldr	s13, [r7, #28]
 8009944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800994c:	ee17 2a90 	vmov	r2, s15
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	605a      	str	r2, [r3, #4]
 8009954:	e002      	b.n	800995c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800995c:	4b13      	ldr	r3, [pc, #76]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800995e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009964:	2b00      	cmp	r3, #0
 8009966:	d017      	beq.n	8009998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009968:	4b10      	ldr	r3, [pc, #64]	; (80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800996a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800996c:	0e1b      	lsrs	r3, r3, #24
 800996e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009972:	ee07 3a90 	vmov	s15, r3
 8009976:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800997a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800997e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009982:	edd7 6a07 	vldr	s13, [r7, #28]
 8009986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800998a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800998e:	ee17 2a90 	vmov	r2, s15
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009996:	e002      	b.n	800999e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	609a      	str	r2, [r3, #8]
}
 800999e:	bf00      	nop
 80099a0:	3724      	adds	r7, #36	; 0x24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	46020c00 	.word	0x46020c00
 80099b0:	4b742400 	.word	0x4b742400
 80099b4:	46000000 	.word	0x46000000
 80099b8:	0800ce60 	.word	0x0800ce60

080099bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b08e      	sub	sp, #56	; 0x38
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80099c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099ca:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80099ce:	430b      	orrs	r3, r1
 80099d0:	d145      	bne.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80099d2:	4ba7      	ldr	r3, [pc, #668]	; (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80099d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099dc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80099de:	4ba4      	ldr	r3, [pc, #656]	; (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80099e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099e4:	f003 0302 	and.w	r3, r3, #2
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d108      	bne.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80099ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099f2:	d104      	bne.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80099f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099f8:	637b      	str	r3, [r7, #52]	; 0x34
 80099fa:	f001 bb5a 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80099fe:	4b9c      	ldr	r3, [pc, #624]	; (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a0c:	d114      	bne.n	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a14:	d110      	bne.n	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a16:	4b96      	ldr	r3, [pc, #600]	; (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a24:	d103      	bne.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8009a26:	23fa      	movs	r3, #250	; 0xfa
 8009a28:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a2a:	f001 bb42 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 8009a2e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009a32:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a34:	f001 bb3d 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8009a38:	4b8d      	ldr	r3, [pc, #564]	; (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a44:	d107      	bne.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a4c:	d103      	bne.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8009a4e:	4b89      	ldr	r3, [pc, #548]	; (8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009a50:	637b      	str	r3, [r7, #52]	; 0x34
 8009a52:	f001 bb2e 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8009a56:	2300      	movs	r3, #0
 8009a58:	637b      	str	r3, [r7, #52]	; 0x34
 8009a5a:	f001 bb2a 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009a5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a62:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009a66:	430b      	orrs	r3, r1
 8009a68:	d151      	bne.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009a6a:	4b81      	ldr	r3, [pc, #516]	; (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009a6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009a70:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009a74:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a78:	2b80      	cmp	r3, #128	; 0x80
 8009a7a:	d035      	beq.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8009a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7e:	2b80      	cmp	r3, #128	; 0x80
 8009a80:	d841      	bhi.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a84:	2b60      	cmp	r3, #96	; 0x60
 8009a86:	d02a      	beq.n	8009ade <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8009a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8a:	2b60      	cmp	r3, #96	; 0x60
 8009a8c:	d83b      	bhi.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a90:	2b40      	cmp	r3, #64	; 0x40
 8009a92:	d009      	beq.n	8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a96:	2b40      	cmp	r3, #64	; 0x40
 8009a98:	d835      	bhi.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d00c      	beq.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8009aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa2:	2b20      	cmp	r3, #32
 8009aa4:	d012      	beq.n	8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009aa6:	e02e      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7ff fb77 	bl	80091a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ab6:	f001 bafc 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aba:	f107 0318 	add.w	r3, r7, #24
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7ff fcc8 	bl	8009454 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ac8:	f001 baf3 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009acc:	f107 030c 	add.w	r3, r7, #12
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7ff fe19 	bl	8009708 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ada:	f001 baea 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009ade:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009ae2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ae4:	f001 bae5 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ae8:	4b61      	ldr	r3, [pc, #388]	; (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009af4:	d103      	bne.n	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8009af6:	4b60      	ldr	r3, [pc, #384]	; (8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009af8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009afa:	f001 bada 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009afe:	2300      	movs	r3, #0
 8009b00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b02:	f001 bad6 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 8009b06:	2300      	movs	r3, #0
 8009b08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b0a:	f001 bad2 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b12:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009b16:	430b      	orrs	r3, r1
 8009b18:	d158      	bne.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009b1a:	4b55      	ldr	r3, [pc, #340]	; (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009b1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009b20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b24:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b2c:	d03b      	beq.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b34:	d846      	bhi.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b3c:	d02e      	beq.n	8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b44:	d83e      	bhi.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b4c:	d00b      	beq.n	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b54:	d836      	bhi.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00d      	beq.n	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b62:	d012      	beq.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8009b64:	e02e      	b.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7ff fb18 	bl	80091a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b74:	f001 ba9d 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b78:	f107 0318 	add.w	r3, r7, #24
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7ff fc69 	bl	8009454 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b86:	f001 ba94 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b8a:	f107 030c 	add.w	r3, r7, #12
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7ff fdba 	bl	8009708 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b98:	f001 ba8b 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009b9c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009ba0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ba2:	f001 ba86 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ba6:	4b32      	ldr	r3, [pc, #200]	; (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bb2:	d103      	bne.n	8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8009bb4:	4b30      	ldr	r3, [pc, #192]	; (8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009bb6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009bb8:	f001 ba7b 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009bc0:	f001 ba77 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009bc8:	f001 ba73 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8009bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bd0:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009bd4:	430b      	orrs	r3, r1
 8009bd6:	d126      	bne.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8009bd8:	4b25      	ldr	r3, [pc, #148]	; (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009bda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009be2:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8009be4:	4b22      	ldr	r3, [pc, #136]	; (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bf0:	d106      	bne.n	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8009bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d103      	bne.n	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8009bf8:	4b1f      	ldr	r3, [pc, #124]	; (8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8009bfc:	f001 ba59 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8009c00:	4b1b      	ldr	r3, [pc, #108]	; (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c0c:	d107      	bne.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c14:	d103      	bne.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8009c16:	4b19      	ldr	r3, [pc, #100]	; (8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009c18:	637b      	str	r3, [r7, #52]	; 0x34
 8009c1a:	f001 ba4a 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	637b      	str	r3, [r7, #52]	; 0x34
 8009c22:	f001 ba46 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8009c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c2a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8009c2e:	430b      	orrs	r3, r1
 8009c30:	d16e      	bne.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8009c32:	4b0f      	ldr	r3, [pc, #60]	; (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c38:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8009c3c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c40:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009c44:	d03d      	beq.n	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c48:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009c4c:	d85c      	bhi.n	8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c54:	d014      	beq.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8009c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c5c:	d854      	bhi.n	8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d01f      	beq.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8009c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c6a:	d012      	beq.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009c6c:	e04c      	b.n	8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009c6e:	bf00      	nop
 8009c70:	46020c00 	.word	0x46020c00
 8009c74:	0007a120 	.word	0x0007a120
 8009c78:	00f42400 	.word	0x00f42400
 8009c7c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7ff fa8b 	bl	80091a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c8e:	f001 ba10 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c92:	f107 0318 	add.w	r3, r7, #24
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7ff fbdc 	bl	8009454 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ca0:	f001 ba07 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009ca4:	4ba7      	ldr	r3, [pc, #668]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cb0:	d103      	bne.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8009cb2:	4ba5      	ldr	r3, [pc, #660]	; (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009cb4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009cb6:	f001 b9fc 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009cbe:	f001 b9f8 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009cc2:	4ba0      	ldr	r3, [pc, #640]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 0320 	and.w	r3, r3, #32
 8009cca:	2b20      	cmp	r3, #32
 8009ccc:	d118      	bne.n	8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009cce:	4b9d      	ldr	r3, [pc, #628]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d005      	beq.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009cda:	4b9a      	ldr	r3, [pc, #616]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	0e1b      	lsrs	r3, r3, #24
 8009ce0:	f003 030f 	and.w	r3, r3, #15
 8009ce4:	e006      	b.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8009ce6:	4b97      	ldr	r3, [pc, #604]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009ce8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009cec:	041b      	lsls	r3, r3, #16
 8009cee:	0e1b      	lsrs	r3, r3, #24
 8009cf0:	f003 030f 	and.w	r3, r3, #15
 8009cf4:	4a95      	ldr	r2, [pc, #596]	; (8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cfa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009cfc:	f001 b9d9 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009d00:	2300      	movs	r3, #0
 8009d02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d04:	f001 b9d5 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d0c:	f001 b9d1 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d14:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8009d18:	430b      	orrs	r3, r1
 8009d1a:	d17f      	bne.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009d1c:	4b89      	ldr	r3, [pc, #548]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009d1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d26:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8009d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d165      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8009d2e:	4b85      	ldr	r3, [pc, #532]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d34:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8009d38:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009d40:	d034      	beq.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8009d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d44:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009d48:	d853      	bhi.n	8009df2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8009d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d50:	d00b      	beq.n	8009d6a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8009d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d58:	d84b      	bhi.n	8009df2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d016      	beq.n	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8009d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d66:	d009      	beq.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009d68:	e043      	b.n	8009df2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7ff fa16 	bl	80091a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d76:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009d78:	f001 b99b 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d7c:	f107 0318 	add.w	r3, r7, #24
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7ff fb67 	bl	8009454 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009d8a:	f001 b992 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009d8e:	4b6d      	ldr	r3, [pc, #436]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d9a:	d103      	bne.n	8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8009d9c:	4b6a      	ldr	r3, [pc, #424]	; (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009d9e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009da0:	f001 b987 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 8009da4:	2300      	movs	r3, #0
 8009da6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009da8:	f001 b983 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009dac:	4b65      	ldr	r3, [pc, #404]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0320 	and.w	r3, r3, #32
 8009db4:	2b20      	cmp	r3, #32
 8009db6:	d118      	bne.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009db8:	4b62      	ldr	r3, [pc, #392]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d005      	beq.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8009dc4:	4b5f      	ldr	r3, [pc, #380]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	0e1b      	lsrs	r3, r3, #24
 8009dca:	f003 030f 	and.w	r3, r3, #15
 8009dce:	e006      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009dd0:	4b5c      	ldr	r3, [pc, #368]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009dd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009dd6:	041b      	lsls	r3, r3, #16
 8009dd8:	0e1b      	lsrs	r3, r3, #24
 8009dda:	f003 030f 	and.w	r3, r3, #15
 8009dde:	4a5b      	ldr	r2, [pc, #364]	; (8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009de4:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009de6:	f001 b964 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 8009dea:	2300      	movs	r3, #0
 8009dec:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009dee:	f001 b960 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 8009df2:	2300      	movs	r3, #0
 8009df4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009df6:	f001 b95c 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e00:	d108      	bne.n	8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7ff f9ca 	bl	80091a0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8009e10:	f001 b94f 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 8009e14:	2300      	movs	r3, #0
 8009e16:	637b      	str	r3, [r7, #52]	; 0x34
 8009e18:	f001 b94b 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8009e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e20:	1e51      	subs	r1, r2, #1
 8009e22:	430b      	orrs	r3, r1
 8009e24:	d136      	bne.n	8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009e26:	4b47      	ldr	r3, [pc, #284]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e2c:	f003 0303 	and.w	r3, r3, #3
 8009e30:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d104      	bne.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8009e38:	f7fe f994 	bl	8008164 <HAL_RCC_GetPCLK2Freq>
 8009e3c:	6378      	str	r0, [r7, #52]	; 0x34
 8009e3e:	f001 b938 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8009e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d104      	bne.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009e48:	f7fe f85c 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 8009e4c:	6378      	str	r0, [r7, #52]	; 0x34
 8009e4e:	f001 b930 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8009e52:	4b3c      	ldr	r3, [pc, #240]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e5e:	d106      	bne.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8009e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d103      	bne.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8009e66:	4b3a      	ldr	r3, [pc, #232]	; (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009e68:	637b      	str	r3, [r7, #52]	; 0x34
 8009e6a:	f001 b922 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8009e6e:	4b35      	ldr	r3, [pc, #212]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e74:	f003 0302 	and.w	r3, r3, #2
 8009e78:	2b02      	cmp	r3, #2
 8009e7a:	d107      	bne.n	8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7e:	2b03      	cmp	r3, #3
 8009e80:	d104      	bne.n	8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8009e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e86:	637b      	str	r3, [r7, #52]	; 0x34
 8009e88:	f001 b913 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8009e90:	f001 b90f 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8009e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e98:	1e91      	subs	r1, r2, #2
 8009e9a:	430b      	orrs	r3, r1
 8009e9c:	d136      	bne.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009e9e:	4b29      	ldr	r3, [pc, #164]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ea4:	f003 030c 	and.w	r3, r3, #12
 8009ea8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d104      	bne.n	8009eba <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009eb0:	f7fe f944 	bl	800813c <HAL_RCC_GetPCLK1Freq>
 8009eb4:	6378      	str	r0, [r7, #52]	; 0x34
 8009eb6:	f001 b8fc 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8009eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	d104      	bne.n	8009eca <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009ec0:	f7fe f820 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 8009ec4:	6378      	str	r0, [r7, #52]	; 0x34
 8009ec6:	f001 b8f4 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009eca:	4b1e      	ldr	r3, [pc, #120]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ed6:	d106      	bne.n	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eda:	2b08      	cmp	r3, #8
 8009edc:	d103      	bne.n	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8009ede:	4b1c      	ldr	r3, [pc, #112]	; (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8009ee2:	f001 b8e6 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009ee6:	4b17      	ldr	r3, [pc, #92]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009eec:	f003 0302 	and.w	r3, r3, #2
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d107      	bne.n	8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8009ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef6:	2b0c      	cmp	r3, #12
 8009ef8:	d104      	bne.n	8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8009efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009efe:	637b      	str	r3, [r7, #52]	; 0x34
 8009f00:	f001 b8d7 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8009f04:	2300      	movs	r3, #0
 8009f06:	637b      	str	r3, [r7, #52]	; 0x34
 8009f08:	f001 b8d3 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8009f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f10:	1f11      	subs	r1, r2, #4
 8009f12:	430b      	orrs	r3, r1
 8009f14:	d13f      	bne.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009f16:	4b0b      	ldr	r3, [pc, #44]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009f20:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d104      	bne.n	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009f28:	f7fe f908 	bl	800813c <HAL_RCC_GetPCLK1Freq>
 8009f2c:	6378      	str	r0, [r7, #52]	; 0x34
 8009f2e:	f001 b8c0 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8009f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f34:	2b10      	cmp	r3, #16
 8009f36:	d10d      	bne.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009f38:	f7fd ffe4 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 8009f3c:	6378      	str	r0, [r7, #52]	; 0x34
 8009f3e:	f001 b8b8 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8009f42:	bf00      	nop
 8009f44:	46020c00 	.word	0x46020c00
 8009f48:	02dc6c00 	.word	0x02dc6c00
 8009f4c:	0800ce60 	.word	0x0800ce60
 8009f50:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009f54:	4ba8      	ldr	r3, [pc, #672]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f60:	d106      	bne.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8009f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f64:	2b20      	cmp	r3, #32
 8009f66:	d103      	bne.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8009f68:	4ba4      	ldr	r3, [pc, #656]	; (800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8009f6c:	f001 b8a1 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009f70:	4ba1      	ldr	r3, [pc, #644]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009f72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009f76:	f003 0302 	and.w	r3, r3, #2
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d107      	bne.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f80:	2b30      	cmp	r3, #48	; 0x30
 8009f82:	d104      	bne.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8009f84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f88:	637b      	str	r3, [r7, #52]	; 0x34
 8009f8a:	f001 b892 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	637b      	str	r3, [r7, #52]	; 0x34
 8009f92:	f001 b88e 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8009f96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f9a:	f1a2 0108 	sub.w	r1, r2, #8
 8009f9e:	430b      	orrs	r3, r1
 8009fa0:	d136      	bne.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009fa2:	4b95      	ldr	r3, [pc, #596]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009fa8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009fac:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d104      	bne.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009fb4:	f7fe f8c2 	bl	800813c <HAL_RCC_GetPCLK1Freq>
 8009fb8:	6378      	str	r0, [r7, #52]	; 0x34
 8009fba:	f001 b87a 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc0:	2b40      	cmp	r3, #64	; 0x40
 8009fc2:	d104      	bne.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009fc4:	f7fd ff9e 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 8009fc8:	6378      	str	r0, [r7, #52]	; 0x34
 8009fca:	f001 b872 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009fce:	4b8a      	ldr	r3, [pc, #552]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fda:	d106      	bne.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8009fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fde:	2b80      	cmp	r3, #128	; 0x80
 8009fe0:	d103      	bne.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8009fe2:	4b86      	ldr	r3, [pc, #536]	; (800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8009fe6:	f001 b864 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009fea:	4b83      	ldr	r3, [pc, #524]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009ff0:	f003 0302 	and.w	r3, r3, #2
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d107      	bne.n	800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffa:	2bc0      	cmp	r3, #192	; 0xc0
 8009ffc:	d104      	bne.n	800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8009ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a002:	637b      	str	r3, [r7, #52]	; 0x34
 800a004:	f001 b855 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800a008:	2300      	movs	r3, #0
 800a00a:	637b      	str	r3, [r7, #52]	; 0x34
 800a00c:	f001 b851 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800a010:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a014:	f1a2 0110 	sub.w	r1, r2, #16
 800a018:	430b      	orrs	r3, r1
 800a01a:	d139      	bne.n	800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a01c:	4b76      	ldr	r3, [pc, #472]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a01e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a026:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d104      	bne.n	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a02e:	f7fe f885 	bl	800813c <HAL_RCC_GetPCLK1Freq>
 800a032:	6378      	str	r0, [r7, #52]	; 0x34
 800a034:	f001 b83d 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800a038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a03e:	d104      	bne.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a040:	f7fd ff60 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 800a044:	6378      	str	r0, [r7, #52]	; 0x34
 800a046:	f001 b834 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a04a:	4b6b      	ldr	r3, [pc, #428]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a056:	d107      	bne.n	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a05e:	d103      	bne.n	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800a060:	4b66      	ldr	r3, [pc, #408]	; (800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a062:	637b      	str	r3, [r7, #52]	; 0x34
 800a064:	f001 b825 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a068:	4b63      	ldr	r3, [pc, #396]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a06a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a06e:	f003 0302 	and.w	r3, r3, #2
 800a072:	2b02      	cmp	r3, #2
 800a074:	d108      	bne.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800a076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a07c:	d104      	bne.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800a07e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a082:	637b      	str	r3, [r7, #52]	; 0x34
 800a084:	f001 b815 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a088:	2300      	movs	r3, #0
 800a08a:	637b      	str	r3, [r7, #52]	; 0x34
 800a08c:	f001 b811 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800a090:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a094:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800a098:	430b      	orrs	r3, r1
 800a09a:	d139      	bne.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800a09c:	4b56      	ldr	r3, [pc, #344]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a09e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a0a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a0a6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d104      	bne.n	800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a0ae:	f7fe f845 	bl	800813c <HAL_RCC_GetPCLK1Freq>
 800a0b2:	6378      	str	r0, [r7, #52]	; 0x34
 800a0b4:	f000 bffd 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0be:	d104      	bne.n	800a0ca <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a0c0:	f7fd ff20 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 800a0c4:	6378      	str	r0, [r7, #52]	; 0x34
 800a0c6:	f000 bff4 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800a0ca:	4b4b      	ldr	r3, [pc, #300]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0d6:	d107      	bne.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0de:	d103      	bne.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800a0e0:	4b46      	ldr	r3, [pc, #280]	; (800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a0e2:	637b      	str	r3, [r7, #52]	; 0x34
 800a0e4:	f000 bfe5 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800a0e8:	4b43      	ldr	r3, [pc, #268]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a0ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a0ee:	f003 0302 	and.w	r3, r3, #2
 800a0f2:	2b02      	cmp	r3, #2
 800a0f4:	d108      	bne.n	800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a0fc:	d104      	bne.n	800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800a0fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a102:	637b      	str	r3, [r7, #52]	; 0x34
 800a104:	f000 bfd5 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a108:	2300      	movs	r3, #0
 800a10a:	637b      	str	r3, [r7, #52]	; 0x34
 800a10c:	f000 bfd1 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800a110:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a114:	f1a2 0120 	sub.w	r1, r2, #32
 800a118:	430b      	orrs	r3, r1
 800a11a:	d158      	bne.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a11c:	4b36      	ldr	r3, [pc, #216]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a11e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a122:	f003 0307 	and.w	r3, r3, #7
 800a126:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d104      	bne.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800a12e:	f7fe f82d 	bl	800818c <HAL_RCC_GetPCLK3Freq>
 800a132:	6378      	str	r0, [r7, #52]	; 0x34
 800a134:	f000 bfbd 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800a138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d104      	bne.n	800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a13e:	f7fd fee1 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 800a142:	6378      	str	r0, [r7, #52]	; 0x34
 800a144:	f000 bfb5 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a148:	4b2b      	ldr	r3, [pc, #172]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a154:	d106      	bne.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800a156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a158:	2b02      	cmp	r3, #2
 800a15a:	d103      	bne.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800a15c:	4b27      	ldr	r3, [pc, #156]	; (800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a15e:	637b      	str	r3, [r7, #52]	; 0x34
 800a160:	f000 bfa7 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a164:	4b24      	ldr	r3, [pc, #144]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a16a:	f003 0302 	and.w	r3, r3, #2
 800a16e:	2b02      	cmp	r3, #2
 800a170:	d107      	bne.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800a172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a174:	2b03      	cmp	r3, #3
 800a176:	d104      	bne.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800a178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a17c:	637b      	str	r3, [r7, #52]	; 0x34
 800a17e:	f000 bf98 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800a182:	4b1d      	ldr	r3, [pc, #116]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f003 0320 	and.w	r3, r3, #32
 800a18a:	2b20      	cmp	r3, #32
 800a18c:	d11b      	bne.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800a18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a190:	2b04      	cmp	r3, #4
 800a192:	d118      	bne.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a194:	4b18      	ldr	r3, [pc, #96]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d005      	beq.n	800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800a1a0:	4b15      	ldr	r3, [pc, #84]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	0e1b      	lsrs	r3, r3, #24
 800a1a6:	f003 030f 	and.w	r3, r3, #15
 800a1aa:	e006      	b.n	800a1ba <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800a1ac:	4b12      	ldr	r3, [pc, #72]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a1ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a1b2:	041b      	lsls	r3, r3, #16
 800a1b4:	0e1b      	lsrs	r3, r3, #24
 800a1b6:	f003 030f 	and.w	r3, r3, #15
 800a1ba:	4a11      	ldr	r2, [pc, #68]	; (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a1bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1c0:	637b      	str	r3, [r7, #52]	; 0x34
 800a1c2:	f000 bf76 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a1ca:	f000 bf72 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800a1ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1d2:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a1d6:	430b      	orrs	r3, r1
 800a1d8:	d172      	bne.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800a1da:	4b07      	ldr	r3, [pc, #28]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a1dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a1e0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a1e4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ec:	d10a      	bne.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a1ee:	f7fd fe89 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 800a1f2:	6378      	str	r0, [r7, #52]	; 0x34
 800a1f4:	f000 bf5d 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a1f8:	46020c00 	.word	0x46020c00
 800a1fc:	00f42400 	.word	0x00f42400
 800a200:	0800ce60 	.word	0x0800ce60
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800a204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a20a:	d108      	bne.n	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a20c:	f107 0318 	add.w	r3, r7, #24
 800a210:	4618      	mov	r0, r3
 800a212:	f7ff f91f 	bl	8009454 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800a216:	6a3b      	ldr	r3, [r7, #32]
 800a218:	637b      	str	r3, [r7, #52]	; 0x34
 800a21a:	f000 bf4a 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800a21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a220:	2b00      	cmp	r3, #0
 800a222:	d104      	bne.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800a224:	f7fd ff70 	bl	8008108 <HAL_RCC_GetHCLKFreq>
 800a228:	6378      	str	r0, [r7, #52]	; 0x34
 800a22a:	f000 bf42 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800a22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a230:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a234:	d122      	bne.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a236:	4bb0      	ldr	r3, [pc, #704]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 0320 	and.w	r3, r3, #32
 800a23e:	2b20      	cmp	r3, #32
 800a240:	d118      	bne.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a242:	4bad      	ldr	r3, [pc, #692]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d005      	beq.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800a24e:	4baa      	ldr	r3, [pc, #680]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	0e1b      	lsrs	r3, r3, #24
 800a254:	f003 030f 	and.w	r3, r3, #15
 800a258:	e006      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800a25a:	4ba7      	ldr	r3, [pc, #668]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a25c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a260:	041b      	lsls	r3, r3, #16
 800a262:	0e1b      	lsrs	r3, r3, #24
 800a264:	f003 030f 	and.w	r3, r3, #15
 800a268:	4aa4      	ldr	r2, [pc, #656]	; (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a26a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a26e:	637b      	str	r3, [r7, #52]	; 0x34
 800a270:	f000 bf1f 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800a274:	2300      	movs	r3, #0
 800a276:	637b      	str	r3, [r7, #52]	; 0x34
 800a278:	f000 bf1b 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800a27c:	4b9e      	ldr	r3, [pc, #632]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a288:	d107      	bne.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800a28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a290:	d103      	bne.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800a292:	4b9b      	ldr	r3, [pc, #620]	; (800a500 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a294:	637b      	str	r3, [r7, #52]	; 0x34
 800a296:	f000 bf0c 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800a29a:	4b97      	ldr	r3, [pc, #604]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2a6:	d107      	bne.n	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2ae:	d103      	bne.n	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800a2b0:	4b93      	ldr	r3, [pc, #588]	; (800a500 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a2b2:	637b      	str	r3, [r7, #52]	; 0x34
 800a2b4:	f000 befd 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	637b      	str	r3, [r7, #52]	; 0x34
 800a2bc:	f000 bef9 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800a2c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2c4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a2c8:	430b      	orrs	r3, r1
 800a2ca:	d158      	bne.n	800a37e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800a2cc:	4b8a      	ldr	r3, [pc, #552]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a2ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a2d2:	f003 0307 	and.w	r3, r3, #7
 800a2d6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2da:	2b04      	cmp	r3, #4
 800a2dc:	d84b      	bhi.n	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800a2de:	a201      	add	r2, pc, #4	; (adr r2, 800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800a2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e4:	0800a31d 	.word	0x0800a31d
 800a2e8:	0800a2f9 	.word	0x0800a2f9
 800a2ec:	0800a30b 	.word	0x0800a30b
 800a2f0:	0800a327 	.word	0x0800a327
 800a2f4:	0800a331 	.word	0x0800a331
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fe ff4f 	bl	80091a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a304:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a306:	f000 bed4 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a30a:	f107 030c 	add.w	r3, r7, #12
 800a30e:	4618      	mov	r0, r3
 800a310:	f7ff f9fa 	bl	8009708 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a318:	f000 becb 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a31c:	f7fd fef4 	bl	8008108 <HAL_RCC_GetHCLKFreq>
 800a320:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a322:	f000 bec6 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a326:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a32a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a32c:	f000 bec1 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a330:	4b71      	ldr	r3, [pc, #452]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f003 0320 	and.w	r3, r3, #32
 800a338:	2b20      	cmp	r3, #32
 800a33a:	d118      	bne.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a33c:	4b6e      	ldr	r3, [pc, #440]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a344:	2b00      	cmp	r3, #0
 800a346:	d005      	beq.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800a348:	4b6b      	ldr	r3, [pc, #428]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	0e1b      	lsrs	r3, r3, #24
 800a34e:	f003 030f 	and.w	r3, r3, #15
 800a352:	e006      	b.n	800a362 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800a354:	4b68      	ldr	r3, [pc, #416]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a356:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a35a:	041b      	lsls	r3, r3, #16
 800a35c:	0e1b      	lsrs	r3, r3, #24
 800a35e:	f003 030f 	and.w	r3, r3, #15
 800a362:	4a66      	ldr	r2, [pc, #408]	; (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a368:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a36a:	f000 bea2 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a36e:	2300      	movs	r3, #0
 800a370:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a372:	f000 be9e 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800a376:	2300      	movs	r3, #0
 800a378:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a37a:	f000 be9a 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800a37e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a382:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800a386:	430b      	orrs	r3, r1
 800a388:	d167      	bne.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800a38a:	4b5b      	ldr	r3, [pc, #364]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a38c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a390:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a394:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a39c:	d036      	beq.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800a39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a3a4:	d855      	bhi.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a3ac:	d029      	beq.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800a3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a3b4:	d84d      	bhi.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3bc:	d013      	beq.n	800a3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800a3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3c4:	d845      	bhi.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d015      	beq.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3d2:	d13e      	bne.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fe fee1 	bl	80091a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a3e2:	f000 be66 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3e6:	f107 030c 	add.w	r3, r7, #12
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7ff f98c 	bl	8009708 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a3f4:	f000 be5d 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a3f8:	f7fd fe86 	bl	8008108 <HAL_RCC_GetHCLKFreq>
 800a3fc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a3fe:	f000 be58 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a402:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a406:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a408:	f000 be53 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a40c:	4b3a      	ldr	r3, [pc, #232]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 0320 	and.w	r3, r3, #32
 800a414:	2b20      	cmp	r3, #32
 800a416:	d118      	bne.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a418:	4b37      	ldr	r3, [pc, #220]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a420:	2b00      	cmp	r3, #0
 800a422:	d005      	beq.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800a424:	4b34      	ldr	r3, [pc, #208]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	0e1b      	lsrs	r3, r3, #24
 800a42a:	f003 030f 	and.w	r3, r3, #15
 800a42e:	e006      	b.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a430:	4b31      	ldr	r3, [pc, #196]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a432:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a436:	041b      	lsls	r3, r3, #16
 800a438:	0e1b      	lsrs	r3, r3, #24
 800a43a:	f003 030f 	and.w	r3, r3, #15
 800a43e:	4a2f      	ldr	r2, [pc, #188]	; (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a444:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a446:	f000 be34 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a44a:	2300      	movs	r3, #0
 800a44c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a44e:	f000 be30 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800a452:	2300      	movs	r3, #0
 800a454:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a456:	f000 be2c 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800a45a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a45e:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800a462:	430b      	orrs	r3, r1
 800a464:	d152      	bne.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a466:	4b24      	ldr	r3, [pc, #144]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a46c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a470:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800a472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a474:	2b00      	cmp	r3, #0
 800a476:	d104      	bne.n	800a482 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a478:	f7fd fe60 	bl	800813c <HAL_RCC_GetPCLK1Freq>
 800a47c:	6378      	str	r0, [r7, #52]	; 0x34
 800a47e:	f000 be18 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800a482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a488:	d104      	bne.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a48a:	f7fd fd3b 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 800a48e:	6378      	str	r0, [r7, #52]	; 0x34
 800a490:	f000 be0f 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800a494:	4b18      	ldr	r3, [pc, #96]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a49c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4a0:	d107      	bne.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4a8:	d103      	bne.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800a4aa:	4b15      	ldr	r3, [pc, #84]	; (800a500 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a4ac:	637b      	str	r3, [r7, #52]	; 0x34
 800a4ae:	f000 be00 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800a4b2:	4b11      	ldr	r3, [pc, #68]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f003 0320 	and.w	r3, r3, #32
 800a4ba:	2b20      	cmp	r3, #32
 800a4bc:	d122      	bne.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4c4:	d11e      	bne.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a4c6:	4b0c      	ldr	r3, [pc, #48]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d005      	beq.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800a4d2:	4b09      	ldr	r3, [pc, #36]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	0e1b      	lsrs	r3, r3, #24
 800a4d8:	f003 030f 	and.w	r3, r3, #15
 800a4dc:	e006      	b.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800a4de:	4b06      	ldr	r3, [pc, #24]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a4e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a4e4:	041b      	lsls	r3, r3, #16
 800a4e6:	0e1b      	lsrs	r3, r3, #24
 800a4e8:	f003 030f 	and.w	r3, r3, #15
 800a4ec:	4a03      	ldr	r2, [pc, #12]	; (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4f2:	637b      	str	r3, [r7, #52]	; 0x34
 800a4f4:	f000 bddd 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a4f8:	46020c00 	.word	0x46020c00
 800a4fc:	0800ce60 	.word	0x0800ce60
 800a500:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800a504:	2300      	movs	r3, #0
 800a506:	637b      	str	r3, [r7, #52]	; 0x34
 800a508:	f000 bdd3 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800a50c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a510:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800a514:	430b      	orrs	r3, r1
 800a516:	d14c      	bne.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a518:	4ba8      	ldr	r3, [pc, #672]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a51a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a51e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a522:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a526:	2b00      	cmp	r3, #0
 800a528:	d104      	bne.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a52a:	f7fd fe07 	bl	800813c <HAL_RCC_GetPCLK1Freq>
 800a52e:	6378      	str	r0, [r7, #52]	; 0x34
 800a530:	f000 bdbf 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800a534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a53a:	d104      	bne.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a53c:	f7fd fce2 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 800a540:	6378      	str	r0, [r7, #52]	; 0x34
 800a542:	f000 bdb6 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800a546:	4b9d      	ldr	r3, [pc, #628]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a54e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a552:	d107      	bne.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800a554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a55a:	d103      	bne.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800a55c:	4b98      	ldr	r3, [pc, #608]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a55e:	637b      	str	r3, [r7, #52]	; 0x34
 800a560:	f000 bda7 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800a564:	4b95      	ldr	r3, [pc, #596]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 0320 	and.w	r3, r3, #32
 800a56c:	2b20      	cmp	r3, #32
 800a56e:	d11c      	bne.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800a570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a572:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a576:	d118      	bne.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a578:	4b90      	ldr	r3, [pc, #576]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d005      	beq.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800a584:	4b8d      	ldr	r3, [pc, #564]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	0e1b      	lsrs	r3, r3, #24
 800a58a:	f003 030f 	and.w	r3, r3, #15
 800a58e:	e006      	b.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800a590:	4b8a      	ldr	r3, [pc, #552]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a596:	041b      	lsls	r3, r3, #16
 800a598:	0e1b      	lsrs	r3, r3, #24
 800a59a:	f003 030f 	and.w	r3, r3, #15
 800a59e:	4a89      	ldr	r2, [pc, #548]	; (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a5a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5a4:	637b      	str	r3, [r7, #52]	; 0x34
 800a5a6:	f000 bd84 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	637b      	str	r3, [r7, #52]	; 0x34
 800a5ae:	f000 bd80 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800a5b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5b6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a5ba:	430b      	orrs	r3, r1
 800a5bc:	d158      	bne.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a5be:	4b7f      	ldr	r3, [pc, #508]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a5c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a5c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a5c8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	2bc0      	cmp	r3, #192	; 0xc0
 800a5ce:	d028      	beq.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800a5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d2:	2bc0      	cmp	r3, #192	; 0xc0
 800a5d4:	d848      	bhi.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	2b80      	cmp	r3, #128	; 0x80
 800a5da:	d00e      	beq.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5de:	2b80      	cmp	r3, #128	; 0x80
 800a5e0:	d842      	bhi.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800a5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d003      	beq.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ea:	2b40      	cmp	r3, #64	; 0x40
 800a5ec:	d014      	beq.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800a5ee:	e03b      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800a5f0:	f7fd fdcc 	bl	800818c <HAL_RCC_GetPCLK3Freq>
 800a5f4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a5f6:	f000 bd5c 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5fa:	4b70      	ldr	r3, [pc, #448]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a606:	d103      	bne.n	800a610 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800a608:	4b6d      	ldr	r3, [pc, #436]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a60a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a60c:	f000 bd51 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a610:	2300      	movs	r3, #0
 800a612:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a614:	f000 bd4d 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800a618:	f7fd fc74 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 800a61c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a61e:	f000 bd48 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a622:	4b66      	ldr	r3, [pc, #408]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 0320 	and.w	r3, r3, #32
 800a62a:	2b20      	cmp	r3, #32
 800a62c:	d118      	bne.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a62e:	4b63      	ldr	r3, [pc, #396]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a636:	2b00      	cmp	r3, #0
 800a638:	d005      	beq.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800a63a:	4b60      	ldr	r3, [pc, #384]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	0e1b      	lsrs	r3, r3, #24
 800a640:	f003 030f 	and.w	r3, r3, #15
 800a644:	e006      	b.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800a646:	4b5d      	ldr	r3, [pc, #372]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a648:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a64c:	041b      	lsls	r3, r3, #16
 800a64e:	0e1b      	lsrs	r3, r3, #24
 800a650:	f003 030f 	and.w	r3, r3, #15
 800a654:	4a5b      	ldr	r2, [pc, #364]	; (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a65a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a65c:	f000 bd29 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a660:	2300      	movs	r3, #0
 800a662:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a664:	f000 bd25 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800a668:	2300      	movs	r3, #0
 800a66a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a66c:	f000 bd21 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800a670:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a674:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800a678:	430b      	orrs	r3, r1
 800a67a:	d14c      	bne.n	800a716 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a67c:	4b4f      	ldr	r3, [pc, #316]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a67e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a682:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a686:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800a688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d104      	bne.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a68e:	f7fd fd55 	bl	800813c <HAL_RCC_GetPCLK1Freq>
 800a692:	6378      	str	r0, [r7, #52]	; 0x34
 800a694:	f000 bd0d 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800a698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a69e:	d104      	bne.n	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a6a0:	f7fd fc30 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 800a6a4:	6378      	str	r0, [r7, #52]	; 0x34
 800a6a6:	f000 bd04 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800a6aa:	4b44      	ldr	r3, [pc, #272]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6b6:	d107      	bne.n	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800a6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6be:	d103      	bne.n	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800a6c0:	4b3f      	ldr	r3, [pc, #252]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a6c2:	637b      	str	r3, [r7, #52]	; 0x34
 800a6c4:	f000 bcf5 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800a6c8:	4b3c      	ldr	r3, [pc, #240]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f003 0320 	and.w	r3, r3, #32
 800a6d0:	2b20      	cmp	r3, #32
 800a6d2:	d11c      	bne.n	800a70e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800a6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a6da:	d118      	bne.n	800a70e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a6dc:	4b37      	ldr	r3, [pc, #220]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d005      	beq.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800a6e8:	4b34      	ldr	r3, [pc, #208]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	0e1b      	lsrs	r3, r3, #24
 800a6ee:	f003 030f 	and.w	r3, r3, #15
 800a6f2:	e006      	b.n	800a702 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800a6f4:	4b31      	ldr	r3, [pc, #196]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a6f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a6fa:	041b      	lsls	r3, r3, #16
 800a6fc:	0e1b      	lsrs	r3, r3, #24
 800a6fe:	f003 030f 	and.w	r3, r3, #15
 800a702:	4a30      	ldr	r2, [pc, #192]	; (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a708:	637b      	str	r3, [r7, #52]	; 0x34
 800a70a:	f000 bcd2 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800a70e:	2300      	movs	r3, #0
 800a710:	637b      	str	r3, [r7, #52]	; 0x34
 800a712:	f000 bcce 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800a716:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a71a:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800a71e:	430b      	orrs	r3, r1
 800a720:	d152      	bne.n	800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800a722:	4b26      	ldr	r3, [pc, #152]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a724:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a728:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800a72c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800a72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a730:	2b00      	cmp	r3, #0
 800a732:	d104      	bne.n	800a73e <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a734:	f7fd fd02 	bl	800813c <HAL_RCC_GetPCLK1Freq>
 800a738:	6378      	str	r0, [r7, #52]	; 0x34
 800a73a:	f000 bcba 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800a73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a744:	d104      	bne.n	800a750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a746:	f7fd fbdd 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 800a74a:	6378      	str	r0, [r7, #52]	; 0x34
 800a74c:	f000 bcb1 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800a750:	4b1a      	ldr	r3, [pc, #104]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a75c:	d107      	bne.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800a75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a760:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a764:	d103      	bne.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800a766:	4b16      	ldr	r3, [pc, #88]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a768:	637b      	str	r3, [r7, #52]	; 0x34
 800a76a:	f000 bca2 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800a76e:	4b13      	ldr	r3, [pc, #76]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 0320 	and.w	r3, r3, #32
 800a776:	2b20      	cmp	r3, #32
 800a778:	d11c      	bne.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800a77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a780:	d118      	bne.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a782:	4b0e      	ldr	r3, [pc, #56]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d005      	beq.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800a78e:	4b0b      	ldr	r3, [pc, #44]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	0e1b      	lsrs	r3, r3, #24
 800a794:	f003 030f 	and.w	r3, r3, #15
 800a798:	e006      	b.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800a79a:	4b08      	ldr	r3, [pc, #32]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a79c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a7a0:	041b      	lsls	r3, r3, #16
 800a7a2:	0e1b      	lsrs	r3, r3, #24
 800a7a4:	f003 030f 	and.w	r3, r3, #15
 800a7a8:	4a06      	ldr	r2, [pc, #24]	; (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a7aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7ae:	637b      	str	r3, [r7, #52]	; 0x34
 800a7b0:	f000 bc7f 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	637b      	str	r3, [r7, #52]	; 0x34
 800a7b8:	f000 bc7b 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a7bc:	46020c00 	.word	0x46020c00
 800a7c0:	00f42400 	.word	0x00f42400
 800a7c4:	0800ce60 	.word	0x0800ce60
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800a7c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7cc:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800a7d0:	430b      	orrs	r3, r1
 800a7d2:	d14c      	bne.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800a7d4:	4ba6      	ldr	r3, [pc, #664]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a7d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a7da:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a7de:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d104      	bne.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a7e6:	f7fd fca9 	bl	800813c <HAL_RCC_GetPCLK1Freq>
 800a7ea:	6378      	str	r0, [r7, #52]	; 0x34
 800a7ec:	f000 bc61 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a7f6:	d104      	bne.n	800a802 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a7f8:	f7fd fb84 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 800a7fc:	6378      	str	r0, [r7, #52]	; 0x34
 800a7fe:	f000 bc58 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800a802:	4b9b      	ldr	r3, [pc, #620]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a80a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a80e:	d107      	bne.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800a810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a812:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a816:	d103      	bne.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800a818:	4b96      	ldr	r3, [pc, #600]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800a81a:	637b      	str	r3, [r7, #52]	; 0x34
 800a81c:	f000 bc49 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800a820:	4b93      	ldr	r3, [pc, #588]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 0320 	and.w	r3, r3, #32
 800a828:	2b20      	cmp	r3, #32
 800a82a:	d11c      	bne.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800a82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a832:	d118      	bne.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a834:	4b8e      	ldr	r3, [pc, #568]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d005      	beq.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800a840:	4b8b      	ldr	r3, [pc, #556]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	0e1b      	lsrs	r3, r3, #24
 800a846:	f003 030f 	and.w	r3, r3, #15
 800a84a:	e006      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800a84c:	4b88      	ldr	r3, [pc, #544]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a84e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a852:	041b      	lsls	r3, r3, #16
 800a854:	0e1b      	lsrs	r3, r3, #24
 800a856:	f003 030f 	and.w	r3, r3, #15
 800a85a:	4a87      	ldr	r2, [pc, #540]	; (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800a85c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a860:	637b      	str	r3, [r7, #52]	; 0x34
 800a862:	f000 bc26 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800a866:	2300      	movs	r3, #0
 800a868:	637b      	str	r3, [r7, #52]	; 0x34
 800a86a:	f000 bc22 	b.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800a86e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a872:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a876:	430b      	orrs	r3, r1
 800a878:	d164      	bne.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800a87a:	4b7d      	ldr	r3, [pc, #500]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a87c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a884:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d120      	bne.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a88c:	4b78      	ldr	r3, [pc, #480]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 0320 	and.w	r3, r3, #32
 800a894:	2b20      	cmp	r3, #32
 800a896:	d117      	bne.n	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a898:	4b75      	ldr	r3, [pc, #468]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d005      	beq.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800a8a4:	4b72      	ldr	r3, [pc, #456]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	0e1b      	lsrs	r3, r3, #24
 800a8aa:	f003 030f 	and.w	r3, r3, #15
 800a8ae:	e006      	b.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800a8b0:	4b6f      	ldr	r3, [pc, #444]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a8b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a8b6:	041b      	lsls	r3, r3, #16
 800a8b8:	0e1b      	lsrs	r3, r3, #24
 800a8ba:	f003 030f 	and.w	r3, r3, #15
 800a8be:	4a6e      	ldr	r2, [pc, #440]	; (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800a8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a8c6:	e3f4      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a8cc:	e3f1      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800a8ce:	4b68      	ldr	r3, [pc, #416]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a8d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a8d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8dc:	d112      	bne.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800a8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8e4:	d10e      	bne.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a8e6:	4b62      	ldr	r3, [pc, #392]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a8e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a8ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8f4:	d102      	bne.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800a8f6:	23fa      	movs	r3, #250	; 0xfa
 800a8f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a8fa:	e3da      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800a8fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a900:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a902:	e3d6      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800a904:	4b5a      	ldr	r3, [pc, #360]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a90c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a910:	d106      	bne.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a918:	d102      	bne.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800a91a:	4b56      	ldr	r3, [pc, #344]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800a91c:	637b      	str	r3, [r7, #52]	; 0x34
 800a91e:	e3c8      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800a920:	4b53      	ldr	r3, [pc, #332]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a926:	f003 0302 	and.w	r3, r3, #2
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d107      	bne.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800a92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a934:	d103      	bne.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800a936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a93a:	637b      	str	r3, [r7, #52]	; 0x34
 800a93c:	e3b9      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800a93e:	2300      	movs	r3, #0
 800a940:	637b      	str	r3, [r7, #52]	; 0x34
 800a942:	e3b6      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800a944:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a948:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a94c:	430b      	orrs	r3, r1
 800a94e:	d164      	bne.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a950:	4b47      	ldr	r3, [pc, #284]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a952:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a956:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a95a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800a95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d120      	bne.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a962:	4b43      	ldr	r3, [pc, #268]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 0320 	and.w	r3, r3, #32
 800a96a:	2b20      	cmp	r3, #32
 800a96c:	d117      	bne.n	800a99e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a96e:	4b40      	ldr	r3, [pc, #256]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a976:	2b00      	cmp	r3, #0
 800a978:	d005      	beq.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800a97a:	4b3d      	ldr	r3, [pc, #244]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	0e1b      	lsrs	r3, r3, #24
 800a980:	f003 030f 	and.w	r3, r3, #15
 800a984:	e006      	b.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800a986:	4b3a      	ldr	r3, [pc, #232]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a988:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a98c:	041b      	lsls	r3, r3, #16
 800a98e:	0e1b      	lsrs	r3, r3, #24
 800a990:	f003 030f 	and.w	r3, r3, #15
 800a994:	4a38      	ldr	r2, [pc, #224]	; (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800a996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a99a:	637b      	str	r3, [r7, #52]	; 0x34
 800a99c:	e389      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	637b      	str	r3, [r7, #52]	; 0x34
 800a9a2:	e386      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800a9a4:	4b32      	ldr	r3, [pc, #200]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a9a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a9aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9b2:	d112      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9ba:	d10e      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a9bc:	4b2c      	ldr	r3, [pc, #176]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a9be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a9c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9ca:	d102      	bne.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800a9cc:	23fa      	movs	r3, #250	; 0xfa
 800a9ce:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a9d0:	e36f      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800a9d2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a9d6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a9d8:	e36b      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800a9da:	4b25      	ldr	r3, [pc, #148]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9e6:	d106      	bne.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9ee:	d102      	bne.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800a9f0:	4b20      	ldr	r3, [pc, #128]	; (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800a9f2:	637b      	str	r3, [r7, #52]	; 0x34
 800a9f4:	e35d      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800a9f6:	4b1e      	ldr	r3, [pc, #120]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a9f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a9fc:	f003 0302 	and.w	r3, r3, #2
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d107      	bne.n	800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800aa04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa0a:	d103      	bne.n	800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800aa0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa10:	637b      	str	r3, [r7, #52]	; 0x34
 800aa12:	e34e      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800aa14:	2300      	movs	r3, #0
 800aa16:	637b      	str	r3, [r7, #52]	; 0x34
 800aa18:	e34b      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800aa1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa1e:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800aa22:	430b      	orrs	r3, r1
 800aa24:	d14e      	bne.n	800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800aa26:	4b12      	ldr	r3, [pc, #72]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aa28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa2c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800aa30:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d103      	bne.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800aa38:	f7fd fb80 	bl	800813c <HAL_RCC_GetPCLK1Freq>
 800aa3c:	6378      	str	r0, [r7, #52]	; 0x34
 800aa3e:	e338      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800aa40:	4b0b      	ldr	r3, [pc, #44]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aa42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aa46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa4e:	d119      	bne.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800aa50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa56:	d115      	bne.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa58:	4b05      	ldr	r3, [pc, #20]	; (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aa5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aa5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa66:	d109      	bne.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800aa68:	23fa      	movs	r3, #250	; 0xfa
 800aa6a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa6c:	e321      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800aa6e:	bf00      	nop
 800aa70:	46020c00 	.word	0x46020c00
 800aa74:	00f42400 	.word	0x00f42400
 800aa78:	0800ce60 	.word	0x0800ce60
      }
      else
      {
        frequency = LSI_VALUE;
 800aa7c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800aa80:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa82:	e316      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800aa84:	4ba8      	ldr	r3, [pc, #672]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa90:	d106      	bne.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800aa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aa98:	d102      	bne.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800aa9a:	4ba4      	ldr	r3, [pc, #656]	; (800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800aa9c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa9e:	e308      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800aaa0:	4ba1      	ldr	r3, [pc, #644]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aaa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aaa6:	f003 0302 	and.w	r3, r3, #2
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d107      	bne.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800aaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800aab4:	d103      	bne.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800aab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaba:	637b      	str	r3, [r7, #52]	; 0x34
 800aabc:	e2f9      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800aabe:	2300      	movs	r3, #0
 800aac0:	637b      	str	r3, [r7, #52]	; 0x34
 800aac2:	e2f6      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800aac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aac8:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800aacc:	430b      	orrs	r3, r1
 800aace:	d12d      	bne.n	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800aad0:	4b95      	ldr	r3, [pc, #596]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aad6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800aada:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800aadc:	4b92      	ldr	r3, [pc, #584]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aae4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aae8:	d105      	bne.n	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800aaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d102      	bne.n	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800aaf0:	4b8e      	ldr	r3, [pc, #568]	; (800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800aaf2:	637b      	str	r3, [r7, #52]	; 0x34
 800aaf4:	e2dd      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aafc:	d107      	bne.n	800ab0e <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aafe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7fe fb4c 	bl	80091a0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ab0c:	e2d1      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab14:	d107      	bne.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab16:	f107 0318 	add.w	r3, r7, #24
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fe fc9a 	bl	8009454 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	637b      	str	r3, [r7, #52]	; 0x34
 800ab24:	e2c5      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800ab26:	2300      	movs	r3, #0
 800ab28:	637b      	str	r3, [r7, #52]	; 0x34
 800ab2a:	e2c2      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800ab2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab30:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800ab34:	430b      	orrs	r3, r1
 800ab36:	d156      	bne.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800ab38:	4b7b      	ldr	r3, [pc, #492]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ab3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab3e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ab42:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800ab44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab4a:	d028      	beq.n	800ab9e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800ab4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab52:	d845      	bhi.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800ab54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab5a:	d013      	beq.n	800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800ab5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab62:	d83d      	bhi.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800ab64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d004      	beq.n	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab70:	d004      	beq.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800ab72:	e035      	b.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800ab74:	f7fd faf6 	bl	8008164 <HAL_RCC_GetPCLK2Freq>
 800ab78:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ab7a:	e29a      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ab7c:	f7fd f9c2 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 800ab80:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ab82:	e296      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab84:	4b68      	ldr	r3, [pc, #416]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab90:	d102      	bne.n	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800ab92:	4b66      	ldr	r3, [pc, #408]	; (800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800ab94:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ab96:	e28c      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab9c:	e289      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ab9e:	4b62      	ldr	r3, [pc, #392]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 0320 	and.w	r3, r3, #32
 800aba6:	2b20      	cmp	r3, #32
 800aba8:	d117      	bne.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800abaa:	4b5f      	ldr	r3, [pc, #380]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d005      	beq.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800abb6:	4b5c      	ldr	r3, [pc, #368]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	0e1b      	lsrs	r3, r3, #24
 800abbc:	f003 030f 	and.w	r3, r3, #15
 800abc0:	e006      	b.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800abc2:	4b59      	ldr	r3, [pc, #356]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800abc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800abc8:	041b      	lsls	r3, r3, #16
 800abca:	0e1b      	lsrs	r3, r3, #24
 800abcc:	f003 030f 	and.w	r3, r3, #15
 800abd0:	4a57      	ldr	r2, [pc, #348]	; (800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800abd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abd6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800abd8:	e26b      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800abda:	2300      	movs	r3, #0
 800abdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800abde:	e268      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800abe0:	2300      	movs	r3, #0
 800abe2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800abe4:	e265      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800abe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abea:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800abee:	430b      	orrs	r3, r1
 800abf0:	d156      	bne.n	800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800abf2:	4b4d      	ldr	r3, [pc, #308]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800abf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800abf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800abfc:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800abfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac04:	d028      	beq.n	800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800ac06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac0c:	d845      	bhi.n	800ac9a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac14:	d013      	beq.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac1c:	d83d      	bhi.n	800ac9a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800ac1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d004      	beq.n	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800ac24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac2a:	d004      	beq.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800ac2c:	e035      	b.n	800ac9a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800ac2e:	f7fd fa85 	bl	800813c <HAL_RCC_GetPCLK1Freq>
 800ac32:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ac34:	e23d      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ac36:	f7fd f965 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 800ac3a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ac3c:	e239      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac3e:	4b3a      	ldr	r3, [pc, #232]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac4a:	d102      	bne.n	800ac52 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800ac4c:	4b37      	ldr	r3, [pc, #220]	; (800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800ac4e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ac50:	e22f      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ac52:	2300      	movs	r3, #0
 800ac54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac56:	e22c      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ac58:	4b33      	ldr	r3, [pc, #204]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 0320 	and.w	r3, r3, #32
 800ac60:	2b20      	cmp	r3, #32
 800ac62:	d117      	bne.n	800ac94 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ac64:	4b30      	ldr	r3, [pc, #192]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d005      	beq.n	800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800ac70:	4b2d      	ldr	r3, [pc, #180]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	0e1b      	lsrs	r3, r3, #24
 800ac76:	f003 030f 	and.w	r3, r3, #15
 800ac7a:	e006      	b.n	800ac8a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800ac7c:	4b2a      	ldr	r3, [pc, #168]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac82:	041b      	lsls	r3, r3, #16
 800ac84:	0e1b      	lsrs	r3, r3, #24
 800ac86:	f003 030f 	and.w	r3, r3, #15
 800ac8a:	4a29      	ldr	r2, [pc, #164]	; (800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800ac8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac90:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ac92:	e20e      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ac94:	2300      	movs	r3, #0
 800ac96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac98:	e20b      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac9e:	e208      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800aca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aca4:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800aca8:	430b      	orrs	r3, r1
 800acaa:	d17c      	bne.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800acac:	4b1e      	ldr	r3, [pc, #120]	; (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800acae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800acb2:	f003 0318 	and.w	r3, r3, #24
 800acb6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800acb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acba:	2b18      	cmp	r3, #24
 800acbc:	d870      	bhi.n	800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800acbe:	a201      	add	r2, pc, #4	; (adr r2, 800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800acc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc4:	0800ad35 	.word	0x0800ad35
 800acc8:	0800ada1 	.word	0x0800ada1
 800accc:	0800ada1 	.word	0x0800ada1
 800acd0:	0800ada1 	.word	0x0800ada1
 800acd4:	0800ada1 	.word	0x0800ada1
 800acd8:	0800ada1 	.word	0x0800ada1
 800acdc:	0800ada1 	.word	0x0800ada1
 800ace0:	0800ada1 	.word	0x0800ada1
 800ace4:	0800ad3d 	.word	0x0800ad3d
 800ace8:	0800ada1 	.word	0x0800ada1
 800acec:	0800ada1 	.word	0x0800ada1
 800acf0:	0800ada1 	.word	0x0800ada1
 800acf4:	0800ada1 	.word	0x0800ada1
 800acf8:	0800ada1 	.word	0x0800ada1
 800acfc:	0800ada1 	.word	0x0800ada1
 800ad00:	0800ada1 	.word	0x0800ada1
 800ad04:	0800ad45 	.word	0x0800ad45
 800ad08:	0800ada1 	.word	0x0800ada1
 800ad0c:	0800ada1 	.word	0x0800ada1
 800ad10:	0800ada1 	.word	0x0800ada1
 800ad14:	0800ada1 	.word	0x0800ada1
 800ad18:	0800ada1 	.word	0x0800ada1
 800ad1c:	0800ada1 	.word	0x0800ada1
 800ad20:	0800ada1 	.word	0x0800ada1
 800ad24:	0800ad5f 	.word	0x0800ad5f
 800ad28:	46020c00 	.word	0x46020c00
 800ad2c:	00f42400 	.word	0x00f42400
 800ad30:	0800ce60 	.word	0x0800ce60
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800ad34:	f7fd fa2a 	bl	800818c <HAL_RCC_GetPCLK3Freq>
 800ad38:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ad3a:	e1ba      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ad3c:	f7fd f8e2 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 800ad40:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ad42:	e1b6      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad44:	4b9f      	ldr	r3, [pc, #636]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad50:	d102      	bne.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800ad52:	4b9d      	ldr	r3, [pc, #628]	; (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800ad54:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ad56:	e1ac      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad5c:	e1a9      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ad5e:	4b99      	ldr	r3, [pc, #612]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0320 	and.w	r3, r3, #32
 800ad66:	2b20      	cmp	r3, #32
 800ad68:	d117      	bne.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ad6a:	4b96      	ldr	r3, [pc, #600]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d005      	beq.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800ad76:	4b93      	ldr	r3, [pc, #588]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	0e1b      	lsrs	r3, r3, #24
 800ad7c:	f003 030f 	and.w	r3, r3, #15
 800ad80:	e006      	b.n	800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800ad82:	4b90      	ldr	r3, [pc, #576]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ad84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ad88:	041b      	lsls	r3, r3, #16
 800ad8a:	0e1b      	lsrs	r3, r3, #24
 800ad8c:	f003 030f 	and.w	r3, r3, #15
 800ad90:	4a8e      	ldr	r2, [pc, #568]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800ad92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad96:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ad98:	e18b      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad9e:	e188      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ada0:	2300      	movs	r3, #0
 800ada2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ada4:	e185      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800ada6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adaa:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800adae:	430b      	orrs	r3, r1
 800adb0:	d155      	bne.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800adb2:	4b84      	ldr	r3, [pc, #528]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800adb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800adb8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800adbc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800adc4:	d013      	beq.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800adc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800adcc:	d844      	bhi.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800add4:	d013      	beq.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800add6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800addc:	d83c      	bhi.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800adde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d014      	beq.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800ade4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adea:	d014      	beq.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800adec:	e034      	b.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adee:	f107 0318 	add.w	r3, r7, #24
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fe fb2e 	bl	8009454 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800adfc:	e159      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7fe f9cc 	bl	80091a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae0c:	e151      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ae0e:	f7fd f879 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 800ae12:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ae14:	e14d      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ae16:	4b6b      	ldr	r3, [pc, #428]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 0320 	and.w	r3, r3, #32
 800ae1e:	2b20      	cmp	r3, #32
 800ae20:	d117      	bne.n	800ae52 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ae22:	4b68      	ldr	r3, [pc, #416]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d005      	beq.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800ae2e:	4b65      	ldr	r3, [pc, #404]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	0e1b      	lsrs	r3, r3, #24
 800ae34:	f003 030f 	and.w	r3, r3, #15
 800ae38:	e006      	b.n	800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800ae3a:	4b62      	ldr	r3, [pc, #392]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ae3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ae40:	041b      	lsls	r3, r3, #16
 800ae42:	0e1b      	lsrs	r3, r3, #24
 800ae44:	f003 030f 	and.w	r3, r3, #15
 800ae48:	4a60      	ldr	r2, [pc, #384]	; (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800ae4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae4e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ae50:	e12f      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ae52:	2300      	movs	r3, #0
 800ae54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae56:	e12c      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae5c:	e129      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800ae5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae62:	1e59      	subs	r1, r3, #1
 800ae64:	ea52 0301 	orrs.w	r3, r2, r1
 800ae68:	d13c      	bne.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800ae6a:	4b56      	ldr	r3, [pc, #344]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ae6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ae70:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800ae74:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ae76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ae7c:	d027      	beq.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ae84:	d82b      	bhi.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800ae86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae8c:	d017      	beq.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae94:	d823      	bhi.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800ae96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d004      	beq.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aea2:	d004      	beq.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800aea4:	e01b      	b.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800aea6:	f7fd f82d 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 800aeaa:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800aeac:	e101      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aeae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fe f974 	bl	80091a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800aeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aebc:	e0f9      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aebe:	f107 0318 	add.w	r3, r7, #24
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fe fac6 	bl	8009454 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aecc:	e0f1      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aece:	f107 030c 	add.w	r3, r7, #12
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fe fc18 	bl	8009708 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aedc:	e0e9      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800aede:	2300      	movs	r3, #0
 800aee0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aee2:	e0e6      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800aee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aee8:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800aeec:	430b      	orrs	r3, r1
 800aeee:	d131      	bne.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800aef0:	4b34      	ldr	r3, [pc, #208]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800aef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aefa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800aefc:	4b31      	ldr	r3, [pc, #196]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800aefe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af02:	f003 0302 	and.w	r3, r3, #2
 800af06:	2b02      	cmp	r3, #2
 800af08:	d106      	bne.n	800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800af0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d103      	bne.n	800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800af10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af14:	637b      	str	r3, [r7, #52]	; 0x34
 800af16:	e0cc      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800af18:	4b2a      	ldr	r3, [pc, #168]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800af1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af26:	d112      	bne.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800af28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af2e:	d10e      	bne.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af30:	4b24      	ldr	r3, [pc, #144]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800af32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af3e:	d102      	bne.n	800af46 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800af40:	23fa      	movs	r3, #250	; 0xfa
 800af42:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af44:	e0b5      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800af46:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800af4a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af4c:	e0b1      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800af4e:	2300      	movs	r3, #0
 800af50:	637b      	str	r3, [r7, #52]	; 0x34
 800af52:	e0ae      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800af54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af58:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800af5c:	430b      	orrs	r3, r1
 800af5e:	d13b      	bne.n	800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800af60:	4b18      	ldr	r3, [pc, #96]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800af62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800af66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800af6a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800af6c:	4b15      	ldr	r3, [pc, #84]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af78:	d105      	bne.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d102      	bne.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800af80:	4b13      	ldr	r3, [pc, #76]	; (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800af82:	637b      	str	r3, [r7, #52]	; 0x34
 800af84:	e095      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800af86:	4b0f      	ldr	r3, [pc, #60]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af92:	d106      	bne.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800af94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af9a:	d102      	bne.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800af9c:	4b0d      	ldr	r3, [pc, #52]	; (800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800af9e:	637b      	str	r3, [r7, #52]	; 0x34
 800afa0:	e087      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800afa2:	4b08      	ldr	r3, [pc, #32]	; (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afae:	d106      	bne.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800afb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afb6:	d102      	bne.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800afb8:	4b03      	ldr	r3, [pc, #12]	; (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800afba:	637b      	str	r3, [r7, #52]	; 0x34
 800afbc:	e079      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800afbe:	2300      	movs	r3, #0
 800afc0:	637b      	str	r3, [r7, #52]	; 0x34
 800afc2:	e076      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800afc4:	46020c00 	.word	0x46020c00
 800afc8:	00f42400 	.word	0x00f42400
 800afcc:	0800ce60 	.word	0x0800ce60
 800afd0:	02dc6c00 	.word	0x02dc6c00
 800afd4:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800afd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afdc:	1e99      	subs	r1, r3, #2
 800afde:	ea52 0301 	orrs.w	r3, r2, r1
 800afe2:	d120      	bne.n	800b026 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800afe4:	4b35      	ldr	r3, [pc, #212]	; (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800afe6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800afea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800afee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800aff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d004      	beq.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800aff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800affc:	d008      	beq.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800affe:	e00f      	b.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b000:	f107 030c 	add.w	r3, r7, #12
 800b004:	4618      	mov	r0, r3
 800b006:	f7fe fb7f 	bl	8009708 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b00e:	e050      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b010:	f107 0318 	add.w	r3, r7, #24
 800b014:	4618      	mov	r0, r3
 800b016:	f7fe fa1d 	bl	8009454 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800b01a:	6a3b      	ldr	r3, [r7, #32]
 800b01c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b01e:	e048      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b020:	2300      	movs	r3, #0
 800b022:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b024:	e045      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800b026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b02a:	f1a3 0108 	sub.w	r1, r3, #8
 800b02e:	ea52 0301 	orrs.w	r3, r2, r1
 800b032:	d13c      	bne.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800b034:	4b21      	ldr	r3, [pc, #132]	; (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b036:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b03a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b03e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800b040:	4b1e      	ldr	r3, [pc, #120]	; (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b048:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b04c:	d105      	bne.n	800b05a <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b050:	2b00      	cmp	r3, #0
 800b052:	d102      	bne.n	800b05a <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800b054:	4b1a      	ldr	r3, [pc, #104]	; (800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800b056:	637b      	str	r3, [r7, #52]	; 0x34
 800b058:	e02b      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800b05a:	4b18      	ldr	r3, [pc, #96]	; (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b066:	d106      	bne.n	800b076 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800b068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b06e:	d102      	bne.n	800b076 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800b070:	4b14      	ldr	r3, [pc, #80]	; (800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800b072:	637b      	str	r3, [r7, #52]	; 0x34
 800b074:	e01d      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800b076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b07c:	d107      	bne.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b07e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b082:	4618      	mov	r0, r3
 800b084:	f7fe f88c 	bl	80091a0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08a:	637b      	str	r3, [r7, #52]	; 0x34
 800b08c:	e011      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800b08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b090:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800b094:	d108      	bne.n	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fe f880 	bl	80091a0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	085b      	lsrs	r3, r3, #1
 800b0a4:	637b      	str	r3, [r7, #52]	; 0x34
 800b0a6:	e004      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	637b      	str	r3, [r7, #52]	; 0x34
 800b0ac:	e001      	b.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800b0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3738      	adds	r7, #56	; 0x38
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}
 800b0bc:	46020c00 	.word	0x46020c00
 800b0c0:	00f42400 	.word	0x00f42400
 800b0c4:	007a1200 	.word	0x007a1200

0800b0c8 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800b0cc:	4b06      	ldr	r3, [pc, #24]	; (800b0e8 <HAL_RCCEx_EnableLSECSS+0x20>)
 800b0ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b0d2:	4a05      	ldr	r2, [pc, #20]	; (800b0e8 <HAL_RCCEx_EnableLSECSS+0x20>)
 800b0d4:	f043 0320 	orr.w	r3, r3, #32
 800b0d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 800b0dc:	bf00      	nop
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	46020c00 	.word	0x46020c00

0800b0ec <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(const RCC_CRSInitTypeDef *const pInit)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800b0f4:	4b1c      	ldr	r3, [pc, #112]	; (800b168 <HAL_RCCEx_CRSConfig+0x7c>)
 800b0f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0f8:	4a1b      	ldr	r2, [pc, #108]	; (800b168 <HAL_RCCEx_CRSConfig+0x7c>)
 800b0fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0fe:	6753      	str	r3, [r2, #116]	; 0x74
  __HAL_RCC_CRS_RELEASE_RESET();
 800b100:	4b19      	ldr	r3, [pc, #100]	; (800b168 <HAL_RCCEx_CRSConfig+0x7c>)
 800b102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b104:	4a18      	ldr	r2, [pc, #96]	; (800b168 <HAL_RCCEx_CRSConfig+0x7c>)
 800b106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b10a:	6753      	str	r3, [r2, #116]	; 0x74

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	431a      	orrs	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	68fa      	ldr	r2, [r7, #12]
 800b124:	4313      	orrs	r3, r2
 800b126:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	691b      	ldr	r3, [r3, #16]
 800b12c:	041b      	lsls	r3, r3, #16
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	4313      	orrs	r3, r2
 800b132:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800b134:	4a0d      	ldr	r2, [pc, #52]	; (800b16c <HAL_RCCEx_CRSConfig+0x80>)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800b13a:	4b0c      	ldr	r3, [pc, #48]	; (800b16c <HAL_RCCEx_CRSConfig+0x80>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	695b      	ldr	r3, [r3, #20]
 800b146:	021b      	lsls	r3, r3, #8
 800b148:	4908      	ldr	r1, [pc, #32]	; (800b16c <HAL_RCCEx_CRSConfig+0x80>)
 800b14a:	4313      	orrs	r3, r2
 800b14c:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800b14e:	4b07      	ldr	r3, [pc, #28]	; (800b16c <HAL_RCCEx_CRSConfig+0x80>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a06      	ldr	r2, [pc, #24]	; (800b16c <HAL_RCCEx_CRSConfig+0x80>)
 800b154:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b158:	6013      	str	r3, [r2, #0]
}
 800b15a:	bf00      	nop
 800b15c:	3714      	adds	r7, #20
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	46020c00 	.word	0x46020c00
 800b16c:	40006000 	.word	0x40006000

0800b170 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800b178:	4b47      	ldr	r3, [pc, #284]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a46      	ldr	r2, [pc, #280]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b17e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b182:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b184:	f7f7 ff36 	bl	8002ff4 <HAL_GetTick>
 800b188:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b18a:	e008      	b.n	800b19e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b18c:	f7f7 ff32 	bl	8002ff4 <HAL_GetTick>
 800b190:	4602      	mov	r2, r0
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	1ad3      	subs	r3, r2, r3
 800b196:	2b02      	cmp	r3, #2
 800b198:	d901      	bls.n	800b19e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b19a:	2303      	movs	r3, #3
 800b19c:	e077      	b.n	800b28e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b19e:	4b3e      	ldr	r3, [pc, #248]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1f0      	bne.n	800b18c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b1aa:	4b3b      	ldr	r3, [pc, #236]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b1b2:	f023 0303 	bic.w	r3, r3, #3
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	6811      	ldr	r1, [r2, #0]
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	6852      	ldr	r2, [r2, #4]
 800b1be:	3a01      	subs	r2, #1
 800b1c0:	0212      	lsls	r2, r2, #8
 800b1c2:	430a      	orrs	r2, r1
 800b1c4:	4934      	ldr	r1, [pc, #208]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	62cb      	str	r3, [r1, #44]	; 0x2c
 800b1ca:	4b33      	ldr	r3, [pc, #204]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b1cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1ce:	4b33      	ldr	r3, [pc, #204]	; (800b29c <RCCEx_PLL2_Config+0x12c>)
 800b1d0:	4013      	ands	r3, r2
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	6892      	ldr	r2, [r2, #8]
 800b1d6:	3a01      	subs	r2, #1
 800b1d8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	68d2      	ldr	r2, [r2, #12]
 800b1e0:	3a01      	subs	r2, #1
 800b1e2:	0252      	lsls	r2, r2, #9
 800b1e4:	b292      	uxth	r2, r2
 800b1e6:	4311      	orrs	r1, r2
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	6912      	ldr	r2, [r2, #16]
 800b1ec:	3a01      	subs	r2, #1
 800b1ee:	0412      	lsls	r2, r2, #16
 800b1f0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b1f4:	4311      	orrs	r1, r2
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	6952      	ldr	r2, [r2, #20]
 800b1fa:	3a01      	subs	r2, #1
 800b1fc:	0612      	lsls	r2, r2, #24
 800b1fe:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b202:	430a      	orrs	r2, r1
 800b204:	4924      	ldr	r1, [pc, #144]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b206:	4313      	orrs	r3, r2
 800b208:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b20a:	4b23      	ldr	r3, [pc, #140]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20e:	f023 020c 	bic.w	r2, r3, #12
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	699b      	ldr	r3, [r3, #24]
 800b216:	4920      	ldr	r1, [pc, #128]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b218:	4313      	orrs	r3, r2
 800b21a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b21c:	4b1e      	ldr	r3, [pc, #120]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b21e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6a1b      	ldr	r3, [r3, #32]
 800b224:	491c      	ldr	r1, [pc, #112]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b226:	4313      	orrs	r3, r2
 800b228:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800b22a:	4b1b      	ldr	r3, [pc, #108]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22e:	4a1a      	ldr	r2, [pc, #104]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b230:	f023 0310 	bic.w	r3, r3, #16
 800b234:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b236:	4b18      	ldr	r3, [pc, #96]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b23a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b23e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	69d2      	ldr	r2, [r2, #28]
 800b246:	00d2      	lsls	r2, r2, #3
 800b248:	4913      	ldr	r1, [pc, #76]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b24a:	4313      	orrs	r3, r2
 800b24c:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800b24e:	4b12      	ldr	r3, [pc, #72]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b252:	4a11      	ldr	r2, [pc, #68]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b254:	f043 0310 	orr.w	r3, r3, #16
 800b258:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800b25a:	4b0f      	ldr	r3, [pc, #60]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a0e      	ldr	r2, [pc, #56]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b260:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b264:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b266:	f7f7 fec5 	bl	8002ff4 <HAL_GetTick>
 800b26a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b26c:	e008      	b.n	800b280 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b26e:	f7f7 fec1 	bl	8002ff4 <HAL_GetTick>
 800b272:	4602      	mov	r2, r0
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	1ad3      	subs	r3, r2, r3
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d901      	bls.n	800b280 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b27c:	2303      	movs	r3, #3
 800b27e:	e006      	b.n	800b28e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b280:	4b05      	ldr	r3, [pc, #20]	; (800b298 <RCCEx_PLL2_Config+0x128>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d0f0      	beq.n	800b26e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800b28c:	2300      	movs	r3, #0

}
 800b28e:	4618      	mov	r0, r3
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	46020c00 	.word	0x46020c00
 800b29c:	80800000 	.word	0x80800000

0800b2a0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800b2a8:	4b47      	ldr	r3, [pc, #284]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a46      	ldr	r2, [pc, #280]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b2ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2b2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b2b4:	f7f7 fe9e 	bl	8002ff4 <HAL_GetTick>
 800b2b8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2ba:	e008      	b.n	800b2ce <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b2bc:	f7f7 fe9a 	bl	8002ff4 <HAL_GetTick>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	1ad3      	subs	r3, r2, r3
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	d901      	bls.n	800b2ce <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	e077      	b.n	800b3be <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2ce:	4b3e      	ldr	r3, [pc, #248]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1f0      	bne.n	800b2bc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800b2da:	4b3b      	ldr	r3, [pc, #236]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b2e2:	f023 0303 	bic.w	r3, r3, #3
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	6811      	ldr	r1, [r2, #0]
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	6852      	ldr	r2, [r2, #4]
 800b2ee:	3a01      	subs	r2, #1
 800b2f0:	0212      	lsls	r2, r2, #8
 800b2f2:	430a      	orrs	r2, r1
 800b2f4:	4934      	ldr	r1, [pc, #208]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	630b      	str	r3, [r1, #48]	; 0x30
 800b2fa:	4b33      	ldr	r3, [pc, #204]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b2fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2fe:	4b33      	ldr	r3, [pc, #204]	; (800b3cc <RCCEx_PLL3_Config+0x12c>)
 800b300:	4013      	ands	r3, r2
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	6892      	ldr	r2, [r2, #8]
 800b306:	3a01      	subs	r2, #1
 800b308:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	68d2      	ldr	r2, [r2, #12]
 800b310:	3a01      	subs	r2, #1
 800b312:	0252      	lsls	r2, r2, #9
 800b314:	b292      	uxth	r2, r2
 800b316:	4311      	orrs	r1, r2
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	6912      	ldr	r2, [r2, #16]
 800b31c:	3a01      	subs	r2, #1
 800b31e:	0412      	lsls	r2, r2, #16
 800b320:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b324:	4311      	orrs	r1, r2
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	6952      	ldr	r2, [r2, #20]
 800b32a:	3a01      	subs	r2, #1
 800b32c:	0612      	lsls	r2, r2, #24
 800b32e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b332:	430a      	orrs	r2, r1
 800b334:	4924      	ldr	r1, [pc, #144]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b336:	4313      	orrs	r3, r2
 800b338:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800b33a:	4b23      	ldr	r3, [pc, #140]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b33e:	f023 020c 	bic.w	r2, r3, #12
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	699b      	ldr	r3, [r3, #24]
 800b346:	4920      	ldr	r1, [pc, #128]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b348:	4313      	orrs	r3, r2
 800b34a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800b34c:	4b1e      	ldr	r3, [pc, #120]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b34e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6a1b      	ldr	r3, [r3, #32]
 800b354:	491c      	ldr	r1, [pc, #112]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b356:	4313      	orrs	r3, r2
 800b358:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800b35a:	4b1b      	ldr	r3, [pc, #108]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b35e:	4a1a      	ldr	r2, [pc, #104]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b360:	f023 0310 	bic.w	r3, r3, #16
 800b364:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b366:	4b18      	ldr	r3, [pc, #96]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b36a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b36e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	69d2      	ldr	r2, [r2, #28]
 800b376:	00d2      	lsls	r2, r2, #3
 800b378:	4913      	ldr	r1, [pc, #76]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b37a:	4313      	orrs	r3, r2
 800b37c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800b37e:	4b12      	ldr	r3, [pc, #72]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b382:	4a11      	ldr	r2, [pc, #68]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b384:	f043 0310 	orr.w	r3, r3, #16
 800b388:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800b38a:	4b0f      	ldr	r3, [pc, #60]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a0e      	ldr	r2, [pc, #56]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b394:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b396:	f7f7 fe2d 	bl	8002ff4 <HAL_GetTick>
 800b39a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b39c:	e008      	b.n	800b3b0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b39e:	f7f7 fe29 	bl	8002ff4 <HAL_GetTick>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	1ad3      	subs	r3, r2, r3
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d901      	bls.n	800b3b0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b3ac:	2303      	movs	r3, #3
 800b3ae:	e006      	b.n	800b3be <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3b0:	4b05      	ldr	r3, [pc, #20]	; (800b3c8 <RCCEx_PLL3_Config+0x128>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d0f0      	beq.n	800b39e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	46020c00 	.word	0x46020c00
 800b3cc:	80800000 	.word	0x80800000

0800b3d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d071      	beq.n	800b4c6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d106      	bne.n	800b3fc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f7f7 fb82 	bl	8002b00 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2202      	movs	r2, #2
 800b400:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b404:	4b32      	ldr	r3, [pc, #200]	; (800b4d0 <HAL_RTC_Init+0x100>)
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	f003 0310 	and.w	r3, r3, #16
 800b40c:	2b10      	cmp	r3, #16
 800b40e:	d051      	beq.n	800b4b4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b410:	4b2f      	ldr	r3, [pc, #188]	; (800b4d0 <HAL_RTC_Init+0x100>)
 800b412:	22ca      	movs	r2, #202	; 0xca
 800b414:	625a      	str	r2, [r3, #36]	; 0x24
 800b416:	4b2e      	ldr	r3, [pc, #184]	; (800b4d0 <HAL_RTC_Init+0x100>)
 800b418:	2253      	movs	r2, #83	; 0x53
 800b41a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 f9ad 	bl	800b77c <RTC_EnterInitMode>
 800b422:	4603      	mov	r3, r0
 800b424:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800b426:	7bfb      	ldrb	r3, [r7, #15]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d13f      	bne.n	800b4ac <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800b42c:	4b28      	ldr	r3, [pc, #160]	; (800b4d0 <HAL_RTC_Init+0x100>)
 800b42e:	699b      	ldr	r3, [r3, #24]
 800b430:	4a27      	ldr	r2, [pc, #156]	; (800b4d0 <HAL_RTC_Init+0x100>)
 800b432:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800b436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b43a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800b43c:	4b24      	ldr	r3, [pc, #144]	; (800b4d0 <HAL_RTC_Init+0x100>)
 800b43e:	699a      	ldr	r2, [r3, #24]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6859      	ldr	r1, [r3, #4]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	691b      	ldr	r3, [r3, #16]
 800b448:	4319      	orrs	r1, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	699b      	ldr	r3, [r3, #24]
 800b44e:	430b      	orrs	r3, r1
 800b450:	491f      	ldr	r1, [pc, #124]	; (800b4d0 <HAL_RTC_Init+0x100>)
 800b452:	4313      	orrs	r3, r2
 800b454:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	68da      	ldr	r2, [r3, #12]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	041b      	lsls	r3, r3, #16
 800b460:	491b      	ldr	r1, [pc, #108]	; (800b4d0 <HAL_RTC_Init+0x100>)
 800b462:	4313      	orrs	r3, r2
 800b464:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800b466:	4b1a      	ldr	r3, [pc, #104]	; (800b4d0 <HAL_RTC_Init+0x100>)
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b476:	430b      	orrs	r3, r1
 800b478:	4915      	ldr	r1, [pc, #84]	; (800b4d0 <HAL_RTC_Init+0x100>)
 800b47a:	4313      	orrs	r3, r2
 800b47c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 f9b8 	bl	800b7f4 <RTC_ExitInitMode>
 800b484:	4603      	mov	r3, r0
 800b486:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800b488:	7bfb      	ldrb	r3, [r7, #15]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d10e      	bne.n	800b4ac <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800b48e:	4b10      	ldr	r3, [pc, #64]	; (800b4d0 <HAL_RTC_Init+0x100>)
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6a19      	ldr	r1, [r3, #32]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	69db      	ldr	r3, [r3, #28]
 800b49e:	4319      	orrs	r1, r3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	430b      	orrs	r3, r1
 800b4a6:	490a      	ldr	r1, [pc, #40]	; (800b4d0 <HAL_RTC_Init+0x100>)
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b4ac:	4b08      	ldr	r3, [pc, #32]	; (800b4d0 <HAL_RTC_Init+0x100>)
 800b4ae:	22ff      	movs	r2, #255	; 0xff
 800b4b0:	625a      	str	r2, [r3, #36]	; 0x24
 800b4b2:	e001      	b.n	800b4b8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b4b8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d103      	bne.n	800b4c6 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800b4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3710      	adds	r7, #16
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	46007800 	.word	0x46007800

0800b4d4 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b4d4:	b590      	push	{r4, r7, lr}
 800b4d6:	b087      	sub	sp, #28
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d101      	bne.n	800b4ee <HAL_RTC_SetTime+0x1a>
 800b4ea:	2302      	movs	r3, #2
 800b4ec:	e088      	b.n	800b600 <HAL_RTC_SetTime+0x12c>
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2202      	movs	r2, #2
 800b4fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b4fe:	4b42      	ldr	r3, [pc, #264]	; (800b608 <HAL_RTC_SetTime+0x134>)
 800b500:	22ca      	movs	r2, #202	; 0xca
 800b502:	625a      	str	r2, [r3, #36]	; 0x24
 800b504:	4b40      	ldr	r3, [pc, #256]	; (800b608 <HAL_RTC_SetTime+0x134>)
 800b506:	2253      	movs	r2, #83	; 0x53
 800b508:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f000 f936 	bl	800b77c <RTC_EnterInitMode>
 800b510:	4603      	mov	r3, r0
 800b512:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b514:	7cfb      	ldrb	r3, [r7, #19]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d163      	bne.n	800b5e2 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b51a:	4b3b      	ldr	r3, [pc, #236]	; (800b608 <HAL_RTC_SetTime+0x134>)
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b526:	d057      	beq.n	800b5d8 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d125      	bne.n	800b57a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b52e:	4b36      	ldr	r3, [pc, #216]	; (800b608 <HAL_RTC_SetTime+0x134>)
 800b530:	699b      	ldr	r3, [r3, #24]
 800b532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b536:	2b00      	cmp	r3, #0
 800b538:	d102      	bne.n	800b540 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	2200      	movs	r2, #0
 800b53e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	4618      	mov	r0, r3
 800b546:	f000 f993 	bl	800b870 <RTC_ByteToBcd2>
 800b54a:	4603      	mov	r3, r0
 800b54c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	785b      	ldrb	r3, [r3, #1]
 800b552:	4618      	mov	r0, r3
 800b554:	f000 f98c 	bl	800b870 <RTC_ByteToBcd2>
 800b558:	4603      	mov	r3, r0
 800b55a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b55c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	789b      	ldrb	r3, [r3, #2]
 800b562:	4618      	mov	r0, r3
 800b564:	f000 f984 	bl	800b870 <RTC_ByteToBcd2>
 800b568:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b56a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	78db      	ldrb	r3, [r3, #3]
 800b572:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b574:	4313      	orrs	r3, r2
 800b576:	617b      	str	r3, [r7, #20]
 800b578:	e017      	b.n	800b5aa <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b57a:	4b23      	ldr	r3, [pc, #140]	; (800b608 <HAL_RTC_SetTime+0x134>)
 800b57c:	699b      	ldr	r3, [r3, #24]
 800b57e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b582:	2b00      	cmp	r3, #0
 800b584:	d102      	bne.n	800b58c <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	2200      	movs	r2, #0
 800b58a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	785b      	ldrb	r3, [r3, #1]
 800b596:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b598:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b59a:	68ba      	ldr	r2, [r7, #8]
 800b59c:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b59e:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	78db      	ldrb	r3, [r3, #3]
 800b5a4:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800b5aa:	4a17      	ldr	r2, [pc, #92]	; (800b608 <HAL_RTC_SetTime+0x134>)
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b5b2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b5b6:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800b5b8:	4b13      	ldr	r3, [pc, #76]	; (800b608 <HAL_RTC_SetTime+0x134>)
 800b5ba:	699b      	ldr	r3, [r3, #24]
 800b5bc:	4a12      	ldr	r2, [pc, #72]	; (800b608 <HAL_RTC_SetTime+0x134>)
 800b5be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b5c2:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800b5c4:	4b10      	ldr	r3, [pc, #64]	; (800b608 <HAL_RTC_SetTime+0x134>)
 800b5c6:	699a      	ldr	r2, [r3, #24]
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	68d9      	ldr	r1, [r3, #12]
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	430b      	orrs	r3, r1
 800b5d2:	490d      	ldr	r1, [pc, #52]	; (800b608 <HAL_RTC_SetTime+0x134>)
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b5d8:	68f8      	ldr	r0, [r7, #12]
 800b5da:	f000 f90b 	bl	800b7f4 <RTC_ExitInitMode>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b5e2:	4b09      	ldr	r3, [pc, #36]	; (800b608 <HAL_RTC_SetTime+0x134>)
 800b5e4:	22ff      	movs	r2, #255	; 0xff
 800b5e6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b5e8:	7cfb      	ldrb	r3, [r7, #19]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d103      	bne.n	800b5f6 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800b5fe:	7cfb      	ldrb	r3, [r7, #19]
}
 800b600:	4618      	mov	r0, r3
 800b602:	371c      	adds	r7, #28
 800b604:	46bd      	mov	sp, r7
 800b606:	bd90      	pop	{r4, r7, pc}
 800b608:	46007800 	.word	0x46007800

0800b60c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b60c:	b590      	push	{r4, r7, lr}
 800b60e:	b087      	sub	sp, #28
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d101      	bne.n	800b626 <HAL_RTC_SetDate+0x1a>
 800b622:	2302      	movs	r3, #2
 800b624:	e071      	b.n	800b70a <HAL_RTC_SetDate+0xfe>
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2201      	movs	r2, #1
 800b62a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2202      	movs	r2, #2
 800b632:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10e      	bne.n	800b65a <HAL_RTC_SetDate+0x4e>
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	785b      	ldrb	r3, [r3, #1]
 800b640:	f003 0310 	and.w	r3, r3, #16
 800b644:	2b00      	cmp	r3, #0
 800b646:	d008      	beq.n	800b65a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	785b      	ldrb	r3, [r3, #1]
 800b64c:	f023 0310 	bic.w	r3, r3, #16
 800b650:	b2db      	uxtb	r3, r3
 800b652:	330a      	adds	r3, #10
 800b654:	b2da      	uxtb	r2, r3
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d11c      	bne.n	800b69a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	78db      	ldrb	r3, [r3, #3]
 800b664:	4618      	mov	r0, r3
 800b666:	f000 f903 	bl	800b870 <RTC_ByteToBcd2>
 800b66a:	4603      	mov	r3, r0
 800b66c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	785b      	ldrb	r3, [r3, #1]
 800b672:	4618      	mov	r0, r3
 800b674:	f000 f8fc 	bl	800b870 <RTC_ByteToBcd2>
 800b678:	4603      	mov	r3, r0
 800b67a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b67c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	789b      	ldrb	r3, [r3, #2]
 800b682:	4618      	mov	r0, r3
 800b684:	f000 f8f4 	bl	800b870 <RTC_ByteToBcd2>
 800b688:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b68a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b694:	4313      	orrs	r3, r2
 800b696:	617b      	str	r3, [r7, #20]
 800b698:	e00e      	b.n	800b6b8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	78db      	ldrb	r3, [r3, #3]
 800b69e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	785b      	ldrb	r3, [r3, #1]
 800b6a4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b6a6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800b6a8:	68ba      	ldr	r2, [r7, #8]
 800b6aa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b6ac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b6b8:	4b16      	ldr	r3, [pc, #88]	; (800b714 <HAL_RTC_SetDate+0x108>)
 800b6ba:	22ca      	movs	r2, #202	; 0xca
 800b6bc:	625a      	str	r2, [r3, #36]	; 0x24
 800b6be:	4b15      	ldr	r3, [pc, #84]	; (800b714 <HAL_RTC_SetDate+0x108>)
 800b6c0:	2253      	movs	r2, #83	; 0x53
 800b6c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f000 f859 	bl	800b77c <RTC_EnterInitMode>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b6ce:	7cfb      	ldrb	r3, [r7, #19]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10b      	bne.n	800b6ec <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800b6d4:	4a0f      	ldr	r2, [pc, #60]	; (800b714 <HAL_RTC_SetDate+0x108>)
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b6dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b6e0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f000 f886 	bl	800b7f4 <RTC_ExitInitMode>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6ec:	4b09      	ldr	r3, [pc, #36]	; (800b714 <HAL_RTC_SetDate+0x108>)
 800b6ee:	22ff      	movs	r2, #255	; 0xff
 800b6f0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b6f2:	7cfb      	ldrb	r3, [r7, #19]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d103      	bne.n	800b700 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2200      	movs	r2, #0
 800b704:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800b708:	7cfb      	ldrb	r3, [r7, #19]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	371c      	adds	r7, #28
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd90      	pop	{r4, r7, pc}
 800b712:	bf00      	nop
 800b714:	46007800 	.word	0x46007800

0800b718 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800b720:	4b15      	ldr	r3, [pc, #84]	; (800b778 <HAL_RTC_WaitForSynchro+0x60>)
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	4a14      	ldr	r2, [pc, #80]	; (800b778 <HAL_RTC_WaitForSynchro+0x60>)
 800b726:	f023 0320 	bic.w	r3, r3, #32
 800b72a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800b72c:	f7f7 fc62 	bl	8002ff4 <HAL_GetTick>
 800b730:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800b732:	e013      	b.n	800b75c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b734:	f7f7 fc5e 	bl	8002ff4 <HAL_GetTick>
 800b738:	4602      	mov	r2, r0
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	1ad3      	subs	r3, r2, r3
 800b73e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b742:	d90b      	bls.n	800b75c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800b744:	4b0c      	ldr	r3, [pc, #48]	; (800b778 <HAL_RTC_WaitForSynchro+0x60>)
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	f003 0320 	and.w	r3, r3, #32
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d10c      	bne.n	800b76a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2203      	movs	r2, #3
 800b754:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 800b758:	2303      	movs	r3, #3
 800b75a:	e008      	b.n	800b76e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800b75c:	4b06      	ldr	r3, [pc, #24]	; (800b778 <HAL_RTC_WaitForSynchro+0x60>)
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	f003 0320 	and.w	r3, r3, #32
 800b764:	2b00      	cmp	r3, #0
 800b766:	d0e5      	beq.n	800b734 <HAL_RTC_WaitForSynchro+0x1c>
 800b768:	e000      	b.n	800b76c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800b76a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	46007800 	.word	0x46007800

0800b77c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b784:	2300      	movs	r3, #0
 800b786:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800b788:	4b19      	ldr	r3, [pc, #100]	; (800b7f0 <RTC_EnterInitMode+0x74>)
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b790:	2b00      	cmp	r3, #0
 800b792:	d128      	bne.n	800b7e6 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b794:	4b16      	ldr	r3, [pc, #88]	; (800b7f0 <RTC_EnterInitMode+0x74>)
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	4a15      	ldr	r2, [pc, #84]	; (800b7f0 <RTC_EnterInitMode+0x74>)
 800b79a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b79e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800b7a0:	f7f7 fc28 	bl	8002ff4 <HAL_GetTick>
 800b7a4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b7a6:	e013      	b.n	800b7d0 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b7a8:	f7f7 fc24 	bl	8002ff4 <HAL_GetTick>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b7b6:	d90b      	bls.n	800b7d0 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800b7b8:	4b0d      	ldr	r3, [pc, #52]	; (800b7f0 <RTC_EnterInitMode+0x74>)
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10f      	bne.n	800b7e4 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2203      	movs	r2, #3
 800b7cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b7d0:	4b07      	ldr	r3, [pc, #28]	; (800b7f0 <RTC_EnterInitMode+0x74>)
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d104      	bne.n	800b7e6 <RTC_EnterInitMode+0x6a>
 800b7dc:	7bfb      	ldrb	r3, [r7, #15]
 800b7de:	2b03      	cmp	r3, #3
 800b7e0:	d1e2      	bne.n	800b7a8 <RTC_EnterInitMode+0x2c>
 800b7e2:	e000      	b.n	800b7e6 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800b7e4:	bf00      	nop
        }
      }
    }
  }

  return status;
 800b7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	46007800 	.word	0x46007800

0800b7f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b800:	4b1a      	ldr	r3, [pc, #104]	; (800b86c <RTC_ExitInitMode+0x78>)
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	4a19      	ldr	r2, [pc, #100]	; (800b86c <RTC_ExitInitMode+0x78>)
 800b806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b80a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b80c:	4b17      	ldr	r3, [pc, #92]	; (800b86c <RTC_ExitInitMode+0x78>)
 800b80e:	699b      	ldr	r3, [r3, #24]
 800b810:	f003 0320 	and.w	r3, r3, #32
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10c      	bne.n	800b832 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f7ff ff7d 	bl	800b718 <HAL_RTC_WaitForSynchro>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d01e      	beq.n	800b862 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2203      	movs	r2, #3
 800b828:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800b82c:	2303      	movs	r3, #3
 800b82e:	73fb      	strb	r3, [r7, #15]
 800b830:	e017      	b.n	800b862 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b832:	4b0e      	ldr	r3, [pc, #56]	; (800b86c <RTC_ExitInitMode+0x78>)
 800b834:	699b      	ldr	r3, [r3, #24]
 800b836:	4a0d      	ldr	r2, [pc, #52]	; (800b86c <RTC_ExitInitMode+0x78>)
 800b838:	f023 0320 	bic.w	r3, r3, #32
 800b83c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f7ff ff6a 	bl	800b718 <HAL_RTC_WaitForSynchro>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d005      	beq.n	800b856 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2203      	movs	r2, #3
 800b84e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800b852:	2303      	movs	r3, #3
 800b854:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b856:	4b05      	ldr	r3, [pc, #20]	; (800b86c <RTC_ExitInitMode+0x78>)
 800b858:	699b      	ldr	r3, [r3, #24]
 800b85a:	4a04      	ldr	r2, [pc, #16]	; (800b86c <RTC_ExitInitMode+0x78>)
 800b85c:	f043 0320 	orr.w	r3, r3, #32
 800b860:	6193      	str	r3, [r2, #24]
  }
  return status;
 800b862:	7bfb      	ldrb	r3, [r7, #15]
}
 800b864:	4618      	mov	r0, r3
 800b866:	3710      	adds	r7, #16
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	46007800 	.word	0x46007800

0800b870 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b870:	b480      	push	{r7}
 800b872:	b085      	sub	sp, #20
 800b874:	af00      	add	r7, sp, #0
 800b876:	4603      	mov	r3, r0
 800b878:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b87a:	2300      	movs	r3, #0
 800b87c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800b87e:	79fb      	ldrb	r3, [r7, #7]
 800b880:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800b882:	e005      	b.n	800b890 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	3301      	adds	r3, #1
 800b888:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800b88a:	7afb      	ldrb	r3, [r7, #11]
 800b88c:	3b0a      	subs	r3, #10
 800b88e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800b890:	7afb      	ldrb	r3, [r7, #11]
 800b892:	2b09      	cmp	r3, #9
 800b894:	d8f6      	bhi.n	800b884 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	011b      	lsls	r3, r3, #4
 800b89c:	b2da      	uxtb	r2, r3
 800b89e:	7afb      	ldrb	r3, [r7, #11]
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	b2db      	uxtb	r3, r3
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	4910      	ldr	r1, [pc, #64]	; (800b904 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	689a      	ldr	r2, [r3, #8]
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	431a      	orrs	r2, r3
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	699b      	ldr	r3, [r3, #24]
 800b8d6:	490c      	ldr	r1, [pc, #48]	; (800b908 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800b8dc:	4b0a      	ldr	r3, [pc, #40]	; (800b908 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800b8de:	6a1b      	ldr	r3, [r3, #32]
 800b8e0:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	6919      	ldr	r1, [r3, #16]
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	695b      	ldr	r3, [r3, #20]
 800b8ec:	041b      	lsls	r3, r3, #16
 800b8ee:	430b      	orrs	r3, r1
 800b8f0:	4905      	ldr	r1, [pc, #20]	; (800b908 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr
 800b904:	46007800 	.word	0x46007800
 800b908:	46007c00 	.word	0x46007c00

0800b90c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d101      	bne.n	800b91e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e0fb      	b.n	800bb16 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a7f      	ldr	r2, [pc, #508]	; (800bb20 <HAL_SPI_Init+0x214>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d004      	beq.n	800b932 <HAL_SPI_Init+0x26>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a7d      	ldr	r2, [pc, #500]	; (800bb24 <HAL_SPI_Init+0x218>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	e000      	b.n	800b934 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800b932:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a78      	ldr	r2, [pc, #480]	; (800bb20 <HAL_SPI_Init+0x214>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d004      	beq.n	800b94e <HAL_SPI_Init+0x42>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a76      	ldr	r2, [pc, #472]	; (800bb24 <HAL_SPI_Init+0x218>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d105      	bne.n	800b95a <HAL_SPI_Init+0x4e>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	2b0f      	cmp	r3, #15
 800b954:	d901      	bls.n	800b95a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800b956:	2301      	movs	r3, #1
 800b958:	e0dd      	b.n	800bb16 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 f8ec 	bl	800bb38 <SPI_GetPacketSize>
 800b960:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a6e      	ldr	r2, [pc, #440]	; (800bb20 <HAL_SPI_Init+0x214>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d004      	beq.n	800b976 <HAL_SPI_Init+0x6a>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4a6c      	ldr	r2, [pc, #432]	; (800bb24 <HAL_SPI_Init+0x218>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d102      	bne.n	800b97c <HAL_SPI_Init+0x70>
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2b08      	cmp	r3, #8
 800b97a:	d816      	bhi.n	800b9aa <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b980:	4a69      	ldr	r2, [pc, #420]	; (800bb28 <HAL_SPI_Init+0x21c>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d00e      	beq.n	800b9a4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a68      	ldr	r2, [pc, #416]	; (800bb2c <HAL_SPI_Init+0x220>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d009      	beq.n	800b9a4 <HAL_SPI_Init+0x98>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a66      	ldr	r2, [pc, #408]	; (800bb30 <HAL_SPI_Init+0x224>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d004      	beq.n	800b9a4 <HAL_SPI_Init+0x98>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a65      	ldr	r2, [pc, #404]	; (800bb34 <HAL_SPI_Init+0x228>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d104      	bne.n	800b9ae <HAL_SPI_Init+0xa2>
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2b10      	cmp	r3, #16
 800b9a8:	d901      	bls.n	800b9ae <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e0b3      	b.n	800bb16 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d106      	bne.n	800b9c8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f7f7 f8e8 	bl	8002b98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f022 0201 	bic.w	r2, r2, #1
 800b9de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b9ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	699b      	ldr	r3, [r3, #24]
 800b9f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9f4:	d119      	bne.n	800ba2a <HAL_SPI_Init+0x11e>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9fe:	d103      	bne.n	800ba08 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d008      	beq.n	800ba1a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10c      	bne.n	800ba2a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ba14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba18:	d107      	bne.n	800ba2a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ba28:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00f      	beq.n	800ba56 <HAL_SPI_Init+0x14a>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	2b06      	cmp	r3, #6
 800ba3c:	d90b      	bls.n	800ba56 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	430a      	orrs	r2, r1
 800ba52:	601a      	str	r2, [r3, #0]
 800ba54:	e007      	b.n	800ba66 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba64:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	69da      	ldr	r2, [r3, #28]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba6e:	431a      	orrs	r2, r3
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	431a      	orrs	r2, r3
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba78:	ea42 0103 	orr.w	r1, r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	68da      	ldr	r2, [r3, #12]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	430a      	orrs	r2, r1
 800ba86:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba90:	431a      	orrs	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba96:	431a      	orrs	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	699b      	ldr	r3, [r3, #24]
 800ba9c:	431a      	orrs	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	691b      	ldr	r3, [r3, #16]
 800baa2:	431a      	orrs	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	695b      	ldr	r3, [r3, #20]
 800baa8:	431a      	orrs	r2, r3
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6a1b      	ldr	r3, [r3, #32]
 800baae:	431a      	orrs	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	431a      	orrs	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baba:	431a      	orrs	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	431a      	orrs	r2, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bac6:	431a      	orrs	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bacc:	431a      	orrs	r2, r3
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bad2:	ea42 0103 	orr.w	r1, r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	430a      	orrs	r2, r1
 800bae0:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00a      	beq.n	800bb04 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	430a      	orrs	r2, r1
 800bb02:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	46002000 	.word	0x46002000
 800bb24:	56002000 	.word	0x56002000
 800bb28:	40013000 	.word	0x40013000
 800bb2c:	50013000 	.word	0x50013000
 800bb30:	40003800 	.word	0x40003800
 800bb34:	50003800 	.word	0x50003800

0800bb38 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb44:	095b      	lsrs	r3, r3, #5
 800bb46:	3301      	adds	r3, #1
 800bb48:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	3307      	adds	r3, #7
 800bb56:	08db      	lsrs	r3, r3, #3
 800bb58:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	fb02 f303 	mul.w	r3, r2, r3
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3714      	adds	r7, #20
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr

0800bb6e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800bb6e:	b480      	push	{r7}
 800bb70:	b083      	sub	sp, #12
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
 800bb76:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d12e      	bne.n	800bbe2 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d101      	bne.n	800bb92 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800bb8e:	2302      	movs	r3, #2
 800bb90:	e028      	b.n	800bbe4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2201      	movs	r2, #1
 800bb96:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2202      	movs	r2, #2
 800bb9e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f022 0201 	bic.w	r2, r2, #1
 800bbb0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800bbbe:	ea42 0103 	orr.w	r1, r2, r3
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	689a      	ldr	r2, [r3, #8]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	430a      	orrs	r2, r1
 800bbcc:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	e000      	b.n	800bbe4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800bbe2:	2301      	movs	r3, #1
  }
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d101      	bne.n	800bc02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e049      	b.n	800bc96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d106      	bne.n	800bc1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f841 	bl	800bc9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2202      	movs	r2, #2
 800bc20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	4610      	mov	r0, r2
 800bc30:	f000 fa58 	bl	800c0e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800bc9e:	b480      	push	{r7}
 800bca0:	b083      	sub	sp, #12
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800bca6:	bf00      	nop
 800bca8:	370c      	adds	r7, #12
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr
	...

0800bcb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d001      	beq.n	800bccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e072      	b.n	800bdb2 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2202      	movs	r2, #2
 800bcd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	68da      	ldr	r2, [r3, #12]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f042 0201 	orr.w	r2, r2, #1
 800bce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a35      	ldr	r2, [pc, #212]	; (800bdc0 <HAL_TIM_Base_Start_IT+0x10c>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d040      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0xbc>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a34      	ldr	r2, [pc, #208]	; (800bdc4 <HAL_TIM_Base_Start_IT+0x110>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d03b      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0xbc>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd00:	d036      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0xbc>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd0a:	d031      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0xbc>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a2d      	ldr	r2, [pc, #180]	; (800bdc8 <HAL_TIM_Base_Start_IT+0x114>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d02c      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0xbc>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a2c      	ldr	r2, [pc, #176]	; (800bdcc <HAL_TIM_Base_Start_IT+0x118>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d027      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0xbc>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a2a      	ldr	r2, [pc, #168]	; (800bdd0 <HAL_TIM_Base_Start_IT+0x11c>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d022      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0xbc>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a29      	ldr	r2, [pc, #164]	; (800bdd4 <HAL_TIM_Base_Start_IT+0x120>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d01d      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0xbc>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a27      	ldr	r2, [pc, #156]	; (800bdd8 <HAL_TIM_Base_Start_IT+0x124>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d018      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0xbc>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a26      	ldr	r2, [pc, #152]	; (800bddc <HAL_TIM_Base_Start_IT+0x128>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d013      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0xbc>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a24      	ldr	r2, [pc, #144]	; (800bde0 <HAL_TIM_Base_Start_IT+0x12c>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d00e      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0xbc>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a23      	ldr	r2, [pc, #140]	; (800bde4 <HAL_TIM_Base_Start_IT+0x130>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d009      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0xbc>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a21      	ldr	r2, [pc, #132]	; (800bde8 <HAL_TIM_Base_Start_IT+0x134>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d004      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0xbc>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a20      	ldr	r2, [pc, #128]	; (800bdec <HAL_TIM_Base_Start_IT+0x138>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d115      	bne.n	800bd9c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	689a      	ldr	r2, [r3, #8]
 800bd76:	4b1e      	ldr	r3, [pc, #120]	; (800bdf0 <HAL_TIM_Base_Start_IT+0x13c>)
 800bd78:	4013      	ands	r3, r2
 800bd7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2b06      	cmp	r3, #6
 800bd80:	d015      	beq.n	800bdae <HAL_TIM_Base_Start_IT+0xfa>
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd88:	d011      	beq.n	800bdae <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f042 0201 	orr.w	r2, r2, #1
 800bd98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd9a:	e008      	b.n	800bdae <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f042 0201 	orr.w	r2, r2, #1
 800bdaa:	601a      	str	r2, [r3, #0]
 800bdac:	e000      	b.n	800bdb0 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3714      	adds	r7, #20
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	40012c00 	.word	0x40012c00
 800bdc4:	50012c00 	.word	0x50012c00
 800bdc8:	40000400 	.word	0x40000400
 800bdcc:	50000400 	.word	0x50000400
 800bdd0:	40000800 	.word	0x40000800
 800bdd4:	50000800 	.word	0x50000800
 800bdd8:	40000c00 	.word	0x40000c00
 800bddc:	50000c00 	.word	0x50000c00
 800bde0:	40013400 	.word	0x40013400
 800bde4:	50013400 	.word	0x50013400
 800bde8:	40014000 	.word	0x40014000
 800bdec:	50014000 	.word	0x50014000
 800bdf0:	00010007 	.word	0x00010007

0800bdf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	691b      	ldr	r3, [r3, #16]
 800be0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	f003 0302 	and.w	r3, r3, #2
 800be12:	2b00      	cmp	r3, #0
 800be14:	d020      	beq.n	800be58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f003 0302 	and.w	r3, r3, #2
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d01b      	beq.n	800be58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f06f 0202 	mvn.w	r2, #2
 800be28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2201      	movs	r2, #1
 800be2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	699b      	ldr	r3, [r3, #24]
 800be36:	f003 0303 	and.w	r3, r3, #3
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d003      	beq.n	800be46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 f931 	bl	800c0a6 <HAL_TIM_IC_CaptureCallback>
 800be44:	e005      	b.n	800be52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 f923 	bl	800c092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 f934 	bl	800c0ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	f003 0304 	and.w	r3, r3, #4
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d020      	beq.n	800bea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f003 0304 	and.w	r3, r3, #4
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d01b      	beq.n	800bea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f06f 0204 	mvn.w	r2, #4
 800be74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2202      	movs	r2, #2
 800be7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	699b      	ldr	r3, [r3, #24]
 800be82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be86:	2b00      	cmp	r3, #0
 800be88:	d003      	beq.n	800be92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 f90b 	bl	800c0a6 <HAL_TIM_IC_CaptureCallback>
 800be90:	e005      	b.n	800be9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 f8fd 	bl	800c092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 f90e 	bl	800c0ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	f003 0308 	and.w	r3, r3, #8
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d020      	beq.n	800bef0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f003 0308 	and.w	r3, r3, #8
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d01b      	beq.n	800bef0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f06f 0208 	mvn.w	r2, #8
 800bec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2204      	movs	r2, #4
 800bec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	69db      	ldr	r3, [r3, #28]
 800bece:	f003 0303 	and.w	r3, r3, #3
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d003      	beq.n	800bede <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 f8e5 	bl	800c0a6 <HAL_TIM_IC_CaptureCallback>
 800bedc:	e005      	b.n	800beea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f8d7 	bl	800c092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 f8e8 	bl	800c0ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	f003 0310 	and.w	r3, r3, #16
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d020      	beq.n	800bf3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f003 0310 	and.w	r3, r3, #16
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d01b      	beq.n	800bf3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f06f 0210 	mvn.w	r2, #16
 800bf0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2208      	movs	r2, #8
 800bf12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	69db      	ldr	r3, [r3, #28]
 800bf1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d003      	beq.n	800bf2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 f8bf 	bl	800c0a6 <HAL_TIM_IC_CaptureCallback>
 800bf28:	e005      	b.n	800bf36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 f8b1 	bl	800c092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 f8c2 	bl	800c0ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	f003 0301 	and.w	r3, r3, #1
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00c      	beq.n	800bf60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f003 0301 	and.w	r3, r3, #1
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d007      	beq.n	800bf60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f06f 0201 	mvn.w	r2, #1
 800bf58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7f5 fdd2 	bl	8001b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d104      	bne.n	800bf74 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d00c      	beq.n	800bf8e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d007      	beq.n	800bf8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800bf86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 f9af 	bl	800c2ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00c      	beq.n	800bfb2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d007      	beq.n	800bfb2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bfaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 f9a7 	bl	800c300 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00c      	beq.n	800bfd6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d007      	beq.n	800bfd6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bfce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f87c 	bl	800c0ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	f003 0320 	and.w	r3, r3, #32
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00c      	beq.n	800bffa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f003 0320 	and.w	r3, r3, #32
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d007      	beq.n	800bffa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f06f 0220 	mvn.w	r2, #32
 800bff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 f96f 	bl	800c2d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c000:	2b00      	cmp	r3, #0
 800c002:	d00c      	beq.n	800c01e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d007      	beq.n	800c01e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f97b 	bl	800c314 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c024:	2b00      	cmp	r3, #0
 800c026:	d00c      	beq.n	800c042 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d007      	beq.n	800c042 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c03a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 f973 	bl	800c328 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00c      	beq.n	800c066 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c052:	2b00      	cmp	r3, #0
 800c054:	d007      	beq.n	800c066 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c05e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 f96b 	bl	800c33c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d00c      	beq.n	800c08a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c076:	2b00      	cmp	r3, #0
 800c078:	d007      	beq.n	800c08a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 f963 	bl	800c350 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c08a:	bf00      	nop
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c092:	b480      	push	{r7}
 800c094:	b083      	sub	sp, #12
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c09a:	bf00      	nop
 800c09c:	370c      	adds	r7, #12
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr

0800c0a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c0a6:	b480      	push	{r7}
 800c0a8:	b083      	sub	sp, #12
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c0ae:	bf00      	nop
 800c0b0:	370c      	adds	r7, #12
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr

0800c0ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c0ba:	b480      	push	{r7}
 800c0bc:	b083      	sub	sp, #12
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c0c2:	bf00      	nop
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr

0800c0ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c0ce:	b480      	push	{r7}
 800c0d0:	b083      	sub	sp, #12
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c0d6:	bf00      	nop
 800c0d8:	370c      	adds	r7, #12
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
	...

0800c0e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a68      	ldr	r2, [pc, #416]	; (800c298 <TIM_Base_SetConfig+0x1b4>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d02b      	beq.n	800c154 <TIM_Base_SetConfig+0x70>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	4a67      	ldr	r2, [pc, #412]	; (800c29c <TIM_Base_SetConfig+0x1b8>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d027      	beq.n	800c154 <TIM_Base_SetConfig+0x70>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c10a:	d023      	beq.n	800c154 <TIM_Base_SetConfig+0x70>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c112:	d01f      	beq.n	800c154 <TIM_Base_SetConfig+0x70>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	4a62      	ldr	r2, [pc, #392]	; (800c2a0 <TIM_Base_SetConfig+0x1bc>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d01b      	beq.n	800c154 <TIM_Base_SetConfig+0x70>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4a61      	ldr	r2, [pc, #388]	; (800c2a4 <TIM_Base_SetConfig+0x1c0>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d017      	beq.n	800c154 <TIM_Base_SetConfig+0x70>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a60      	ldr	r2, [pc, #384]	; (800c2a8 <TIM_Base_SetConfig+0x1c4>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d013      	beq.n	800c154 <TIM_Base_SetConfig+0x70>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4a5f      	ldr	r2, [pc, #380]	; (800c2ac <TIM_Base_SetConfig+0x1c8>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d00f      	beq.n	800c154 <TIM_Base_SetConfig+0x70>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	4a5e      	ldr	r2, [pc, #376]	; (800c2b0 <TIM_Base_SetConfig+0x1cc>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d00b      	beq.n	800c154 <TIM_Base_SetConfig+0x70>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4a5d      	ldr	r2, [pc, #372]	; (800c2b4 <TIM_Base_SetConfig+0x1d0>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d007      	beq.n	800c154 <TIM_Base_SetConfig+0x70>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4a5c      	ldr	r2, [pc, #368]	; (800c2b8 <TIM_Base_SetConfig+0x1d4>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d003      	beq.n	800c154 <TIM_Base_SetConfig+0x70>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	4a5b      	ldr	r2, [pc, #364]	; (800c2bc <TIM_Base_SetConfig+0x1d8>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d108      	bne.n	800c166 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c15a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	68fa      	ldr	r2, [r7, #12]
 800c162:	4313      	orrs	r3, r2
 800c164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4a4b      	ldr	r2, [pc, #300]	; (800c298 <TIM_Base_SetConfig+0x1b4>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d043      	beq.n	800c1f6 <TIM_Base_SetConfig+0x112>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4a4a      	ldr	r2, [pc, #296]	; (800c29c <TIM_Base_SetConfig+0x1b8>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d03f      	beq.n	800c1f6 <TIM_Base_SetConfig+0x112>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c17c:	d03b      	beq.n	800c1f6 <TIM_Base_SetConfig+0x112>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c184:	d037      	beq.n	800c1f6 <TIM_Base_SetConfig+0x112>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4a45      	ldr	r2, [pc, #276]	; (800c2a0 <TIM_Base_SetConfig+0x1bc>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d033      	beq.n	800c1f6 <TIM_Base_SetConfig+0x112>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a44      	ldr	r2, [pc, #272]	; (800c2a4 <TIM_Base_SetConfig+0x1c0>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d02f      	beq.n	800c1f6 <TIM_Base_SetConfig+0x112>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4a43      	ldr	r2, [pc, #268]	; (800c2a8 <TIM_Base_SetConfig+0x1c4>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d02b      	beq.n	800c1f6 <TIM_Base_SetConfig+0x112>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	4a42      	ldr	r2, [pc, #264]	; (800c2ac <TIM_Base_SetConfig+0x1c8>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d027      	beq.n	800c1f6 <TIM_Base_SetConfig+0x112>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	4a41      	ldr	r2, [pc, #260]	; (800c2b0 <TIM_Base_SetConfig+0x1cc>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d023      	beq.n	800c1f6 <TIM_Base_SetConfig+0x112>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	4a40      	ldr	r2, [pc, #256]	; (800c2b4 <TIM_Base_SetConfig+0x1d0>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d01f      	beq.n	800c1f6 <TIM_Base_SetConfig+0x112>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4a3f      	ldr	r2, [pc, #252]	; (800c2b8 <TIM_Base_SetConfig+0x1d4>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d01b      	beq.n	800c1f6 <TIM_Base_SetConfig+0x112>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4a3e      	ldr	r2, [pc, #248]	; (800c2bc <TIM_Base_SetConfig+0x1d8>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d017      	beq.n	800c1f6 <TIM_Base_SetConfig+0x112>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4a3d      	ldr	r2, [pc, #244]	; (800c2c0 <TIM_Base_SetConfig+0x1dc>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d013      	beq.n	800c1f6 <TIM_Base_SetConfig+0x112>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	4a3c      	ldr	r2, [pc, #240]	; (800c2c4 <TIM_Base_SetConfig+0x1e0>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d00f      	beq.n	800c1f6 <TIM_Base_SetConfig+0x112>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a3b      	ldr	r2, [pc, #236]	; (800c2c8 <TIM_Base_SetConfig+0x1e4>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d00b      	beq.n	800c1f6 <TIM_Base_SetConfig+0x112>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4a3a      	ldr	r2, [pc, #232]	; (800c2cc <TIM_Base_SetConfig+0x1e8>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d007      	beq.n	800c1f6 <TIM_Base_SetConfig+0x112>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a39      	ldr	r2, [pc, #228]	; (800c2d0 <TIM_Base_SetConfig+0x1ec>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d003      	beq.n	800c1f6 <TIM_Base_SetConfig+0x112>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4a38      	ldr	r2, [pc, #224]	; (800c2d4 <TIM_Base_SetConfig+0x1f0>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d108      	bne.n	800c208 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	4313      	orrs	r3, r2
 800c206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	695b      	ldr	r3, [r3, #20]
 800c212:	4313      	orrs	r3, r2
 800c214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	689a      	ldr	r2, [r3, #8]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4a1a      	ldr	r2, [pc, #104]	; (800c298 <TIM_Base_SetConfig+0x1b4>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d023      	beq.n	800c27c <TIM_Base_SetConfig+0x198>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4a19      	ldr	r2, [pc, #100]	; (800c29c <TIM_Base_SetConfig+0x1b8>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d01f      	beq.n	800c27c <TIM_Base_SetConfig+0x198>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a1e      	ldr	r2, [pc, #120]	; (800c2b8 <TIM_Base_SetConfig+0x1d4>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d01b      	beq.n	800c27c <TIM_Base_SetConfig+0x198>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a1d      	ldr	r2, [pc, #116]	; (800c2bc <TIM_Base_SetConfig+0x1d8>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d017      	beq.n	800c27c <TIM_Base_SetConfig+0x198>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a1c      	ldr	r2, [pc, #112]	; (800c2c0 <TIM_Base_SetConfig+0x1dc>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d013      	beq.n	800c27c <TIM_Base_SetConfig+0x198>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a1b      	ldr	r2, [pc, #108]	; (800c2c4 <TIM_Base_SetConfig+0x1e0>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d00f      	beq.n	800c27c <TIM_Base_SetConfig+0x198>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	4a1a      	ldr	r2, [pc, #104]	; (800c2c8 <TIM_Base_SetConfig+0x1e4>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d00b      	beq.n	800c27c <TIM_Base_SetConfig+0x198>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	4a19      	ldr	r2, [pc, #100]	; (800c2cc <TIM_Base_SetConfig+0x1e8>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d007      	beq.n	800c27c <TIM_Base_SetConfig+0x198>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4a18      	ldr	r2, [pc, #96]	; (800c2d0 <TIM_Base_SetConfig+0x1ec>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d003      	beq.n	800c27c <TIM_Base_SetConfig+0x198>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	4a17      	ldr	r2, [pc, #92]	; (800c2d4 <TIM_Base_SetConfig+0x1f0>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d103      	bne.n	800c284 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	691a      	ldr	r2, [r3, #16]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2201      	movs	r2, #1
 800c288:	615a      	str	r2, [r3, #20]
}
 800c28a:	bf00      	nop
 800c28c:	3714      	adds	r7, #20
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr
 800c296:	bf00      	nop
 800c298:	40012c00 	.word	0x40012c00
 800c29c:	50012c00 	.word	0x50012c00
 800c2a0:	40000400 	.word	0x40000400
 800c2a4:	50000400 	.word	0x50000400
 800c2a8:	40000800 	.word	0x40000800
 800c2ac:	50000800 	.word	0x50000800
 800c2b0:	40000c00 	.word	0x40000c00
 800c2b4:	50000c00 	.word	0x50000c00
 800c2b8:	40013400 	.word	0x40013400
 800c2bc:	50013400 	.word	0x50013400
 800c2c0:	40014000 	.word	0x40014000
 800c2c4:	50014000 	.word	0x50014000
 800c2c8:	40014400 	.word	0x40014400
 800c2cc:	50014400 	.word	0x50014400
 800c2d0:	40014800 	.word	0x40014800
 800c2d4:	50014800 	.word	0x50014800

0800c2d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c2e0:	bf00      	nop
 800c2e2:	370c      	adds	r7, #12
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr

0800c2ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c2f4:	bf00      	nop
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c308:	bf00      	nop
 800c30a:	370c      	adds	r7, #12
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c31c:	bf00      	nop
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c330:	bf00      	nop
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c344:	bf00      	nop
 800c346:	370c      	adds	r7, #12
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c358:	bf00      	nop
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d101      	bne.n	800c376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c372:	2301      	movs	r3, #1
 800c374:	e042      	b.n	800c3fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d106      	bne.n	800c38e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f7f6 f815 	bl	80023b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2224      	movs	r2, #36	; 0x24
 800c392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f022 0201 	bic.w	r2, r2, #1
 800c3a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d002      	beq.n	800c3b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 f9d6 	bl	800c760 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 f825 	bl	800c404 <UART_SetConfig>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d101      	bne.n	800c3c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e01b      	b.n	800c3fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	685a      	ldr	r2, [r3, #4]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c3d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	689a      	ldr	r2, [r3, #8]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c3e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0201 	orr.w	r2, r2, #1
 800c3f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 fa55 	bl	800c8a4 <UART_CheckIdleState>
 800c3fa:	4603      	mov	r3, r0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c408:	b094      	sub	sp, #80	; 0x50
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c40e:	2300      	movs	r3, #0
 800c410:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800c414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	4b83      	ldr	r3, [pc, #524]	; (800c628 <UART_SetConfig+0x224>)
 800c41a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41e:	689a      	ldr	r2, [r3, #8]
 800c420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c422:	691b      	ldr	r3, [r3, #16]
 800c424:	431a      	orrs	r2, r3
 800c426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c428:	695b      	ldr	r3, [r3, #20]
 800c42a:	431a      	orrs	r2, r3
 800c42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42e:	69db      	ldr	r3, [r3, #28]
 800c430:	4313      	orrs	r3, r2
 800c432:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	497c      	ldr	r1, [pc, #496]	; (800c62c <UART_SetConfig+0x228>)
 800c43c:	4019      	ands	r1, r3
 800c43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c444:	430b      	orrs	r3, r1
 800c446:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c454:	68d9      	ldr	r1, [r3, #12]
 800c456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	ea40 0301 	orr.w	r3, r0, r1
 800c45e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c462:	699b      	ldr	r3, [r3, #24]
 800c464:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	4b6f      	ldr	r3, [pc, #444]	; (800c628 <UART_SetConfig+0x224>)
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d009      	beq.n	800c484 <UART_SetConfig+0x80>
 800c470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	4b6e      	ldr	r3, [pc, #440]	; (800c630 <UART_SetConfig+0x22c>)
 800c476:	429a      	cmp	r2, r3
 800c478:	d004      	beq.n	800c484 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47c:	6a1a      	ldr	r2, [r3, #32]
 800c47e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c480:	4313      	orrs	r3, r2
 800c482:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800c48e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800c492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c498:	430b      	orrs	r3, r1
 800c49a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a2:	f023 000f 	bic.w	r0, r3, #15
 800c4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ac:	681a      	ldr	r2, [r3, #0]
 800c4ae:	ea40 0301 	orr.w	r3, r0, r1
 800c4b2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b6:	681a      	ldr	r2, [r3, #0]
 800c4b8:	4b5e      	ldr	r3, [pc, #376]	; (800c634 <UART_SetConfig+0x230>)
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d102      	bne.n	800c4c4 <UART_SetConfig+0xc0>
 800c4be:	2301      	movs	r3, #1
 800c4c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4c2:	e032      	b.n	800c52a <UART_SetConfig+0x126>
 800c4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	4b5b      	ldr	r3, [pc, #364]	; (800c638 <UART_SetConfig+0x234>)
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d102      	bne.n	800c4d4 <UART_SetConfig+0xd0>
 800c4ce:	2302      	movs	r3, #2
 800c4d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4d2:	e02a      	b.n	800c52a <UART_SetConfig+0x126>
 800c4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	4b58      	ldr	r3, [pc, #352]	; (800c63c <UART_SetConfig+0x238>)
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d102      	bne.n	800c4e4 <UART_SetConfig+0xe0>
 800c4de:	2304      	movs	r3, #4
 800c4e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4e2:	e022      	b.n	800c52a <UART_SetConfig+0x126>
 800c4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	4b55      	ldr	r3, [pc, #340]	; (800c640 <UART_SetConfig+0x23c>)
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d102      	bne.n	800c4f4 <UART_SetConfig+0xf0>
 800c4ee:	2308      	movs	r3, #8
 800c4f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4f2:	e01a      	b.n	800c52a <UART_SetConfig+0x126>
 800c4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	4b52      	ldr	r3, [pc, #328]	; (800c644 <UART_SetConfig+0x240>)
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d102      	bne.n	800c504 <UART_SetConfig+0x100>
 800c4fe:	2310      	movs	r3, #16
 800c500:	64bb      	str	r3, [r7, #72]	; 0x48
 800c502:	e012      	b.n	800c52a <UART_SetConfig+0x126>
 800c504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	4b4f      	ldr	r3, [pc, #316]	; (800c648 <UART_SetConfig+0x244>)
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d103      	bne.n	800c516 <UART_SetConfig+0x112>
 800c50e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800c512:	64bb      	str	r3, [r7, #72]	; 0x48
 800c514:	e009      	b.n	800c52a <UART_SetConfig+0x126>
 800c516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	4b43      	ldr	r3, [pc, #268]	; (800c628 <UART_SetConfig+0x224>)
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d102      	bne.n	800c526 <UART_SetConfig+0x122>
 800c520:	2320      	movs	r3, #32
 800c522:	64bb      	str	r3, [r7, #72]	; 0x48
 800c524:	e001      	b.n	800c52a <UART_SetConfig+0x126>
 800c526:	2300      	movs	r3, #0
 800c528:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	4b3e      	ldr	r3, [pc, #248]	; (800c628 <UART_SetConfig+0x224>)
 800c530:	429a      	cmp	r2, r3
 800c532:	d005      	beq.n	800c540 <UART_SetConfig+0x13c>
 800c534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	4b3d      	ldr	r3, [pc, #244]	; (800c630 <UART_SetConfig+0x22c>)
 800c53a:	429a      	cmp	r2, r3
 800c53c:	f040 8088 	bne.w	800c650 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c542:	2200      	movs	r2, #0
 800c544:	623b      	str	r3, [r7, #32]
 800c546:	627a      	str	r2, [r7, #36]	; 0x24
 800c548:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c54c:	f7fd fa36 	bl	80099bc <HAL_RCCEx_GetPeriphCLKFreq>
 800c550:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800c552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 80eb 	beq.w	800c730 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c55e:	4a3b      	ldr	r2, [pc, #236]	; (800c64c <UART_SetConfig+0x248>)
 800c560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c564:	461a      	mov	r2, r3
 800c566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c568:	fbb3 f3f2 	udiv	r3, r3, r2
 800c56c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c570:	685a      	ldr	r2, [r3, #4]
 800c572:	4613      	mov	r3, r2
 800c574:	005b      	lsls	r3, r3, #1
 800c576:	4413      	add	r3, r2
 800c578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d305      	bcc.n	800c58a <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c586:	429a      	cmp	r2, r3
 800c588:	d903      	bls.n	800c592 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800c58a:	2301      	movs	r3, #1
 800c58c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c590:	e048      	b.n	800c624 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c594:	2200      	movs	r2, #0
 800c596:	61bb      	str	r3, [r7, #24]
 800c598:	61fa      	str	r2, [r7, #28]
 800c59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c59e:	4a2b      	ldr	r2, [pc, #172]	; (800c64c <UART_SetConfig+0x248>)
 800c5a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	613b      	str	r3, [r7, #16]
 800c5aa:	617a      	str	r2, [r7, #20]
 800c5ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c5b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c5b4:	f7f3 fe7a 	bl	80002ac <__aeabi_uldivmod>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	4610      	mov	r0, r2
 800c5be:	4619      	mov	r1, r3
 800c5c0:	f04f 0200 	mov.w	r2, #0
 800c5c4:	f04f 0300 	mov.w	r3, #0
 800c5c8:	020b      	lsls	r3, r1, #8
 800c5ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c5ce:	0202      	lsls	r2, r0, #8
 800c5d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5d2:	6849      	ldr	r1, [r1, #4]
 800c5d4:	0849      	lsrs	r1, r1, #1
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	460c      	mov	r4, r1
 800c5da:	4605      	mov	r5, r0
 800c5dc:	eb12 0804 	adds.w	r8, r2, r4
 800c5e0:	eb43 0905 	adc.w	r9, r3, r5
 800c5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	60bb      	str	r3, [r7, #8]
 800c5ec:	60fa      	str	r2, [r7, #12]
 800c5ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c5f2:	4640      	mov	r0, r8
 800c5f4:	4649      	mov	r1, r9
 800c5f6:	f7f3 fe59 	bl	80002ac <__aeabi_uldivmod>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4613      	mov	r3, r2
 800c600:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c608:	d308      	bcc.n	800c61c <UART_SetConfig+0x218>
 800c60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c60c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c610:	d204      	bcs.n	800c61c <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800c612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c618:	60da      	str	r2, [r3, #12]
 800c61a:	e003      	b.n	800c624 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800c622:	e085      	b.n	800c730 <UART_SetConfig+0x32c>
 800c624:	e084      	b.n	800c730 <UART_SetConfig+0x32c>
 800c626:	bf00      	nop
 800c628:	46002400 	.word	0x46002400
 800c62c:	cfff69f3 	.word	0xcfff69f3
 800c630:	56002400 	.word	0x56002400
 800c634:	40013800 	.word	0x40013800
 800c638:	40004400 	.word	0x40004400
 800c63c:	40004800 	.word	0x40004800
 800c640:	40004c00 	.word	0x40004c00
 800c644:	40005000 	.word	0x40005000
 800c648:	40006400 	.word	0x40006400
 800c64c:	0800cf20 	.word	0x0800cf20
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c652:	69db      	ldr	r3, [r3, #28]
 800c654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c658:	d13c      	bne.n	800c6d4 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c65a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c65c:	2200      	movs	r2, #0
 800c65e:	603b      	str	r3, [r7, #0]
 800c660:	607a      	str	r2, [r7, #4]
 800c662:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c666:	f7fd f9a9 	bl	80099bc <HAL_RCCEx_GetPeriphCLKFreq>
 800c66a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c66c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d05e      	beq.n	800c730 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c676:	4a39      	ldr	r2, [pc, #228]	; (800c75c <UART_SetConfig+0x358>)
 800c678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c67c:	461a      	mov	r2, r3
 800c67e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c680:	fbb3 f3f2 	udiv	r3, r3, r2
 800c684:	005a      	lsls	r2, r3, #1
 800c686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	085b      	lsrs	r3, r3, #1
 800c68c:	441a      	add	r2, r3
 800c68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	fbb2 f3f3 	udiv	r3, r2, r3
 800c696:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c69a:	2b0f      	cmp	r3, #15
 800c69c:	d916      	bls.n	800c6cc <UART_SetConfig+0x2c8>
 800c69e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6a4:	d212      	bcs.n	800c6cc <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c6a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	f023 030f 	bic.w	r3, r3, #15
 800c6ae:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6b2:	085b      	lsrs	r3, r3, #1
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	f003 0307 	and.w	r3, r3, #7
 800c6ba:	b29a      	uxth	r2, r3
 800c6bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800c6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c6c8:	60da      	str	r2, [r3, #12]
 800c6ca:	e031      	b.n	800c730 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c6d2:	e02d      	b.n	800c730 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c6d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	469a      	mov	sl, r3
 800c6da:	4693      	mov	fp, r2
 800c6dc:	4650      	mov	r0, sl
 800c6de:	4659      	mov	r1, fp
 800c6e0:	f7fd f96c 	bl	80099bc <HAL_RCCEx_GetPeriphCLKFreq>
 800c6e4:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800c6e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d021      	beq.n	800c730 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f0:	4a1a      	ldr	r2, [pc, #104]	; (800c75c <UART_SetConfig+0x358>)
 800c6f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800c6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	085b      	lsrs	r3, r3, #1
 800c704:	441a      	add	r2, r3
 800c706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c70e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c712:	2b0f      	cmp	r3, #15
 800c714:	d909      	bls.n	800c72a <UART_SetConfig+0x326>
 800c716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c71c:	d205      	bcs.n	800c72a <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c720:	b29a      	uxth	r2, r3
 800c722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	60da      	str	r2, [r3, #12]
 800c728:	e002      	b.n	800c730 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c72a:	2301      	movs	r3, #1
 800c72c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c732:	2201      	movs	r2, #1
 800c734:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73a:	2201      	movs	r2, #1
 800c73c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c742:	2200      	movs	r2, #0
 800c744:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c748:	2200      	movs	r2, #0
 800c74a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c74c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c750:	4618      	mov	r0, r3
 800c752:	3750      	adds	r7, #80	; 0x50
 800c754:	46bd      	mov	sp, r7
 800c756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c75a:	bf00      	nop
 800c75c:	0800cf20 	.word	0x0800cf20

0800c760 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c76c:	f003 0308 	and.w	r3, r3, #8
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00a      	beq.n	800c78a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	430a      	orrs	r2, r1
 800c788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c78e:	f003 0301 	and.w	r3, r3, #1
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00a      	beq.n	800c7ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	430a      	orrs	r2, r1
 800c7aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b0:	f003 0302 	and.w	r3, r3, #2
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d00a      	beq.n	800c7ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	430a      	orrs	r2, r1
 800c7cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7d2:	f003 0304 	and.w	r3, r3, #4
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00a      	beq.n	800c7f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	430a      	orrs	r2, r1
 800c7ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f4:	f003 0310 	and.w	r3, r3, #16
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00a      	beq.n	800c812 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	430a      	orrs	r2, r1
 800c810:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c816:	f003 0320 	and.w	r3, r3, #32
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d00a      	beq.n	800c834 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	430a      	orrs	r2, r1
 800c832:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d01a      	beq.n	800c876 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	430a      	orrs	r2, r1
 800c854:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c85a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c85e:	d10a      	bne.n	800c876 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	430a      	orrs	r2, r1
 800c874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c87a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00a      	beq.n	800c898 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	430a      	orrs	r2, r1
 800c896:	605a      	str	r2, [r3, #4]
  }
}
 800c898:	bf00      	nop
 800c89a:	370c      	adds	r7, #12
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b098      	sub	sp, #96	; 0x60
 800c8a8:	af02      	add	r7, sp, #8
 800c8aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c8b4:	f7f6 fb9e 	bl	8002ff4 <HAL_GetTick>
 800c8b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f003 0308 	and.w	r3, r3, #8
 800c8c4:	2b08      	cmp	r3, #8
 800c8c6:	d12f      	bne.n	800c928 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c8cc:	9300      	str	r3, [sp, #0]
 800c8ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 f88e 	bl	800c9f8 <UART_WaitOnFlagUntilTimeout>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d022      	beq.n	800c928 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ea:	e853 3f00 	ldrex	r3, [r3]
 800c8ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8f6:	653b      	str	r3, [r7, #80]	; 0x50
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c900:	647b      	str	r3, [r7, #68]	; 0x44
 800c902:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c904:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c908:	e841 2300 	strex	r3, r2, [r1]
 800c90c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c90e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c910:	2b00      	cmp	r3, #0
 800c912:	d1e6      	bne.n	800c8e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2220      	movs	r2, #32
 800c918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c924:	2303      	movs	r3, #3
 800c926:	e063      	b.n	800c9f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f003 0304 	and.w	r3, r3, #4
 800c932:	2b04      	cmp	r3, #4
 800c934:	d149      	bne.n	800c9ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c936:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c93e:	2200      	movs	r2, #0
 800c940:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 f857 	bl	800c9f8 <UART_WaitOnFlagUntilTimeout>
 800c94a:	4603      	mov	r3, r0
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d03c      	beq.n	800c9ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c958:	e853 3f00 	ldrex	r3, [r3]
 800c95c:	623b      	str	r3, [r7, #32]
   return(result);
 800c95e:	6a3b      	ldr	r3, [r7, #32]
 800c960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c964:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	461a      	mov	r2, r3
 800c96c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c96e:	633b      	str	r3, [r7, #48]	; 0x30
 800c970:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c976:	e841 2300 	strex	r3, r2, [r1]
 800c97a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d1e6      	bne.n	800c950 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	3308      	adds	r3, #8
 800c988:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	e853 3f00 	ldrex	r3, [r3]
 800c990:	60fb      	str	r3, [r7, #12]
   return(result);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f023 0301 	bic.w	r3, r3, #1
 800c998:	64bb      	str	r3, [r7, #72]	; 0x48
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	3308      	adds	r3, #8
 800c9a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9a2:	61fa      	str	r2, [r7, #28]
 800c9a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a6:	69b9      	ldr	r1, [r7, #24]
 800c9a8:	69fa      	ldr	r2, [r7, #28]
 800c9aa:	e841 2300 	strex	r3, r2, [r1]
 800c9ae:	617b      	str	r3, [r7, #20]
   return(result);
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d1e5      	bne.n	800c982 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2220      	movs	r2, #32
 800c9ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9c6:	2303      	movs	r3, #3
 800c9c8:	e012      	b.n	800c9f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2220      	movs	r2, #32
 800c9ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2220      	movs	r2, #32
 800c9d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c9ee:	2300      	movs	r3, #0
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3758      	adds	r7, #88	; 0x58
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	603b      	str	r3, [r7, #0]
 800ca04:	4613      	mov	r3, r2
 800ca06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca08:	e049      	b.n	800ca9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca10:	d045      	beq.n	800ca9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca12:	f7f6 faef 	bl	8002ff4 <HAL_GetTick>
 800ca16:	4602      	mov	r2, r0
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	1ad3      	subs	r3, r2, r3
 800ca1c:	69ba      	ldr	r2, [r7, #24]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d302      	bcc.n	800ca28 <UART_WaitOnFlagUntilTimeout+0x30>
 800ca22:	69bb      	ldr	r3, [r7, #24]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d101      	bne.n	800ca2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ca28:	2303      	movs	r3, #3
 800ca2a:	e048      	b.n	800cabe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f003 0304 	and.w	r3, r3, #4
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d031      	beq.n	800ca9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	69db      	ldr	r3, [r3, #28]
 800ca40:	f003 0308 	and.w	r3, r3, #8
 800ca44:	2b08      	cmp	r3, #8
 800ca46:	d110      	bne.n	800ca6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2208      	movs	r2, #8
 800ca4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f000 f838 	bl	800cac6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2208      	movs	r2, #8
 800ca5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2200      	movs	r2, #0
 800ca62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ca66:	2301      	movs	r3, #1
 800ca68:	e029      	b.n	800cabe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	69db      	ldr	r3, [r3, #28]
 800ca70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca78:	d111      	bne.n	800ca9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ca84:	68f8      	ldr	r0, [r7, #12]
 800ca86:	f000 f81e 	bl	800cac6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2220      	movs	r2, #32
 800ca8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2200      	movs	r2, #0
 800ca96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ca9a:	2303      	movs	r3, #3
 800ca9c:	e00f      	b.n	800cabe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	69da      	ldr	r2, [r3, #28]
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	4013      	ands	r3, r2
 800caa8:	68ba      	ldr	r2, [r7, #8]
 800caaa:	429a      	cmp	r2, r3
 800caac:	bf0c      	ite	eq
 800caae:	2301      	moveq	r3, #1
 800cab0:	2300      	movne	r3, #0
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	461a      	mov	r2, r3
 800cab6:	79fb      	ldrb	r3, [r7, #7]
 800cab8:	429a      	cmp	r2, r3
 800caba:	d0a6      	beq.n	800ca0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cabc:	2300      	movs	r3, #0
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3710      	adds	r7, #16
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cac6:	b480      	push	{r7}
 800cac8:	b095      	sub	sp, #84	; 0x54
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cad6:	e853 3f00 	ldrex	r3, [r3]
 800cada:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cade:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	461a      	mov	r2, r3
 800caea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caec:	643b      	str	r3, [r7, #64]	; 0x40
 800caee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800caf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800caf4:	e841 2300 	strex	r3, r2, [r1]
 800caf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d1e6      	bne.n	800cace <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	3308      	adds	r3, #8
 800cb06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb08:	6a3b      	ldr	r3, [r7, #32]
 800cb0a:	e853 3f00 	ldrex	r3, [r3]
 800cb0e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb16:	f023 0301 	bic.w	r3, r3, #1
 800cb1a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	3308      	adds	r3, #8
 800cb22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb24:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb2c:	e841 2300 	strex	r3, r2, [r1]
 800cb30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d1e3      	bne.n	800cb00 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d118      	bne.n	800cb72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	e853 3f00 	ldrex	r3, [r3]
 800cb4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	f023 0310 	bic.w	r3, r3, #16
 800cb54:	647b      	str	r3, [r7, #68]	; 0x44
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb5e:	61bb      	str	r3, [r7, #24]
 800cb60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb62:	6979      	ldr	r1, [r7, #20]
 800cb64:	69ba      	ldr	r2, [r7, #24]
 800cb66:	e841 2300 	strex	r3, r2, [r1]
 800cb6a:	613b      	str	r3, [r7, #16]
   return(result);
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d1e6      	bne.n	800cb40 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2220      	movs	r2, #32
 800cb76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	675a      	str	r2, [r3, #116]	; 0x74
}
 800cb86:	bf00      	nop
 800cb88:	3754      	adds	r7, #84	; 0x54
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr

0800cb92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cb92:	b480      	push	{r7}
 800cb94:	b085      	sub	sp, #20
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d101      	bne.n	800cba8 <HAL_UARTEx_DisableFifoMode+0x16>
 800cba4:	2302      	movs	r3, #2
 800cba6:	e027      	b.n	800cbf8 <HAL_UARTEx_DisableFifoMode+0x66>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2201      	movs	r2, #1
 800cbac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2224      	movs	r2, #36	; 0x24
 800cbb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	681a      	ldr	r2, [r3, #0]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f022 0201 	bic.w	r2, r2, #1
 800cbce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cbd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2220      	movs	r2, #32
 800cbea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cbf6:	2300      	movs	r3, #0
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3714      	adds	r7, #20
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d101      	bne.n	800cc1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cc18:	2302      	movs	r3, #2
 800cc1a:	e02d      	b.n	800cc78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2224      	movs	r2, #36	; 0x24
 800cc28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f022 0201 	bic.w	r2, r2, #1
 800cc42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	683a      	ldr	r2, [r7, #0]
 800cc54:	430a      	orrs	r2, r1
 800cc56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 f84f 	bl	800ccfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2220      	movs	r2, #32
 800cc6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cc76:	2300      	movs	r3, #0
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3710      	adds	r7, #16
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d101      	bne.n	800cc98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cc94:	2302      	movs	r3, #2
 800cc96:	e02d      	b.n	800ccf4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2224      	movs	r2, #36	; 0x24
 800cca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f022 0201 	bic.w	r2, r2, #1
 800ccbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	683a      	ldr	r2, [r7, #0]
 800ccd0:	430a      	orrs	r2, r1
 800ccd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 f811 	bl	800ccfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2220      	movs	r2, #32
 800cce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2200      	movs	r2, #0
 800ccee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3710      	adds	r7, #16
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b085      	sub	sp, #20
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d108      	bne.n	800cd1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2201      	movs	r2, #1
 800cd18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cd1c:	e031      	b.n	800cd82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cd1e:	2308      	movs	r3, #8
 800cd20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cd22:	2308      	movs	r3, #8
 800cd24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	689b      	ldr	r3, [r3, #8]
 800cd2c:	0e5b      	lsrs	r3, r3, #25
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	f003 0307 	and.w	r3, r3, #7
 800cd34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	0f5b      	lsrs	r3, r3, #29
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	f003 0307 	and.w	r3, r3, #7
 800cd44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd46:	7bbb      	ldrb	r3, [r7, #14]
 800cd48:	7b3a      	ldrb	r2, [r7, #12]
 800cd4a:	4911      	ldr	r1, [pc, #68]	; (800cd90 <UARTEx_SetNbDataToProcess+0x94>)
 800cd4c:	5c8a      	ldrb	r2, [r1, r2]
 800cd4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cd52:	7b3a      	ldrb	r2, [r7, #12]
 800cd54:	490f      	ldr	r1, [pc, #60]	; (800cd94 <UARTEx_SetNbDataToProcess+0x98>)
 800cd56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd58:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd5c:	b29a      	uxth	r2, r3
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd64:	7bfb      	ldrb	r3, [r7, #15]
 800cd66:	7b7a      	ldrb	r2, [r7, #13]
 800cd68:	4909      	ldr	r1, [pc, #36]	; (800cd90 <UARTEx_SetNbDataToProcess+0x94>)
 800cd6a:	5c8a      	ldrb	r2, [r1, r2]
 800cd6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cd70:	7b7a      	ldrb	r2, [r7, #13]
 800cd72:	4908      	ldr	r1, [pc, #32]	; (800cd94 <UARTEx_SetNbDataToProcess+0x98>)
 800cd74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd76:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cd82:	bf00      	nop
 800cd84:	3714      	adds	r7, #20
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	0800cf38 	.word	0x0800cf38
 800cd94:	0800cf40 	.word	0x0800cf40

0800cd98 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f043 0202 	orr.w	r2, r3, #2
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	685a      	ldr	r2, [r3, #4]
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	021b      	lsls	r3, r3, #8
 800cdb8:	431a      	orrs	r2, r3
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f023 0202 	bic.w	r2, r3, #2
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	601a      	str	r2, [r3, #0]
}
 800cdca:	bf00      	nop
 800cdcc:	370c      	adds	r7, #12
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr

0800cdd6 <memset>:
 800cdd6:	4402      	add	r2, r0
 800cdd8:	4603      	mov	r3, r0
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d100      	bne.n	800cde0 <memset+0xa>
 800cdde:	4770      	bx	lr
 800cde0:	f803 1b01 	strb.w	r1, [r3], #1
 800cde4:	e7f9      	b.n	800cdda <memset+0x4>
	...

0800cde8 <__libc_init_array>:
 800cde8:	b570      	push	{r4, r5, r6, lr}
 800cdea:	4d0d      	ldr	r5, [pc, #52]	; (800ce20 <__libc_init_array+0x38>)
 800cdec:	2600      	movs	r6, #0
 800cdee:	4c0d      	ldr	r4, [pc, #52]	; (800ce24 <__libc_init_array+0x3c>)
 800cdf0:	1b64      	subs	r4, r4, r5
 800cdf2:	10a4      	asrs	r4, r4, #2
 800cdf4:	42a6      	cmp	r6, r4
 800cdf6:	d109      	bne.n	800ce0c <__libc_init_array+0x24>
 800cdf8:	4d0b      	ldr	r5, [pc, #44]	; (800ce28 <__libc_init_array+0x40>)
 800cdfa:	2600      	movs	r6, #0
 800cdfc:	4c0b      	ldr	r4, [pc, #44]	; (800ce2c <__libc_init_array+0x44>)
 800cdfe:	f000 f817 	bl	800ce30 <_init>
 800ce02:	1b64      	subs	r4, r4, r5
 800ce04:	10a4      	asrs	r4, r4, #2
 800ce06:	42a6      	cmp	r6, r4
 800ce08:	d105      	bne.n	800ce16 <__libc_init_array+0x2e>
 800ce0a:	bd70      	pop	{r4, r5, r6, pc}
 800ce0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce10:	3601      	adds	r6, #1
 800ce12:	4798      	blx	r3
 800ce14:	e7ee      	b.n	800cdf4 <__libc_init_array+0xc>
 800ce16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce1a:	3601      	adds	r6, #1
 800ce1c:	4798      	blx	r3
 800ce1e:	e7f2      	b.n	800ce06 <__libc_init_array+0x1e>
 800ce20:	0800cf50 	.word	0x0800cf50
 800ce24:	0800cf50 	.word	0x0800cf50
 800ce28:	0800cf50 	.word	0x0800cf50
 800ce2c:	0800cf54 	.word	0x0800cf54

0800ce30 <_init>:
 800ce30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce32:	bf00      	nop
 800ce34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce36:	bc08      	pop	{r3}
 800ce38:	469e      	mov	lr, r3
 800ce3a:	4770      	bx	lr

0800ce3c <_fini>:
 800ce3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce3e:	bf00      	nop
 800ce40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce42:	bc08      	pop	{r3}
 800ce44:	469e      	mov	lr, r3
 800ce46:	4770      	bx	lr
