
display_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbe0  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800de54  0800de54  0000ee54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df68  0800df68  0000f00c  2**0
                  CONTENTS
  4 .ARM          00000008  0800df68  0800df68  0000ef68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df70  0800df70  0000f00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df70  0800df70  0000ef70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800df74  0800df74  0000ef74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800df78  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  2000000c  0800df84  0000f00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  0800df84  0000f3f8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000f00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002be27  00000000  00000000  0000f042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000443b  00000000  00000000  0003ae69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002510  00000000  00000000  0003f2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001cfb  00000000  00000000  000417b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00044f06  00000000  00000000  000434b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ed0f  00000000  00000000  000883b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b23c6  00000000  00000000  000b70c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0026948e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3e8  00000000  00000000  002694d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  002738bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000000c 	.word	0x2000000c
 8000290:	00000000 	.word	0x00000000
 8000294:	0800de3c 	.word	0x0800de3c

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000010 	.word	0x20000010
 80002b0:	0800de3c 	.word	0x0800de3c

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f001 fd9f 	bl	8002114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f91f 	bl	8000818 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005da:	f000 f993 	bl	8000904 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 fcdd 	bl	8000f9c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e2:	f000 fb57 	bl	8000c94 <MX_GPDMA1_Init>
  MX_DCACHE2_Init();
 80005e6:	f000 fa21 	bl	8000a2c <MX_DCACHE2_Init>
  MX_DSIHOST_DSI_Init();
 80005ea:	f000 fa4b 	bl	8000a84 <MX_DSIHOST_DSI_Init>
  MX_ICACHE_Init();
 80005ee:	f000 fbb1 	bl	8000d54 <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005f2:	f000 fbbb 	bl	8000d6c <MX_LTDC_Init>
  MX_I2C5_Init();
 80005f6:	f000 fb6d 	bl	8000cd4 <MX_I2C5_Init>
  MX_RTC_Init();
 80005fa:	f000 fc35 	bl	8000e68 <MX_RTC_Init>
  MX_DCACHE1_Init();
 80005fe:	f000 f9ff 	bl	8000a00 <MX_DCACHE1_Init>
  MX_ADC1_Init();
 8000602:	f000 f98d 	bl	8000920 <MX_ADC1_Init>
  MX_UART4_Init();
 8000606:	f000 fc7d 	bl	8000f04 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

	HAL_DSI_Start(&hdsi);
 800060a:	4879      	ldr	r0, [pc, #484]	@ (80007f0 <main+0x224>)
 800060c:	f006 fe12 	bl	8007234 <HAL_DSI_Start>

	HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2140      	movs	r1, #64	@ 0x40
 8000614:	4877      	ldr	r0, [pc, #476]	@ (80007f4 <main+0x228>)
 8000616:	f007 f87d 	bl	8007714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SD_EN_GPIO_Port,SD_EN_Pin, RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	4875      	ldr	r0, [pc, #468]	@ (80007f4 <main+0x228>)
 8000620:	f007 f878 	bl	8007714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WL_BT_PWR_EN_GPIO_Port, WL_BT_PWR_EN_Pin, RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800062a:	4873      	ldr	r0, [pc, #460]	@ (80007f8 <main+0x22c>)
 800062c:	f007 f872 	bl	8007714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2108      	movs	r1, #8
 8000634:	4870      	ldr	r0, [pc, #448]	@ (80007f8 <main+0x22c>)
 8000636:	f007 f86d 	bl	8007714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000640:	486e      	ldr	r0, [pc, #440]	@ (80007fc <main+0x230>)
 8000642:	f007 f867 	bl	8007714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2108      	movs	r1, #8
 800064a:	486a      	ldr	r0, [pc, #424]	@ (80007f4 <main+0x228>)
 800064c:	f007 f862 	bl	8007714 <HAL_GPIO_WritePin>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 8000650:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000654:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000658:	4869      	ldr	r0, [pc, #420]	@ (8000800 <main+0x234>)
 800065a:	f004 f8bb 	bl	80047d4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&adc_value, 1);
 800065e:	2201      	movs	r2, #1
 8000660:	4968      	ldr	r1, [pc, #416]	@ (8000804 <main+0x238>)
 8000662:	4867      	ldr	r0, [pc, #412]	@ (8000800 <main+0x234>)
 8000664:	f002 fc86 	bl	8002f74 <HAL_ADC_Start_DMA>
	HAL_Delay(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f001 fda3 	bl	80021b4 <HAL_Delay>

	//  uint8_t uart_data = adc_value >> 6;
	//  HAL_UART_Transmit(&huart4, &uart_data, 1, HAL_MAX_DELAY);

	// Turn on display power AVDD
	HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2140      	movs	r1, #64	@ 0x40
 8000672:	4860      	ldr	r0, [pc, #384]	@ (80007f4 <main+0x228>)
 8000674:	f007 f84e 	bl	8007714 <HAL_GPIO_WritePin>
	//	GPIO_InitStruct.Pull = GPIO_PULLUP;
	//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	//	HAL_GPIO_Init(SWIRE_OUT_GPIO_Port, &GPIO_InitStruct);

	// Reset the display
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2108      	movs	r1, #8
 800067c:	485e      	ldr	r0, [pc, #376]	@ (80007f8 <main+0x22c>)
 800067e:	f007 f849 	bl	8007714 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000682:	2001      	movs	r0, #1
 8000684:	f001 fd96 	bl	80021b4 <HAL_Delay>
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2108      	movs	r1, #8
 800068c:	485a      	ldr	r0, [pc, #360]	@ (80007f8 <main+0x22c>)
 800068e:	f007 f841 	bl	8007714 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000692:	2001      	movs	r0, #1
 8000694:	f001 fd8e 	bl	80021b4 <HAL_Delay>
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2108      	movs	r1, #8
 800069c:	4856      	ldr	r0, [pc, #344]	@ (80007f8 <main+0x22c>)
 800069e:	f007 f839 	bl	8007714 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80006a2:	2032      	movs	r0, #50	@ 0x32
 80006a4:	f001 fd86 	bl	80021b4 <HAL_Delay>

	HAL_StatusTypeDef status = HAL_OK;
 80006a8:	2300      	movs	r3, #0
 80006aa:	75fb      	strb	r3, [r7, #23]

	//	float a = 0;
	//	float old_a = 0;
	//	uint32_t count = 0;

	uint8_t parametersTable[3] = {0x00, 0x01, 0x02};
 80006ac:	4a56      	ldr	r2, [pc, #344]	@ (8000808 <main+0x23c>)
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	6812      	ldr	r2, [r2, #0]
 80006b4:	4611      	mov	r1, r2
 80006b6:	8019      	strh	r1, [r3, #0]
 80006b8:	3302      	adds	r3, #2
 80006ba:	0c12      	lsrs	r2, r2, #16
 80006bc:	701a      	strb	r2, [r3, #0]
	uint8_t array[3] = {};
 80006be:	4b53      	ldr	r3, [pc, #332]	@ (800080c <main+0x240>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	733b      	strb	r3, [r7, #12]
 80006c4:	f107 030d 	add.w	r3, r7, #13
 80006c8:	2200      	movs	r2, #0
 80006ca:	801a      	strh	r2, [r3, #0]


	// Exit sleep
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 80006cc:	2300      	movs	r3, #0
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2311      	movs	r3, #17
 80006d2:	2205      	movs	r2, #5
 80006d4:	2100      	movs	r1, #0
 80006d6:	4846      	ldr	r0, [pc, #280]	@ (80007f0 <main+0x224>)
 80006d8:	f006 fe09 	bl	80072ee <HAL_DSI_ShortWrite>
 80006dc:	4603      	mov	r3, r0
 80006de:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 80006e0:	2064      	movs	r0, #100	@ 0x64
 80006e2:	f001 fd67 	bl	80021b4 <HAL_Delay>

//	// All pixels on
//	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x23, 0x00);
//	HAL_Delay(100);

	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x2A, 0x00);
 80006e6:	2300      	movs	r3, #0
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	232a      	movs	r3, #42	@ 0x2a
 80006ec:	2215      	movs	r2, #21
 80006ee:	2100      	movs	r1, #0
 80006f0:	483f      	ldr	r0, [pc, #252]	@ (80007f0 <main+0x224>)
 80006f2:	f006 fdfc 	bl	80072ee <HAL_DSI_ShortWrite>
 80006f6:	4603      	mov	r3, r0
 80006f8:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 80006fa:	2064      	movs	r0, #100	@ 0x64
 80006fc:	f001 fd5a 	bl	80021b4 <HAL_Delay>

	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x2B, 0x01);
 8000700:	2301      	movs	r3, #1
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	232b      	movs	r3, #43	@ 0x2b
 8000706:	2215      	movs	r2, #21
 8000708:	2100      	movs	r1, #0
 800070a:	4839      	ldr	r0, [pc, #228]	@ (80007f0 <main+0x224>)
 800070c:	f006 fdef 	bl	80072ee <HAL_DSI_ShortWrite>
 8000710:	4603      	mov	r3, r0
 8000712:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 8000714:	2064      	movs	r0, #100	@ 0x64
 8000716:	f001 fd4d 	bl	80021b4 <HAL_Delay>

	uint8_t pixels[10] = {0xFF,0xF0,0xFF,0xFF,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF};
 800071a:	4a3d      	ldr	r2, [pc, #244]	@ (8000810 <main+0x244>)
 800071c:	463b      	mov	r3, r7
 800071e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000720:	c303      	stmia	r3!, {r0, r1}
 8000722:	801a      	strh	r2, [r3, #0]

//	status = HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0x3C, pixels);
//	HAL_Delay(100);

	// Display on
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 8000724:	2300      	movs	r3, #0
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	2329      	movs	r3, #41	@ 0x29
 800072a:	2205      	movs	r2, #5
 800072c:	2100      	movs	r1, #0
 800072e:	4830      	ldr	r0, [pc, #192]	@ (80007f0 <main+0x224>)
 8000730:	f006 fddd 	bl	80072ee <HAL_DSI_ShortWrite>
 8000734:	4603      	mov	r3, r0
 8000736:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 8000738:	2064      	movs	r0, #100	@ 0x64
 800073a:	f001 fd3b 	bl	80021b4 <HAL_Delay>

	// Inversion on
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x21, 0x00);
 800073e:	2300      	movs	r3, #0
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2321      	movs	r3, #33	@ 0x21
 8000744:	2205      	movs	r2, #5
 8000746:	2100      	movs	r1, #0
 8000748:	4829      	ldr	r0, [pc, #164]	@ (80007f0 <main+0x224>)
 800074a:	f006 fdd0 	bl	80072ee <HAL_DSI_ShortWrite>
 800074e:	4603      	mov	r3, r0
 8000750:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(1000);
 8000752:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000756:	f001 fd2d 	bl	80021b4 <HAL_Delay>

	// Set normal display mode
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x13, 0x00);
 800075a:	2300      	movs	r3, #0
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2313      	movs	r3, #19
 8000760:	2205      	movs	r2, #5
 8000762:	2100      	movs	r1, #0
 8000764:	4822      	ldr	r0, [pc, #136]	@ (80007f0 <main+0x224>)
 8000766:	f006 fdc2 	bl	80072ee <HAL_DSI_ShortWrite>
 800076a:	4603      	mov	r3, r0
 800076c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(1000);
 800076e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000772:	f001 fd1f 	bl	80021b4 <HAL_Delay>

	// Set brightness to max
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x51, 0xFF);
 8000776:	23ff      	movs	r3, #255	@ 0xff
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2351      	movs	r3, #81	@ 0x51
 800077c:	2215      	movs	r2, #21
 800077e:	2100      	movs	r1, #0
 8000780:	481b      	ldr	r0, [pc, #108]	@ (80007f0 <main+0x224>)
 8000782:	f006 fdb4 	bl	80072ee <HAL_DSI_ShortWrite>
 8000786:	4603      	mov	r3, r0
 8000788:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(1000);
 800078a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800078e:	f001 fd11 	bl	80021b4 <HAL_Delay>

	status = HAL_DSI_Refresh(&hdsi);
 8000792:	4817      	ldr	r0, [pc, #92]	@ (80007f0 <main+0x224>)
 8000794:	f006 fd8a 	bl	80072ac <HAL_DSI_Refresh>
 8000798:	4603      	mov	r3, r0
 800079a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(2000);
 800079c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007a0:	f001 fd08 	bl	80021b4 <HAL_Delay>

	// Inversion off
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x20, 0x00);
 80007a4:	2300      	movs	r3, #0
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2320      	movs	r3, #32
 80007aa:	2205      	movs	r2, #5
 80007ac:	2100      	movs	r1, #0
 80007ae:	4810      	ldr	r0, [pc, #64]	@ (80007f0 <main+0x224>)
 80007b0:	f006 fd9d 	bl	80072ee <HAL_DSI_ShortWrite>
 80007b4:	4603      	mov	r3, r0
 80007b6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 80007b8:	2064      	movs	r0, #100	@ 0x64
 80007ba:	f001 fcfb 	bl	80021b4 <HAL_Delay>
  /* USER CODE BEGIN WHILE */

	while (1)
	{

		GPIO_PinState pinState = HAL_GPIO_ReadPin(SWIRE_IN_GPIO_Port, SWIRE_IN_Pin);
 80007be:	2101      	movs	r1, #1
 80007c0:	480c      	ldr	r0, [pc, #48]	@ (80007f4 <main+0x228>)
 80007c2:	f006 ff8f 	bl	80076e4 <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	75bb      	strb	r3, [r7, #22]
		if (pinState == GPIO_PIN_SET){
 80007ca:	7dbb      	ldrb	r3, [r7, #22]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d105      	bne.n	80007dc <main+0x210>
			HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2104      	movs	r1, #4
 80007d4:	480f      	ldr	r0, [pc, #60]	@ (8000814 <main+0x248>)
 80007d6:	f006 ff9d 	bl	8007714 <HAL_GPIO_WritePin>
 80007da:	e004      	b.n	80007e6 <main+0x21a>
		}

		else {
			HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2104      	movs	r1, #4
 80007e0:	480c      	ldr	r0, [pc, #48]	@ (8000814 <main+0x248>)
 80007e2:	f006 ff97 	bl	8007714 <HAL_GPIO_WritePin>
		//				HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, RESET);
		//			}
		//		}


		HAL_Delay(10);
 80007e6:	200a      	movs	r0, #10
 80007e8:	f001 fce4 	bl	80021b4 <HAL_Delay>
	{
 80007ec:	e7e7      	b.n	80007be <main+0x1f2>
 80007ee:	bf00      	nop
 80007f0:	200001c0 	.word	0x200001c0
 80007f4:	42021000 	.word	0x42021000
 80007f8:	42021c00 	.word	0x42021c00
 80007fc:	42020c00 	.word	0x42020c00
 8000800:	20000028 	.word	0x20000028
 8000804:	200003a4 	.word	0x200003a4
 8000808:	0800de54 	.word	0x0800de54
 800080c:	0800de58 	.word	0x0800de58
 8000810:	0800de5c 	.word	0x0800de5c
 8000814:	42020800 	.word	0x42020800

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b09e      	sub	sp, #120	@ 0x78
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0318 	add.w	r3, r7, #24
 8000822:	2260      	movs	r2, #96	@ 0x60
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f00d fadc 	bl	800dde4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	463b      	mov	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
 800083a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800083c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000840:	f007 fc26 	bl	8008090 <HAL_PWREx_ControlVoltageScaling>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800084a:	f000 ff11 	bl	8001670 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800084e:	f007 fbff 	bl	8008050 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8000852:	4b2b      	ldr	r3, [pc, #172]	@ (8000900 <SystemClock_Config+0xe8>)
 8000854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000858:	f023 0318 	bic.w	r3, r3, #24
 800085c:	4a28      	ldr	r2, [pc, #160]	@ (8000900 <SystemClock_Config+0xe8>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000866:	2307      	movs	r3, #7
 8000868:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800086e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000870:	2381      	movs	r3, #129	@ 0x81
 8000872:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000874:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087a:	2310      	movs	r3, #16
 800087c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087e:	2302      	movs	r3, #2
 8000880:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000882:	2303      	movs	r3, #3
 8000884:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800088a:	2301      	movs	r3, #1
 800088c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 800088e:	230a      	movs	r3, #10
 8000890:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 5;
 8000892:	2305      	movs	r3, #5
 8000894:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000896:	2302      	movs	r3, #2
 8000898:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800089a:	2301      	movs	r3, #1
 800089c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800089e:	230c      	movs	r3, #12
 80008a0:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 0318 	add.w	r3, r7, #24
 80008aa:	4618      	mov	r0, r3
 80008ac:	f007 fcec 	bl	8008288 <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008b6:	f000 fedb 	bl	8001670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	231f      	movs	r3, #31
 80008bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2303      	movs	r3, #3
 80008c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	2104      	movs	r1, #4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f008 fbb2 	bl	8009040 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80008e2:	f000 fec5 	bl	8001670 <Error_Handler>
  }

  /** LSCO configuration
  */
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSE);
 80008e6:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80008ea:	f00b febb 	bl	800c664 <HAL_RCCEx_EnableLSCO>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80008ee:	f008 ff29 	bl	8009744 <HAL_RCC_EnableCSS>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 80008f2:	f00b fea5 	bl	800c640 <HAL_RCCEx_EnableLSECSS>
}
 80008f6:	bf00      	nop
 80008f8:	3778      	adds	r7, #120	@ 0x78
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	46020c00 	.word	0x46020c00

08000904 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000908:	f007 fc9e 	bl	8008248 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800090c:	2002      	movs	r0, #2
 800090e:	f007 fc4b 	bl	80081a8 <HAL_PWREx_ConfigSupply>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000918:	f000 feaa 	bl	8001670 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000926:	463b      	mov	r3, r7
 8000928:	2220      	movs	r2, #32
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f00d fa59 	bl	800dde4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000932:	4b30      	ldr	r3, [pc, #192]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 8000934:	4a30      	ldr	r2, [pc, #192]	@ (80009f8 <MX_ADC1_Init+0xd8>)
 8000936:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8000938:	4b2e      	ldr	r3, [pc, #184]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 800093a:	f44f 1220 	mov.w	r2, #2621440	@ 0x280000
 800093e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000940:	4b2c      	ldr	r3, [pc, #176]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000946:	4b2b      	ldr	r3, [pc, #172]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800094c:	4b29      	ldr	r3, [pc, #164]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000952:	4b28      	ldr	r3, [pc, #160]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000958:	4b26      	ldr	r3, [pc, #152]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 800095a:	2204      	movs	r2, #4
 800095c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800095e:	4b25      	ldr	r3, [pc, #148]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 8000960:	2200      	movs	r2, #0
 8000962:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000964:	4b23      	ldr	r3, [pc, #140]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 8000966:	2201      	movs	r2, #1
 8000968:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 800096c:	4b21      	ldr	r3, [pc, #132]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 800096e:	2201      	movs	r2, #1
 8000970:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000972:	4b20      	ldr	r3, [pc, #128]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 8000974:	2200      	movs	r2, #0
 8000976:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800097a:	4b1e      	ldr	r3, [pc, #120]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 800097c:	2200      	movs	r2, #0
 800097e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000980:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 8000982:	2200      	movs	r2, #0
 8000984:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000986:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 8000988:	2201      	movs	r2, #1
 800098a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800098e:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 8000990:	2200      	movs	r2, #0
 8000992:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000994:	4b17      	ldr	r3, [pc, #92]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 8000996:	2200      	movs	r2, #0
 8000998:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800099a:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 800099c:	2200      	movs	r2, #0
 800099e:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009a0:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 80009a2:	2203      	movs	r2, #3
 80009a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009a6:	4b13      	ldr	r3, [pc, #76]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ae:	4811      	ldr	r0, [pc, #68]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 80009b0:	f001 fff8 	bl	80029a4 <HAL_ADC_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80009ba:	f000 fe59 	bl	8001670 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009be:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_ADC1_Init+0xdc>)
 80009c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c2:	2306      	movs	r3, #6
 80009c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_68CYCLES;
 80009c6:	2305      	movs	r3, #5
 80009c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d0:	2304      	movs	r3, #4
 80009d2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <MX_ADC1_Init+0xd4>)
 80009de:	f002 ff0f 	bl	8003800 <HAL_ADC_ConfigChannel>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80009e8:	f000 fe42 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	3720      	adds	r7, #32
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000028 	.word	0x20000028
 80009f8:	42028000 	.word	0x42028000
 80009fc:	20000100 	.word	0x20000100

08000a00 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8000a04:	4b07      	ldr	r3, [pc, #28]	@ (8000a24 <MX_DCACHE1_Init+0x24>)
 8000a06:	4a08      	ldr	r2, [pc, #32]	@ (8000a28 <MX_DCACHE1_Init+0x28>)
 8000a08:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000a0a:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <MX_DCACHE1_Init+0x24>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	@ (8000a24 <MX_DCACHE1_Init+0x24>)
 8000a12:	f004 f995 	bl	8004d40 <HAL_DCACHE_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 8000a1c:	f000 fe28 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000168 	.word	0x20000168
 8000a28:	40031400 	.word	0x40031400

08000a2c <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_DCACHE2_Init+0x4c>)
 8000a34:	4a11      	ldr	r2, [pc, #68]	@ (8000a7c <MX_DCACHE2_Init+0x50>)
 8000a36:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_DCACHE2_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 8000a3e:	480e      	ldr	r0, [pc, #56]	@ (8000a78 <MX_DCACHE2_Init+0x4c>)
 8000a40:	f004 f97e 	bl	8004d40 <HAL_DCACHE_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_DCACHE2_Init+0x22>
  {
    Error_Handler();
 8000a4a:	f000 fe11 	bl	8001670 <Error_Handler>
  }
   __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_DCACHE2_Init+0x54>)
 8000a50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000a54:	4a0a      	ldr	r2, [pc, #40]	@ (8000a80 <MX_DCACHE2_Init+0x54>)
 8000a56:	f043 0302 	orr.w	r3, r3, #2
 8000a5a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000a5e:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <MX_DCACHE2_Init+0x54>)
 8000a60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
   HAL_SYSCFG_DisableSRAMCached();
 8000a6c:	f001 fc12 	bl	8002294 <HAL_SYSCFG_DisableSRAMCached>
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000194 	.word	0x20000194
 8000a7c:	40031800 	.word	0x40031800
 8000a80:	46020c00 	.word	0x46020c00

08000a84 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b0ae      	sub	sp, #184	@ 0xb8
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000a8a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
 8000a9a:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000a9c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000aa0:	2224      	movs	r2, #36	@ 0x24
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f00d f99d 	bl	800dde4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000aaa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
 8000aba:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000abc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ac0:	2234      	movs	r2, #52	@ 0x34
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f00d f98d 	bl	800dde4 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	222c      	movs	r2, #44	@ 0x2c
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f00d f987 	bl	800dde4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8000c8c <MX_DSIHOST_DSI_Init+0x208>)
 8000ad8:	4a6d      	ldr	r2, [pc, #436]	@ (8000c90 <MX_DSIHOST_DSI_Init+0x20c>)
 8000ada:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000adc:	4b6b      	ldr	r3, [pc, #428]	@ (8000c8c <MX_DSIHOST_DSI_Init+0x208>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8000c8c <MX_DSIHOST_DSI_Init+0x208>)
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000ae8:	4b68      	ldr	r3, [pc, #416]	@ (8000c8c <MX_DSIHOST_DSI_Init+0x208>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 8000aee:	4b67      	ldr	r3, [pc, #412]	@ (8000c8c <MX_DSIHOST_DSI_Init+0x208>)
 8000af0:	2208      	movs	r2, #8
 8000af2:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 8000af4:	4b65      	ldr	r3, [pc, #404]	@ (8000c8c <MX_DSIHOST_DSI_Init+0x208>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 8000afa:	237d      	movs	r3, #125	@ 0x7d
 8000afc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 8000b00:	2304      	movs	r3, #4
 8000b02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000b1e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000b22:	4619      	mov	r1, r3
 8000b24:	4859      	ldr	r0, [pc, #356]	@ (8000c8c <MX_DSIHOST_DSI_Init+0x208>)
 8000b26:	f005 fdad 	bl	8006684 <HAL_DSI_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 8000b30:	f000 fd9e 	bl	8001670 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 20;
 8000b38:	2314      	movs	r3, #20
 8000b3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.LowPowerReceptionTimeout = 20;
 8000b3e:	2314      	movs	r3, #20
 8000b40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.HighSpeedReadTimeout = 20;
 8000b44:	2314      	movs	r3, #20
 8000b46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.LowPowerReadTimeout = 20;
 8000b4a:	2314      	movs	r3, #20
 8000b4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWriteTimeout = 20;
 8000b50:	2314      	movs	r3, #20
 8000b52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.LowPowerWriteTimeout = 20;
 8000b5c:	2314      	movs	r3, #20
 8000b5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  HostTimeouts.BTATimeout = 20;
 8000b62:	2314      	movs	r3, #20
 8000b64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000b68:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4847      	ldr	r0, [pc, #284]	@ (8000c8c <MX_DSIHOST_DSI_Init+0x208>)
 8000b70:	f006 fa9a 	bl	80070a8 <HAL_DSI_ConfigHostTimeouts>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_DSIHOST_DSI_Init+0xfa>
  {
    Error_Handler();
 8000b7a:	f000 fd79 	bl	8001670 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 10;
 8000b7e:	230a      	movs	r3, #10
 8000b80:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.ClockLaneLP2HSTime = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneHS2LPTime = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneLP2HSTime = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.DataLaneMaxReadTime = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	677b      	str	r3, [r7, #116]	@ 0x74
  PhyTimings.StopWaitTime = 10;
 8000b92:	230a      	movs	r3, #10
 8000b94:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000b96:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	483b      	ldr	r0, [pc, #236]	@ (8000c8c <MX_DSIHOST_DSI_Init+0x208>)
 8000b9e:	f006 f9ed 	bl	8006f7c <HAL_DSI_ConfigPhyTimer>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000ba8:	f000 fd62 	bl	8001670 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000bac:	2104      	movs	r1, #4
 8000bae:	4837      	ldr	r0, [pc, #220]	@ (8000c8c <MX_DSIHOST_DSI_Init+0x208>)
 8000bb0:	f006 f9bc 	bl	8006f2c <HAL_DSI_ConfigFlowControl>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000bba:	f000 fd59 	bl	8001670 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4832      	ldr	r0, [pc, #200]	@ (8000c8c <MX_DSIHOST_DSI_Init+0x208>)
 8000bc2:	f005 fe95 	bl	80068f0 <HAL_DSI_ConfigErrorMonitor>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 8000bcc:	f000 fd50 	bl	8001670 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000bd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000bd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bda:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000bdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000be0:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000be2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000be8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bec:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000bee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf2:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000bf4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000bfa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000c00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c04:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000c06:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000c0a:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000c0c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000c10:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000c12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000c1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c20:	4619      	mov	r1, r3
 8000c22:	481a      	ldr	r0, [pc, #104]	@ (8000c8c <MX_DSIHOST_DSI_Init+0x208>)
 8000c24:	f006 f924 	bl	8006e70 <HAL_DSI_ConfigCommand>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_DSIHOST_DSI_Init+0x1ae>
  {
    Error_Handler();
 8000c2e:	f000 fd1f 	bl	8001670 <Error_Handler>
  }
  CmdCfg.ColorCoding = DSI_RGB888;
 8000c32:	2305      	movs	r3, #5
 8000c34:	60bb      	str	r3, [r7, #8]
  CmdCfg.CommandSize = 416;
 8000c36:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8000c3a:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectSource = DSI_TE_DSILINK;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000c44:	2304      	movs	r3, #4
 8000c46:	61bb      	str	r3, [r7, #24]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61fb      	str	r3, [r7, #28]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480a      	ldr	r0, [pc, #40]	@ (8000c8c <MX_DSIHOST_DSI_Init+0x208>)
 8000c62:	f006 f82e 	bl	8006cc2 <HAL_DSI_ConfigAdaptedCommandMode>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_DSIHOST_DSI_Init+0x1ec>
  {
    Error_Handler();
 8000c6c:	f000 fd00 	bl	8001670 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000c70:	2100      	movs	r1, #0
 8000c72:	4806      	ldr	r0, [pc, #24]	@ (8000c8c <MX_DSIHOST_DSI_Init+0x208>)
 8000c74:	f005 fffa 	bl	8006c6c <HAL_DSI_SetGenericVCID>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_DSIHOST_DSI_Init+0x1fe>
  {
    Error_Handler();
 8000c7e:	f000 fcf7 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	37b8      	adds	r7, #184	@ 0xb8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200001c0 	.word	0x200001c0
 8000c90:	40016c00 	.word	0x40016c00

08000c94 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <MX_GPDMA1_Init+0x3c>)
 8000c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca0:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd0 <MX_GPDMA1_Init+0x3c>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <MX_GPDMA1_Init+0x3c>)
 8000cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	201d      	movs	r0, #29
 8000cbe:	f003 ffbf 	bl	8004c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000cc2:	201d      	movs	r0, #29
 8000cc4:	f003 ffd6 	bl	8004c74 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	46020c00 	.word	0x46020c00

08000cd4 <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <MX_I2C5_Init+0x74>)
 8000cda:	4a1c      	ldr	r2, [pc, #112]	@ (8000d4c <MX_I2C5_Init+0x78>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x30909DEC;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <MX_I2C5_Init+0x74>)
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d50 <MX_I2C5_Init+0x7c>)
 8000ce2:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <MX_I2C5_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cea:	4b17      	ldr	r3, [pc, #92]	@ (8000d48 <MX_I2C5_Init+0x74>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <MX_I2C5_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <MX_I2C5_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <MX_I2C5_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_I2C5_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <MX_I2C5_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8000d0e:	480e      	ldr	r0, [pc, #56]	@ (8000d48 <MX_I2C5_Init+0x74>)
 8000d10:	f006 fd18 	bl	8007744 <HAL_I2C_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8000d1a:	f000 fca9 	bl	8001670 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4809      	ldr	r0, [pc, #36]	@ (8000d48 <MX_I2C5_Init+0x74>)
 8000d22:	f006 fdaa 	bl	800787a <HAL_I2CEx_ConfigAnalogFilter>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8000d2c:	f000 fca0 	bl	8001670 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8000d30:	2100      	movs	r1, #0
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_I2C5_Init+0x74>)
 8000d34:	f006 fdec 	bl	8007910 <HAL_I2CEx_ConfigDigitalFilter>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8000d3e:	f000 fc97 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200001e4 	.word	0x200001e4
 8000d4c:	40009800 	.word	0x40009800
 8000d50:	30909dec 	.word	0x30909dec

08000d54 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000d58:	f006 fe26 	bl	80079a8 <HAL_ICACHE_Enable>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000d62:	f000 fc85 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08e      	sub	sp, #56	@ 0x38
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2234      	movs	r2, #52	@ 0x34
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f00d f833 	bl	800dde4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000d7e:	4b38      	ldr	r3, [pc, #224]	@ (8000e60 <MX_LTDC_Init+0xf4>)
 8000d80:	4a38      	ldr	r2, [pc, #224]	@ (8000e64 <MX_LTDC_Init+0xf8>)
 8000d82:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d84:	4b36      	ldr	r3, [pc, #216]	@ (8000e60 <MX_LTDC_Init+0xf4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d8a:	4b35      	ldr	r3, [pc, #212]	@ (8000e60 <MX_LTDC_Init+0xf4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d90:	4b33      	ldr	r3, [pc, #204]	@ (8000e60 <MX_LTDC_Init+0xf4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d96:	4b32      	ldr	r3, [pc, #200]	@ (8000e60 <MX_LTDC_Init+0xf4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000d9c:	4b30      	ldr	r3, [pc, #192]	@ (8000e60 <MX_LTDC_Init+0xf4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000da2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e60 <MX_LTDC_Init+0xf4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000da8:	4b2d      	ldr	r3, [pc, #180]	@ (8000e60 <MX_LTDC_Init+0xf4>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000dae:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <MX_LTDC_Init+0xf4>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 417;
 8000db4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e60 <MX_LTDC_Init+0xf4>)
 8000db6:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000dba:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 417;
 8000dbc:	4b28      	ldr	r3, [pc, #160]	@ (8000e60 <MX_LTDC_Init+0xf4>)
 8000dbe:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 418;
 8000dc4:	4b26      	ldr	r3, [pc, #152]	@ (8000e60 <MX_LTDC_Init+0xf4>)
 8000dc6:	f44f 72d1 	mov.w	r2, #418	@ 0x1a2
 8000dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 418;
 8000dcc:	4b24      	ldr	r3, [pc, #144]	@ (8000e60 <MX_LTDC_Init+0xf4>)
 8000dce:	f44f 72d1 	mov.w	r2, #418	@ 0x1a2
 8000dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000dd4:	4b22      	ldr	r3, [pc, #136]	@ (8000e60 <MX_LTDC_Init+0xf4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ddc:	4b20      	ldr	r3, [pc, #128]	@ (8000e60 <MX_LTDC_Init+0xf4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000de4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e60 <MX_LTDC_Init+0xf4>)
 8000de6:	22ff      	movs	r2, #255	@ 0xff
 8000de8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000dec:	481c      	ldr	r0, [pc, #112]	@ (8000e60 <MX_LTDC_Init+0xf4>)
 8000dee:	f006 fdeb 	bl	80079c8 <HAL_LTDC_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000df8:	f000 fc3a 	bl	8001670 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e1c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e1e:	2305      	movs	r3, #5
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000e3a:	23ff      	movs	r3, #255	@ 0xff
 8000e3c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	4619      	mov	r1, r3
 8000e46:	4806      	ldr	r0, [pc, #24]	@ (8000e60 <MX_LTDC_Init+0xf4>)
 8000e48:	f006 ff50 	bl	8007cec <HAL_LTDC_ConfigLayer>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_LTDC_Init+0xea>
  {
    Error_Handler();
 8000e52:	f000 fc0d 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	3738      	adds	r7, #56	@ 0x38
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000238 	.word	0x20000238
 8000e64:	40016800 	.word	0x40016800

08000e68 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	615a      	str	r2, [r3, #20]
 8000e7e:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e80:	4b1e      	ldr	r3, [pc, #120]	@ (8000efc <MX_RTC_Init+0x94>)
 8000e82:	4a1f      	ldr	r2, [pc, #124]	@ (8000f00 <MX_RTC_Init+0x98>)
 8000e84:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <MX_RTC_Init+0x94>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000efc <MX_RTC_Init+0x94>)
 8000e8e:	227f      	movs	r2, #127	@ 0x7f
 8000e90:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e92:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <MX_RTC_Init+0x94>)
 8000e94:	22ff      	movs	r2, #255	@ 0xff
 8000e96:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e98:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <MX_RTC_Init+0x94>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e9e:	4b17      	ldr	r3, [pc, #92]	@ (8000efc <MX_RTC_Init+0x94>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ea4:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <MX_RTC_Init+0x94>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000eaa:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <MX_RTC_Init+0x94>)
 8000eac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eb0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000eb2:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <MX_RTC_Init+0x94>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000eb8:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <MX_RTC_Init+0x94>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ebe:	480f      	ldr	r0, [pc, #60]	@ (8000efc <MX_RTC_Init+0x94>)
 8000ec0:	f00b fd4e 	bl	800c960 <HAL_RTC_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000eca:	f000 fbd1 	bl	8001670 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4806      	ldr	r0, [pc, #24]	@ (8000efc <MX_RTC_Init+0x94>)
 8000ee4:	f00b fe6a 	bl	800cbbc <HAL_RTCEx_PrivilegeModeSet>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8000eee:	f000 fbbf 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	3720      	adds	r7, #32
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200002e0 	.word	0x200002e0
 8000f00:	46007800 	.word	0x46007800

08000f04 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f08:	4b22      	ldr	r3, [pc, #136]	@ (8000f94 <MX_UART4_Init+0x90>)
 8000f0a:	4a23      	ldr	r2, [pc, #140]	@ (8000f98 <MX_UART4_Init+0x94>)
 8000f0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <MX_UART4_Init+0x90>)
 8000f10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f14:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f16:	4b1f      	ldr	r3, [pc, #124]	@ (8000f94 <MX_UART4_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f94 <MX_UART4_Init+0x90>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f22:	4b1c      	ldr	r3, [pc, #112]	@ (8000f94 <MX_UART4_Init+0x90>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <MX_UART4_Init+0x90>)
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2e:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <MX_UART4_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f34:	4b17      	ldr	r3, [pc, #92]	@ (8000f94 <MX_UART4_Init+0x90>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <MX_UART4_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f40:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <MX_UART4_Init+0x90>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f46:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <MX_UART4_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f4c:	4811      	ldr	r0, [pc, #68]	@ (8000f94 <MX_UART4_Init+0x90>)
 8000f4e:	f00c fa29 	bl	800d3a4 <HAL_UART_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000f58:	f000 fb8a 	bl	8001670 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	480d      	ldr	r0, [pc, #52]	@ (8000f94 <MX_UART4_Init+0x90>)
 8000f60:	f00c fe76 	bl	800dc50 <HAL_UARTEx_SetTxFifoThreshold>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000f6a:	f000 fb81 	bl	8001670 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4808      	ldr	r0, [pc, #32]	@ (8000f94 <MX_UART4_Init+0x90>)
 8000f72:	f00c feab 	bl	800dccc <HAL_UARTEx_SetRxFifoThreshold>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000f7c:	f000 fb78 	bl	8001670 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	@ (8000f94 <MX_UART4_Init+0x90>)
 8000f82:	f00c fe2c 	bl	800dbde <HAL_UARTEx_DisableFifoMode>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000f8c:	f000 fb70 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000310 	.word	0x20000310
 8000f98:	40004c00 	.word	0x40004c00

08000f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08e      	sub	sp, #56	@ 0x38
 8000fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	4bbf      	ldr	r3, [pc, #764]	@ (80012b0 <MX_GPIO_Init+0x314>)
 8000fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fb8:	4abd      	ldr	r2, [pc, #756]	@ (80012b0 <MX_GPIO_Init+0x314>)
 8000fba:	f043 0302 	orr.w	r3, r3, #2
 8000fbe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fc2:	4bbb      	ldr	r3, [pc, #748]	@ (80012b0 <MX_GPIO_Init+0x314>)
 8000fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	623b      	str	r3, [r7, #32]
 8000fce:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd0:	4bb7      	ldr	r3, [pc, #732]	@ (80012b0 <MX_GPIO_Init+0x314>)
 8000fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fd6:	4ab6      	ldr	r2, [pc, #728]	@ (80012b0 <MX_GPIO_Init+0x314>)
 8000fd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fdc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fe0:	4bb3      	ldr	r3, [pc, #716]	@ (80012b0 <MX_GPIO_Init+0x314>)
 8000fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fea:	61fb      	str	r3, [r7, #28]
 8000fec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fee:	4bb0      	ldr	r3, [pc, #704]	@ (80012b0 <MX_GPIO_Init+0x314>)
 8000ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ff4:	4aae      	ldr	r2, [pc, #696]	@ (80012b0 <MX_GPIO_Init+0x314>)
 8000ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ffa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ffe:	4bac      	ldr	r3, [pc, #688]	@ (80012b0 <MX_GPIO_Init+0x314>)
 8001000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001008:	61bb      	str	r3, [r7, #24]
 800100a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100c:	4ba8      	ldr	r3, [pc, #672]	@ (80012b0 <MX_GPIO_Init+0x314>)
 800100e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001012:	4aa7      	ldr	r2, [pc, #668]	@ (80012b0 <MX_GPIO_Init+0x314>)
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800101c:	4ba4      	ldr	r3, [pc, #656]	@ (80012b0 <MX_GPIO_Init+0x314>)
 800101e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001022:	f003 0308 	and.w	r3, r3, #8
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	4ba1      	ldr	r3, [pc, #644]	@ (80012b0 <MX_GPIO_Init+0x314>)
 800102c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001030:	4a9f      	ldr	r2, [pc, #636]	@ (80012b0 <MX_GPIO_Init+0x314>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800103a:	4b9d      	ldr	r3, [pc, #628]	@ (80012b0 <MX_GPIO_Init+0x314>)
 800103c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001048:	4b99      	ldr	r3, [pc, #612]	@ (80012b0 <MX_GPIO_Init+0x314>)
 800104a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800104e:	4a98      	ldr	r2, [pc, #608]	@ (80012b0 <MX_GPIO_Init+0x314>)
 8001050:	f043 0310 	orr.w	r3, r3, #16
 8001054:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001058:	4b95      	ldr	r3, [pc, #596]	@ (80012b0 <MX_GPIO_Init+0x314>)
 800105a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800105e:	f003 0310 	and.w	r3, r3, #16
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b92      	ldr	r3, [pc, #584]	@ (80012b0 <MX_GPIO_Init+0x314>)
 8001068:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800106c:	4a90      	ldr	r2, [pc, #576]	@ (80012b0 <MX_GPIO_Init+0x314>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001076:	4b8e      	ldr	r3, [pc, #568]	@ (80012b0 <MX_GPIO_Init+0x314>)
 8001078:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001084:	4b8a      	ldr	r3, [pc, #552]	@ (80012b0 <MX_GPIO_Init+0x314>)
 8001086:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800108a:	4a89      	ldr	r2, [pc, #548]	@ (80012b0 <MX_GPIO_Init+0x314>)
 800108c:	f043 0320 	orr.w	r3, r3, #32
 8001090:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001094:	4b86      	ldr	r3, [pc, #536]	@ (80012b0 <MX_GPIO_Init+0x314>)
 8001096:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800109a:	f003 0320 	and.w	r3, r3, #32
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010a2:	4b83      	ldr	r3, [pc, #524]	@ (80012b0 <MX_GPIO_Init+0x314>)
 80010a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010a8:	4a81      	ldr	r2, [pc, #516]	@ (80012b0 <MX_GPIO_Init+0x314>)
 80010aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010b2:	4b7f      	ldr	r3, [pc, #508]	@ (80012b0 <MX_GPIO_Init+0x314>)
 80010b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DISPLAY_RST_Pin|WL_BT_PWR_EN_Pin|FLASH_RST_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f24a 0108 	movw	r1, #40968	@ 0xa008
 80010c6:	487b      	ldr	r0, [pc, #492]	@ (80012b4 <MX_GPIO_Init+0x318>)
 80010c8:	f006 fb24 	bl	8007714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GNSS_WAKEUP_Pin|GNSS_RST_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80010d2:	4879      	ldr	r0, [pc, #484]	@ (80012b8 <MX_GPIO_Init+0x31c>)
 80010d4:	f006 fb1e 	bl	8007714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TP_RST_Pin|AVDDEN_Pin|SD_EN_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	21c8      	movs	r1, #200	@ 0xc8
 80010dc:	4877      	ldr	r0, [pc, #476]	@ (80012bc <MX_GPIO_Init+0x320>)
 80010de:	f006 fb19 	bl	8007714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, BT_DEV_WAKE_Pin|BT_EN_Pin|WL_EN_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2107      	movs	r1, #7
 80010e6:	4876      	ldr	r0, [pc, #472]	@ (80012c0 <MX_GPIO_Init+0x324>)
 80010e8:	f006 fb14 	bl	8007714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO2_GPIO_Port, GPIO2_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2104      	movs	r1, #4
 80010f0:	4874      	ldr	r0, [pc, #464]	@ (80012c4 <MX_GPIO_Init+0x328>)
 80010f2:	f006 fb0f 	bl	8007714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2104      	movs	r1, #4
 80010fa:	4873      	ldr	r0, [pc, #460]	@ (80012c8 <MX_GPIO_Init+0x32c>)
 80010fc:	f006 fb0a 	bl	8007714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TOUCH_RST_Pin|LRA_EN_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 4141 	mov.w	r1, #49408	@ 0xc100
 8001106:	4871      	ldr	r0, [pc, #452]	@ (80012cc <MX_GPIO_Init+0x330>)
 8001108:	f006 fb04 	bl	8007714 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 800110c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001112:	2312      	movs	r3, #18
 8001114:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800111e:	2304      	movs	r3, #4
 8001120:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001126:	4619      	mov	r1, r3
 8001128:	4869      	ldr	r0, [pc, #420]	@ (80012d0 <MX_GPIO_Init+0x334>)
 800112a:	f006 f903 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_RST_Pin WL_BT_PWR_EN_Pin FLASH_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin|WL_BT_PWR_EN_Pin|FLASH_RST_Pin;
 800112e:	f24a 0308 	movw	r3, #40968	@ 0xa008
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001140:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001144:	4619      	mov	r1, r3
 8001146:	485b      	ldr	r0, [pc, #364]	@ (80012b4 <MX_GPIO_Init+0x318>)
 8001148:	f006 f8f4 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB3 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_14;
 800114c:	f244 0318 	movw	r3, #16408	@ 0x4018
 8001150:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800115a:	2302      	movs	r3, #2
 800115c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC2;
 800115e:	230c      	movs	r3, #12
 8001160:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001166:	4619      	mov	r1, r3
 8001168:	4859      	ldr	r0, [pc, #356]	@ (80012d0 <MX_GPIO_Init+0x334>)
 800116a:	f006 f8e3 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_WAKEUP_Pin GNSS_RST_Pin GPIO3_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin|GNSS_RST_Pin|GPIO3_Pin;
 800116e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001180:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001184:	4619      	mov	r1, r3
 8001186:	484c      	ldr	r0, [pc, #304]	@ (80012b8 <MX_GPIO_Init+0x31c>)
 8001188:	f006 f8d4 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_PPS_Pin ALS_INT_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin|ALS_INT_Pin;
 800118c:	f241 0302 	movw	r3, #4098	@ 0x1002
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001192:	4b50      	ldr	r3, [pc, #320]	@ (80012d4 <MX_GPIO_Init+0x338>)
 8001194:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	4845      	ldr	r0, [pc, #276]	@ (80012b8 <MX_GPIO_Init+0x31c>)
 80011a2:	f006 f8c7 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80011a6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011b8:	2307      	movs	r3, #7
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c0:	4619      	mov	r1, r3
 80011c2:	483d      	ldr	r0, [pc, #244]	@ (80012b8 <MX_GPIO_Init+0x31c>)
 80011c4:	f006 f8b6 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80011c8:	23c0      	movs	r3, #192	@ 0xc0
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d4:	2302      	movs	r3, #2
 80011d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80011d8:	230b      	movs	r3, #11
 80011da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e0:	4619      	mov	r1, r3
 80011e2:	483a      	ldr	r0, [pc, #232]	@ (80012cc <MX_GPIO_Init+0x330>)
 80011e4:	f006 f8a6 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD5 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_4;
 80011e8:	2338      	movs	r3, #56	@ 0x38
 80011ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011f8:	2307      	movs	r3, #7
 80011fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001200:	4619      	mov	r1, r3
 8001202:	4832      	ldr	r0, [pc, #200]	@ (80012cc <MX_GPIO_Init+0x330>)
 8001204:	f006 f896 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC10 PC11 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 8001208:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001216:	2302      	movs	r3, #2
 8001218:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800121a:	230c      	movs	r3, #12
 800121c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001222:	4619      	mov	r1, r3
 8001224:	4828      	ldr	r0, [pc, #160]	@ (80012c8 <MX_GPIO_Init+0x32c>)
 8001226:	f006 f885 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_INT_Pin SWIRE_IN_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin|SWIRE_IN_Pin;
 800122a:	2305      	movs	r3, #5
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122e:	2300      	movs	r3, #0
 8001230:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001236:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800123a:	4619      	mov	r1, r3
 800123c:	481f      	ldr	r0, [pc, #124]	@ (80012bc <MX_GPIO_Init+0x320>)
 800123e:	f006 f879 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_RST_Pin AVDDEN_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = TP_RST_Pin|AVDDEN_Pin|SD_EN_Pin;
 8001242:	23c8      	movs	r3, #200	@ 0xc8
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001252:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001256:	4619      	mov	r1, r3
 8001258:	4818      	ldr	r0, [pc, #96]	@ (80012bc <MX_GPIO_Init+0x320>)
 800125a:	f006 f86b 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800125e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126c:	2302      	movs	r3, #2
 800126e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001270:	2308      	movs	r3, #8
 8001272:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001274:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001278:	4619      	mov	r1, r3
 800127a:	4815      	ldr	r0, [pc, #84]	@ (80012d0 <MX_GPIO_Init+0x334>)
 800127c:	f006 f85a 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001280:	2320      	movs	r3, #32
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001290:	2303      	movs	r3, #3
 8001292:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	480d      	ldr	r0, [pc, #52]	@ (80012d0 <MX_GPIO_Init+0x334>)
 800129c:	f006 f84a 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012a0:	2304      	movs	r3, #4
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ac:	e014      	b.n	80012d8 <MX_GPIO_Init+0x33c>
 80012ae:	bf00      	nop
 80012b0:	46020c00 	.word	0x46020c00
 80012b4:	42021c00 	.word	0x42021c00
 80012b8:	42021800 	.word	0x42021800
 80012bc:	42021000 	.word	0x42021000
 80012c0:	42022000 	.word	0x42022000
 80012c4:	42021400 	.word	0x42021400
 80012c8:	42020800 	.word	0x42020800
 80012cc:	42020c00 	.word	0x42020c00
 80012d0:	42020400 	.word	0x42020400
 80012d4:	10110000 	.word	0x10110000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d8:	2302      	movs	r3, #2
 80012da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012dc:	230c      	movs	r3, #12
 80012de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e4:	4619      	mov	r1, r3
 80012e6:	48ba      	ldr	r0, [pc, #744]	@ (80015d0 <MX_GPIO_Init+0x634>)
 80012e8:	f006 f824 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWIRE_OUT_Pin */
  GPIO_InitStruct.Pin = SWIRE_OUT_Pin;
 80012ec:	2310      	movs	r3, #16
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012f4:	2302      	movs	r3, #2
 80012f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SWIRE_OUT_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012fc:	4619      	mov	r1, r3
 80012fe:	48b5      	ldr	r0, [pc, #724]	@ (80015d4 <MX_GPIO_Init+0x638>)
 8001300:	f006 f818 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT1_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|MAG_INT_Pin;
 8001304:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800130a:	4bb3      	ldr	r3, [pc, #716]	@ (80015d8 <MX_GPIO_Init+0x63c>)
 800130c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001312:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001316:	4619      	mov	r1, r3
 8001318:	48ae      	ldr	r0, [pc, #696]	@ (80015d4 <MX_GPIO_Init+0x638>)
 800131a:	f006 f80b 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800131e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001330:	2303      	movs	r3, #3
 8001332:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001338:	4619      	mov	r1, r3
 800133a:	48a8      	ldr	r0, [pc, #672]	@ (80015dc <MX_GPIO_Init+0x640>)
 800133c:	f005 fffa 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001340:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001356:	4619      	mov	r1, r3
 8001358:	48a0      	ldr	r0, [pc, #640]	@ (80015dc <MX_GPIO_Init+0x640>)
 800135a:	f005 ffeb 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800135e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136c:	2302      	movs	r3, #2
 800136e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC2;
 8001370:	2308      	movs	r3, #8
 8001372:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001378:	4619      	mov	r1, r3
 800137a:	4898      	ldr	r0, [pc, #608]	@ (80015dc <MX_GPIO_Init+0x640>)
 800137c:	f005 ffda 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin FLASH_RSTO_Pin FLASH_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|FLASH_RSTO_Pin|FLASH_INT_Pin;
 8001380:	f44f 5303 	mov.w	r3, #8384	@ 0x20c0
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001386:	4b94      	ldr	r3, [pc, #592]	@ (80015d8 <MX_GPIO_Init+0x63c>)
 8001388:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001392:	4619      	mov	r1, r3
 8001394:	4892      	ldr	r0, [pc, #584]	@ (80015e0 <MX_GPIO_Init+0x644>)
 8001396:	f005 ffcd 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800139a:	2303      	movs	r3, #3
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139e:	2312      	movs	r3, #18
 80013a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 80013aa:	2302      	movs	r3, #2
 80013ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	488b      	ldr	r0, [pc, #556]	@ (80015e4 <MX_GPIO_Init+0x648>)
 80013b6:	f005 ffbd 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_DEV_WAKE_Pin BT_EN_Pin WL_EN_Pin */
  GPIO_InitStruct.Pin = BT_DEV_WAKE_Pin|BT_EN_Pin|WL_EN_Pin;
 80013ba:	2307      	movs	r3, #7
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ce:	4619      	mov	r1, r3
 80013d0:	4885      	ldr	r0, [pc, #532]	@ (80015e8 <MX_GPIO_Init+0x64c>)
 80013d2:	f005 ffaf 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_HOST_WAKE_Pin */
  GPIO_InitStruct.Pin = BT_HOST_WAKE_Pin;
 80013d6:	2308      	movs	r3, #8
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013da:	4b7f      	ldr	r3, [pc, #508]	@ (80015d8 <MX_GPIO_Init+0x63c>)
 80013dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BT_HOST_WAKE_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e6:	4619      	mov	r1, r3
 80013e8:	487f      	ldr	r0, [pc, #508]	@ (80015e8 <MX_GPIO_Init+0x64c>)
 80013ea:	f005 ffa3 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin;
 80013ee:	2304      	movs	r3, #4
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIO2_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001402:	4619      	mov	r1, r3
 8001404:	4877      	ldr	r0, [pc, #476]	@ (80015e4 <MX_GPIO_Init+0x648>)
 8001406:	f005 ff95 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin;
 800140a:	2304      	movs	r3, #4
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIO1_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800141e:	4619      	mov	r1, r3
 8001420:	486f      	ldr	r0, [pc, #444]	@ (80015e0 <MX_GPIO_Init+0x644>)
 8001422:	f005 ff87 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pin : WL_HOST_WAKE_Pin */
  GPIO_InitStruct.Pin = WL_HOST_WAKE_Pin;
 8001426:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800142c:	4b6a      	ldr	r3, [pc, #424]	@ (80015d8 <MX_GPIO_Init+0x63c>)
 800142e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(WL_HOST_WAKE_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001438:	4619      	mov	r1, r3
 800143a:	486c      	ldr	r0, [pc, #432]	@ (80015ec <MX_GPIO_Init+0x650>)
 800143c:	f005 ff7a 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8001440:	f240 4304 	movw	r3, #1028	@ 0x404
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144e:	2303      	movs	r3, #3
 8001450:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001452:	230a      	movs	r3, #10
 8001454:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800145a:	4619      	mov	r1, r3
 800145c:	4864      	ldr	r0, [pc, #400]	@ (80015f0 <MX_GPIO_Init+0x654>)
 800145e:	f005 ff69 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8001462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001468:	2311      	movs	r3, #17
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001478:	4619      	mov	r1, r3
 800147a:	4855      	ldr	r0, [pc, #340]	@ (80015d0 <MX_GPIO_Init+0x634>)
 800147c:	f005 ff5a 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH12 PH11 PH10 PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9;
 8001480:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001492:	2305      	movs	r3, #5
 8001494:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149a:	4619      	mov	r1, r3
 800149c:	4853      	ldr	r0, [pc, #332]	@ (80015ec <MX_GPIO_Init+0x650>)
 800149e:	f005 ff49 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014a2:	2301      	movs	r3, #1
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b2:	2305      	movs	r3, #5
 80014b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ba:	4619      	mov	r1, r3
 80014bc:	484c      	ldr	r0, [pc, #304]	@ (80015f0 <MX_GPIO_Init+0x654>)
 80014be:	f005 ff39 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80014c2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 80014d4:	2303      	movs	r3, #3
 80014d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014dc:	4619      	mov	r1, r3
 80014de:	483d      	ldr	r0, [pc, #244]	@ (80015d4 <MX_GPIO_Init+0x638>)
 80014e0:	f005 ff28 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE14 PE13 PE11
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11
 80014e4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80014f6:	230a      	movs	r3, #10
 80014f8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	4834      	ldr	r0, [pc, #208]	@ (80015d4 <MX_GPIO_Init+0x638>)
 8001502:	f005 ff17 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001506:	2303      	movs	r3, #3
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150a:	2312      	movs	r3, #18
 800150c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001516:	2304      	movs	r3, #4
 8001518:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800151e:	4619      	mov	r1, r3
 8001520:	482f      	ldr	r0, [pc, #188]	@ (80015e0 <MX_GPIO_Init+0x644>)
 8001522:	f005 ff07 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 8001526:	23e0      	movs	r3, #224	@ 0xe0
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001536:	2305      	movs	r3, #5
 8001538:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153e:	4619      	mov	r1, r3
 8001540:	4826      	ldr	r0, [pc, #152]	@ (80015dc <MX_GPIO_Init+0x640>)
 8001542:	f005 fef7 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8001546:	2301      	movs	r3, #1
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8001552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001556:	4619      	mov	r1, r3
 8001558:	4826      	ldr	r0, [pc, #152]	@ (80015f4 <MX_GPIO_Init+0x658>)
 800155a:	f005 feeb 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 800155e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001564:	2312      	movs	r3, #18
 8001566:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001570:	2304      	movs	r3, #4
 8001572:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001574:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001578:	4619      	mov	r1, r3
 800157a:	4815      	ldr	r0, [pc, #84]	@ (80015d0 <MX_GPIO_Init+0x634>)
 800157c:	f005 feda 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_INT_Pin TOUCH_INT_Pin HR_INT_Pin */
  GPIO_InitStruct.Pin = PWR_INT_Pin|TOUCH_INT_Pin|HR_INT_Pin;
 8001580:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001586:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <MX_GPIO_Init+0x63c>)
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	480e      	ldr	r0, [pc, #56]	@ (80015d0 <MX_GPIO_Init+0x634>)
 8001596:	f005 fecd 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800159a:	2304      	movs	r3, #4
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800159e:	2303      	movs	r3, #3
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015aa:	4619      	mov	r1, r3
 80015ac:	480b      	ldr	r0, [pc, #44]	@ (80015dc <MX_GPIO_Init+0x640>)
 80015ae:	f005 fec1 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80015b2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b8:	2312      	movs	r3, #18
 80015ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015c4:	2304      	movs	r3, #4
 80015c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015cc:	4619      	mov	r1, r3
 80015ce:	e013      	b.n	80015f8 <MX_GPIO_Init+0x65c>
 80015d0:	42020c00 	.word	0x42020c00
 80015d4:	42021000 	.word	0x42021000
 80015d8:	10110000 	.word	0x10110000
 80015dc:	42020000 	.word	0x42020000
 80015e0:	42020800 	.word	0x42020800
 80015e4:	42021400 	.word	0x42021400
 80015e8:	42022000 	.word	0x42022000
 80015ec:	42021c00 	.word	0x42021c00
 80015f0:	42020400 	.word	0x42020400
 80015f4:	42021800 	.word	0x42021800
 80015f8:	4811      	ldr	r0, [pc, #68]	@ (8001640 <MX_GPIO_Init+0x6a4>)
 80015fa:	f005 fe9b 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pins : LRA_EN_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin|PWR_ENCHG_Pin;
 80015fe:	f44f 4382 	mov.w	r3, #16640	@ 0x4100
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001604:	2301      	movs	r3, #1
 8001606:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001610:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001614:	4619      	mov	r1, r3
 8001616:	480b      	ldr	r0, [pc, #44]	@ (8001644 <MX_GPIO_Init+0x6a8>)
 8001618:	f005 fe8c 	bl	8007334 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800161c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001620:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <MX_GPIO_Init+0x6ac>)
 8001624:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162e:	4619      	mov	r1, r3
 8001630:	4803      	ldr	r0, [pc, #12]	@ (8001640 <MX_GPIO_Init+0x6a4>)
 8001632:	f005 fe7f 	bl	8007334 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001636:	bf00      	nop
 8001638:	3738      	adds	r7, #56	@ 0x38
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	42020400 	.word	0x42020400
 8001644:	42020c00 	.word	0x42020c00
 8001648:	10110000 	.word	0x10110000

0800164c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a04      	ldr	r2, [pc, #16]	@ (800166c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d101      	bne.n	8001662 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800165e:	f000 fd89 	bl	8002174 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40001000 	.word	0x40001000

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <Error_Handler+0x8>

0800167c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b1a      	ldr	r3, [pc, #104]	@ (80016ec <HAL_MspInit+0x70>)
 8001684:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001688:	4a18      	ldr	r2, [pc, #96]	@ (80016ec <HAL_MspInit+0x70>)
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001692:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <HAL_MspInit+0x70>)
 8001694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80016a0:	f006 fde2 	bl	8008268 <HAL_PWREx_EnableVddA>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	2009      	movs	r0, #9
 80016aa:	f003 fac9 	bl	8004c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80016ae:	2009      	movs	r0, #9
 80016b0:	f003 fae0 	bl	8004c74 <HAL_NVIC_EnableIRQ>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80016b4:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <HAL_MspInit+0x70>)
 80016b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80016ba:	4a0c      	ldr	r2, [pc, #48]	@ (80016ec <HAL_MspInit+0x70>)
 80016bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016c0:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80016c4:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <HAL_MspInit+0x70>)
 80016c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80016ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f000 fd92 	bl	80021fc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80016d8:	f000 fdb8 	bl	800224c <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80016dc:	2000      	movs	r0, #0
 80016de:	f000 fda1 	bl	8002224 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	46020c00 	.word	0x46020c00

080016f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b0de      	sub	sp, #376	@ 0x178
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80016fa:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80016fe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001710:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001714:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001718:	4618      	mov	r0, r3
 800171a:	23e0      	movs	r3, #224	@ 0xe0
 800171c:	461a      	mov	r2, r3
 800171e:	2100      	movs	r1, #0
 8001720:	f00c fb60 	bl	800dde4 <memset>
  if(hadc->Instance==ADC1)
 8001724:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001728:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a9f      	ldr	r2, [pc, #636]	@ (80019b0 <HAL_ADC_MspInit+0x2c0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	f040 8136 	bne.w	80019a4 <HAL_ADC_MspInit+0x2b4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001738:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800173c:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001740:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800174c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001750:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001754:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001758:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800175c:	f107 0318 	add.w	r3, r7, #24
 8001760:	4618      	mov	r0, r3
 8001762:	f008 f8a1 	bl	80098a8 <HAL_RCCEx_PeriphCLKConfig>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 800176c:	f7ff ff80 	bl	8001670 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001770:	4b90      	ldr	r3, [pc, #576]	@ (80019b4 <HAL_ADC_MspInit+0x2c4>)
 8001772:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001776:	4a8f      	ldr	r2, [pc, #572]	@ (80019b4 <HAL_ADC_MspInit+0x2c4>)
 8001778:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800177c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001780:	4b8c      	ldr	r3, [pc, #560]	@ (80019b4 <HAL_ADC_MspInit+0x2c4>)
 8001782:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001786:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800178a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800178e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001798:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800179c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	4b85      	ldr	r3, [pc, #532]	@ (80019b4 <HAL_ADC_MspInit+0x2c4>)
 80017a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017a4:	4a83      	ldr	r2, [pc, #524]	@ (80019b4 <HAL_ADC_MspInit+0x2c4>)
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017ae:	4b81      	ldr	r3, [pc, #516]	@ (80019b4 <HAL_ADC_MspInit+0x2c4>)
 80017b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017b4:	f003 0204 	and.w	r2, r3, #4
 80017b8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80017bc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80017c6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017ca:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017cc:	4b79      	ldr	r3, [pc, #484]	@ (80019b4 <HAL_ADC_MspInit+0x2c4>)
 80017ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017d2:	4a78      	ldr	r2, [pc, #480]	@ (80019b4 <HAL_ADC_MspInit+0x2c4>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017dc:	4b75      	ldr	r3, [pc, #468]	@ (80019b4 <HAL_ADC_MspInit+0x2c4>)
 80017de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017e2:	f003 0201 	and.w	r2, r3, #1
 80017e6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80017ea:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80017f4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017f8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	4b6e      	ldr	r3, [pc, #440]	@ (80019b4 <HAL_ADC_MspInit+0x2c4>)
 80017fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001800:	4a6c      	ldr	r2, [pc, #432]	@ (80019b4 <HAL_ADC_MspInit+0x2c4>)
 8001802:	f043 0302 	orr.w	r3, r3, #2
 8001806:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800180a:	4b6a      	ldr	r3, [pc, #424]	@ (80019b4 <HAL_ADC_MspInit+0x2c4>)
 800180c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001810:	f003 0202 	and.w	r2, r3, #2
 8001814:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001818:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001822:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001826:	681b      	ldr	r3, [r3, #0]
    PC3     ------> ADC1_IN4
    PA4     ------> ADC1_IN9
    PA3     ------> ADC1_IN8
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ELVSS_ADC_Pin;
 8001828:	2308      	movs	r3, #8
 800182a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800182e:	2303      	movs	r3, #3
 8001830:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    HAL_GPIO_Init(ELVSS_ADC_GPIO_Port, &GPIO_InitStruct);
 800183a:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800183e:	4619      	mov	r1, r3
 8001840:	485d      	ldr	r0, [pc, #372]	@ (80019b8 <HAL_ADC_MspInit+0x2c8>)
 8001842:	f005 fd77 	bl	8007334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ELVDD_ADC_Pin|AVDD_ADC_Pin;
 8001846:	2318      	movs	r3, #24
 8001848:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184c:	2303      	movs	r3, #3
 800184e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800185c:	4619      	mov	r1, r3
 800185e:	4857      	ldr	r0, [pc, #348]	@ (80019bc <HAL_ADC_MspInit+0x2cc>)
 8001860:	f005 fd68 	bl	8007334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ISYS_ADC_Pin;
 8001864:	2302      	movs	r3, #2
 8001866:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800186a:	2303      	movs	r3, #3
 800186c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    HAL_GPIO_Init(ISYS_ADC_GPIO_Port, &GPIO_InitStruct);
 8001876:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800187a:	4619      	mov	r1, r3
 800187c:	4850      	ldr	r0, [pc, #320]	@ (80019c0 <HAL_ADC_MspInit+0x2d0>)
 800187e:	f005 fd59 	bl	8007334 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001882:	2321      	movs	r3, #33	@ 0x21
 8001884:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800188e:	2300      	movs	r3, #0
 8001890:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001894:	2300      	movs	r3, #0
 8001896:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800189a:	2300      	movs	r3, #0
 800189c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80018ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018b0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcBurstLength = 1;
 80018b4:	2301      	movs	r3, #1
 80018b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.DestBurstLength = 1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 80018c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.Mode = DMA_NORMAL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80018e6:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 80018ea:	4936      	ldr	r1, [pc, #216]	@ (80019c4 <HAL_ADC_MspInit+0x2d4>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f003 feb5 	bl	800565c <HAL_DMAEx_List_BuildNode>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <HAL_ADC_MspInit+0x20c>
    {
      Error_Handler();
 80018f8:	f7ff feba 	bl	8001670 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80018fc:	4a31      	ldr	r2, [pc, #196]	@ (80019c4 <HAL_ADC_MspInit+0x2d4>)
 80018fe:	2100      	movs	r1, #0
 8001900:	4831      	ldr	r0, [pc, #196]	@ (80019c8 <HAL_ADC_MspInit+0x2d8>)
 8001902:	f003 fed7 	bl	80056b4 <HAL_DMAEx_List_InsertNode>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_ADC_MspInit+0x220>
    {
      Error_Handler();
 800190c:	f7ff feb0 	bl	8001670 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8001910:	482d      	ldr	r0, [pc, #180]	@ (80019c8 <HAL_ADC_MspInit+0x2d8>)
 8001912:	f003 ff98 	bl	8005846 <HAL_DMAEx_List_SetCircularMode>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 800191c:	f7ff fea8 	bl	8001670 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001920:	4b2a      	ldr	r3, [pc, #168]	@ (80019cc <HAL_ADC_MspInit+0x2dc>)
 8001922:	4a2b      	ldr	r2, [pc, #172]	@ (80019d0 <HAL_ADC_MspInit+0x2e0>)
 8001924:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001926:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <HAL_ADC_MspInit+0x2dc>)
 8001928:	2200      	movs	r2, #0
 800192a:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800192c:	4b27      	ldr	r3, [pc, #156]	@ (80019cc <HAL_ADC_MspInit+0x2dc>)
 800192e:	2200      	movs	r2, #0
 8001930:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001932:	4b26      	ldr	r3, [pc, #152]	@ (80019cc <HAL_ADC_MspInit+0x2dc>)
 8001934:	2200      	movs	r2, #0
 8001936:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001938:	4b24      	ldr	r3, [pc, #144]	@ (80019cc <HAL_ADC_MspInit+0x2dc>)
 800193a:	2200      	movs	r2, #0
 800193c:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800193e:	4b23      	ldr	r3, [pc, #140]	@ (80019cc <HAL_ADC_MspInit+0x2dc>)
 8001940:	2281      	movs	r2, #129	@ 0x81
 8001942:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001944:	4821      	ldr	r0, [pc, #132]	@ (80019cc <HAL_ADC_MspInit+0x2dc>)
 8001946:	f003 fcc9 	bl	80052dc <HAL_DMAEx_List_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_ADC_MspInit+0x264>
    {
      Error_Handler();
 8001950:	f7ff fe8e 	bl	8001670 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001954:	491c      	ldr	r1, [pc, #112]	@ (80019c8 <HAL_ADC_MspInit+0x2d8>)
 8001956:	481d      	ldr	r0, [pc, #116]	@ (80019cc <HAL_ADC_MspInit+0x2dc>)
 8001958:	f003 ffd6 	bl	8005908 <HAL_DMAEx_List_LinkQ>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_ADC_MspInit+0x276>
    {
      Error_Handler();
 8001962:	f7ff fe85 	bl	8001670 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001966:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800196a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a16      	ldr	r2, [pc, #88]	@ (80019cc <HAL_ADC_MspInit+0x2dc>)
 8001972:	671a      	str	r2, [r3, #112]	@ 0x70
 8001974:	4a15      	ldr	r2, [pc, #84]	@ (80019cc <HAL_ADC_MspInit+0x2dc>)
 8001976:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800197a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001982:	2110      	movs	r1, #16
 8001984:	4811      	ldr	r0, [pc, #68]	@ (80019cc <HAL_ADC_MspInit+0x2dc>)
 8001986:	f003 fc47 	bl	8005218 <HAL_DMA_ConfigChannelAttributes>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_ADC_MspInit+0x2a4>
    {
      Error_Handler();
 8001990:	f7ff fe6e 	bl	8001670 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	2100      	movs	r1, #0
 8001998:	2025      	movs	r0, #37	@ 0x25
 800199a:	f003 f951 	bl	8004c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800199e:	2025      	movs	r0, #37	@ 0x25
 80019a0:	f003 f968 	bl	8004c74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019a4:	bf00      	nop
 80019a6:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	42028000 	.word	0x42028000
 80019b4:	46020c00 	.word	0x46020c00
 80019b8:	42020800 	.word	0x42020800
 80019bc:	42020000 	.word	0x42020000
 80019c0:	42020400 	.word	0x42020400
 80019c4:	200000b4 	.word	0x200000b4
 80019c8:	200000d8 	.word	0x200000d8
 80019cc:	200000f0 	.word	0x200000f0
 80019d0:	40020050 	.word	0x40020050

080019d4 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a16      	ldr	r2, [pc, #88]	@ (8001a3c <HAL_DCACHE_MspInit+0x68>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d10f      	bne.n	8001a06 <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 80019e6:	4b16      	ldr	r3, [pc, #88]	@ (8001a40 <HAL_DCACHE_MspInit+0x6c>)
 80019e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ec:	4a14      	ldr	r2, [pc, #80]	@ (8001a40 <HAL_DCACHE_MspInit+0x6c>)
 80019ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80019f2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80019f6:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <HAL_DCACHE_MspInit+0x6c>)
 80019f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 8001a04:	e013      	b.n	8001a2e <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a44 <HAL_DCACHE_MspInit+0x70>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d10e      	bne.n	8001a2e <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001a10:	4b0b      	ldr	r3, [pc, #44]	@ (8001a40 <HAL_DCACHE_MspInit+0x6c>)
 8001a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a16:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <HAL_DCACHE_MspInit+0x6c>)
 8001a18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001a20:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <HAL_DCACHE_MspInit+0x6c>)
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40031400 	.word	0x40031400
 8001a40:	46020c00 	.word	0x46020c00
 8001a44:	40031800 	.word	0x40031800

08001a48 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b0c2      	sub	sp, #264	@ 0x108
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a56:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	22e0      	movs	r2, #224	@ 0xe0
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f00c f9b7 	bl	800dde4 <memset>
  if(hdsi->Instance==DSI)
 8001a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a38      	ldr	r2, [pc, #224]	@ (8001b64 <HAL_DSI_MspInit+0x11c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d168      	bne.n	8001b5a <HAL_DSI_MspInit+0x112>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0304 	mov.w	r3, #4
 8001a90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_PLL3;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.PLL3.PLL3N = 125;
 8001aa2:	237d      	movs	r3, #125	@ 0x7d
 8001aa4:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInit.PLL3.PLL3P = 8;
 8001aa6:	2308      	movs	r3, #8
 8001aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001aae:	2308      	movs	r3, #8
 8001ab0:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVP;
 8001aba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001abe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f007 feef 	bl	80098a8 <HAL_RCCEx_PeriphCLKConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_DSI_MspInit+0x8c>
    {
      Error_Handler();
 8001ad0:	f7ff fdce 	bl	8001670 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001ad4:	4b24      	ldr	r3, [pc, #144]	@ (8001b68 <HAL_DSI_MspInit+0x120>)
 8001ad6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ada:	4a23      	ldr	r2, [pc, #140]	@ (8001b68 <HAL_DSI_MspInit+0x120>)
 8001adc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001ae0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001ae4:	4b20      	ldr	r3, [pc, #128]	@ (8001b68 <HAL_DSI_MspInit+0x120>)
 8001ae6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001aea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <HAL_DSI_MspInit+0x120>)
 8001af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001af8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b68 <HAL_DSI_MspInit+0x120>)
 8001afa:	f043 0302 	orr.w	r3, r3, #2
 8001afe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b02:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <HAL_DSI_MspInit+0x120>)
 8001b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b08:	f003 0202 	and.w	r2, r3, #2
 8001b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b10:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b1a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b1e:	681b      	ldr	r3, [r3, #0]
    DSI_CKN     ------> DSIHOST_CKN
    DSI_CKP     ------> DSIHOST_CKP
    DSI_D1N     ------> DSIHOST_D1N
    DSI_D1P     ------> DSIHOST_D1P
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b20:	2380      	movs	r3, #128	@ 0x80
 8001b22:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8001b38:	230b      	movs	r3, #11
 8001b3a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001b42:	4619      	mov	r1, r3
 8001b44:	4809      	ldr	r0, [pc, #36]	@ (8001b6c <HAL_DSI_MspInit+0x124>)
 8001b46:	f005 fbf5 	bl	8007334 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2089      	movs	r0, #137	@ 0x89
 8001b50:	f003 f876 	bl	8004c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001b54:	2089      	movs	r0, #137	@ 0x89
 8001b56:	f003 f88d 	bl	8004c74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001b5a:	bf00      	nop
 8001b5c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40016c00 	.word	0x40016c00
 8001b68:	46020c00 	.word	0x46020c00
 8001b6c:	42020400 	.word	0x42020400

08001b70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b0c2      	sub	sp, #264	@ 0x108
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b7e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	22e0      	movs	r2, #224	@ 0xe0
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f00c f923 	bl	800dde4 <memset>
  if(hi2c->Instance==I2C5)
 8001b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ba2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a2b      	ldr	r2, [pc, #172]	@ (8001c58 <HAL_I2C_MspInit+0xe8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d14d      	bne.n	8001c4c <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8001bb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c5ClockSelection = RCC_I2C5CLKSOURCE_PCLK1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc2:	f107 0310 	add.w	r3, r7, #16
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f007 fe6e 	bl	80098a8 <HAL_RCCEx_PeriphCLKConfig>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001bd2:	f7ff fd4d 	bl	8001670 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd6:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <HAL_I2C_MspInit+0xec>)
 8001bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8001c5c <HAL_I2C_MspInit+0xec>)
 8001bde:	f043 0308 	orr.w	r3, r3, #8
 8001be2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001be6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <HAL_I2C_MspInit+0xec>)
 8001be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PD0     ------> I2C5_SDA
    PD1     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bfa:	2312      	movs	r3, #18
 8001bfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c12:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001c16:	4619      	mov	r1, r3
 8001c18:	4811      	ldr	r0, [pc, #68]	@ (8001c60 <HAL_I2C_MspInit+0xf0>)
 8001c1a:	f005 fb8b 	bl	8007334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <HAL_I2C_MspInit+0xec>)
 8001c20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001c24:	4a0d      	ldr	r2, [pc, #52]	@ (8001c5c <HAL_I2C_MspInit+0xec>)
 8001c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c2a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <HAL_I2C_MspInit+0xec>)
 8001c30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001c34:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c3c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c46:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001c4a:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }

}
 8001c4c:	bf00      	nop
 8001c4e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40009800 	.word	0x40009800
 8001c5c:	46020c00 	.word	0x46020c00
 8001c60:	42020c00 	.word	0x42020c00

08001c64 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b0bc      	sub	sp, #240	@ 0xf0
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c6c:	f107 0310 	add.w	r3, r7, #16
 8001c70:	22e0      	movs	r2, #224	@ 0xe0
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f00c f8b5 	bl	800dde4 <memset>
  if(hltdc->Instance==LTDC)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a22      	ldr	r2, [pc, #136]	@ (8001d08 <HAL_LTDC_MspInit+0xa4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d13d      	bne.n	8001d00 <HAL_LTDC_MspInit+0x9c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0302 	mov.w	r3, #2
 8001c8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 8001c90:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001c94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLL2.PLL2M = 1;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLL2.PLL2N = 10;
 8001ca0:	230a      	movs	r3, #10
 8001ca2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2P = 2;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLL2.PLL2Q = 2;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLL2.PLL2R = 8;
 8001cac:	2308      	movs	r3, #8
 8001cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8001cb0:	230c      	movs	r3, #12
 8001cb2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8001cb8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cbe:	f107 0310 	add.w	r3, r7, #16
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f007 fdf0 	bl	80098a8 <HAL_RCCEx_PeriphCLKConfig>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8001cce:	f7ff fccf 	bl	8001670 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <HAL_LTDC_MspInit+0xa8>)
 8001cd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d0c <HAL_LTDC_MspInit+0xa8>)
 8001cda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001cde:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <HAL_LTDC_MspInit+0xa8>)
 8001ce4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ce8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	2087      	movs	r0, #135	@ 0x87
 8001cf6:	f002 ffa3 	bl	8004c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001cfa:	2087      	movs	r0, #135	@ 0x87
 8001cfc:	f002 ffba 	bl	8004c74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001d00:	bf00      	nop
 8001d02:	37f0      	adds	r7, #240	@ 0xf0
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40016800 	.word	0x40016800
 8001d0c:	46020c00 	.word	0x46020c00

08001d10 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b0bc      	sub	sp, #240	@ 0xf0
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	22e0      	movs	r2, #224	@ 0xe0
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f00c f85f 	bl	800dde4 <memset>
  if(hrtc->Instance==RTC)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001da0 <HAL_RTC_MspInit+0x90>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d132      	bne.n	8001d96 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d30:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f007 fdad 	bl	80098a8 <HAL_RCCEx_PeriphCLKConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001d54:	f7ff fc8c 	bl	8001670 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d58:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <HAL_RTC_MspInit+0x94>)
 8001d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d5e:	4a11      	ldr	r2, [pc, #68]	@ (8001da4 <HAL_RTC_MspInit+0x94>)
 8001d60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d64:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001d68:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <HAL_RTC_MspInit+0x94>)
 8001d6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001d6e:	4a0d      	ldr	r2, [pc, #52]	@ (8001da4 <HAL_RTC_MspInit+0x94>)
 8001d70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d74:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001d78:	4b0a      	ldr	r3, [pc, #40]	@ (8001da4 <HAL_RTC_MspInit+0x94>)
 8001d7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001d7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8001d86:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <HAL_RTC_MspInit+0x94>)
 8001d88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d8c:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <HAL_RTC_MspInit+0x94>)
 8001d8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d92:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d96:	bf00      	nop
 8001d98:	37f0      	adds	r7, #240	@ 0xf0
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	46007800 	.word	0x46007800
 8001da4:	46020c00 	.word	0x46020c00

08001da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b0c2      	sub	sp, #264	@ 0x108
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001db2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001db6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	22e0      	movs	r2, #224	@ 0xe0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f00c f807 	bl	800dde4 <memset>
  if(huart->Instance==UART4)
 8001dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001dda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a2a      	ldr	r2, [pc, #168]	@ (8001e8c <HAL_UART_MspInit+0xe4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d14c      	bne.n	8001e82 <HAL_UART_MspInit+0xda>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001de8:	f04f 0208 	mov.w	r2, #8
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001df4:	2300      	movs	r3, #0
 8001df6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f007 fd53 	bl	80098a8 <HAL_RCCEx_PeriphCLKConfig>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8001e08:	f7ff fc32 	bl	8001670 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e0c:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <HAL_UART_MspInit+0xe8>)
 8001e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e12:	4a1f      	ldr	r2, [pc, #124]	@ (8001e90 <HAL_UART_MspInit+0xe8>)
 8001e14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e18:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e90 <HAL_UART_MspInit+0xe8>)
 8001e1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <HAL_UART_MspInit+0xe8>)
 8001e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e30:	4a17      	ldr	r2, [pc, #92]	@ (8001e90 <HAL_UART_MspInit+0xe8>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <HAL_UART_MspInit+0xe8>)
 8001e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e40:	f003 0201 	and.w	r2, r3, #1
 8001e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e48:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e52:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e56:	681b      	ldr	r3, [r3, #0]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e70:	2308      	movs	r3, #8
 8001e72:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4805      	ldr	r0, [pc, #20]	@ (8001e94 <HAL_UART_MspInit+0xec>)
 8001e7e:	f005 fa59 	bl	8007334 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001e82:	bf00      	nop
 8001e84:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40004c00 	.word	0x40004c00
 8001e90:	46020c00 	.word	0x46020c00
 8001e94:	42020000 	.word	0x42020000

08001e98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08e      	sub	sp, #56	@ 0x38
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f64 <HAL_InitTick+0xcc>)
 8001eaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001eae:	4a2d      	ldr	r2, [pc, #180]	@ (8001f64 <HAL_InitTick+0xcc>)
 8001eb0:	f043 0310 	orr.w	r3, r3, #16
 8001eb4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f64 <HAL_InitTick+0xcc>)
 8001eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ec6:	f107 0210 	add.w	r2, r7, #16
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f007 fbff 	bl	80096d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ed6:	f007 fbc1 	bl	800965c <HAL_RCC_GetPCLK1Freq>
 8001eda:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ede:	4a22      	ldr	r2, [pc, #136]	@ (8001f68 <HAL_InitTick+0xd0>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	0c9b      	lsrs	r3, r3, #18
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001eea:	4b20      	ldr	r3, [pc, #128]	@ (8001f6c <HAL_InitTick+0xd4>)
 8001eec:	4a20      	ldr	r2, [pc, #128]	@ (8001f70 <HAL_InitTick+0xd8>)
 8001eee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f6c <HAL_InitTick+0xd4>)
 8001ef2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ef6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f6c <HAL_InitTick+0xd4>)
 8001efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001efc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001efe:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <HAL_InitTick+0xd4>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f04:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <HAL_InitTick+0xd4>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001f0a:	4818      	ldr	r0, [pc, #96]	@ (8001f6c <HAL_InitTick+0xd4>)
 8001f0c:	f00a fe84 	bl	800cc18 <HAL_TIM_Base_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001f16:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d118      	bne.n	8001f50 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001f1e:	4813      	ldr	r0, [pc, #76]	@ (8001f6c <HAL_InitTick+0xd4>)
 8001f20:	f00a fedc 	bl	800ccdc <HAL_TIM_Base_Start_IT>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001f2a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10e      	bne.n	8001f50 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b0f      	cmp	r3, #15
 8001f36:	d808      	bhi.n	8001f4a <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	2031      	movs	r0, #49	@ 0x31
 8001f3e:	f002 fe7f 	bl	8004c40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f42:	4a0c      	ldr	r2, [pc, #48]	@ (8001f74 <HAL_InitTick+0xdc>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	e002      	b.n	8001f50 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001f50:	2031      	movs	r0, #49	@ 0x31
 8001f52:	f002 fe8f 	bl	8004c74 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001f56:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3738      	adds	r7, #56	@ 0x38
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	46020c00 	.word	0x46020c00
 8001f68:	431bde83 	.word	0x431bde83
 8001f6c:	200003a8 	.word	0x200003a8
 8001f70:	40001000 	.word	0x40001000
 8001f74:	20000004 	.word	0x20000004

08001f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001f7c:	f007 fbf2 	bl	8009764 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <NMI_Handler+0x8>

08001f84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <HardFault_Handler+0x4>

08001f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <MemManage_Handler+0x4>

08001f94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <BusFault_Handler+0x4>

08001f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <UsageFault_Handler+0x4>

08001fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC non-secure global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001ff0:	4802      	ldr	r0, [pc, #8]	@ (8001ffc <GPDMA1_Channel0_IRQHandler+0x10>)
 8001ff2:	f002 ffb0 	bl	8004f56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200000f0 	.word	0x200000f0

08002000 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002004:	4802      	ldr	r0, [pc, #8]	@ (8002010 <ADC1_2_IRQHandler+0x10>)
 8002006:	f001 f8ff 	bl	8003208 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000028 	.word	0x20000028

08002014 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002018:	4802      	ldr	r0, [pc, #8]	@ (8002024 <TIM6_IRQHandler+0x10>)
 800201a:	f00a feff 	bl	800ce1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200003a8 	.word	0x200003a8

08002028 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800202c:	4802      	ldr	r0, [pc, #8]	@ (8002038 <LTDC_IRQHandler+0x10>)
 800202e:	f005 fd9b 	bl	8007b68 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000238 	.word	0x20000238

0800203c <DSI_IRQHandler>:

/**
  * @brief This function handles DSIHOST global interrupt.
  */
void DSI_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002040:	4802      	ldr	r0, [pc, #8]	@ (800204c <DSI_IRQHandler+0x10>)
 8002042:	f004 fd21 	bl	8006a88 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200001c0 	.word	0x200001c0

08002050 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002054:	4b18      	ldr	r3, [pc, #96]	@ (80020b8 <SystemInit+0x68>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205a:	4a17      	ldr	r2, [pc, #92]	@ (80020b8 <SystemInit+0x68>)
 800205c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002060:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002064:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <SystemInit+0x6c>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800206a:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <SystemInit+0x6c>)
 800206c:	2200      	movs	r2, #0
 800206e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002070:	4b12      	ldr	r3, [pc, #72]	@ (80020bc <SystemInit+0x6c>)
 8002072:	2200      	movs	r2, #0
 8002074:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002076:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <SystemInit+0x6c>)
 8002078:	2200      	movs	r2, #0
 800207a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800207c:	4b0f      	ldr	r3, [pc, #60]	@ (80020bc <SystemInit+0x6c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0e      	ldr	r2, [pc, #56]	@ (80020bc <SystemInit+0x6c>)
 8002082:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002086:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800208a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800208c:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <SystemInit+0x6c>)
 800208e:	2200      	movs	r2, #0
 8002090:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002092:	4b0a      	ldr	r3, [pc, #40]	@ (80020bc <SystemInit+0x6c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a09      	ldr	r2, [pc, #36]	@ (80020bc <SystemInit+0x6c>)
 8002098:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800209c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800209e:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <SystemInit+0x6c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020a4:	4b04      	ldr	r3, [pc, #16]	@ (80020b8 <SystemInit+0x68>)
 80020a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80020aa:	609a      	str	r2, [r3, #8]
  #endif
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00
 80020bc:	46020c00 	.word	0x46020c00

080020c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80020c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020f8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80020c4:	f7ff ffc4 	bl	8002050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020ca:	e003      	b.n	80020d4 <LoopCopyDataInit>

080020cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020cc:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020d2:	3104      	adds	r1, #4

080020d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020d4:	480a      	ldr	r0, [pc, #40]	@ (8002100 <LoopForever+0xa>)
	ldr	r3, =_edata
 80020d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002104 <LoopForever+0xe>)
	adds	r2, r0, r1
 80020d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020dc:	d3f6      	bcc.n	80020cc <CopyDataInit>
	ldr	r2, =_sbss
 80020de:	4a0a      	ldr	r2, [pc, #40]	@ (8002108 <LoopForever+0x12>)
	b	LoopFillZerobss
 80020e0:	e002      	b.n	80020e8 <LoopFillZerobss>

080020e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020e4:	f842 3b04 	str.w	r3, [r2], #4

080020e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020e8:	4b08      	ldr	r3, [pc, #32]	@ (800210c <LoopForever+0x16>)
	cmp	r2, r3
 80020ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020ec:	d3f9      	bcc.n	80020e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ee:	f00b fe81 	bl	800ddf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020f2:	f7fe fa6b 	bl	80005cc <main>

080020f6 <LoopForever>:

LoopForever:
    b LoopForever
 80020f6:	e7fe      	b.n	80020f6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80020f8:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 80020fc:	0800df78 	.word	0x0800df78
	ldr	r0, =_sdata
 8002100:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002104:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002108:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800210c:	200003f8 	.word	0x200003f8

08002110 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002110:	e7fe      	b.n	8002110 <ADC4_IRQHandler>
	...

08002114 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002118:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <HAL_Init+0x50>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a11      	ldr	r2, [pc, #68]	@ (8002164 <HAL_Init+0x50>)
 800211e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002124:	2003      	movs	r0, #3
 8002126:	f002 fd80 	bl	8004c2a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800212a:	f007 f97b 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800212e:	4602      	mov	r2, r0
 8002130:	4b0d      	ldr	r3, [pc, #52]	@ (8002168 <HAL_Init+0x54>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	490c      	ldr	r1, [pc, #48]	@ (800216c <HAL_Init+0x58>)
 800213a:	5ccb      	ldrb	r3, [r1, r3]
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
 8002140:	4a0b      	ldr	r2, [pc, #44]	@ (8002170 <HAL_Init+0x5c>)
 8002142:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002144:	2004      	movs	r0, #4
 8002146:	f002 fda3 	bl	8004c90 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800214a:	200f      	movs	r0, #15
 800214c:	f7ff fea4 	bl	8001e98 <HAL_InitTick>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e002      	b.n	8002160 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800215a:	f7ff fa8f 	bl	800167c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40022000 	.word	0x40022000
 8002168:	46020c00 	.word	0x46020c00
 800216c:	0800de68 	.word	0x0800de68
 8002170:	20000000 	.word	0x20000000

08002174 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_IncTick+0x20>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_IncTick+0x24>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a04      	ldr	r2, [pc, #16]	@ (8002198 <HAL_IncTick+0x24>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000008 	.word	0x20000008
 8002198:	200003f4 	.word	0x200003f4

0800219c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b03      	ldr	r3, [pc, #12]	@ (80021b0 <HAL_GetTick+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	200003f4 	.word	0x200003f4

080021b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021bc:	f7ff ffee 	bl	800219c <HAL_GetTick>
 80021c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021cc:	d005      	beq.n	80021da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ce:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <HAL_Delay+0x44>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4413      	add	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021da:	bf00      	nop
 80021dc:	f7ff ffde 	bl	800219c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d8f7      	bhi.n	80021dc <HAL_Delay+0x28>
  {
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000008 	.word	0x20000008

080021fc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT1 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800220c:	4904      	ldr	r1, [pc, #16]	@ (8002220 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	46007400 	.word	0x46007400

08002224 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 0202 	bic.w	r2, r3, #2
 8002234:	4904      	ldr	r1, [pc, #16]	@ (8002248 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	46007400 	.word	0x46007400

0800224c <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002252:	4b0f      	ldr	r3, [pc, #60]	@ (8002290 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a0e      	ldr	r2, [pc, #56]	@ (8002290 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800225e:	f7ff ff9d 	bl	800219c <HAL_GetTick>
 8002262:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8002264:	e008      	b.n	8002278 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8002266:	f7ff ff99 	bl	800219c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b0a      	cmp	r3, #10
 8002272:	d901      	bls.n	8002278 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e006      	b.n	8002286 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8002278:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	46007400 	.word	0x46007400

08002294 <HAL_SYSCFG_DisableSRAMCached>:
  * @brief  Disable the Cacheability of internal SRAMx by DCACHE2
  *
  * @retval None
  */
void HAL_SYSCFG_DisableSRAMCached(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  CLEAR_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_SRAMCACHED);
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <HAL_SYSCFG_DisableSRAMCached+0x1c>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4a04      	ldr	r2, [pc, #16]	@ (80022b0 <HAL_SYSCFG_DisableSRAMCached+0x1c>)
 800229e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	6053      	str	r3, [r2, #4]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	46000400 	.word	0x46000400

080022b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	609a      	str	r2, [r3, #8]
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	609a      	str	r2, [r3, #8]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <LL_ADC_SetResolution+0x3c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d104      	bne.n	800233c <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	3b01      	subs	r3, #1
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f023 020c 	bic.w	r2, r3, #12
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	60da      	str	r2, [r3, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	46021000 	.word	0x46021000

0800235c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3360      	adds	r3, #96	@ 0x60
 800236e:	461a      	mov	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	430b      	orrs	r3, r1
 800238c:	431a      	orrs	r2, r3
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002392:	bf00      	nop
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3360      	adds	r3, #96	@ 0x60
 80023ac:	461a      	mov	r2, r3
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b087      	sub	sp, #28
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3360      	adds	r3, #96	@ 0x60
 80023da:	461a      	mov	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	601a      	str	r2, [r3, #0]
}
 80023f4:	bf00      	nop
 80023f6:	371c      	adds	r7, #28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3360      	adds	r3, #96	@ 0x60
 8002410:	461a      	mov	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	431a      	orrs	r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	601a      	str	r2, [r3, #0]
}
 800242a:	bf00      	nop
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002436:	b480      	push	{r7}
 8002438:	b087      	sub	sp, #28
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	3360      	adds	r3, #96	@ 0x60
 8002446:	461a      	mov	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	431a      	orrs	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	601a      	str	r2, [r3, #0]
}
 8002460:	bf00      	nop
 8002462:	371c      	adds	r7, #28
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800247e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	2a00      	cmp	r2, #0
 8002496:	d002      	beq.n	800249e <LL_ADC_SetGainCompensation+0x32>
 8002498:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800249c:	e000      	b.n	80024a0 <LL_ADC_SetGainCompensation+0x34>
 800249e:	2200      	movs	r2, #0
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b085      	sub	sp, #20
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2107      	movs	r1, #7
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	401a      	ands	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	431a      	orrs	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	@ 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4a2b      	ldr	r2, [pc, #172]	@ (80025d4 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d020      	beq.n	800256e <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	3330      	adds	r3, #48	@ 0x30
 8002530:	461a      	mov	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	0a1b      	lsrs	r3, r3, #8
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	4413      	add	r3, r2
 800253e:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	211f      	movs	r1, #31
 800254c:	fa01 f303 	lsl.w	r3, r1, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	401a      	ands	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	0e9b      	lsrs	r3, r3, #26
 8002558:	f003 011f 	and.w	r1, r3, #31
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	431a      	orrs	r2, r3
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 800256c:	e02b      	b.n	80025c6 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	210f      	movs	r1, #15
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	401a      	ands	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d104      	bne.n	8002596 <LL_ADC_REG_SetSequencerRanks+0x7e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	0e9b      	lsrs	r3, r3, #26
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	e010      	b.n	80025b8 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	613b      	str	r3, [r7, #16]
  return result;
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 80025ac:	2320      	movs	r3, #32
 80025ae:	e003      	b.n	80025b8 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	fab3 f383 	clz	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	f001 011f 	and.w	r1, r1, #31
 80025be:	408b      	lsls	r3, r1
 80025c0:	431a      	orrs	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025c6:	bf00      	nop
 80025c8:	3724      	adds	r7, #36	@ 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	46021000 	.word	0x46021000

080025d8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d107      	bne.n	80025fc <LL_ADC_REG_SetSequencerChAdd+0x24>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	0e9b      	lsrs	r3, r3, #26
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2201      	movs	r2, #1
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	e015      	b.n	8002628 <LL_ADC_REG_SetSequencerChAdd+0x50>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	60fb      	str	r3, [r7, #12]
  return result;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8002612:	2320      	movs	r3, #32
 8002614:	e003      	b.n	800261e <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	2201      	movs	r2, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002632:	bf00      	nop
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	0e9b      	lsrs	r3, r3, #26
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	2101      	movs	r1, #1
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	401a      	ands	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f003 0303 	and.w	r3, r3, #3
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002696:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b08b      	sub	sp, #44	@ 0x2c
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4a2d      	ldr	r2, [pc, #180]	@ (8002774 <LL_ADC_SetChannelSamplingTime+0xc4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d042      	beq.n	800274a <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d104      	bne.n	80026d8 <LL_ADC_SetChannelSamplingTime+0x28>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	0e9b      	lsrs	r3, r3, #26
 80026d2:	f003 021f 	and.w	r2, r3, #31
 80026d6:	e011      	b.n	80026fc <LL_ADC_SetChannelSamplingTime+0x4c>
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	fa93 f3a3 	rbit	r3, r3
 80026e2:	617b      	str	r3, [r7, #20]
  return result;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80026ee:	2320      	movs	r3, #32
 80026f0:	e003      	b.n	80026fa <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	fab3 f383 	clz	r3, r3
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	0e5b      	lsrs	r3, r3, #25
 8002700:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002704:	460b      	mov	r3, r1
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	1ad2      	subs	r2, r2, r3
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3314      	adds	r3, #20
 800271a:	461a      	mov	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	0e5b      	lsrs	r3, r3, #25
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	4413      	add	r3, r2
 8002728:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	2107      	movs	r1, #7
 8002730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	401a      	ands	r2, r3
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	431a      	orrs	r2, r3
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8002748:	e00e      	b.n	8002768 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	43db      	mvns	r3, r3
 8002754:	401a      	ands	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	0219      	lsls	r1, r3, #8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	400b      	ands	r3, r1
 800275e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002762:	431a      	orrs	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	615a      	str	r2, [r3, #20]
}
 8002768:	bf00      	nop
 800276a:	372c      	adds	r7, #44	@ 0x2c
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	46021000 	.word	0x46021000

08002778 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002790:	43db      	mvns	r3, r3
 8002792:	401a      	ands	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0318 	and.w	r3, r3, #24
 800279a:	4908      	ldr	r1, [pc, #32]	@ (80027bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800279c:	40d9      	lsrs	r1, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	400b      	ands	r3, r1
 80027a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80027a6:	431a      	orrs	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	000fffff 	.word	0x000fffff

080027c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 031f 	and.w	r3, r3, #31
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002808:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6093      	str	r3, [r2, #8]
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800282c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002830:	d101      	bne.n	8002836 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002854:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002858:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	609a      	str	r2, [r3, #8]
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002880:	d101      	bne.n	8002886 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028a8:	f043 0201 	orr.w	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	609a      	str	r2, [r3, #8]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028d0:	f043 0202 	orr.w	r2, r3, #2
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	609a      	str	r2, [r3, #8]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <LL_ADC_IsEnabled+0x18>
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <LL_ADC_IsEnabled+0x1a>
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b02      	cmp	r3, #2
 800291c:	d101      	bne.n	8002922 <LL_ADC_IsDisableOngoing+0x18>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <LL_ADC_IsDisableOngoing+0x1a>
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002940:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002944:	f043 0204 	orr.w	r2, r3, #4
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	609a      	str	r2, [r3, #8]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b04      	cmp	r3, #4
 800296a:	d101      	bne.n	8002970 <LL_ADC_REG_IsConversionOngoing+0x18>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b08      	cmp	r3, #8
 8002990:	d101      	bne.n	8002996 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b08b      	sub	sp, #44	@ 0x2c
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e2ce      	b.n	8002f62 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a95      	ldr	r2, [pc, #596]	@ (8002c28 <HAL_ADC_Init+0x284>)
 80029d2:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d109      	bne.n	80029f0 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7fe fe87 	bl	80016f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff11 	bl	800281c <LL_ADC_IsDeepPowerDownEnabled>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d004      	beq.n	8002a0a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fef7 	bl	80027f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff ff2c 	bl	800286c <LL_ADC_IsInternalRegulatorEnabled>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d115      	bne.n	8002a46 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ff10 	bl	8002844 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a24:	4b81      	ldr	r3, [pc, #516]	@ (8002c2c <HAL_ADC_Init+0x288>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	099b      	lsrs	r3, r3, #6
 8002a2a:	4a81      	ldr	r2, [pc, #516]	@ (8002c30 <HAL_ADC_Init+0x28c>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	099b      	lsrs	r3, r3, #6
 8002a32:	3301      	adds	r3, #1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a38:	e002      	b.n	8002a40 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f9      	bne.n	8002a3a <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ff0e 	bl	800286c <LL_ADC_IsInternalRegulatorEnabled>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10e      	bne.n	8002a74 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a5a:	f043 0210 	orr.w	r2, r3, #16
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a66:	f043 0201 	orr.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff6d 	bl	8002958 <LL_ADC_REG_IsConversionOngoing>
 8002a7e:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a84:	f003 0310 	and.w	r3, r3, #16
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f040 825f 	bne.w	8002f4c <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f040 825b 	bne.w	8002f4c <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a9a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a9e:	f043 0202 	orr.w	r2, r3, #2
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff1a 	bl	80028e4 <LL_ADC_IsEnabled>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d14f      	bne.n	8002b56 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a5b      	ldr	r2, [pc, #364]	@ (8002c28 <HAL_ADC_Init+0x284>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d037      	beq.n	8002b30 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a5b      	ldr	r2, [pc, #364]	@ (8002c34 <HAL_ADC_Init+0x290>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d004      	beq.n	8002ad4 <HAL_ADC_Init+0x130>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a5a      	ldr	r2, [pc, #360]	@ (8002c38 <HAL_ADC_Init+0x294>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d10e      	bne.n	8002af2 <HAL_ADC_Init+0x14e>
 8002ad4:	4857      	ldr	r0, [pc, #348]	@ (8002c34 <HAL_ADC_Init+0x290>)
 8002ad6:	f7ff ff05 	bl	80028e4 <LL_ADC_IsEnabled>
 8002ada:	4604      	mov	r4, r0
 8002adc:	4856      	ldr	r0, [pc, #344]	@ (8002c38 <HAL_ADC_Init+0x294>)
 8002ade:	f7ff ff01 	bl	80028e4 <LL_ADC_IsEnabled>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4323      	orrs	r3, r4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	bf0c      	ite	eq
 8002aea:	2301      	moveq	r3, #1
 8002aec:	2300      	movne	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	e008      	b.n	8002b04 <HAL_ADC_Init+0x160>
 8002af2:	484d      	ldr	r0, [pc, #308]	@ (8002c28 <HAL_ADC_Init+0x284>)
 8002af4:	f7ff fef6 	bl	80028e4 <LL_ADC_IsEnabled>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	bf0c      	ite	eq
 8002afe:	2301      	moveq	r3, #1
 8002b00:	2300      	movne	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d026      	beq.n	8002b56 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a49      	ldr	r2, [pc, #292]	@ (8002c34 <HAL_ADC_Init+0x290>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d004      	beq.n	8002b1c <HAL_ADC_Init+0x178>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a48      	ldr	r2, [pc, #288]	@ (8002c38 <HAL_ADC_Init+0x294>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d101      	bne.n	8002b20 <HAL_ADC_Init+0x17c>
 8002b1c:	4a47      	ldr	r2, [pc, #284]	@ (8002c3c <HAL_ADC_Init+0x298>)
 8002b1e:	e000      	b.n	8002b22 <HAL_ADC_Init+0x17e>
 8002b20:	4a47      	ldr	r2, [pc, #284]	@ (8002c40 <HAL_ADC_Init+0x29c>)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4619      	mov	r1, r3
 8002b28:	4610      	mov	r0, r2
 8002b2a:	f7ff fbc3 	bl	80022b4 <LL_ADC_SetCommonClock>
 8002b2e:	e012      	b.n	8002b56 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	f7ff fbee 	bl	800231c <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8002b40:	4b3f      	ldr	r3, [pc, #252]	@ (8002c40 <HAL_ADC_Init+0x29c>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002b50:	493b      	ldr	r1, [pc, #236]	@ (8002c40 <HAL_ADC_Init+0x29c>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a33      	ldr	r2, [pc, #204]	@ (8002c28 <HAL_ADC_Init+0x284>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d010      	beq.n	8002b82 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b66:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002b6c:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8002b72:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002b7a:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	623b      	str	r3, [r7, #32]
 8002b80:	e035      	b.n	8002bee <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	7f1b      	ldrb	r3, [r3, #28]
 8002b86:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b8e:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b90:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b96:	2a00      	cmp	r2, #0
 8002b98:	d002      	beq.n	8002ba0 <HAL_ADC_Init+0x1fc>
 8002b9a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b9e:	e000      	b.n	8002ba2 <HAL_ADC_Init+0x1fe>
 8002ba0:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ba2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002ba8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	da04      	bge.n	8002bbc <HAL_ADC_Init+0x218>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bba:	e001      	b.n	8002bc0 <HAL_ADC_Init+0x21c>
 8002bbc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8002bc0:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	491b      	ldr	r1, [pc, #108]	@ (8002c34 <HAL_ADC_Init+0x290>)
 8002bc8:	428b      	cmp	r3, r1
 8002bca:	d004      	beq.n	8002bd6 <HAL_ADC_Init+0x232>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4919      	ldr	r1, [pc, #100]	@ (8002c38 <HAL_ADC_Init+0x294>)
 8002bd2:	428b      	cmp	r3, r1
 8002bd4:	d103      	bne.n	8002bde <HAL_ADC_Init+0x23a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bdc:	e003      	b.n	8002be6 <HAL_ADC_Init+0x242>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002be4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002be6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002be8:	6a3a      	ldr	r2, [r7, #32]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d131      	bne.n	8002c5c <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8002c28 <HAL_ADC_Init+0x284>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	3b01      	subs	r3, #1
 8002c08:	045b      	lsls	r3, r3, #17
 8002c0a:	6a3a      	ldr	r2, [r7, #32]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	623b      	str	r3, [r7, #32]
 8002c10:	e024      	b.n	8002c5c <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d113      	bne.n	8002c44 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c22:	623b      	str	r3, [r7, #32]
 8002c24:	e01a      	b.n	8002c5c <HAL_ADC_Init+0x2b8>
 8002c26:	bf00      	nop
 8002c28:	46021000 	.word	0x46021000
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	053e2d63 	.word	0x053e2d63
 8002c34:	42028000 	.word	0x42028000
 8002c38:	42028100 	.word	0x42028100
 8002c3c:	42028300 	.word	0x42028300
 8002c40:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c48:	f043 0220 	orr.w	r2, r3, #32
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a75      	ldr	r2, [pc, #468]	@ (8002e38 <HAL_ADC_Init+0x494>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d018      	beq.n	8002c98 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c72:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	6a3a      	ldr	r2, [r7, #32]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	4b6c      	ldr	r3, [pc, #432]	@ (8002e3c <HAL_ADC_Init+0x498>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	6a39      	ldr	r1, [r7, #32]
 8002c92:	430b      	orrs	r3, r1
 8002c94:	60d3      	str	r3, [r2, #12]
 8002c96:	e031      	b.n	8002cfc <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d009      	beq.n	8002cb4 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca4:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cac:	4313      	orrs	r3, r2
 8002cae:	6a3a      	ldr	r2, [r7, #32]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	4b61      	ldr	r3, [pc, #388]	@ (8002e40 <HAL_ADC_Init+0x49c>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	6a39      	ldr	r1, [r7, #32]
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1a      	ldr	r2, [r3, #32]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a4d      	ldr	r2, [pc, #308]	@ (8002e38 <HAL_ADC_Init+0x494>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	f000 80a4 	beq.w	8002e50 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fe23 	bl	8002958 <LL_ADC_REG_IsConversionOngoing>
 8002d12:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fe30 	bl	800297e <LL_ADC_INJ_IsConversionOngoing>
 8002d1e:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d166      	bne.n	8002df4 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d163      	bne.n	8002df4 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	7f1b      	ldrb	r3, [r3, #28]
 8002d30:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4943      	ldr	r1, [pc, #268]	@ (8002e44 <HAL_ADC_Init+0x4a0>)
 8002d38:	428b      	cmp	r3, r1
 8002d3a:	d004      	beq.n	8002d46 <HAL_ADC_Init+0x3a2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4941      	ldr	r1, [pc, #260]	@ (8002e48 <HAL_ADC_Init+0x4a4>)
 8002d42:	428b      	cmp	r3, r1
 8002d44:	d102      	bne.n	8002d4c <HAL_ADC_Init+0x3a8>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d4a:	e002      	b.n	8002d52 <HAL_ADC_Init+0x3ae>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d50:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d52:	4313      	orrs	r3, r2
 8002d54:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d60:	f023 0303 	bic.w	r3, r3, #3
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	6a39      	ldr	r1, [r7, #32]
 8002d6a:	430b      	orrs	r3, r1
 8002d6c:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4610      	mov	r0, r2
 8002d82:	f7ff fb73 	bl	800246c <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d11e      	bne.n	8002dce <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d94:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e4c <HAL_ADC_Init+0x4a8>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002da4:	0411      	lsls	r1, r2, #16
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002daa:	4311      	orrs	r1, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8002db0:	4311      	orrs	r1, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002db6:	4311      	orrs	r1, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002dbc:	0892      	lsrs	r2, r2, #2
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	611a      	str	r2, [r3, #16]
 8002dcc:	e007      	b.n	8002dde <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d10c      	bne.n	8002e16 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	f023 010f 	bic.w	r1, r3, #15
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0a:	1e5a      	subs	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e14:	e007      	b.n	8002e26 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 020f 	bic.w	r2, r2, #15
 8002e24:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e2a:	f023 0303 	bic.w	r3, r3, #3
 8002e2e:	f043 0201 	orr.w	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002e36:	e092      	b.n	8002f5e <HAL_ADC_Init+0x5ba>
 8002e38:	46021000 	.word	0x46021000
 8002e3c:	fff0c013 	.word	0xfff0c013
 8002e40:	ffde800d 	.word	0xffde800d
 8002e44:	42028000 	.word	0x42028000
 8002e48:	42028100 	.word	0x42028100
 8002e4c:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d111      	bne.n	8002e7e <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002e62:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002e68:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002e6e:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	4b39      	ldr	r3, [pc, #228]	@ (8002f6c <HAL_ADC_Init+0x5c8>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	69f9      	ldr	r1, [r7, #28]
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	f7ff fb08 	bl	80024b2 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8002eb0:	f7ff faff 	bl	80024b2 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d108      	bne.n	8002ece <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f062 020f 	orn	r2, r2, #15
 8002eca:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ecc:	e018      	b.n	8002f00 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ed6:	d113      	bne.n	8002f00 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	f003 031c 	and.w	r3, r3, #28
 8002eea:	f06f 020f 	mvn.w	r2, #15
 8002eee:	fa02 f103 	lsl.w	r1, r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	4b1a      	ldr	r3, [pc, #104]	@ (8002f70 <HAL_ADC_Init+0x5cc>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	6a3a      	ldr	r2, [r7, #32]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d10b      	bne.n	8002f28 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f1a:	f023 0303 	bic.w	r3, r3, #3
 8002f1e:	f043 0201 	orr.w	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002f26:	e01a      	b.n	8002f5e <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f2c:	f023 0312 	bic.w	r3, r3, #18
 8002f30:	f043 0210 	orr.w	r2, r3, #16
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f3c:	f043 0201 	orr.w	r2, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002f4a:	e008      	b.n	8002f5e <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f50:	f043 0210 	orr.w	r2, r3, #16
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	372c      	adds	r7, #44	@ 0x2c
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd90      	pop	{r4, r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	f7fffc02 	.word	0xf7fffc02
 8002f70:	833ffff3 	.word	0x833ffff3

08002f74 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b0a2      	sub	sp, #136	@ 0x88
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a98      	ldr	r2, [pc, #608]	@ (80031e8 <HAL_ADC_Start_DMA+0x274>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_ADC_Start_DMA+0x20>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a97      	ldr	r2, [pc, #604]	@ (80031ec <HAL_ADC_Start_DMA+0x278>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d101      	bne.n	8002f98 <HAL_ADC_Start_DMA+0x24>
 8002f94:	4b96      	ldr	r3, [pc, #600]	@ (80031f0 <HAL_ADC_Start_DMA+0x27c>)
 8002f96:	e000      	b.n	8002f9a <HAL_ADC_Start_DMA+0x26>
 8002f98:	4b96      	ldr	r3, [pc, #600]	@ (80031f4 <HAL_ADC_Start_DMA+0x280>)
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fc10 	bl	80027c0 <LL_ADC_GetMultimode>
 8002fa0:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fcd6 	bl	8002958 <LL_ADC_REG_IsConversionOngoing>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f040 8111 	bne.w	80031d6 <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_ADC_Start_DMA+0x4e>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e10e      	b.n	80031e0 <HAL_ADC_Start_DMA+0x26c>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d006      	beq.n	8002fde <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fd2:	2b05      	cmp	r3, #5
 8002fd4:	d003      	beq.n	8002fde <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002fd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fd8:	2b09      	cmp	r3, #9
 8002fda:	f040 80f4 	bne.w	80031c6 <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f001 fa2c 	bl	800443c <ADC_Enable>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002fea:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 80e4 	bne.w	80031bc <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ff8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a7a      	ldr	r2, [pc, #488]	@ (80031f8 <HAL_ADC_Start_DMA+0x284>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d026      	beq.n	8003060 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a75      	ldr	r2, [pc, #468]	@ (80031ec <HAL_ADC_Start_DMA+0x278>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d002      	beq.n	8003022 <HAL_ADC_Start_DMA+0xae>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	e000      	b.n	8003024 <HAL_ADC_Start_DMA+0xb0>
 8003022:	4b71      	ldr	r3, [pc, #452]	@ (80031e8 <HAL_ADC_Start_DMA+0x274>)
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	4293      	cmp	r3, r2
 800302a:	d002      	beq.n	8003032 <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800302c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d105      	bne.n	800303e <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003036:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003042:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d006      	beq.n	8003058 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800304e:	f023 0206 	bic.w	r2, r3, #6
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003056:	e006      	b.n	8003066 <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800305e:	e002      	b.n	8003066 <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306a:	4a64      	ldr	r2, [pc, #400]	@ (80031fc <HAL_ADC_Start_DMA+0x288>)
 800306c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003072:	4a63      	ldr	r2, [pc, #396]	@ (8003200 <HAL_ADC_Start_DMA+0x28c>)
 8003074:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307a:	4a62      	ldr	r2, [pc, #392]	@ (8003204 <HAL_ADC_Start_DMA+0x290>)
 800307c:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	221c      	movs	r2, #28
 8003084:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0210 	orr.w	r2, r2, #16
 800309c:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a55      	ldr	r2, [pc, #340]	@ (80031f8 <HAL_ADC_Start_DMA+0x284>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d107      	bne.n	80030b8 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d04f      	beq.n	8003166 <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d046      	beq.n	800315e <HAL_ADC_Start_DMA+0x1ea>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d040      	beq.n	800315e <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	f107 0310 	add.w	r3, r7, #16
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f002 facc 	bl	8005688 <HAL_DMAEx_List_GetNodeConfig>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e072      	b.n	80031e0 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80030fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d104      	bne.n	800310a <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003108:	e00a      	b.n	8003120 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800310a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310c:	2b01      	cmp	r3, #1
 800310e:	d104      	bne.n	800311a <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003118:	e002      	b.n	8003120 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800312c:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800313a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003150:	4618      	mov	r0, r3
 8003152:	f002 f9ef 	bl	8005534 <HAL_DMAEx_List_Start_IT>
 8003156:	4603      	mov	r3, r0
 8003158:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800315c:	e028      	b.n	80031b0 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003164:	e024      	b.n	80031b0 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d104      	bne.n	800317a <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003178:	e00c      	b.n	8003194 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d104      	bne.n	800318e <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800318c:	e002      	b.n	8003194 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3340      	adds	r3, #64	@ 0x40
 800319e:	4619      	mov	r1, r3
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031a6:	f001 fe76 	bl	8004e96 <HAL_DMA_Start_IT>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fbbb 	bl	8002930 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80031ba:	e00f      	b.n	80031dc <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 80031c4:	e00a      	b.n	80031dc <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 80031d4:	e002      	b.n	80031dc <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031d6:	2302      	movs	r3, #2
 80031d8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 80031dc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3788      	adds	r7, #136	@ 0x88
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	42028000 	.word	0x42028000
 80031ec:	42028100 	.word	0x42028100
 80031f0:	42028300 	.word	0x42028300
 80031f4:	46021300 	.word	0x46021300
 80031f8:	46021000 	.word	0x46021000
 80031fc:	0800462f 	.word	0x0800462f
 8003200:	08004707 	.word	0x08004707
 8003204:	08004723 	.word	0x08004723

08003208 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	@ 0x28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003210:	2300      	movs	r3, #0
 8003212:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a77      	ldr	r2, [pc, #476]	@ (8003408 <HAL_ADC_IRQHandler+0x200>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_ADC_IRQHandler+0x30>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a76      	ldr	r2, [pc, #472]	@ (800340c <HAL_ADC_IRQHandler+0x204>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d101      	bne.n	800323c <HAL_ADC_IRQHandler+0x34>
 8003238:	4b75      	ldr	r3, [pc, #468]	@ (8003410 <HAL_ADC_IRQHandler+0x208>)
 800323a:	e000      	b.n	800323e <HAL_ADC_IRQHandler+0x36>
 800323c:	4b75      	ldr	r3, [pc, #468]	@ (8003414 <HAL_ADC_IRQHandler+0x20c>)
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fabe 	bl	80027c0 <LL_ADC_GetMultimode>
 8003244:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d017      	beq.n	8003280 <HAL_ADC_IRQHandler+0x78>
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d012      	beq.n	8003280 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	d105      	bne.n	8003272 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800326a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f001 fc22 	bl	8004abc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2202      	movs	r2, #2
 800327e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b00      	cmp	r3, #0
 8003288:	d004      	beq.n	8003294 <HAL_ADC_IRQHandler+0x8c>
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10b      	bne.n	80032ac <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 80d1 	beq.w	8003442 <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80cb 	beq.w	8003442 <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d105      	bne.n	80032c4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a53      	ldr	r2, [pc, #332]	@ (8003418 <HAL_ADC_IRQHandler+0x210>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d06c      	beq.n	80033a8 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff f90c 	bl	80024f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 80aa 	beq.w	8003434 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a49      	ldr	r2, [pc, #292]	@ (800340c <HAL_ADC_IRQHandler+0x204>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d002      	beq.n	80032f0 <HAL_ADC_IRQHandler+0xe8>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	e000      	b.n	80032f2 <HAL_ADC_IRQHandler+0xea>
 80032f0:	4b45      	ldr	r3, [pc, #276]	@ (8003408 <HAL_ADC_IRQHandler+0x200>)
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d008      	beq.n	800330c <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b05      	cmp	r3, #5
 8003304:	d002      	beq.n	800330c <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b09      	cmp	r3, #9
 800330a:	d104      	bne.n	8003316 <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	623b      	str	r3, [r7, #32]
 8003314:	e00c      	b.n	8003330 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a3c      	ldr	r2, [pc, #240]	@ (800340c <HAL_ADC_IRQHandler+0x204>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d002      	beq.n	8003326 <HAL_ADC_IRQHandler+0x11e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	e000      	b.n	8003328 <HAL_ADC_IRQHandler+0x120>
 8003326:	4b38      	ldr	r3, [pc, #224]	@ (8003408 <HAL_ADC_IRQHandler+0x200>)
 8003328:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d17c      	bne.n	8003434 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b08      	cmp	r3, #8
 8003346:	d175      	bne.n	8003434 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fb03 	bl	8002958 <LL_ADC_REG_IsConversionOngoing>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d11a      	bne.n	800338e <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 020c 	bic.w	r2, r2, #12
 8003366:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800336c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003378:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d159      	bne.n	8003434 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003384:	f043 0201 	orr.w	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	679a      	str	r2, [r3, #120]	@ 0x78
 800338c:	e052      	b.n	8003434 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003392:	f043 0210 	orr.w	r2, r3, #16
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800339e:	f043 0201 	orr.w	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80033a6:	e045      	b.n	8003434 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff f89f 	bl	80024f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d03d      	beq.n	8003434 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d138      	bne.n	8003434 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d131      	bne.n	8003434 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff fabf 	bl	8002958 <LL_ADC_REG_IsConversionOngoing>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d11d      	bne.n	800341c <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 020c 	bic.w	r2, r2, #12
 80033ee:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	f043 0201 	orr.w	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	679a      	str	r2, [r3, #120]	@ 0x78
 8003404:	e016      	b.n	8003434 <HAL_ADC_IRQHandler+0x22c>
 8003406:	bf00      	nop
 8003408:	42028000 	.word	0x42028000
 800340c:	42028100 	.word	0x42028100
 8003410:	42028300 	.word	0x42028300
 8003414:	46021300 	.word	0x46021300
 8003418:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003420:	f043 0220 	orr.w	r2, r3, #32
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800342c:	f043 0201 	orr.w	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f99d 	bl	8003774 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	220c      	movs	r2, #12
 8003440:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a8c      	ldr	r2, [pc, #560]	@ (8003678 <HAL_ADC_IRQHandler+0x470>)
 8003448:	4293      	cmp	r3, r2
 800344a:	f000 8095 	beq.w	8003578 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d004      	beq.n	8003462 <HAL_ADC_IRQHandler+0x25a>
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10a      	bne.n	8003478 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 8085 	beq.w	8003578 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003474:	2b00      	cmp	r3, #0
 8003476:	d07f      	beq.n	8003578 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b00      	cmp	r3, #0
 8003482:	d105      	bne.n	8003490 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003488:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff f8f8 	bl	800268a <LL_ADC_INJ_IsTriggerSourceSWStart>
 800349a:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff f825 	bl	80024f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034a6:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a73      	ldr	r2, [pc, #460]	@ (800367c <HAL_ADC_IRQHandler+0x474>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d002      	beq.n	80034b8 <HAL_ADC_IRQHandler+0x2b0>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	e000      	b.n	80034ba <HAL_ADC_IRQHandler+0x2b2>
 80034b8:	4b71      	ldr	r3, [pc, #452]	@ (8003680 <HAL_ADC_IRQHandler+0x478>)
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	4293      	cmp	r3, r2
 80034c0:	d008      	beq.n	80034d4 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2b06      	cmp	r3, #6
 80034cc:	d002      	beq.n	80034d4 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2b07      	cmp	r3, #7
 80034d2:	d104      	bne.n	80034de <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	623b      	str	r3, [r7, #32]
 80034dc:	e00c      	b.n	80034f8 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a66      	ldr	r2, [pc, #408]	@ (800367c <HAL_ADC_IRQHandler+0x474>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d002      	beq.n	80034ee <HAL_ADC_IRQHandler+0x2e6>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	e000      	b.n	80034f0 <HAL_ADC_IRQHandler+0x2e8>
 80034ee:	4b64      	ldr	r3, [pc, #400]	@ (8003680 <HAL_ADC_IRQHandler+0x478>)
 80034f0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d035      	beq.n	800356a <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <HAL_ADC_IRQHandler+0x310>
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d02d      	beq.n	800356a <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003514:	2b00      	cmp	r3, #0
 8003516:	d128      	bne.n	800356a <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003522:	2b40      	cmp	r3, #64	@ 0x40
 8003524:	d121      	bne.n	800356a <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fa27 	bl	800297e <LL_ADC_INJ_IsConversionOngoing>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d119      	bne.n	800356a <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003544:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800354a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d105      	bne.n	800356a <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003562:	f043 0201 	orr.w	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f001 fa88 	bl	8004a80 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2260      	movs	r2, #96	@ 0x60
 8003576:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357e:	2b00      	cmp	r3, #0
 8003580:	d011      	beq.n	80035a6 <HAL_ADC_IRQHandler+0x39e>
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00c      	beq.n	80035a6 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003590:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f8ff 	bl	800379c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2280      	movs	r2, #128	@ 0x80
 80035a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d012      	beq.n	80035d6 <HAL_ADC_IRQHandler+0x3ce>
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00d      	beq.n	80035d6 <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f001 fa64 	bl	8004a94 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d012      	beq.n	8003606 <HAL_ADC_IRQHandler+0x3fe>
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00d      	beq.n	8003606 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035ee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f001 fa56 	bl	8004aa8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003604:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b00      	cmp	r3, #0
 800360e:	d05d      	beq.n	80036cc <HAL_ADC_IRQHandler+0x4c4>
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f003 0310 	and.w	r3, r3, #16
 8003616:	2b00      	cmp	r3, #0
 8003618:	d058      	beq.n	80036cc <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	2b00      	cmp	r3, #0
 8003620:	d102      	bne.n	8003628 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8003622:	2301      	movs	r3, #1
 8003624:	627b      	str	r3, [r7, #36]	@ 0x24
 8003626:	e03b      	b.n	80036a0 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a12      	ldr	r2, [pc, #72]	@ (8003678 <HAL_ADC_IRQHandler+0x470>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d02c      	beq.n	800368c <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d015      	beq.n	8003664 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a10      	ldr	r2, [pc, #64]	@ (8003680 <HAL_ADC_IRQHandler+0x478>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d004      	beq.n	800364c <HAL_ADC_IRQHandler+0x444>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a0d      	ldr	r2, [pc, #52]	@ (800367c <HAL_ADC_IRQHandler+0x474>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d101      	bne.n	8003650 <HAL_ADC_IRQHandler+0x448>
 800364c:	4b0d      	ldr	r3, [pc, #52]	@ (8003684 <HAL_ADC_IRQHandler+0x47c>)
 800364e:	e000      	b.n	8003652 <HAL_ADC_IRQHandler+0x44a>
 8003650:	4b0d      	ldr	r3, [pc, #52]	@ (8003688 <HAL_ADC_IRQHandler+0x480>)
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff f8c2 	bl	80027dc <LL_ADC_GetMultiDMATransfer>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d020      	beq.n	80036a0 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800365e:	2301      	movs	r3, #1
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
 8003662:	e01d      	b.n	80036a0 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d016      	beq.n	80036a0 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8003672:	2301      	movs	r3, #1
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24
 8003676:	e013      	b.n	80036a0 <HAL_ADC_IRQHandler+0x498>
 8003678:	46021000 	.word	0x46021000
 800367c:	42028100 	.word	0x42028100
 8003680:	42028000 	.word	0x42028000
 8003684:	42028300 	.word	0x42028300
 8003688:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7fe ffec 	bl	800266e <LL_ADC_REG_GetDMATransfer>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 800369c:	2301      	movs	r3, #1
 800369e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80036a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d10e      	bne.n	80036c4 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036aa:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036b6:	f043 0202 	orr.w	r2, r3, #2
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f876 	bl	80037b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2210      	movs	r2, #16
 80036ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d01b      	beq.n	800370e <HAL_ADC_IRQHandler+0x506>
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d016      	beq.n	800370e <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d105      	bne.n	80036f8 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036f0:	f043 0201 	orr.w	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f877 	bl	80037ec <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0201 	bic.w	r2, r2, #1
 800370c:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a17      	ldr	r2, [pc, #92]	@ (8003770 <HAL_ADC_IRQHandler+0x568>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d126      	bne.n	8003766 <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00c      	beq.n	800373c <HAL_ADC_IRQHandler+0x534>
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f849 	bl	80037c4 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800373a:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00f      	beq.n	8003766 <HAL_ADC_IRQHandler+0x55e>
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f841 	bl	80037d8 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003764:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003766:	bf00      	nop
 8003768:	3728      	adds	r7, #40	@ 0x28
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	46021000 	.word	0x46021000

08003774 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b0b7      	sub	sp, #220	@ 0xdc
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4aa8      	ldr	r2, [pc, #672]	@ (8003abc <HAL_ADC_ConfigChannel+0x2bc>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d103      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800382c:	2b01      	cmp	r3, #1
 800382e:	d102      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x36>
 8003830:	2302      	movs	r3, #2
 8003832:	f000 bdfe 	b.w	8004432 <HAL_ADC_ConfigChannel+0xc32>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff f888 	bl	8002958 <LL_ADC_REG_IsConversionOngoing>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 85c1 	bne.w	80043d2 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a99      	ldr	r2, [pc, #612]	@ (8003abc <HAL_ADC_ConfigChannel+0x2bc>)
 8003856:	4293      	cmp	r3, r2
 8003858:	f000 8409 	beq.w	800406e <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d108      	bne.n	800387a <HAL_ADC_ConfigChannel+0x7a>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	0e9b      	lsrs	r3, r3, #26
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	2201      	movs	r2, #1
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	e01d      	b.n	80038b6 <HAL_ADC_ConfigChannel+0xb6>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003882:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003886:	fa93 f3a3 	rbit	r3, r3
 800388a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800388e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003892:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003896:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 800389e:	2320      	movs	r3, #32
 80038a0:	e004      	b.n	80038ac <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 80038a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80038a6:	fab3 f383 	clz	r3, r3
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	2201      	movs	r2, #1
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	69d1      	ldr	r1, [r2, #28]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	430b      	orrs	r3, r1
 80038c2:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	6859      	ldr	r1, [r3, #4]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	f7fe fe21 	bl	8002518 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff f83c 	bl	8002958 <LL_ADC_REG_IsConversionOngoing>
 80038e0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff f848 	bl	800297e <LL_ADC_INJ_IsConversionOngoing>
 80038ee:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f040 81df 	bne.w	8003cba <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003900:	2b00      	cmp	r3, #0
 8003902:	f040 81da 	bne.w	8003cba <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	6819      	ldr	r1, [r3, #0]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	461a      	mov	r2, r3
 8003914:	f7fe fecc 	bl	80026b0 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	089b      	lsrs	r3, r3, #2
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b04      	cmp	r3, #4
 8003938:	d046      	beq.n	80039c8 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6919      	ldr	r1, [r3, #16]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800394a:	f7fe fd07 	bl	800235c <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6919      	ldr	r1, [r3, #16]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	461a      	mov	r2, r3
 800395c:	f7fe fd35 	bl	80023ca <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	7e9b      	ldrb	r3, [r3, #26]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d11e      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <HAL_ADC_ConfigChannel+0x17e>
 8003978:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800397c:	e000      	b.n	8003980 <HAL_ADC_ConfigChannel+0x180>
 800397e:	2300      	movs	r3, #0
 8003980:	461a      	mov	r2, r3
 8003982:	f7fe fd58 	bl	8002436 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003992:	2b01      	cmp	r3, #1
 8003994:	d102      	bne.n	800399c <HAL_ADC_ConfigChannel+0x19c>
 8003996:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800399a:	e000      	b.n	800399e <HAL_ADC_ConfigChannel+0x19e>
 800399c:	2300      	movs	r3, #0
 800399e:	461a      	mov	r2, r3
 80039a0:	f7fe fd2e 	bl	8002400 <LL_ADC_SetOffsetSignedSaturation>
 80039a4:	e189      	b.n	8003cba <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2200      	movs	r2, #0
 80039b0:	4619      	mov	r1, r3
 80039b2:	f7fe fd40 	bl	8002436 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2200      	movs	r2, #0
 80039c0:	4619      	mov	r1, r3
 80039c2:	f7fe fd1d 	bl	8002400 <LL_ADC_SetOffsetSignedSaturation>
 80039c6:	e178      	b.n	8003cba <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2100      	movs	r1, #0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fe fce5 	bl	800239e <LL_ADC_GetOffsetChannel>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x1f4>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2100      	movs	r1, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe fcda 	bl	800239e <LL_ADC_GetOffsetChannel>
 80039ea:	4603      	mov	r3, r0
 80039ec:	0e9b      	lsrs	r3, r3, #26
 80039ee:	f003 021f 	and.w	r2, r3, #31
 80039f2:	e01e      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x232>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe fccf 	bl	800239e <LL_ADC_GetOffsetChannel>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003a12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003a1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8003a22:	2320      	movs	r3, #32
 8003a24:	e004      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8003a26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d105      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x24a>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	0e9b      	lsrs	r3, r3, #26
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	e018      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x27c>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a56:	fa93 f3a3 	rbit	r3, r3
 8003a5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003a5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003a66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8003a6e:	2320      	movs	r3, #32
 8003a70:	e004      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8003a72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d107      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	f7fe fc66 	bl	800235c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2101      	movs	r1, #1
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe fc81 	bl	800239e <LL_ADC_GetOffsetChannel>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x2c0>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2101      	movs	r1, #1
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe fc76 	bl	800239e <LL_ADC_GetOffsetChannel>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	0e9b      	lsrs	r3, r3, #26
 8003ab6:	f003 021f 	and.w	r2, r3, #31
 8003aba:	e020      	b.n	8003afe <HAL_ADC_ConfigChannel+0x2fe>
 8003abc:	46021000 	.word	0x46021000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fc69 	bl	800239e <LL_ADC_GetOffsetChannel>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ad6:	fa93 f3a3 	rbit	r3, r3
 8003ada:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003ade:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ae2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003ae6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8003aee:	2320      	movs	r3, #32
 8003af0:	e004      	b.n	8003afc <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8003af2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003af6:	fab3 f383 	clz	r3, r3
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d105      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x316>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	0e9b      	lsrs	r3, r3, #26
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	e018      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x348>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b22:	fa93 f3a3 	rbit	r3, r3
 8003b26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8003b3a:	2320      	movs	r3, #32
 8003b3c:	e004      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8003b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b42:	fab3 f383 	clz	r3, r3
 8003b46:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d107      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	2300      	movs	r3, #0
 8003b56:	2101      	movs	r1, #1
 8003b58:	f7fe fc00 	bl	800235c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2102      	movs	r1, #2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fc1b 	bl	800239e <LL_ADC_GetOffsetChannel>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10a      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x388>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2102      	movs	r1, #2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fe fc10 	bl	800239e <LL_ADC_GetOffsetChannel>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	0e9b      	lsrs	r3, r3, #26
 8003b82:	f003 021f 	and.w	r2, r3, #31
 8003b86:	e01a      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x3be>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2102      	movs	r1, #2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe fc05 	bl	800239e <LL_ADC_GetOffsetChannel>
 8003b94:	4603      	mov	r3, r0
 8003b96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b9a:	fa93 f3a3 	rbit	r3, r3
 8003b9e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003ba0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ba2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003ba6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003bae:	2320      	movs	r3, #32
 8003bb0:	e004      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8003bb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d105      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x3d6>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	0e9b      	lsrs	r3, r3, #26
 8003bd0:	f003 031f 	and.w	r3, r3, #31
 8003bd4:	e011      	b.n	8003bfa <HAL_ADC_ConfigChannel+0x3fa>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bde:	fa93 f3a3 	rbit	r3, r3
 8003be2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003be6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003be8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003bee:	2320      	movs	r3, #32
 8003bf0:	e003      	b.n	8003bfa <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003bf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bf4:	fab3 f383 	clz	r3, r3
 8003bf8:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d107      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	2300      	movs	r3, #0
 8003c08:	2102      	movs	r1, #2
 8003c0a:	f7fe fba7 	bl	800235c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2103      	movs	r1, #3
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fe fbc2 	bl	800239e <LL_ADC_GetOffsetChannel>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x43a>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2103      	movs	r1, #3
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe fbb7 	bl	800239e <LL_ADC_GetOffsetChannel>
 8003c30:	4603      	mov	r3, r0
 8003c32:	0e9b      	lsrs	r3, r3, #26
 8003c34:	f003 021f 	and.w	r2, r3, #31
 8003c38:	e017      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x46a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2103      	movs	r1, #3
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fe fbac 	bl	800239e <LL_ADC_GetOffsetChannel>
 8003c46:	4603      	mov	r3, r0
 8003c48:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c4c:	fa93 f3a3 	rbit	r3, r3
 8003c50:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003c52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c54:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003c56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	e003      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8003c60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c62:	fab3 f383 	clz	r3, r3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d105      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x482>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	0e9b      	lsrs	r3, r3, #26
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	e011      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x4a6>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003c94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 8003c9a:	2320      	movs	r3, #32
 8003c9c:	e003      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8003c9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ca0:	fab3 f383 	clz	r3, r3
 8003ca4:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d107      	bne.n	8003cba <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	2103      	movs	r1, #3
 8003cb6:	f7fe fb51 	bl	800235c <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe fe10 	bl	80028e4 <LL_ADC_IsEnabled>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f040 83ad 	bne.w	8004426 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	f7fe fd4d 	bl	8002778 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ce6:	f040 80d6 	bne.w	8003e96 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10b      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x50e>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	0e9b      	lsrs	r3, r3, #26
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2b09      	cmp	r3, #9
 8003d04:	bf94      	ite	ls
 8003d06:	2301      	movls	r3, #1
 8003d08:	2300      	movhi	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	e019      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x542>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d16:	fa93 f3a3 	rbit	r3, r3
 8003d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003d1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d1e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003d20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003d26:	2320      	movs	r3, #32
 8003d28:	e003      	b.n	8003d32 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003d2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d2c:	fab3 f383 	clz	r3, r3
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	3301      	adds	r3, #1
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	2b09      	cmp	r3, #9
 8003d3a:	bf94      	ite	ls
 8003d3c:	2301      	movls	r3, #1
 8003d3e:	2300      	movhi	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d04d      	beq.n	8003de2 <HAL_ADC_ConfigChannel+0x5e2>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d107      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x562>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	0e9b      	lsrs	r3, r3, #26
 8003d58:	3301      	adds	r3, #1
 8003d5a:	069b      	lsls	r3, r3, #26
 8003d5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d60:	e015      	b.n	8003d8e <HAL_ADC_ConfigChannel+0x58e>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d6a:	fa93 f3a3 	rbit	r3, r3
 8003d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d72:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003d7a:	2320      	movs	r3, #32
 8003d7c:	e003      	b.n	8003d86 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d80:	fab3 f383 	clz	r3, r3
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	3301      	adds	r3, #1
 8003d88:	069b      	lsls	r3, r3, #26
 8003d8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d109      	bne.n	8003dae <HAL_ADC_ConfigChannel+0x5ae>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	0e9b      	lsrs	r3, r3, #26
 8003da0:	3301      	adds	r3, #1
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	2101      	movs	r1, #1
 8003da8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dac:	e017      	b.n	8003dde <HAL_ADC_ConfigChannel+0x5de>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003db6:	fa93 f3a3 	rbit	r3, r3
 8003dba:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8003dc6:	2320      	movs	r3, #32
 8003dc8:	e003      	b.n	8003dd2 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 8003dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dcc:	fab3 f383 	clz	r3, r3
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	2101      	movs	r1, #1
 8003dda:	fa01 f303 	lsl.w	r3, r1, r3
 8003dde:	4313      	orrs	r3, r2
 8003de0:	e04e      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x680>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d107      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x5fe>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	0e9b      	lsrs	r3, r3, #26
 8003df4:	3301      	adds	r3, #1
 8003df6:	069b      	lsls	r3, r3, #26
 8003df8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dfc:	e015      	b.n	8003e2a <HAL_ADC_ConfigChannel+0x62a>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e06:	fa93 f3a3 	rbit	r3, r3
 8003e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8003e16:	2320      	movs	r3, #32
 8003e18:	e003      	b.n	8003e22 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8003e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1c:	fab3 f383 	clz	r3, r3
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	3301      	adds	r3, #1
 8003e24:	069b      	lsls	r3, r3, #26
 8003e26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0x64a>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	0e9b      	lsrs	r3, r3, #26
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	2101      	movs	r1, #1
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	e017      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x67a>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	fa93 f3a3 	rbit	r3, r3
 8003e56:	61bb      	str	r3, [r7, #24]
  return result;
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8003e62:	2320      	movs	r3, #32
 8003e64:	e003      	b.n	8003e6e <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	fab3 f383 	clz	r3, r3
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	3301      	adds	r3, #1
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	2101      	movs	r1, #1
 8003e76:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6818      	ldr	r0, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003e92:	f7fe fc0d 	bl	80026b0 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f280 82c3 	bge.w	8004426 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a92      	ldr	r2, [pc, #584]	@ (80040f0 <HAL_ADC_ConfigChannel+0x8f0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d004      	beq.n	8003eb4 <HAL_ADC_ConfigChannel+0x6b4>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a91      	ldr	r2, [pc, #580]	@ (80040f4 <HAL_ADC_ConfigChannel+0x8f4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d101      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x6b8>
 8003eb4:	4b90      	ldr	r3, [pc, #576]	@ (80040f8 <HAL_ADC_ConfigChannel+0x8f8>)
 8003eb6:	e000      	b.n	8003eba <HAL_ADC_ConfigChannel+0x6ba>
 8003eb8:	4b90      	ldr	r3, [pc, #576]	@ (80040fc <HAL_ADC_ConfigChannel+0x8fc>)
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe fa20 	bl	8002300 <LL_ADC_GetCommonPathInternalCh>
 8003ec0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a89      	ldr	r2, [pc, #548]	@ (80040f0 <HAL_ADC_ConfigChannel+0x8f0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d004      	beq.n	8003ed8 <HAL_ADC_ConfigChannel+0x6d8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a88      	ldr	r2, [pc, #544]	@ (80040f4 <HAL_ADC_ConfigChannel+0x8f4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d10e      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x6f6>
 8003ed8:	4885      	ldr	r0, [pc, #532]	@ (80040f0 <HAL_ADC_ConfigChannel+0x8f0>)
 8003eda:	f7fe fd03 	bl	80028e4 <LL_ADC_IsEnabled>
 8003ede:	4604      	mov	r4, r0
 8003ee0:	4884      	ldr	r0, [pc, #528]	@ (80040f4 <HAL_ADC_ConfigChannel+0x8f4>)
 8003ee2:	f7fe fcff 	bl	80028e4 <LL_ADC_IsEnabled>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	4323      	orrs	r3, r4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bf0c      	ite	eq
 8003eee:	2301      	moveq	r3, #1
 8003ef0:	2300      	movne	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	e008      	b.n	8003f08 <HAL_ADC_ConfigChannel+0x708>
 8003ef6:	4882      	ldr	r0, [pc, #520]	@ (8004100 <HAL_ADC_ConfigChannel+0x900>)
 8003ef8:	f7fe fcf4 	bl	80028e4 <LL_ADC_IsEnabled>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	bf0c      	ite	eq
 8003f02:	2301      	moveq	r3, #1
 8003f04:	2300      	movne	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80a6 	beq.w	800405a <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a7c      	ldr	r2, [pc, #496]	@ (8004104 <HAL_ADC_ConfigChannel+0x904>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d13c      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d136      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a71      	ldr	r2, [pc, #452]	@ (80040f0 <HAL_ADC_ConfigChannel+0x8f0>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00a      	beq.n	8003f44 <HAL_ADC_ConfigChannel+0x744>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a70      	ldr	r2, [pc, #448]	@ (80040f4 <HAL_ADC_ConfigChannel+0x8f4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d005      	beq.n	8003f44 <HAL_ADC_ConfigChannel+0x744>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a70      	ldr	r2, [pc, #448]	@ (8004100 <HAL_ADC_ConfigChannel+0x900>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	f040 826e 	bne.w	8004420 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a69      	ldr	r2, [pc, #420]	@ (80040f0 <HAL_ADC_ConfigChannel+0x8f0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d004      	beq.n	8003f58 <HAL_ADC_ConfigChannel+0x758>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a68      	ldr	r2, [pc, #416]	@ (80040f4 <HAL_ADC_ConfigChannel+0x8f4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d101      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x75c>
 8003f58:	4a67      	ldr	r2, [pc, #412]	@ (80040f8 <HAL_ADC_ConfigChannel+0x8f8>)
 8003f5a:	e000      	b.n	8003f5e <HAL_ADC_ConfigChannel+0x75e>
 8003f5c:	4a67      	ldr	r2, [pc, #412]	@ (80040fc <HAL_ADC_ConfigChannel+0x8fc>)
 8003f5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f66:	4619      	mov	r1, r3
 8003f68:	4610      	mov	r0, r2
 8003f6a:	f7fe f9b6 	bl	80022da <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f6e:	4b66      	ldr	r3, [pc, #408]	@ (8004108 <HAL_ADC_ConfigChannel+0x908>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	099b      	lsrs	r3, r3, #6
 8003f74:	4a65      	ldr	r2, [pc, #404]	@ (800410c <HAL_ADC_ConfigChannel+0x90c>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	099b      	lsrs	r3, r3, #6
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8003f80:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003f82:	e002      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1f9      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f90:	e246      	b.n	8004420 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a5e      	ldr	r2, [pc, #376]	@ (8004110 <HAL_ADC_ConfigChannel+0x910>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d12b      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d125      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a50      	ldr	r2, [pc, #320]	@ (80040f0 <HAL_ADC_ConfigChannel+0x8f0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_ADC_ConfigChannel+0x7c8>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a4f      	ldr	r2, [pc, #316]	@ (80040f4 <HAL_ADC_ConfigChannel+0x8f4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d005      	beq.n	8003fc8 <HAL_ADC_ConfigChannel+0x7c8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a4f      	ldr	r2, [pc, #316]	@ (8004100 <HAL_ADC_ConfigChannel+0x900>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	f040 822e 	bne.w	8004424 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a48      	ldr	r2, [pc, #288]	@ (80040f0 <HAL_ADC_ConfigChannel+0x8f0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <HAL_ADC_ConfigChannel+0x7dc>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a47      	ldr	r2, [pc, #284]	@ (80040f4 <HAL_ADC_ConfigChannel+0x8f4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d101      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x7e0>
 8003fdc:	4a46      	ldr	r2, [pc, #280]	@ (80040f8 <HAL_ADC_ConfigChannel+0x8f8>)
 8003fde:	e000      	b.n	8003fe2 <HAL_ADC_ConfigChannel+0x7e2>
 8003fe0:	4a46      	ldr	r2, [pc, #280]	@ (80040fc <HAL_ADC_ConfigChannel+0x8fc>)
 8003fe2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fea:	4619      	mov	r1, r3
 8003fec:	4610      	mov	r0, r2
 8003fee:	f7fe f974 	bl	80022da <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ff2:	e217      	b.n	8004424 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a46      	ldr	r2, [pc, #280]	@ (8004114 <HAL_ADC_ConfigChannel+0x914>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	f040 8213 	bne.w	8004426 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004000:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004004:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004008:	2b00      	cmp	r3, #0
 800400a:	f040 820c 	bne.w	8004426 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a37      	ldr	r2, [pc, #220]	@ (80040f0 <HAL_ADC_ConfigChannel+0x8f0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00a      	beq.n	800402e <HAL_ADC_ConfigChannel+0x82e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a35      	ldr	r2, [pc, #212]	@ (80040f4 <HAL_ADC_ConfigChannel+0x8f4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d005      	beq.n	800402e <HAL_ADC_ConfigChannel+0x82e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a36      	ldr	r2, [pc, #216]	@ (8004100 <HAL_ADC_ConfigChannel+0x900>)
 8004028:	4293      	cmp	r3, r2
 800402a:	f040 81fc 	bne.w	8004426 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a2f      	ldr	r2, [pc, #188]	@ (80040f0 <HAL_ADC_ConfigChannel+0x8f0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d004      	beq.n	8004042 <HAL_ADC_ConfigChannel+0x842>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a2d      	ldr	r2, [pc, #180]	@ (80040f4 <HAL_ADC_ConfigChannel+0x8f4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d101      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x846>
 8004042:	4a2d      	ldr	r2, [pc, #180]	@ (80040f8 <HAL_ADC_ConfigChannel+0x8f8>)
 8004044:	e000      	b.n	8004048 <HAL_ADC_ConfigChannel+0x848>
 8004046:	4a2d      	ldr	r2, [pc, #180]	@ (80040fc <HAL_ADC_ConfigChannel+0x8fc>)
 8004048:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800404c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004050:	4619      	mov	r1, r3
 8004052:	4610      	mov	r0, r2
 8004054:	f7fe f941 	bl	80022da <LL_ADC_SetCommonPathInternalCh>
 8004058:	e1e5      	b.n	8004426 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800405e:	f043 0220 	orr.w	r2, r3, #32
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800406c:	e1db      	b.n	8004426 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b02      	cmp	r3, #2
 800407c:	f000 811b 	beq.w	80042b6 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004088:	d004      	beq.n	8004094 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800408e:	4a22      	ldr	r2, [pc, #136]	@ (8004118 <HAL_ADC_ConfigChannel+0x918>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d107      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800409c:	4618      	mov	r0, r3
 800409e:	f7fe fa9b 	bl	80025d8 <LL_ADC_REG_SetSequencerChAdd>
 80040a2:	e059      	b.n	8004158 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	210f      	movs	r1, #15
 80040b4:	fa01 f303 	lsl.w	r3, r1, r3
 80040b8:	43db      	mvns	r3, r3
 80040ba:	401a      	ands	r2, r3
 80040bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80040c0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d105      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x8d4>
 80040c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80040cc:	0e9b      	lsrs	r3, r3, #26
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	e027      	b.n	8004124 <HAL_ADC_ConfigChannel+0x924>
 80040d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80040d8:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	fa93 f3a3 	rbit	r3, r3
 80040e0:	60fb      	str	r3, [r7, #12]
  return result;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d117      	bne.n	800411c <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 80040ec:	2320      	movs	r3, #32
 80040ee:	e019      	b.n	8004124 <HAL_ADC_ConfigChannel+0x924>
 80040f0:	42028000 	.word	0x42028000
 80040f4:	42028100 	.word	0x42028100
 80040f8:	42028300 	.word	0x42028300
 80040fc:	46021300 	.word	0x46021300
 8004100:	46021000 	.word	0x46021000
 8004104:	ce080000 	.word	0xce080000
 8004108:	20000000 	.word	0x20000000
 800410c:	053e2d63 	.word	0x053e2d63
 8004110:	ca040000 	.word	0xca040000
 8004114:	80000001 	.word	0x80000001
 8004118:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	fab3 f383 	clz	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	6839      	ldr	r1, [r7, #0]
 8004126:	6849      	ldr	r1, [r1, #4]
 8004128:	f001 011f 	and.w	r1, r1, #31
 800412c:	408b      	lsls	r3, r1
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	089b      	lsrs	r3, r3, #2
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004142:	429a      	cmp	r2, r3
 8004144:	d808      	bhi.n	8004158 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004152:	4619      	mov	r1, r3
 8004154:	f7fe f9e0 	bl	8002518 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	461a      	mov	r2, r3
 8004162:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004166:	f7fe faa3 	bl	80026b0 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	f280 8159 	bge.w	8004426 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a9b      	ldr	r2, [pc, #620]	@ (80043e8 <HAL_ADC_ConfigChannel+0xbe8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d004      	beq.n	8004188 <HAL_ADC_ConfigChannel+0x988>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a9a      	ldr	r2, [pc, #616]	@ (80043ec <HAL_ADC_ConfigChannel+0xbec>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d101      	bne.n	800418c <HAL_ADC_ConfigChannel+0x98c>
 8004188:	4b99      	ldr	r3, [pc, #612]	@ (80043f0 <HAL_ADC_ConfigChannel+0xbf0>)
 800418a:	e000      	b.n	800418e <HAL_ADC_ConfigChannel+0x98e>
 800418c:	4b99      	ldr	r3, [pc, #612]	@ (80043f4 <HAL_ADC_ConfigChannel+0xbf4>)
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe f8b6 	bl	8002300 <LL_ADC_GetCommonPathInternalCh>
 8004194:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a96      	ldr	r2, [pc, #600]	@ (80043f8 <HAL_ADC_ConfigChannel+0xbf8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d12b      	bne.n	80041fa <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d125      	bne.n	80041fa <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a8d      	ldr	r2, [pc, #564]	@ (80043e8 <HAL_ADC_ConfigChannel+0xbe8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d004      	beq.n	80041c2 <HAL_ADC_ConfigChannel+0x9c2>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a8b      	ldr	r2, [pc, #556]	@ (80043ec <HAL_ADC_ConfigChannel+0xbec>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d101      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x9c6>
 80041c2:	4a8b      	ldr	r2, [pc, #556]	@ (80043f0 <HAL_ADC_ConfigChannel+0xbf0>)
 80041c4:	e000      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x9c8>
 80041c6:	4a8b      	ldr	r2, [pc, #556]	@ (80043f4 <HAL_ADC_ConfigChannel+0xbf4>)
 80041c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041d0:	4619      	mov	r1, r3
 80041d2:	4610      	mov	r0, r2
 80041d4:	f7fe f881 	bl	80022da <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80041d8:	4b88      	ldr	r3, [pc, #544]	@ (80043fc <HAL_ADC_ConfigChannel+0xbfc>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	099b      	lsrs	r3, r3, #6
 80041de:	4a88      	ldr	r2, [pc, #544]	@ (8004400 <HAL_ADC_ConfigChannel+0xc00>)
 80041e0:	fba2 2303 	umull	r2, r3, r2, r3
 80041e4:	099b      	lsrs	r3, r3, #6
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80041ea:	e002      	b.n	80041f2 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1f9      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80041f8:	e045      	b.n	8004286 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a81      	ldr	r2, [pc, #516]	@ (8004404 <HAL_ADC_ConfigChannel+0xc04>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d11b      	bne.n	800423c <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004204:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004208:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800420c:	2b00      	cmp	r3, #0
 800420e:	d115      	bne.n	800423c <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a74      	ldr	r2, [pc, #464]	@ (80043e8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d004      	beq.n	8004224 <HAL_ADC_ConfigChannel+0xa24>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a73      	ldr	r2, [pc, #460]	@ (80043ec <HAL_ADC_ConfigChannel+0xbec>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d101      	bne.n	8004228 <HAL_ADC_ConfigChannel+0xa28>
 8004224:	4a72      	ldr	r2, [pc, #456]	@ (80043f0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004226:	e000      	b.n	800422a <HAL_ADC_ConfigChannel+0xa2a>
 8004228:	4a72      	ldr	r2, [pc, #456]	@ (80043f4 <HAL_ADC_ConfigChannel+0xbf4>)
 800422a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800422e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004232:	4619      	mov	r1, r3
 8004234:	4610      	mov	r0, r2
 8004236:	f7fe f850 	bl	80022da <LL_ADC_SetCommonPathInternalCh>
 800423a:	e024      	b.n	8004286 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a71      	ldr	r2, [pc, #452]	@ (8004408 <HAL_ADC_ConfigChannel+0xc08>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d11f      	bne.n	8004286 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004246:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800424a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d115      	bne.n	800427e <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a64      	ldr	r2, [pc, #400]	@ (80043e8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d004      	beq.n	8004266 <HAL_ADC_ConfigChannel+0xa66>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a62      	ldr	r2, [pc, #392]	@ (80043ec <HAL_ADC_ConfigChannel+0xbec>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d101      	bne.n	800426a <HAL_ADC_ConfigChannel+0xa6a>
 8004266:	4a62      	ldr	r2, [pc, #392]	@ (80043f0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004268:	e000      	b.n	800426c <HAL_ADC_ConfigChannel+0xa6c>
 800426a:	4a62      	ldr	r2, [pc, #392]	@ (80043f4 <HAL_ADC_ConfigChannel+0xbf4>)
 800426c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004270:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f7fe f82f 	bl	80022da <LL_ADC_SetCommonPathInternalCh>
 800427c:	e003      	b.n	8004286 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a62      	ldr	r2, [pc, #392]	@ (800440c <HAL_ADC_ConfigChannel+0xc0c>)
 8004284:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a61      	ldr	r2, [pc, #388]	@ (8004410 <HAL_ADC_ConfigChannel+0xc10>)
 800428c:	4293      	cmp	r3, r2
 800428e:	f040 80ca 	bne.w	8004426 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004292:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800429a:	2b00      	cmp	r3, #0
 800429c:	f040 80c3 	bne.w	8004426 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 0201 	orr.w	r2, r2, #1
 80042b0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80042b4:	e0b7      	b.n	8004426 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042be:	d004      	beq.n	80042ca <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80042c4:	4a53      	ldr	r2, [pc, #332]	@ (8004414 <HAL_ADC_ConfigChannel+0xc14>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d106      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe f9b3 	bl	800263e <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f280 80a2 	bge.w	8004426 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a40      	ldr	r2, [pc, #256]	@ (80043e8 <HAL_ADC_ConfigChannel+0xbe8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d004      	beq.n	80042f6 <HAL_ADC_ConfigChannel+0xaf6>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a3e      	ldr	r2, [pc, #248]	@ (80043ec <HAL_ADC_ConfigChannel+0xbec>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d101      	bne.n	80042fa <HAL_ADC_ConfigChannel+0xafa>
 80042f6:	4b3e      	ldr	r3, [pc, #248]	@ (80043f0 <HAL_ADC_ConfigChannel+0xbf0>)
 80042f8:	e000      	b.n	80042fc <HAL_ADC_ConfigChannel+0xafc>
 80042fa:	4b3e      	ldr	r3, [pc, #248]	@ (80043f4 <HAL_ADC_ConfigChannel+0xbf4>)
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fd ffff 	bl	8002300 <LL_ADC_GetCommonPathInternalCh>
 8004302:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a43      	ldr	r2, [pc, #268]	@ (8004418 <HAL_ADC_ConfigChannel+0xc18>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d115      	bne.n	800433c <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a34      	ldr	r2, [pc, #208]	@ (80043e8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d004      	beq.n	8004324 <HAL_ADC_ConfigChannel+0xb24>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a33      	ldr	r2, [pc, #204]	@ (80043ec <HAL_ADC_ConfigChannel+0xbec>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d101      	bne.n	8004328 <HAL_ADC_ConfigChannel+0xb28>
 8004324:	4a32      	ldr	r2, [pc, #200]	@ (80043f0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004326:	e000      	b.n	800432a <HAL_ADC_ConfigChannel+0xb2a>
 8004328:	4a32      	ldr	r2, [pc, #200]	@ (80043f4 <HAL_ADC_ConfigChannel+0xbf4>)
 800432a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800432e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004332:	4619      	mov	r1, r3
 8004334:	4610      	mov	r0, r2
 8004336:	f7fd ffd0 	bl	80022da <LL_ADC_SetCommonPathInternalCh>
 800433a:	e034      	b.n	80043a6 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a36      	ldr	r2, [pc, #216]	@ (800441c <HAL_ADC_ConfigChannel+0xc1c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d115      	bne.n	8004372 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a27      	ldr	r2, [pc, #156]	@ (80043e8 <HAL_ADC_ConfigChannel+0xbe8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d004      	beq.n	800435a <HAL_ADC_ConfigChannel+0xb5a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a25      	ldr	r2, [pc, #148]	@ (80043ec <HAL_ADC_ConfigChannel+0xbec>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d101      	bne.n	800435e <HAL_ADC_ConfigChannel+0xb5e>
 800435a:	4a25      	ldr	r2, [pc, #148]	@ (80043f0 <HAL_ADC_ConfigChannel+0xbf0>)
 800435c:	e000      	b.n	8004360 <HAL_ADC_ConfigChannel+0xb60>
 800435e:	4a25      	ldr	r2, [pc, #148]	@ (80043f4 <HAL_ADC_ConfigChannel+0xbf4>)
 8004360:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004364:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004368:	4619      	mov	r1, r3
 800436a:	4610      	mov	r0, r2
 800436c:	f7fd ffb5 	bl	80022da <LL_ADC_SetCommonPathInternalCh>
 8004370:	e019      	b.n	80043a6 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a24      	ldr	r2, [pc, #144]	@ (8004408 <HAL_ADC_ConfigChannel+0xc08>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d114      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a19      	ldr	r2, [pc, #100]	@ (80043e8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d004      	beq.n	8004390 <HAL_ADC_ConfigChannel+0xb90>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a18      	ldr	r2, [pc, #96]	@ (80043ec <HAL_ADC_ConfigChannel+0xbec>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d101      	bne.n	8004394 <HAL_ADC_ConfigChannel+0xb94>
 8004390:	4a17      	ldr	r2, [pc, #92]	@ (80043f0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004392:	e000      	b.n	8004396 <HAL_ADC_ConfigChannel+0xb96>
 8004394:	4a17      	ldr	r2, [pc, #92]	@ (80043f4 <HAL_ADC_ConfigChannel+0xbf4>)
 8004396:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800439a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800439e:	4619      	mov	r1, r3
 80043a0:	4610      	mov	r0, r2
 80043a2:	f7fd ff9a 	bl	80022da <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a19      	ldr	r2, [pc, #100]	@ (8004410 <HAL_ADC_ConfigChannel+0xc10>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d13a      	bne.n	8004426 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d134      	bne.n	8004426 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f042 0201 	orr.w	r2, r2, #1
 80043cc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80043d0:	e029      	b.n	8004426 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043d6:	f043 0220 	orr.w	r2, r3, #32
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80043e4:	e01f      	b.n	8004426 <HAL_ADC_ConfigChannel+0xc26>
 80043e6:	bf00      	nop
 80043e8:	42028000 	.word	0x42028000
 80043ec:	42028100 	.word	0x42028100
 80043f0:	42028300 	.word	0x42028300
 80043f4:	46021300 	.word	0x46021300
 80043f8:	b6002000 	.word	0xb6002000
 80043fc:	20000000 	.word	0x20000000
 8004400:	053e2d63 	.word	0x053e2d63
 8004404:	ba004000 	.word	0xba004000
 8004408:	80000001 	.word	0x80000001
 800440c:	b2001000 	.word	0xb2001000
 8004410:	d7200000 	.word	0xd7200000
 8004414:	80000010 	.word	0x80000010
 8004418:	ce080000 	.word	0xce080000
 800441c:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004420:	bf00      	nop
 8004422:	e000      	b.n	8004426 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004424:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 800442e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004432:	4618      	mov	r0, r3
 8004434:	37dc      	adds	r7, #220	@ 0xdc
 8004436:	46bd      	mov	sp, r7
 8004438:	bd90      	pop	{r4, r7, pc}
 800443a:	bf00      	nop

0800443c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f7fe fa4b 	bl	80028e4 <LL_ADC_IsEnabled>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d17b      	bne.n	800454c <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	4b3f      	ldr	r3, [pc, #252]	@ (8004558 <ADC_Enable+0x11c>)
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00d      	beq.n	800447e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004466:	f043 0210 	orr.w	r2, r3, #16
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004472:	f043 0201 	orr.w	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e067      	b.n	800454e <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2201      	movs	r2, #1
 8004484:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe fa02 	bl	8002894 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d004      	beq.n	80044a2 <ADC_Enable+0x66>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a2f      	ldr	r2, [pc, #188]	@ (800455c <ADC_Enable+0x120>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d054      	beq.n	800454c <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80044a2:	f7fd fe7b 	bl	800219c <HAL_GetTick>
 80044a6:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004560 <ADC_Enable+0x124>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d004      	beq.n	80044bc <ADC_Enable+0x80>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004564 <ADC_Enable+0x128>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d101      	bne.n	80044c0 <ADC_Enable+0x84>
 80044bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004568 <ADC_Enable+0x12c>)
 80044be:	e000      	b.n	80044c2 <ADC_Enable+0x86>
 80044c0:	4b2a      	ldr	r3, [pc, #168]	@ (800456c <ADC_Enable+0x130>)
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe f97c 	bl	80027c0 <LL_ADC_GetMultimode>
 80044c8:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a25      	ldr	r2, [pc, #148]	@ (8004564 <ADC_Enable+0x128>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d002      	beq.n	80044da <ADC_Enable+0x9e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	e000      	b.n	80044dc <ADC_Enable+0xa0>
 80044da:	4b21      	ldr	r3, [pc, #132]	@ (8004560 <ADC_Enable+0x124>)
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d02c      	beq.n	800453e <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d130      	bne.n	800454c <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044ea:	e028      	b.n	800453e <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fe f9f7 	bl	80028e4 <LL_ADC_IsEnabled>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d104      	bne.n	8004506 <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe f9c7 	bl	8002894 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004506:	f7fd fe49 	bl	800219c <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d914      	bls.n	800453e <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b01      	cmp	r3, #1
 8004520:	d00d      	beq.n	800453e <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004526:	f043 0210 	orr.w	r2, r3, #16
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004532:	f043 0201 	orr.w	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e007      	b.n	800454e <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b01      	cmp	r3, #1
 800454a:	d1cf      	bne.n	80044ec <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	8000003f 	.word	0x8000003f
 800455c:	46021000 	.word	0x46021000
 8004560:	42028000 	.word	0x42028000
 8004564:	42028100 	.word	0x42028100
 8004568:	42028300 	.word	0x42028300
 800456c:	46021300 	.word	0x46021300

08004570 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe f9c4 	bl	800290a <LL_ADC_IsDisableOngoing>
 8004582:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f7fe f9ab 	bl	80028e4 <LL_ADC_IsEnabled>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d047      	beq.n	8004624 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d144      	bne.n	8004624 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 030d 	and.w	r3, r3, #13
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d10c      	bne.n	80045c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe f985 	bl	80028bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2203      	movs	r2, #3
 80045b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045ba:	f7fd fdef 	bl	800219c <HAL_GetTick>
 80045be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045c0:	e029      	b.n	8004616 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045c6:	f043 0210 	orr.w	r2, r3, #16
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	679a      	str	r2, [r3, #120]	@ 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045d2:	f043 0201 	orr.w	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	67da      	str	r2, [r3, #124]	@ 0x7c
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e023      	b.n	8004626 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045de:	f7fd fddd 	bl	800219c <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d914      	bls.n	8004616 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00d      	beq.n	8004616 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045fe:	f043 0210 	orr.w	r2, r3, #16
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800460a:	f043 0201 	orr.w	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	67da      	str	r2, [r3, #124]	@ 0x7c

          return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e007      	b.n	8004626 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1dc      	bne.n	80045de <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800463a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004640:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004644:	2b00      	cmp	r3, #0
 8004646:	d14b      	bne.n	80046e0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800464c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	d021      	beq.n	80046a6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fd ff42 	bl	80024f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d032      	beq.n	80046d8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d12b      	bne.n	80046d8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004684:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004690:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d11f      	bne.n	80046d8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800469c:	f043 0201 	orr.w	r2, r3, #1
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	679a      	str	r2, [r3, #120]	@ 0x78
 80046a4:	e018      	b.n	80046d8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f003 0303 	and.w	r3, r3, #3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d111      	bne.n	80046d8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d105      	bne.n	80046d8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046d0:	f043 0201 	orr.w	r2, r3, #1
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7ff f84b 	bl	8003774 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046de:	e00e      	b.n	80046fe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046e4:	f003 0310 	and.w	r3, r3, #16
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f7ff f85f 	bl	80037b0 <HAL_ADC_ErrorCallback>
}
 80046f2:	e004      	b.n	80046fe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	4798      	blx	r3
}
 80046fe:	bf00      	nop
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b084      	sub	sp, #16
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004712:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f7ff f837 	bl	8003788 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800472e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004734:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004740:	f043 0204 	orr.w	r2, r3, #4
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f7ff f831 	bl	80037b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800474e:	bf00      	nop
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <LL_ADC_StartCalibration>:
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a0f      	ldr	r2, [pc, #60]	@ (80047a4 <LL_ADC_StartCalibration+0x4c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00c      	beq.n	8004784 <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	4b0e      	ldr	r3, [pc, #56]	@ (80047a8 <LL_ADC_StartCalibration+0x50>)
 8004770:	4013      	ands	r3, r2
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8004778:	4313      	orrs	r3, r2
 800477a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	609a      	str	r2, [r3, #8]
}
 8004782:	e009      	b.n	8004798 <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800478c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004790:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	609a      	str	r2, [r3, #8]
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	46021000 	.word	0x46021000
 80047a8:	7ffeffc0 	.word	0x7ffeffc0

080047ac <LL_ADC_IsCalibrationOnGoing>:
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047c0:	d101      	bne.n	80047c6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	@ 0x28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d101      	bne.n	80047f2 <HAL_ADCEx_Calibration_Start+0x1e>
 80047ee:	2302      	movs	r3, #2
 80047f0:	e138      	b.n	8004a64 <HAL_ADCEx_Calibration_Start+0x290>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff feb8 	bl	8004570 <ADC_Disable>
 8004800:	4603      	mov	r3, r0
 8004802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004806:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800480a:	2b00      	cmp	r3, #0
 800480c:	f040 811e 	bne.w	8004a4c <HAL_ADCEx_Calibration_Start+0x278>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004814:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004818:	f023 0302 	bic.w	r3, r3, #2
 800481c:	f043 0202 	orr.w	r2, r3, #2
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hadc->Instance == ADC4)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a90      	ldr	r2, [pc, #576]	@ (8004a6c <HAL_ADCEx_Calibration_Start+0x298>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d150      	bne.n	80048d0 <HAL_ADCEx_Calibration_Start+0xfc>
      /* Note: Specificity of this STM32 series: Calibration factor is          */
      /*       available in data register and also transferred by DMA.          */
      /*       To not insert ADC calibration factor among ADC conversion data   */
      /*       in array variable, DMA transfer must be disabled during          */
      /*       calibration.                                                     */
      backup_setting_pwrr  = READ_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	61bb      	str	r3, [r7, #24]
      backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f003 0303 	and.w	r3, r3, #3
 8004844:	617b      	str	r3, [r7, #20]
      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0203 	bic.w	r2, r2, #3
 8004854:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Start ADC calibration in mode single-ended */
      LL_ADC_StartCalibration(hadc->Instance, LL_ADC_CALIB_OFFSET);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2100      	movs	r1, #0
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff ff73 	bl	8004758 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004872:	e014      	b.n	800489e <HAL_ADCEx_Calibration_Start+0xca>
      {
        wait_loop_index++;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	3301      	adds	r3, #1
 8004878:	613b      	str	r3, [r7, #16]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4a7c      	ldr	r2, [pc, #496]	@ (8004a70 <HAL_ADCEx_Calibration_Start+0x29c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d90d      	bls.n	800489e <HAL_ADCEx_Calibration_Start+0xca>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004886:	f023 0312 	bic.w	r3, r3, #18
 800488a:	f043 0210 	orr.w	r2, r3, #16
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	679a      	str	r2, [r3, #120]	@ 0x78

          __HAL_UNLOCK(hadc);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e0e2      	b.n	8004a64 <HAL_ADCEx_Calibration_Start+0x290>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff ff82 	bl	80047ac <LL_ADC_IsCalibrationOnGoing>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1e2      	bne.n	8004874 <HAL_ADCEx_Calibration_Start+0xa0>
        }
      }

      /* Restore configuration after calibration */
      SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68d9      	ldr	r1, [r3, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	60da      	str	r2, [r3, #12]
      SET_BIT(hadc->Instance->PWRR, backup_setting_pwrr);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	645a      	str	r2, [r3, #68]	@ 0x44
 80048ce:	e0b4      	b.n	8004a3a <HAL_ADCEx_Calibration_Start+0x266>
    }
    else /* ADC instance ADC1 or ADC2 */
    {
      /* Get device information */
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
 80048d0:	4b68      	ldr	r3, [pc, #416]	@ (8004a74 <HAL_ADCEx_Calibration_Start+0x2a0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d8:	623b      	str	r3, [r7, #32]
      uint32_t rev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos;
 80048da:	4b66      	ldr	r3, [pc, #408]	@ (8004a74 <HAL_ADCEx_Calibration_Start+0x2a0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	0c1b      	lsrs	r3, r3, #16
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	61fb      	str	r3, [r7, #28]

      /* Assess whether extended calibration is available on the selected device */
      if ((dev_id == 0x455UL) || (dev_id == 0x476UL)
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	f240 4255 	movw	r2, #1109	@ 0x455
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d012      	beq.n	8004914 <HAL_ADCEx_Calibration_Start+0x140>
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	f240 4276 	movw	r2, #1142	@ 0x476
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00d      	beq.n	8004914 <HAL_ADCEx_Calibration_Start+0x140>
          || (((dev_id == 0x481UL) || (dev_id == 0x482UL)) && (rev_id >= 0x3000UL)))
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	f240 4281 	movw	r2, #1153	@ 0x481
 80048fe:	4293      	cmp	r3, r2
 8004900:	d004      	beq.n	800490c <HAL_ADCEx_Calibration_Start+0x138>
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	f240 4282 	movw	r2, #1154	@ 0x482
 8004908:	4293      	cmp	r3, r2
 800490a:	d172      	bne.n	80049f2 <HAL_ADCEx_Calibration_Start+0x21e>
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004912:	d36e      	bcc.n	80049f2 <HAL_ADCEx_Calibration_Start+0x21e>
      {
        /* Perform extended calibration */
        /* Refer to ref manual for extended calibration procedure details */
        tmp_hal_status = ADC_Enable(hadc);
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f7ff fd91 	bl	800443c <ADC_Enable>
 800491a:	4603      	mov	r3, r0
 800491c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (tmp_hal_status == HAL_OK)
 8004920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004924:	2b00      	cmp	r3, #0
 8004926:	f040 8088 	bne.w	8004a3a <HAL_ADCEx_Calibration_Start+0x266>
        {
          /* Use a Data Memory Barrier instruction to avoid synchronization issues when accessing ADC registers */
          MODIFY_REG(hadc->Instance->CR, ADC_CR_CALINDEX, 0x9UL << ADC_CR_CALINDEX_Pos);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 6210 	orr.w	r2, r2, #150994944	@ 0x9000000
 800493c:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 800493e:	f3bf 8f5f 	dmb	sy
}
 8004942:	bf00      	nop
          __DMB();
          MODIFY_REG(hadc->Instance->CALFACT2, 0xFFFFFF00UL, 0x03021100UL);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800494c:	b2d9      	uxtb	r1, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	4b49      	ldr	r3, [pc, #292]	@ (8004a78 <HAL_ADCEx_Calibration_Start+0x2a4>)
 8004954:	430b      	orrs	r3, r1
 8004956:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  __ASM volatile ("dmb 0xF":::"memory");
 800495a:	f3bf 8f5f 	dmb	sy
}
 800495e:	bf00      	nop
          __DMB();
          SET_BIT(hadc->Instance->CALFACT, ADC_CALFACT_LATCH_COEF);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004970:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

          tmp_hal_status = ADC_Disable(hadc);
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f7ff fdfb 	bl	8004570 <ADC_Disable>
 800497a:	4603      	mov	r3, r0
 800497c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

          if (CalibrationMode == ADC_CALIB_OFFSET_LINEARITY)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8004986:	d109      	bne.n	800499c <HAL_ADCEx_Calibration_Start+0x1c8>
          {
            MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN | ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCALLIN);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a7c <HAL_ADCEx_Calibration_Start+0x2a8>)
 8004990:	4013      	ands	r3, r2
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800499a:	6093      	str	r3, [r2, #8]
          }

          MODIFY_REG(hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCAL);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049a6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049b2:	6093      	str	r3, [r2, #8]

          /* Wait for calibration completion */
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049b4:	e014      	b.n	80049e0 <HAL_ADCEx_Calibration_Start+0x20c>
          {
            wait_loop_index++;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	3301      	adds	r3, #1
 80049ba:	613b      	str	r3, [r7, #16]
            if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	4a2c      	ldr	r2, [pc, #176]	@ (8004a70 <HAL_ADCEx_Calibration_Start+0x29c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d90d      	bls.n	80049e0 <HAL_ADCEx_Calibration_Start+0x20c>
            {
              /* Update ADC state machine to error */
              ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049c8:	f023 0312 	bic.w	r3, r3, #18
 80049cc:	f043 0210 	orr.w	r2, r3, #16
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	679a      	str	r2, [r3, #120]	@ 0x78

              __HAL_UNLOCK(hadc);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

              return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e041      	b.n	8004a64 <HAL_ADCEx_Calibration_Start+0x290>
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff fee1 	bl	80047ac <LL_ADC_IsCalibrationOnGoing>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e2      	bne.n	80049b6 <HAL_ADCEx_Calibration_Start+0x1e2>
        if (tmp_hal_status == HAL_OK)
 80049f0:	e023      	b.n	8004a3a <HAL_ADCEx_Calibration_Start+0x266>
        }
      }
      else
      {
        /* Start ADC calibration in mode single-ended or differential */
        LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff fead 	bl	8004758 <LL_ADC_StartCalibration>

        /* Wait for calibration completion */
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049fe:	e014      	b.n	8004a2a <HAL_ADCEx_Calibration_Start+0x256>
        {
          wait_loop_index++;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	3301      	adds	r3, #1
 8004a04:	613b      	str	r3, [r7, #16]
          if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	4a19      	ldr	r2, [pc, #100]	@ (8004a70 <HAL_ADCEx_Calibration_Start+0x29c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d90d      	bls.n	8004a2a <HAL_ADCEx_Calibration_Start+0x256>
          {
            /* Update ADC state machine to error */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a12:	f023 0312 	bic.w	r3, r3, #18
 8004a16:	f043 0210 	orr.w	r2, r3, #16
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	679a      	str	r2, [r3, #120]	@ 0x78

            __HAL_UNLOCK(hadc);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

            return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e01c      	b.n	8004a64 <HAL_ADCEx_Calibration_Start+0x290>
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff febc 	bl	80047ac <LL_ADC_IsCalibrationOnGoing>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1e2      	bne.n	8004a00 <HAL_ADCEx_Calibration_Start+0x22c>
        }
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a3e:	f023 0303 	bic.w	r3, r3, #3
 8004a42:	f043 0201 	orr.w	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	679a      	str	r2, [r3, #120]	@ 0x78
 8004a4a:	e005      	b.n	8004a58 <HAL_ADCEx_Calibration_Start+0x284>
  }
  else /* ADC not disabled */
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a50:	f043 0210 	orr.w	r2, r3, #16
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004a60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3728      	adds	r7, #40	@ 0x28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	46021000 	.word	0x46021000
 8004a70:	022b6b7f 	.word	0x022b6b7f
 8004a74:	e0044000 	.word	0xe0044000
 8004a78:	03021100 	.word	0x03021100
 8004a7c:	7ffeffc0 	.word	0x7ffeffc0

08004a80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b14 <__NVIC_SetPriorityGrouping+0x44>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004aec:	4013      	ands	r3, r2
 8004aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004af8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b02:	4a04      	ldr	r2, [pc, #16]	@ (8004b14 <__NVIC_SetPriorityGrouping+0x44>)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	60d3      	str	r3, [r2, #12]
}
 8004b08:	bf00      	nop
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	e000ed00 	.word	0xe000ed00

08004b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b1c:	4b04      	ldr	r3, [pc, #16]	@ (8004b30 <__NVIC_GetPriorityGrouping+0x18>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	0a1b      	lsrs	r3, r3, #8
 8004b22:	f003 0307 	and.w	r3, r3, #7
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	e000ed00 	.word	0xe000ed00

08004b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	db0b      	blt.n	8004b5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b46:	88fb      	ldrh	r3, [r7, #6]
 8004b48:	f003 021f 	and.w	r2, r3, #31
 8004b4c:	4907      	ldr	r1, [pc, #28]	@ (8004b6c <__NVIC_EnableIRQ+0x38>)
 8004b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	2001      	movs	r0, #1
 8004b56:	fa00 f202 	lsl.w	r2, r0, r2
 8004b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	e000e100 	.word	0xe000e100

08004b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	6039      	str	r1, [r7, #0]
 8004b7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	db0a      	blt.n	8004b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	490c      	ldr	r1, [pc, #48]	@ (8004bbc <__NVIC_SetPriority+0x4c>)
 8004b8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b8e:	0112      	lsls	r2, r2, #4
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	440b      	add	r3, r1
 8004b94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b98:	e00a      	b.n	8004bb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	4908      	ldr	r1, [pc, #32]	@ (8004bc0 <__NVIC_SetPriority+0x50>)
 8004ba0:	88fb      	ldrh	r3, [r7, #6]
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	3b04      	subs	r3, #4
 8004ba8:	0112      	lsls	r2, r2, #4
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	440b      	add	r3, r1
 8004bae:	761a      	strb	r2, [r3, #24]
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	e000e100 	.word	0xe000e100
 8004bc0:	e000ed00 	.word	0xe000ed00

08004bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b089      	sub	sp, #36	@ 0x24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f1c3 0307 	rsb	r3, r3, #7
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	bf28      	it	cs
 8004be2:	2304      	movcs	r3, #4
 8004be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	3304      	adds	r3, #4
 8004bea:	2b06      	cmp	r3, #6
 8004bec:	d902      	bls.n	8004bf4 <NVIC_EncodePriority+0x30>
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	3b03      	subs	r3, #3
 8004bf2:	e000      	b.n	8004bf6 <NVIC_EncodePriority+0x32>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	43da      	mvns	r2, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	401a      	ands	r2, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	fa01 f303 	lsl.w	r3, r1, r3
 8004c16:	43d9      	mvns	r1, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c1c:	4313      	orrs	r3, r2
         );
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3724      	adds	r7, #36	@ 0x24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff ff4c 	bl	8004ad0 <__NVIC_SetPriorityGrouping>
}
 8004c38:	bf00      	nop
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c4e:	f7ff ff63 	bl	8004b18 <__NVIC_GetPriorityGrouping>
 8004c52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	6978      	ldr	r0, [r7, #20]
 8004c5a:	f7ff ffb3 	bl	8004bc4 <NVIC_EncodePriority>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c64:	4611      	mov	r1, r2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff ff82 	bl	8004b70 <__NVIC_SetPriority>
}
 8004c6c:	bf00      	nop
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff ff56 	bl	8004b34 <__NVIC_EnableIRQ>
}
 8004c88:	bf00      	nop
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d844      	bhi.n	8004d28 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca4:	08004cc7 	.word	0x08004cc7
 8004ca8:	08004ce5 	.word	0x08004ce5
 8004cac:	08004d07 	.word	0x08004d07
 8004cb0:	08004d29 	.word	0x08004d29
 8004cb4:	08004cb9 	.word	0x08004cb9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8004d38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8004d38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004cbe:	f043 0304 	orr.w	r3, r3, #4
 8004cc2:	6013      	str	r3, [r2, #0]
      break;
 8004cc4:	e031      	b.n	8004d2a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8004d38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a1b      	ldr	r2, [pc, #108]	@ (8004d38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004ccc:	f023 0304 	bic.w	r3, r3, #4
 8004cd0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8004cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8004d3c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cd8:	4a18      	ldr	r2, [pc, #96]	@ (8004d3c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004cda:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004cde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004ce2:	e022      	b.n	8004d2a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004ce4:	4b14      	ldr	r3, [pc, #80]	@ (8004d38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a13      	ldr	r2, [pc, #76]	@ (8004d38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004cea:	f023 0304 	bic.w	r3, r3, #4
 8004cee:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8004cf0:	4b12      	ldr	r3, [pc, #72]	@ (8004d3c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cf6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004cfa:	4a10      	ldr	r2, [pc, #64]	@ (8004d3c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004cfc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004d04:	e011      	b.n	8004d2a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004d06:	4b0c      	ldr	r3, [pc, #48]	@ (8004d38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a0b      	ldr	r2, [pc, #44]	@ (8004d38 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004d0c:	f023 0304 	bic.w	r3, r3, #4
 8004d10:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8004d12:	4b0a      	ldr	r3, [pc, #40]	@ (8004d3c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d18:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004d1c:	4a07      	ldr	r2, [pc, #28]	@ (8004d3c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004d1e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004d26:	e000      	b.n	8004d2a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004d28:	bf00      	nop
  }
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	e000e010 	.word	0xe000e010
 8004d3c:	46020c00 	.word	0x46020c00

08004d40 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e037      	b.n	8004dc2 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d119      	bne.n	8004d92 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a1a      	ldr	r2, [pc, #104]	@ (8004dcc <HAL_DCACHE_Init+0x8c>)
 8004d62:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a1a      	ldr	r2, [pc, #104]	@ (8004dd0 <HAL_DCACHE_Init+0x90>)
 8004d68:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a19      	ldr	r2, [pc, #100]	@ (8004dd4 <HAL_DCACHE_Init+0x94>)
 8004d6e:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a19      	ldr	r2, [pc, #100]	@ (8004dd8 <HAL_DCACHE_Init+0x98>)
 8004d74:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a18      	ldr	r2, [pc, #96]	@ (8004ddc <HAL_DCACHE_Init+0x9c>)
 8004d7a:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d102      	bne.n	8004d8a <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a16      	ldr	r2, [pc, #88]	@ (8004de0 <HAL_DCACHE_Init+0xa0>)
 8004d88:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f814 	bl	8004de4 <HAL_DCACHE_Enable>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	73fb      	strb	r3, [r7, #15]

  return status;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	08004e83 	.word	0x08004e83
 8004dd0:	08004e33 	.word	0x08004e33
 8004dd4:	08004e47 	.word	0x08004e47
 8004dd8:	08004e6f 	.word	0x08004e6f
 8004ddc:	08004e5b 	.word	0x08004e5b
 8004de0:	080019d5 	.word	0x080019d5

08004de4 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e015      	b.n	8004e26 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 0309 	and.w	r3, r3, #9
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8004e08:	2302      	movs	r3, #2
 8004e0a:	73fb      	strb	r3, [r7, #15]
 8004e0c:	e00a      	b.n	8004e24 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
  }

  return status;
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
 8004ea2:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e04f      	b.n	8004f4e <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_DMA_Start_IT+0x26>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e048      	b.n	8004f4e <HAL_DMA_Start_IT+0xb8>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d136      	bne.n	8004f3e <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f9d3 	bl	8005290 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695a      	ldr	r2, [r3, #20]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8004ef8:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d007      	beq.n	8004f12 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f10:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d007      	beq.n	8004f2a <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	695a      	ldr	r2, [r3, #20]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f28:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695a      	ldr	r2, [r3, #20]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 0201 	orr.w	r2, r2, #1
 8004f38:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e007      	b.n	8004f4e <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2240      	movs	r2, #64	@ 0x40
 8004f42:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b086      	sub	sp, #24
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004f66:	f023 030f 	bic.w	r3, r3, #15
 8004f6a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f74:	3b50      	subs	r3, #80	@ 0x50
 8004f76:	09db      	lsrs	r3, r3, #7
 8004f78:	f003 031f 	and.w	r3, r3, #31
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f82:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 813b 	beq.w	800520c <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d011      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004fba:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc0:	f043 0201 	orr.w	r2, r3, #1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d011      	beq.n	8004ffa <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fec:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff2:	f043 0202 	orr.w	r2, r3, #2
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d011      	beq.n	800502c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800501e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005024:	f043 0204 	orr.w	r2, r3, #4
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d011      	beq.n	800505e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005050:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005056:	f043 0208 	orr.w	r2, r3, #8
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005068:	2b00      	cmp	r3, #0
 800506a:	d013      	beq.n	8005094 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00c      	beq.n	8005094 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005082:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d04c      	beq.n	800513c <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d045      	beq.n	800513c <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80050b8:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d12e      	bne.n	8005124 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695a      	ldr	r2, [r3, #20]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050d4:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695a      	ldr	r2, [r3, #20]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0202 	orr.w	r2, r2, #2
 80050e4:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050fe:	2201      	movs	r2, #1
 8005100:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2200      	movs	r2, #0
 8005108:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005116:	2b00      	cmp	r3, #0
 8005118:	d07a      	beq.n	8005210 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	4798      	blx	r3
        }

        return;
 8005122:	e075      	b.n	8005210 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2205      	movs	r2, #5
 8005128:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005146:	2b00      	cmp	r3, #0
 8005148:	d039      	beq.n	80051be <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d032      	beq.n	80051be <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800515c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005160:	2b00      	cmp	r3, #0
 8005162:	d012      	beq.n	800518a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800516a:	2b00      	cmp	r3, #0
 800516c:	d116      	bne.n	800519c <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005174:	2b00      	cmp	r3, #0
 8005176:	d111      	bne.n	800519c <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005184:	2201      	movs	r2, #1
 8005186:	731a      	strb	r2, [r3, #12]
 8005188:	e008      	b.n	800519c <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005190:	2b00      	cmp	r3, #0
 8005192:	d103      	bne.n	800519c <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80051a4:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d025      	beq.n	8005212 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695a      	ldr	r2, [r3, #20]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0202 	orr.w	r2, r2, #2
 80051d4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ee:	2201      	movs	r2, #1
 80051f0:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	4798      	blx	r3
 800520a:	e002      	b.n	8005212 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800520c:	bf00      	nop
 800520e:	e000      	b.n	8005212 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005210:	bf00      	nop
    }
  }
}
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e02b      	b.n	8005284 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005234:	f023 030f 	bic.w	r3, r3, #15
 8005238:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005242:	3b50      	subs	r3, #80	@ 0x50
 8005244:	09db      	lsrs	r3, r3, #7
 8005246:	f003 031f 	and.w	r3, r3, #31
 800524a:	2201      	movs	r2, #1
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b00      	cmp	r3, #0
 800525a:	d012      	beq.n	8005282 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	f003 0311 	and.w	r3, r3, #17
 8005262:	2b11      	cmp	r3, #17
 8005264:	d106      	bne.n	8005274 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	431a      	orrs	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	605a      	str	r2, [r3, #4]
 8005272:	e006      	b.n	8005282 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	43db      	mvns	r3, r3
 800527c:	401a      	ands	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052a4:	0c1b      	lsrs	r3, r3, #16
 80052a6:	041b      	lsls	r3, r3, #16
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	b291      	uxth	r1, r2
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	6812      	ldr	r2, [r2, #0]
 80052b0:	430b      	orrs	r3, r1
 80052b2:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80052bc:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80052e4:	f7fc ff5a 	bl	800219c <HAL_GetTick>
 80052e8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0db      	b.n	80054ac <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a6e      	ldr	r2, [pc, #440]	@ (80054b4 <HAL_DMAEx_List_Init+0x1d8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	f000 809f 	beq.w	800543e <HAL_DMAEx_List_Init+0x162>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a6c      	ldr	r2, [pc, #432]	@ (80054b8 <HAL_DMAEx_List_Init+0x1dc>)
 8005306:	4293      	cmp	r3, r2
 8005308:	f000 8099 	beq.w	800543e <HAL_DMAEx_List_Init+0x162>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a6a      	ldr	r2, [pc, #424]	@ (80054bc <HAL_DMAEx_List_Init+0x1e0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	f000 8093 	beq.w	800543e <HAL_DMAEx_List_Init+0x162>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a68      	ldr	r2, [pc, #416]	@ (80054c0 <HAL_DMAEx_List_Init+0x1e4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	f000 808d 	beq.w	800543e <HAL_DMAEx_List_Init+0x162>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a66      	ldr	r2, [pc, #408]	@ (80054c4 <HAL_DMAEx_List_Init+0x1e8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	f000 8087 	beq.w	800543e <HAL_DMAEx_List_Init+0x162>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a64      	ldr	r2, [pc, #400]	@ (80054c8 <HAL_DMAEx_List_Init+0x1ec>)
 8005336:	4293      	cmp	r3, r2
 8005338:	f000 8081 	beq.w	800543e <HAL_DMAEx_List_Init+0x162>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a62      	ldr	r2, [pc, #392]	@ (80054cc <HAL_DMAEx_List_Init+0x1f0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d07b      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a61      	ldr	r2, [pc, #388]	@ (80054d0 <HAL_DMAEx_List_Init+0x1f4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d076      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a5f      	ldr	r2, [pc, #380]	@ (80054d4 <HAL_DMAEx_List_Init+0x1f8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d071      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a5e      	ldr	r2, [pc, #376]	@ (80054d8 <HAL_DMAEx_List_Init+0x1fc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d06c      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a5c      	ldr	r2, [pc, #368]	@ (80054dc <HAL_DMAEx_List_Init+0x200>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d067      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a5b      	ldr	r2, [pc, #364]	@ (80054e0 <HAL_DMAEx_List_Init+0x204>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d062      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a59      	ldr	r2, [pc, #356]	@ (80054e4 <HAL_DMAEx_List_Init+0x208>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d05d      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a58      	ldr	r2, [pc, #352]	@ (80054e8 <HAL_DMAEx_List_Init+0x20c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d058      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a56      	ldr	r2, [pc, #344]	@ (80054ec <HAL_DMAEx_List_Init+0x210>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d053      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a55      	ldr	r2, [pc, #340]	@ (80054f0 <HAL_DMAEx_List_Init+0x214>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d04e      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a53      	ldr	r2, [pc, #332]	@ (80054f4 <HAL_DMAEx_List_Init+0x218>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d049      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a52      	ldr	r2, [pc, #328]	@ (80054f8 <HAL_DMAEx_List_Init+0x21c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d044      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a50      	ldr	r2, [pc, #320]	@ (80054fc <HAL_DMAEx_List_Init+0x220>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d03f      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a4f      	ldr	r2, [pc, #316]	@ (8005500 <HAL_DMAEx_List_Init+0x224>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d03a      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a4d      	ldr	r2, [pc, #308]	@ (8005504 <HAL_DMAEx_List_Init+0x228>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d035      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a4c      	ldr	r2, [pc, #304]	@ (8005508 <HAL_DMAEx_List_Init+0x22c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d030      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a4a      	ldr	r2, [pc, #296]	@ (800550c <HAL_DMAEx_List_Init+0x230>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d02b      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a49      	ldr	r2, [pc, #292]	@ (8005510 <HAL_DMAEx_List_Init+0x234>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d026      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a47      	ldr	r2, [pc, #284]	@ (8005514 <HAL_DMAEx_List_Init+0x238>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d021      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a46      	ldr	r2, [pc, #280]	@ (8005518 <HAL_DMAEx_List_Init+0x23c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d01c      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a44      	ldr	r2, [pc, #272]	@ (800551c <HAL_DMAEx_List_Init+0x240>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d017      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a43      	ldr	r2, [pc, #268]	@ (8005520 <HAL_DMAEx_List_Init+0x244>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d012      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a41      	ldr	r2, [pc, #260]	@ (8005524 <HAL_DMAEx_List_Init+0x248>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00d      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a40      	ldr	r2, [pc, #256]	@ (8005528 <HAL_DMAEx_List_Init+0x24c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d008      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a3e      	ldr	r2, [pc, #248]	@ (800552c <HAL_DMAEx_List_Init+0x250>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d003      	beq.n	800543e <HAL_DMAEx_List_Init+0x162>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a3d      	ldr	r2, [pc, #244]	@ (8005530 <HAL_DMAEx_List_Init+0x254>)
 800543c:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2202      	movs	r2, #2
 800544a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695a      	ldr	r2, [r3, #20]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0206 	orr.w	r2, r2, #6
 800545c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800545e:	e00f      	b.n	8005480 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005460:	f7fc fe9c 	bl	800219c <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b05      	cmp	r3, #5
 800546c:	d908      	bls.n	8005480 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2210      	movs	r2, #16
 8005472:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2203      	movs	r2, #3
 8005478:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e015      	b.n	80054ac <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e8      	bne.n	8005460 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fad0 	bl	8005a34 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40020050 	.word	0x40020050
 80054b8:	50020050 	.word	0x50020050
 80054bc:	400200d0 	.word	0x400200d0
 80054c0:	500200d0 	.word	0x500200d0
 80054c4:	40020150 	.word	0x40020150
 80054c8:	50020150 	.word	0x50020150
 80054cc:	400201d0 	.word	0x400201d0
 80054d0:	500201d0 	.word	0x500201d0
 80054d4:	40020250 	.word	0x40020250
 80054d8:	50020250 	.word	0x50020250
 80054dc:	400202d0 	.word	0x400202d0
 80054e0:	500202d0 	.word	0x500202d0
 80054e4:	40020350 	.word	0x40020350
 80054e8:	50020350 	.word	0x50020350
 80054ec:	400203d0 	.word	0x400203d0
 80054f0:	500203d0 	.word	0x500203d0
 80054f4:	40020450 	.word	0x40020450
 80054f8:	50020450 	.word	0x50020450
 80054fc:	400204d0 	.word	0x400204d0
 8005500:	500204d0 	.word	0x500204d0
 8005504:	40020550 	.word	0x40020550
 8005508:	50020550 	.word	0x50020550
 800550c:	400205d0 	.word	0x400205d0
 8005510:	500205d0 	.word	0x500205d0
 8005514:	40020650 	.word	0x40020650
 8005518:	50020650 	.word	0x50020650
 800551c:	400206d0 	.word	0x400206d0
 8005520:	500206d0 	.word	0x500206d0
 8005524:	40020750 	.word	0x40020750
 8005528:	50020750 	.word	0x50020750
 800552c:	400207d0 	.word	0x400207d0
 8005530:	500207d0 	.word	0x500207d0

08005534 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_DMAEx_List_Start_IT+0x16>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e082      	b.n	8005654 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005554:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005560:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8005562:	7dfb      	ldrb	r3, [r7, #23]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d005      	beq.n	8005574 <HAL_DMAEx_List_Start_IT+0x40>
 8005568:	7dfb      	ldrb	r3, [r7, #23]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d16a      	bne.n	8005644 <HAL_DMAEx_List_Start_IT+0x110>
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d067      	beq.n	8005644 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	d157      	bne.n	8005630 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005586:	2b01      	cmp	r3, #1
 8005588:	d101      	bne.n	800558e <HAL_DMAEx_List_Start_IT+0x5a>
 800558a:	2302      	movs	r3, #2
 800558c:	e062      	b.n	8005654 <HAL_DMAEx_List_Start_IT+0x120>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2202      	movs	r2, #2
 800559a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055a2:	2202      	movs	r2, #2
 80055a4:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055b0:	2200      	movs	r2, #0
 80055b2:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695a      	ldr	r2, [r3, #20]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80055c2:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d007      	beq.n	80055dc <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695a      	ldr	r2, [r3, #20]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055da:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d007      	beq.n	80055f4 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695a      	ldr	r2, [r3, #20]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055f2:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f107 010c 	add.w	r1, r7, #12
 80055fe:	2200      	movs	r2, #0
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fe37 	bl	8006274 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4619      	mov	r1, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	0c0b      	lsrs	r3, r1, #16
 8005614:	041b      	lsls	r3, r3, #16
 8005616:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005624:	4013      	ands	r3, r2
 8005626:	68f9      	ldr	r1, [r7, #12]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6812      	ldr	r2, [r2, #0]
 800562c:	430b      	orrs	r3, r1
 800562e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695a      	ldr	r2, [r3, #20]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0201 	orr.w	r2, r2, #1
 800563e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	e007      	b.n	8005654 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2240      	movs	r2, #64	@ 0x40
 8005648:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <HAL_DMAEx_List_BuildNode+0x16>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e004      	b.n	8005680 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fb33 	bl	8005ce4 <DMA_List_BuildNode>

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <HAL_DMAEx_List_GetNodeConfig+0x16>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e004      	b.n	80056ac <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fc6f 	bl	8005f88 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08c      	sub	sp, #48	@ 0x30
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <HAL_DMAEx_List_InsertNode+0x18>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0b6      	b.n	800583e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d104      	bne.n	80056e2 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2204      	movs	r2, #4
 80056dc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e0ad      	b.n	800583e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fd56 	bl	800619c <DMA_List_CheckNodesBaseAddresses>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d004      	beq.n	8005700 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2205      	movs	r2, #5
 80056fa:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e09e      	b.n	800583e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fd77 	bl	80061fc <DMA_List_CheckNodesTypes>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d004      	beq.n	800571e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2204      	movs	r2, #4
 8005718:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e08f      	b.n	800583e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2202      	movs	r2, #2
 8005722:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800572a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800572e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fd9d 	bl	8006274 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d11a      	bne.n	8005778 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d106      	bne.n	8005756 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	609a      	str	r2, [r3, #8]
 8005754:	e06c      	b.n	8005830 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005762:	4013      	ands	r3, r2
 8005764:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005766:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005768:	4319      	orrs	r1, r3
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2202      	movs	r2, #2
 8005774:	609a      	str	r2, [r3, #8]
 8005776:	e05b      	b.n	8005830 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10f      	bne.n	800579e <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005788:	4013      	ands	r3, r2
 800578a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800578c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800578e:	4319      	orrs	r1, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	e043      	b.n	8005826 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 800579e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a0:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80057a2:	f107 0314 	add.w	r3, r7, #20
 80057a6:	461a      	mov	r2, r3
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 fd92 	bl	80062d4 <DMA_List_FindNode>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d132      	bne.n	800581c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d11a      	bne.n	80057f6 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00b      	beq.n	80057e0 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	461a      	mov	r2, r3
 80057ce:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80057d2:	4013      	ands	r3, r2
 80057d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057d8:	4319      	orrs	r1, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80057e6:	4013      	ands	r3, r2
 80057e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057ec:	4319      	orrs	r1, r3
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80057f4:	e017      	b.n	8005826 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 80057f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800580c:	4013      	ands	r3, r2
 800580e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005810:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005812:	4319      	orrs	r1, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800581a:	e004      	b.n	8005826 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2206      	movs	r2, #6
 8005820:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e00b      	b.n	800583e <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3730      	adds	r7, #48	@ 0x30
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b08a      	sub	sp, #40	@ 0x28
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e052      	b.n	80058fe <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e049      	b.n	80058fe <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00c      	beq.n	800588c <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d101      	bne.n	8005882 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	e03d      	b.n	80058fe <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2204      	movs	r2, #4
 8005886:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e038      	b.n	80058fe <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d104      	bne.n	800589e <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2204      	movs	r2, #4
 8005898:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e02f      	b.n	80058fe <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2202      	movs	r2, #2
 80058a2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f107 0220 	add.w	r2, r7, #32
 80058b2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fcdc 	bl	8006274 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80058c0:	f107 030c 	add.w	r3, r7, #12
 80058c4:	461a      	mov	r2, r3
 80058c6:	2100      	movs	r1, #0
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fd03 	bl	80062d4 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80058d8:	4013      	ands	r3, r2
 80058da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	4610      	mov	r0, r2
 80058e0:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80058e2:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80058e4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3728      	adds	r7, #40	@ 0x28
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
	...

08005908 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <HAL_DMAEx_List_LinkQ+0x16>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e072      	b.n	8005a08 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005928:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d002      	beq.n	800593c <HAL_DMAEx_List_LinkQ+0x34>
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	2b05      	cmp	r3, #5
 800593a:	d108      	bne.n	800594e <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2240      	movs	r2, #64	@ 0x40
 8005940:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e05c      	b.n	8005a08 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	7b1b      	ldrb	r3, [r3, #12]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d104      	bne.n	8005962 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2201      	movs	r2, #1
 800595c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e052      	b.n	8005a08 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a2b      	ldr	r2, [pc, #172]	@ (8005a14 <HAL_DMAEx_List_LinkQ+0x10c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d022      	beq.n	80059b2 <HAL_DMAEx_List_LinkQ+0xaa>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a29      	ldr	r2, [pc, #164]	@ (8005a18 <HAL_DMAEx_List_LinkQ+0x110>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d01d      	beq.n	80059b2 <HAL_DMAEx_List_LinkQ+0xaa>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a28      	ldr	r2, [pc, #160]	@ (8005a1c <HAL_DMAEx_List_LinkQ+0x114>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d018      	beq.n	80059b2 <HAL_DMAEx_List_LinkQ+0xaa>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a26      	ldr	r2, [pc, #152]	@ (8005a20 <HAL_DMAEx_List_LinkQ+0x118>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d013      	beq.n	80059b2 <HAL_DMAEx_List_LinkQ+0xaa>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a25      	ldr	r2, [pc, #148]	@ (8005a24 <HAL_DMAEx_List_LinkQ+0x11c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00e      	beq.n	80059b2 <HAL_DMAEx_List_LinkQ+0xaa>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a23      	ldr	r2, [pc, #140]	@ (8005a28 <HAL_DMAEx_List_LinkQ+0x120>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d009      	beq.n	80059b2 <HAL_DMAEx_List_LinkQ+0xaa>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a22      	ldr	r2, [pc, #136]	@ (8005a2c <HAL_DMAEx_List_LinkQ+0x124>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_DMAEx_List_LinkQ+0xaa>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a20      	ldr	r2, [pc, #128]	@ (8005a30 <HAL_DMAEx_List_LinkQ+0x128>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d101      	bne.n	80059b6 <HAL_DMAEx_List_LinkQ+0xae>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <HAL_DMAEx_List_LinkQ+0xb0>
 80059b6:	2300      	movs	r3, #0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10b      	bne.n	80059d4 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d004      	beq.n	80059d4 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2203      	movs	r2, #3
 80059ce:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e019      	b.n	8005a08 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d8:	2b81      	cmp	r3, #129	@ 0x81
 80059da:	d108      	bne.n	80059ee <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10d      	bne.n	8005a00 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2204      	movs	r2, #4
 80059e8:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e00c      	b.n	8005a08 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d004      	beq.n	8005a00 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2204      	movs	r2, #4
 80059fa:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e003      	b.n	8005a08 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	40020650 	.word	0x40020650
 8005a18:	50020650 	.word	0x50020650
 8005a1c:	400206d0 	.word	0x400206d0
 8005a20:	500206d0 	.word	0x500206d0
 8005a24:	40020750 	.word	0x40020750
 8005a28:	50020750 	.word	0x50020750
 8005a2c:	400207d0 	.word	0x400207d0
 8005a30:	500207d0 	.word	0x500207d0

08005a34 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a85      	ldr	r2, [pc, #532]	@ (8005c64 <DMA_List_Init+0x230>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	f000 80a0 	beq.w	8005b94 <DMA_List_Init+0x160>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a83      	ldr	r2, [pc, #524]	@ (8005c68 <DMA_List_Init+0x234>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	f000 809a 	beq.w	8005b94 <DMA_List_Init+0x160>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a81      	ldr	r2, [pc, #516]	@ (8005c6c <DMA_List_Init+0x238>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	f000 8094 	beq.w	8005b94 <DMA_List_Init+0x160>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a7f      	ldr	r2, [pc, #508]	@ (8005c70 <DMA_List_Init+0x23c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	f000 808e 	beq.w	8005b94 <DMA_List_Init+0x160>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a7d      	ldr	r2, [pc, #500]	@ (8005c74 <DMA_List_Init+0x240>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	f000 8088 	beq.w	8005b94 <DMA_List_Init+0x160>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a7b      	ldr	r2, [pc, #492]	@ (8005c78 <DMA_List_Init+0x244>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	f000 8082 	beq.w	8005b94 <DMA_List_Init+0x160>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a79      	ldr	r2, [pc, #484]	@ (8005c7c <DMA_List_Init+0x248>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d07c      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a78      	ldr	r2, [pc, #480]	@ (8005c80 <DMA_List_Init+0x24c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d077      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a76      	ldr	r2, [pc, #472]	@ (8005c84 <DMA_List_Init+0x250>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d072      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a75      	ldr	r2, [pc, #468]	@ (8005c88 <DMA_List_Init+0x254>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d06d      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a73      	ldr	r2, [pc, #460]	@ (8005c8c <DMA_List_Init+0x258>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d068      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a72      	ldr	r2, [pc, #456]	@ (8005c90 <DMA_List_Init+0x25c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d063      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a70      	ldr	r2, [pc, #448]	@ (8005c94 <DMA_List_Init+0x260>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d05e      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a6f      	ldr	r2, [pc, #444]	@ (8005c98 <DMA_List_Init+0x264>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d059      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a6d      	ldr	r2, [pc, #436]	@ (8005c9c <DMA_List_Init+0x268>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d054      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a6c      	ldr	r2, [pc, #432]	@ (8005ca0 <DMA_List_Init+0x26c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d04f      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a6a      	ldr	r2, [pc, #424]	@ (8005ca4 <DMA_List_Init+0x270>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d04a      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a69      	ldr	r2, [pc, #420]	@ (8005ca8 <DMA_List_Init+0x274>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d045      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a67      	ldr	r2, [pc, #412]	@ (8005cac <DMA_List_Init+0x278>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d040      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a66      	ldr	r2, [pc, #408]	@ (8005cb0 <DMA_List_Init+0x27c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d03b      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a64      	ldr	r2, [pc, #400]	@ (8005cb4 <DMA_List_Init+0x280>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d036      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a63      	ldr	r2, [pc, #396]	@ (8005cb8 <DMA_List_Init+0x284>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d031      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a61      	ldr	r2, [pc, #388]	@ (8005cbc <DMA_List_Init+0x288>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d02c      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a60      	ldr	r2, [pc, #384]	@ (8005cc0 <DMA_List_Init+0x28c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d027      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a5e      	ldr	r2, [pc, #376]	@ (8005cc4 <DMA_List_Init+0x290>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d022      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a5d      	ldr	r2, [pc, #372]	@ (8005cc8 <DMA_List_Init+0x294>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d01d      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a5b      	ldr	r2, [pc, #364]	@ (8005ccc <DMA_List_Init+0x298>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d018      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a5a      	ldr	r2, [pc, #360]	@ (8005cd0 <DMA_List_Init+0x29c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d013      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a58      	ldr	r2, [pc, #352]	@ (8005cd4 <DMA_List_Init+0x2a0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00e      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a57      	ldr	r2, [pc, #348]	@ (8005cd8 <DMA_List_Init+0x2a4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d009      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a55      	ldr	r2, [pc, #340]	@ (8005cdc <DMA_List_Init+0x2a8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <DMA_List_Init+0x160>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a54      	ldr	r2, [pc, #336]	@ (8005ce0 <DMA_List_Init+0x2ac>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d101      	bne.n	8005b98 <DMA_List_Init+0x164>
 8005b94:	2301      	movs	r3, #1
 8005b96:	e000      	b.n	8005b9a <DMA_List_Init+0x166>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005bcc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2200      	movs	r2, #0
 8005be4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a36      	ldr	r2, [pc, #216]	@ (8005cc4 <DMA_List_Init+0x290>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d022      	beq.n	8005c36 <DMA_List_Init+0x202>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a34      	ldr	r2, [pc, #208]	@ (8005cc8 <DMA_List_Init+0x294>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01d      	beq.n	8005c36 <DMA_List_Init+0x202>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a33      	ldr	r2, [pc, #204]	@ (8005ccc <DMA_List_Init+0x298>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d018      	beq.n	8005c36 <DMA_List_Init+0x202>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a31      	ldr	r2, [pc, #196]	@ (8005cd0 <DMA_List_Init+0x29c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d013      	beq.n	8005c36 <DMA_List_Init+0x202>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a30      	ldr	r2, [pc, #192]	@ (8005cd4 <DMA_List_Init+0x2a0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00e      	beq.n	8005c36 <DMA_List_Init+0x202>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2e      	ldr	r2, [pc, #184]	@ (8005cd8 <DMA_List_Init+0x2a4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d009      	beq.n	8005c36 <DMA_List_Init+0x202>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a2d      	ldr	r2, [pc, #180]	@ (8005cdc <DMA_List_Init+0x2a8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d004      	beq.n	8005c36 <DMA_List_Init+0x202>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a2b      	ldr	r2, [pc, #172]	@ (8005ce0 <DMA_List_Init+0x2ac>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d101      	bne.n	8005c3a <DMA_List_Init+0x206>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <DMA_List_Init+0x208>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d007      	beq.n	8005c50 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2200      	movs	r2, #0
 8005c46:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2200      	movs	r2, #0
 8005c56:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005c58:	bf00      	nop
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	40020050 	.word	0x40020050
 8005c68:	50020050 	.word	0x50020050
 8005c6c:	400200d0 	.word	0x400200d0
 8005c70:	500200d0 	.word	0x500200d0
 8005c74:	40020150 	.word	0x40020150
 8005c78:	50020150 	.word	0x50020150
 8005c7c:	400201d0 	.word	0x400201d0
 8005c80:	500201d0 	.word	0x500201d0
 8005c84:	40020250 	.word	0x40020250
 8005c88:	50020250 	.word	0x50020250
 8005c8c:	400202d0 	.word	0x400202d0
 8005c90:	500202d0 	.word	0x500202d0
 8005c94:	40020350 	.word	0x40020350
 8005c98:	50020350 	.word	0x50020350
 8005c9c:	400203d0 	.word	0x400203d0
 8005ca0:	500203d0 	.word	0x500203d0
 8005ca4:	40020450 	.word	0x40020450
 8005ca8:	50020450 	.word	0x50020450
 8005cac:	400204d0 	.word	0x400204d0
 8005cb0:	500204d0 	.word	0x500204d0
 8005cb4:	40020550 	.word	0x40020550
 8005cb8:	50020550 	.word	0x50020550
 8005cbc:	400205d0 	.word	0x400205d0
 8005cc0:	500205d0 	.word	0x500205d0
 8005cc4:	40020650 	.word	0x40020650
 8005cc8:	50020650 	.word	0x50020650
 8005ccc:	400206d0 	.word	0x400206d0
 8005cd0:	500206d0 	.word	0x500206d0
 8005cd4:	40020750 	.word	0x40020750
 8005cd8:	50020750 	.word	0x50020750
 8005cdc:	400207d0 	.word	0x400207d0
 8005ce0:	500207d0 	.word	0x500207d0

08005ce4 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005cf6:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8005cfc:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8005d02:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8005d08:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0320 	and.w	r3, r3, #32
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d017      	beq.n	8005d4a <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d26:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	051b      	lsls	r3, r3, #20
 8005d30:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8005d34:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8005d42:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005d44:	431a      	orrs	r2, r3
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6859      	ldr	r1, [r3, #4]
 8005d52:	f240 237f 	movw	r3, #639	@ 0x27f
 8005d56:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d66:	d10c      	bne.n	8005d82 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d011      	beq.n	8005d98 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	605a      	str	r2, [r3, #4]
 8005d80:	e00a      	b.n	8005d98 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d8a:	d105      	bne.n	8005d98 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00f      	beq.n	8005dc0 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dac:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005db2:	041b      	lsls	r3, r3, #16
 8005db4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005db8:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d04e      	beq.n	8005e74 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dde:	3b01      	subs	r3, #1
 8005de0:	0419      	lsls	r1, r3, #16
 8005de2:	4b67      	ldr	r3, [pc, #412]	@ (8005f80 <DMA_List_BuildNode+0x29c>)
 8005de4:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8005de6:	431a      	orrs	r2, r3
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	da06      	bge.n	8005e02 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	609a      	str	r2, [r3, #8]
 8005e00:	e005      	b.n	8005e0e <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	da06      	bge.n	8005e24 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	609a      	str	r2, [r3, #8]
 8005e22:	e005      	b.n	8005e30 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	da06      	bge.n	8005e46 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	609a      	str	r2, [r3, #8]
 8005e44:	e005      	b.n	8005e52 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	da06      	bge.n	8005e68 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	609a      	str	r2, [r3, #8]
 8005e66:	e005      	b.n	8005e74 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d059      	beq.n	8005f44 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	da09      	bge.n	8005eac <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e9c:	425b      	negs	r3, r3
 8005e9e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	615a      	str	r2, [r3, #20]
 8005eaa:	e005      	b.n	8005eb8 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb0:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	da0d      	bge.n	8005edc <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec4:	425b      	negs	r3, r3
 8005ec6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	695a      	ldr	r2, [r3, #20]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	0419      	lsls	r1, r3, #16
 8005ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8005f84 <DMA_List_BuildNode+0x2a0>)
 8005ed2:	400b      	ands	r3, r1
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	615a      	str	r2, [r3, #20]
 8005eda:	e009      	b.n	8005ef0 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee4:	0419      	lsls	r1, r3, #16
 8005ee6:	4b27      	ldr	r3, [pc, #156]	@ (8005f84 <DMA_List_BuildNode+0x2a0>)
 8005ee8:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005eea:	431a      	orrs	r2, r3
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	da08      	bge.n	8005f0a <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005efc:	425b      	negs	r3, r3
 8005efe:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	619a      	str	r2, [r3, #24]
 8005f08:	e004      	b.n	8005f14 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f0e:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	da0b      	bge.n	8005f34 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f20:	425b      	negs	r3, r3
 8005f22:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	619a      	str	r2, [r3, #24]
 8005f32:	e007      	b.n	8005f44 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3c:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d006      	beq.n	8005f66 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8005f64:	e005      	b.n	8005f72 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	621a      	str	r2, [r3, #32]
}
 8005f72:	bf00      	nop
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	07ff0000 	.word	0x07ff0000
 8005f84:	1fff0000 	.word	0x1fff0000

08005f88 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0208 	and.w	r2, r3, #8
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0203 	and.w	r2, r3, #3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8005fd0:	091b      	lsrs	r3, r3, #4
 8005fd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fd6:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8005fe0:	0d1b      	lsrs	r3, r3, #20
 8005fe2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fe6:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	4b66      	ldr	r3, [pc, #408]	@ (8006198 <DMA_List_GetNodeConfig+0x210>)
 8005ffe:	4013      	ands	r3, r2
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006018:	2b00      	cmp	r3, #0
 800601a:	d008      	beq.n	800602e <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006022:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800602a:	60da      	str	r2, [r3, #12]
 800602c:	e013      	b.n	8006056 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006042:	2b00      	cmp	r3, #0
 8006044:	d004      	beq.n	8006050 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800604c:	60da      	str	r2, [r3, #12]
 800604e:	e002      	b.n	8006056 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 800607e:	0c1b      	lsrs	r3, r3, #16
 8006080:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	b29a      	uxth	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d008      	beq.n	80060bc <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	0c1b      	lsrs	r3, r3, #16
 80060b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060b4:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80060ba:	e002      	b.n	80060c2 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d04a      	beq.n	8006174 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060e8:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 80060ea:	89fa      	ldrh	r2, [r7, #14]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	0c1b      	lsrs	r3, r3, #16
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060fc:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 80060fe:	89fa      	ldrh	r2, [r7, #14]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d004      	beq.n	800611a <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006114:	425a      	negs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d004      	beq.n	8006130 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800612a:	425a      	negs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8006136:	89fa      	ldrh	r2, [r7, #14]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	0c1b      	lsrs	r3, r3, #16
 8006142:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8006144:	89fa      	ldrh	r2, [r7, #14]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d004      	beq.n	8006160 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800615a:	425a      	negs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	da11      	bge.n	800618c <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800616c:	425a      	negs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8006172:	e00b      	b.n	800618c <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800618c:	bf00      	nop
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	0c002000 	.word	0x0c002000

0800619c <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	431a      	orrs	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	0c1b      	lsrs	r3, r3, #16
 80061b4:	041b      	lsls	r3, r3, #16
 80061b6:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	e00a      	b.n	80061de <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	e004      	b.n	80061de <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	0c1b      	lsrs	r3, r3, #16
 80061e2:	041b      	lsls	r3, r3, #16
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d001      	beq.n	80061ee <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e000      	b.n	80061f0 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	371c      	adds	r7, #28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8006208:	2300      	movs	r3, #0
 800620a:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d004      	beq.n	800621c <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	e00e      	b.n	800623a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d004      	beq.n	800622c <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	e006      	b.n	800623a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	b2db      	uxtb	r3, r3
 8006238:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d007      	beq.n	8006250 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	429a      	cmp	r2, r3
 800624a:	d001      	beq.n	8006250 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 800624c:	2302      	movs	r3, #2
 800624e:	e00b      	b.n	8006268 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d007      	beq.n	8006266 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	b2db      	uxtb	r3, r3
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	429a      	cmp	r2, r3
 8006260:	d001      	beq.n	8006266 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8006262:	2303      	movs	r3, #3
 8006264:	e000      	b.n	8006268 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	371c      	adds	r7, #28
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00c      	beq.n	80062a6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4a0d      	ldr	r2, [pc, #52]	@ (80062cc <DMA_List_GetCLLRNodeInfo+0x58>)
 8006296:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00f      	beq.n	80062be <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2207      	movs	r2, #7
 80062a2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80062a4:	e00b      	b.n	80062be <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4a08      	ldr	r2, [pc, #32]	@ (80062d0 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80062b0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2205      	movs	r2, #5
 80062bc:	601a      	str	r2, [r3, #0]
}
 80062be:	bf00      	nop
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	fe010000 	.word	0xfe010000
 80062d0:	f8010000 	.word	0xf8010000

080062d4 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b089      	sub	sp, #36	@ 0x24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d142      	bne.n	800637e <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80062f8:	e01d      	b.n	8006336 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d107      	bne.n	8006310 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800630a:	4013      	ands	r3, r2
 800630c:	61bb      	str	r3, [r7, #24]
 800630e:	e00f      	b.n	8006330 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	0c1b      	lsrs	r3, r3, #16
 800631a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	4413      	add	r3, r2
 8006320:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8006328:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800632c:	4013      	ands	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	3301      	adds	r3, #1
 8006334:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	429a      	cmp	r2, r3
 800633e:	d3dc      	bcc.n	80062fa <DMA_List_FindNode+0x26>
 8006340:	e029      	b.n	8006396 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d107      	bne.n	8006358 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	461a      	mov	r2, r3
 800634e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006352:	4013      	ands	r3, r2
 8006354:	61bb      	str	r3, [r7, #24]
 8006356:	e00f      	b.n	8006378 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	0c1b      	lsrs	r3, r3, #16
 8006362:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	4413      	add	r3, r2
 8006368:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8006370:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006374:	4013      	ands	r3, r2
 8006376:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	3301      	adds	r3, #1
 800637c:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	429a      	cmp	r2, r3
 8006386:	d206      	bcs.n	8006396 <DMA_List_FindNode+0xc2>
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800638e:	4013      	ands	r3, r2
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	429a      	cmp	r2, r3
 8006394:	d1d5      	bne.n	8006342 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d008      	beq.n	80063ae <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80063a2:	4013      	ands	r3, r2
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d001      	beq.n	80063ae <DMA_List_FindNode+0xda>
    {
      return 1U;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e02b      	b.n	8006406 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69fa      	ldr	r2, [r7, #28]
 80063b2:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	0c1b      	lsrs	r3, r3, #16
 80063ba:	041b      	lsls	r3, r3, #16
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	431a      	orrs	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	0c1b      	lsrs	r3, r3, #16
 80063ca:	041b      	lsls	r3, r3, #16
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	461a      	mov	r2, r3
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00f      	beq.n	8006404 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	461a      	mov	r2, r3
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063f0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80063f4:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	0c1b      	lsrs	r3, r3, #16
 80063fc:	041b      	lsls	r3, r3, #16
 80063fe:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3724      	adds	r7, #36	@ 0x24
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b086      	sub	sp, #24
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	607a      	str	r2, [r7, #4]
 800641e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006420:	f7fb febc 	bl	800219c <HAL_GetTick>
 8006424:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006426:	e008      	b.n	800643a <DSI_ShortWrite+0x28>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006428:	f7fb feb8 	bl	800219c <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b64      	cmp	r3, #100	@ 0x64
 8006434:	d901      	bls.n	800643a <DSI_ShortWrite+0x28>
    {
      return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e015      	b.n	8006466 <DSI_ShortWrite+0x54>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0ef      	beq.n	8006428 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	019a      	lsls	r2, r3, #6
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	431a      	orrs	r2, r3
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	021b      	lsls	r3, r3, #8
 8006454:	ea42 0103 	orr.w	r1, r2, r3
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	041a      	lsls	r2, r3, #16
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8006486:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	@ 0xc04
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	00da      	lsls	r2, r3, #3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	220e      	movs	r2, #14
 80064a8:	f8c3 2c34 	str.w	r2, [r3, #3124]	@ 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	@ 0xc70
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 021f 	bic.w	r2, r2, #31
 80064bc:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6912      	ldr	r2, [r2, #16]
 80064c8:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	220e      	movs	r2, #14
 80064d2:	f8c3 2ca0 	str.w	r2, [r3, #3232]	@ 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	@ 0xd08
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 021f 	bic.w	r2, r2, #31
 80064e6:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6912      	ldr	r2, [r2, #16]
 80064f2:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	220e      	movs	r2, #14
 80064fc:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	@ 0xc5c
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006510:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	@ 0xcf4
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006524:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d007      	beq.n	8006540 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8006534:	2b02      	cmp	r3, #2
 8006536:	d003      	beq.n	8006540 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 800653c:	2b05      	cmp	r3, #5
 800653e:	d10a      	bne.n	8006556 <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2200      	movs	r2, #0
 8006546:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 8006554:	e02c      	b.n	80065b0 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00b      	beq.n	8006576 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8006562:	2b03      	cmp	r3, #3
 8006564:	d007      	beq.n	8006576 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 800656a:	2b04      	cmp	r3, #4
 800656c:	d003      	beq.n	8006576 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8006572:	2b06      	cmp	r3, #6
 8006574:	d10a      	bne.n	800658c <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2210      	movs	r2, #16
 800657c:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2210      	movs	r2, #16
 8006586:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 800658a:	e011      	b.n	80065b0 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	2b07      	cmp	r3, #7
 8006592:	d003      	beq.n	800659c <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8006598:	2b08      	cmp	r3, #8
 800659a:	d109      	bne.n	80065b0 <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	@ 0xc60
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 020f 	bic.w	r2, r2, #15
 80065c0:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	@ 0xcf8
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 020f 	bic.w	r2, r2, #15
 80065d4:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6952      	ldr	r2, [r2, #20]
 80065e0:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	6952      	ldr	r2, [r2, #20]
 80065ec:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8006616:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	075a      	lsls	r2, r3, #29
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f8d3 2434 	ldr.w	r2, [r3, #1076]	@ 0x434
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006642:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	031a      	lsls	r2, r3, #12
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	021a      	lsls	r2, r3, #8
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

}
 8006676:	bf00      	nop
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
	...

08006684 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e124      	b.n	80068e2 <HAL_DSI_Init+0x25e>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	7e5b      	ldrb	r3, [r3, #25]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d102      	bne.n	80066a8 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7fb f9d0 	bl	8001a48 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2203      	movs	r2, #3
 80066ac:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066be:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 80066c2:	2002      	movs	r0, #2
 80066c4:	f7fb fd76 	bl	80021b4 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	4b85      	ldr	r3, [pc, #532]	@ (80068ec <HAL_DSI_Init+0x268>)
 80066d6:	400b      	ands	r3, r1
 80066d8:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80066f0:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80066f8:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8006704:	2300      	movs	r3, #0
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f042 0201 	orr.w	r2, r2, #1
 8006718:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	613b      	str	r3, [r7, #16]
 800672a:	693b      	ldr	r3, [r7, #16]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800672c:	2001      	movs	r0, #1
 800672e:	f7fb fd41 	bl	80021b4 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8006732:	f7fb fd33 	bl	800219c <HAL_GetTick>
 8006736:	6178      	str	r0, [r7, #20]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8006738:	e008      	b.n	800674c <HAL_DSI_Init+0xc8>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800673a:	f7fb fd2f 	bl	800219c <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b64      	cmp	r3, #100	@ 0x64
 8006746:	d901      	bls.n	800674c <HAL_DSI_Init+0xc8>
    {
      return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e0ca      	b.n	80068e2 <HAL_DSI_Init+0x25e>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8006754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0ee      	beq.n	800673a <HAL_DSI_Init+0xb6>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 800675c:	2300      	movs	r3, #0
 800675e:	60fb      	str	r3, [r7, #12]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	605a      	str	r2, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800678c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6899      	ldr	r1, [r3, #8]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689a      	ldr	r2, [r3, #8]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0202 	orr.w	r2, r2, #2
 80067b0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff fe5a 	bl	800646e <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 80067ba:	6839      	ldr	r1, [r7, #0]
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff ff1d 	bl	80065fc <DSI_SetWrapperPLLTuning>

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0204 	orr.w	r2, r2, #4
 80067d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0203 	bic.w	r2, r2, #3
 80067e6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8006800:	f7fb fccc 	bl	800219c <HAL_GetTick>
 8006804:	6178      	str	r0, [r7, #20]
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d121      	bne.n	800685a <HAL_DSI_Init+0x1d6>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8006816:	e00b      	b.n	8006830 <HAL_DSI_Init+0x1ac>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006818:	f7fb fcc0 	bl	800219c <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b64      	cmp	r3, #100	@ 0x64
 8006824:	d904      	bls.n	8006830 <HAL_DSI_Init+0x1ac>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e058      	b.n	80068e2 <HAL_DSI_Init+0x25e>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006838:	f003 0314 	and.w	r3, r3, #20
 800683c:	2b14      	cmp	r3, #20
 800683e:	d1eb      	bne.n	8006818 <HAL_DSI_Init+0x194>
 8006840:	e013      	b.n	800686a <HAL_DSI_Init+0x1e6>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006842:	f7fb fcab 	bl	800219c <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b64      	cmp	r3, #100	@ 0x64
 800684e:	d904      	bls.n	800685a <HAL_DSI_Init+0x1d6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e043      	b.n	80068e2 <HAL_DSI_Init+0x25e>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006862:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8006866:	2b94      	cmp	r3, #148	@ 0x94
 8006868:	d1eb      	bne.n	8006842 <HAL_DSI_Init+0x1be>


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2200      	movs	r2, #0
 800687a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	621a      	str	r2, [r3, #32]

  __HAL_DSI_DISABLE(hdsi);
 8006884:	2300      	movs	r3, #0
 8006886:	60bb      	str	r3, [r7, #8]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0201 	bic.w	r2, r2, #1
 8006896:	605a      	str	r2, [r3, #4]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	60bb      	str	r3, [r7, #8]
 80068a4:	68bb      	ldr	r3, [r7, #8]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 0203 	bic.w	r2, r2, #3
 80068b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f042 0201 	orr.w	r2, r2, #1
 80068d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	e0000003 	.word	0xe0000003

080068f0 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	7e1b      	ldrb	r3, [r3, #24]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d101      	bne.n	8006906 <HAL_DSI_ConfigErrorMonitor+0x16>
 8006902:	2302      	movs	r3, #2
 8006904:	e0ba      	b.n	8006a7c <HAL_DSI_ConfigErrorMonitor+0x18c>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2200      	movs	r2, #0
 8006912:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2200      	movs	r2, #0
 800691c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00b      	beq.n	8006948 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6812      	ldr	r2, [r2, #0]
 800693c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8006940:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8006944:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d009      	beq.n	8006966 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 8006962:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d009      	beq.n	8006984 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f042 0201 	orr.w	r2, r2, #1
 8006980:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	2b00      	cmp	r3, #0
 800698c:	d009      	beq.n	80069a2 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f042 0202 	orr.w	r2, r2, #2
 800699e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	f003 0310 	and.w	r3, r3, #16
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d009      	beq.n	80069c0 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f042 020c 	orr.w	r2, r2, #12
 80069bc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	f003 0320 	and.w	r3, r3, #32
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0210 	orr.w	r2, r2, #16
 80069da:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d009      	beq.n	80069fc <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f042 0220 	orr.w	r2, r2, #32
 80069f8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d009      	beq.n	8006a1a <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a16:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d009      	beq.n	8006a38 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006a34:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d009      	beq.n	8006a56 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8006a52:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d009      	beq.n	8006a74 <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8006a70:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00f      	beq.n	8006ac0 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d007      	beq.n	8006ac0 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f8b8 	bl	8006c30 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00f      	beq.n	8006af0 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d007      	beq.n	8006af0 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f8aa 	bl	8006c44 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 8097 	beq.w	8006c28 <HAL_DSI_IRQHandler+0x1a0>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006b02:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006b1a:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	4013      	ands	r3, r2
 8006b28:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d005      	beq.n	8006b3e <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	f043 0201 	orr.w	r2, r3, #1
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d005      	beq.n	8006b54 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	f043 0202 	orr.w	r2, r3, #2
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d005      	beq.n	8006b6a <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	f043 0204 	orr.w	r2, r3, #4
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	f043 0208 	orr.w	r2, r3, #8
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f003 030c 	and.w	r3, r3, #12
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d005      	beq.n	8006b96 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	f043 0210 	orr.w	r2, r3, #16
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f003 0310 	and.w	r3, r3, #16
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d005      	beq.n	8006bac <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	f043 0220 	orr.w	r2, r3, #32
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	f003 0320 	and.w	r3, r3, #32
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d005      	beq.n	8006bc2 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d005      	beq.n	8006bd8 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d005      	beq.n	8006bee <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d005      	beq.n	8006c04 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PBU_MASK) != 0U)
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d005      	beq.n	8006c1a <HAL_DSI_IRQHandler+0x192>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PBU;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	61da      	str	r2, [r3, #28]
    }
    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d002      	beq.n	8006c28 <HAL_DSI_IRQHandler+0x1a0>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f818 	bl	8006c58 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8006c28:	bf00      	nop
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	7e1b      	ldrb	r3, [r3, #24]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <HAL_DSI_SetGenericVCID+0x16>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	e019      	b.n	8006cb6 <HAL_DSI_SetGenericVCID+0x4a>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 1203 	bic.w	r2, r2, #196611	@ 0x30003
 8006c96:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	7e1b      	ldrb	r3, [r3, #24]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e0c5      	b.n	8006e64 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f042 0201 	orr.w	r2, r2, #1
 8006cec:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0201 	bic.w	r2, r2, #1
 8006cfe:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f042 0201 	orr.w	r2, r2, #1
 8006d12:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0203 	bic.w	r2, r2, #3
 8006d24:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68d9      	ldr	r1, [r3, #12]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	695a      	ldr	r2, [r3, #20]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0207 	bic.w	r2, r2, #7
 8006d46:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6959      	ldr	r1, [r3, #20]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	69da      	ldr	r2, [r3, #28]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	431a      	orrs	r2, r3
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 020f 	bic.w	r2, r2, #15
 8006d74:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6919      	ldr	r1, [r3, #16]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 020e 	bic.w	r2, r2, #14
 8006d98:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	005a      	lsls	r2, r3, #1
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	6812      	ldr	r2, [r2, #0]
 8006dbe:	0c1b      	lsrs	r3, r3, #16
 8006dc0:	041b      	lsls	r3, r3, #16
 8006dc2:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	689a      	ldr	r2, [r3, #8]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006de6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e00:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006e06:	431a      	orrs	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 0201 	bic.w	r2, r2, #1
 8006e20:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f042 0201 	orr.w	r2, r2, #1
 8006e44:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0202 	orr.w	r2, r2, #2
 8006e58:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	7e1b      	ldrb	r3, [r3, #24]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d101      	bne.n	8006e86 <HAL_DSI_ConfigCommand+0x16>
 8006e82:	2302      	movs	r3, #2
 8006e84:	e049      	b.n	8006f1a <HAL_DSI_ConfigCommand+0xaa>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	4b24      	ldr	r3, [pc, #144]	@ (8006f28 <HAL_DSI_ConfigCommand+0xb8>)
 8006e98:	400b      	ands	r3, r1
 8006e9a:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006eaa:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8006eb0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8006eb6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8006ebc:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8006ec2:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8006ec8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8006ece:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8006ed4:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8006eda:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8006ee0:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8006ee6:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	430a      	orrs	r2, r1
 8006eee:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 0202 	bic.w	r2, r2, #2
 8006efe:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	fef080ff 	.word	0xfef080ff

08006f2c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	7e1b      	ldrb	r3, [r3, #24]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d101      	bne.n	8006f42 <HAL_DSI_ConfigFlowControl+0x16>
 8006f3e:	2302      	movs	r3, #2
 8006f40:	e016      	b.n	8006f70 <HAL_DSI_ConfigFlowControl+0x44>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8006f56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	7e1b      	ldrb	r3, [r3, #24]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d101      	bne.n	8006f92 <HAL_DSI_ConfigPhyTimer+0x16>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e084      	b.n	800709c <HAL_DSI_ConfigPhyTimer+0x120>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	441a      	add	r2, r3
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	6859      	ldr	r1, [r3, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	695a      	ldr	r2, [r3, #20]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	4413      	add	r3, r2
 8006fb4:	18ca      	adds	r2, r1, r3
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	68da      	ldr	r2, [r3, #12]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	441a      	add	r2, r3
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	bf38      	it	cc
 8006fd6:	4613      	movcc	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8006fea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	041a      	lsls	r2, r3, #16
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8007018:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	041b      	lsls	r3, r3, #16
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	6812      	ldr	r2, [r2, #0]
 8007046:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800704a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800704e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	691a      	ldr	r2, [r3, #16]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8007078:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	021a      	lsls	r2, r3, #8
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	7e1b      	ldrb	r3, [r3, #24]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d101      	bne.n	80070be <HAL_DSI_ConfigHostTimeouts+0x16>
 80070ba:	2302      	movs	r3, #2
 80070bc:	e0b4      	b.n	8007228 <HAL_DSI_ConfigHostTimeouts+0x180>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689a      	ldr	r2, [r3, #8]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80070d2:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6899      	ldr	r1, [r3, #8]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	021a      	lsls	r2, r3, #8
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	b292      	uxth	r2, r2
 80070f4:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	041a      	lsls	r2, r3, #16
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6812      	ldr	r2, [r2, #0]
 8007114:	0c1b      	lsrs	r3, r3, #16
 8007116:	041b      	lsls	r3, r3, #16
 8007118:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	6812      	ldr	r2, [r2, #0]
 8007136:	0c1b      	lsrs	r3, r3, #16
 8007138:	041b      	lsls	r3, r3, #16
 800713a:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	68da      	ldr	r2, [r3, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6812      	ldr	r2, [r2, #0]
 800715a:	0c1b      	lsrs	r3, r3, #16
 800715c:	041b      	lsls	r3, r3, #16
 800715e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	691a      	ldr	r2, [r3, #16]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	6812      	ldr	r2, [r2, #0]
 8007184:	0c1b      	lsrs	r3, r3, #16
 8007186:	041b      	lsls	r3, r3, #16
 8007188:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	695a      	ldr	r2, [r3, #20]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80071b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	6812      	ldr	r2, [r2, #0]
 80071d8:	0c1b      	lsrs	r3, r3, #16
 80071da:	041b      	lsls	r3, r3, #16
 80071dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	69da      	ldr	r2, [r3, #28]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	430a      	orrs	r2, r1
 80071f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	6812      	ldr	r2, [r2, #0]
 8007202:	0c1b      	lsrs	r3, r3, #16
 8007204:	041b      	lsls	r3, r3, #16
 8007206:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	6a1a      	ldr	r2, [r3, #32]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	7e1b      	ldrb	r3, [r3, #24]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <HAL_DSI_Start+0x14>
 8007244:	2302      	movs	r3, #2
 8007246:	e02b      	b.n	80072a0 <HAL_DSI_Start+0x6c>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	761a      	strb	r2, [r3, #24]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f042 0201 	orr.w	r2, r2, #1
 8007260:	605a      	str	r2, [r3, #4]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	60fb      	str	r3, [r7, #12]
 800726e:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8007270:	2300      	movs	r3, #0
 8007272:	60bb      	str	r3, [r7, #8]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f042 0208 	orr.w	r2, r2, #8
 8007284:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007290:	f003 0308 	and.w	r3, r3, #8
 8007294:	60bb      	str	r3, [r7, #8]
 8007296:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_DSI_Refresh>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	7e1b      	ldrb	r3, [r3, #24]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d101      	bne.n	80072c0 <HAL_DSI_Refresh+0x14>
 80072bc:	2302      	movs	r3, #2
 80072be:	e010      	b.n	80072e2 <HAL_DSI_Refresh+0x36>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	761a      	strb	r2, [r3, #24]

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 0204 	orr.w	r2, r2, #4
 80072d6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b088      	sub	sp, #32
 80072f2:	af02      	add	r7, sp, #8
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	607a      	str	r2, [r7, #4]
 80072fa:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	7e1b      	ldrb	r3, [r3, #24]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_DSI_ShortWrite+0x1a>
 8007304:	2302      	movs	r3, #2
 8007306:	e010      	b.n	800732a <HAL_DSI_ShortWrite+0x3c>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	761a      	strb	r2, [r3, #24]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	68b9      	ldr	r1, [r7, #8]
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f7ff f87a 	bl	8006412 <DSI_ShortWrite>
 800731e:	4603      	mov	r3, r0
 8007320:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	761a      	strb	r2, [r3, #24]

  return status;
 8007328:	7dfb      	ldrb	r3, [r7, #23]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007334:	b480      	push	{r7}
 8007336:	b089      	sub	sp, #36	@ 0x24
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007346:	e1ba      	b.n	80076be <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	2101      	movs	r1, #1
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	fa01 f303 	lsl.w	r3, r1, r3
 8007354:	4013      	ands	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 81aa 	beq.w	80076b8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a55      	ldr	r2, [pc, #340]	@ (80074bc <HAL_GPIO_Init+0x188>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d15d      	bne.n	8007428 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8007372:	2201      	movs	r2, #1
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	fa02 f303 	lsl.w	r3, r2, r3
 800737a:	43db      	mvns	r3, r3
 800737c:	69fa      	ldr	r2, [r7, #28]
 800737e:	4013      	ands	r3, r2
 8007380:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f003 0201 	and.w	r2, r3, #1
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	69fa      	ldr	r2, [r7, #28]
 8007392:	4313      	orrs	r3, r2
 8007394:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69fa      	ldr	r2, [r7, #28]
 800739a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800739c:	4a48      	ldr	r2, [pc, #288]	@ (80074c0 <HAL_GPIO_Init+0x18c>)
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80073a4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80073a6:	4a46      	ldr	r2, [pc, #280]	@ (80074c0 <HAL_GPIO_Init+0x18c>)
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	00db      	lsls	r3, r3, #3
 80073ac:	4413      	add	r3, r2
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	08da      	lsrs	r2, r3, #3
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	3208      	adds	r2, #8
 80073ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073be:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	220f      	movs	r2, #15
 80073ca:	fa02 f303 	lsl.w	r3, r2, r3
 80073ce:	43db      	mvns	r3, r3
 80073d0:	69fa      	ldr	r2, [r7, #28]
 80073d2:	4013      	ands	r3, r2
 80073d4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	f003 0307 	and.w	r3, r3, #7
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	220b      	movs	r2, #11
 80073e0:	fa02 f303 	lsl.w	r3, r2, r3
 80073e4:	69fa      	ldr	r2, [r7, #28]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	08da      	lsrs	r2, r3, #3
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	3208      	adds	r2, #8
 80073f2:	69f9      	ldr	r1, [r7, #28]
 80073f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	2203      	movs	r2, #3
 8007404:	fa02 f303 	lsl.w	r3, r2, r3
 8007408:	43db      	mvns	r3, r3
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	4013      	ands	r3, r2
 800740e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	2202      	movs	r2, #2
 8007416:	fa02 f303 	lsl.w	r3, r2, r3
 800741a:	69fa      	ldr	r2, [r7, #28]
 800741c:	4313      	orrs	r3, r2
 800741e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	e067      	b.n	80074f8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	2b02      	cmp	r3, #2
 800742e:	d003      	beq.n	8007438 <HAL_GPIO_Init+0x104>
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	2b12      	cmp	r3, #18
 8007436:	d145      	bne.n	80074c4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	08da      	lsrs	r2, r3, #3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	3208      	adds	r2, #8
 8007440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007444:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f003 0307 	and.w	r3, r3, #7
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	220f      	movs	r2, #15
 8007450:	fa02 f303 	lsl.w	r3, r2, r3
 8007454:	43db      	mvns	r3, r3
 8007456:	69fa      	ldr	r2, [r7, #28]
 8007458:	4013      	ands	r3, r2
 800745a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	f003 020f 	and.w	r2, r3, #15
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f003 0307 	and.w	r3, r3, #7
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	fa02 f303 	lsl.w	r3, r2, r3
 8007470:	69fa      	ldr	r2, [r7, #28]
 8007472:	4313      	orrs	r3, r2
 8007474:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	08da      	lsrs	r2, r3, #3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3208      	adds	r2, #8
 800747e:	69f9      	ldr	r1, [r7, #28]
 8007480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	005b      	lsls	r3, r3, #1
 800748e:	2203      	movs	r2, #3
 8007490:	fa02 f303 	lsl.w	r3, r2, r3
 8007494:	43db      	mvns	r3, r3
 8007496:	69fa      	ldr	r2, [r7, #28]
 8007498:	4013      	ands	r3, r2
 800749a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f003 0203 	and.w	r2, r3, #3
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	fa02 f303 	lsl.w	r3, r2, r3
 80074ac:	69fa      	ldr	r2, [r7, #28]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	e01e      	b.n	80074f8 <HAL_GPIO_Init+0x1c4>
 80074ba:	bf00      	nop
 80074bc:	46020000 	.word	0x46020000
 80074c0:	0800dec0 	.word	0x0800dec0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	2203      	movs	r2, #3
 80074d0:	fa02 f303 	lsl.w	r3, r2, r3
 80074d4:	43db      	mvns	r3, r3
 80074d6:	69fa      	ldr	r2, [r7, #28]
 80074d8:	4013      	ands	r3, r2
 80074da:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f003 0203 	and.w	r2, r3, #3
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	005b      	lsls	r3, r3, #1
 80074e8:	fa02 f303 	lsl.w	r3, r2, r3
 80074ec:	69fa      	ldr	r2, [r7, #28]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	69fa      	ldr	r2, [r7, #28]
 80074f6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d00b      	beq.n	8007518 <HAL_GPIO_Init+0x1e4>
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	2b02      	cmp	r3, #2
 8007506:	d007      	beq.n	8007518 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800750c:	2b11      	cmp	r3, #17
 800750e:	d003      	beq.n	8007518 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	2b12      	cmp	r3, #18
 8007516:	d130      	bne.n	800757a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	2203      	movs	r2, #3
 8007524:	fa02 f303 	lsl.w	r3, r2, r3
 8007528:	43db      	mvns	r3, r3
 800752a:	69fa      	ldr	r2, [r7, #28]
 800752c:	4013      	ands	r3, r2
 800752e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	68da      	ldr	r2, [r3, #12]
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	fa02 f303 	lsl.w	r3, r2, r3
 800753c:	69fa      	ldr	r2, [r7, #28]
 800753e:	4313      	orrs	r3, r2
 8007540:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	69fa      	ldr	r2, [r7, #28]
 8007546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800754e:	2201      	movs	r2, #1
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	fa02 f303 	lsl.w	r3, r2, r3
 8007556:	43db      	mvns	r3, r3
 8007558:	69fa      	ldr	r2, [r7, #28]
 800755a:	4013      	ands	r3, r2
 800755c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	091b      	lsrs	r3, r3, #4
 8007564:	f003 0201 	and.w	r2, r3, #1
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	fa02 f303 	lsl.w	r3, r2, r3
 800756e:	69fa      	ldr	r2, [r7, #28]
 8007570:	4313      	orrs	r3, r2
 8007572:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	69fa      	ldr	r2, [r7, #28]
 8007578:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	2b03      	cmp	r3, #3
 8007580:	d017      	beq.n	80075b2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	2203      	movs	r2, #3
 800758e:	fa02 f303 	lsl.w	r3, r2, r3
 8007592:	43db      	mvns	r3, r3
 8007594:	69fa      	ldr	r2, [r7, #28]
 8007596:	4013      	ands	r3, r2
 8007598:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	689a      	ldr	r2, [r3, #8]
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	fa02 f303 	lsl.w	r3, r2, r3
 80075a6:	69fa      	ldr	r2, [r7, #28]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d07c      	beq.n	80076b8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80075be:	4a47      	ldr	r2, [pc, #284]	@ (80076dc <HAL_GPIO_Init+0x3a8>)
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	089b      	lsrs	r3, r3, #2
 80075c4:	3318      	adds	r3, #24
 80075c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f003 0303 	and.w	r3, r3, #3
 80075d2:	00db      	lsls	r3, r3, #3
 80075d4:	220f      	movs	r2, #15
 80075d6:	fa02 f303 	lsl.w	r3, r2, r3
 80075da:	43db      	mvns	r3, r3
 80075dc:	69fa      	ldr	r2, [r7, #28]
 80075de:	4013      	ands	r3, r2
 80075e0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	0a9a      	lsrs	r2, r3, #10
 80075e6:	4b3e      	ldr	r3, [pc, #248]	@ (80076e0 <HAL_GPIO_Init+0x3ac>)
 80075e8:	4013      	ands	r3, r2
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	f002 0203 	and.w	r2, r2, #3
 80075f0:	00d2      	lsls	r2, r2, #3
 80075f2:	4093      	lsls	r3, r2
 80075f4:	69fa      	ldr	r2, [r7, #28]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80075fa:	4938      	ldr	r1, [pc, #224]	@ (80076dc <HAL_GPIO_Init+0x3a8>)
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	089b      	lsrs	r3, r3, #2
 8007600:	3318      	adds	r3, #24
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007608:	4b34      	ldr	r3, [pc, #208]	@ (80076dc <HAL_GPIO_Init+0x3a8>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	43db      	mvns	r3, r3
 8007612:	69fa      	ldr	r2, [r7, #28]
 8007614:	4013      	ands	r3, r2
 8007616:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d003      	beq.n	800762c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4313      	orrs	r3, r2
 800762a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800762c:	4a2b      	ldr	r2, [pc, #172]	@ (80076dc <HAL_GPIO_Init+0x3a8>)
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007632:	4b2a      	ldr	r3, [pc, #168]	@ (80076dc <HAL_GPIO_Init+0x3a8>)
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	43db      	mvns	r3, r3
 800763c:	69fa      	ldr	r2, [r7, #28]
 800763e:	4013      	ands	r3, r2
 8007640:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800764e:	69fa      	ldr	r2, [r7, #28]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4313      	orrs	r3, r2
 8007654:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007656:	4a21      	ldr	r2, [pc, #132]	@ (80076dc <HAL_GPIO_Init+0x3a8>)
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800765c:	4b1f      	ldr	r3, [pc, #124]	@ (80076dc <HAL_GPIO_Init+0x3a8>)
 800765e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007662:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	43db      	mvns	r3, r3
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	4013      	ands	r3, r2
 800766c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800767a:	69fa      	ldr	r2, [r7, #28]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4313      	orrs	r3, r2
 8007680:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007682:	4a16      	ldr	r2, [pc, #88]	@ (80076dc <HAL_GPIO_Init+0x3a8>)
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800768a:	4b14      	ldr	r3, [pc, #80]	@ (80076dc <HAL_GPIO_Init+0x3a8>)
 800768c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007690:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	43db      	mvns	r3, r3
 8007696:	69fa      	ldr	r2, [r7, #28]
 8007698:	4013      	ands	r3, r2
 800769a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80076a8:	69fa      	ldr	r2, [r7, #28]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80076b0:	4a0a      	ldr	r2, [pc, #40]	@ (80076dc <HAL_GPIO_Init+0x3a8>)
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	3301      	adds	r3, #1
 80076bc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	fa22 f303 	lsr.w	r3, r2, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f47f ae3d 	bne.w	8007348 <HAL_GPIO_Init+0x14>
  }
}
 80076ce:	bf00      	nop
 80076d0:	bf00      	nop
 80076d2:	3724      	adds	r7, #36	@ 0x24
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	46022000 	.word	0x46022000
 80076e0:	002f7f7f 	.word	0x002f7f7f

080076e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	691a      	ldr	r2, [r3, #16]
 80076f4:	887b      	ldrh	r3, [r7, #2]
 80076f6:	4013      	ands	r3, r2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80076fc:	2301      	movs	r3, #1
 80076fe:	73fb      	strb	r3, [r7, #15]
 8007700:	e001      	b.n	8007706 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8007706:	7bfb      	ldrb	r3, [r7, #15]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	807b      	strh	r3, [r7, #2]
 8007720:	4613      	mov	r3, r2
 8007722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007724:	787b      	ldrb	r3, [r7, #1]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800772a:	887a      	ldrh	r2, [r7, #2]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8007730:	e002      	b.n	8007738 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8007732:	887a      	ldrh	r2, [r7, #2]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e08d      	b.n	8007872 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d106      	bne.n	8007770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fa fa00 	bl	8001b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2224      	movs	r2, #36	@ 0x24
 8007774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f022 0201 	bic.w	r2, r2, #1
 8007786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007794:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689a      	ldr	r2, [r3, #8]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d107      	bne.n	80077be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077ba:	609a      	str	r2, [r3, #8]
 80077bc:	e006      	b.n	80077cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80077ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d108      	bne.n	80077e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077e2:	605a      	str	r2, [r3, #4]
 80077e4:	e007      	b.n	80077f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	6812      	ldr	r2, [r2, #0]
 8007800:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007804:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007808:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007818:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	691a      	ldr	r2, [r3, #16]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	69d9      	ldr	r1, [r3, #28]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a1a      	ldr	r2, [r3, #32]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f042 0201 	orr.w	r2, r2, #1
 8007852:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2220      	movs	r2, #32
 800785e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b20      	cmp	r3, #32
 800788e:	d138      	bne.n	8007902 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800789a:	2302      	movs	r3, #2
 800789c:	e032      	b.n	8007904 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2224      	movs	r2, #36	@ 0x24
 80078aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f022 0201 	bic.w	r2, r2, #1
 80078bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80078cc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6819      	ldr	r1, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f042 0201 	orr.w	r2, r2, #1
 80078ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2220      	movs	r2, #32
 80078f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	e000      	b.n	8007904 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007902:	2302      	movs	r3, #2
  }
}
 8007904:	4618      	mov	r0, r3
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b20      	cmp	r3, #32
 8007924:	d139      	bne.n	800799a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800792c:	2b01      	cmp	r3, #1
 800792e:	d101      	bne.n	8007934 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007930:	2302      	movs	r3, #2
 8007932:	e033      	b.n	800799c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2224      	movs	r2, #36	@ 0x24
 8007940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f022 0201 	bic.w	r2, r2, #1
 8007952:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007962:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	021b      	lsls	r3, r3, #8
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	4313      	orrs	r3, r2
 800796c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0201 	orr.w	r2, r2, #1
 8007984:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2220      	movs	r2, #32
 800798a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	e000      	b.n	800799c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800799a:	2302      	movs	r3, #2
  }
}
 800799c:	4618      	mov	r0, r3
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80079a8:	b480      	push	{r7}
 80079aa:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80079ac:	4b05      	ldr	r3, [pc, #20]	@ (80079c4 <HAL_ICACHE_Enable+0x1c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a04      	ldr	r2, [pc, #16]	@ (80079c4 <HAL_ICACHE_Enable+0x1c>)
 80079b2:	f043 0301 	orr.w	r3, r3, #1
 80079b6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	40030400 	.word	0x40030400

080079c8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e0bf      	b.n	8007b5a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d106      	bne.n	80079f4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7fa f938 	bl	8001c64 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2202      	movs	r2, #2
 80079f8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	699a      	ldr	r2, [r3, #24]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007a0a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6999      	ldr	r1, [r3, #24]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007a20:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6899      	ldr	r1, [r3, #8]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8007b64 <HAL_LTDC_Init+0x19c>)
 8007a3c:	400b      	ands	r3, r1
 8007a3e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	041b      	lsls	r3, r3, #16
 8007a46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6899      	ldr	r1, [r3, #8]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	699a      	ldr	r2, [r3, #24]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	431a      	orrs	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68d9      	ldr	r1, [r3, #12]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	4b3e      	ldr	r3, [pc, #248]	@ (8007b64 <HAL_LTDC_Init+0x19c>)
 8007a6a:	400b      	ands	r3, r1
 8007a6c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	041b      	lsls	r3, r3, #16
 8007a74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68d9      	ldr	r1, [r3, #12]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a1a      	ldr	r2, [r3, #32]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	431a      	orrs	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6919      	ldr	r1, [r3, #16]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	4b33      	ldr	r3, [pc, #204]	@ (8007b64 <HAL_LTDC_Init+0x19c>)
 8007a98:	400b      	ands	r3, r1
 8007a9a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa0:	041b      	lsls	r3, r3, #16
 8007aa2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6919      	ldr	r1, [r3, #16]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	431a      	orrs	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6959      	ldr	r1, [r3, #20]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	4b27      	ldr	r3, [pc, #156]	@ (8007b64 <HAL_LTDC_Init+0x19c>)
 8007ac6:	400b      	ands	r3, r1
 8007ac8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ace:	041b      	lsls	r3, r3, #16
 8007ad0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6959      	ldr	r1, [r3, #20]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007aee:	021b      	lsls	r3, r3, #8
 8007af0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007af8:	041b      	lsls	r3, r3, #16
 8007afa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f042 0206 	orr.w	r2, r2, #6
 8007b36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	699a      	ldr	r2, [r3, #24]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0201 	orr.w	r2, r2, #1
 8007b46:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	f000f800 	.word	0xf000f800

08007b68 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b7e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f003 0304 	and.w	r3, r3, #4
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d023      	beq.n	8007bd2 <HAL_LTDC_IRQHandler+0x6a>
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	f003 0304 	and.w	r3, r3, #4
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d01e      	beq.n	8007bd2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 0204 	bic.w	r2, r2, #4
 8007ba2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2204      	movs	r2, #4
 8007baa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007bb2:	f043 0201 	orr.w	r2, r3, #1
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2204      	movs	r2, #4
 8007bc0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f86f 	bl	8007cb0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d023      	beq.n	8007c24 <HAL_LTDC_IRQHandler+0xbc>
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d01e      	beq.n	8007c24 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 0202 	bic.w	r2, r2, #2
 8007bf4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c04:	f043 0202 	orr.w	r2, r3, #2
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2204      	movs	r2, #4
 8007c12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f846 	bl	8007cb0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d01b      	beq.n	8007c66 <HAL_LTDC_IRQHandler+0xfe>
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d016      	beq.n	8007c66 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f022 0201 	bic.w	r2, r2, #1
 8007c46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f82f 	bl	8007cc4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f003 0308 	and.w	r3, r3, #8
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d01b      	beq.n	8007ca8 <HAL_LTDC_IRQHandler+0x140>
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	f003 0308 	and.w	r3, r3, #8
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d016      	beq.n	8007ca8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f022 0208 	bic.w	r2, r2, #8
 8007c88:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2208      	movs	r2, #8
 8007c90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f818 	bl	8007cd8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007cec:	b5b0      	push	{r4, r5, r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d101      	bne.n	8007d06 <HAL_LTDC_ConfigLayer+0x1a>
 8007d02:	2302      	movs	r3, #2
 8007d04:	e02c      	b.n	8007d60 <HAL_LTDC_ConfigLayer+0x74>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2202      	movs	r2, #2
 8007d12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2134      	movs	r1, #52	@ 0x34
 8007d1c:	fb01 f303 	mul.w	r3, r1, r3
 8007d20:	4413      	add	r3, r2
 8007d22:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	4614      	mov	r4, r2
 8007d2a:	461d      	mov	r5, r3
 8007d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	68b9      	ldr	r1, [r7, #8]
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 f811 	bl	8007d68 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bdb0      	pop	{r4, r5, r7, pc}

08007d68 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b089      	sub	sp, #36	@ 0x24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	0c1b      	lsrs	r3, r3, #16
 8007d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d84:	4413      	add	r3, r2
 8007d86:	041b      	lsls	r3, r3, #16
 8007d88:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	01db      	lsls	r3, r3, #7
 8007d94:	4413      	add	r3, r2
 8007d96:	3384      	adds	r3, #132	@ 0x84
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	6812      	ldr	r2, [r2, #0]
 8007d9e:	4611      	mov	r1, r2
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	01d2      	lsls	r2, r2, #7
 8007da4:	440a      	add	r2, r1
 8007da6:	3284      	adds	r2, #132	@ 0x84
 8007da8:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8007dac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	0c1b      	lsrs	r3, r3, #16
 8007dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007dbe:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007dc0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	01db      	lsls	r3, r3, #7
 8007dcc:	440b      	add	r3, r1
 8007dce:	3384      	adds	r3, #132	@ 0x84
 8007dd0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007dd6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007de6:	4413      	add	r3, r2
 8007de8:	041b      	lsls	r3, r3, #16
 8007dea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	461a      	mov	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	01db      	lsls	r3, r3, #7
 8007df6:	4413      	add	r3, r2
 8007df8:	3384      	adds	r3, #132	@ 0x84
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	6812      	ldr	r2, [r2, #0]
 8007e00:	4611      	mov	r1, r2
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	01d2      	lsls	r2, r2, #7
 8007e06:	440a      	add	r2, r1
 8007e08:	3284      	adds	r2, #132	@ 0x84
 8007e0a:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8007e0e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e1e:	4413      	add	r3, r2
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4619      	mov	r1, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	01db      	lsls	r3, r3, #7
 8007e2c:	440b      	add	r3, r1
 8007e2e:	3384      	adds	r3, #132	@ 0x84
 8007e30:	4619      	mov	r1, r3
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	01db      	lsls	r3, r3, #7
 8007e42:	4413      	add	r3, r2
 8007e44:	3384      	adds	r3, #132	@ 0x84
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	6812      	ldr	r2, [r2, #0]
 8007e4c:	4611      	mov	r1, r2
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	01d2      	lsls	r2, r2, #7
 8007e52:	440a      	add	r2, r1
 8007e54:	3284      	adds	r2, #132	@ 0x84
 8007e56:	f023 0307 	bic.w	r3, r3, #7
 8007e5a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	461a      	mov	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	01db      	lsls	r3, r3, #7
 8007e66:	4413      	add	r3, r2
 8007e68:	3384      	adds	r3, #132	@ 0x84
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007e78:	021b      	lsls	r3, r3, #8
 8007e7a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007e82:	041b      	lsls	r3, r3, #16
 8007e84:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	061b      	lsls	r3, r3, #24
 8007e8c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e94:	461a      	mov	r2, r3
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	01db      	lsls	r3, r3, #7
 8007ea8:	440b      	add	r3, r1
 8007eaa:	3384      	adds	r3, #132	@ 0x84
 8007eac:	4619      	mov	r1, r3
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	01db      	lsls	r3, r3, #7
 8007ebe:	4413      	add	r3, r2
 8007ec0:	3384      	adds	r3, #132	@ 0x84
 8007ec2:	695b      	ldr	r3, [r3, #20]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	6812      	ldr	r2, [r2, #0]
 8007ec8:	4611      	mov	r1, r2
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	01d2      	lsls	r2, r2, #7
 8007ece:	440a      	add	r2, r1
 8007ed0:	3284      	adds	r2, #132	@ 0x84
 8007ed2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007ed6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	461a      	mov	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	01db      	lsls	r3, r3, #7
 8007ee2:	4413      	add	r3, r2
 8007ee4:	3384      	adds	r3, #132	@ 0x84
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	01db      	lsls	r3, r3, #7
 8007ef8:	4413      	add	r3, r2
 8007efa:	3384      	adds	r3, #132	@ 0x84
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	6812      	ldr	r2, [r2, #0]
 8007f02:	4611      	mov	r1, r2
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	01d2      	lsls	r2, r2, #7
 8007f08:	440a      	add	r2, r1
 8007f0a:	3284      	adds	r2, #132	@ 0x84
 8007f0c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007f10:	f023 0307 	bic.w	r3, r3, #7
 8007f14:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	69da      	ldr	r2, [r3, #28]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	68f9      	ldr	r1, [r7, #12]
 8007f20:	6809      	ldr	r1, [r1, #0]
 8007f22:	4608      	mov	r0, r1
 8007f24:	6879      	ldr	r1, [r7, #4]
 8007f26:	01c9      	lsls	r1, r1, #7
 8007f28:	4401      	add	r1, r0
 8007f2a:	3184      	adds	r1, #132	@ 0x84
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	461a      	mov	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	01db      	lsls	r3, r3, #7
 8007f3a:	4413      	add	r3, r2
 8007f3c:	3384      	adds	r3, #132	@ 0x84
 8007f3e:	461a      	mov	r2, r3
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f44:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d102      	bne.n	8007f54 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8007f4e:	2304      	movs	r3, #4
 8007f50:	61fb      	str	r3, [r7, #28]
 8007f52:	e01b      	b.n	8007f8c <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d102      	bne.n	8007f62 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	61fb      	str	r3, [r7, #28]
 8007f60:	e014      	b.n	8007f8c <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	2b04      	cmp	r3, #4
 8007f68:	d00b      	beq.n	8007f82 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d007      	beq.n	8007f82 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	d003      	beq.n	8007f82 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007f7e:	2b07      	cmp	r3, #7
 8007f80:	d102      	bne.n	8007f88 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8007f82:	2302      	movs	r3, #2
 8007f84:	61fb      	str	r3, [r7, #28]
 8007f86:	e001      	b.n	8007f8c <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	461a      	mov	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	01db      	lsls	r3, r3, #7
 8007f96:	4413      	add	r3, r2
 8007f98:	3384      	adds	r3, #132	@ 0x84
 8007f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	6812      	ldr	r2, [r2, #0]
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	01d2      	lsls	r2, r2, #7
 8007fa6:	440a      	add	r2, r1
 8007fa8:	3284      	adds	r2, #132	@ 0x84
 8007faa:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007fae:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb4:	69fa      	ldr	r2, [r7, #28]
 8007fb6:	fb02 f303 	mul.w	r3, r2, r3
 8007fba:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	6859      	ldr	r1, [r3, #4]
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	1acb      	subs	r3, r1, r3
 8007fc6:	69f9      	ldr	r1, [r7, #28]
 8007fc8:	fb01 f303 	mul.w	r3, r1, r3
 8007fcc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007fce:	68f9      	ldr	r1, [r7, #12]
 8007fd0:	6809      	ldr	r1, [r1, #0]
 8007fd2:	4608      	mov	r0, r1
 8007fd4:	6879      	ldr	r1, [r7, #4]
 8007fd6:	01c9      	lsls	r1, r1, #7
 8007fd8:	4401      	add	r1, r0
 8007fda:	3184      	adds	r1, #132	@ 0x84
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	01db      	lsls	r3, r3, #7
 8007fea:	4413      	add	r3, r2
 8007fec:	3384      	adds	r3, #132	@ 0x84
 8007fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	6812      	ldr	r2, [r2, #0]
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	01d2      	lsls	r2, r2, #7
 8007ffa:	440a      	add	r2, r1
 8007ffc:	3284      	adds	r2, #132	@ 0x84
 8007ffe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008002:	f023 0307 	bic.w	r3, r3, #7
 8008006:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	461a      	mov	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	01db      	lsls	r3, r3, #7
 8008012:	4413      	add	r3, r2
 8008014:	3384      	adds	r3, #132	@ 0x84
 8008016:	461a      	mov	r2, r3
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	01db      	lsls	r3, r3, #7
 8008028:	4413      	add	r3, r2
 800802a:	3384      	adds	r3, #132	@ 0x84
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	6812      	ldr	r2, [r2, #0]
 8008032:	4611      	mov	r1, r2
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	01d2      	lsls	r2, r2, #7
 8008038:	440a      	add	r2, r1
 800803a:	3284      	adds	r2, #132	@ 0x84
 800803c:	f043 0301 	orr.w	r3, r3, #1
 8008040:	6013      	str	r3, [r2, #0]
}
 8008042:	bf00      	nop
 8008044:	3724      	adds	r7, #36	@ 0x24
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
	...

08008050 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008050:	b480      	push	{r7}
 8008052:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008054:	4b05      	ldr	r3, [pc, #20]	@ (800806c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008058:	4a04      	ldr	r2, [pc, #16]	@ (800806c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800805a:	f043 0301 	orr.w	r3, r3, #1
 800805e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8008060:	bf00      	nop
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	46020800 	.word	0x46020800

08008070 <HAL_PWR_DisableBkUpAccess>:
  *         register RCC_BDCR, RTC registers, TAMP registers, backup registers
  *         and backup SRAM).
  * @retval None.
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8008070:	b480      	push	{r7}
 8008072:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008074:	4b05      	ldr	r3, [pc, #20]	@ (800808c <HAL_PWR_DisableBkUpAccess+0x1c>)
 8008076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008078:	4a04      	ldr	r2, [pc, #16]	@ (800808c <HAL_PWR_DisableBkUpAccess+0x1c>)
 800807a:	f023 0301 	bic.w	r3, r3, #1
 800807e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8008080:	bf00      	nop
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	46020800 	.word	0x46020800

08008090 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8008098:	4b39      	ldr	r3, [pc, #228]	@ (8008180 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800809a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800809c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80080a0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d10b      	bne.n	80080c2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080b0:	d905      	bls.n	80080be <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80080b2:	4b33      	ldr	r3, [pc, #204]	@ (8008180 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	4a32      	ldr	r2, [pc, #200]	@ (8008180 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80080b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80080bc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	e057      	b.n	8008172 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080c8:	d90a      	bls.n	80080e0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80080ca:	4b2d      	ldr	r3, [pc, #180]	@ (8008180 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008180 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80080d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80080dc:	60d3      	str	r3, [r2, #12]
 80080de:	e007      	b.n	80080f0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80080e0:	4b27      	ldr	r3, [pc, #156]	@ (8008180 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80080e8:	4925      	ldr	r1, [pc, #148]	@ (8008180 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80080f0:	4b24      	ldr	r3, [pc, #144]	@ (8008184 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a24      	ldr	r2, [pc, #144]	@ (8008188 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80080f6:	fba2 2303 	umull	r2, r3, r2, r3
 80080fa:	099b      	lsrs	r3, r3, #6
 80080fc:	2232      	movs	r2, #50	@ 0x32
 80080fe:	fb02 f303 	mul.w	r3, r2, r3
 8008102:	4a21      	ldr	r2, [pc, #132]	@ (8008188 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008104:	fba2 2303 	umull	r2, r3, r2, r3
 8008108:	099b      	lsrs	r3, r3, #6
 800810a:	3301      	adds	r3, #1
 800810c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800810e:	e002      	b.n	8008116 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	3b01      	subs	r3, #1
 8008114:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8008116:	4b1a      	ldr	r3, [pc, #104]	@ (8008180 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d102      	bne.n	8008128 <HAL_PWREx_ControlVoltageScaling+0x98>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1f3      	bne.n	8008110 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d01b      	beq.n	8008166 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800812e:	4b15      	ldr	r3, [pc, #84]	@ (8008184 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a15      	ldr	r2, [pc, #84]	@ (8008188 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008134:	fba2 2303 	umull	r2, r3, r2, r3
 8008138:	099b      	lsrs	r3, r3, #6
 800813a:	2232      	movs	r2, #50	@ 0x32
 800813c:	fb02 f303 	mul.w	r3, r2, r3
 8008140:	4a11      	ldr	r2, [pc, #68]	@ (8008188 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008142:	fba2 2303 	umull	r2, r3, r2, r3
 8008146:	099b      	lsrs	r3, r3, #6
 8008148:	3301      	adds	r3, #1
 800814a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800814c:	e002      	b.n	8008154 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3b01      	subs	r3, #1
 8008152:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008154:	4b0a      	ldr	r3, [pc, #40]	@ (8008180 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d102      	bne.n	8008166 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1f3      	bne.n	800814e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800816c:	2303      	movs	r3, #3
 800816e:	e000      	b.n	8008172 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	46020800 	.word	0x46020800
 8008184:	20000000 	.word	0x20000000
 8008188:	10624dd3 	.word	0x10624dd3

0800818c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8008190:	4b04      	ldr	r3, [pc, #16]	@ (80081a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8008192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008194:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8008198:	4618      	mov	r0, r3
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	46020800 	.word	0x46020800

080081a8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80081b0:	4b22      	ldr	r3, [pc, #136]	@ (800823c <HAL_PWREx_ConfigSupply+0x94>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a22      	ldr	r2, [pc, #136]	@ (8008240 <HAL_PWREx_ConfigSupply+0x98>)
 80081b6:	fba2 2303 	umull	r2, r3, r2, r3
 80081ba:	099b      	lsrs	r3, r3, #6
 80081bc:	2232      	movs	r2, #50	@ 0x32
 80081be:	fb02 f303 	mul.w	r3, r2, r3
 80081c2:	4a1f      	ldr	r2, [pc, #124]	@ (8008240 <HAL_PWREx_ConfigSupply+0x98>)
 80081c4:	fba2 2303 	umull	r2, r3, r2, r3
 80081c8:	099b      	lsrs	r3, r3, #6
 80081ca:	3301      	adds	r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d113      	bne.n	80081fc <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80081d4:	4b1b      	ldr	r3, [pc, #108]	@ (8008244 <HAL_PWREx_ConfigSupply+0x9c>)
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	4a1a      	ldr	r2, [pc, #104]	@ (8008244 <HAL_PWREx_ConfigSupply+0x9c>)
 80081da:	f023 0302 	bic.w	r3, r3, #2
 80081de:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80081e0:	e002      	b.n	80081e8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80081e8:	4b16      	ldr	r3, [pc, #88]	@ (8008244 <HAL_PWREx_ConfigSupply+0x9c>)
 80081ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ec:	f003 0302 	and.w	r3, r3, #2
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d116      	bne.n	8008222 <HAL_PWREx_ConfigSupply+0x7a>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1f3      	bne.n	80081e2 <HAL_PWREx_ConfigSupply+0x3a>
 80081fa:	e012      	b.n	8008222 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80081fc:	4b11      	ldr	r3, [pc, #68]	@ (8008244 <HAL_PWREx_ConfigSupply+0x9c>)
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	4a10      	ldr	r2, [pc, #64]	@ (8008244 <HAL_PWREx_ConfigSupply+0x9c>)
 8008202:	f043 0302 	orr.w	r3, r3, #2
 8008206:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008208:	e002      	b.n	8008210 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	3b01      	subs	r3, #1
 800820e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008210:	4b0c      	ldr	r3, [pc, #48]	@ (8008244 <HAL_PWREx_ConfigSupply+0x9c>)
 8008212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008214:	f003 0302 	and.w	r3, r3, #2
 8008218:	2b00      	cmp	r3, #0
 800821a:	d102      	bne.n	8008222 <HAL_PWREx_ConfigSupply+0x7a>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1f3      	bne.n	800820a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e000      	b.n	800822e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	20000000 	.word	0x20000000
 8008240:	10624dd3 	.word	0x10624dd3
 8008244:	46020800 	.word	0x46020800

08008248 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008248:	b480      	push	{r7}
 800824a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800824c:	4b05      	ldr	r3, [pc, #20]	@ (8008264 <HAL_PWREx_EnableVddIO2+0x1c>)
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	4a04      	ldr	r2, [pc, #16]	@ (8008264 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008252:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008256:	6113      	str	r3, [r2, #16]
}
 8008258:	bf00      	nop
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	46020800 	.word	0x46020800

08008268 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8008268:	b480      	push	{r7}
 800826a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800826c:	4b05      	ldr	r3, [pc, #20]	@ (8008284 <HAL_PWREx_EnableVddA+0x1c>)
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	4a04      	ldr	r2, [pc, #16]	@ (8008284 <HAL_PWREx_EnableVddA+0x1c>)
 8008272:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008276:	6113      	str	r3, [r2, #16]
}
 8008278:	bf00      	nop
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	46020800 	.word	0x46020800

08008288 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08e      	sub	sp, #56	@ 0x38
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8008290:	2300      	movs	r3, #0
 8008292:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d102      	bne.n	80082a2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	f000 bec8 	b.w	8009032 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082a2:	4b99      	ldr	r3, [pc, #612]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	f003 030c 	and.w	r3, r3, #12
 80082aa:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082ac:	4b96      	ldr	r3, [pc, #600]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80082ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b0:	f003 0303 	and.w	r3, r3, #3
 80082b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0310 	and.w	r3, r3, #16
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f000 816c 	beq.w	800859c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80082c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d007      	beq.n	80082da <HAL_RCC_OscConfig+0x52>
 80082ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082cc:	2b0c      	cmp	r3, #12
 80082ce:	f040 80de 	bne.w	800848e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80082d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	f040 80da 	bne.w	800848e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d102      	bne.n	80082e8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	f000 bea5 	b.w	8009032 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082ec:	4b86      	ldr	r3, [pc, #536]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d004      	beq.n	8008302 <HAL_RCC_OscConfig+0x7a>
 80082f8:	4b83      	ldr	r3, [pc, #524]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008300:	e005      	b.n	800830e <HAL_RCC_OscConfig+0x86>
 8008302:	4b81      	ldr	r3, [pc, #516]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 8008304:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008308:	041b      	lsls	r3, r3, #16
 800830a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800830e:	4293      	cmp	r3, r2
 8008310:	d255      	bcs.n	80083be <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10a      	bne.n	800832e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800831c:	4618      	mov	r0, r3
 800831e:	f001 fa3d 	bl	800979c <RCC_SetFlashLatencyFromMSIRange>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	f000 be82 	b.w	8009032 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800832e:	4b76      	ldr	r3, [pc, #472]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	4a75      	ldr	r2, [pc, #468]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 8008334:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008338:	6093      	str	r3, [r2, #8]
 800833a:	4b73      	ldr	r3, [pc, #460]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008346:	4970      	ldr	r1, [pc, #448]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 8008348:	4313      	orrs	r3, r2
 800834a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008350:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008354:	d309      	bcc.n	800836a <HAL_RCC_OscConfig+0xe2>
 8008356:	4b6c      	ldr	r3, [pc, #432]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	f023 021f 	bic.w	r2, r3, #31
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	4969      	ldr	r1, [pc, #420]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 8008364:	4313      	orrs	r3, r2
 8008366:	60cb      	str	r3, [r1, #12]
 8008368:	e07e      	b.n	8008468 <HAL_RCC_OscConfig+0x1e0>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800836e:	2b00      	cmp	r3, #0
 8008370:	da0a      	bge.n	8008388 <HAL_RCC_OscConfig+0x100>
 8008372:	4b65      	ldr	r3, [pc, #404]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	015b      	lsls	r3, r3, #5
 8008380:	4961      	ldr	r1, [pc, #388]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 8008382:	4313      	orrs	r3, r2
 8008384:	60cb      	str	r3, [r1, #12]
 8008386:	e06f      	b.n	8008468 <HAL_RCC_OscConfig+0x1e0>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008390:	d30a      	bcc.n	80083a8 <HAL_RCC_OscConfig+0x120>
 8008392:	4b5d      	ldr	r3, [pc, #372]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	029b      	lsls	r3, r3, #10
 80083a0:	4959      	ldr	r1, [pc, #356]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	60cb      	str	r3, [r1, #12]
 80083a6:	e05f      	b.n	8008468 <HAL_RCC_OscConfig+0x1e0>
 80083a8:	4b57      	ldr	r3, [pc, #348]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a1b      	ldr	r3, [r3, #32]
 80083b4:	03db      	lsls	r3, r3, #15
 80083b6:	4954      	ldr	r1, [pc, #336]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80083b8:	4313      	orrs	r3, r2
 80083ba:	60cb      	str	r3, [r1, #12]
 80083bc:	e054      	b.n	8008468 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80083be:	4b52      	ldr	r3, [pc, #328]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	4a51      	ldr	r2, [pc, #324]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80083c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80083c8:	6093      	str	r3, [r2, #8]
 80083ca:	4b4f      	ldr	r3, [pc, #316]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d6:	494c      	ldr	r1, [pc, #304]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80083d8:	4313      	orrs	r3, r2
 80083da:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80083e4:	d309      	bcc.n	80083fa <HAL_RCC_OscConfig+0x172>
 80083e6:	4b48      	ldr	r3, [pc, #288]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	f023 021f 	bic.w	r2, r3, #31
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	4945      	ldr	r1, [pc, #276]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80083f4:	4313      	orrs	r3, r2
 80083f6:	60cb      	str	r3, [r1, #12]
 80083f8:	e028      	b.n	800844c <HAL_RCC_OscConfig+0x1c4>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083fe:	2b00      	cmp	r3, #0
 8008400:	da0a      	bge.n	8008418 <HAL_RCC_OscConfig+0x190>
 8008402:	4b41      	ldr	r3, [pc, #260]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	015b      	lsls	r3, r3, #5
 8008410:	493d      	ldr	r1, [pc, #244]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 8008412:	4313      	orrs	r3, r2
 8008414:	60cb      	str	r3, [r1, #12]
 8008416:	e019      	b.n	800844c <HAL_RCC_OscConfig+0x1c4>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008420:	d30a      	bcc.n	8008438 <HAL_RCC_OscConfig+0x1b0>
 8008422:	4b39      	ldr	r3, [pc, #228]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	029b      	lsls	r3, r3, #10
 8008430:	4935      	ldr	r1, [pc, #212]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 8008432:	4313      	orrs	r3, r2
 8008434:	60cb      	str	r3, [r1, #12]
 8008436:	e009      	b.n	800844c <HAL_RCC_OscConfig+0x1c4>
 8008438:	4b33      	ldr	r3, [pc, #204]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	03db      	lsls	r3, r3, #15
 8008446:	4930      	ldr	r1, [pc, #192]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 8008448:	4313      	orrs	r3, r2
 800844a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800844c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10a      	bne.n	8008468 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008456:	4618      	mov	r0, r3
 8008458:	f001 f9a0 	bl	800979c <RCC_SetFlashLatencyFromMSIRange>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d002      	beq.n	8008468 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	f000 bde5 	b.w	8009032 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8008468:	f001 f8de 	bl	8009628 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800846c:	4b27      	ldr	r3, [pc, #156]	@ (800850c <HAL_RCC_OscConfig+0x284>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4618      	mov	r0, r3
 8008472:	f7f9 fd11 	bl	8001e98 <HAL_InitTick>
 8008476:	4603      	mov	r3, r0
 8008478:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800847c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 808a 	beq.w	800859a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8008486:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800848a:	f000 bdd2 	b.w	8009032 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	69db      	ldr	r3, [r3, #28]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d066      	beq.n	8008564 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8008496:	4b1c      	ldr	r3, [pc, #112]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a1b      	ldr	r2, [pc, #108]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 800849c:	f043 0301 	orr.w	r3, r3, #1
 80084a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80084a2:	f7f9 fe7b 	bl	800219c <HAL_GetTick>
 80084a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80084a8:	e009      	b.n	80084be <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80084aa:	f7f9 fe77 	bl	800219c <HAL_GetTick>
 80084ae:	4602      	mov	r2, r0
 80084b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	d902      	bls.n	80084be <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80084b8:	2303      	movs	r3, #3
 80084ba:	f000 bdba 	b.w	8009032 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80084be:	4b12      	ldr	r3, [pc, #72]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0304 	and.w	r3, r3, #4
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d0ef      	beq.n	80084aa <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80084ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	4a0e      	ldr	r2, [pc, #56]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80084d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80084d4:	6093      	str	r3, [r2, #8]
 80084d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e2:	4909      	ldr	r1, [pc, #36]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80084f0:	d30e      	bcc.n	8008510 <HAL_RCC_OscConfig+0x288>
 80084f2:	4b05      	ldr	r3, [pc, #20]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	f023 021f 	bic.w	r2, r3, #31
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	4902      	ldr	r1, [pc, #8]	@ (8008508 <HAL_RCC_OscConfig+0x280>)
 8008500:	4313      	orrs	r3, r2
 8008502:	60cb      	str	r3, [r1, #12]
 8008504:	e04a      	b.n	800859c <HAL_RCC_OscConfig+0x314>
 8008506:	bf00      	nop
 8008508:	46020c00 	.word	0x46020c00
 800850c:	20000004 	.word	0x20000004
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008514:	2b00      	cmp	r3, #0
 8008516:	da0a      	bge.n	800852e <HAL_RCC_OscConfig+0x2a6>
 8008518:	4b98      	ldr	r3, [pc, #608]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6a1b      	ldr	r3, [r3, #32]
 8008524:	015b      	lsls	r3, r3, #5
 8008526:	4995      	ldr	r1, [pc, #596]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008528:	4313      	orrs	r3, r2
 800852a:	60cb      	str	r3, [r1, #12]
 800852c:	e036      	b.n	800859c <HAL_RCC_OscConfig+0x314>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008536:	d30a      	bcc.n	800854e <HAL_RCC_OscConfig+0x2c6>
 8008538:	4b90      	ldr	r3, [pc, #576]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	029b      	lsls	r3, r3, #10
 8008546:	498d      	ldr	r1, [pc, #564]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008548:	4313      	orrs	r3, r2
 800854a:	60cb      	str	r3, [r1, #12]
 800854c:	e026      	b.n	800859c <HAL_RCC_OscConfig+0x314>
 800854e:	4b8b      	ldr	r3, [pc, #556]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	03db      	lsls	r3, r3, #15
 800855c:	4987      	ldr	r1, [pc, #540]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 800855e:	4313      	orrs	r3, r2
 8008560:	60cb      	str	r3, [r1, #12]
 8008562:	e01b      	b.n	800859c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8008564:	4b85      	ldr	r3, [pc, #532]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a84      	ldr	r2, [pc, #528]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 800856a:	f023 0301 	bic.w	r3, r3, #1
 800856e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008570:	f7f9 fe14 	bl	800219c <HAL_GetTick>
 8008574:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008576:	e009      	b.n	800858c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008578:	f7f9 fe10 	bl	800219c <HAL_GetTick>
 800857c:	4602      	mov	r2, r0
 800857e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	2b02      	cmp	r3, #2
 8008584:	d902      	bls.n	800858c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	f000 bd53 	b.w	8009032 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800858c:	4b7b      	ldr	r3, [pc, #492]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1ef      	bne.n	8008578 <HAL_RCC_OscConfig+0x2f0>
 8008598:	e000      	b.n	800859c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800859a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0301 	and.w	r3, r3, #1
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f000 808b 	beq.w	80086c0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80085aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ac:	2b08      	cmp	r3, #8
 80085ae:	d005      	beq.n	80085bc <HAL_RCC_OscConfig+0x334>
 80085b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b2:	2b0c      	cmp	r3, #12
 80085b4:	d109      	bne.n	80085ca <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80085b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085b8:	2b03      	cmp	r3, #3
 80085ba:	d106      	bne.n	80085ca <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d17d      	bne.n	80086c0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	f000 bd34 	b.w	8009032 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085d2:	d106      	bne.n	80085e2 <HAL_RCC_OscConfig+0x35a>
 80085d4:	4b69      	ldr	r3, [pc, #420]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a68      	ldr	r2, [pc, #416]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 80085da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	e041      	b.n	8008666 <HAL_RCC_OscConfig+0x3de>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80085ea:	d112      	bne.n	8008612 <HAL_RCC_OscConfig+0x38a>
 80085ec:	4b63      	ldr	r3, [pc, #396]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a62      	ldr	r2, [pc, #392]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 80085f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	4b60      	ldr	r3, [pc, #384]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a5f      	ldr	r2, [pc, #380]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 80085fe:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008602:	6013      	str	r3, [r2, #0]
 8008604:	4b5d      	ldr	r3, [pc, #372]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a5c      	ldr	r2, [pc, #368]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 800860a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800860e:	6013      	str	r3, [r2, #0]
 8008610:	e029      	b.n	8008666 <HAL_RCC_OscConfig+0x3de>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800861a:	d112      	bne.n	8008642 <HAL_RCC_OscConfig+0x3ba>
 800861c:	4b57      	ldr	r3, [pc, #348]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a56      	ldr	r2, [pc, #344]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008622:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	4b54      	ldr	r3, [pc, #336]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a53      	ldr	r2, [pc, #332]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 800862e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	4b51      	ldr	r3, [pc, #324]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a50      	ldr	r2, [pc, #320]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 800863a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800863e:	6013      	str	r3, [r2, #0]
 8008640:	e011      	b.n	8008666 <HAL_RCC_OscConfig+0x3de>
 8008642:	4b4e      	ldr	r3, [pc, #312]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a4d      	ldr	r2, [pc, #308]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800864c:	6013      	str	r3, [r2, #0]
 800864e:	4b4b      	ldr	r3, [pc, #300]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a4a      	ldr	r2, [pc, #296]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008654:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008658:	6013      	str	r3, [r2, #0]
 800865a:	4b48      	ldr	r3, [pc, #288]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a47      	ldr	r2, [pc, #284]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008660:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008664:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d014      	beq.n	8008698 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800866e:	f7f9 fd95 	bl	800219c <HAL_GetTick>
 8008672:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008674:	e009      	b.n	800868a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008676:	f7f9 fd91 	bl	800219c <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	2b64      	cmp	r3, #100	@ 0x64
 8008682:	d902      	bls.n	800868a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	f000 bcd4 	b.w	8009032 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800868a:	4b3c      	ldr	r3, [pc, #240]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d0ef      	beq.n	8008676 <HAL_RCC_OscConfig+0x3ee>
 8008696:	e013      	b.n	80086c0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8008698:	f7f9 fd80 	bl	800219c <HAL_GetTick>
 800869c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800869e:	e009      	b.n	80086b4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086a0:	f7f9 fd7c 	bl	800219c <HAL_GetTick>
 80086a4:	4602      	mov	r2, r0
 80086a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	2b64      	cmp	r3, #100	@ 0x64
 80086ac:	d902      	bls.n	80086b4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80086ae:	2303      	movs	r3, #3
 80086b0:	f000 bcbf 	b.w	8009032 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80086b4:	4b31      	ldr	r3, [pc, #196]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d1ef      	bne.n	80086a0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0302 	and.w	r3, r3, #2
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d05f      	beq.n	800878c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80086cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ce:	2b04      	cmp	r3, #4
 80086d0:	d005      	beq.n	80086de <HAL_RCC_OscConfig+0x456>
 80086d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d4:	2b0c      	cmp	r3, #12
 80086d6:	d114      	bne.n	8008702 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80086d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d111      	bne.n	8008702 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d102      	bne.n	80086ec <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	f000 bca3 	b.w	8009032 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80086ec:	4b23      	ldr	r3, [pc, #140]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	041b      	lsls	r3, r3, #16
 80086fa:	4920      	ldr	r1, [pc, #128]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008700:	e044      	b.n	800878c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d024      	beq.n	8008754 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800870a:	4b1c      	ldr	r3, [pc, #112]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a1b      	ldr	r2, [pc, #108]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008714:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008716:	f7f9 fd41 	bl	800219c <HAL_GetTick>
 800871a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800871c:	e009      	b.n	8008732 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800871e:	f7f9 fd3d 	bl	800219c <HAL_GetTick>
 8008722:	4602      	mov	r2, r0
 8008724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	2b02      	cmp	r3, #2
 800872a:	d902      	bls.n	8008732 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	f000 bc80 	b.w	8009032 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008732:	4b12      	ldr	r3, [pc, #72]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800873a:	2b00      	cmp	r3, #0
 800873c:	d0ef      	beq.n	800871e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800873e:	4b0f      	ldr	r3, [pc, #60]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	041b      	lsls	r3, r3, #16
 800874c:	490b      	ldr	r1, [pc, #44]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 800874e:	4313      	orrs	r3, r2
 8008750:	610b      	str	r3, [r1, #16]
 8008752:	e01b      	b.n	800878c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8008754:	4b09      	ldr	r3, [pc, #36]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a08      	ldr	r2, [pc, #32]	@ (800877c <HAL_RCC_OscConfig+0x4f4>)
 800875a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800875e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008760:	f7f9 fd1c 	bl	800219c <HAL_GetTick>
 8008764:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008766:	e00b      	b.n	8008780 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008768:	f7f9 fd18 	bl	800219c <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	2b02      	cmp	r3, #2
 8008774:	d904      	bls.n	8008780 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	f000 bc5b 	b.w	8009032 <HAL_RCC_OscConfig+0xdaa>
 800877c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008780:	4baf      	ldr	r3, [pc, #700]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1ed      	bne.n	8008768 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 0308 	and.w	r3, r3, #8
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 80c8 	beq.w	800892a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800879a:	2300      	movs	r3, #0
 800879c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087a0:	4ba7      	ldr	r3, [pc, #668]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 80087a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087a6:	f003 0304 	and.w	r3, r3, #4
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d111      	bne.n	80087d2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087ae:	4ba4      	ldr	r3, [pc, #656]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 80087b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087b4:	4aa2      	ldr	r2, [pc, #648]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 80087b6:	f043 0304 	orr.w	r3, r3, #4
 80087ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80087be:	4ba0      	ldr	r3, [pc, #640]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 80087c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087c4:	f003 0304 	and.w	r3, r3, #4
 80087c8:	617b      	str	r3, [r7, #20]
 80087ca:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80087cc:	2301      	movs	r3, #1
 80087ce:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80087d2:	4b9c      	ldr	r3, [pc, #624]	@ (8008a44 <HAL_RCC_OscConfig+0x7bc>)
 80087d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d119      	bne.n	8008812 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80087de:	4b99      	ldr	r3, [pc, #612]	@ (8008a44 <HAL_RCC_OscConfig+0x7bc>)
 80087e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e2:	4a98      	ldr	r2, [pc, #608]	@ (8008a44 <HAL_RCC_OscConfig+0x7bc>)
 80087e4:	f043 0301 	orr.w	r3, r3, #1
 80087e8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087ea:	f7f9 fcd7 	bl	800219c <HAL_GetTick>
 80087ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80087f0:	e009      	b.n	8008806 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087f2:	f7f9 fcd3 	bl	800219c <HAL_GetTick>
 80087f6:	4602      	mov	r2, r0
 80087f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d902      	bls.n	8008806 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	f000 bc16 	b.w	8009032 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008806:	4b8f      	ldr	r3, [pc, #572]	@ (8008a44 <HAL_RCC_OscConfig+0x7bc>)
 8008808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	d0ef      	beq.n	80087f2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d05f      	beq.n	80088da <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800881a:	4b89      	ldr	r3, [pc, #548]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 800881c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008820:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	699a      	ldr	r2, [r3, #24]
 8008826:	6a3b      	ldr	r3, [r7, #32]
 8008828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800882c:	429a      	cmp	r2, r3
 800882e:	d037      	beq.n	80088a0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8008830:	6a3b      	ldr	r3, [r7, #32]
 8008832:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d006      	beq.n	8008848 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e3f4      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d01b      	beq.n	800888a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8008852:	4b7b      	ldr	r3, [pc, #492]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 8008854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008858:	4a79      	ldr	r2, [pc, #484]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 800885a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800885e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8008862:	f7f9 fc9b 	bl	800219c <HAL_GetTick>
 8008866:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008868:	e008      	b.n	800887c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800886a:	f7f9 fc97 	bl	800219c <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	2b05      	cmp	r3, #5
 8008876:	d901      	bls.n	800887c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e3da      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800887c:	4b70      	ldr	r3, [pc, #448]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 800887e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008882:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1ef      	bne.n	800886a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800888a:	4b6d      	ldr	r3, [pc, #436]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 800888c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008890:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	4969      	ldr	r1, [pc, #420]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 800889a:	4313      	orrs	r3, r2
 800889c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80088a0:	4b67      	ldr	r3, [pc, #412]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 80088a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088a6:	4a66      	ldr	r2, [pc, #408]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 80088a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80088ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80088b0:	f7f9 fc74 	bl	800219c <HAL_GetTick>
 80088b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80088b6:	e008      	b.n	80088ca <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088b8:	f7f9 fc70 	bl	800219c <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	2b05      	cmp	r3, #5
 80088c4:	d901      	bls.n	80088ca <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e3b3      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80088ca:	4b5d      	ldr	r3, [pc, #372]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 80088cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d0ef      	beq.n	80088b8 <HAL_RCC_OscConfig+0x630>
 80088d8:	e01b      	b.n	8008912 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80088da:	4b59      	ldr	r3, [pc, #356]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 80088dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088e0:	4a57      	ldr	r2, [pc, #348]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 80088e2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80088e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80088ea:	f7f9 fc57 	bl	800219c <HAL_GetTick>
 80088ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80088f0:	e008      	b.n	8008904 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088f2:	f7f9 fc53 	bl	800219c <HAL_GetTick>
 80088f6:	4602      	mov	r2, r0
 80088f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	2b05      	cmp	r3, #5
 80088fe:	d901      	bls.n	8008904 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e396      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008904:	4b4e      	ldr	r3, [pc, #312]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 8008906:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800890a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1ef      	bne.n	80088f2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008912:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008916:	2b01      	cmp	r3, #1
 8008918:	d107      	bne.n	800892a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800891a:	4b49      	ldr	r3, [pc, #292]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 800891c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008920:	4a47      	ldr	r2, [pc, #284]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 8008922:	f023 0304 	bic.w	r3, r3, #4
 8008926:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0304 	and.w	r3, r3, #4
 8008932:	2b00      	cmp	r3, #0
 8008934:	f000 8111 	beq.w	8008b5a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8008938:	2300      	movs	r3, #0
 800893a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800893e:	4b40      	ldr	r3, [pc, #256]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 8008940:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008944:	f003 0304 	and.w	r3, r3, #4
 8008948:	2b00      	cmp	r3, #0
 800894a:	d111      	bne.n	8008970 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800894c:	4b3c      	ldr	r3, [pc, #240]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 800894e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008952:	4a3b      	ldr	r2, [pc, #236]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 8008954:	f043 0304 	orr.w	r3, r3, #4
 8008958:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800895c:	4b38      	ldr	r3, [pc, #224]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 800895e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008962:	f003 0304 	and.w	r3, r3, #4
 8008966:	613b      	str	r3, [r7, #16]
 8008968:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800896a:	2301      	movs	r3, #1
 800896c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008970:	4b34      	ldr	r3, [pc, #208]	@ (8008a44 <HAL_RCC_OscConfig+0x7bc>)
 8008972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	2b00      	cmp	r3, #0
 800897a:	d118      	bne.n	80089ae <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800897c:	4b31      	ldr	r3, [pc, #196]	@ (8008a44 <HAL_RCC_OscConfig+0x7bc>)
 800897e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008980:	4a30      	ldr	r2, [pc, #192]	@ (8008a44 <HAL_RCC_OscConfig+0x7bc>)
 8008982:	f043 0301 	orr.w	r3, r3, #1
 8008986:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008988:	f7f9 fc08 	bl	800219c <HAL_GetTick>
 800898c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800898e:	e008      	b.n	80089a2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008990:	f7f9 fc04 	bl	800219c <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b02      	cmp	r3, #2
 800899c:	d901      	bls.n	80089a2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e347      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80089a2:	4b28      	ldr	r3, [pc, #160]	@ (8008a44 <HAL_RCC_OscConfig+0x7bc>)
 80089a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0f0      	beq.n	8008990 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d01f      	beq.n	80089fa <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f003 0304 	and.w	r3, r3, #4
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d010      	beq.n	80089e8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80089c6:	4b1e      	ldr	r3, [pc, #120]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 80089c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 80089ce:	f043 0304 	orr.w	r3, r3, #4
 80089d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80089d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 80089d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089dc:	4a18      	ldr	r2, [pc, #96]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 80089de:	f043 0301 	orr.w	r3, r3, #1
 80089e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80089e6:	e018      	b.n	8008a1a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80089e8:	4b15      	ldr	r3, [pc, #84]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 80089ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089ee:	4a14      	ldr	r2, [pc, #80]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 80089f0:	f043 0301 	orr.w	r3, r3, #1
 80089f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80089f8:	e00f      	b.n	8008a1a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80089fa:	4b11      	ldr	r3, [pc, #68]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 80089fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a00:	4a0f      	ldr	r2, [pc, #60]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 8008a02:	f023 0301 	bic.w	r3, r3, #1
 8008a06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 8008a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a10:	4a0b      	ldr	r2, [pc, #44]	@ (8008a40 <HAL_RCC_OscConfig+0x7b8>)
 8008a12:	f023 0304 	bic.w	r3, r3, #4
 8008a16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d057      	beq.n	8008ad2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8008a22:	f7f9 fbbb 	bl	800219c <HAL_GetTick>
 8008a26:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a28:	e00e      	b.n	8008a48 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a2a:	f7f9 fbb7 	bl	800219c <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d905      	bls.n	8008a48 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e2f8      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
 8008a40:	46020c00 	.word	0x46020c00
 8008a44:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a48:	4b9c      	ldr	r3, [pc, #624]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008a4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a4e:	f003 0302 	and.w	r3, r3, #2
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d0e9      	beq.n	8008a2a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d01b      	beq.n	8008a9a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008a62:	4b96      	ldr	r3, [pc, #600]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a68:	4a94      	ldr	r2, [pc, #592]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008a72:	e00a      	b.n	8008a8a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a74:	f7f9 fb92 	bl	800219c <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d901      	bls.n	8008a8a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e2d3      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008a8a:	4b8c      	ldr	r3, [pc, #560]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008a8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d0ed      	beq.n	8008a74 <HAL_RCC_OscConfig+0x7ec>
 8008a98:	e053      	b.n	8008b42 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008a9a:	4b88      	ldr	r3, [pc, #544]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008aa0:	4a86      	ldr	r2, [pc, #536]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008aa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008aa6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008aaa:	e00a      	b.n	8008ac2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aac:	f7f9 fb76 	bl	800219c <HAL_GetTick>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d901      	bls.n	8008ac2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e2b7      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008ac2:	4b7e      	ldr	r3, [pc, #504]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008ac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ac8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1ed      	bne.n	8008aac <HAL_RCC_OscConfig+0x824>
 8008ad0:	e037      	b.n	8008b42 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8008ad2:	f7f9 fb63 	bl	800219c <HAL_GetTick>
 8008ad6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008ad8:	e00a      	b.n	8008af0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ada:	f7f9 fb5f 	bl	800219c <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d901      	bls.n	8008af0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e2a0      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008af0:	4b72      	ldr	r3, [pc, #456]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008af2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008af6:	f003 0302 	and.w	r3, r3, #2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1ed      	bne.n	8008ada <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8008afe:	4b6f      	ldr	r3, [pc, #444]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d01a      	beq.n	8008b42 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008b0c:	4b6b      	ldr	r3, [pc, #428]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b12:	4a6a      	ldr	r2, [pc, #424]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008b14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008b1c:	e00a      	b.n	8008b34 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b1e:	f7f9 fb3d 	bl	800219c <HAL_GetTick>
 8008b22:	4602      	mov	r2, r0
 8008b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d901      	bls.n	8008b34 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e27e      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008b34:	4b61      	ldr	r3, [pc, #388]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008b36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1ed      	bne.n	8008b1e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008b42:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d107      	bne.n	8008b5a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b4a:	4b5c      	ldr	r3, [pc, #368]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b50:	4a5a      	ldr	r2, [pc, #360]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008b52:	f023 0304 	bic.w	r3, r3, #4
 8008b56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 0320 	and.w	r3, r3, #32
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d036      	beq.n	8008bd4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d019      	beq.n	8008ba2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8008b6e:	4b53      	ldr	r3, [pc, #332]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a52      	ldr	r2, [pc, #328]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008b74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008b78:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008b7a:	f7f9 fb0f 	bl	800219c <HAL_GetTick>
 8008b7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008b80:	e008      	b.n	8008b94 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b82:	f7f9 fb0b 	bl	800219c <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d901      	bls.n	8008b94 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e24e      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008b94:	4b49      	ldr	r3, [pc, #292]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d0f0      	beq.n	8008b82 <HAL_RCC_OscConfig+0x8fa>
 8008ba0:	e018      	b.n	8008bd4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8008ba2:	4b46      	ldr	r3, [pc, #280]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a45      	ldr	r2, [pc, #276]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008ba8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008bac:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008bae:	f7f9 faf5 	bl	800219c <HAL_GetTick>
 8008bb2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008bb4:	e008      	b.n	8008bc8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bb6:	f7f9 faf1 	bl	800219c <HAL_GetTick>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d901      	bls.n	8008bc8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e234      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008bc8:	4b3c      	ldr	r3, [pc, #240]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1f0      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d036      	beq.n	8008c4e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d019      	beq.n	8008c1c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8008be8:	4b34      	ldr	r3, [pc, #208]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a33      	ldr	r2, [pc, #204]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008bee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008bf2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008bf4:	f7f9 fad2 	bl	800219c <HAL_GetTick>
 8008bf8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008bfa:	e008      	b.n	8008c0e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008bfc:	f7f9 face 	bl	800219c <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d901      	bls.n	8008c0e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e211      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0f0      	beq.n	8008bfc <HAL_RCC_OscConfig+0x974>
 8008c1a:	e018      	b.n	8008c4e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8008c1c:	4b27      	ldr	r3, [pc, #156]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a26      	ldr	r2, [pc, #152]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008c22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c26:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008c28:	f7f9 fab8 	bl	800219c <HAL_GetTick>
 8008c2c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008c2e:	e008      	b.n	8008c42 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008c30:	f7f9 fab4 	bl	800219c <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d901      	bls.n	8008c42 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e1f7      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008c42:	4b1e      	ldr	r3, [pc, #120]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1f0      	bne.n	8008c30 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d07f      	beq.n	8008d5a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d062      	beq.n	8008d28 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8008c62:	4b16      	ldr	r3, [pc, #88]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	4a15      	ldr	r2, [pc, #84]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008c68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008c6c:	6093      	str	r3, [r2, #8]
 8008c6e:	4b13      	ldr	r3, [pc, #76]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c7a:	4910      	ldr	r1, [pc, #64]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c84:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008c88:	d309      	bcc.n	8008c9e <HAL_RCC_OscConfig+0xa16>
 8008c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	f023 021f 	bic.w	r2, r3, #31
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a1b      	ldr	r3, [r3, #32]
 8008c96:	4909      	ldr	r1, [pc, #36]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	60cb      	str	r3, [r1, #12]
 8008c9c:	e02a      	b.n	8008cf4 <HAL_RCC_OscConfig+0xa6c>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	da0c      	bge.n	8008cc0 <HAL_RCC_OscConfig+0xa38>
 8008ca6:	4b05      	ldr	r3, [pc, #20]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	015b      	lsls	r3, r3, #5
 8008cb4:	4901      	ldr	r1, [pc, #4]	@ (8008cbc <HAL_RCC_OscConfig+0xa34>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	60cb      	str	r3, [r1, #12]
 8008cba:	e01b      	b.n	8008cf4 <HAL_RCC_OscConfig+0xa6c>
 8008cbc:	46020c00 	.word	0x46020c00
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cc8:	d30a      	bcc.n	8008ce0 <HAL_RCC_OscConfig+0xa58>
 8008cca:	4ba1      	ldr	r3, [pc, #644]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	029b      	lsls	r3, r3, #10
 8008cd8:	499d      	ldr	r1, [pc, #628]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	60cb      	str	r3, [r1, #12]
 8008cde:	e009      	b.n	8008cf4 <HAL_RCC_OscConfig+0xa6c>
 8008ce0:	4b9b      	ldr	r3, [pc, #620]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a1b      	ldr	r3, [r3, #32]
 8008cec:	03db      	lsls	r3, r3, #15
 8008cee:	4998      	ldr	r1, [pc, #608]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8008cf4:	4b96      	ldr	r3, [pc, #600]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a95      	ldr	r2, [pc, #596]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008cfa:	f043 0310 	orr.w	r3, r3, #16
 8008cfe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008d00:	f7f9 fa4c 	bl	800219c <HAL_GetTick>
 8008d04:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008d06:	e008      	b.n	8008d1a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008d08:	f7f9 fa48 	bl	800219c <HAL_GetTick>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d901      	bls.n	8008d1a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e18b      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008d1a:	4b8d      	ldr	r3, [pc, #564]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0320 	and.w	r3, r3, #32
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0f0      	beq.n	8008d08 <HAL_RCC_OscConfig+0xa80>
 8008d26:	e018      	b.n	8008d5a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8008d28:	4b89      	ldr	r3, [pc, #548]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a88      	ldr	r2, [pc, #544]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008d2e:	f023 0310 	bic.w	r3, r3, #16
 8008d32:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008d34:	f7f9 fa32 	bl	800219c <HAL_GetTick>
 8008d38:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008d3a:	e008      	b.n	8008d4e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008d3c:	f7f9 fa2e 	bl	800219c <HAL_GetTick>
 8008d40:	4602      	mov	r2, r0
 8008d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d901      	bls.n	8008d4e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e171      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008d4e:	4b80      	ldr	r3, [pc, #512]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0320 	and.w	r3, r3, #32
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1f0      	bne.n	8008d3c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 8166 	beq.w	8009030 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008d64:	2300      	movs	r3, #0
 8008d66:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d6a:	4b79      	ldr	r3, [pc, #484]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	f003 030c 	and.w	r3, r3, #12
 8008d72:	2b0c      	cmp	r3, #12
 8008d74:	f000 80f2 	beq.w	8008f5c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	f040 80c5 	bne.w	8008f0c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008d82:	4b73      	ldr	r3, [pc, #460]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a72      	ldr	r2, [pc, #456]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008d88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d8c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008d8e:	f7f9 fa05 	bl	800219c <HAL_GetTick>
 8008d92:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008d94:	e008      	b.n	8008da8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d96:	f7f9 fa01 	bl	800219c <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d901      	bls.n	8008da8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e144      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008da8:	4b69      	ldr	r3, [pc, #420]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1f0      	bne.n	8008d96 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008db4:	4b66      	ldr	r3, [pc, #408]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dba:	f003 0304 	and.w	r3, r3, #4
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d111      	bne.n	8008de6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8008dc2:	4b63      	ldr	r3, [pc, #396]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dc8:	4a61      	ldr	r2, [pc, #388]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008dca:	f043 0304 	orr.w	r3, r3, #4
 8008dce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008dd2:	4b5f      	ldr	r3, [pc, #380]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dd8:	f003 0304 	and.w	r3, r3, #4
 8008ddc:	60fb      	str	r3, [r7, #12]
 8008dde:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8008de0:	2301      	movs	r3, #1
 8008de2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8008de6:	4b5b      	ldr	r3, [pc, #364]	@ (8008f54 <HAL_RCC_OscConfig+0xccc>)
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008dee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008df2:	d102      	bne.n	8008dfa <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8008df4:	2301      	movs	r3, #1
 8008df6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008dfa:	4b56      	ldr	r3, [pc, #344]	@ (8008f54 <HAL_RCC_OscConfig+0xccc>)
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	4a55      	ldr	r2, [pc, #340]	@ (8008f54 <HAL_RCC_OscConfig+0xccc>)
 8008e00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e04:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8008e06:	4b52      	ldr	r3, [pc, #328]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e0e:	f023 0303 	bic.w	r3, r3, #3
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008e1a:	3a01      	subs	r2, #1
 8008e1c:	0212      	lsls	r2, r2, #8
 8008e1e:	4311      	orrs	r1, r2
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008e24:	430a      	orrs	r2, r1
 8008e26:	494a      	ldr	r1, [pc, #296]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008e2c:	4b48      	ldr	r3, [pc, #288]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008e2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e30:	4b49      	ldr	r3, [pc, #292]	@ (8008f58 <HAL_RCC_OscConfig+0xcd0>)
 8008e32:	4013      	ands	r3, r2
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008e38:	3a01      	subs	r2, #1
 8008e3a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008e42:	3a01      	subs	r2, #1
 8008e44:	0252      	lsls	r2, r2, #9
 8008e46:	b292      	uxth	r2, r2
 8008e48:	4311      	orrs	r1, r2
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008e4e:	3a01      	subs	r2, #1
 8008e50:	0412      	lsls	r2, r2, #16
 8008e52:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008e56:	4311      	orrs	r1, r2
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008e5c:	3a01      	subs	r2, #1
 8008e5e:	0612      	lsls	r2, r2, #24
 8008e60:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008e64:	430a      	orrs	r2, r1
 8008e66:	493a      	ldr	r1, [pc, #232]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008e6c:	4b38      	ldr	r3, [pc, #224]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e70:	4a37      	ldr	r2, [pc, #220]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008e72:	f023 0310 	bic.w	r3, r3, #16
 8008e76:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e7c:	4a34      	ldr	r2, [pc, #208]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008e7e:	00db      	lsls	r3, r3, #3
 8008e80:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008e82:	4b33      	ldr	r3, [pc, #204]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e86:	4a32      	ldr	r2, [pc, #200]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008e88:	f043 0310 	orr.w	r3, r3, #16
 8008e8c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8008e8e:	4b30      	ldr	r3, [pc, #192]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e92:	f023 020c 	bic.w	r2, r3, #12
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e9a:	492d      	ldr	r1, [pc, #180]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8008ea0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d105      	bne.n	8008eb4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8008f54 <HAL_RCC_OscConfig+0xccc>)
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	4a29      	ldr	r2, [pc, #164]	@ (8008f54 <HAL_RCC_OscConfig+0xccc>)
 8008eae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008eb2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8008eb4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d107      	bne.n	8008ecc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8008ebc:	4b24      	ldr	r3, [pc, #144]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ec2:	4a23      	ldr	r2, [pc, #140]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008ec4:	f023 0304 	bic.w	r3, r3, #4
 8008ec8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8008ecc:	4b20      	ldr	r3, [pc, #128]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008ed2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ed6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008ed8:	f7f9 f960 	bl	800219c <HAL_GetTick>
 8008edc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008ede:	e008      	b.n	8008ef2 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ee0:	f7f9 f95c 	bl	800219c <HAL_GetTick>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d901      	bls.n	8008ef2 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e09f      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008ef2:	4b17      	ldr	r3, [pc, #92]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d0f0      	beq.n	8008ee0 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008efe:	4b14      	ldr	r3, [pc, #80]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f02:	4a13      	ldr	r2, [pc, #76]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008f08:	6293      	str	r3, [r2, #40]	@ 0x28
 8008f0a:	e091      	b.n	8009030 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008f0c:	4b10      	ldr	r3, [pc, #64]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a0f      	ldr	r2, [pc, #60]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008f12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f16:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008f18:	f7f9 f940 	bl	800219c <HAL_GetTick>
 8008f1c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008f1e:	e008      	b.n	8008f32 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f20:	f7f9 f93c 	bl	800219c <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d901      	bls.n	8008f32 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e07f      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008f32:	4b07      	ldr	r3, [pc, #28]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1f0      	bne.n	8008f20 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8008f3e:	4b04      	ldr	r3, [pc, #16]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f42:	4a03      	ldr	r2, [pc, #12]	@ (8008f50 <HAL_RCC_OscConfig+0xcc8>)
 8008f44:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8008f48:	f023 0303 	bic.w	r3, r3, #3
 8008f4c:	6293      	str	r3, [r2, #40]	@ 0x28
 8008f4e:	e06f      	b.n	8009030 <HAL_RCC_OscConfig+0xda8>
 8008f50:	46020c00 	.word	0x46020c00
 8008f54:	46020800 	.word	0x46020800
 8008f58:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008f5c:	4b37      	ldr	r3, [pc, #220]	@ (800903c <HAL_RCC_OscConfig+0xdb4>)
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f60:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008f62:	4b36      	ldr	r3, [pc, #216]	@ (800903c <HAL_RCC_OscConfig+0xdb4>)
 8008f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f66:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d039      	beq.n	8008fe4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	f003 0203 	and.w	r2, r3, #3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d132      	bne.n	8008fe4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	0a1b      	lsrs	r3, r3, #8
 8008f82:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f8a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d129      	bne.n	8008fe4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d122      	bne.n	8008fe4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fa8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d11a      	bne.n	8008fe4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	0a5b      	lsrs	r3, r3, #9
 8008fb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d111      	bne.n	8008fe4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	0c1b      	lsrs	r3, r3, #16
 8008fc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fcc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d108      	bne.n	8008fe4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	0e1b      	lsrs	r3, r3, #24
 8008fd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fde:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d001      	beq.n	8008fe8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e024      	b.n	8009032 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008fe8:	4b14      	ldr	r3, [pc, #80]	@ (800903c <HAL_RCC_OscConfig+0xdb4>)
 8008fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fec:	08db      	lsrs	r3, r3, #3
 8008fee:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d01a      	beq.n	8009030 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008ffa:	4b10      	ldr	r3, [pc, #64]	@ (800903c <HAL_RCC_OscConfig+0xdb4>)
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffe:	4a0f      	ldr	r2, [pc, #60]	@ (800903c <HAL_RCC_OscConfig+0xdb4>)
 8009000:	f023 0310 	bic.w	r3, r3, #16
 8009004:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009006:	f7f9 f8c9 	bl	800219c <HAL_GetTick>
 800900a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800900c:	bf00      	nop
 800900e:	f7f9 f8c5 	bl	800219c <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009016:	4293      	cmp	r3, r2
 8009018:	d0f9      	beq.n	800900e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800901e:	4a07      	ldr	r2, [pc, #28]	@ (800903c <HAL_RCC_OscConfig+0xdb4>)
 8009020:	00db      	lsls	r3, r3, #3
 8009022:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8009024:	4b05      	ldr	r3, [pc, #20]	@ (800903c <HAL_RCC_OscConfig+0xdb4>)
 8009026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009028:	4a04      	ldr	r2, [pc, #16]	@ (800903c <HAL_RCC_OscConfig+0xdb4>)
 800902a:	f043 0310 	orr.w	r3, r3, #16
 800902e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3738      	adds	r7, #56	@ 0x38
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	46020c00 	.word	0x46020c00

08009040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e1d9      	b.n	8009408 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009054:	4b9b      	ldr	r3, [pc, #620]	@ (80092c4 <HAL_RCC_ClockConfig+0x284>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 030f 	and.w	r3, r3, #15
 800905c:	683a      	ldr	r2, [r7, #0]
 800905e:	429a      	cmp	r2, r3
 8009060:	d910      	bls.n	8009084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009062:	4b98      	ldr	r3, [pc, #608]	@ (80092c4 <HAL_RCC_ClockConfig+0x284>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f023 020f 	bic.w	r2, r3, #15
 800906a:	4996      	ldr	r1, [pc, #600]	@ (80092c4 <HAL_RCC_ClockConfig+0x284>)
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	4313      	orrs	r3, r2
 8009070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009072:	4b94      	ldr	r3, [pc, #592]	@ (80092c4 <HAL_RCC_ClockConfig+0x284>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 030f 	and.w	r3, r3, #15
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	429a      	cmp	r2, r3
 800907e:	d001      	beq.n	8009084 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	e1c1      	b.n	8009408 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0310 	and.w	r3, r3, #16
 800908c:	2b00      	cmp	r3, #0
 800908e:	d010      	beq.n	80090b2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	695a      	ldr	r2, [r3, #20]
 8009094:	4b8c      	ldr	r3, [pc, #560]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 8009096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009098:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800909c:	429a      	cmp	r2, r3
 800909e:	d908      	bls.n	80090b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80090a0:	4b89      	ldr	r3, [pc, #548]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 80090a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	695b      	ldr	r3, [r3, #20]
 80090ac:	4986      	ldr	r1, [pc, #536]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 80090ae:	4313      	orrs	r3, r2
 80090b0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0308 	and.w	r3, r3, #8
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d012      	beq.n	80090e4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	691a      	ldr	r2, [r3, #16]
 80090c2:	4b81      	ldr	r3, [pc, #516]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	091b      	lsrs	r3, r3, #4
 80090c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d909      	bls.n	80090e4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80090d0:	4b7d      	ldr	r3, [pc, #500]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 80090d2:	6a1b      	ldr	r3, [r3, #32]
 80090d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	011b      	lsls	r3, r3, #4
 80090de:	497a      	ldr	r1, [pc, #488]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 80090e0:	4313      	orrs	r3, r2
 80090e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 0304 	and.w	r3, r3, #4
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d010      	beq.n	8009112 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	68da      	ldr	r2, [r3, #12]
 80090f4:	4b74      	ldr	r3, [pc, #464]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 80090f6:	6a1b      	ldr	r3, [r3, #32]
 80090f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d908      	bls.n	8009112 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009100:	4b71      	ldr	r3, [pc, #452]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 8009102:	6a1b      	ldr	r3, [r3, #32]
 8009104:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	496e      	ldr	r1, [pc, #440]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 800910e:	4313      	orrs	r3, r2
 8009110:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0302 	and.w	r3, r3, #2
 800911a:	2b00      	cmp	r3, #0
 800911c:	d010      	beq.n	8009140 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	689a      	ldr	r2, [r3, #8]
 8009122:	4b69      	ldr	r3, [pc, #420]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 8009124:	6a1b      	ldr	r3, [r3, #32]
 8009126:	f003 030f 	and.w	r3, r3, #15
 800912a:	429a      	cmp	r2, r3
 800912c:	d908      	bls.n	8009140 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800912e:	4b66      	ldr	r3, [pc, #408]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 8009130:	6a1b      	ldr	r3, [r3, #32]
 8009132:	f023 020f 	bic.w	r2, r3, #15
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	4963      	ldr	r1, [pc, #396]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 800913c:	4313      	orrs	r3, r2
 800913e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0301 	and.w	r3, r3, #1
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 80d2 	beq.w	80092f2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800914e:	2300      	movs	r3, #0
 8009150:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	2b03      	cmp	r3, #3
 8009158:	d143      	bne.n	80091e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800915a:	4b5b      	ldr	r3, [pc, #364]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 800915c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009160:	f003 0304 	and.w	r3, r3, #4
 8009164:	2b00      	cmp	r3, #0
 8009166:	d110      	bne.n	800918a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009168:	4b57      	ldr	r3, [pc, #348]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 800916a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800916e:	4a56      	ldr	r2, [pc, #344]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 8009170:	f043 0304 	orr.w	r3, r3, #4
 8009174:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009178:	4b53      	ldr	r3, [pc, #332]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 800917a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800917e:	f003 0304 	and.w	r3, r3, #4
 8009182:	60bb      	str	r3, [r7, #8]
 8009184:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8009186:	2301      	movs	r3, #1
 8009188:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800918a:	f7f9 f807 	bl	800219c <HAL_GetTick>
 800918e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8009190:	4b4e      	ldr	r3, [pc, #312]	@ (80092cc <HAL_RCC_ClockConfig+0x28c>)
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00f      	beq.n	80091bc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800919c:	e008      	b.n	80091b0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800919e:	f7f8 fffd 	bl	800219c <HAL_GetTick>
 80091a2:	4602      	mov	r2, r0
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d901      	bls.n	80091b0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80091ac:	2303      	movs	r3, #3
 80091ae:	e12b      	b.n	8009408 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80091b0:	4b46      	ldr	r3, [pc, #280]	@ (80092cc <HAL_RCC_ClockConfig+0x28c>)
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d0f0      	beq.n	800919e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80091bc:	7dfb      	ldrb	r3, [r7, #23]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d107      	bne.n	80091d2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80091c2:	4b41      	ldr	r3, [pc, #260]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 80091c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091c8:	4a3f      	ldr	r2, [pc, #252]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 80091ca:	f023 0304 	bic.w	r3, r3, #4
 80091ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80091d2:	4b3d      	ldr	r3, [pc, #244]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d121      	bne.n	8009222 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e112      	b.n	8009408 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d107      	bne.n	80091fa <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80091ea:	4b37      	ldr	r3, [pc, #220]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d115      	bne.n	8009222 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e106      	b.n	8009408 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d107      	bne.n	8009212 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009202:	4b31      	ldr	r3, [pc, #196]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 0304 	and.w	r3, r3, #4
 800920a:	2b00      	cmp	r3, #0
 800920c:	d109      	bne.n	8009222 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e0fa      	b.n	8009408 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009212:	4b2d      	ldr	r3, [pc, #180]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800921a:	2b00      	cmp	r3, #0
 800921c:	d101      	bne.n	8009222 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e0f2      	b.n	8009408 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8009222:	4b29      	ldr	r3, [pc, #164]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 8009224:	69db      	ldr	r3, [r3, #28]
 8009226:	f023 0203 	bic.w	r2, r3, #3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	4926      	ldr	r1, [pc, #152]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 8009230:	4313      	orrs	r3, r2
 8009232:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8009234:	f7f8 ffb2 	bl	800219c <HAL_GetTick>
 8009238:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	2b03      	cmp	r3, #3
 8009240:	d112      	bne.n	8009268 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009242:	e00a      	b.n	800925a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009244:	f7f8 ffaa 	bl	800219c <HAL_GetTick>
 8009248:	4602      	mov	r2, r0
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009252:	4293      	cmp	r3, r2
 8009254:	d901      	bls.n	800925a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	e0d6      	b.n	8009408 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800925a:	4b1b      	ldr	r3, [pc, #108]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 800925c:	69db      	ldr	r3, [r3, #28]
 800925e:	f003 030c 	and.w	r3, r3, #12
 8009262:	2b0c      	cmp	r3, #12
 8009264:	d1ee      	bne.n	8009244 <HAL_RCC_ClockConfig+0x204>
 8009266:	e044      	b.n	80092f2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	2b02      	cmp	r3, #2
 800926e:	d112      	bne.n	8009296 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009270:	e00a      	b.n	8009288 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009272:	f7f8 ff93 	bl	800219c <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009280:	4293      	cmp	r3, r2
 8009282:	d901      	bls.n	8009288 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e0bf      	b.n	8009408 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009288:	4b0f      	ldr	r3, [pc, #60]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 800928a:	69db      	ldr	r3, [r3, #28]
 800928c:	f003 030c 	and.w	r3, r3, #12
 8009290:	2b08      	cmp	r3, #8
 8009292:	d1ee      	bne.n	8009272 <HAL_RCC_ClockConfig+0x232>
 8009294:	e02d      	b.n	80092f2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d123      	bne.n	80092e6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800929e:	e00a      	b.n	80092b6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092a0:	f7f8 ff7c 	bl	800219c <HAL_GetTick>
 80092a4:	4602      	mov	r2, r0
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d901      	bls.n	80092b6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80092b2:	2303      	movs	r3, #3
 80092b4:	e0a8      	b.n	8009408 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80092b6:	4b04      	ldr	r3, [pc, #16]	@ (80092c8 <HAL_RCC_ClockConfig+0x288>)
 80092b8:	69db      	ldr	r3, [r3, #28]
 80092ba:	f003 030c 	and.w	r3, r3, #12
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1ee      	bne.n	80092a0 <HAL_RCC_ClockConfig+0x260>
 80092c2:	e016      	b.n	80092f2 <HAL_RCC_ClockConfig+0x2b2>
 80092c4:	40022000 	.word	0x40022000
 80092c8:	46020c00 	.word	0x46020c00
 80092cc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092d0:	f7f8 ff64 	bl	800219c <HAL_GetTick>
 80092d4:	4602      	mov	r2, r0
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092de:	4293      	cmp	r3, r2
 80092e0:	d901      	bls.n	80092e6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e090      	b.n	8009408 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80092e6:	4b4a      	ldr	r3, [pc, #296]	@ (8009410 <HAL_RCC_ClockConfig+0x3d0>)
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	f003 030c 	and.w	r3, r3, #12
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	d1ee      	bne.n	80092d0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d010      	beq.n	8009320 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	689a      	ldr	r2, [r3, #8]
 8009302:	4b43      	ldr	r3, [pc, #268]	@ (8009410 <HAL_RCC_ClockConfig+0x3d0>)
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	f003 030f 	and.w	r3, r3, #15
 800930a:	429a      	cmp	r2, r3
 800930c:	d208      	bcs.n	8009320 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800930e:	4b40      	ldr	r3, [pc, #256]	@ (8009410 <HAL_RCC_ClockConfig+0x3d0>)
 8009310:	6a1b      	ldr	r3, [r3, #32]
 8009312:	f023 020f 	bic.w	r2, r3, #15
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	493d      	ldr	r1, [pc, #244]	@ (8009410 <HAL_RCC_ClockConfig+0x3d0>)
 800931c:	4313      	orrs	r3, r2
 800931e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009320:	4b3c      	ldr	r3, [pc, #240]	@ (8009414 <HAL_RCC_ClockConfig+0x3d4>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 030f 	and.w	r3, r3, #15
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	429a      	cmp	r2, r3
 800932c:	d210      	bcs.n	8009350 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800932e:	4b39      	ldr	r3, [pc, #228]	@ (8009414 <HAL_RCC_ClockConfig+0x3d4>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f023 020f 	bic.w	r2, r3, #15
 8009336:	4937      	ldr	r1, [pc, #220]	@ (8009414 <HAL_RCC_ClockConfig+0x3d4>)
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	4313      	orrs	r3, r2
 800933c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800933e:	4b35      	ldr	r3, [pc, #212]	@ (8009414 <HAL_RCC_ClockConfig+0x3d4>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 030f 	and.w	r3, r3, #15
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	429a      	cmp	r2, r3
 800934a:	d001      	beq.n	8009350 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e05b      	b.n	8009408 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 0304 	and.w	r3, r3, #4
 8009358:	2b00      	cmp	r3, #0
 800935a:	d010      	beq.n	800937e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	68da      	ldr	r2, [r3, #12]
 8009360:	4b2b      	ldr	r3, [pc, #172]	@ (8009410 <HAL_RCC_ClockConfig+0x3d0>)
 8009362:	6a1b      	ldr	r3, [r3, #32]
 8009364:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009368:	429a      	cmp	r2, r3
 800936a:	d208      	bcs.n	800937e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800936c:	4b28      	ldr	r3, [pc, #160]	@ (8009410 <HAL_RCC_ClockConfig+0x3d0>)
 800936e:	6a1b      	ldr	r3, [r3, #32]
 8009370:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	4925      	ldr	r1, [pc, #148]	@ (8009410 <HAL_RCC_ClockConfig+0x3d0>)
 800937a:	4313      	orrs	r3, r2
 800937c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 0308 	and.w	r3, r3, #8
 8009386:	2b00      	cmp	r3, #0
 8009388:	d012      	beq.n	80093b0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	691a      	ldr	r2, [r3, #16]
 800938e:	4b20      	ldr	r3, [pc, #128]	@ (8009410 <HAL_RCC_ClockConfig+0x3d0>)
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	091b      	lsrs	r3, r3, #4
 8009394:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009398:	429a      	cmp	r2, r3
 800939a:	d209      	bcs.n	80093b0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800939c:	4b1c      	ldr	r3, [pc, #112]	@ (8009410 <HAL_RCC_ClockConfig+0x3d0>)
 800939e:	6a1b      	ldr	r3, [r3, #32]
 80093a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	011b      	lsls	r3, r3, #4
 80093aa:	4919      	ldr	r1, [pc, #100]	@ (8009410 <HAL_RCC_ClockConfig+0x3d0>)
 80093ac:	4313      	orrs	r3, r2
 80093ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 0310 	and.w	r3, r3, #16
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d010      	beq.n	80093de <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	695a      	ldr	r2, [r3, #20]
 80093c0:	4b13      	ldr	r3, [pc, #76]	@ (8009410 <HAL_RCC_ClockConfig+0x3d0>)
 80093c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d208      	bcs.n	80093de <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80093cc:	4b10      	ldr	r3, [pc, #64]	@ (8009410 <HAL_RCC_ClockConfig+0x3d0>)
 80093ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	490d      	ldr	r1, [pc, #52]	@ (8009410 <HAL_RCC_ClockConfig+0x3d0>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80093de:	f000 f821 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 80093e2:	4602      	mov	r2, r0
 80093e4:	4b0a      	ldr	r3, [pc, #40]	@ (8009410 <HAL_RCC_ClockConfig+0x3d0>)
 80093e6:	6a1b      	ldr	r3, [r3, #32]
 80093e8:	f003 030f 	and.w	r3, r3, #15
 80093ec:	490a      	ldr	r1, [pc, #40]	@ (8009418 <HAL_RCC_ClockConfig+0x3d8>)
 80093ee:	5ccb      	ldrb	r3, [r1, r3]
 80093f0:	fa22 f303 	lsr.w	r3, r2, r3
 80093f4:	4a09      	ldr	r2, [pc, #36]	@ (800941c <HAL_RCC_ClockConfig+0x3dc>)
 80093f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80093f8:	4b09      	ldr	r3, [pc, #36]	@ (8009420 <HAL_RCC_ClockConfig+0x3e0>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7f8 fd4b 	bl	8001e98 <HAL_InitTick>
 8009402:	4603      	mov	r3, r0
 8009404:	73fb      	strb	r3, [r7, #15]

  return status;
 8009406:	7bfb      	ldrb	r3, [r7, #15]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3718      	adds	r7, #24
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	46020c00 	.word	0x46020c00
 8009414:	40022000 	.word	0x40022000
 8009418:	0800de68 	.word	0x0800de68
 800941c:	20000000 	.word	0x20000000
 8009420:	20000004 	.word	0x20000004

08009424 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009424:	b480      	push	{r7}
 8009426:	b08b      	sub	sp, #44	@ 0x2c
 8009428:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800942a:	2300      	movs	r3, #0
 800942c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800942e:	2300      	movs	r3, #0
 8009430:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009432:	4b78      	ldr	r3, [pc, #480]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009434:	69db      	ldr	r3, [r3, #28]
 8009436:	f003 030c 	and.w	r3, r3, #12
 800943a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800943c:	4b75      	ldr	r3, [pc, #468]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800943e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009440:	f003 0303 	and.w	r3, r3, #3
 8009444:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d005      	beq.n	8009458 <HAL_RCC_GetSysClockFreq+0x34>
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	2b0c      	cmp	r3, #12
 8009450:	d121      	bne.n	8009496 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d11e      	bne.n	8009496 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8009458:	4b6e      	ldr	r3, [pc, #440]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d107      	bne.n	8009474 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8009464:	4b6b      	ldr	r3, [pc, #428]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009466:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800946a:	0b1b      	lsrs	r3, r3, #12
 800946c:	f003 030f 	and.w	r3, r3, #15
 8009470:	627b      	str	r3, [r7, #36]	@ 0x24
 8009472:	e005      	b.n	8009480 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8009474:	4b67      	ldr	r3, [pc, #412]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	0f1b      	lsrs	r3, r3, #28
 800947a:	f003 030f 	and.w	r3, r3, #15
 800947e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009480:	4a65      	ldr	r2, [pc, #404]	@ (8009618 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8009482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009488:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d110      	bne.n	80094b2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009492:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009494:	e00d      	b.n	80094b2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009496:	4b5f      	ldr	r3, [pc, #380]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009498:	69db      	ldr	r3, [r3, #28]
 800949a:	f003 030c 	and.w	r3, r3, #12
 800949e:	2b04      	cmp	r3, #4
 80094a0:	d102      	bne.n	80094a8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80094a2:	4b5e      	ldr	r3, [pc, #376]	@ (800961c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80094a4:	623b      	str	r3, [r7, #32]
 80094a6:	e004      	b.n	80094b2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	2b08      	cmp	r3, #8
 80094ac:	d101      	bne.n	80094b2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80094ae:	4b5b      	ldr	r3, [pc, #364]	@ (800961c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80094b0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	2b0c      	cmp	r3, #12
 80094b6:	f040 80a5 	bne.w	8009604 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80094ba:	4b56      	ldr	r3, [pc, #344]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80094bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094be:	f003 0303 	and.w	r3, r3, #3
 80094c2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80094c4:	4b53      	ldr	r3, [pc, #332]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80094c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c8:	0a1b      	lsrs	r3, r3, #8
 80094ca:	f003 030f 	and.w	r3, r3, #15
 80094ce:	3301      	adds	r3, #1
 80094d0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80094d2:	4b50      	ldr	r3, [pc, #320]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80094d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d6:	091b      	lsrs	r3, r3, #4
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80094de:	4b4d      	ldr	r3, [pc, #308]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80094e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e2:	08db      	lsrs	r3, r3, #3
 80094e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	fb02 f303 	mul.w	r3, r2, r3
 80094ee:	ee07 3a90 	vmov	s15, r3
 80094f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d003      	beq.n	8009508 <HAL_RCC_GetSysClockFreq+0xe4>
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	2b03      	cmp	r3, #3
 8009504:	d022      	beq.n	800954c <HAL_RCC_GetSysClockFreq+0x128>
 8009506:	e043      	b.n	8009590 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	ee07 3a90 	vmov	s15, r3
 800950e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009512:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8009620 <HAL_RCC_GetSysClockFreq+0x1fc>
 8009516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800951a:	4b3e      	ldr	r3, [pc, #248]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800951c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800951e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009522:	ee07 3a90 	vmov	s15, r3
 8009526:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800952a:	ed97 6a01 	vldr	s12, [r7, #4]
 800952e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8009624 <HAL_RCC_GetSysClockFreq+0x200>
 8009532:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009536:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800953a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800953e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800954a:	e046      	b.n	80095da <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	ee07 3a90 	vmov	s15, r3
 8009552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009556:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8009620 <HAL_RCC_GetSysClockFreq+0x1fc>
 800955a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800955e:	4b2d      	ldr	r3, [pc, #180]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009566:	ee07 3a90 	vmov	s15, r3
 800956a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800956e:	ed97 6a01 	vldr	s12, [r7, #4]
 8009572:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8009624 <HAL_RCC_GetSysClockFreq+0x200>
 8009576:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800957a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800957e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009582:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800958a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800958e:	e024      	b.n	80095da <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009592:	ee07 3a90 	vmov	s15, r3
 8009596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	ee07 3a90 	vmov	s15, r3
 80095a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095a8:	4b1a      	ldr	r3, [pc, #104]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80095aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095b0:	ee07 3a90 	vmov	s15, r3
 80095b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80095b8:	ed97 6a01 	vldr	s12, [r7, #4]
 80095bc:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8009624 <HAL_RCC_GetSysClockFreq+0x200>
 80095c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80095c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80095c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80095d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095d8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80095da:	4b0e      	ldr	r3, [pc, #56]	@ (8009614 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80095dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095de:	0e1b      	lsrs	r3, r3, #24
 80095e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095e4:	3301      	adds	r3, #1
 80095e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	ee07 3a90 	vmov	s15, r3
 80095ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80095f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80095f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095fe:	ee17 3a90 	vmov	r3, s15
 8009602:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8009604:	6a3b      	ldr	r3, [r7, #32]
}
 8009606:	4618      	mov	r0, r3
 8009608:	372c      	adds	r7, #44	@ 0x2c
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	46020c00 	.word	0x46020c00
 8009618:	0800de80 	.word	0x0800de80
 800961c:	00f42400 	.word	0x00f42400
 8009620:	4b742400 	.word	0x4b742400
 8009624:	46000000 	.word	0x46000000

08009628 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800962c:	f7ff fefa 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 8009630:	4602      	mov	r2, r0
 8009632:	4b07      	ldr	r3, [pc, #28]	@ (8009650 <HAL_RCC_GetHCLKFreq+0x28>)
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	f003 030f 	and.w	r3, r3, #15
 800963a:	4906      	ldr	r1, [pc, #24]	@ (8009654 <HAL_RCC_GetHCLKFreq+0x2c>)
 800963c:	5ccb      	ldrb	r3, [r1, r3]
 800963e:	fa22 f303 	lsr.w	r3, r2, r3
 8009642:	4a05      	ldr	r2, [pc, #20]	@ (8009658 <HAL_RCC_GetHCLKFreq+0x30>)
 8009644:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8009646:	4b04      	ldr	r3, [pc, #16]	@ (8009658 <HAL_RCC_GetHCLKFreq+0x30>)
 8009648:	681b      	ldr	r3, [r3, #0]
}
 800964a:	4618      	mov	r0, r3
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	46020c00 	.word	0x46020c00
 8009654:	0800de68 	.word	0x0800de68
 8009658:	20000000 	.word	0x20000000

0800965c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8009660:	f7ff ffe2 	bl	8009628 <HAL_RCC_GetHCLKFreq>
 8009664:	4602      	mov	r2, r0
 8009666:	4b05      	ldr	r3, [pc, #20]	@ (800967c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	091b      	lsrs	r3, r3, #4
 800966c:	f003 0307 	and.w	r3, r3, #7
 8009670:	4903      	ldr	r1, [pc, #12]	@ (8009680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009672:	5ccb      	ldrb	r3, [r1, r3]
 8009674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009678:	4618      	mov	r0, r3
 800967a:	bd80      	pop	{r7, pc}
 800967c:	46020c00 	.word	0x46020c00
 8009680:	0800de78 	.word	0x0800de78

08009684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8009688:	f7ff ffce 	bl	8009628 <HAL_RCC_GetHCLKFreq>
 800968c:	4602      	mov	r2, r0
 800968e:	4b05      	ldr	r3, [pc, #20]	@ (80096a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009690:	6a1b      	ldr	r3, [r3, #32]
 8009692:	0a1b      	lsrs	r3, r3, #8
 8009694:	f003 0307 	and.w	r3, r3, #7
 8009698:	4903      	ldr	r1, [pc, #12]	@ (80096a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800969a:	5ccb      	ldrb	r3, [r1, r3]
 800969c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	46020c00 	.word	0x46020c00
 80096a8:	0800de78 	.word	0x0800de78

080096ac <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80096b0:	f7ff ffba 	bl	8009628 <HAL_RCC_GetHCLKFreq>
 80096b4:	4602      	mov	r2, r0
 80096b6:	4b05      	ldr	r3, [pc, #20]	@ (80096cc <HAL_RCC_GetPCLK3Freq+0x20>)
 80096b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ba:	091b      	lsrs	r3, r3, #4
 80096bc:	f003 0307 	and.w	r3, r3, #7
 80096c0:	4903      	ldr	r1, [pc, #12]	@ (80096d0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80096c2:	5ccb      	ldrb	r3, [r1, r3]
 80096c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	46020c00 	.word	0x46020c00
 80096d0:	0800de78 	.word	0x0800de78

080096d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	221f      	movs	r2, #31
 80096e2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80096e4:	4b15      	ldr	r3, [pc, #84]	@ (800973c <HAL_RCC_GetClockConfig+0x68>)
 80096e6:	69db      	ldr	r3, [r3, #28]
 80096e8:	f003 0203 	and.w	r2, r3, #3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80096f0:	4b12      	ldr	r3, [pc, #72]	@ (800973c <HAL_RCC_GetClockConfig+0x68>)
 80096f2:	6a1b      	ldr	r3, [r3, #32]
 80096f4:	f003 020f 	and.w	r2, r3, #15
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80096fc:	4b0f      	ldr	r3, [pc, #60]	@ (800973c <HAL_RCC_GetClockConfig+0x68>)
 80096fe:	6a1b      	ldr	r3, [r3, #32]
 8009700:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8009708:	4b0c      	ldr	r3, [pc, #48]	@ (800973c <HAL_RCC_GetClockConfig+0x68>)
 800970a:	6a1b      	ldr	r3, [r3, #32]
 800970c:	091b      	lsrs	r3, r3, #4
 800970e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8009716:	4b09      	ldr	r3, [pc, #36]	@ (800973c <HAL_RCC_GetClockConfig+0x68>)
 8009718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800971a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009722:	4b07      	ldr	r3, [pc, #28]	@ (8009740 <HAL_RCC_GetClockConfig+0x6c>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 020f 	and.w	r2, r3, #15
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	601a      	str	r2, [r3, #0]
}
 800972e:	bf00      	nop
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	46020c00 	.word	0x46020c00
 8009740:	40022000 	.word	0x40022000

08009744 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009744:	b480      	push	{r7}
 8009746:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8009748:	4b05      	ldr	r3, [pc, #20]	@ (8009760 <HAL_RCC_EnableCSS+0x1c>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a04      	ldr	r2, [pc, #16]	@ (8009760 <HAL_RCC_EnableCSS+0x1c>)
 800974e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009752:	6013      	str	r3, [r2, #0]
}
 8009754:	bf00      	nop
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	46020c00 	.word	0x46020c00

08009764 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009768:	4b07      	ldr	r3, [pc, #28]	@ (8009788 <HAL_RCC_NMI_IRQHandler+0x24>)
 800976a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800976c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009774:	d105      	bne.n	8009782 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009776:	4b04      	ldr	r3, [pc, #16]	@ (8009788 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009778:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800977c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800977e:	f000 f805 	bl	800978c <HAL_RCC_CSSCallback>
  }
}
 8009782:	bf00      	nop
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	46020c00 	.word	0x46020c00

0800978c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800978c:	b480      	push	{r7}
 800978e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8009790:	bf00      	nop
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
	...

0800979c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80097a4:	4b3e      	ldr	r3, [pc, #248]	@ (80098a0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80097a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80097aa:	f003 0304 	and.w	r3, r3, #4
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d003      	beq.n	80097ba <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80097b2:	f7fe fceb 	bl	800818c <HAL_PWREx_GetVoltageRange>
 80097b6:	6178      	str	r0, [r7, #20]
 80097b8:	e019      	b.n	80097ee <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80097ba:	4b39      	ldr	r3, [pc, #228]	@ (80098a0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80097bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80097c0:	4a37      	ldr	r2, [pc, #220]	@ (80098a0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80097c2:	f043 0304 	orr.w	r3, r3, #4
 80097c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80097ca:	4b35      	ldr	r3, [pc, #212]	@ (80098a0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80097cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80097d0:	f003 0304 	and.w	r3, r3, #4
 80097d4:	60fb      	str	r3, [r7, #12]
 80097d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80097d8:	f7fe fcd8 	bl	800818c <HAL_PWREx_GetVoltageRange>
 80097dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80097de:	4b30      	ldr	r3, [pc, #192]	@ (80098a0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80097e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80097e4:	4a2e      	ldr	r2, [pc, #184]	@ (80098a0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80097e6:	f023 0304 	bic.w	r3, r3, #4
 80097ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097f4:	d003      	beq.n	80097fe <RCC_SetFlashLatencyFromMSIRange+0x62>
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097fc:	d109      	bne.n	8009812 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009804:	d202      	bcs.n	800980c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8009806:	2301      	movs	r3, #1
 8009808:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800980a:	e033      	b.n	8009874 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800980c:	2300      	movs	r3, #0
 800980e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009810:	e030      	b.n	8009874 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009818:	d208      	bcs.n	800982c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009820:	d102      	bne.n	8009828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8009822:	2303      	movs	r3, #3
 8009824:	613b      	str	r3, [r7, #16]
 8009826:	e025      	b.n	8009874 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e035      	b.n	8009898 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009832:	d90f      	bls.n	8009854 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d109      	bne.n	800984e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009840:	d902      	bls.n	8009848 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8009842:	2300      	movs	r3, #0
 8009844:	613b      	str	r3, [r7, #16]
 8009846:	e015      	b.n	8009874 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8009848:	2301      	movs	r3, #1
 800984a:	613b      	str	r3, [r7, #16]
 800984c:	e012      	b.n	8009874 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800984e:	2300      	movs	r3, #0
 8009850:	613b      	str	r3, [r7, #16]
 8009852:	e00f      	b.n	8009874 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800985a:	d109      	bne.n	8009870 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009862:	d102      	bne.n	800986a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8009864:	2301      	movs	r3, #1
 8009866:	613b      	str	r3, [r7, #16]
 8009868:	e004      	b.n	8009874 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800986a:	2302      	movs	r3, #2
 800986c:	613b      	str	r3, [r7, #16]
 800986e:	e001      	b.n	8009874 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8009870:	2301      	movs	r3, #1
 8009872:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009874:	4b0b      	ldr	r3, [pc, #44]	@ (80098a4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f023 020f 	bic.w	r2, r3, #15
 800987c:	4909      	ldr	r1, [pc, #36]	@ (80098a4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	4313      	orrs	r3, r2
 8009882:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8009884:	4b07      	ldr	r3, [pc, #28]	@ (80098a4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f003 030f 	and.w	r3, r3, #15
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	429a      	cmp	r2, r3
 8009890:	d001      	beq.n	8009896 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e000      	b.n	8009898 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3718      	adds	r7, #24
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	46020c00 	.word	0x46020c00
 80098a4:	40022000 	.word	0x40022000

080098a8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80098a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098ac:	b0c8      	sub	sp, #288	@ 0x120
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80098b4:	2300      	movs	r3, #0
 80098b6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80098ba:	2300      	movs	r3, #0
 80098bc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80098c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c8:	f002 0401 	and.w	r4, r2, #1
 80098cc:	2500      	movs	r5, #0
 80098ce:	ea54 0305 	orrs.w	r3, r4, r5
 80098d2:	d00b      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80098d4:	4bd5      	ldr	r3, [pc, #852]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80098da:	f023 0103 	bic.w	r1, r3, #3
 80098de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098e4:	4ad1      	ldr	r2, [pc, #836]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098e6:	430b      	orrs	r3, r1
 80098e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80098ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	f002 0802 	and.w	r8, r2, #2
 80098f8:	f04f 0900 	mov.w	r9, #0
 80098fc:	ea58 0309 	orrs.w	r3, r8, r9
 8009900:	d00b      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8009902:	4bca      	ldr	r3, [pc, #808]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009908:	f023 010c 	bic.w	r1, r3, #12
 800990c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009912:	4ac6      	ldr	r2, [pc, #792]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009914:	430b      	orrs	r3, r1
 8009916:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800991a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009922:	f002 0a04 	and.w	sl, r2, #4
 8009926:	f04f 0b00 	mov.w	fp, #0
 800992a:	ea5a 030b 	orrs.w	r3, sl, fp
 800992e:	d00b      	beq.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8009930:	4bbe      	ldr	r3, [pc, #760]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009936:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800993a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800993e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009940:	4aba      	ldr	r2, [pc, #744]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009942:	430b      	orrs	r3, r1
 8009944:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009948:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	f002 0308 	and.w	r3, r2, #8
 8009954:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009958:	2300      	movs	r3, #0
 800995a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800995e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009962:	460b      	mov	r3, r1
 8009964:	4313      	orrs	r3, r2
 8009966:	d00b      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8009968:	4bb0      	ldr	r3, [pc, #704]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800996a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800996e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009978:	4aac      	ldr	r2, [pc, #688]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800997a:	430b      	orrs	r3, r1
 800997c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009980:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	f002 0310 	and.w	r3, r2, #16
 800998c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009990:	2300      	movs	r3, #0
 8009992:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009996:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800999a:	460b      	mov	r3, r1
 800999c:	4313      	orrs	r3, r2
 800999e:	d00b      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80099a0:	4ba2      	ldr	r3, [pc, #648]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80099a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80099aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099b0:	4a9e      	ldr	r2, [pc, #632]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099b2:	430b      	orrs	r3, r1
 80099b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80099b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80099c4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80099c8:	2300      	movs	r3, #0
 80099ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80099ce:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80099d2:	460b      	mov	r3, r1
 80099d4:	4313      	orrs	r3, r2
 80099d6:	d00b      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80099d8:	4b94      	ldr	r3, [pc, #592]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80099de:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80099e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099e8:	4a90      	ldr	r2, [pc, #576]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099ea:	430b      	orrs	r3, r1
 80099ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80099f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	f002 0320 	and.w	r3, r2, #32
 80099fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009a00:	2300      	movs	r3, #0
 8009a02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009a06:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	d00b      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8009a10:	4b86      	ldr	r3, [pc, #536]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a16:	f023 0107 	bic.w	r1, r3, #7
 8009a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a20:	4a82      	ldr	r2, [pc, #520]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a22:	430b      	orrs	r3, r1
 8009a24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a30:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009a34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a3e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009a42:	460b      	mov	r3, r1
 8009a44:	4313      	orrs	r3, r2
 8009a46:	d00b      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8009a48:	4b78      	ldr	r3, [pc, #480]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a4e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8009a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a58:	4a74      	ldr	r2, [pc, #464]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a5a:	430b      	orrs	r3, r1
 8009a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a68:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a70:	2300      	movs	r3, #0
 8009a72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009a76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	d00b      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8009a80:	4b6a      	ldr	r3, [pc, #424]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a90:	4a66      	ldr	r2, [pc, #408]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a92:	430b      	orrs	r3, r1
 8009a94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8009aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009aae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	d00b      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8009ab8:	4b5c      	ldr	r3, [pc, #368]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009aba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009abe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ac8:	4a58      	ldr	r2, [pc, #352]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009aca:	430b      	orrs	r3, r1
 8009acc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009adc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009ae6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009aea:	460b      	mov	r3, r1
 8009aec:	4313      	orrs	r3, r2
 8009aee:	d00b      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8009af0:	4b4e      	ldr	r3, [pc, #312]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009af6:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8009afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009afe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b00:	4a4a      	ldr	r2, [pc, #296]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b02:	430b      	orrs	r3, r1
 8009b04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8009b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b10:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009b14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b18:	2300      	movs	r3, #0
 8009b1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009b22:	460b      	mov	r3, r1
 8009b24:	4313      	orrs	r3, r2
 8009b26:	d00b      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8009b28:	4b40      	ldr	r3, [pc, #256]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009b2e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8009b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b38:	4a3c      	ldr	r2, [pc, #240]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b3a:	430b      	orrs	r3, r1
 8009b3c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8009b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b50:	2300      	movs	r3, #0
 8009b52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009b56:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	d00c      	beq.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8009b60:	4b32      	ldr	r3, [pc, #200]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009b66:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b72:	4a2e      	ldr	r2, [pc, #184]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b74:	430b      	orrs	r3, r1
 8009b76:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b82:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8009b86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b90:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009b94:	460b      	mov	r3, r1
 8009b96:	4313      	orrs	r3, r2
 8009b98:	d00c      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8009b9a:	4b24      	ldr	r3, [pc, #144]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009ba0:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8009ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bac:	4a1f      	ldr	r2, [pc, #124]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009bae:	430b      	orrs	r3, r1
 8009bb0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009bc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009bca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009bce:	460b      	mov	r3, r1
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	d00c      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8009bd4:	4b15      	ldr	r3, [pc, #84]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009bda:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8009bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009be6:	4a11      	ldr	r2, [pc, #68]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009be8:	430b      	orrs	r3, r1
 8009bea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8009bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009bfe:	2300      	movs	r3, #0
 8009c00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009c04:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	d010      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8009c0e:	4b07      	ldr	r3, [pc, #28]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c14:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c20:	4a02      	ldr	r2, [pc, #8]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009c22:	430b      	orrs	r3, r1
 8009c24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009c28:	e002      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8009c2a:	bf00      	nop
 8009c2c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c38:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c40:	2300      	movs	r3, #0
 8009c42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c46:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	d04c      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c58:	2b80      	cmp	r3, #128	@ 0x80
 8009c5a:	d02d      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009c5c:	2b80      	cmp	r3, #128	@ 0x80
 8009c5e:	d827      	bhi.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009c60:	2b60      	cmp	r3, #96	@ 0x60
 8009c62:	d02b      	beq.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009c64:	2b60      	cmp	r3, #96	@ 0x60
 8009c66:	d823      	bhi.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009c68:	2b40      	cmp	r3, #64	@ 0x40
 8009c6a:	d006      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8009c6c:	2b40      	cmp	r3, #64	@ 0x40
 8009c6e:	d81f      	bhi.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d009      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009c74:	2b20      	cmp	r3, #32
 8009c76:	d011      	beq.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009c78:	e01a      	b.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009c7a:	4bc0      	ldr	r3, [pc, #768]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c7e:	4abf      	ldr	r2, [pc, #764]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c84:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009c86:	e01a      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c8c:	3308      	adds	r3, #8
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f002 fd36 	bl	800c700 <RCCEx_PLL2_Config>
 8009c94:	4603      	mov	r3, r0
 8009c96:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009c9a:	e010      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ca0:	332c      	adds	r3, #44	@ 0x2c
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f002 fdc4 	bl	800c830 <RCCEx_PLL3_Config>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009cae:	e006      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009cb6:	e002      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009cb8:	bf00      	nop
 8009cba:	e000      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cbe:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10d      	bne.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8009cc6:	4bad      	ldr	r3, [pc, #692]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009cc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ccc:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8009cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009cd8:	4aa8      	ldr	r2, [pc, #672]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009cda:	430b      	orrs	r3, r1
 8009cdc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009ce0:	e003      	b.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009ce6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009cf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d00:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009d04:	460b      	mov	r3, r1
 8009d06:	4313      	orrs	r3, r2
 8009d08:	d053      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8009d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d16:	d033      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8009d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d1c:	d82c      	bhi.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009d1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d22:	d02f      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8009d24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d28:	d826      	bhi.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009d2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d2e:	d008      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8009d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d34:	d820      	bhi.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00a      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d3e:	d011      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009d40:	e01a      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009d42:	4b8e      	ldr	r3, [pc, #568]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d46:	4a8d      	ldr	r2, [pc, #564]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d4c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009d4e:	e01a      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d54:	3308      	adds	r3, #8
 8009d56:	4618      	mov	r0, r3
 8009d58:	f002 fcd2 	bl	800c700 <RCCEx_PLL2_Config>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009d62:	e010      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d68:	332c      	adds	r3, #44	@ 0x2c
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f002 fd60 	bl	800c830 <RCCEx_PLL3_Config>
 8009d70:	4603      	mov	r3, r0
 8009d72:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009d76:	e006      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009d7e:	e002      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009d80:	bf00      	nop
 8009d82:	e000      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d86:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d10d      	bne.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8009d8e:	4b7b      	ldr	r3, [pc, #492]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009d90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d94:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8009d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009da0:	4a76      	ldr	r2, [pc, #472]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009da2:	430b      	orrs	r3, r1
 8009da4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009da8:	e003      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009daa:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009dae:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8009db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009dbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009dc8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009dcc:	460b      	mov	r3, r1
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	d046      	beq.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8009dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009dda:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009dde:	d028      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009de0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009de4:	d821      	bhi.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009de6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009dea:	d022      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009dec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009df0:	d81b      	bhi.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009df2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009df6:	d01c      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009df8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009dfc:	d815      	bhi.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009dfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e02:	d008      	beq.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8009e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e08:	d80f      	bhi.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d011      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e12:	d00e      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009e14:	e009      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e1a:	3308      	adds	r3, #8
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f002 fc6f 	bl	800c700 <RCCEx_PLL2_Config>
 8009e22:	4603      	mov	r3, r0
 8009e24:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009e28:	e004      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009e30:	e000      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8009e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e34:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10d      	bne.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e42:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009e4e:	4a4b      	ldr	r2, [pc, #300]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e50:	430b      	orrs	r3, r1
 8009e52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009e56:	e003      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e58:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009e5c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e68:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009e6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e70:	2300      	movs	r3, #0
 8009e72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e76:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	d03f      	beq.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8009e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e88:	2b04      	cmp	r3, #4
 8009e8a:	d81e      	bhi.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x622>
 8009e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e94 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e92:	bf00      	nop
 8009e94:	08009ed3 	.word	0x08009ed3
 8009e98:	08009ea9 	.word	0x08009ea9
 8009e9c:	08009eb7 	.word	0x08009eb7
 8009ea0:	08009ed3 	.word	0x08009ed3
 8009ea4:	08009ed3 	.word	0x08009ed3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ea8:	4b34      	ldr	r3, [pc, #208]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eac:	4a33      	ldr	r2, [pc, #204]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009eb2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009eb4:	e00e      	b.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eba:	332c      	adds	r3, #44	@ 0x2c
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f002 fcb7 	bl	800c830 <RCCEx_PLL3_Config>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009ec8:	e004      	b.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009ed0:	e000      	b.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 8009ed2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009ed4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10d      	bne.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8009edc:	4b27      	ldr	r3, [pc, #156]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009ede:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ee2:	f023 0107 	bic.w	r1, r3, #7
 8009ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009eee:	4a23      	ldr	r2, [pc, #140]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009ef0:	430b      	orrs	r3, r1
 8009ef2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009ef6:	e003      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ef8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009efc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8009f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f08:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009f0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f0e:	2300      	movs	r3, #0
 8009f10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f12:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009f16:	460b      	mov	r3, r1
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	d04c      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8009f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009f28:	d02a      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8009f2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009f2e:	d821      	bhi.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009f30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009f34:	d026      	beq.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8009f36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009f3a:	d81b      	bhi.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009f3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f40:	d00e      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009f42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f46:	d815      	bhi.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d01d      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8009f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f50:	d110      	bne.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009f52:	4b0a      	ldr	r3, [pc, #40]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f56:	4a09      	ldr	r2, [pc, #36]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f5c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009f5e:	e014      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f64:	332c      	adds	r3, #44	@ 0x2c
 8009f66:	4618      	mov	r0, r3
 8009f68:	f002 fc62 	bl	800c830 <RCCEx_PLL3_Config>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009f72:	e00a      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009f7a:	e006      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8009f7c:	46020c00 	.word	0x46020c00
        break;
 8009f80:	bf00      	nop
 8009f82:	e002      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8009f84:	bf00      	nop
 8009f86:	e000      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8009f88:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009f8a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10d      	bne.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8009f92:	4baf      	ldr	r3, [pc, #700]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009f98:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009fa4:	4aaa      	ldr	r2, [pc, #680]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009fa6:	430b      	orrs	r3, r1
 8009fa8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009fac:	e003      	b.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fae:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009fb2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009fc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	677b      	str	r3, [r7, #116]	@ 0x74
 8009fc8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009fcc:	460b      	mov	r3, r1
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	f000 80b5 	beq.w	800a13e <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009fda:	4b9d      	ldr	r3, [pc, #628]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009fe0:	f003 0304 	and.w	r3, r3, #4
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d113      	bne.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009fe8:	4b99      	ldr	r3, [pc, #612]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009fee:	4a98      	ldr	r2, [pc, #608]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009ff0:	f043 0304 	orr.w	r3, r3, #4
 8009ff4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009ff8:	4b95      	ldr	r3, [pc, #596]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ffe:	f003 0304 	and.w	r3, r3, #4
 800a002:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800a006:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800a00a:	2301      	movs	r3, #1
 800a00c:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a010:	4b90      	ldr	r3, [pc, #576]	@ (800a254 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800a012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a014:	4a8f      	ldr	r2, [pc, #572]	@ (800a254 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800a016:	f043 0301 	orr.w	r3, r3, #1
 800a01a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a01c:	f7f8 f8be 	bl	800219c <HAL_GetTick>
 800a020:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a024:	e00b      	b.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a026:	f7f8 f8b9 	bl	800219c <HAL_GetTick>
 800a02a:	4602      	mov	r2, r0
 800a02c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	2b02      	cmp	r3, #2
 800a034:	d903      	bls.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a03c:	e005      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a03e:	4b85      	ldr	r3, [pc, #532]	@ (800a254 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800a040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	2b00      	cmp	r3, #0
 800a048:	d0ed      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800a04a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d165      	bne.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a052:	4b7f      	ldr	r3, [pc, #508]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a058:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a05c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800a060:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a064:	2b00      	cmp	r3, #0
 800a066:	d023      	beq.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800a068:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a06c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800a070:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a074:	4293      	cmp	r3, r2
 800a076:	d01b      	beq.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a078:	4b75      	ldr	r3, [pc, #468]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a07a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a07e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a082:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a086:	4b72      	ldr	r3, [pc, #456]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a08c:	4a70      	ldr	r2, [pc, #448]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a08e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a092:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a096:	4b6e      	ldr	r3, [pc, #440]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a09c:	4a6c      	ldr	r2, [pc, #432]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a09e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a0a6:	4a6a      	ldr	r2, [pc, #424]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a0a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a0ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a0b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a0b4:	f003 0301 	and.w	r3, r3, #1
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d019      	beq.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0bc:	f7f8 f86e 	bl	800219c <HAL_GetTick>
 800a0c0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0c4:	e00d      	b.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0c6:	f7f8 f869 	bl	800219c <HAL_GetTick>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d0:	1ad2      	subs	r2, r2, r3
 800a0d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d903      	bls.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800a0da:	2303      	movs	r3, #3
 800a0dc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800a0e0:	e006      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0e2:	4b5b      	ldr	r3, [pc, #364]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a0e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0e8:	f003 0302 	and.w	r3, r3, #2
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d0ea      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800a0f0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10d      	bne.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800a0f8:	4b55      	ldr	r3, [pc, #340]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a0fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a106:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800a10a:	4a51      	ldr	r2, [pc, #324]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a10c:	430b      	orrs	r3, r1
 800a10e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a112:	e008      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a114:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a118:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800a11c:	e003      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a11e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a122:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a126:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d107      	bne.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a12e:	4b48      	ldr	r3, [pc, #288]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a130:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a134:	4a46      	ldr	r2, [pc, #280]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a136:	f023 0304 	bic.w	r3, r3, #4
 800a13a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800a13e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a146:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a14a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a14c:	2300      	movs	r3, #0
 800a14e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a150:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a154:	460b      	mov	r3, r1
 800a156:	4313      	orrs	r3, r2
 800a158:	d042      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800a15a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a15e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a162:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a166:	d022      	beq.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x906>
 800a168:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a16c:	d81b      	bhi.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a16e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a172:	d011      	beq.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800a174:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a178:	d815      	bhi.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d019      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800a17e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a182:	d110      	bne.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a184:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a188:	3308      	adds	r3, #8
 800a18a:	4618      	mov	r0, r3
 800a18c:	f002 fab8 	bl	800c700 <RCCEx_PLL2_Config>
 800a190:	4603      	mov	r3, r0
 800a192:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a196:	e00d      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a198:	4b2d      	ldr	r3, [pc, #180]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a19a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a19c:	4a2c      	ldr	r2, [pc, #176]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a19e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1a2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800a1a4:	e006      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a1ac:	e002      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800a1ae:	bf00      	nop
 800a1b0:	e000      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800a1b2:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a1b4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10d      	bne.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800a1bc:	4b24      	ldr	r3, [pc, #144]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a1c2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800a1c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a1ce:	4a20      	ldr	r2, [pc, #128]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1d0:	430b      	orrs	r3, r1
 800a1d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a1d6:	e003      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1d8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a1dc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a1e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a1ec:	663b      	str	r3, [r7, #96]	@ 0x60
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a1f2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	d031      	beq.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800a1fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a200:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a204:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a208:	d00b      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800a20a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a20e:	d804      	bhi.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800a210:	2b00      	cmp	r3, #0
 800a212:	d008      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800a214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a218:	d007      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a220:	e004      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a222:	bf00      	nop
 800a224:	e002      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a226:	bf00      	nop
 800a228:	e000      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a22a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a22c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a230:	2b00      	cmp	r3, #0
 800a232:	d111      	bne.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800a234:	4b06      	ldr	r3, [pc, #24]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a236:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a23a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a23e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a242:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a246:	4a02      	ldr	r2, [pc, #8]	@ (800a250 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a248:	430b      	orrs	r3, r1
 800a24a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a24e:	e007      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800a250:	46020c00 	.word	0x46020c00
 800a254:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a258:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a25c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800a260:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a268:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a26c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a26e:	2300      	movs	r3, #0
 800a270:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a272:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a276:	460b      	mov	r3, r1
 800a278:	4313      	orrs	r3, r2
 800a27a:	d00c      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800a27c:	4bb2      	ldr	r3, [pc, #712]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a27e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a282:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800a286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a28a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a28e:	4aae      	ldr	r2, [pc, #696]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a290:	430b      	orrs	r3, r1
 800a292:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800a296:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a2a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2a8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	d019      	beq.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800a2b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a2ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2be:	d105      	bne.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a2c0:	4ba1      	ldr	r3, [pc, #644]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2c4:	4aa0      	ldr	r2, [pc, #640]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a2ca:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800a2cc:	4b9e      	ldr	r3, [pc, #632]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a2d2:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a2d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a2de:	4a9a      	ldr	r2, [pc, #616]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2e0:	430b      	orrs	r3, r1
 800a2e2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800a2e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a2f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	4313      	orrs	r3, r2
 800a300:	d00c      	beq.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800a302:	4b91      	ldr	r3, [pc, #580]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a308:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a30c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a310:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a314:	4a8c      	ldr	r2, [pc, #560]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a316:	430b      	orrs	r3, r1
 800a318:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800a31c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a328:	643b      	str	r3, [r7, #64]	@ 0x40
 800a32a:	2300      	movs	r3, #0
 800a32c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a32e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a332:	460b      	mov	r3, r1
 800a334:	4313      	orrs	r3, r2
 800a336:	d00c      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800a338:	4b83      	ldr	r3, [pc, #524]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a33a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a33e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a342:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a346:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a34a:	4a7f      	ldr	r2, [pc, #508]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a34c:	430b      	orrs	r3, r1
 800a34e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800a352:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a35e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a360:	2300      	movs	r3, #0
 800a362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a364:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a368:	460b      	mov	r3, r1
 800a36a:	4313      	orrs	r3, r2
 800a36c:	d00c      	beq.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800a36e:	4b76      	ldr	r3, [pc, #472]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a370:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a374:	f023 0118 	bic.w	r1, r3, #24
 800a378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a37c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800a380:	4a71      	ldr	r2, [pc, #452]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a382:	430b      	orrs	r3, r1
 800a384:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a388:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a390:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800a394:	633b      	str	r3, [r7, #48]	@ 0x30
 800a396:	2300      	movs	r3, #0
 800a398:	637b      	str	r3, [r7, #52]	@ 0x34
 800a39a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	d032      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800a3a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a3ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a3b0:	d105      	bne.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3b2:	4b65      	ldr	r3, [pc, #404]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b6:	4a64      	ldr	r2, [pc, #400]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3bc:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800a3be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a3c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a3ca:	d108      	bne.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a3cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3d0:	3308      	adds	r3, #8
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f002 f994 	bl	800c700 <RCCEx_PLL2_Config>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800a3de:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d10d      	bne.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800a3e6:	4b58      	ldr	r3, [pc, #352]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a3ec:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a3f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a3f8:	4a53      	ldr	r2, [pc, #332]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3fa:	430b      	orrs	r3, r1
 800a3fc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a400:	e003      	b.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a402:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a406:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800a40a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	2100      	movs	r1, #0
 800a414:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a41c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a420:	460b      	mov	r3, r1
 800a422:	4313      	orrs	r3, r2
 800a424:	d04a      	beq.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800a426:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a42a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a42e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a432:	d01e      	beq.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800a434:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a438:	d825      	bhi.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a43a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a43e:	d00e      	beq.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800a440:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a444:	d81f      	bhi.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a446:	2b00      	cmp	r3, #0
 800a448:	d021      	beq.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800a44a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a44e:	d11a      	bne.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a450:	4b3d      	ldr	r3, [pc, #244]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a454:	4a3c      	ldr	r2, [pc, #240]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a45a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a45c:	e018      	b.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a45e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a462:	3308      	adds	r3, #8
 800a464:	4618      	mov	r0, r3
 800a466:	f002 f94b 	bl	800c700 <RCCEx_PLL2_Config>
 800a46a:	4603      	mov	r3, r0
 800a46c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a470:	e00e      	b.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a476:	332c      	adds	r3, #44	@ 0x2c
 800a478:	4618      	mov	r0, r3
 800a47a:	f002 f9d9 	bl	800c830 <RCCEx_PLL3_Config>
 800a47e:	4603      	mov	r3, r0
 800a480:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a484:	e004      	b.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a48c:	e000      	b.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800a48e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a490:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10d      	bne.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800a498:	4b2b      	ldr	r3, [pc, #172]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a49a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a49e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a4a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a4aa:	4927      	ldr	r1, [pc, #156]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a4b2:	e003      	b.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4b4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a4b8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800a4bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800a4c8:	623b      	str	r3, [r7, #32]
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4ce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	d03d      	beq.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800a4d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4e4:	d00e      	beq.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800a4e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4ea:	d815      	bhi.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d017      	beq.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a4f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4f4:	d110      	bne.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4f6:	4b14      	ldr	r3, [pc, #80]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4fa:	4a13      	ldr	r2, [pc, #76]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a500:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a502:	e00e      	b.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a508:	3308      	adds	r3, #8
 800a50a:	4618      	mov	r0, r3
 800a50c:	f002 f8f8 	bl	800c700 <RCCEx_PLL2_Config>
 800a510:	4603      	mov	r3, r0
 800a512:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a516:	e004      	b.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a51e:	e000      	b.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a520:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a522:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a526:	2b00      	cmp	r3, #0
 800a528:	d110      	bne.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800a52a:	4b07      	ldr	r3, [pc, #28]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a52c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a530:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a53c:	4902      	ldr	r1, [pc, #8]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a53e:	4313      	orrs	r3, r2
 800a540:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800a544:	e006      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800a546:	bf00      	nop
 800a548:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a54c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a550:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800a554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a560:	61bb      	str	r3, [r7, #24]
 800a562:	2300      	movs	r3, #0
 800a564:	61fb      	str	r3, [r7, #28]
 800a566:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a56a:	460b      	mov	r3, r1
 800a56c:	4313      	orrs	r3, r2
 800a56e:	d00c      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800a570:	4b68      	ldr	r3, [pc, #416]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a572:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a576:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800a57a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a57e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a582:	4964      	ldr	r1, [pc, #400]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a584:	4313      	orrs	r3, r2
 800a586:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a58a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a592:	2100      	movs	r1, #0
 800a594:	6139      	str	r1, [r7, #16]
 800a596:	f003 0302 	and.w	r3, r3, #2
 800a59a:	617b      	str	r3, [r7, #20]
 800a59c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	d036      	beq.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800a5a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00c      	beq.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800a5b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a5b6:	d113      	bne.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a5b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5bc:	3308      	adds	r3, #8
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f002 f89e 	bl	800c700 <RCCEx_PLL2_Config>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a5ca:	e00d      	b.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a5cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5d0:	332c      	adds	r3, #44	@ 0x2c
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f002 f92c 	bl	800c830 <RCCEx_PLL3_Config>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a5de:	e003      	b.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a5e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5e8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10d      	bne.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800a5f0:	4b48      	ldr	r3, [pc, #288]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a5f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a5f6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a5fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800a602:	4944      	ldr	r1, [pc, #272]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a604:	4313      	orrs	r3, r2
 800a606:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a60a:	e003      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a60c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a610:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61c:	2100      	movs	r1, #0
 800a61e:	60b9      	str	r1, [r7, #8]
 800a620:	f003 0304 	and.w	r3, r3, #4
 800a624:	60fb      	str	r3, [r7, #12]
 800a626:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a62a:	460b      	mov	r3, r1
 800a62c:	4313      	orrs	r3, r2
 800a62e:	d024      	beq.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800a630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a634:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d108      	bne.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a63c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a640:	332c      	adds	r3, #44	@ 0x2c
 800a642:	4618      	mov	r0, r3
 800a644:	f002 f8f4 	bl	800c830 <RCCEx_PLL3_Config>
 800a648:	4603      	mov	r3, r0
 800a64a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800a64e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10d      	bne.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800a656:	4b2f      	ldr	r3, [pc, #188]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a658:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a65c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800a660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a664:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a668:	492a      	ldr	r1, [pc, #168]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a66a:	4313      	orrs	r3, r2
 800a66c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a670:	e003      	b.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a672:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a676:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800a67a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a682:	2100      	movs	r1, #0
 800a684:	6039      	str	r1, [r7, #0]
 800a686:	f003 0308 	and.w	r3, r3, #8
 800a68a:	607b      	str	r3, [r7, #4]
 800a68c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a690:	460b      	mov	r3, r1
 800a692:	4313      	orrs	r3, r2
 800a694:	d036      	beq.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800a696:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a69a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a69e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a6a2:	d00d      	beq.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800a6a4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a6a8:	d811      	bhi.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a6aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6ae:	d012      	beq.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a6b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6b4:	d80b      	bhi.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00d      	beq.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a6ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6be:	d106      	bne.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a6c0:	4b14      	ldr	r3, [pc, #80]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c4:	4a13      	ldr	r2, [pc, #76]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a6c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6ca:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800a6cc:	e004      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a6d4:	e000      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800a6d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6d8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10d      	bne.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800a6e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a6e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a6e6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800a6ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a6f2:	4908      	ldr	r1, [pc, #32]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a6fa:	e003      	b.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6fc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a700:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800a704:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800a708:	4618      	mov	r0, r3
 800a70a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a70e:	46bd      	mov	sp, r7
 800a710:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a714:	46020c00 	.word	0x46020c00

0800a718 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a718:	b480      	push	{r7}
 800a71a:	b089      	sub	sp, #36	@ 0x24
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800a720:	4ba6      	ldr	r3, [pc, #664]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a728:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a72a:	4ba4      	ldr	r3, [pc, #656]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a72c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a72e:	f003 0303 	and.w	r3, r3, #3
 800a732:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a734:	4ba1      	ldr	r3, [pc, #644]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a738:	0a1b      	lsrs	r3, r3, #8
 800a73a:	f003 030f 	and.w	r3, r3, #15
 800a73e:	3301      	adds	r3, #1
 800a740:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a742:	4b9e      	ldr	r3, [pc, #632]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a746:	091b      	lsrs	r3, r3, #4
 800a748:	f003 0301 	and.w	r3, r3, #1
 800a74c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a74e:	4b9b      	ldr	r3, [pc, #620]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a752:	08db      	lsrs	r3, r3, #3
 800a754:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	fb02 f303 	mul.w	r3, r2, r3
 800a75e:	ee07 3a90 	vmov	s15, r3
 800a762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a766:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d062      	beq.n	800a836 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	2b03      	cmp	r3, #3
 800a774:	f200 8081 	bhi.w	800a87a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d024      	beq.n	800a7c8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	2b02      	cmp	r3, #2
 800a782:	d17a      	bne.n	800a87a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	ee07 3a90 	vmov	s15, r3
 800a78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a78e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a796:	4b89      	ldr	r3, [pc, #548]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a79e:	ee07 3a90 	vmov	s15, r3
 800a7a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7aa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a7ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a7b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7c6:	e08f      	b.n	800a8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a7c8:	4b7c      	ldr	r3, [pc, #496]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d005      	beq.n	800a7e0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800a7d4:	4b79      	ldr	r3, [pc, #484]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	0f1b      	lsrs	r3, r3, #28
 800a7da:	f003 030f 	and.w	r3, r3, #15
 800a7de:	e006      	b.n	800a7ee <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800a7e0:	4b76      	ldr	r3, [pc, #472]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a7e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a7e6:	041b      	lsls	r3, r3, #16
 800a7e8:	0f1b      	lsrs	r3, r3, #28
 800a7ea:	f003 030f 	and.w	r3, r3, #15
 800a7ee:	4a76      	ldr	r2, [pc, #472]	@ (800a9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7f4:	ee07 3a90 	vmov	s15, r3
 800a7f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	ee07 3a90 	vmov	s15, r3
 800a802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	ee07 3a90 	vmov	s15, r3
 800a810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a814:	ed97 6a02 	vldr	s12, [r7, #8]
 800a818:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a81c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a820:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a824:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a828:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a82c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a830:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a834:	e058      	b.n	800a8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	ee07 3a90 	vmov	s15, r3
 800a83c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a840:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a848:	4b5c      	ldr	r3, [pc, #368]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a84a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a84c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a850:	ee07 3a90 	vmov	s15, r3
 800a854:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a858:	ed97 6a02 	vldr	s12, [r7, #8]
 800a85c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a860:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a864:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a868:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a86c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a870:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a874:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a878:	e036      	b.n	800a8e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a87a:	4b50      	ldr	r3, [pc, #320]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a882:	2b00      	cmp	r3, #0
 800a884:	d005      	beq.n	800a892 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800a886:	4b4d      	ldr	r3, [pc, #308]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	0f1b      	lsrs	r3, r3, #28
 800a88c:	f003 030f 	and.w	r3, r3, #15
 800a890:	e006      	b.n	800a8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800a892:	4b4a      	ldr	r3, [pc, #296]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a894:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a898:	041b      	lsls	r3, r3, #16
 800a89a:	0f1b      	lsrs	r3, r3, #28
 800a89c:	f003 030f 	and.w	r3, r3, #15
 800a8a0:	4a49      	ldr	r2, [pc, #292]	@ (800a9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a8a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8a6:	ee07 3a90 	vmov	s15, r3
 800a8aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	ee07 3a90 	vmov	s15, r3
 800a8b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	ee07 3a90 	vmov	s15, r3
 800a8c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8ca:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a8ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8da:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a8de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8e6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a8e8:	4b34      	ldr	r3, [pc, #208]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d017      	beq.n	800a924 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a8f4:	4b31      	ldr	r3, [pc, #196]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8f8:	0a5b      	lsrs	r3, r3, #9
 800a8fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8fe:	ee07 3a90 	vmov	s15, r3
 800a902:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800a906:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a90a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a90e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a91a:	ee17 2a90 	vmov	r2, s15
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	601a      	str	r2, [r3, #0]
 800a922:	e002      	b.n	800a92a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a92a:	4b24      	ldr	r3, [pc, #144]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a92c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a92e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d017      	beq.n	800a966 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a936:	4b21      	ldr	r3, [pc, #132]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a93a:	0c1b      	lsrs	r3, r3, #16
 800a93c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a940:	ee07 3a90 	vmov	s15, r3
 800a944:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a948:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a94c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a950:	edd7 6a07 	vldr	s13, [r7, #28]
 800a954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a95c:	ee17 2a90 	vmov	r2, s15
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	605a      	str	r2, [r3, #4]
 800a964:	e002      	b.n	800a96c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a96c:	4b13      	ldr	r3, [pc, #76]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a970:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a974:	2b00      	cmp	r3, #0
 800a976:	d017      	beq.n	800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a978:	4b10      	ldr	r3, [pc, #64]	@ (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a97a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a97c:	0e1b      	lsrs	r3, r3, #24
 800a97e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a982:	ee07 3a90 	vmov	s15, r3
 800a986:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800a98a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a98e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a992:	edd7 6a07 	vldr	s13, [r7, #28]
 800a996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a99a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a99e:	ee17 2a90 	vmov	r2, s15
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a9a6:	e002      	b.n	800a9ae <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	609a      	str	r2, [r3, #8]
}
 800a9ae:	bf00      	nop
 800a9b0:	3724      	adds	r7, #36	@ 0x24
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr
 800a9ba:	bf00      	nop
 800a9bc:	46020c00 	.word	0x46020c00
 800a9c0:	4b742400 	.word	0x4b742400
 800a9c4:	46000000 	.word	0x46000000
 800a9c8:	0800de80 	.word	0x0800de80

0800a9cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b089      	sub	sp, #36	@ 0x24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a9d4:	4ba6      	ldr	r3, [pc, #664]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a9d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9dc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a9de:	4ba4      	ldr	r3, [pc, #656]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a9e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9e2:	f003 0303 	and.w	r3, r3, #3
 800a9e6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800a9e8:	4ba1      	ldr	r3, [pc, #644]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a9ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9ec:	0a1b      	lsrs	r3, r3, #8
 800a9ee:	f003 030f 	and.w	r3, r3, #15
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800a9f6:	4b9e      	ldr	r3, [pc, #632]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a9f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9fa:	091b      	lsrs	r3, r3, #4
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800aa02:	4b9b      	ldr	r3, [pc, #620]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa06:	08db      	lsrs	r3, r3, #3
 800aa08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	fb02 f303 	mul.w	r3, r2, r3
 800aa12:	ee07 3a90 	vmov	s15, r3
 800aa16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa1a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	2b03      	cmp	r3, #3
 800aa22:	d062      	beq.n	800aaea <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	2b03      	cmp	r3, #3
 800aa28:	f200 8081 	bhi.w	800ab2e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d024      	beq.n	800aa7c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	d17a      	bne.n	800ab2e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	ee07 3a90 	vmov	s15, r3
 800aa3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa42:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800aa46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa4a:	4b89      	ldr	r3, [pc, #548]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa52:	ee07 3a90 	vmov	s15, r3
 800aa56:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa5a:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa5e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800ac78 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800aa62:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aa66:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aa72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa7a:	e08f      	b.n	800ab9c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800aa7c:	4b7c      	ldr	r3, [pc, #496]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d005      	beq.n	800aa94 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800aa88:	4b79      	ldr	r3, [pc, #484]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	0f1b      	lsrs	r3, r3, #28
 800aa8e:	f003 030f 	and.w	r3, r3, #15
 800aa92:	e006      	b.n	800aaa2 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800aa94:	4b76      	ldr	r3, [pc, #472]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aa9a:	041b      	lsls	r3, r3, #16
 800aa9c:	0f1b      	lsrs	r3, r3, #28
 800aa9e:	f003 030f 	and.w	r3, r3, #15
 800aaa2:	4a76      	ldr	r2, [pc, #472]	@ (800ac7c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800aaa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaa8:	ee07 3a90 	vmov	s15, r3
 800aaac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	ee07 3a90 	vmov	s15, r3
 800aab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	ee07 3a90 	vmov	s15, r3
 800aac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac8:	ed97 6a02 	vldr	s12, [r7, #8]
 800aacc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800ac78 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800aad0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aad4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aad8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aadc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800aae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aae4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aae8:	e058      	b.n	800ab9c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	ee07 3a90 	vmov	s15, r3
 800aaf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800aaf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aafc:	4b5c      	ldr	r3, [pc, #368]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aafe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab04:	ee07 3a90 	vmov	s15, r3
 800ab08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab0c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab10:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800ac78 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ab14:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ab18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab20:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ab24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab2c:	e036      	b.n	800ab9c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ab2e:	4b50      	ldr	r3, [pc, #320]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d005      	beq.n	800ab46 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800ab3a:	4b4d      	ldr	r3, [pc, #308]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	0f1b      	lsrs	r3, r3, #28
 800ab40:	f003 030f 	and.w	r3, r3, #15
 800ab44:	e006      	b.n	800ab54 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800ab46:	4b4a      	ldr	r3, [pc, #296]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ab4c:	041b      	lsls	r3, r3, #16
 800ab4e:	0f1b      	lsrs	r3, r3, #28
 800ab50:	f003 030f 	and.w	r3, r3, #15
 800ab54:	4a49      	ldr	r2, [pc, #292]	@ (800ac7c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800ab56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab5a:	ee07 3a90 	vmov	s15, r3
 800ab5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	ee07 3a90 	vmov	s15, r3
 800ab68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	ee07 3a90 	vmov	s15, r3
 800ab76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab7a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab7e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800ac78 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ab82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ab92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab9a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800ab9c:	4b34      	ldr	r3, [pc, #208]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aba0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d017      	beq.n	800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800aba8:	4b31      	ldr	r3, [pc, #196]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abac:	0a5b      	lsrs	r3, r3, #9
 800abae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abb2:	ee07 3a90 	vmov	s15, r3
 800abb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800abba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abbe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800abc2:	edd7 6a07 	vldr	s13, [r7, #28]
 800abc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abce:	ee17 2a90 	vmov	r2, s15
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	e002      	b.n	800abde <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800abde:	4b24      	ldr	r3, [pc, #144]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d017      	beq.n	800ac1a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800abea:	4b21      	ldr	r3, [pc, #132]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abee:	0c1b      	lsrs	r3, r3, #16
 800abf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abf4:	ee07 3a90 	vmov	s15, r3
 800abf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800abfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac00:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ac04:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac10:	ee17 2a90 	vmov	r2, s15
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	605a      	str	r2, [r3, #4]
 800ac18:	e002      	b.n	800ac20 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800ac20:	4b13      	ldr	r3, [pc, #76]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ac22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d017      	beq.n	800ac5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ac2c:	4b10      	ldr	r3, [pc, #64]	@ (800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ac2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac30:	0e1b      	lsrs	r3, r3, #24
 800ac32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac36:	ee07 3a90 	vmov	s15, r3
 800ac3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800ac3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac42:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ac46:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac52:	ee17 2a90 	vmov	r2, s15
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac5a:	e002      	b.n	800ac62 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	609a      	str	r2, [r3, #8]
}
 800ac62:	bf00      	nop
 800ac64:	3724      	adds	r7, #36	@ 0x24
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	46020c00 	.word	0x46020c00
 800ac74:	4b742400 	.word	0x4b742400
 800ac78:	46000000 	.word	0x46000000
 800ac7c:	0800de80 	.word	0x0800de80

0800ac80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b089      	sub	sp, #36	@ 0x24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800ac88:	4ba6      	ldr	r3, [pc, #664]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac90:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800ac92:	4ba4      	ldr	r3, [pc, #656]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac96:	f003 0303 	and.w	r3, r3, #3
 800ac9a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800ac9c:	4ba1      	ldr	r3, [pc, #644]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aca0:	0a1b      	lsrs	r3, r3, #8
 800aca2:	f003 030f 	and.w	r3, r3, #15
 800aca6:	3301      	adds	r3, #1
 800aca8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800acaa:	4b9e      	ldr	r3, [pc, #632]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800acac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acae:	091b      	lsrs	r3, r3, #4
 800acb0:	f003 0301 	and.w	r3, r3, #1
 800acb4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800acb6:	4b9b      	ldr	r3, [pc, #620]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800acb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acba:	08db      	lsrs	r3, r3, #3
 800acbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	fb02 f303 	mul.w	r3, r2, r3
 800acc6:	ee07 3a90 	vmov	s15, r3
 800acca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acce:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2b03      	cmp	r3, #3
 800acd6:	d062      	beq.n	800ad9e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	2b03      	cmp	r3, #3
 800acdc:	f200 8081 	bhi.w	800ade2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d024      	beq.n	800ad30 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d17a      	bne.n	800ade2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800af28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800acfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acfe:	4b89      	ldr	r3, [pc, #548]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad06:	ee07 3a90 	vmov	s15, r3
 800ad0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad12:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ad16:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ad1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad22:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ad26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad2a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800ad2e:	e08f      	b.n	800ae50 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ad30:	4b7c      	ldr	r3, [pc, #496]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d005      	beq.n	800ad48 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800ad3c:	4b79      	ldr	r3, [pc, #484]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	0f1b      	lsrs	r3, r3, #28
 800ad42:	f003 030f 	and.w	r3, r3, #15
 800ad46:	e006      	b.n	800ad56 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800ad48:	4b76      	ldr	r3, [pc, #472]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ad4e:	041b      	lsls	r3, r3, #16
 800ad50:	0f1b      	lsrs	r3, r3, #28
 800ad52:	f003 030f 	and.w	r3, r3, #15
 800ad56:	4a76      	ldr	r2, [pc, #472]	@ (800af30 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800ad58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad5c:	ee07 3a90 	vmov	s15, r3
 800ad60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	ee07 3a90 	vmov	s15, r3
 800ad6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	ee07 3a90 	vmov	s15, r3
 800ad78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad7c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad80:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ad84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad90:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ad94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad9c:	e058      	b.n	800ae50 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	ee07 3a90 	vmov	s15, r3
 800ada4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ada8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800af28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800adac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adb0:	4b5c      	ldr	r3, [pc, #368]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800adb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adb8:	ee07 3a90 	vmov	s15, r3
 800adbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800adc0:	ed97 6a02 	vldr	s12, [r7, #8]
 800adc4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800adc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800adcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800add0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800add4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800add8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800addc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ade0:	e036      	b.n	800ae50 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ade2:	4b50      	ldr	r3, [pc, #320]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800adea:	2b00      	cmp	r3, #0
 800adec:	d005      	beq.n	800adfa <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800adee:	4b4d      	ldr	r3, [pc, #308]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	0f1b      	lsrs	r3, r3, #28
 800adf4:	f003 030f 	and.w	r3, r3, #15
 800adf8:	e006      	b.n	800ae08 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800adfa:	4b4a      	ldr	r3, [pc, #296]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800adfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ae00:	041b      	lsls	r3, r3, #16
 800ae02:	0f1b      	lsrs	r3, r3, #28
 800ae04:	f003 030f 	and.w	r3, r3, #15
 800ae08:	4a49      	ldr	r2, [pc, #292]	@ (800af30 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800ae0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae0e:	ee07 3a90 	vmov	s15, r3
 800ae12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	ee07 3a90 	vmov	s15, r3
 800ae1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	ee07 3a90 	vmov	s15, r3
 800ae2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae2e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae32:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ae36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae42:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ae46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae4e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800ae50:	4b34      	ldr	r3, [pc, #208]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d017      	beq.n	800ae8c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae5c:	4b31      	ldr	r3, [pc, #196]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae60:	0a5b      	lsrs	r3, r3, #9
 800ae62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae66:	ee07 3a90 	vmov	s15, r3
 800ae6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800ae6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae72:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae76:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae82:	ee17 2a90 	vmov	r2, s15
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	601a      	str	r2, [r3, #0]
 800ae8a:	e002      	b.n	800ae92 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800ae92:	4b24      	ldr	r3, [pc, #144]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d017      	beq.n	800aece <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae9e:	4b21      	ldr	r3, [pc, #132]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aea2:	0c1b      	lsrs	r3, r3, #16
 800aea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aea8:	ee07 3a90 	vmov	s15, r3
 800aeac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800aeb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aeb4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800aeb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800aebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aec4:	ee17 2a90 	vmov	r2, s15
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	605a      	str	r2, [r3, #4]
 800aecc:	e002      	b.n	800aed4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800aed4:	4b13      	ldr	r3, [pc, #76]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aed8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d017      	beq.n	800af10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800aee0:	4b10      	ldr	r3, [pc, #64]	@ (800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aee4:	0e1b      	lsrs	r3, r3, #24
 800aee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aeea:	ee07 3a90 	vmov	s15, r3
 800aeee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800aef2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aef6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800aefa:	edd7 6a07 	vldr	s13, [r7, #28]
 800aefe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af06:	ee17 2a90 	vmov	r2, s15
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800af0e:	e002      	b.n	800af16 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	609a      	str	r2, [r3, #8]
}
 800af16:	bf00      	nop
 800af18:	3724      	adds	r7, #36	@ 0x24
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	46020c00 	.word	0x46020c00
 800af28:	4b742400 	.word	0x4b742400
 800af2c:	46000000 	.word	0x46000000
 800af30:	0800de80 	.word	0x0800de80

0800af34 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b08e      	sub	sp, #56	@ 0x38
 800af38:	af00      	add	r7, sp, #0
 800af3a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800af3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af42:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800af46:	430b      	orrs	r3, r1
 800af48:	d145      	bne.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800af4a:	4ba7      	ldr	r3, [pc, #668]	@ (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af54:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800af56:	4ba4      	ldr	r3, [pc, #656]	@ (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af5c:	f003 0302 	and.w	r3, r3, #2
 800af60:	2b02      	cmp	r3, #2
 800af62:	d108      	bne.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800af64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af6a:	d104      	bne.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800af6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af70:	637b      	str	r3, [r7, #52]	@ 0x34
 800af72:	f001 bb5a 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800af76:	4b9c      	ldr	r3, [pc, #624]	@ (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af84:	d114      	bne.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800af86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af8c:	d110      	bne.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af8e:	4b96      	ldr	r3, [pc, #600]	@ (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af9c:	d103      	bne.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800af9e:	23fa      	movs	r3, #250	@ 0xfa
 800afa0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800afa2:	f001 bb42 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800afa6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800afaa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800afac:	f001 bb3d 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800afb0:	4b8d      	ldr	r3, [pc, #564]	@ (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afbc:	d107      	bne.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800afbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800afc4:	d103      	bne.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800afc6:	4b89      	ldr	r3, [pc, #548]	@ (800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800afc8:	637b      	str	r3, [r7, #52]	@ 0x34
 800afca:	f001 bb2e 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800afce:	2300      	movs	r3, #0
 800afd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800afd2:	f001 bb2a 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800afd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afda:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800afde:	430b      	orrs	r3, r1
 800afe0:	d151      	bne.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800afe2:	4b81      	ldr	r3, [pc, #516]	@ (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800afe4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800afe8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800afec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800afee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff0:	2b80      	cmp	r3, #128	@ 0x80
 800aff2:	d035      	beq.n	800b060 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800aff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff6:	2b80      	cmp	r3, #128	@ 0x80
 800aff8:	d841      	bhi.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800affa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affc:	2b60      	cmp	r3, #96	@ 0x60
 800affe:	d02a      	beq.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800b000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b002:	2b60      	cmp	r3, #96	@ 0x60
 800b004:	d83b      	bhi.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b008:	2b40      	cmp	r3, #64	@ 0x40
 800b00a:	d009      	beq.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00e:	2b40      	cmp	r3, #64	@ 0x40
 800b010:	d835      	bhi.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00c      	beq.n	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800b018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01a:	2b20      	cmp	r3, #32
 800b01c:	d012      	beq.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b01e:	e02e      	b.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b020:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b024:	4618      	mov	r0, r3
 800b026:	f7ff fb77 	bl	800a718 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b02c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b02e:	f001 bafc 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b032:	f107 0318 	add.w	r3, r7, #24
 800b036:	4618      	mov	r0, r3
 800b038:	f7ff fcc8 	bl	800a9cc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b040:	f001 baf3 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b044:	f107 030c 	add.w	r3, r7, #12
 800b048:	4618      	mov	r0, r3
 800b04a:	f7ff fe19 	bl	800ac80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b052:	f001 baea 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b056:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b05a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b05c:	f001 bae5 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b060:	4b61      	ldr	r3, [pc, #388]	@ (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b06c:	d103      	bne.n	800b076 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800b06e:	4b60      	ldr	r3, [pc, #384]	@ (800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b070:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b072:	f001 bada 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b076:	2300      	movs	r3, #0
 800b078:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b07a:	f001 bad6 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800b07e:	2300      	movs	r3, #0
 800b080:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b082:	f001 bad2 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b08a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b08e:	430b      	orrs	r3, r1
 800b090:	d158      	bne.n	800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b092:	4b55      	ldr	r3, [pc, #340]	@ (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b094:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b098:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b09c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0a4:	d03b      	beq.n	800b11e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800b0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0ac:	d846      	bhi.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0b4:	d02e      	beq.n	800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0bc:	d83e      	bhi.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0c4:	d00b      	beq.n	800b0de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0cc:	d836      	bhi.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00d      	beq.n	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800b0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0da:	d012      	beq.n	800b102 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800b0dc:	e02e      	b.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7ff fb18 	bl	800a718 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0ec:	f001 ba9d 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0f0:	f107 0318 	add.w	r3, r7, #24
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7ff fc69 	bl	800a9cc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0fe:	f001 ba94 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b102:	f107 030c 	add.w	r3, r7, #12
 800b106:	4618      	mov	r0, r3
 800b108:	f7ff fdba 	bl	800ac80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b110:	f001 ba8b 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b114:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b118:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b11a:	f001 ba86 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b11e:	4b32      	ldr	r3, [pc, #200]	@ (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b12a:	d103      	bne.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800b12c:	4b30      	ldr	r3, [pc, #192]	@ (800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b12e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b130:	f001 ba7b 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b134:	2300      	movs	r3, #0
 800b136:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b138:	f001 ba77 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800b13c:	2300      	movs	r3, #0
 800b13e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b140:	f001 ba73 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800b144:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b148:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b14c:	430b      	orrs	r3, r1
 800b14e:	d126      	bne.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800b150:	4b25      	ldr	r3, [pc, #148]	@ (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b152:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b156:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b15a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800b15c:	4b22      	ldr	r3, [pc, #136]	@ (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b168:	d106      	bne.n	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800b16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d103      	bne.n	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800b170:	4b1f      	ldr	r3, [pc, #124]	@ (800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b172:	637b      	str	r3, [r7, #52]	@ 0x34
 800b174:	f001 ba59 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800b178:	4b1b      	ldr	r3, [pc, #108]	@ (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b184:	d107      	bne.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800b186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b18c:	d103      	bne.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800b18e:	4b19      	ldr	r3, [pc, #100]	@ (800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b190:	637b      	str	r3, [r7, #52]	@ 0x34
 800b192:	f001 ba4a 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800b196:	2300      	movs	r3, #0
 800b198:	637b      	str	r3, [r7, #52]	@ 0x34
 800b19a:	f001 ba46 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800b19e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1a2:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800b1a6:	430b      	orrs	r3, r1
 800b1a8:	d16e      	bne.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b1aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b1ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b1b0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800b1b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b1bc:	d03d      	beq.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b1c4:	d85c      	bhi.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1cc:	d014      	beq.n	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1d4:	d854      	bhi.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d01f      	beq.n	800b21c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800b1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b1e2:	d012      	beq.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800b1e4:	e04c      	b.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b1e6:	bf00      	nop
 800b1e8:	46020c00 	.word	0x46020c00
 800b1ec:	0007a120 	.word	0x0007a120
 800b1f0:	00f42400 	.word	0x00f42400
 800b1f4:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7ff fa8b 	bl	800a718 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b204:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b206:	f001 ba10 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b20a:	f107 0318 	add.w	r3, r7, #24
 800b20e:	4618      	mov	r0, r3
 800b210:	f7ff fbdc 	bl	800a9cc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b218:	f001 ba07 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b21c:	4ba7      	ldr	r3, [pc, #668]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b228:	d103      	bne.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800b22a:	4ba5      	ldr	r3, [pc, #660]	@ (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b22c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b22e:	f001 b9fc 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b232:	2300      	movs	r3, #0
 800b234:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b236:	f001 b9f8 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b23a:	4ba0      	ldr	r3, [pc, #640]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f003 0320 	and.w	r3, r3, #32
 800b242:	2b20      	cmp	r3, #32
 800b244:	d118      	bne.n	800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b246:	4b9d      	ldr	r3, [pc, #628]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d005      	beq.n	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b252:	4b9a      	ldr	r3, [pc, #616]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	0e1b      	lsrs	r3, r3, #24
 800b258:	f003 030f 	and.w	r3, r3, #15
 800b25c:	e006      	b.n	800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b25e:	4b97      	ldr	r3, [pc, #604]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b260:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b264:	041b      	lsls	r3, r3, #16
 800b266:	0e1b      	lsrs	r3, r3, #24
 800b268:	f003 030f 	and.w	r3, r3, #15
 800b26c:	4a95      	ldr	r2, [pc, #596]	@ (800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b26e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b272:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b274:	f001 b9d9 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b278:	2300      	movs	r3, #0
 800b27a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b27c:	f001 b9d5 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800b280:	2300      	movs	r3, #0
 800b282:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b284:	f001 b9d1 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b28c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800b290:	430b      	orrs	r3, r1
 800b292:	d17f      	bne.n	800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b294:	4b89      	ldr	r3, [pc, #548]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b296:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b29a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b29e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800b2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d165      	bne.n	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b2a6:	4b85      	ldr	r3, [pc, #532]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b2ac:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800b2b0:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b2b8:	d034      	beq.n	800b324 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800b2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2bc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b2c0:	d853      	bhi.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800b2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2c8:	d00b      	beq.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2d0:	d84b      	bhi.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d016      	beq.n	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800b2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b2de:	d009      	beq.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b2e0:	e043      	b.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7ff fa16 	bl	800a718 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ee:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b2f0:	f001 b99b 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2f4:	f107 0318 	add.w	r3, r7, #24
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7ff fb67 	bl	800a9cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b302:	f001 b992 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b306:	4b6d      	ldr	r3, [pc, #436]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b30e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b312:	d103      	bne.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800b314:	4b6a      	ldr	r3, [pc, #424]	@ (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b316:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b318:	f001 b987 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800b31c:	2300      	movs	r3, #0
 800b31e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b320:	f001 b983 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b324:	4b65      	ldr	r3, [pc, #404]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f003 0320 	and.w	r3, r3, #32
 800b32c:	2b20      	cmp	r3, #32
 800b32e:	d118      	bne.n	800b362 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b330:	4b62      	ldr	r3, [pc, #392]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d005      	beq.n	800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800b33c:	4b5f      	ldr	r3, [pc, #380]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b33e:	689b      	ldr	r3, [r3, #8]
 800b340:	0e1b      	lsrs	r3, r3, #24
 800b342:	f003 030f 	and.w	r3, r3, #15
 800b346:	e006      	b.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b348:	4b5c      	ldr	r3, [pc, #368]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b34a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b34e:	041b      	lsls	r3, r3, #16
 800b350:	0e1b      	lsrs	r3, r3, #24
 800b352:	f003 030f 	and.w	r3, r3, #15
 800b356:	4a5b      	ldr	r2, [pc, #364]	@ (800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b35c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b35e:	f001 b964 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800b362:	2300      	movs	r3, #0
 800b364:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b366:	f001 b960 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800b36a:	2300      	movs	r3, #0
 800b36c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b36e:	f001 b95c 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800b372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b374:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b378:	d108      	bne.n	800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b37a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b37e:	4618      	mov	r0, r3
 800b380:	f7ff f9ca 	bl	800a718 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b386:	637b      	str	r3, [r7, #52]	@ 0x34
 800b388:	f001 b94f 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800b38c:	2300      	movs	r3, #0
 800b38e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b390:	f001 b94b 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800b394:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b398:	1e51      	subs	r1, r2, #1
 800b39a:	430b      	orrs	r3, r1
 800b39c:	d136      	bne.n	800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b39e:	4b47      	ldr	r3, [pc, #284]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b3a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b3a4:	f003 0303 	and.w	r3, r3, #3
 800b3a8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d104      	bne.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800b3b0:	f7fe f968 	bl	8009684 <HAL_RCC_GetPCLK2Freq>
 800b3b4:	6378      	str	r0, [r7, #52]	@ 0x34
 800b3b6:	f001 b938 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800b3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d104      	bne.n	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b3c0:	f7fe f830 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800b3c4:	6378      	str	r0, [r7, #52]	@ 0x34
 800b3c6:	f001 b930 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b3ca:	4b3c      	ldr	r3, [pc, #240]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3d6:	d106      	bne.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800b3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3da:	2b02      	cmp	r3, #2
 800b3dc:	d103      	bne.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800b3de:	4b3a      	ldr	r3, [pc, #232]	@ (800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b3e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3e2:	f001 b922 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b3e6:	4b35      	ldr	r3, [pc, #212]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b3e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b3ec:	f003 0302 	and.w	r3, r3, #2
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d107      	bne.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f6:	2b03      	cmp	r3, #3
 800b3f8:	d104      	bne.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800b3fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b400:	f001 b913 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800b404:	2300      	movs	r3, #0
 800b406:	637b      	str	r3, [r7, #52]	@ 0x34
 800b408:	f001 b90f 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800b40c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b410:	1e91      	subs	r1, r2, #2
 800b412:	430b      	orrs	r3, r1
 800b414:	d136      	bne.n	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b416:	4b29      	ldr	r3, [pc, #164]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b41c:	f003 030c 	and.w	r3, r3, #12
 800b420:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b424:	2b00      	cmp	r3, #0
 800b426:	d104      	bne.n	800b432 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b428:	f7fe f918 	bl	800965c <HAL_RCC_GetPCLK1Freq>
 800b42c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b42e:	f001 b8fc 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800b432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b434:	2b04      	cmp	r3, #4
 800b436:	d104      	bne.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b438:	f7fd fff4 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800b43c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b43e:	f001 b8f4 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b442:	4b1e      	ldr	r3, [pc, #120]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b44a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b44e:	d106      	bne.n	800b45e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b452:	2b08      	cmp	r3, #8
 800b454:	d103      	bne.n	800b45e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800b456:	4b1c      	ldr	r3, [pc, #112]	@ (800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b458:	637b      	str	r3, [r7, #52]	@ 0x34
 800b45a:	f001 b8e6 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b45e:	4b17      	ldr	r3, [pc, #92]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b464:	f003 0302 	and.w	r3, r3, #2
 800b468:	2b02      	cmp	r3, #2
 800b46a:	d107      	bne.n	800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800b46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46e:	2b0c      	cmp	r3, #12
 800b470:	d104      	bne.n	800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800b472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b476:	637b      	str	r3, [r7, #52]	@ 0x34
 800b478:	f001 b8d7 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800b47c:	2300      	movs	r3, #0
 800b47e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b480:	f001 b8d3 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800b484:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b488:	1f11      	subs	r1, r2, #4
 800b48a:	430b      	orrs	r3, r1
 800b48c:	d13f      	bne.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b48e:	4b0b      	ldr	r3, [pc, #44]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b494:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b498:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d104      	bne.n	800b4aa <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b4a0:	f7fe f8dc 	bl	800965c <HAL_RCC_GetPCLK1Freq>
 800b4a4:	6378      	str	r0, [r7, #52]	@ 0x34
 800b4a6:	f001 b8c0 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ac:	2b10      	cmp	r3, #16
 800b4ae:	d10d      	bne.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b4b0:	f7fd ffb8 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800b4b4:	6378      	str	r0, [r7, #52]	@ 0x34
 800b4b6:	f001 b8b8 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b4ba:	bf00      	nop
 800b4bc:	46020c00 	.word	0x46020c00
 800b4c0:	02dc6c00 	.word	0x02dc6c00
 800b4c4:	0800de80 	.word	0x0800de80
 800b4c8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b4cc:	4ba8      	ldr	r3, [pc, #672]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4d8:	d106      	bne.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800b4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4dc:	2b20      	cmp	r3, #32
 800b4de:	d103      	bne.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800b4e0:	4ba4      	ldr	r3, [pc, #656]	@ (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b4e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4e4:	f001 b8a1 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b4e8:	4ba1      	ldr	r3, [pc, #644]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b4ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b4ee:	f003 0302 	and.w	r3, r3, #2
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	d107      	bne.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f8:	2b30      	cmp	r3, #48	@ 0x30
 800b4fa:	d104      	bne.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800b4fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b500:	637b      	str	r3, [r7, #52]	@ 0x34
 800b502:	f001 b892 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800b506:	2300      	movs	r3, #0
 800b508:	637b      	str	r3, [r7, #52]	@ 0x34
 800b50a:	f001 b88e 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800b50e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b512:	f1a2 0108 	sub.w	r1, r2, #8
 800b516:	430b      	orrs	r3, r1
 800b518:	d136      	bne.n	800b588 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b51a:	4b95      	ldr	r3, [pc, #596]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b51c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b520:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b524:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d104      	bne.n	800b536 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b52c:	f7fe f896 	bl	800965c <HAL_RCC_GetPCLK1Freq>
 800b530:	6378      	str	r0, [r7, #52]	@ 0x34
 800b532:	f001 b87a 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800b536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b538:	2b40      	cmp	r3, #64	@ 0x40
 800b53a:	d104      	bne.n	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b53c:	f7fd ff72 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800b540:	6378      	str	r0, [r7, #52]	@ 0x34
 800b542:	f001 b872 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b546:	4b8a      	ldr	r3, [pc, #552]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b54e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b552:	d106      	bne.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800b554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b556:	2b80      	cmp	r3, #128	@ 0x80
 800b558:	d103      	bne.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800b55a:	4b86      	ldr	r3, [pc, #536]	@ (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b55c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b55e:	f001 b864 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b562:	4b83      	ldr	r3, [pc, #524]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b564:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b568:	f003 0302 	and.w	r3, r3, #2
 800b56c:	2b02      	cmp	r3, #2
 800b56e:	d107      	bne.n	800b580 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800b570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b572:	2bc0      	cmp	r3, #192	@ 0xc0
 800b574:	d104      	bne.n	800b580 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800b576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b57a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b57c:	f001 b855 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800b580:	2300      	movs	r3, #0
 800b582:	637b      	str	r3, [r7, #52]	@ 0x34
 800b584:	f001 b851 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800b588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b58c:	f1a2 0110 	sub.w	r1, r2, #16
 800b590:	430b      	orrs	r3, r1
 800b592:	d139      	bne.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b594:	4b76      	ldr	r3, [pc, #472]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b59a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b59e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d104      	bne.n	800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b5a6:	f7fe f859 	bl	800965c <HAL_RCC_GetPCLK1Freq>
 800b5aa:	6378      	str	r0, [r7, #52]	@ 0x34
 800b5ac:	f001 b83d 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800b5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5b6:	d104      	bne.n	800b5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b5b8:	f7fd ff34 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800b5bc:	6378      	str	r0, [r7, #52]	@ 0x34
 800b5be:	f001 b834 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800b5c2:	4b6b      	ldr	r3, [pc, #428]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b5ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5ce:	d107      	bne.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800b5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5d6:	d103      	bne.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800b5d8:	4b66      	ldr	r3, [pc, #408]	@ (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b5da:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5dc:	f001 b825 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800b5e0:	4b63      	ldr	r3, [pc, #396]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5e6:	f003 0302 	and.w	r3, r3, #2
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d108      	bne.n	800b600 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b5f4:	d104      	bne.n	800b600 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800b5f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5fc:	f001 b815 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b600:	2300      	movs	r3, #0
 800b602:	637b      	str	r3, [r7, #52]	@ 0x34
 800b604:	f001 b811 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800b608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b60c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800b610:	430b      	orrs	r3, r1
 800b612:	d139      	bne.n	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800b614:	4b56      	ldr	r3, [pc, #344]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b616:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b61a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b61e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800b620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b622:	2b00      	cmp	r3, #0
 800b624:	d104      	bne.n	800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b626:	f7fe f819 	bl	800965c <HAL_RCC_GetPCLK1Freq>
 800b62a:	6378      	str	r0, [r7, #52]	@ 0x34
 800b62c:	f000 bffd 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800b630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b636:	d104      	bne.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b638:	f7fd fef4 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800b63c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b63e:	f000 bff4 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800b642:	4b4b      	ldr	r3, [pc, #300]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b64a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b64e:	d107      	bne.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800b650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b652:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b656:	d103      	bne.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800b658:	4b46      	ldr	r3, [pc, #280]	@ (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b65a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b65c:	f000 bfe5 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800b660:	4b43      	ldr	r3, [pc, #268]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b666:	f003 0302 	and.w	r3, r3, #2
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	d108      	bne.n	800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800b66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b670:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b674:	d104      	bne.n	800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800b676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b67a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b67c:	f000 bfd5 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b680:	2300      	movs	r3, #0
 800b682:	637b      	str	r3, [r7, #52]	@ 0x34
 800b684:	f000 bfd1 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800b688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b68c:	f1a2 0120 	sub.w	r1, r2, #32
 800b690:	430b      	orrs	r3, r1
 800b692:	d158      	bne.n	800b746 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b694:	4b36      	ldr	r3, [pc, #216]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b696:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b69a:	f003 0307 	and.w	r3, r3, #7
 800b69e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800b6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d104      	bne.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800b6a6:	f7fe f801 	bl	80096ac <HAL_RCC_GetPCLK3Freq>
 800b6aa:	6378      	str	r0, [r7, #52]	@ 0x34
 800b6ac:	f000 bfbd 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d104      	bne.n	800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b6b6:	f7fd feb5 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800b6ba:	6378      	str	r0, [r7, #52]	@ 0x34
 800b6bc:	f000 bfb5 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800b6c0:	4b2b      	ldr	r3, [pc, #172]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b6c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6cc:	d106      	bne.n	800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d103      	bne.n	800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800b6d4:	4b27      	ldr	r3, [pc, #156]	@ (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b6d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6d8:	f000 bfa7 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800b6dc:	4b24      	ldr	r3, [pc, #144]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6e2:	f003 0302 	and.w	r3, r3, #2
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	d107      	bne.n	800b6fa <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ec:	2b03      	cmp	r3, #3
 800b6ee:	d104      	bne.n	800b6fa <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800b6f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b6f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6f6:	f000 bf98 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800b6fa:	4b1d      	ldr	r3, [pc, #116]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f003 0320 	and.w	r3, r3, #32
 800b702:	2b20      	cmp	r3, #32
 800b704:	d11b      	bne.n	800b73e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800b706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b708:	2b04      	cmp	r3, #4
 800b70a:	d118      	bne.n	800b73e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b70c:	4b18      	ldr	r3, [pc, #96]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b714:	2b00      	cmp	r3, #0
 800b716:	d005      	beq.n	800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800b718:	4b15      	ldr	r3, [pc, #84]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	0e1b      	lsrs	r3, r3, #24
 800b71e:	f003 030f 	and.w	r3, r3, #15
 800b722:	e006      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800b724:	4b12      	ldr	r3, [pc, #72]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b726:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b72a:	041b      	lsls	r3, r3, #16
 800b72c:	0e1b      	lsrs	r3, r3, #24
 800b72e:	f003 030f 	and.w	r3, r3, #15
 800b732:	4a11      	ldr	r2, [pc, #68]	@ (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b738:	637b      	str	r3, [r7, #52]	@ 0x34
 800b73a:	f000 bf76 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800b73e:	2300      	movs	r3, #0
 800b740:	637b      	str	r3, [r7, #52]	@ 0x34
 800b742:	f000 bf72 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800b746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b74a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b74e:	430b      	orrs	r3, r1
 800b750:	d172      	bne.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800b752:	4b07      	ldr	r3, [pc, #28]	@ (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b754:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b758:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b75c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800b75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b764:	d10a      	bne.n	800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b766:	f7fd fe5d 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800b76a:	6378      	str	r0, [r7, #52]	@ 0x34
 800b76c:	f000 bf5d 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b770:	46020c00 	.word	0x46020c00
 800b774:	00f42400 	.word	0x00f42400
 800b778:	0800de80 	.word	0x0800de80
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800b77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b77e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b782:	d108      	bne.n	800b796 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b784:	f107 0318 	add.w	r3, r7, #24
 800b788:	4618      	mov	r0, r3
 800b78a:	f7ff f91f 	bl	800a9cc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800b78e:	6a3b      	ldr	r3, [r7, #32]
 800b790:	637b      	str	r3, [r7, #52]	@ 0x34
 800b792:	f000 bf4a 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800b796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d104      	bne.n	800b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800b79c:	f7fd ff44 	bl	8009628 <HAL_RCC_GetHCLKFreq>
 800b7a0:	6378      	str	r0, [r7, #52]	@ 0x34
 800b7a2:	f000 bf42 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800b7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b7ac:	d122      	bne.n	800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b7ae:	4bb0      	ldr	r3, [pc, #704]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f003 0320 	and.w	r3, r3, #32
 800b7b6:	2b20      	cmp	r3, #32
 800b7b8:	d118      	bne.n	800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b7ba:	4bad      	ldr	r3, [pc, #692]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d005      	beq.n	800b7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800b7c6:	4baa      	ldr	r3, [pc, #680]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	0e1b      	lsrs	r3, r3, #24
 800b7cc:	f003 030f 	and.w	r3, r3, #15
 800b7d0:	e006      	b.n	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800b7d2:	4ba7      	ldr	r3, [pc, #668]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b7d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b7d8:	041b      	lsls	r3, r3, #16
 800b7da:	0e1b      	lsrs	r3, r3, #24
 800b7dc:	f003 030f 	and.w	r3, r3, #15
 800b7e0:	4aa4      	ldr	r2, [pc, #656]	@ (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b7e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7e8:	f000 bf1f 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7f0:	f000 bf1b 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800b7f4:	4b9e      	ldr	r3, [pc, #632]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b800:	d107      	bne.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b804:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b808:	d103      	bne.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800b80a:	4b9b      	ldr	r3, [pc, #620]	@ (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b80c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b80e:	f000 bf0c 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800b812:	4b97      	ldr	r3, [pc, #604]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b81a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b81e:	d107      	bne.n	800b830 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800b820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b822:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b826:	d103      	bne.n	800b830 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800b828:	4b93      	ldr	r3, [pc, #588]	@ (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b82a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b82c:	f000 befd 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800b830:	2300      	movs	r3, #0
 800b832:	637b      	str	r3, [r7, #52]	@ 0x34
 800b834:	f000 bef9 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800b838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b83c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b840:	430b      	orrs	r3, r1
 800b842:	d158      	bne.n	800b8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800b844:	4b8a      	ldr	r3, [pc, #552]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b846:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b84a:	f003 0307 	and.w	r3, r3, #7
 800b84e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b852:	2b04      	cmp	r3, #4
 800b854:	d84b      	bhi.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800b856:	a201      	add	r2, pc, #4	@ (adr r2, 800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800b858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b85c:	0800b895 	.word	0x0800b895
 800b860:	0800b871 	.word	0x0800b871
 800b864:	0800b883 	.word	0x0800b883
 800b868:	0800b89f 	.word	0x0800b89f
 800b86c:	0800b8a9 	.word	0x0800b8a9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b874:	4618      	mov	r0, r3
 800b876:	f7fe ff4f 	bl	800a718 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b87c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b87e:	f000 bed4 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b882:	f107 030c 	add.w	r3, r7, #12
 800b886:	4618      	mov	r0, r3
 800b888:	f7ff f9fa 	bl	800ac80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b890:	f000 becb 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b894:	f7fd fec8 	bl	8009628 <HAL_RCC_GetHCLKFreq>
 800b898:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b89a:	f000 bec6 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b89e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b8a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b8a4:	f000 bec1 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b8a8:	4b71      	ldr	r3, [pc, #452]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f003 0320 	and.w	r3, r3, #32
 800b8b0:	2b20      	cmp	r3, #32
 800b8b2:	d118      	bne.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b8b4:	4b6e      	ldr	r3, [pc, #440]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d005      	beq.n	800b8cc <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800b8c0:	4b6b      	ldr	r3, [pc, #428]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	0e1b      	lsrs	r3, r3, #24
 800b8c6:	f003 030f 	and.w	r3, r3, #15
 800b8ca:	e006      	b.n	800b8da <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800b8cc:	4b68      	ldr	r3, [pc, #416]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b8ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b8d2:	041b      	lsls	r3, r3, #16
 800b8d4:	0e1b      	lsrs	r3, r3, #24
 800b8d6:	f003 030f 	and.w	r3, r3, #15
 800b8da:	4a66      	ldr	r2, [pc, #408]	@ (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b8dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b8e2:	f000 bea2 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b8ea:	f000 be9e 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b8f2:	f000 be9a 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800b8f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8fa:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800b8fe:	430b      	orrs	r3, r1
 800b900:	d167      	bne.n	800b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800b902:	4b5b      	ldr	r3, [pc, #364]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b908:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b90c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b910:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b914:	d036      	beq.n	800b984 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800b916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b918:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b91c:	d855      	bhi.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b920:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b924:	d029      	beq.n	800b97a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800b926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b928:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b92c:	d84d      	bhi.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b934:	d013      	beq.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800b936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b938:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b93c:	d845      	bhi.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b940:	2b00      	cmp	r3, #0
 800b942:	d015      	beq.n	800b970 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800b944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b94a:	d13e      	bne.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b94c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b950:	4618      	mov	r0, r3
 800b952:	f7fe fee1 	bl	800a718 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b958:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b95a:	f000 be66 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b95e:	f107 030c 	add.w	r3, r7, #12
 800b962:	4618      	mov	r0, r3
 800b964:	f7ff f98c 	bl	800ac80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b96c:	f000 be5d 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b970:	f7fd fe5a 	bl	8009628 <HAL_RCC_GetHCLKFreq>
 800b974:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b976:	f000 be58 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b97a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b97e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b980:	f000 be53 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b984:	4b3a      	ldr	r3, [pc, #232]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f003 0320 	and.w	r3, r3, #32
 800b98c:	2b20      	cmp	r3, #32
 800b98e:	d118      	bne.n	800b9c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b990:	4b37      	ldr	r3, [pc, #220]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b992:	689b      	ldr	r3, [r3, #8]
 800b994:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d005      	beq.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800b99c:	4b34      	ldr	r3, [pc, #208]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	0e1b      	lsrs	r3, r3, #24
 800b9a2:	f003 030f 	and.w	r3, r3, #15
 800b9a6:	e006      	b.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b9a8:	4b31      	ldr	r3, [pc, #196]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b9ae:	041b      	lsls	r3, r3, #16
 800b9b0:	0e1b      	lsrs	r3, r3, #24
 800b9b2:	f003 030f 	and.w	r3, r3, #15
 800b9b6:	4a2f      	ldr	r2, [pc, #188]	@ (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b9b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b9be:	f000 be34 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b9c6:	f000 be30 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b9ce:	f000 be2c 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800b9d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9d6:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800b9da:	430b      	orrs	r3, r1
 800b9dc:	d152      	bne.n	800ba84 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b9de:	4b24      	ldr	r3, [pc, #144]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b9e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b9e8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800b9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d104      	bne.n	800b9fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b9f0:	f7fd fe34 	bl	800965c <HAL_RCC_GetPCLK1Freq>
 800b9f4:	6378      	str	r0, [r7, #52]	@ 0x34
 800b9f6:	f000 be18 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba00:	d104      	bne.n	800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ba02:	f7fd fd0f 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800ba06:	6378      	str	r0, [r7, #52]	@ 0x34
 800ba08:	f000 be0f 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800ba0c:	4b18      	ldr	r3, [pc, #96]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba18:	d107      	bne.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba20:	d103      	bne.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800ba22:	4b15      	ldr	r3, [pc, #84]	@ (800ba78 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ba24:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba26:	f000 be00 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800ba2a:	4b11      	ldr	r3, [pc, #68]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f003 0320 	and.w	r3, r3, #32
 800ba32:	2b20      	cmp	r3, #32
 800ba34:	d122      	bne.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800ba36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ba3c:	d11e      	bne.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ba3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d005      	beq.n	800ba56 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800ba4a:	4b09      	ldr	r3, [pc, #36]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ba4c:	689b      	ldr	r3, [r3, #8]
 800ba4e:	0e1b      	lsrs	r3, r3, #24
 800ba50:	f003 030f 	and.w	r3, r3, #15
 800ba54:	e006      	b.n	800ba64 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800ba56:	4b06      	ldr	r3, [pc, #24]	@ (800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ba58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ba5c:	041b      	lsls	r3, r3, #16
 800ba5e:	0e1b      	lsrs	r3, r3, #24
 800ba60:	f003 030f 	and.w	r3, r3, #15
 800ba64:	4a03      	ldr	r2, [pc, #12]	@ (800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ba66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba6c:	f000 bddd 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ba70:	46020c00 	.word	0x46020c00
 800ba74:	0800de80 	.word	0x0800de80
 800ba78:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba80:	f000 bdd3 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800ba84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba88:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800ba8c:	430b      	orrs	r3, r1
 800ba8e:	d14c      	bne.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ba90:	4ba8      	ldr	r3, [pc, #672]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba96:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ba9a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800ba9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d104      	bne.n	800baac <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800baa2:	f7fd fddb 	bl	800965c <HAL_RCC_GetPCLK1Freq>
 800baa6:	6378      	str	r0, [r7, #52]	@ 0x34
 800baa8:	f000 bdbf 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800baac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bab2:	d104      	bne.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bab4:	f7fd fcb6 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800bab8:	6378      	str	r0, [r7, #52]	@ 0x34
 800baba:	f000 bdb6 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800babe:	4b9d      	ldr	r3, [pc, #628]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800baca:	d107      	bne.n	800badc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800bacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bad2:	d103      	bne.n	800badc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800bad4:	4b98      	ldr	r3, [pc, #608]	@ (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bad6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bad8:	f000 bda7 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800badc:	4b95      	ldr	r3, [pc, #596]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f003 0320 	and.w	r3, r3, #32
 800bae4:	2b20      	cmp	r3, #32
 800bae6:	d11c      	bne.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800bae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800baee:	d118      	bne.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800baf0:	4b90      	ldr	r3, [pc, #576]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d005      	beq.n	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800bafc:	4b8d      	ldr	r3, [pc, #564]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	0e1b      	lsrs	r3, r3, #24
 800bb02:	f003 030f 	and.w	r3, r3, #15
 800bb06:	e006      	b.n	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800bb08:	4b8a      	ldr	r3, [pc, #552]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bb0e:	041b      	lsls	r3, r3, #16
 800bb10:	0e1b      	lsrs	r3, r3, #24
 800bb12:	f003 030f 	and.w	r3, r3, #15
 800bb16:	4a89      	ldr	r2, [pc, #548]	@ (800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bb18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb1e:	f000 bd84 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800bb22:	2300      	movs	r3, #0
 800bb24:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb26:	f000 bd80 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800bb2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb2e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800bb32:	430b      	orrs	r3, r1
 800bb34:	d158      	bne.n	800bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800bb36:	4b7f      	ldr	r3, [pc, #508]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bb3c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bb40:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800bb42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb44:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb46:	d028      	beq.n	800bb9a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800bb48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb4a:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb4c:	d848      	bhi.n	800bbe0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800bb4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb50:	2b80      	cmp	r3, #128	@ 0x80
 800bb52:	d00e      	beq.n	800bb72 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800bb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb56:	2b80      	cmp	r3, #128	@ 0x80
 800bb58:	d842      	bhi.n	800bbe0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800bb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d003      	beq.n	800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800bb60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb62:	2b40      	cmp	r3, #64	@ 0x40
 800bb64:	d014      	beq.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800bb66:	e03b      	b.n	800bbe0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800bb68:	f7fd fda0 	bl	80096ac <HAL_RCC_GetPCLK3Freq>
 800bb6c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bb6e:	f000 bd5c 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bb72:	4b70      	ldr	r3, [pc, #448]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bb7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb7e:	d103      	bne.n	800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800bb80:	4b6d      	ldr	r3, [pc, #436]	@ (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bb82:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bb84:	f000 bd51 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb8c:	f000 bd4d 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800bb90:	f7fd fc48 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800bb94:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bb96:	f000 bd48 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bb9a:	4b66      	ldr	r3, [pc, #408]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 0320 	and.w	r3, r3, #32
 800bba2:	2b20      	cmp	r3, #32
 800bba4:	d118      	bne.n	800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bba6:	4b63      	ldr	r3, [pc, #396]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d005      	beq.n	800bbbe <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800bbb2:	4b60      	ldr	r3, [pc, #384]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	0e1b      	lsrs	r3, r3, #24
 800bbb8:	f003 030f 	and.w	r3, r3, #15
 800bbbc:	e006      	b.n	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800bbbe:	4b5d      	ldr	r3, [pc, #372]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bbc4:	041b      	lsls	r3, r3, #16
 800bbc6:	0e1b      	lsrs	r3, r3, #24
 800bbc8:	f003 030f 	and.w	r3, r3, #15
 800bbcc:	4a5b      	ldr	r2, [pc, #364]	@ (800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bbce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbd2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bbd4:	f000 bd29 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bbdc:	f000 bd25 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bbe4:	f000 bd21 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800bbe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbec:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800bbf0:	430b      	orrs	r3, r1
 800bbf2:	d14c      	bne.n	800bc8e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800bbf4:	4b4f      	ldr	r3, [pc, #316]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bbfa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bbfe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800bc00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d104      	bne.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bc06:	f7fd fd29 	bl	800965c <HAL_RCC_GetPCLK1Freq>
 800bc0a:	6378      	str	r0, [r7, #52]	@ 0x34
 800bc0c:	f000 bd0d 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800bc10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bc16:	d104      	bne.n	800bc22 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bc18:	f7fd fc04 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800bc1c:	6378      	str	r0, [r7, #52]	@ 0x34
 800bc1e:	f000 bd04 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800bc22:	4b44      	ldr	r3, [pc, #272]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bc2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc2e:	d107      	bne.n	800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800bc30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc36:	d103      	bne.n	800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800bc38:	4b3f      	ldr	r3, [pc, #252]	@ (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bc3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc3c:	f000 bcf5 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800bc40:	4b3c      	ldr	r3, [pc, #240]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f003 0320 	and.w	r3, r3, #32
 800bc48:	2b20      	cmp	r3, #32
 800bc4a:	d11c      	bne.n	800bc86 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800bc4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc4e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bc52:	d118      	bne.n	800bc86 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bc54:	4b37      	ldr	r3, [pc, #220]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d005      	beq.n	800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800bc60:	4b34      	ldr	r3, [pc, #208]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	0e1b      	lsrs	r3, r3, #24
 800bc66:	f003 030f 	and.w	r3, r3, #15
 800bc6a:	e006      	b.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800bc6c:	4b31      	ldr	r3, [pc, #196]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bc72:	041b      	lsls	r3, r3, #16
 800bc74:	0e1b      	lsrs	r3, r3, #24
 800bc76:	f003 030f 	and.w	r3, r3, #15
 800bc7a:	4a30      	ldr	r2, [pc, #192]	@ (800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bc7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc80:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc82:	f000 bcd2 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800bc86:	2300      	movs	r3, #0
 800bc88:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc8a:	f000 bcce 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800bc8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc92:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800bc96:	430b      	orrs	r3, r1
 800bc98:	d152      	bne.n	800bd40 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800bc9a:	4b26      	ldr	r3, [pc, #152]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bca0:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800bca4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800bca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d104      	bne.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bcac:	f7fd fcd6 	bl	800965c <HAL_RCC_GetPCLK1Freq>
 800bcb0:	6378      	str	r0, [r7, #52]	@ 0x34
 800bcb2:	f000 bcba 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800bcb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bcbc:	d104      	bne.n	800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bcbe:	f7fd fbb1 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800bcc2:	6378      	str	r0, [r7, #52]	@ 0x34
 800bcc4:	f000 bcb1 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800bcc8:	4b1a      	ldr	r3, [pc, #104]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bcd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bcd4:	d107      	bne.n	800bce6 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bcdc:	d103      	bne.n	800bce6 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800bcde:	4b16      	ldr	r3, [pc, #88]	@ (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bce0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bce2:	f000 bca2 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800bce6:	4b13      	ldr	r3, [pc, #76]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f003 0320 	and.w	r3, r3, #32
 800bcee:	2b20      	cmp	r3, #32
 800bcf0:	d11c      	bne.n	800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800bcf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bcf8:	d118      	bne.n	800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bcfa:	4b0e      	ldr	r3, [pc, #56]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d005      	beq.n	800bd12 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800bd06:	4b0b      	ldr	r3, [pc, #44]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	0e1b      	lsrs	r3, r3, #24
 800bd0c:	f003 030f 	and.w	r3, r3, #15
 800bd10:	e006      	b.n	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800bd12:	4b08      	ldr	r3, [pc, #32]	@ (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bd14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bd18:	041b      	lsls	r3, r3, #16
 800bd1a:	0e1b      	lsrs	r3, r3, #24
 800bd1c:	f003 030f 	and.w	r3, r3, #15
 800bd20:	4a06      	ldr	r2, [pc, #24]	@ (800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bd22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd26:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd28:	f000 bc7f 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd30:	f000 bc7b 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bd34:	46020c00 	.word	0x46020c00
 800bd38:	00f42400 	.word	0x00f42400
 800bd3c:	0800de80 	.word	0x0800de80
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800bd40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd44:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800bd48:	430b      	orrs	r3, r1
 800bd4a:	d14c      	bne.n	800bde6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800bd4c:	4ba6      	ldr	r3, [pc, #664]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bd52:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800bd56:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800bd58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d104      	bne.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bd5e:	f7fd fc7d 	bl	800965c <HAL_RCC_GetPCLK1Freq>
 800bd62:	6378      	str	r0, [r7, #52]	@ 0x34
 800bd64:	f000 bc61 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800bd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bd6e:	d104      	bne.n	800bd7a <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bd70:	f7fd fb58 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800bd74:	6378      	str	r0, [r7, #52]	@ 0x34
 800bd76:	f000 bc58 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800bd7a:	4b9b      	ldr	r3, [pc, #620]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd86:	d107      	bne.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800bd88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd8e:	d103      	bne.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800bd90:	4b96      	ldr	r3, [pc, #600]	@ (800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800bd92:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd94:	f000 bc49 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800bd98:	4b93      	ldr	r3, [pc, #588]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 0320 	and.w	r3, r3, #32
 800bda0:	2b20      	cmp	r3, #32
 800bda2:	d11c      	bne.n	800bdde <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800bda4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800bdaa:	d118      	bne.n	800bdde <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bdac:	4b8e      	ldr	r3, [pc, #568]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d005      	beq.n	800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800bdb8:	4b8b      	ldr	r3, [pc, #556]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	0e1b      	lsrs	r3, r3, #24
 800bdbe:	f003 030f 	and.w	r3, r3, #15
 800bdc2:	e006      	b.n	800bdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800bdc4:	4b88      	ldr	r3, [pc, #544]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bdca:	041b      	lsls	r3, r3, #16
 800bdcc:	0e1b      	lsrs	r3, r3, #24
 800bdce:	f003 030f 	and.w	r3, r3, #15
 800bdd2:	4a87      	ldr	r2, [pc, #540]	@ (800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bdd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdd8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdda:	f000 bc26 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800bdde:	2300      	movs	r3, #0
 800bde0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bde2:	f000 bc22 	b.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800bde6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdea:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800bdee:	430b      	orrs	r3, r1
 800bdf0:	d164      	bne.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800bdf2:	4b7d      	ldr	r3, [pc, #500]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bdf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bdfc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800bdfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be00:	2b00      	cmp	r3, #0
 800be02:	d120      	bne.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800be04:	4b78      	ldr	r3, [pc, #480]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f003 0320 	and.w	r3, r3, #32
 800be0c:	2b20      	cmp	r3, #32
 800be0e:	d117      	bne.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800be10:	4b75      	ldr	r3, [pc, #468]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d005      	beq.n	800be28 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800be1c:	4b72      	ldr	r3, [pc, #456]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be1e:	689b      	ldr	r3, [r3, #8]
 800be20:	0e1b      	lsrs	r3, r3, #24
 800be22:	f003 030f 	and.w	r3, r3, #15
 800be26:	e006      	b.n	800be36 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800be28:	4b6f      	ldr	r3, [pc, #444]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800be2e:	041b      	lsls	r3, r3, #16
 800be30:	0e1b      	lsrs	r3, r3, #24
 800be32:	f003 030f 	and.w	r3, r3, #15
 800be36:	4a6e      	ldr	r2, [pc, #440]	@ (800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800be38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800be3e:	e3f4      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800be40:	2300      	movs	r3, #0
 800be42:	637b      	str	r3, [r7, #52]	@ 0x34
 800be44:	e3f1      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800be46:	4b68      	ldr	r3, [pc, #416]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be54:	d112      	bne.n	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800be56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be5c:	d10e      	bne.n	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800be5e:	4b62      	ldr	r3, [pc, #392]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800be68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be6c:	d102      	bne.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800be6e:	23fa      	movs	r3, #250	@ 0xfa
 800be70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800be72:	e3da      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800be74:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800be78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800be7a:	e3d6      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800be7c:	4b5a      	ldr	r3, [pc, #360]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be88:	d106      	bne.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800be8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be90:	d102      	bne.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800be92:	4b56      	ldr	r3, [pc, #344]	@ (800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800be94:	637b      	str	r3, [r7, #52]	@ 0x34
 800be96:	e3c8      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800be98:	4b53      	ldr	r3, [pc, #332]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be9e:	f003 0302 	and.w	r3, r3, #2
 800bea2:	2b02      	cmp	r3, #2
 800bea4:	d107      	bne.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800bea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800beac:	d103      	bne.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800beae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800beb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800beb4:	e3b9      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800beb6:	2300      	movs	r3, #0
 800beb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800beba:	e3b6      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800bebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bec0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800bec4:	430b      	orrs	r3, r1
 800bec6:	d164      	bne.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800bec8:	4b47      	ldr	r3, [pc, #284]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800beca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bece:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bed2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800bed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d120      	bne.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800beda:	4b43      	ldr	r3, [pc, #268]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f003 0320 	and.w	r3, r3, #32
 800bee2:	2b20      	cmp	r3, #32
 800bee4:	d117      	bne.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bee6:	4b40      	ldr	r3, [pc, #256]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bee8:	689b      	ldr	r3, [r3, #8]
 800beea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d005      	beq.n	800befe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800bef2:	4b3d      	ldr	r3, [pc, #244]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	0e1b      	lsrs	r3, r3, #24
 800bef8:	f003 030f 	and.w	r3, r3, #15
 800befc:	e006      	b.n	800bf0c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800befe:	4b3a      	ldr	r3, [pc, #232]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bf04:	041b      	lsls	r3, r3, #16
 800bf06:	0e1b      	lsrs	r3, r3, #24
 800bf08:	f003 030f 	and.w	r3, r3, #15
 800bf0c:	4a38      	ldr	r2, [pc, #224]	@ (800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bf0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf12:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf14:	e389      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800bf16:	2300      	movs	r3, #0
 800bf18:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf1a:	e386      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800bf1c:	4b32      	ldr	r3, [pc, #200]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf2a:	d112      	bne.n	800bf52 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800bf2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf32:	d10e      	bne.n	800bf52 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf34:	4b2c      	ldr	r3, [pc, #176]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf42:	d102      	bne.n	800bf4a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800bf44:	23fa      	movs	r3, #250	@ 0xfa
 800bf46:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf48:	e36f      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800bf4a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bf4e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf50:	e36b      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800bf52:	4b25      	ldr	r3, [pc, #148]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf5e:	d106      	bne.n	800bf6e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800bf60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bf66:	d102      	bne.n	800bf6e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800bf68:	4b20      	ldr	r3, [pc, #128]	@ (800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800bf6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf6c:	e35d      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800bf6e:	4b1e      	ldr	r3, [pc, #120]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf74:	f003 0302 	and.w	r3, r3, #2
 800bf78:	2b02      	cmp	r3, #2
 800bf7a:	d107      	bne.n	800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bf82:	d103      	bne.n	800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800bf84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf88:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf8a:	e34e      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf90:	e34b      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800bf92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf96:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800bf9a:	430b      	orrs	r3, r1
 800bf9c:	d14e      	bne.n	800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800bf9e:	4b12      	ldr	r3, [pc, #72]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bfa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bfa4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800bfa8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800bfaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d103      	bne.n	800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bfb0:	f7fd fb54 	bl	800965c <HAL_RCC_GetPCLK1Freq>
 800bfb4:	6378      	str	r0, [r7, #52]	@ 0x34
 800bfb6:	e338      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800bfb8:	4b0b      	ldr	r3, [pc, #44]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bfba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bfc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bfc6:	d119      	bne.n	800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800bfc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bfce:	d115      	bne.n	800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bfd0:	4b05      	ldr	r3, [pc, #20]	@ (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bfd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bfda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bfde:	d109      	bne.n	800bff4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800bfe0:	23fa      	movs	r3, #250	@ 0xfa
 800bfe2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bfe4:	e321      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bfe6:	bf00      	nop
 800bfe8:	46020c00 	.word	0x46020c00
 800bfec:	00f42400 	.word	0x00f42400
 800bff0:	0800de80 	.word	0x0800de80
      }
      else
      {
        frequency = LSI_VALUE;
 800bff4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bff8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bffa:	e316      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800bffc:	4ba8      	ldr	r3, [pc, #672]	@ (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c008:	d106      	bne.n	800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800c00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c00c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c010:	d102      	bne.n	800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800c012:	4ba4      	ldr	r3, [pc, #656]	@ (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c014:	637b      	str	r3, [r7, #52]	@ 0x34
 800c016:	e308      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800c018:	4ba1      	ldr	r3, [pc, #644]	@ (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c01a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c01e:	f003 0302 	and.w	r3, r3, #2
 800c022:	2b02      	cmp	r3, #2
 800c024:	d107      	bne.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800c026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c028:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800c02c:	d103      	bne.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800c02e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c032:	637b      	str	r3, [r7, #52]	@ 0x34
 800c034:	e2f9      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800c036:	2300      	movs	r3, #0
 800c038:	637b      	str	r3, [r7, #52]	@ 0x34
 800c03a:	e2f6      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800c03c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c040:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800c044:	430b      	orrs	r3, r1
 800c046:	d12d      	bne.n	800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800c048:	4b95      	ldr	r3, [pc, #596]	@ (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c04a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c04e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800c052:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800c054:	4b92      	ldr	r3, [pc, #584]	@ (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c05c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c060:	d105      	bne.n	800c06e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800c062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c064:	2b00      	cmp	r3, #0
 800c066:	d102      	bne.n	800c06e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800c068:	4b8e      	ldr	r3, [pc, #568]	@ (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c06a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c06c:	e2dd      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800c06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c074:	d107      	bne.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7fe fb4c 	bl	800a718 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800c080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c082:	637b      	str	r3, [r7, #52]	@ 0x34
 800c084:	e2d1      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800c086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c088:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c08c:	d107      	bne.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c08e:	f107 0318 	add.w	r3, r7, #24
 800c092:	4618      	mov	r0, r3
 800c094:	f7fe fc9a 	bl	800a9cc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c09c:	e2c5      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0a2:	e2c2      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800c0a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0a8:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800c0ac:	430b      	orrs	r3, r1
 800c0ae:	d156      	bne.n	800c15e <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800c0b0:	4b7b      	ldr	r3, [pc, #492]	@ (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c0b6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c0ba:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800c0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c0c2:	d028      	beq.n	800c116 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800c0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c0ca:	d845      	bhi.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c0d2:	d013      	beq.n	800c0fc <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800c0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c0da:	d83d      	bhi.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800c0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d004      	beq.n	800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c0e8:	d004      	beq.n	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800c0ea:	e035      	b.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800c0ec:	f7fd faca 	bl	8009684 <HAL_RCC_GetPCLK2Freq>
 800c0f0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c0f2:	e29a      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c0f4:	f7fd f996 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800c0f8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c0fa:	e296      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c0fc:	4b68      	ldr	r3, [pc, #416]	@ (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c108:	d102      	bne.n	800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800c10a:	4b66      	ldr	r3, [pc, #408]	@ (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c10c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c10e:	e28c      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c110:	2300      	movs	r3, #0
 800c112:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c114:	e289      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c116:	4b62      	ldr	r3, [pc, #392]	@ (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f003 0320 	and.w	r3, r3, #32
 800c11e:	2b20      	cmp	r3, #32
 800c120:	d117      	bne.n	800c152 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c122:	4b5f      	ldr	r3, [pc, #380]	@ (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d005      	beq.n	800c13a <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800c12e:	4b5c      	ldr	r3, [pc, #368]	@ (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	0e1b      	lsrs	r3, r3, #24
 800c134:	f003 030f 	and.w	r3, r3, #15
 800c138:	e006      	b.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800c13a:	4b59      	ldr	r3, [pc, #356]	@ (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c13c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c140:	041b      	lsls	r3, r3, #16
 800c142:	0e1b      	lsrs	r3, r3, #24
 800c144:	f003 030f 	and.w	r3, r3, #15
 800c148:	4a57      	ldr	r2, [pc, #348]	@ (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800c14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c14e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c150:	e26b      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c152:	2300      	movs	r3, #0
 800c154:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c156:	e268      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c158:	2300      	movs	r3, #0
 800c15a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c15c:	e265      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800c15e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c162:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800c166:	430b      	orrs	r3, r1
 800c168:	d156      	bne.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800c16a:	4b4d      	ldr	r3, [pc, #308]	@ (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c16c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c170:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c174:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800c176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c178:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c17c:	d028      	beq.n	800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800c17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c180:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c184:	d845      	bhi.n	800c212 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800c186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c188:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c18c:	d013      	beq.n	800c1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800c18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c190:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c194:	d83d      	bhi.n	800c212 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800c196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d004      	beq.n	800c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800c19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c19e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1a2:	d004      	beq.n	800c1ae <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800c1a4:	e035      	b.n	800c212 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800c1a6:	f7fd fa59 	bl	800965c <HAL_RCC_GetPCLK1Freq>
 800c1aa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c1ac:	e23d      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c1ae:	f7fd f939 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800c1b2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c1b4:	e239      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c1b6:	4b3a      	ldr	r3, [pc, #232]	@ (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c1be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1c2:	d102      	bne.n	800c1ca <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800c1c4:	4b37      	ldr	r3, [pc, #220]	@ (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c1c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c1c8:	e22f      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c1ce:	e22c      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c1d0:	4b33      	ldr	r3, [pc, #204]	@ (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f003 0320 	and.w	r3, r3, #32
 800c1d8:	2b20      	cmp	r3, #32
 800c1da:	d117      	bne.n	800c20c <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c1dc:	4b30      	ldr	r3, [pc, #192]	@ (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c1de:	689b      	ldr	r3, [r3, #8]
 800c1e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d005      	beq.n	800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800c1e8:	4b2d      	ldr	r3, [pc, #180]	@ (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	0e1b      	lsrs	r3, r3, #24
 800c1ee:	f003 030f 	and.w	r3, r3, #15
 800c1f2:	e006      	b.n	800c202 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800c1f4:	4b2a      	ldr	r3, [pc, #168]	@ (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c1f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c1fa:	041b      	lsls	r3, r3, #16
 800c1fc:	0e1b      	lsrs	r3, r3, #24
 800c1fe:	f003 030f 	and.w	r3, r3, #15
 800c202:	4a29      	ldr	r2, [pc, #164]	@ (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800c204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c208:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c20a:	e20e      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c20c:	2300      	movs	r3, #0
 800c20e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c210:	e20b      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c212:	2300      	movs	r3, #0
 800c214:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c216:	e208      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800c218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c21c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800c220:	430b      	orrs	r3, r1
 800c222:	d17c      	bne.n	800c31e <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800c224:	4b1e      	ldr	r3, [pc, #120]	@ (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c22a:	f003 0318 	and.w	r3, r3, #24
 800c22e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800c230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c232:	2b18      	cmp	r3, #24
 800c234:	d870      	bhi.n	800c318 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800c236:	a201      	add	r2, pc, #4	@ (adr r2, 800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800c238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c23c:	0800c2ad 	.word	0x0800c2ad
 800c240:	0800c319 	.word	0x0800c319
 800c244:	0800c319 	.word	0x0800c319
 800c248:	0800c319 	.word	0x0800c319
 800c24c:	0800c319 	.word	0x0800c319
 800c250:	0800c319 	.word	0x0800c319
 800c254:	0800c319 	.word	0x0800c319
 800c258:	0800c319 	.word	0x0800c319
 800c25c:	0800c2b5 	.word	0x0800c2b5
 800c260:	0800c319 	.word	0x0800c319
 800c264:	0800c319 	.word	0x0800c319
 800c268:	0800c319 	.word	0x0800c319
 800c26c:	0800c319 	.word	0x0800c319
 800c270:	0800c319 	.word	0x0800c319
 800c274:	0800c319 	.word	0x0800c319
 800c278:	0800c319 	.word	0x0800c319
 800c27c:	0800c2bd 	.word	0x0800c2bd
 800c280:	0800c319 	.word	0x0800c319
 800c284:	0800c319 	.word	0x0800c319
 800c288:	0800c319 	.word	0x0800c319
 800c28c:	0800c319 	.word	0x0800c319
 800c290:	0800c319 	.word	0x0800c319
 800c294:	0800c319 	.word	0x0800c319
 800c298:	0800c319 	.word	0x0800c319
 800c29c:	0800c2d7 	.word	0x0800c2d7
 800c2a0:	46020c00 	.word	0x46020c00
 800c2a4:	00f42400 	.word	0x00f42400
 800c2a8:	0800de80 	.word	0x0800de80
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800c2ac:	f7fd f9fe 	bl	80096ac <HAL_RCC_GetPCLK3Freq>
 800c2b0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c2b2:	e1ba      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c2b4:	f7fd f8b6 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800c2b8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c2ba:	e1b6      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c2bc:	4b9f      	ldr	r3, [pc, #636]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c2c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2c8:	d102      	bne.n	800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800c2ca:	4b9d      	ldr	r3, [pc, #628]	@ (800c540 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800c2cc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c2ce:	e1ac      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2d4:	e1a9      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c2d6:	4b99      	ldr	r3, [pc, #612]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f003 0320 	and.w	r3, r3, #32
 800c2de:	2b20      	cmp	r3, #32
 800c2e0:	d117      	bne.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c2e2:	4b96      	ldr	r3, [pc, #600]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d005      	beq.n	800c2fa <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800c2ee:	4b93      	ldr	r3, [pc, #588]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	0e1b      	lsrs	r3, r3, #24
 800c2f4:	f003 030f 	and.w	r3, r3, #15
 800c2f8:	e006      	b.n	800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800c2fa:	4b90      	ldr	r3, [pc, #576]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c2fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c300:	041b      	lsls	r3, r3, #16
 800c302:	0e1b      	lsrs	r3, r3, #24
 800c304:	f003 030f 	and.w	r3, r3, #15
 800c308:	4a8e      	ldr	r2, [pc, #568]	@ (800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800c30a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c30e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c310:	e18b      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c312:	2300      	movs	r3, #0
 800c314:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c316:	e188      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c318:	2300      	movs	r3, #0
 800c31a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c31c:	e185      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800c31e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c322:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800c326:	430b      	orrs	r3, r1
 800c328:	d155      	bne.n	800c3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c32a:	4b84      	ldr	r3, [pc, #528]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c32c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c330:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c334:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c338:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c33c:	d013      	beq.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800c33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c340:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c344:	d844      	bhi.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800c346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c348:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c34c:	d013      	beq.n	800c376 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800c34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c350:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c354:	d83c      	bhi.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800c356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d014      	beq.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800c35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c35e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c362:	d014      	beq.n	800c38e <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800c364:	e034      	b.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c366:	f107 0318 	add.w	r3, r7, #24
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fe fb2e 	bl	800a9cc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c374:	e159      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7fe f9cc 	bl	800a718 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c382:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c384:	e151      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c386:	f7fd f84d 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800c38a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c38c:	e14d      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c38e:	4b6b      	ldr	r3, [pc, #428]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f003 0320 	and.w	r3, r3, #32
 800c396:	2b20      	cmp	r3, #32
 800c398:	d117      	bne.n	800c3ca <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c39a:	4b68      	ldr	r3, [pc, #416]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d005      	beq.n	800c3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800c3a6:	4b65      	ldr	r3, [pc, #404]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	0e1b      	lsrs	r3, r3, #24
 800c3ac:	f003 030f 	and.w	r3, r3, #15
 800c3b0:	e006      	b.n	800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800c3b2:	4b62      	ldr	r3, [pc, #392]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c3b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c3b8:	041b      	lsls	r3, r3, #16
 800c3ba:	0e1b      	lsrs	r3, r3, #24
 800c3bc:	f003 030f 	and.w	r3, r3, #15
 800c3c0:	4a60      	ldr	r2, [pc, #384]	@ (800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800c3c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c3c8:	e12f      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3ce:	e12c      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3d4:	e129      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800c3d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3da:	1e59      	subs	r1, r3, #1
 800c3dc:	ea52 0301 	orrs.w	r3, r2, r1
 800c3e0:	d13c      	bne.n	800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800c3e2:	4b56      	ldr	r3, [pc, #344]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c3e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c3e8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800c3ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c3f4:	d027      	beq.n	800c446 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c3fc:	d82b      	bhi.n	800c456 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c400:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c404:	d017      	beq.n	800c436 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800c406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c408:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c40c:	d823      	bhi.n	800c456 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800c40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c410:	2b00      	cmp	r3, #0
 800c412:	d004      	beq.n	800c41e <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800c414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c416:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c41a:	d004      	beq.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800c41c:	e01b      	b.n	800c456 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c41e:	f7fd f801 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 800c422:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c424:	e101      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7fe f974 	bl	800a718 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c432:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c434:	e0f9      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c436:	f107 0318 	add.w	r3, r7, #24
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fe fac6 	bl	800a9cc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c444:	e0f1      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c446:	f107 030c 	add.w	r3, r7, #12
 800c44a:	4618      	mov	r0, r3
 800c44c:	f7fe fc18 	bl	800ac80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c454:	e0e9      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c456:	2300      	movs	r3, #0
 800c458:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c45a:	e0e6      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800c45c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c460:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800c464:	430b      	orrs	r3, r1
 800c466:	d131      	bne.n	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800c468:	4b34      	ldr	r3, [pc, #208]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c46a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c46e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c472:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800c474:	4b31      	ldr	r3, [pc, #196]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c476:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c47a:	f003 0302 	and.w	r3, r3, #2
 800c47e:	2b02      	cmp	r3, #2
 800c480:	d106      	bne.n	800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800c482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c484:	2b00      	cmp	r3, #0
 800c486:	d103      	bne.n	800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800c488:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c48c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c48e:	e0cc      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800c490:	4b2a      	ldr	r3, [pc, #168]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c496:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c49a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c49e:	d112      	bne.n	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800c4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4a6:	d10e      	bne.n	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c4a8:	4b24      	ldr	r3, [pc, #144]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c4aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c4ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c4b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c4b6:	d102      	bne.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800c4b8:	23fa      	movs	r3, #250	@ 0xfa
 800c4ba:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c4bc:	e0b5      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c4be:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c4c2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c4c4:	e0b1      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4ca:	e0ae      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800c4cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4d0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800c4d4:	430b      	orrs	r3, r1
 800c4d6:	d13b      	bne.n	800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800c4d8:	4b18      	ldr	r3, [pc, #96]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c4da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c4de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c4e2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800c4e4:	4b15      	ldr	r3, [pc, #84]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c4ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4f0:	d105      	bne.n	800c4fe <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800c4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d102      	bne.n	800c4fe <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800c4f8:	4b13      	ldr	r3, [pc, #76]	@ (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800c4fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4fc:	e095      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800c4fe:	4b0f      	ldr	r3, [pc, #60]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c50a:	d106      	bne.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800c50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c50e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c512:	d102      	bne.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800c514:	4b0d      	ldr	r3, [pc, #52]	@ (800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800c516:	637b      	str	r3, [r7, #52]	@ 0x34
 800c518:	e087      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800c51a:	4b08      	ldr	r3, [pc, #32]	@ (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c526:	d106      	bne.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800c528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c52a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c52e:	d102      	bne.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800c530:	4b03      	ldr	r3, [pc, #12]	@ (800c540 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800c532:	637b      	str	r3, [r7, #52]	@ 0x34
 800c534:	e079      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800c536:	2300      	movs	r3, #0
 800c538:	637b      	str	r3, [r7, #52]	@ 0x34
 800c53a:	e076      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c53c:	46020c00 	.word	0x46020c00
 800c540:	00f42400 	.word	0x00f42400
 800c544:	0800de80 	.word	0x0800de80
 800c548:	02dc6c00 	.word	0x02dc6c00
 800c54c:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800c550:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c554:	1e99      	subs	r1, r3, #2
 800c556:	ea52 0301 	orrs.w	r3, r2, r1
 800c55a:	d120      	bne.n	800c59e <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800c55c:	4b35      	ldr	r3, [pc, #212]	@ (800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c55e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c562:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c566:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d004      	beq.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800c56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c570:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c574:	d008      	beq.n	800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800c576:	e00f      	b.n	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c578:	f107 030c 	add.w	r3, r7, #12
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7fe fb7f 	bl	800ac80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c586:	e050      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c588:	f107 0318 	add.w	r3, r7, #24
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7fe fa1d 	bl	800a9cc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800c592:	6a3b      	ldr	r3, [r7, #32]
 800c594:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c596:	e048      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c598:	2300      	movs	r3, #0
 800c59a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c59c:	e045      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800c59e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5a2:	f1a3 0108 	sub.w	r1, r3, #8
 800c5a6:	ea52 0301 	orrs.w	r3, r2, r1
 800c5aa:	d13c      	bne.n	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800c5ac:	4b21      	ldr	r3, [pc, #132]	@ (800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c5ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c5b2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c5b6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800c5b8:	4b1e      	ldr	r3, [pc, #120]	@ (800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c5c4:	d105      	bne.n	800c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d102      	bne.n	800c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800c5cc:	4b1a      	ldr	r3, [pc, #104]	@ (800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800c5ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5d0:	e02b      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800c5d2:	4b18      	ldr	r3, [pc, #96]	@ (800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c5de:	d106      	bne.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c5e6:	d102      	bne.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800c5e8:	4b14      	ldr	r3, [pc, #80]	@ (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800c5ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5ec:	e01d      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800c5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5f4:	d107      	bne.n	800c606 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7fe f88c 	bl	800a718 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c602:	637b      	str	r3, [r7, #52]	@ 0x34
 800c604:	e011      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800c606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c608:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c60c:	d108      	bne.n	800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c60e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c612:	4618      	mov	r0, r3
 800c614:	f7fe f880 	bl	800a718 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800c618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61a:	085b      	lsrs	r3, r3, #1
 800c61c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c61e:	e004      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800c620:	2300      	movs	r3, #0
 800c622:	637b      	str	r3, [r7, #52]	@ 0x34
 800c624:	e001      	b.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800c626:	2300      	movs	r3, #0
 800c628:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800c62a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3738      	adds	r7, #56	@ 0x38
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}
 800c634:	46020c00 	.word	0x46020c00
 800c638:	00f42400 	.word	0x00f42400
 800c63c:	007a1200 	.word	0x007a1200

0800c640 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800c640:	b480      	push	{r7}
 800c642:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800c644:	4b06      	ldr	r3, [pc, #24]	@ (800c660 <HAL_RCCEx_EnableLSECSS+0x20>)
 800c646:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c64a:	4a05      	ldr	r2, [pc, #20]	@ (800c660 <HAL_RCCEx_EnableLSECSS+0x20>)
 800c64c:	f043 0320 	orr.w	r3, r3, #32
 800c650:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 800c654:	bf00      	nop
 800c656:	46bd      	mov	sp, r7
 800c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65c:	4770      	bx	lr
 800c65e:	bf00      	nop
 800c660:	46020c00 	.word	0x46020c00

0800c664 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  FlagStatus       pwrclkchanged = RESET;
 800c66c:	2300      	movs	r3, #0
 800c66e:	73fb      	strb	r3, [r7, #15]
  FlagStatus       backupchanged = RESET;
 800c670:	2300      	movs	r3, #0
 800c672:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c674:	4b20      	ldr	r3, [pc, #128]	@ (800c6f8 <HAL_RCCEx_EnableLSCO+0x94>)
 800c676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c67a:	f003 0304 	and.w	r3, r3, #4
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d110      	bne.n	800c6a4 <HAL_RCCEx_EnableLSCO+0x40>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c682:	4b1d      	ldr	r3, [pc, #116]	@ (800c6f8 <HAL_RCCEx_EnableLSCO+0x94>)
 800c684:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c688:	4a1b      	ldr	r2, [pc, #108]	@ (800c6f8 <HAL_RCCEx_EnableLSCO+0x94>)
 800c68a:	f043 0304 	orr.w	r3, r3, #4
 800c68e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800c692:	4b19      	ldr	r3, [pc, #100]	@ (800c6f8 <HAL_RCCEx_EnableLSCO+0x94>)
 800c694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c698:	f003 0304 	and.w	r3, r3, #4
 800c69c:	60bb      	str	r3, [r7, #8]
 800c69e:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	73fb      	strb	r3, [r7, #15]
  }
  if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c6a4:	4b15      	ldr	r3, [pc, #84]	@ (800c6fc <HAL_RCCEx_EnableLSCO+0x98>)
 800c6a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6a8:	f003 0301 	and.w	r3, r3, #1
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d103      	bne.n	800c6b8 <HAL_RCCEx_EnableLSCO+0x54>
  {
    HAL_PWR_EnableBkUpAccess();
 800c6b0:	f7fb fcce 	bl	8008050 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	73bb      	strb	r3, [r7, #14]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 800c6b8:	4b0f      	ldr	r3, [pc, #60]	@ (800c6f8 <HAL_RCCEx_EnableLSCO+0x94>)
 800c6ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c6be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	4a0c      	ldr	r2, [pc, #48]	@ (800c6f8 <HAL_RCCEx_EnableLSCO+0x94>)
 800c6c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c6cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  if (backupchanged == SET)
 800c6d0:	7bbb      	ldrb	r3, [r7, #14]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d101      	bne.n	800c6da <HAL_RCCEx_EnableLSCO+0x76>
  {
    HAL_PWR_DisableBkUpAccess();
 800c6d6:	f7fb fccb 	bl	8008070 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 800c6da:	7bfb      	ldrb	r3, [r7, #15]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d107      	bne.n	800c6f0 <HAL_RCCEx_EnableLSCO+0x8c>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 800c6e0:	4b05      	ldr	r3, [pc, #20]	@ (800c6f8 <HAL_RCCEx_EnableLSCO+0x94>)
 800c6e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c6e6:	4a04      	ldr	r2, [pc, #16]	@ (800c6f8 <HAL_RCCEx_EnableLSCO+0x94>)
 800c6e8:	f023 0304 	bic.w	r3, r3, #4
 800c6ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }
}
 800c6f0:	bf00      	nop
 800c6f2:	3710      	adds	r7, #16
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	46020c00 	.word	0x46020c00
 800c6fc:	46020800 	.word	0x46020800

0800c700 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800c708:	4b47      	ldr	r3, [pc, #284]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a46      	ldr	r2, [pc, #280]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c70e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c712:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c714:	f7f5 fd42 	bl	800219c <HAL_GetTick>
 800c718:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c71a:	e008      	b.n	800c72e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c71c:	f7f5 fd3e 	bl	800219c <HAL_GetTick>
 800c720:	4602      	mov	r2, r0
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	1ad3      	subs	r3, r2, r3
 800c726:	2b02      	cmp	r3, #2
 800c728:	d901      	bls.n	800c72e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c72a:	2303      	movs	r3, #3
 800c72c:	e077      	b.n	800c81e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c72e:	4b3e      	ldr	r3, [pc, #248]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c736:	2b00      	cmp	r3, #0
 800c738:	d1f0      	bne.n	800c71c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c73a:	4b3b      	ldr	r3, [pc, #236]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c73c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c73e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c742:	f023 0303 	bic.w	r3, r3, #3
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	6811      	ldr	r1, [r2, #0]
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	6852      	ldr	r2, [r2, #4]
 800c74e:	3a01      	subs	r2, #1
 800c750:	0212      	lsls	r2, r2, #8
 800c752:	430a      	orrs	r2, r1
 800c754:	4934      	ldr	r1, [pc, #208]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c756:	4313      	orrs	r3, r2
 800c758:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800c75a:	4b33      	ldr	r3, [pc, #204]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c75c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c75e:	4b33      	ldr	r3, [pc, #204]	@ (800c82c <RCCEx_PLL2_Config+0x12c>)
 800c760:	4013      	ands	r3, r2
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	6892      	ldr	r2, [r2, #8]
 800c766:	3a01      	subs	r2, #1
 800c768:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	68d2      	ldr	r2, [r2, #12]
 800c770:	3a01      	subs	r2, #1
 800c772:	0252      	lsls	r2, r2, #9
 800c774:	b292      	uxth	r2, r2
 800c776:	4311      	orrs	r1, r2
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	6912      	ldr	r2, [r2, #16]
 800c77c:	3a01      	subs	r2, #1
 800c77e:	0412      	lsls	r2, r2, #16
 800c780:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c784:	4311      	orrs	r1, r2
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	6952      	ldr	r2, [r2, #20]
 800c78a:	3a01      	subs	r2, #1
 800c78c:	0612      	lsls	r2, r2, #24
 800c78e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c792:	430a      	orrs	r2, r1
 800c794:	4924      	ldr	r1, [pc, #144]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c796:	4313      	orrs	r3, r2
 800c798:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c79a:	4b23      	ldr	r3, [pc, #140]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c79c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c79e:	f023 020c 	bic.w	r2, r3, #12
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	699b      	ldr	r3, [r3, #24]
 800c7a6:	4920      	ldr	r1, [pc, #128]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c7ac:	4b1e      	ldr	r3, [pc, #120]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c7ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6a1b      	ldr	r3, [r3, #32]
 800c7b4:	491c      	ldr	r1, [pc, #112]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800c7ba:	4b1b      	ldr	r3, [pc, #108]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c7bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7be:	4a1a      	ldr	r2, [pc, #104]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c7c0:	f023 0310 	bic.w	r3, r3, #16
 800c7c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c7c6:	4b18      	ldr	r3, [pc, #96]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c7c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c7ce:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	69d2      	ldr	r2, [r2, #28]
 800c7d6:	00d2      	lsls	r2, r2, #3
 800c7d8:	4913      	ldr	r1, [pc, #76]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800c7de:	4b12      	ldr	r3, [pc, #72]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7e2:	4a11      	ldr	r2, [pc, #68]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c7e4:	f043 0310 	orr.w	r3, r3, #16
 800c7e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800c7ea:	4b0f      	ldr	r3, [pc, #60]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a0e      	ldr	r2, [pc, #56]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c7f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c7f4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c7f6:	f7f5 fcd1 	bl	800219c <HAL_GetTick>
 800c7fa:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c7fc:	e008      	b.n	800c810 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c7fe:	f7f5 fccd 	bl	800219c <HAL_GetTick>
 800c802:	4602      	mov	r2, r0
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	1ad3      	subs	r3, r2, r3
 800c808:	2b02      	cmp	r3, #2
 800c80a:	d901      	bls.n	800c810 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c80c:	2303      	movs	r3, #3
 800c80e:	e006      	b.n	800c81e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c810:	4b05      	ldr	r3, [pc, #20]	@ (800c828 <RCCEx_PLL2_Config+0x128>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d0f0      	beq.n	800c7fe <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800c81c:	2300      	movs	r3, #0

}
 800c81e:	4618      	mov	r0, r3
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	46020c00 	.word	0x46020c00
 800c82c:	80800000 	.word	0x80800000

0800c830 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800c838:	4b47      	ldr	r3, [pc, #284]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a46      	ldr	r2, [pc, #280]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c83e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c842:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c844:	f7f5 fcaa 	bl	800219c <HAL_GetTick>
 800c848:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c84a:	e008      	b.n	800c85e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c84c:	f7f5 fca6 	bl	800219c <HAL_GetTick>
 800c850:	4602      	mov	r2, r0
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	1ad3      	subs	r3, r2, r3
 800c856:	2b02      	cmp	r3, #2
 800c858:	d901      	bls.n	800c85e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c85a:	2303      	movs	r3, #3
 800c85c:	e077      	b.n	800c94e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c85e:	4b3e      	ldr	r3, [pc, #248]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c866:	2b00      	cmp	r3, #0
 800c868:	d1f0      	bne.n	800c84c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c86a:	4b3b      	ldr	r3, [pc, #236]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c86c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c86e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c872:	f023 0303 	bic.w	r3, r3, #3
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	6811      	ldr	r1, [r2, #0]
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	6852      	ldr	r2, [r2, #4]
 800c87e:	3a01      	subs	r2, #1
 800c880:	0212      	lsls	r2, r2, #8
 800c882:	430a      	orrs	r2, r1
 800c884:	4934      	ldr	r1, [pc, #208]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c886:	4313      	orrs	r3, r2
 800c888:	630b      	str	r3, [r1, #48]	@ 0x30
 800c88a:	4b33      	ldr	r3, [pc, #204]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c88c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c88e:	4b33      	ldr	r3, [pc, #204]	@ (800c95c <RCCEx_PLL3_Config+0x12c>)
 800c890:	4013      	ands	r3, r2
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	6892      	ldr	r2, [r2, #8]
 800c896:	3a01      	subs	r2, #1
 800c898:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	68d2      	ldr	r2, [r2, #12]
 800c8a0:	3a01      	subs	r2, #1
 800c8a2:	0252      	lsls	r2, r2, #9
 800c8a4:	b292      	uxth	r2, r2
 800c8a6:	4311      	orrs	r1, r2
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	6912      	ldr	r2, [r2, #16]
 800c8ac:	3a01      	subs	r2, #1
 800c8ae:	0412      	lsls	r2, r2, #16
 800c8b0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c8b4:	4311      	orrs	r1, r2
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	6952      	ldr	r2, [r2, #20]
 800c8ba:	3a01      	subs	r2, #1
 800c8bc:	0612      	lsls	r2, r2, #24
 800c8be:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c8c2:	430a      	orrs	r2, r1
 800c8c4:	4924      	ldr	r1, [pc, #144]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800c8ca:	4b23      	ldr	r3, [pc, #140]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c8cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8ce:	f023 020c 	bic.w	r2, r3, #12
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	699b      	ldr	r3, [r3, #24]
 800c8d6:	4920      	ldr	r1, [pc, #128]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c8dc:	4b1e      	ldr	r3, [pc, #120]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c8de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6a1b      	ldr	r3, [r3, #32]
 800c8e4:	491c      	ldr	r1, [pc, #112]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800c8ea:	4b1b      	ldr	r3, [pc, #108]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c8ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8ee:	4a1a      	ldr	r2, [pc, #104]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c8f0:	f023 0310 	bic.w	r3, r3, #16
 800c8f4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c8f6:	4b18      	ldr	r3, [pc, #96]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c8f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c8fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c8fe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	69d2      	ldr	r2, [r2, #28]
 800c906:	00d2      	lsls	r2, r2, #3
 800c908:	4913      	ldr	r1, [pc, #76]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c90a:	4313      	orrs	r3, r2
 800c90c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800c90e:	4b12      	ldr	r3, [pc, #72]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c912:	4a11      	ldr	r2, [pc, #68]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c914:	f043 0310 	orr.w	r3, r3, #16
 800c918:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800c91a:	4b0f      	ldr	r3, [pc, #60]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a0e      	ldr	r2, [pc, #56]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c924:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c926:	f7f5 fc39 	bl	800219c <HAL_GetTick>
 800c92a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c92c:	e008      	b.n	800c940 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c92e:	f7f5 fc35 	bl	800219c <HAL_GetTick>
 800c932:	4602      	mov	r2, r0
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	1ad3      	subs	r3, r2, r3
 800c938:	2b02      	cmp	r3, #2
 800c93a:	d901      	bls.n	800c940 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c93c:	2303      	movs	r3, #3
 800c93e:	e006      	b.n	800c94e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c940:	4b05      	ldr	r3, [pc, #20]	@ (800c958 <RCCEx_PLL3_Config+0x128>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d0f0      	beq.n	800c92e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800c94c:	2300      	movs	r3, #0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	46020c00 	.word	0x46020c00
 800c95c:	80800000 	.word	0x80800000

0800c960 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c968:	2301      	movs	r3, #1
 800c96a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d071      	beq.n	800ca56 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c978:	b2db      	uxtb	r3, r3
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d106      	bne.n	800c98c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f7f5 f9c2 	bl	8001d10 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2202      	movs	r2, #2
 800c990:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c994:	4b32      	ldr	r3, [pc, #200]	@ (800ca60 <HAL_RTC_Init+0x100>)
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	f003 0310 	and.w	r3, r3, #16
 800c99c:	2b10      	cmp	r3, #16
 800c99e:	d051      	beq.n	800ca44 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c9a0:	4b2f      	ldr	r3, [pc, #188]	@ (800ca60 <HAL_RTC_Init+0x100>)
 800c9a2:	22ca      	movs	r2, #202	@ 0xca
 800c9a4:	625a      	str	r2, [r3, #36]	@ 0x24
 800c9a6:	4b2e      	ldr	r3, [pc, #184]	@ (800ca60 <HAL_RTC_Init+0x100>)
 800c9a8:	2253      	movs	r2, #83	@ 0x53
 800c9aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 f88b 	bl	800cac8 <RTC_EnterInitMode>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c9b6:	7bfb      	ldrb	r3, [r7, #15]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d13f      	bne.n	800ca3c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800c9bc:	4b28      	ldr	r3, [pc, #160]	@ (800ca60 <HAL_RTC_Init+0x100>)
 800c9be:	699b      	ldr	r3, [r3, #24]
 800c9c0:	4a27      	ldr	r2, [pc, #156]	@ (800ca60 <HAL_RTC_Init+0x100>)
 800c9c2:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800c9c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9ca:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800c9cc:	4b24      	ldr	r3, [pc, #144]	@ (800ca60 <HAL_RTC_Init+0x100>)
 800c9ce:	699a      	ldr	r2, [r3, #24]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6859      	ldr	r1, [r3, #4]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	691b      	ldr	r3, [r3, #16]
 800c9d8:	4319      	orrs	r1, r3
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	699b      	ldr	r3, [r3, #24]
 800c9de:	430b      	orrs	r3, r1
 800c9e0:	491f      	ldr	r1, [pc, #124]	@ (800ca60 <HAL_RTC_Init+0x100>)
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	68da      	ldr	r2, [r3, #12]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	041b      	lsls	r3, r3, #16
 800c9f0:	491b      	ldr	r1, [pc, #108]	@ (800ca60 <HAL_RTC_Init+0x100>)
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800c9f6:	4b1a      	ldr	r3, [pc, #104]	@ (800ca60 <HAL_RTC_Init+0x100>)
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca06:	430b      	orrs	r3, r1
 800ca08:	4915      	ldr	r1, [pc, #84]	@ (800ca60 <HAL_RTC_Init+0x100>)
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 f896 	bl	800cb40 <RTC_ExitInitMode>
 800ca14:	4603      	mov	r3, r0
 800ca16:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800ca18:	7bfb      	ldrb	r3, [r7, #15]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d10e      	bne.n	800ca3c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800ca1e:	4b10      	ldr	r3, [pc, #64]	@ (800ca60 <HAL_RTC_Init+0x100>)
 800ca20:	699b      	ldr	r3, [r3, #24]
 800ca22:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6a19      	ldr	r1, [r3, #32]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	69db      	ldr	r3, [r3, #28]
 800ca2e:	4319      	orrs	r1, r3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	695b      	ldr	r3, [r3, #20]
 800ca34:	430b      	orrs	r3, r1
 800ca36:	490a      	ldr	r1, [pc, #40]	@ (800ca60 <HAL_RTC_Init+0x100>)
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca3c:	4b08      	ldr	r3, [pc, #32]	@ (800ca60 <HAL_RTC_Init+0x100>)
 800ca3e:	22ff      	movs	r2, #255	@ 0xff
 800ca40:	625a      	str	r2, [r3, #36]	@ 0x24
 800ca42:	e001      	b.n	800ca48 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800ca44:	2300      	movs	r3, #0
 800ca46:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ca48:	7bfb      	ldrb	r3, [r7, #15]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d103      	bne.n	800ca56 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2201      	movs	r2, #1
 800ca52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800ca56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3710      	adds	r7, #16
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	46007800 	.word	0x46007800

0800ca64 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800ca6c:	4b15      	ldr	r3, [pc, #84]	@ (800cac4 <HAL_RTC_WaitForSynchro+0x60>)
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	4a14      	ldr	r2, [pc, #80]	@ (800cac4 <HAL_RTC_WaitForSynchro+0x60>)
 800ca72:	f023 0320 	bic.w	r3, r3, #32
 800ca76:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800ca78:	f7f5 fb90 	bl	800219c <HAL_GetTick>
 800ca7c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ca7e:	e013      	b.n	800caa8 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ca80:	f7f5 fb8c 	bl	800219c <HAL_GetTick>
 800ca84:	4602      	mov	r2, r0
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	1ad3      	subs	r3, r2, r3
 800ca8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ca8e:	d90b      	bls.n	800caa8 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ca90:	4b0c      	ldr	r3, [pc, #48]	@ (800cac4 <HAL_RTC_WaitForSynchro+0x60>)
 800ca92:	68db      	ldr	r3, [r3, #12]
 800ca94:	f003 0320 	and.w	r3, r3, #32
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d10c      	bne.n	800cab6 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2203      	movs	r2, #3
 800caa0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800caa4:	2303      	movs	r3, #3
 800caa6:	e008      	b.n	800caba <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800caa8:	4b06      	ldr	r3, [pc, #24]	@ (800cac4 <HAL_RTC_WaitForSynchro+0x60>)
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	f003 0320 	and.w	r3, r3, #32
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d0e5      	beq.n	800ca80 <HAL_RTC_WaitForSynchro+0x1c>
 800cab4:	e000      	b.n	800cab8 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800cab6:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	46007800 	.word	0x46007800

0800cac8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cad0:	2300      	movs	r3, #0
 800cad2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cad4:	4b19      	ldr	r3, [pc, #100]	@ (800cb3c <RTC_EnterInitMode+0x74>)
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d128      	bne.n	800cb32 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cae0:	4b16      	ldr	r3, [pc, #88]	@ (800cb3c <RTC_EnterInitMode+0x74>)
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	4a15      	ldr	r2, [pc, #84]	@ (800cb3c <RTC_EnterInitMode+0x74>)
 800cae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caea:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800caec:	f7f5 fb56 	bl	800219c <HAL_GetTick>
 800caf0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800caf2:	e013      	b.n	800cb1c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800caf4:	f7f5 fb52 	bl	800219c <HAL_GetTick>
 800caf8:	4602      	mov	r2, r0
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	1ad3      	subs	r3, r2, r3
 800cafe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cb02:	d90b      	bls.n	800cb1c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cb04:	4b0d      	ldr	r3, [pc, #52]	@ (800cb3c <RTC_EnterInitMode+0x74>)
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d10f      	bne.n	800cb30 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800cb10:	2303      	movs	r3, #3
 800cb12:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2203      	movs	r2, #3
 800cb18:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cb1c:	4b07      	ldr	r3, [pc, #28]	@ (800cb3c <RTC_EnterInitMode+0x74>)
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d104      	bne.n	800cb32 <RTC_EnterInitMode+0x6a>
 800cb28:	7bfb      	ldrb	r3, [r7, #15]
 800cb2a:	2b03      	cmp	r3, #3
 800cb2c:	d1e2      	bne.n	800caf4 <RTC_EnterInitMode+0x2c>
 800cb2e:	e000      	b.n	800cb32 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800cb30:	bf00      	nop
        }
      }
    }
  }

  return status;
 800cb32:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3710      	adds	r7, #16
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	46007800 	.word	0x46007800

0800cb40 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cb4c:	4b1a      	ldr	r3, [pc, #104]	@ (800cbb8 <RTC_ExitInitMode+0x78>)
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	4a19      	ldr	r2, [pc, #100]	@ (800cbb8 <RTC_ExitInitMode+0x78>)
 800cb52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb56:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cb58:	4b17      	ldr	r3, [pc, #92]	@ (800cbb8 <RTC_ExitInitMode+0x78>)
 800cb5a:	699b      	ldr	r3, [r3, #24]
 800cb5c:	f003 0320 	and.w	r3, r3, #32
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d10c      	bne.n	800cb7e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f7ff ff7d 	bl	800ca64 <HAL_RTC_WaitForSynchro>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d01e      	beq.n	800cbae <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2203      	movs	r2, #3
 800cb74:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800cb78:	2303      	movs	r3, #3
 800cb7a:	73fb      	strb	r3, [r7, #15]
 800cb7c:	e017      	b.n	800cbae <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cb7e:	4b0e      	ldr	r3, [pc, #56]	@ (800cbb8 <RTC_ExitInitMode+0x78>)
 800cb80:	699b      	ldr	r3, [r3, #24]
 800cb82:	4a0d      	ldr	r2, [pc, #52]	@ (800cbb8 <RTC_ExitInitMode+0x78>)
 800cb84:	f023 0320 	bic.w	r3, r3, #32
 800cb88:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff ff6a 	bl	800ca64 <HAL_RTC_WaitForSynchro>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d005      	beq.n	800cba2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2203      	movs	r2, #3
 800cb9a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800cb9e:	2303      	movs	r3, #3
 800cba0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cba2:	4b05      	ldr	r3, [pc, #20]	@ (800cbb8 <RTC_ExitInitMode+0x78>)
 800cba4:	699b      	ldr	r3, [r3, #24]
 800cba6:	4a04      	ldr	r2, [pc, #16]	@ (800cbb8 <RTC_ExitInitMode+0x78>)
 800cba8:	f043 0320 	orr.w	r3, r3, #32
 800cbac:	6193      	str	r3, [r2, #24]
  }
  return status;
 800cbae:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	46007800 	.word	0x46007800

0800cbbc <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	4910      	ldr	r1, [pc, #64]	@ (800cc10 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	689a      	ldr	r2, [r3, #8]
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	431a      	orrs	r2, r3
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	699b      	ldr	r3, [r3, #24]
 800cbe2:	490c      	ldr	r1, [pc, #48]	@ (800cc14 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800cbe8:	4b0a      	ldr	r3, [pc, #40]	@ (800cc14 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cbea:	6a1b      	ldr	r3, [r3, #32]
 800cbec:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	6919      	ldr	r1, [r3, #16]
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	695b      	ldr	r3, [r3, #20]
 800cbf8:	041b      	lsls	r3, r3, #16
 800cbfa:	430b      	orrs	r3, r1
 800cbfc:	4905      	ldr	r1, [pc, #20]	@ (800cc14 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800cc02:	2300      	movs	r3, #0
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	370c      	adds	r7, #12
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr
 800cc10:	46007800 	.word	0x46007800
 800cc14:	46007c00 	.word	0x46007c00

0800cc18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d101      	bne.n	800cc2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cc26:	2301      	movs	r3, #1
 800cc28:	e049      	b.n	800ccbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d106      	bne.n	800cc44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 f841 	bl	800ccc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2202      	movs	r2, #2
 800cc48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	3304      	adds	r3, #4
 800cc54:	4619      	mov	r1, r3
 800cc56:	4610      	mov	r0, r2
 800cc58:	f000 fa58 	bl	800d10c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2201      	movs	r2, #1
 800cc68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2201      	movs	r2, #1
 800cc78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2201      	movs	r2, #1
 800cc80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2201      	movs	r2, #1
 800cc90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2201      	movs	r2, #1
 800cc98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2201      	movs	r2, #1
 800cca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2201      	movs	r2, #1
 800cca8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2201      	movs	r2, #1
 800ccb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ccc6:	b480      	push	{r7}
 800ccc8:	b083      	sub	sp, #12
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ccce:	bf00      	nop
 800ccd0:	370c      	adds	r7, #12
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr
	...

0800ccdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b085      	sub	sp, #20
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ccea:	b2db      	uxtb	r3, r3
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d001      	beq.n	800ccf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e072      	b.n	800cdda <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2202      	movs	r2, #2
 800ccf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	68da      	ldr	r2, [r3, #12]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f042 0201 	orr.w	r2, r2, #1
 800cd0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4a35      	ldr	r2, [pc, #212]	@ (800cde8 <HAL_TIM_Base_Start_IT+0x10c>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d040      	beq.n	800cd98 <HAL_TIM_Base_Start_IT+0xbc>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4a34      	ldr	r2, [pc, #208]	@ (800cdec <HAL_TIM_Base_Start_IT+0x110>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d03b      	beq.n	800cd98 <HAL_TIM_Base_Start_IT+0xbc>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd28:	d036      	beq.n	800cd98 <HAL_TIM_Base_Start_IT+0xbc>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cd32:	d031      	beq.n	800cd98 <HAL_TIM_Base_Start_IT+0xbc>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a2d      	ldr	r2, [pc, #180]	@ (800cdf0 <HAL_TIM_Base_Start_IT+0x114>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d02c      	beq.n	800cd98 <HAL_TIM_Base_Start_IT+0xbc>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4a2c      	ldr	r2, [pc, #176]	@ (800cdf4 <HAL_TIM_Base_Start_IT+0x118>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d027      	beq.n	800cd98 <HAL_TIM_Base_Start_IT+0xbc>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a2a      	ldr	r2, [pc, #168]	@ (800cdf8 <HAL_TIM_Base_Start_IT+0x11c>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d022      	beq.n	800cd98 <HAL_TIM_Base_Start_IT+0xbc>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4a29      	ldr	r2, [pc, #164]	@ (800cdfc <HAL_TIM_Base_Start_IT+0x120>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d01d      	beq.n	800cd98 <HAL_TIM_Base_Start_IT+0xbc>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a27      	ldr	r2, [pc, #156]	@ (800ce00 <HAL_TIM_Base_Start_IT+0x124>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d018      	beq.n	800cd98 <HAL_TIM_Base_Start_IT+0xbc>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a26      	ldr	r2, [pc, #152]	@ (800ce04 <HAL_TIM_Base_Start_IT+0x128>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d013      	beq.n	800cd98 <HAL_TIM_Base_Start_IT+0xbc>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a24      	ldr	r2, [pc, #144]	@ (800ce08 <HAL_TIM_Base_Start_IT+0x12c>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d00e      	beq.n	800cd98 <HAL_TIM_Base_Start_IT+0xbc>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a23      	ldr	r2, [pc, #140]	@ (800ce0c <HAL_TIM_Base_Start_IT+0x130>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d009      	beq.n	800cd98 <HAL_TIM_Base_Start_IT+0xbc>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a21      	ldr	r2, [pc, #132]	@ (800ce10 <HAL_TIM_Base_Start_IT+0x134>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d004      	beq.n	800cd98 <HAL_TIM_Base_Start_IT+0xbc>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a20      	ldr	r2, [pc, #128]	@ (800ce14 <HAL_TIM_Base_Start_IT+0x138>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d115      	bne.n	800cdc4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	689a      	ldr	r2, [r3, #8]
 800cd9e:	4b1e      	ldr	r3, [pc, #120]	@ (800ce18 <HAL_TIM_Base_Start_IT+0x13c>)
 800cda0:	4013      	ands	r3, r2
 800cda2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2b06      	cmp	r3, #6
 800cda8:	d015      	beq.n	800cdd6 <HAL_TIM_Base_Start_IT+0xfa>
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdb0:	d011      	beq.n	800cdd6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f042 0201 	orr.w	r2, r2, #1
 800cdc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdc2:	e008      	b.n	800cdd6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f042 0201 	orr.w	r2, r2, #1
 800cdd2:	601a      	str	r2, [r3, #0]
 800cdd4:	e000      	b.n	800cdd8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cdd8:	2300      	movs	r3, #0
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3714      	adds	r7, #20
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr
 800cde6:	bf00      	nop
 800cde8:	40012c00 	.word	0x40012c00
 800cdec:	50012c00 	.word	0x50012c00
 800cdf0:	40000400 	.word	0x40000400
 800cdf4:	50000400 	.word	0x50000400
 800cdf8:	40000800 	.word	0x40000800
 800cdfc:	50000800 	.word	0x50000800
 800ce00:	40000c00 	.word	0x40000c00
 800ce04:	50000c00 	.word	0x50000c00
 800ce08:	40013400 	.word	0x40013400
 800ce0c:	50013400 	.word	0x50013400
 800ce10:	40014000 	.word	0x40014000
 800ce14:	50014000 	.word	0x50014000
 800ce18:	00010007 	.word	0x00010007

0800ce1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	68db      	ldr	r3, [r3, #12]
 800ce2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	691b      	ldr	r3, [r3, #16]
 800ce32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	f003 0302 	and.w	r3, r3, #2
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d020      	beq.n	800ce80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f003 0302 	and.w	r3, r3, #2
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d01b      	beq.n	800ce80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f06f 0202 	mvn.w	r2, #2
 800ce50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2201      	movs	r2, #1
 800ce56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	699b      	ldr	r3, [r3, #24]
 800ce5e:	f003 0303 	and.w	r3, r3, #3
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d003      	beq.n	800ce6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f000 f931 	bl	800d0ce <HAL_TIM_IC_CaptureCallback>
 800ce6c:	e005      	b.n	800ce7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 f923 	bl	800d0ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 f934 	bl	800d0e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	f003 0304 	and.w	r3, r3, #4
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d020      	beq.n	800cecc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f003 0304 	and.w	r3, r3, #4
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d01b      	beq.n	800cecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f06f 0204 	mvn.w	r2, #4
 800ce9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2202      	movs	r2, #2
 800cea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	699b      	ldr	r3, [r3, #24]
 800ceaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d003      	beq.n	800ceba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f000 f90b 	bl	800d0ce <HAL_TIM_IC_CaptureCallback>
 800ceb8:	e005      	b.n	800cec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 f8fd 	bl	800d0ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 f90e 	bl	800d0e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	f003 0308 	and.w	r3, r3, #8
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d020      	beq.n	800cf18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f003 0308 	and.w	r3, r3, #8
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d01b      	beq.n	800cf18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f06f 0208 	mvn.w	r2, #8
 800cee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2204      	movs	r2, #4
 800ceee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	69db      	ldr	r3, [r3, #28]
 800cef6:	f003 0303 	and.w	r3, r3, #3
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d003      	beq.n	800cf06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 f8e5 	bl	800d0ce <HAL_TIM_IC_CaptureCallback>
 800cf04:	e005      	b.n	800cf12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 f8d7 	bl	800d0ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f000 f8e8 	bl	800d0e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2200      	movs	r2, #0
 800cf16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	f003 0310 	and.w	r3, r3, #16
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d020      	beq.n	800cf64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	f003 0310 	and.w	r3, r3, #16
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d01b      	beq.n	800cf64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f06f 0210 	mvn.w	r2, #16
 800cf34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2208      	movs	r2, #8
 800cf3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	69db      	ldr	r3, [r3, #28]
 800cf42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d003      	beq.n	800cf52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 f8bf 	bl	800d0ce <HAL_TIM_IC_CaptureCallback>
 800cf50:	e005      	b.n	800cf5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 f8b1 	bl	800d0ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f000 f8c2 	bl	800d0e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2200      	movs	r2, #0
 800cf62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	f003 0301 	and.w	r3, r3, #1
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00c      	beq.n	800cf88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f003 0301 	and.w	r3, r3, #1
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d007      	beq.n	800cf88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f06f 0201 	mvn.w	r2, #1
 800cf80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f7f4 fb62 	bl	800164c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d104      	bne.n	800cf9c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d00c      	beq.n	800cfb6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d007      	beq.n	800cfb6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800cfae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 f9bb 	bl	800d32c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d00c      	beq.n	800cfda <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d007      	beq.n	800cfda <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800cfd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f000 f9b3 	bl	800d340 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d00c      	beq.n	800cffe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d007      	beq.n	800cffe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 f87c 	bl	800d0f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	f003 0320 	and.w	r3, r3, #32
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00c      	beq.n	800d022 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f003 0320 	and.w	r3, r3, #32
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d007      	beq.n	800d022 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f06f 0220 	mvn.w	r2, #32
 800d01a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f000 f97b 	bl	800d318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d00c      	beq.n	800d046 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d032:	2b00      	cmp	r3, #0
 800d034:	d007      	beq.n	800d046 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800d03e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f000 f987 	bl	800d354 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d00c      	beq.n	800d06a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d056:	2b00      	cmp	r3, #0
 800d058:	d007      	beq.n	800d06a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800d062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 f97f 	bl	800d368 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d070:	2b00      	cmp	r3, #0
 800d072:	d00c      	beq.n	800d08e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d007      	beq.n	800d08e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800d086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 f977 	bl	800d37c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d094:	2b00      	cmp	r3, #0
 800d096:	d00c      	beq.n	800d0b2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d007      	beq.n	800d0b2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800d0aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f000 f96f 	bl	800d390 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d0b2:	bf00      	nop
 800d0b4:	3710      	adds	r7, #16
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d0ba:	b480      	push	{r7}
 800d0bc:	b083      	sub	sp, #12
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d0c2:	bf00      	nop
 800d0c4:	370c      	adds	r7, #12
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr

0800d0ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d0ce:	b480      	push	{r7}
 800d0d0:	b083      	sub	sp, #12
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d0d6:	bf00      	nop
 800d0d8:	370c      	adds	r7, #12
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr

0800d0e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d0e2:	b480      	push	{r7}
 800d0e4:	b083      	sub	sp, #12
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d0ea:	bf00      	nop
 800d0ec:	370c      	adds	r7, #12
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d0f6:	b480      	push	{r7}
 800d0f8:	b083      	sub	sp, #12
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d0fe:	bf00      	nop
 800d100:	370c      	adds	r7, #12
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr
	...

0800d10c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b085      	sub	sp, #20
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	4a6e      	ldr	r2, [pc, #440]	@ (800d2d8 <TIM_Base_SetConfig+0x1cc>)
 800d120:	4293      	cmp	r3, r2
 800d122:	d02b      	beq.n	800d17c <TIM_Base_SetConfig+0x70>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	4a6d      	ldr	r2, [pc, #436]	@ (800d2dc <TIM_Base_SetConfig+0x1d0>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d027      	beq.n	800d17c <TIM_Base_SetConfig+0x70>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d132:	d023      	beq.n	800d17c <TIM_Base_SetConfig+0x70>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d13a:	d01f      	beq.n	800d17c <TIM_Base_SetConfig+0x70>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	4a68      	ldr	r2, [pc, #416]	@ (800d2e0 <TIM_Base_SetConfig+0x1d4>)
 800d140:	4293      	cmp	r3, r2
 800d142:	d01b      	beq.n	800d17c <TIM_Base_SetConfig+0x70>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	4a67      	ldr	r2, [pc, #412]	@ (800d2e4 <TIM_Base_SetConfig+0x1d8>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d017      	beq.n	800d17c <TIM_Base_SetConfig+0x70>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	4a66      	ldr	r2, [pc, #408]	@ (800d2e8 <TIM_Base_SetConfig+0x1dc>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d013      	beq.n	800d17c <TIM_Base_SetConfig+0x70>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	4a65      	ldr	r2, [pc, #404]	@ (800d2ec <TIM_Base_SetConfig+0x1e0>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d00f      	beq.n	800d17c <TIM_Base_SetConfig+0x70>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	4a64      	ldr	r2, [pc, #400]	@ (800d2f0 <TIM_Base_SetConfig+0x1e4>)
 800d160:	4293      	cmp	r3, r2
 800d162:	d00b      	beq.n	800d17c <TIM_Base_SetConfig+0x70>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	4a63      	ldr	r2, [pc, #396]	@ (800d2f4 <TIM_Base_SetConfig+0x1e8>)
 800d168:	4293      	cmp	r3, r2
 800d16a:	d007      	beq.n	800d17c <TIM_Base_SetConfig+0x70>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	4a62      	ldr	r2, [pc, #392]	@ (800d2f8 <TIM_Base_SetConfig+0x1ec>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d003      	beq.n	800d17c <TIM_Base_SetConfig+0x70>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	4a61      	ldr	r2, [pc, #388]	@ (800d2fc <TIM_Base_SetConfig+0x1f0>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d108      	bne.n	800d18e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	68fa      	ldr	r2, [r7, #12]
 800d18a:	4313      	orrs	r3, r2
 800d18c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	4a51      	ldr	r2, [pc, #324]	@ (800d2d8 <TIM_Base_SetConfig+0x1cc>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d043      	beq.n	800d21e <TIM_Base_SetConfig+0x112>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	4a50      	ldr	r2, [pc, #320]	@ (800d2dc <TIM_Base_SetConfig+0x1d0>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d03f      	beq.n	800d21e <TIM_Base_SetConfig+0x112>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1a4:	d03b      	beq.n	800d21e <TIM_Base_SetConfig+0x112>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d1ac:	d037      	beq.n	800d21e <TIM_Base_SetConfig+0x112>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	4a4b      	ldr	r2, [pc, #300]	@ (800d2e0 <TIM_Base_SetConfig+0x1d4>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d033      	beq.n	800d21e <TIM_Base_SetConfig+0x112>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	4a4a      	ldr	r2, [pc, #296]	@ (800d2e4 <TIM_Base_SetConfig+0x1d8>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d02f      	beq.n	800d21e <TIM_Base_SetConfig+0x112>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	4a49      	ldr	r2, [pc, #292]	@ (800d2e8 <TIM_Base_SetConfig+0x1dc>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d02b      	beq.n	800d21e <TIM_Base_SetConfig+0x112>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	4a48      	ldr	r2, [pc, #288]	@ (800d2ec <TIM_Base_SetConfig+0x1e0>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d027      	beq.n	800d21e <TIM_Base_SetConfig+0x112>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	4a47      	ldr	r2, [pc, #284]	@ (800d2f0 <TIM_Base_SetConfig+0x1e4>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d023      	beq.n	800d21e <TIM_Base_SetConfig+0x112>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	4a46      	ldr	r2, [pc, #280]	@ (800d2f4 <TIM_Base_SetConfig+0x1e8>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d01f      	beq.n	800d21e <TIM_Base_SetConfig+0x112>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4a45      	ldr	r2, [pc, #276]	@ (800d2f8 <TIM_Base_SetConfig+0x1ec>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d01b      	beq.n	800d21e <TIM_Base_SetConfig+0x112>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	4a44      	ldr	r2, [pc, #272]	@ (800d2fc <TIM_Base_SetConfig+0x1f0>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d017      	beq.n	800d21e <TIM_Base_SetConfig+0x112>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	4a43      	ldr	r2, [pc, #268]	@ (800d300 <TIM_Base_SetConfig+0x1f4>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d013      	beq.n	800d21e <TIM_Base_SetConfig+0x112>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	4a42      	ldr	r2, [pc, #264]	@ (800d304 <TIM_Base_SetConfig+0x1f8>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d00f      	beq.n	800d21e <TIM_Base_SetConfig+0x112>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	4a41      	ldr	r2, [pc, #260]	@ (800d308 <TIM_Base_SetConfig+0x1fc>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d00b      	beq.n	800d21e <TIM_Base_SetConfig+0x112>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	4a40      	ldr	r2, [pc, #256]	@ (800d30c <TIM_Base_SetConfig+0x200>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d007      	beq.n	800d21e <TIM_Base_SetConfig+0x112>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	4a3f      	ldr	r2, [pc, #252]	@ (800d310 <TIM_Base_SetConfig+0x204>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d003      	beq.n	800d21e <TIM_Base_SetConfig+0x112>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	4a3e      	ldr	r2, [pc, #248]	@ (800d314 <TIM_Base_SetConfig+0x208>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d108      	bne.n	800d230 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	68db      	ldr	r3, [r3, #12]
 800d22a:	68fa      	ldr	r2, [r7, #12]
 800d22c:	4313      	orrs	r3, r2
 800d22e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	695b      	ldr	r3, [r3, #20]
 800d23a:	4313      	orrs	r3, r2
 800d23c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	68fa      	ldr	r2, [r7, #12]
 800d242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	689a      	ldr	r2, [r3, #8]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	4a20      	ldr	r2, [pc, #128]	@ (800d2d8 <TIM_Base_SetConfig+0x1cc>)
 800d258:	4293      	cmp	r3, r2
 800d25a:	d023      	beq.n	800d2a4 <TIM_Base_SetConfig+0x198>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	4a1f      	ldr	r2, [pc, #124]	@ (800d2dc <TIM_Base_SetConfig+0x1d0>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d01f      	beq.n	800d2a4 <TIM_Base_SetConfig+0x198>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	4a24      	ldr	r2, [pc, #144]	@ (800d2f8 <TIM_Base_SetConfig+0x1ec>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d01b      	beq.n	800d2a4 <TIM_Base_SetConfig+0x198>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	4a23      	ldr	r2, [pc, #140]	@ (800d2fc <TIM_Base_SetConfig+0x1f0>)
 800d270:	4293      	cmp	r3, r2
 800d272:	d017      	beq.n	800d2a4 <TIM_Base_SetConfig+0x198>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	4a22      	ldr	r2, [pc, #136]	@ (800d300 <TIM_Base_SetConfig+0x1f4>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d013      	beq.n	800d2a4 <TIM_Base_SetConfig+0x198>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	4a21      	ldr	r2, [pc, #132]	@ (800d304 <TIM_Base_SetConfig+0x1f8>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d00f      	beq.n	800d2a4 <TIM_Base_SetConfig+0x198>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	4a20      	ldr	r2, [pc, #128]	@ (800d308 <TIM_Base_SetConfig+0x1fc>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d00b      	beq.n	800d2a4 <TIM_Base_SetConfig+0x198>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	4a1f      	ldr	r2, [pc, #124]	@ (800d30c <TIM_Base_SetConfig+0x200>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d007      	beq.n	800d2a4 <TIM_Base_SetConfig+0x198>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	4a1e      	ldr	r2, [pc, #120]	@ (800d310 <TIM_Base_SetConfig+0x204>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d003      	beq.n	800d2a4 <TIM_Base_SetConfig+0x198>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	4a1d      	ldr	r2, [pc, #116]	@ (800d314 <TIM_Base_SetConfig+0x208>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d103      	bne.n	800d2ac <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	691a      	ldr	r2, [r3, #16]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	691b      	ldr	r3, [r3, #16]
 800d2b6:	f003 0301 	and.w	r3, r3, #1
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d105      	bne.n	800d2ca <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	f023 0201 	bic.w	r2, r3, #1
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	611a      	str	r2, [r3, #16]
  }
}
 800d2ca:	bf00      	nop
 800d2cc:	3714      	adds	r7, #20
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop
 800d2d8:	40012c00 	.word	0x40012c00
 800d2dc:	50012c00 	.word	0x50012c00
 800d2e0:	40000400 	.word	0x40000400
 800d2e4:	50000400 	.word	0x50000400
 800d2e8:	40000800 	.word	0x40000800
 800d2ec:	50000800 	.word	0x50000800
 800d2f0:	40000c00 	.word	0x40000c00
 800d2f4:	50000c00 	.word	0x50000c00
 800d2f8:	40013400 	.word	0x40013400
 800d2fc:	50013400 	.word	0x50013400
 800d300:	40014000 	.word	0x40014000
 800d304:	50014000 	.word	0x50014000
 800d308:	40014400 	.word	0x40014400
 800d30c:	50014400 	.word	0x50014400
 800d310:	40014800 	.word	0x40014800
 800d314:	50014800 	.word	0x50014800

0800d318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d320:	bf00      	nop
 800d322:	370c      	adds	r7, #12
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr

0800d32c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d334:	bf00      	nop
 800d336:	370c      	adds	r7, #12
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr

0800d340 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d348:	bf00      	nop
 800d34a:	370c      	adds	r7, #12
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr

0800d354 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d35c:	bf00      	nop
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d370:	bf00      	nop
 800d372:	370c      	adds	r7, #12
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b083      	sub	sp, #12
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d384:	bf00      	nop
 800d386:	370c      	adds	r7, #12
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr

0800d390 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d398:	bf00      	nop
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d101      	bne.n	800d3b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	e042      	b.n	800d43c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d106      	bne.n	800d3ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f7f4 fced 	bl	8001da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2224      	movs	r2, #36	@ 0x24
 800d3d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f022 0201 	bic.w	r2, r2, #1
 800d3e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d002      	beq.n	800d3f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f000 f9d6 	bl	800d7a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 f825 	bl	800d444 <UART_SetConfig>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d101      	bne.n	800d404 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d400:	2301      	movs	r3, #1
 800d402:	e01b      	b.n	800d43c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	685a      	ldr	r2, [r3, #4]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	689a      	ldr	r2, [r3, #8]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f042 0201 	orr.w	r2, r2, #1
 800d432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f000 fa55 	bl	800d8e4 <UART_CheckIdleState>
 800d43a:	4603      	mov	r3, r0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3708      	adds	r7, #8
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d448:	b094      	sub	sp, #80	@ 0x50
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d44e:	2300      	movs	r3, #0
 800d450:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	4b83      	ldr	r3, [pc, #524]	@ (800d668 <UART_SetConfig+0x224>)
 800d45a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d45e:	689a      	ldr	r2, [r3, #8]
 800d460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	431a      	orrs	r2, r3
 800d466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d468:	695b      	ldr	r3, [r3, #20]
 800d46a:	431a      	orrs	r2, r3
 800d46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d46e:	69db      	ldr	r3, [r3, #28]
 800d470:	4313      	orrs	r3, r2
 800d472:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	497c      	ldr	r1, [pc, #496]	@ (800d66c <UART_SetConfig+0x228>)
 800d47c:	4019      	ands	r1, r3
 800d47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d484:	430b      	orrs	r3, r1
 800d486:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d494:	68d9      	ldr	r1, [r3, #12]
 800d496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	ea40 0301 	orr.w	r3, r0, r1
 800d49e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a2:	699b      	ldr	r3, [r3, #24]
 800d4a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	4b6f      	ldr	r3, [pc, #444]	@ (800d668 <UART_SetConfig+0x224>)
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d009      	beq.n	800d4c4 <UART_SetConfig+0x80>
 800d4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4b2:	681a      	ldr	r2, [r3, #0]
 800d4b4:	4b6e      	ldr	r3, [pc, #440]	@ (800d670 <UART_SetConfig+0x22c>)
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d004      	beq.n	800d4c4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4bc:	6a1a      	ldr	r2, [r3, #32]
 800d4be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	689b      	ldr	r3, [r3, #8]
 800d4ca:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d4ce:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4d8:	430b      	orrs	r3, r1
 800d4da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4e2:	f023 000f 	bic.w	r0, r3, #15
 800d4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	ea40 0301 	orr.w	r3, r0, r1
 800d4f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f6:	681a      	ldr	r2, [r3, #0]
 800d4f8:	4b5e      	ldr	r3, [pc, #376]	@ (800d674 <UART_SetConfig+0x230>)
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d102      	bne.n	800d504 <UART_SetConfig+0xc0>
 800d4fe:	2301      	movs	r3, #1
 800d500:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d502:	e032      	b.n	800d56a <UART_SetConfig+0x126>
 800d504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	4b5b      	ldr	r3, [pc, #364]	@ (800d678 <UART_SetConfig+0x234>)
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d102      	bne.n	800d514 <UART_SetConfig+0xd0>
 800d50e:	2302      	movs	r3, #2
 800d510:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d512:	e02a      	b.n	800d56a <UART_SetConfig+0x126>
 800d514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	4b58      	ldr	r3, [pc, #352]	@ (800d67c <UART_SetConfig+0x238>)
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d102      	bne.n	800d524 <UART_SetConfig+0xe0>
 800d51e:	2304      	movs	r3, #4
 800d520:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d522:	e022      	b.n	800d56a <UART_SetConfig+0x126>
 800d524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	4b55      	ldr	r3, [pc, #340]	@ (800d680 <UART_SetConfig+0x23c>)
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d102      	bne.n	800d534 <UART_SetConfig+0xf0>
 800d52e:	2308      	movs	r3, #8
 800d530:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d532:	e01a      	b.n	800d56a <UART_SetConfig+0x126>
 800d534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	4b52      	ldr	r3, [pc, #328]	@ (800d684 <UART_SetConfig+0x240>)
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d102      	bne.n	800d544 <UART_SetConfig+0x100>
 800d53e:	2310      	movs	r3, #16
 800d540:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d542:	e012      	b.n	800d56a <UART_SetConfig+0x126>
 800d544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d546:	681a      	ldr	r2, [r3, #0]
 800d548:	4b4f      	ldr	r3, [pc, #316]	@ (800d688 <UART_SetConfig+0x244>)
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d103      	bne.n	800d556 <UART_SetConfig+0x112>
 800d54e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800d552:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d554:	e009      	b.n	800d56a <UART_SetConfig+0x126>
 800d556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	4b43      	ldr	r3, [pc, #268]	@ (800d668 <UART_SetConfig+0x224>)
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d102      	bne.n	800d566 <UART_SetConfig+0x122>
 800d560:	2320      	movs	r3, #32
 800d562:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d564:	e001      	b.n	800d56a <UART_SetConfig+0x126>
 800d566:	2300      	movs	r3, #0
 800d568:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	4b3e      	ldr	r3, [pc, #248]	@ (800d668 <UART_SetConfig+0x224>)
 800d570:	429a      	cmp	r2, r3
 800d572:	d005      	beq.n	800d580 <UART_SetConfig+0x13c>
 800d574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d576:	681a      	ldr	r2, [r3, #0]
 800d578:	4b3d      	ldr	r3, [pc, #244]	@ (800d670 <UART_SetConfig+0x22c>)
 800d57a:	429a      	cmp	r2, r3
 800d57c:	f040 8088 	bne.w	800d690 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d582:	2200      	movs	r2, #0
 800d584:	623b      	str	r3, [r7, #32]
 800d586:	627a      	str	r2, [r7, #36]	@ 0x24
 800d588:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d58c:	f7fd fcd2 	bl	800af34 <HAL_RCCEx_GetPeriphCLKFreq>
 800d590:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d594:	2b00      	cmp	r3, #0
 800d596:	f000 80eb 	beq.w	800d770 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d59a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d59c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d59e:	4a3b      	ldr	r2, [pc, #236]	@ (800d68c <UART_SetConfig+0x248>)
 800d5a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5ac:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b0:	685a      	ldr	r2, [r3, #4]
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	005b      	lsls	r3, r3, #1
 800d5b6:	4413      	add	r3, r2
 800d5b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d305      	bcc.n	800d5ca <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d5c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d903      	bls.n	800d5d2 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d5d0:	e048      	b.n	800d664 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	61bb      	str	r3, [r7, #24]
 800d5d8:	61fa      	str	r2, [r7, #28]
 800d5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5de:	4a2b      	ldr	r2, [pc, #172]	@ (800d68c <UART_SetConfig+0x248>)
 800d5e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	613b      	str	r3, [r7, #16]
 800d5ea:	617a      	str	r2, [r7, #20]
 800d5ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d5f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d5f4:	f7f2 fe5e 	bl	80002b4 <__aeabi_uldivmod>
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	460b      	mov	r3, r1
 800d5fc:	4610      	mov	r0, r2
 800d5fe:	4619      	mov	r1, r3
 800d600:	f04f 0200 	mov.w	r2, #0
 800d604:	f04f 0300 	mov.w	r3, #0
 800d608:	020b      	lsls	r3, r1, #8
 800d60a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d60e:	0202      	lsls	r2, r0, #8
 800d610:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d612:	6849      	ldr	r1, [r1, #4]
 800d614:	0849      	lsrs	r1, r1, #1
 800d616:	2000      	movs	r0, #0
 800d618:	460c      	mov	r4, r1
 800d61a:	4605      	mov	r5, r0
 800d61c:	eb12 0804 	adds.w	r8, r2, r4
 800d620:	eb43 0905 	adc.w	r9, r3, r5
 800d624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	2200      	movs	r2, #0
 800d62a:	60bb      	str	r3, [r7, #8]
 800d62c:	60fa      	str	r2, [r7, #12]
 800d62e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d632:	4640      	mov	r0, r8
 800d634:	4649      	mov	r1, r9
 800d636:	f7f2 fe3d 	bl	80002b4 <__aeabi_uldivmod>
 800d63a:	4602      	mov	r2, r0
 800d63c:	460b      	mov	r3, r1
 800d63e:	4613      	mov	r3, r2
 800d640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d644:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d648:	d308      	bcc.n	800d65c <UART_SetConfig+0x218>
 800d64a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d64c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d650:	d204      	bcs.n	800d65c <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800d652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d658:	60da      	str	r2, [r3, #12]
 800d65a:	e003      	b.n	800d664 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800d65c:	2301      	movs	r3, #1
 800d65e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800d662:	e085      	b.n	800d770 <UART_SetConfig+0x32c>
 800d664:	e084      	b.n	800d770 <UART_SetConfig+0x32c>
 800d666:	bf00      	nop
 800d668:	46002400 	.word	0x46002400
 800d66c:	cfff69f3 	.word	0xcfff69f3
 800d670:	56002400 	.word	0x56002400
 800d674:	40013800 	.word	0x40013800
 800d678:	40004400 	.word	0x40004400
 800d67c:	40004800 	.word	0x40004800
 800d680:	40004c00 	.word	0x40004c00
 800d684:	40005000 	.word	0x40005000
 800d688:	40006400 	.word	0x40006400
 800d68c:	0800df40 	.word	0x0800df40
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d692:	69db      	ldr	r3, [r3, #28]
 800d694:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d698:	d13c      	bne.n	800d714 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d69a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d69c:	2200      	movs	r2, #0
 800d69e:	603b      	str	r3, [r7, #0]
 800d6a0:	607a      	str	r2, [r7, #4]
 800d6a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d6a6:	f7fd fc45 	bl	800af34 <HAL_RCCEx_GetPeriphCLKFreq>
 800d6aa:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d6ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d05e      	beq.n	800d770 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6b6:	4a39      	ldr	r2, [pc, #228]	@ (800d79c <UART_SetConfig+0x358>)
 800d6b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6bc:	461a      	mov	r2, r3
 800d6be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6c4:	005a      	lsls	r2, r3, #1
 800d6c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	085b      	lsrs	r3, r3, #1
 800d6cc:	441a      	add	r2, r3
 800d6ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6da:	2b0f      	cmp	r3, #15
 800d6dc:	d916      	bls.n	800d70c <UART_SetConfig+0x2c8>
 800d6de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6e4:	d212      	bcs.n	800d70c <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d6e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	f023 030f 	bic.w	r3, r3, #15
 800d6ee:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d6f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6f2:	085b      	lsrs	r3, r3, #1
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	f003 0307 	and.w	r3, r3, #7
 800d6fa:	b29a      	uxth	r2, r3
 800d6fc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d6fe:	4313      	orrs	r3, r2
 800d700:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800d702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d708:	60da      	str	r2, [r3, #12]
 800d70a:	e031      	b.n	800d770 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d70c:	2301      	movs	r3, #1
 800d70e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d712:	e02d      	b.n	800d770 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d714:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d716:	2200      	movs	r2, #0
 800d718:	469a      	mov	sl, r3
 800d71a:	4693      	mov	fp, r2
 800d71c:	4650      	mov	r0, sl
 800d71e:	4659      	mov	r1, fp
 800d720:	f7fd fc08 	bl	800af34 <HAL_RCCEx_GetPeriphCLKFreq>
 800d724:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800d726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d021      	beq.n	800d770 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d72e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d730:	4a1a      	ldr	r2, [pc, #104]	@ (800d79c <UART_SetConfig+0x358>)
 800d732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d736:	461a      	mov	r2, r3
 800d738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d73a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	085b      	lsrs	r3, r3, #1
 800d744:	441a      	add	r2, r3
 800d746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d752:	2b0f      	cmp	r3, #15
 800d754:	d909      	bls.n	800d76a <UART_SetConfig+0x326>
 800d756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d75c:	d205      	bcs.n	800d76a <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d75e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d760:	b29a      	uxth	r2, r3
 800d762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	60da      	str	r2, [r3, #12]
 800d768:	e002      	b.n	800d770 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d76a:	2301      	movs	r3, #1
 800d76c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d772:	2201      	movs	r2, #1
 800d774:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d77a:	2201      	movs	r2, #1
 800d77c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d782:	2200      	movs	r2, #0
 800d784:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d788:	2200      	movs	r2, #0
 800d78a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d78c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d790:	4618      	mov	r0, r3
 800d792:	3750      	adds	r7, #80	@ 0x50
 800d794:	46bd      	mov	sp, r7
 800d796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d79a:	bf00      	nop
 800d79c:	0800df40 	.word	0x0800df40

0800d7a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7ac:	f003 0308 	and.w	r3, r3, #8
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d00a      	beq.n	800d7ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	430a      	orrs	r2, r1
 800d7c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7ce:	f003 0301 	and.w	r3, r3, #1
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d00a      	beq.n	800d7ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	430a      	orrs	r2, r1
 800d7ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7f0:	f003 0302 	and.w	r3, r3, #2
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d00a      	beq.n	800d80e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	430a      	orrs	r2, r1
 800d80c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d812:	f003 0304 	and.w	r3, r3, #4
 800d816:	2b00      	cmp	r3, #0
 800d818:	d00a      	beq.n	800d830 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	430a      	orrs	r2, r1
 800d82e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d834:	f003 0310 	and.w	r3, r3, #16
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00a      	beq.n	800d852 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	689b      	ldr	r3, [r3, #8]
 800d842:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	430a      	orrs	r2, r1
 800d850:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d856:	f003 0320 	and.w	r3, r3, #32
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d00a      	beq.n	800d874 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	689b      	ldr	r3, [r3, #8]
 800d864:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	430a      	orrs	r2, r1
 800d872:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d01a      	beq.n	800d8b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	430a      	orrs	r2, r1
 800d894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d89a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d89e:	d10a      	bne.n	800d8b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	430a      	orrs	r2, r1
 800d8b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00a      	beq.n	800d8d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	430a      	orrs	r2, r1
 800d8d6:	605a      	str	r2, [r3, #4]
  }
}
 800d8d8:	bf00      	nop
 800d8da:	370c      	adds	r7, #12
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr

0800d8e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b098      	sub	sp, #96	@ 0x60
 800d8e8:	af02      	add	r7, sp, #8
 800d8ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d8f4:	f7f4 fc52 	bl	800219c <HAL_GetTick>
 800d8f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f003 0308 	and.w	r3, r3, #8
 800d904:	2b08      	cmp	r3, #8
 800d906:	d12f      	bne.n	800d968 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d908:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d90c:	9300      	str	r3, [sp, #0]
 800d90e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d910:	2200      	movs	r2, #0
 800d912:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 f88e 	bl	800da38 <UART_WaitOnFlagUntilTimeout>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d022      	beq.n	800d968 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d92a:	e853 3f00 	ldrex	r3, [r3]
 800d92e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d932:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d936:	653b      	str	r3, [r7, #80]	@ 0x50
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	461a      	mov	r2, r3
 800d93e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d940:	647b      	str	r3, [r7, #68]	@ 0x44
 800d942:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d944:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d948:	e841 2300 	strex	r3, r2, [r1]
 800d94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d94e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d950:	2b00      	cmp	r3, #0
 800d952:	d1e6      	bne.n	800d922 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2220      	movs	r2, #32
 800d958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2200      	movs	r2, #0
 800d960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d964:	2303      	movs	r3, #3
 800d966:	e063      	b.n	800da30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f003 0304 	and.w	r3, r3, #4
 800d972:	2b04      	cmp	r3, #4
 800d974:	d149      	bne.n	800da0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d976:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d97e:	2200      	movs	r2, #0
 800d980:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f000 f857 	bl	800da38 <UART_WaitOnFlagUntilTimeout>
 800d98a:	4603      	mov	r3, r0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d03c      	beq.n	800da0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d998:	e853 3f00 	ldrex	r3, [r3]
 800d99c:	623b      	str	r3, [r7, #32]
   return(result);
 800d99e:	6a3b      	ldr	r3, [r7, #32]
 800d9a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d9a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d9b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9b6:	e841 2300 	strex	r3, r2, [r1]
 800d9ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d1e6      	bne.n	800d990 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	3308      	adds	r3, #8
 800d9c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	e853 3f00 	ldrex	r3, [r3]
 800d9d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	f023 0301 	bic.w	r3, r3, #1
 800d9d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	3308      	adds	r3, #8
 800d9e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d9e2:	61fa      	str	r2, [r7, #28]
 800d9e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9e6:	69b9      	ldr	r1, [r7, #24]
 800d9e8:	69fa      	ldr	r2, [r7, #28]
 800d9ea:	e841 2300 	strex	r3, r2, [r1]
 800d9ee:	617b      	str	r3, [r7, #20]
   return(result);
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d1e5      	bne.n	800d9c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2220      	movs	r2, #32
 800d9fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da06:	2303      	movs	r3, #3
 800da08:	e012      	b.n	800da30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2220      	movs	r2, #32
 800da0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2220      	movs	r2, #32
 800da16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2200      	movs	r2, #0
 800da2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da2e:	2300      	movs	r3, #0
}
 800da30:	4618      	mov	r0, r3
 800da32:	3758      	adds	r7, #88	@ 0x58
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b084      	sub	sp, #16
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	60f8      	str	r0, [r7, #12]
 800da40:	60b9      	str	r1, [r7, #8]
 800da42:	603b      	str	r3, [r7, #0]
 800da44:	4613      	mov	r3, r2
 800da46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da48:	e04f      	b.n	800daea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da50:	d04b      	beq.n	800daea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da52:	f7f4 fba3 	bl	800219c <HAL_GetTick>
 800da56:	4602      	mov	r2, r0
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	1ad3      	subs	r3, r2, r3
 800da5c:	69ba      	ldr	r2, [r7, #24]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d302      	bcc.n	800da68 <UART_WaitOnFlagUntilTimeout+0x30>
 800da62:	69bb      	ldr	r3, [r7, #24]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d101      	bne.n	800da6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800da68:	2303      	movs	r3, #3
 800da6a:	e04e      	b.n	800db0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f003 0304 	and.w	r3, r3, #4
 800da76:	2b00      	cmp	r3, #0
 800da78:	d037      	beq.n	800daea <UART_WaitOnFlagUntilTimeout+0xb2>
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	2b80      	cmp	r3, #128	@ 0x80
 800da7e:	d034      	beq.n	800daea <UART_WaitOnFlagUntilTimeout+0xb2>
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	2b40      	cmp	r3, #64	@ 0x40
 800da84:	d031      	beq.n	800daea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	69db      	ldr	r3, [r3, #28]
 800da8c:	f003 0308 	and.w	r3, r3, #8
 800da90:	2b08      	cmp	r3, #8
 800da92:	d110      	bne.n	800dab6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2208      	movs	r2, #8
 800da9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800da9c:	68f8      	ldr	r0, [r7, #12]
 800da9e:	f000 f838 	bl	800db12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2208      	movs	r2, #8
 800daa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2200      	movs	r2, #0
 800daae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dab2:	2301      	movs	r3, #1
 800dab4:	e029      	b.n	800db0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	69db      	ldr	r3, [r3, #28]
 800dabc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dac0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dac4:	d111      	bne.n	800daea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dace:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dad0:	68f8      	ldr	r0, [r7, #12]
 800dad2:	f000 f81e 	bl	800db12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2220      	movs	r2, #32
 800dada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2200      	movs	r2, #0
 800dae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dae6:	2303      	movs	r3, #3
 800dae8:	e00f      	b.n	800db0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	69da      	ldr	r2, [r3, #28]
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	4013      	ands	r3, r2
 800daf4:	68ba      	ldr	r2, [r7, #8]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	bf0c      	ite	eq
 800dafa:	2301      	moveq	r3, #1
 800dafc:	2300      	movne	r3, #0
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	461a      	mov	r2, r3
 800db02:	79fb      	ldrb	r3, [r7, #7]
 800db04:	429a      	cmp	r2, r3
 800db06:	d0a0      	beq.n	800da4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db08:	2300      	movs	r3, #0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db12:	b480      	push	{r7}
 800db14:	b095      	sub	sp, #84	@ 0x54
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db22:	e853 3f00 	ldrex	r3, [r3]
 800db26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800db28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800db2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	461a      	mov	r2, r3
 800db36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db38:	643b      	str	r3, [r7, #64]	@ 0x40
 800db3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800db3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800db40:	e841 2300 	strex	r3, r2, [r1]
 800db44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800db46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d1e6      	bne.n	800db1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	3308      	adds	r3, #8
 800db52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db54:	6a3b      	ldr	r3, [r7, #32]
 800db56:	e853 3f00 	ldrex	r3, [r3]
 800db5a:	61fb      	str	r3, [r7, #28]
   return(result);
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800db62:	f023 0301 	bic.w	r3, r3, #1
 800db66:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	3308      	adds	r3, #8
 800db6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800db72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db78:	e841 2300 	strex	r3, r2, [r1]
 800db7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800db7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db80:	2b00      	cmp	r3, #0
 800db82:	d1e3      	bne.n	800db4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db88:	2b01      	cmp	r3, #1
 800db8a:	d118      	bne.n	800dbbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	e853 3f00 	ldrex	r3, [r3]
 800db98:	60bb      	str	r3, [r7, #8]
   return(result);
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	f023 0310 	bic.w	r3, r3, #16
 800dba0:	647b      	str	r3, [r7, #68]	@ 0x44
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	461a      	mov	r2, r3
 800dba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbaa:	61bb      	str	r3, [r7, #24]
 800dbac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbae:	6979      	ldr	r1, [r7, #20]
 800dbb0:	69ba      	ldr	r2, [r7, #24]
 800dbb2:	e841 2300 	strex	r3, r2, [r1]
 800dbb6:	613b      	str	r3, [r7, #16]
   return(result);
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d1e6      	bne.n	800db8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2220      	movs	r2, #32
 800dbc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dbd2:	bf00      	nop
 800dbd4:	3754      	adds	r7, #84	@ 0x54
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbdc:	4770      	bx	lr

0800dbde <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dbde:	b480      	push	{r7}
 800dbe0:	b085      	sub	sp, #20
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d101      	bne.n	800dbf4 <HAL_UARTEx_DisableFifoMode+0x16>
 800dbf0:	2302      	movs	r3, #2
 800dbf2:	e027      	b.n	800dc44 <HAL_UARTEx_DisableFifoMode+0x66>
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2224      	movs	r2, #36	@ 0x24
 800dc00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f022 0201 	bic.w	r2, r2, #1
 800dc1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dc22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2200      	movs	r2, #0
 800dc28:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	68fa      	ldr	r2, [r7, #12]
 800dc30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2220      	movs	r2, #32
 800dc36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc42:	2300      	movs	r3, #0
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3714      	adds	r7, #20
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr

0800dc50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d101      	bne.n	800dc68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dc64:	2302      	movs	r3, #2
 800dc66:	e02d      	b.n	800dcc4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2224      	movs	r2, #36	@ 0x24
 800dc74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f022 0201 	bic.w	r2, r2, #1
 800dc8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	689b      	ldr	r3, [r3, #8]
 800dc96:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	683a      	ldr	r2, [r7, #0]
 800dca0:	430a      	orrs	r2, r1
 800dca2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f000 f84f 	bl	800dd48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	68fa      	ldr	r2, [r7, #12]
 800dcb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2220      	movs	r2, #32
 800dcb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dcc2:	2300      	movs	r3, #0
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3710      	adds	r7, #16
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d101      	bne.n	800dce4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dce0:	2302      	movs	r3, #2
 800dce2:	e02d      	b.n	800dd40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2201      	movs	r2, #1
 800dce8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2224      	movs	r2, #36	@ 0x24
 800dcf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f022 0201 	bic.w	r2, r2, #1
 800dd0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	683a      	ldr	r2, [r7, #0]
 800dd1c:	430a      	orrs	r2, r1
 800dd1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f000 f811 	bl	800dd48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	68fa      	ldr	r2, [r7, #12]
 800dd2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2220      	movs	r2, #32
 800dd32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd3e:	2300      	movs	r3, #0
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3710      	adds	r7, #16
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b085      	sub	sp, #20
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d108      	bne.n	800dd6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2201      	movs	r2, #1
 800dd64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dd68:	e031      	b.n	800ddce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dd6a:	2308      	movs	r3, #8
 800dd6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dd6e:	2308      	movs	r3, #8
 800dd70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	0e5b      	lsrs	r3, r3, #25
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	f003 0307 	and.w	r3, r3, #7
 800dd80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	689b      	ldr	r3, [r3, #8]
 800dd88:	0f5b      	lsrs	r3, r3, #29
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	f003 0307 	and.w	r3, r3, #7
 800dd90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd92:	7bbb      	ldrb	r3, [r7, #14]
 800dd94:	7b3a      	ldrb	r2, [r7, #12]
 800dd96:	4911      	ldr	r1, [pc, #68]	@ (800dddc <UARTEx_SetNbDataToProcess+0x94>)
 800dd98:	5c8a      	ldrb	r2, [r1, r2]
 800dd9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dd9e:	7b3a      	ldrb	r2, [r7, #12]
 800dda0:	490f      	ldr	r1, [pc, #60]	@ (800dde0 <UARTEx_SetNbDataToProcess+0x98>)
 800dda2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dda4:	fb93 f3f2 	sdiv	r3, r3, r2
 800dda8:	b29a      	uxth	r2, r3
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ddb0:	7bfb      	ldrb	r3, [r7, #15]
 800ddb2:	7b7a      	ldrb	r2, [r7, #13]
 800ddb4:	4909      	ldr	r1, [pc, #36]	@ (800dddc <UARTEx_SetNbDataToProcess+0x94>)
 800ddb6:	5c8a      	ldrb	r2, [r1, r2]
 800ddb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ddbc:	7b7a      	ldrb	r2, [r7, #13]
 800ddbe:	4908      	ldr	r1, [pc, #32]	@ (800dde0 <UARTEx_SetNbDataToProcess+0x98>)
 800ddc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ddc2:	fb93 f3f2 	sdiv	r3, r3, r2
 800ddc6:	b29a      	uxth	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ddce:	bf00      	nop
 800ddd0:	3714      	adds	r7, #20
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr
 800ddda:	bf00      	nop
 800dddc:	0800df58 	.word	0x0800df58
 800dde0:	0800df60 	.word	0x0800df60

0800dde4 <memset>:
 800dde4:	4402      	add	r2, r0
 800dde6:	4603      	mov	r3, r0
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d100      	bne.n	800ddee <memset+0xa>
 800ddec:	4770      	bx	lr
 800ddee:	f803 1b01 	strb.w	r1, [r3], #1
 800ddf2:	e7f9      	b.n	800dde8 <memset+0x4>

0800ddf4 <__libc_init_array>:
 800ddf4:	b570      	push	{r4, r5, r6, lr}
 800ddf6:	4d0d      	ldr	r5, [pc, #52]	@ (800de2c <__libc_init_array+0x38>)
 800ddf8:	2600      	movs	r6, #0
 800ddfa:	4c0d      	ldr	r4, [pc, #52]	@ (800de30 <__libc_init_array+0x3c>)
 800ddfc:	1b64      	subs	r4, r4, r5
 800ddfe:	10a4      	asrs	r4, r4, #2
 800de00:	42a6      	cmp	r6, r4
 800de02:	d109      	bne.n	800de18 <__libc_init_array+0x24>
 800de04:	4d0b      	ldr	r5, [pc, #44]	@ (800de34 <__libc_init_array+0x40>)
 800de06:	2600      	movs	r6, #0
 800de08:	4c0b      	ldr	r4, [pc, #44]	@ (800de38 <__libc_init_array+0x44>)
 800de0a:	f000 f817 	bl	800de3c <_init>
 800de0e:	1b64      	subs	r4, r4, r5
 800de10:	10a4      	asrs	r4, r4, #2
 800de12:	42a6      	cmp	r6, r4
 800de14:	d105      	bne.n	800de22 <__libc_init_array+0x2e>
 800de16:	bd70      	pop	{r4, r5, r6, pc}
 800de18:	f855 3b04 	ldr.w	r3, [r5], #4
 800de1c:	3601      	adds	r6, #1
 800de1e:	4798      	blx	r3
 800de20:	e7ee      	b.n	800de00 <__libc_init_array+0xc>
 800de22:	f855 3b04 	ldr.w	r3, [r5], #4
 800de26:	3601      	adds	r6, #1
 800de28:	4798      	blx	r3
 800de2a:	e7f2      	b.n	800de12 <__libc_init_array+0x1e>
 800de2c:	0800df70 	.word	0x0800df70
 800de30:	0800df70 	.word	0x0800df70
 800de34:	0800df70 	.word	0x0800df70
 800de38:	0800df74 	.word	0x0800df74

0800de3c <_init>:
 800de3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de3e:	bf00      	nop
 800de40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de42:	bc08      	pop	{r3}
 800de44:	469e      	mov	lr, r3
 800de46:	4770      	bx	lr

0800de48 <_fini>:
 800de48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de4a:	bf00      	nop
 800de4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de4e:	bc08      	pop	{r3}
 800de50:	469e      	mov	lr, r3
 800de52:	4770      	bx	lr
