
display_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd10  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800df84  0800df84  0000ef84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e084  0800e084  0001000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e084  0800e084  0000f084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e08c  0800e08c  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e08c  0800e08c  0000f08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e090  0800e090  0000f090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800e094  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  2000000c  0800e0a0  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  0800e0a0  000103f8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bdfb  00000000  00000000  00010042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000443b  00000000  00000000  0003be3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002510  00000000  00000000  00040278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001cfb  00000000  00000000  00042788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00044f06  00000000  00000000  00044483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ed0c  00000000  00000000  00089389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b23b4  00000000  00000000  000b8095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0026a449  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3e8  00000000  00000000  0026a48c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00274874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000000c 	.word	0x2000000c
 8000290:	00000000 	.word	0x00000000
 8000294:	0800df6c 	.word	0x0800df6c

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000010 	.word	0x20000010
 80002b0:	0800df6c 	.word	0x0800df6c

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f001 fd89 	bl	80020e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f909 	bl	80007ec <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005da:	f000 f97d 	bl	80008d8 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 fcc7 	bl	8000f70 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e2:	f000 fb41 	bl	8000c68 <MX_GPDMA1_Init>
  MX_DCACHE2_Init();
 80005e6:	f000 fa0b 	bl	8000a00 <MX_DCACHE2_Init>
  MX_DSIHOST_DSI_Init();
 80005ea:	f000 fa35 	bl	8000a58 <MX_DSIHOST_DSI_Init>
  MX_ICACHE_Init();
 80005ee:	f000 fb9b 	bl	8000d28 <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005f2:	f000 fba5 	bl	8000d40 <MX_LTDC_Init>
  MX_I2C5_Init();
 80005f6:	f000 fb57 	bl	8000ca8 <MX_I2C5_Init>
  MX_RTC_Init();
 80005fa:	f000 fc1f 	bl	8000e3c <MX_RTC_Init>
  MX_DCACHE1_Init();
 80005fe:	f000 f9e9 	bl	80009d4 <MX_DCACHE1_Init>
  MX_ADC1_Init();
 8000602:	f000 f977 	bl	80008f4 <MX_ADC1_Init>
  MX_UART4_Init();
 8000606:	f000 fc67 	bl	8000ed8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

	HAL_DSI_Start(&hdsi);
 800060a:	4870      	ldr	r0, [pc, #448]	@ (80007cc <main+0x200>)
 800060c:	f006 fe14 	bl	8007238 <HAL_DSI_Start>

	HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2140      	movs	r1, #64	@ 0x40
 8000614:	486e      	ldr	r0, [pc, #440]	@ (80007d0 <main+0x204>)
 8000616:	f007 f915 	bl	8007844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SD_EN_GPIO_Port,SD_EN_Pin, RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	486c      	ldr	r0, [pc, #432]	@ (80007d0 <main+0x204>)
 8000620:	f007 f910 	bl	8007844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WL_BT_PWR_EN_GPIO_Port, WL_BT_PWR_EN_Pin, RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800062a:	486a      	ldr	r0, [pc, #424]	@ (80007d4 <main+0x208>)
 800062c:	f007 f90a 	bl	8007844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2108      	movs	r1, #8
 8000634:	4867      	ldr	r0, [pc, #412]	@ (80007d4 <main+0x208>)
 8000636:	f007 f905 	bl	8007844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000640:	4865      	ldr	r0, [pc, #404]	@ (80007d8 <main+0x20c>)
 8000642:	f007 f8ff 	bl	8007844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2108      	movs	r1, #8
 800064a:	4861      	ldr	r0, [pc, #388]	@ (80007d0 <main+0x204>)
 800064c:	f007 f8fa 	bl	8007844 <HAL_GPIO_WritePin>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 8000650:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000654:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000658:	4860      	ldr	r0, [pc, #384]	@ (80007dc <main+0x210>)
 800065a:	f004 f8a5 	bl	80047a8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&adc_value, 1);
 800065e:	2201      	movs	r2, #1
 8000660:	495f      	ldr	r1, [pc, #380]	@ (80007e0 <main+0x214>)
 8000662:	485e      	ldr	r0, [pc, #376]	@ (80007dc <main+0x210>)
 8000664:	f002 fc70 	bl	8002f48 <HAL_ADC_Start_DMA>
	HAL_Delay(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f001 fd8d 	bl	8002188 <HAL_Delay>

	//  uint8_t uart_data = adc_value >> 6;
	//  HAL_UART_Transmit(&huart4, &uart_data, 1, HAL_MAX_DELAY);

	// Turn on display power AVDD
	HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2140      	movs	r1, #64	@ 0x40
 8000672:	4857      	ldr	r0, [pc, #348]	@ (80007d0 <main+0x204>)
 8000674:	f007 f8e6 	bl	8007844 <HAL_GPIO_WritePin>
	//	GPIO_InitStruct.Pull = GPIO_PULLUP;
	//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	//	HAL_GPIO_Init(SWIRE_OUT_GPIO_Port, &GPIO_InitStruct);

	// Reset the display
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2108      	movs	r1, #8
 800067c:	4855      	ldr	r0, [pc, #340]	@ (80007d4 <main+0x208>)
 800067e:	f007 f8e1 	bl	8007844 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000682:	2001      	movs	r0, #1
 8000684:	f001 fd80 	bl	8002188 <HAL_Delay>
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2108      	movs	r1, #8
 800068c:	4851      	ldr	r0, [pc, #324]	@ (80007d4 <main+0x208>)
 800068e:	f007 f8d9 	bl	8007844 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000692:	2001      	movs	r0, #1
 8000694:	f001 fd78 	bl	8002188 <HAL_Delay>
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2108      	movs	r1, #8
 800069c:	484d      	ldr	r0, [pc, #308]	@ (80007d4 <main+0x208>)
 800069e:	f007 f8d1 	bl	8007844 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80006a2:	2032      	movs	r0, #50	@ 0x32
 80006a4:	f001 fd70 	bl	8002188 <HAL_Delay>

	HAL_StatusTypeDef status = HAL_OK;
 80006a8:	2300      	movs	r3, #0
 80006aa:	71fb      	strb	r3, [r7, #7]
	//	float old_a = 0;
	//	uint32_t count = 0;


	// Exit sleep
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 80006ac:	2300      	movs	r3, #0
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2311      	movs	r3, #17
 80006b2:	2205      	movs	r2, #5
 80006b4:	2100      	movs	r1, #0
 80006b6:	4845      	ldr	r0, [pc, #276]	@ (80007cc <main+0x200>)
 80006b8:	f006 fe1b 	bl	80072f2 <HAL_DSI_ShortWrite>
 80006bc:	4603      	mov	r3, r0
 80006be:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 80006c0:	2064      	movs	r0, #100	@ 0x64
 80006c2:	f001 fd61 	bl	8002188 <HAL_Delay>

//	// All pixels on
//	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x23, 0x00);
//	HAL_Delay(100);

	uint8_t caset_data[4] = {0x00, 0x1E, 0x01, 0xBD};
 80006c6:	4b47      	ldr	r3, [pc, #284]	@ (80007e4 <main+0x218>)
 80006c8:	603b      	str	r3, [r7, #0]
	status = HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0x2A, caset_data);
 80006ca:	463b      	mov	r3, r7
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	232a      	movs	r3, #42	@ 0x2a
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2304      	movs	r3, #4
 80006d4:	2239      	movs	r2, #57	@ 0x39
 80006d6:	2100      	movs	r1, #0
 80006d8:	483c      	ldr	r0, [pc, #240]	@ (80007cc <main+0x200>)
 80006da:	f006 fe2c 	bl	8007336 <HAL_DSI_LongWrite>
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]

//	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x2A, 0x00);
	HAL_Delay(100);
 80006e2:	2064      	movs	r0, #100	@ 0x64
 80006e4:	f001 fd50 	bl	8002188 <HAL_Delay>

	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x2B, 0x00);
 80006e8:	2300      	movs	r3, #0
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	232b      	movs	r3, #43	@ 0x2b
 80006ee:	2215      	movs	r2, #21
 80006f0:	2100      	movs	r1, #0
 80006f2:	4836      	ldr	r0, [pc, #216]	@ (80007cc <main+0x200>)
 80006f4:	f006 fdfd 	bl	80072f2 <HAL_DSI_ShortWrite>
 80006f8:	4603      	mov	r3, r0
 80006fa:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 80006fc:	2064      	movs	r0, #100	@ 0x64
 80006fe:	f001 fd43 	bl	8002188 <HAL_Delay>

//	status = HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0x3C, pixels);
//	HAL_Delay(100);

	// Display on
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 8000702:	2300      	movs	r3, #0
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2329      	movs	r3, #41	@ 0x29
 8000708:	2205      	movs	r2, #5
 800070a:	2100      	movs	r1, #0
 800070c:	482f      	ldr	r0, [pc, #188]	@ (80007cc <main+0x200>)
 800070e:	f006 fdf0 	bl	80072f2 <HAL_DSI_ShortWrite>
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8000716:	2064      	movs	r0, #100	@ 0x64
 8000718:	f001 fd36 	bl	8002188 <HAL_Delay>

	// Inversion on
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x21, 0x00);
 800071c:	2300      	movs	r3, #0
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2321      	movs	r3, #33	@ 0x21
 8000722:	2205      	movs	r2, #5
 8000724:	2100      	movs	r1, #0
 8000726:	4829      	ldr	r0, [pc, #164]	@ (80007cc <main+0x200>)
 8000728:	f006 fde3 	bl	80072f2 <HAL_DSI_ShortWrite>
 800072c:	4603      	mov	r3, r0
 800072e:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 8000730:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000734:	f001 fd28 	bl	8002188 <HAL_Delay>

	// Set normal display mode
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x13, 0x00);
 8000738:	2300      	movs	r3, #0
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2313      	movs	r3, #19
 800073e:	2205      	movs	r2, #5
 8000740:	2100      	movs	r1, #0
 8000742:	4822      	ldr	r0, [pc, #136]	@ (80007cc <main+0x200>)
 8000744:	f006 fdd5 	bl	80072f2 <HAL_DSI_ShortWrite>
 8000748:	4603      	mov	r3, r0
 800074a:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 800074c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000750:	f001 fd1a 	bl	8002188 <HAL_Delay>

	// Set brightness to max
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x51, 0xFF);
 8000754:	23ff      	movs	r3, #255	@ 0xff
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2351      	movs	r3, #81	@ 0x51
 800075a:	2215      	movs	r2, #21
 800075c:	2100      	movs	r1, #0
 800075e:	481b      	ldr	r0, [pc, #108]	@ (80007cc <main+0x200>)
 8000760:	f006 fdc7 	bl	80072f2 <HAL_DSI_ShortWrite>
 8000764:	4603      	mov	r3, r0
 8000766:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 8000768:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800076c:	f001 fd0c 	bl	8002188 <HAL_Delay>

	status = HAL_DSI_Refresh(&hdsi);
 8000770:	4816      	ldr	r0, [pc, #88]	@ (80007cc <main+0x200>)
 8000772:	f006 fd9d 	bl	80072b0 <HAL_DSI_Refresh>
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2000);
 800077a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800077e:	f001 fd03 	bl	8002188 <HAL_Delay>

	// Inversion off
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x20, 0x00);
 8000782:	2300      	movs	r3, #0
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2320      	movs	r3, #32
 8000788:	2205      	movs	r2, #5
 800078a:	2100      	movs	r1, #0
 800078c:	480f      	ldr	r0, [pc, #60]	@ (80007cc <main+0x200>)
 800078e:	f006 fdb0 	bl	80072f2 <HAL_DSI_ShortWrite>
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8000796:	2064      	movs	r0, #100	@ 0x64
 8000798:	f001 fcf6 	bl	8002188 <HAL_Delay>
  /* USER CODE BEGIN WHILE */

	while (1)
	{

		GPIO_PinState pinState = HAL_GPIO_ReadPin(SWIRE_IN_GPIO_Port, SWIRE_IN_Pin);
 800079c:	2101      	movs	r1, #1
 800079e:	480c      	ldr	r0, [pc, #48]	@ (80007d0 <main+0x204>)
 80007a0:	f007 f838 	bl	8007814 <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	71bb      	strb	r3, [r7, #6]
		if (pinState == GPIO_PIN_SET){
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d105      	bne.n	80007ba <main+0x1ee>
			HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2104      	movs	r1, #4
 80007b2:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <main+0x21c>)
 80007b4:	f007 f846 	bl	8007844 <HAL_GPIO_WritePin>
 80007b8:	e004      	b.n	80007c4 <main+0x1f8>
		}

		else {
			HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2104      	movs	r1, #4
 80007be:	480a      	ldr	r0, [pc, #40]	@ (80007e8 <main+0x21c>)
 80007c0:	f007 f840 	bl	8007844 <HAL_GPIO_WritePin>
		//				HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, RESET);
		//			}
		//		}


		HAL_Delay(10);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f001 fcdf 	bl	8002188 <HAL_Delay>
	{
 80007ca:	e7e7      	b.n	800079c <main+0x1d0>
 80007cc:	200001c0 	.word	0x200001c0
 80007d0:	42021000 	.word	0x42021000
 80007d4:	42021c00 	.word	0x42021c00
 80007d8:	42020c00 	.word	0x42020c00
 80007dc:	20000028 	.word	0x20000028
 80007e0:	200003a4 	.word	0x200003a4
 80007e4:	bd011e00 	.word	0xbd011e00
 80007e8:	42020800 	.word	0x42020800

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b09e      	sub	sp, #120	@ 0x78
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0318 	add.w	r3, r7, #24
 80007f6:	2260      	movs	r2, #96	@ 0x60
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f00d fb8a 	bl	800df14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	463b      	mov	r3, r7
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
 800080e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000810:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000814:	f007 fcd4 	bl	80081c0 <HAL_PWREx_ControlVoltageScaling>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800081e:	f000 ff11 	bl	8001644 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000822:	f007 fcad 	bl	8008180 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8000826:	4b2b      	ldr	r3, [pc, #172]	@ (80008d4 <SystemClock_Config+0xe8>)
 8000828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800082c:	f023 0318 	bic.w	r3, r3, #24
 8000830:	4a28      	ldr	r2, [pc, #160]	@ (80008d4 <SystemClock_Config+0xe8>)
 8000832:	f043 0308 	orr.w	r3, r3, #8
 8000836:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800083a:	2307      	movs	r3, #7
 800083c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800083e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000842:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000844:	2381      	movs	r3, #129	@ 0x81
 8000846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000848:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084e:	2310      	movs	r3, #16
 8000850:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000852:	2302      	movs	r3, #2
 8000854:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000856:	2303      	movs	r3, #3
 8000858:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800085e:	2301      	movs	r3, #1
 8000860:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000862:	230a      	movs	r3, #10
 8000864:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 5;
 8000866:	2305      	movs	r3, #5
 8000868:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800086e:	2301      	movs	r3, #1
 8000870:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000872:	230c      	movs	r3, #12
 8000874:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087a:	f107 0318 	add.w	r3, r7, #24
 800087e:	4618      	mov	r0, r3
 8000880:	f007 fd9a 	bl	80083b8 <HAL_RCC_OscConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800088a:	f000 fedb 	bl	8001644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088e:	231f      	movs	r3, #31
 8000890:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000892:	2303      	movs	r3, #3
 8000894:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008a6:	463b      	mov	r3, r7
 80008a8:	2104      	movs	r1, #4
 80008aa:	4618      	mov	r0, r3
 80008ac:	f008 fc60 	bl	8009170 <HAL_RCC_ClockConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xce>
  {
    Error_Handler();
 80008b6:	f000 fec5 	bl	8001644 <Error_Handler>
  }

  /** LSCO configuration
  */
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSE);
 80008ba:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80008be:	f00b ff69 	bl	800c794 <HAL_RCCEx_EnableLSCO>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80008c2:	f008 ffd7 	bl	8009874 <HAL_RCC_EnableCSS>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 80008c6:	f00b ff53 	bl	800c770 <HAL_RCCEx_EnableLSECSS>
}
 80008ca:	bf00      	nop
 80008cc:	3778      	adds	r7, #120	@ 0x78
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	46020c00 	.word	0x46020c00

080008d8 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80008dc:	f007 fd4c 	bl	8008378 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80008e0:	2002      	movs	r0, #2
 80008e2:	f007 fcf9 	bl	80082d8 <HAL_PWREx_ConfigSupply>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80008ec:	f000 feaa 	bl	8001644 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	2220      	movs	r2, #32
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f00d fb07 	bl	800df14 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000906:	4b30      	ldr	r3, [pc, #192]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 8000908:	4a30      	ldr	r2, [pc, #192]	@ (80009cc <MX_ADC1_Init+0xd8>)
 800090a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 800090c:	4b2e      	ldr	r3, [pc, #184]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 800090e:	f44f 1220 	mov.w	r2, #2621440	@ 0x280000
 8000912:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000914:	4b2c      	ldr	r3, [pc, #176]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800091a:	4b2b      	ldr	r3, [pc, #172]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000920:	4b29      	ldr	r3, [pc, #164]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000926:	4b28      	ldr	r3, [pc, #160]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800092c:	4b26      	ldr	r3, [pc, #152]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 800092e:	2204      	movs	r2, #4
 8000930:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000932:	4b25      	ldr	r3, [pc, #148]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 8000934:	2200      	movs	r2, #0
 8000936:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000938:	4b23      	ldr	r3, [pc, #140]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 800093a:	2201      	movs	r2, #1
 800093c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000940:	4b21      	ldr	r3, [pc, #132]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 8000942:	2201      	movs	r2, #1
 8000944:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000946:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 8000948:	2200      	movs	r2, #0
 800094a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800094e:	4b1e      	ldr	r3, [pc, #120]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 8000950:	2200      	movs	r2, #0
 8000952:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000954:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 8000956:	2200      	movs	r2, #0
 8000958:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800095a:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 800095c:	2201      	movs	r2, #1
 800095e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000962:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 8000964:	2200      	movs	r2, #0
 8000966:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000968:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 800096a:	2200      	movs	r2, #0
 800096c:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800096e:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 8000970:	2200      	movs	r2, #0
 8000972:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 8000976:	2203      	movs	r2, #3
 8000978:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 800097c:	2200      	movs	r2, #0
 800097e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000982:	4811      	ldr	r0, [pc, #68]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 8000984:	f001 fff8 	bl	8002978 <HAL_ADC_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800098e:	f000 fe59 	bl	8001644 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000992:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <MX_ADC1_Init+0xdc>)
 8000994:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000996:	2306      	movs	r3, #6
 8000998:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_68CYCLES;
 800099a:	2305      	movs	r3, #5
 800099c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800099e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009a4:	2304      	movs	r3, #4
 80009a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_ADC1_Init+0xd4>)
 80009b2:	f002 ff0f 	bl	80037d4 <HAL_ADC_ConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80009bc:	f000 fe42 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	3720      	adds	r7, #32
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000028 	.word	0x20000028
 80009cc:	42028000 	.word	0x42028000
 80009d0:	20000100 	.word	0x20000100

080009d4 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 80009d8:	4b07      	ldr	r3, [pc, #28]	@ (80009f8 <MX_DCACHE1_Init+0x24>)
 80009da:	4a08      	ldr	r2, [pc, #32]	@ (80009fc <MX_DCACHE1_Init+0x28>)
 80009dc:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <MX_DCACHE1_Init+0x24>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	@ (80009f8 <MX_DCACHE1_Init+0x24>)
 80009e6:	f004 f995 	bl	8004d14 <HAL_DCACHE_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 80009f0:	f000 fe28 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000168 	.word	0x20000168
 80009fc:	40031400 	.word	0x40031400

08000a00 <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <MX_DCACHE2_Init+0x4c>)
 8000a08:	4a11      	ldr	r2, [pc, #68]	@ (8000a50 <MX_DCACHE2_Init+0x50>)
 8000a0a:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <MX_DCACHE2_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 8000a12:	480e      	ldr	r0, [pc, #56]	@ (8000a4c <MX_DCACHE2_Init+0x4c>)
 8000a14:	f004 f97e 	bl	8004d14 <HAL_DCACHE_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_DCACHE2_Init+0x22>
  {
    Error_Handler();
 8000a1e:	f000 fe11 	bl	8001644 <Error_Handler>
  }
   __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <MX_DCACHE2_Init+0x54>)
 8000a24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000a28:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <MX_DCACHE2_Init+0x54>)
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000a32:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <MX_DCACHE2_Init+0x54>)
 8000a34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000a38:	f003 0302 	and.w	r3, r3, #2
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
   HAL_SYSCFG_DisableSRAMCached();
 8000a40:	f001 fc12 	bl	8002268 <HAL_SYSCFG_DisableSRAMCached>
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000194 	.word	0x20000194
 8000a50:	40031800 	.word	0x40031800
 8000a54:	46020c00 	.word	0x46020c00

08000a58 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0ae      	sub	sp, #184	@ 0xb8
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000a5e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
 8000a6e:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000a70:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a74:	2224      	movs	r2, #36	@ 0x24
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f00d fa4b 	bl	800df14 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000a7e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
 8000a8e:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000a90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a94:	2234      	movs	r2, #52	@ 0x34
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00d fa3b 	bl	800df14 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	222c      	movs	r2, #44	@ 0x2c
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f00d fa35 	bl	800df14 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8000c60 <MX_DSIHOST_DSI_Init+0x208>)
 8000aac:	4a6d      	ldr	r2, [pc, #436]	@ (8000c64 <MX_DSIHOST_DSI_Init+0x20c>)
 8000aae:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000ab0:	4b6b      	ldr	r3, [pc, #428]	@ (8000c60 <MX_DSIHOST_DSI_Init+0x208>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8000c60 <MX_DSIHOST_DSI_Init+0x208>)
 8000ab8:	2204      	movs	r2, #4
 8000aba:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000abc:	4b68      	ldr	r3, [pc, #416]	@ (8000c60 <MX_DSIHOST_DSI_Init+0x208>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 8000ac2:	4b67      	ldr	r3, [pc, #412]	@ (8000c60 <MX_DSIHOST_DSI_Init+0x208>)
 8000ac4:	2208      	movs	r2, #8
 8000ac6:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 8000ac8:	4b65      	ldr	r3, [pc, #404]	@ (8000c60 <MX_DSIHOST_DSI_Init+0x208>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 8000ace:	237d      	movs	r3, #125	@ 0x7d
 8000ad0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000af2:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000af6:	4619      	mov	r1, r3
 8000af8:	4859      	ldr	r0, [pc, #356]	@ (8000c60 <MX_DSIHOST_DSI_Init+0x208>)
 8000afa:	f005 fdc5 	bl	8006688 <HAL_DSI_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 8000b04:	f000 fd9e 	bl	8001644 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 20;
 8000b0c:	2314      	movs	r3, #20
 8000b0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.LowPowerReceptionTimeout = 20;
 8000b12:	2314      	movs	r3, #20
 8000b14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.HighSpeedReadTimeout = 20;
 8000b18:	2314      	movs	r3, #20
 8000b1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.LowPowerReadTimeout = 20;
 8000b1e:	2314      	movs	r3, #20
 8000b20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWriteTimeout = 20;
 8000b24:	2314      	movs	r3, #20
 8000b26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.LowPowerWriteTimeout = 20;
 8000b30:	2314      	movs	r3, #20
 8000b32:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  HostTimeouts.BTATimeout = 20;
 8000b36:	2314      	movs	r3, #20
 8000b38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000b3c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b40:	4619      	mov	r1, r3
 8000b42:	4847      	ldr	r0, [pc, #284]	@ (8000c60 <MX_DSIHOST_DSI_Init+0x208>)
 8000b44:	f006 fab2 	bl	80070ac <HAL_DSI_ConfigHostTimeouts>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_DSIHOST_DSI_Init+0xfa>
  {
    Error_Handler();
 8000b4e:	f000 fd79 	bl	8001644 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 10;
 8000b52:	230a      	movs	r3, #10
 8000b54:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.ClockLaneLP2HSTime = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneHS2LPTime = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneLP2HSTime = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.DataLaneMaxReadTime = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	677b      	str	r3, [r7, #116]	@ 0x74
  PhyTimings.StopWaitTime = 10;
 8000b66:	230a      	movs	r3, #10
 8000b68:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000b6a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b6e:	4619      	mov	r1, r3
 8000b70:	483b      	ldr	r0, [pc, #236]	@ (8000c60 <MX_DSIHOST_DSI_Init+0x208>)
 8000b72:	f006 fa05 	bl	8006f80 <HAL_DSI_ConfigPhyTimer>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000b7c:	f000 fd62 	bl	8001644 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000b80:	2104      	movs	r1, #4
 8000b82:	4837      	ldr	r0, [pc, #220]	@ (8000c60 <MX_DSIHOST_DSI_Init+0x208>)
 8000b84:	f006 f9d4 	bl	8006f30 <HAL_DSI_ConfigFlowControl>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000b8e:	f000 fd59 	bl	8001644 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000b92:	2100      	movs	r1, #0
 8000b94:	4832      	ldr	r0, [pc, #200]	@ (8000c60 <MX_DSIHOST_DSI_Init+0x208>)
 8000b96:	f005 fead 	bl	80068f4 <HAL_DSI_ConfigErrorMonitor>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 8000ba0:	f000 fd50 	bl	8001644 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000ba4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ba8:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000baa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bae:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000bb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000bb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000bbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc0:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000bc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bc6:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000bc8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000bce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000bd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bd8:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000bda:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000bde:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000be0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000be4:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000be6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000bea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000bf0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	481a      	ldr	r0, [pc, #104]	@ (8000c60 <MX_DSIHOST_DSI_Init+0x208>)
 8000bf8:	f006 f93c 	bl	8006e74 <HAL_DSI_ConfigCommand>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_DSIHOST_DSI_Init+0x1ae>
  {
    Error_Handler();
 8000c02:	f000 fd1f 	bl	8001644 <Error_Handler>
  }
  CmdCfg.ColorCoding = DSI_RGB888;
 8000c06:	2305      	movs	r3, #5
 8000c08:	60bb      	str	r3, [r7, #8]
  CmdCfg.CommandSize = 416;
 8000c0a:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8000c0e:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectSource = DSI_TE_DSILINK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	61bb      	str	r3, [r7, #24]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61fb      	str	r3, [r7, #28]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	480a      	ldr	r0, [pc, #40]	@ (8000c60 <MX_DSIHOST_DSI_Init+0x208>)
 8000c36:	f006 f846 	bl	8006cc6 <HAL_DSI_ConfigAdaptedCommandMode>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_DSIHOST_DSI_Init+0x1ec>
  {
    Error_Handler();
 8000c40:	f000 fd00 	bl	8001644 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000c44:	2100      	movs	r1, #0
 8000c46:	4806      	ldr	r0, [pc, #24]	@ (8000c60 <MX_DSIHOST_DSI_Init+0x208>)
 8000c48:	f006 f812 	bl	8006c70 <HAL_DSI_SetGenericVCID>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_DSIHOST_DSI_Init+0x1fe>
  {
    Error_Handler();
 8000c52:	f000 fcf7 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	37b8      	adds	r7, #184	@ 0xb8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200001c0 	.word	0x200001c0
 8000c64:	40016c00 	.word	0x40016c00

08000c68 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <MX_GPDMA1_Init+0x3c>)
 8000c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c74:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca4 <MX_GPDMA1_Init+0x3c>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <MX_GPDMA1_Init+0x3c>)
 8000c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	201d      	movs	r0, #29
 8000c92:	f003 ffbf 	bl	8004c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000c96:	201d      	movs	r0, #29
 8000c98:	f003 ffd6 	bl	8004c48 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	46020c00 	.word	0x46020c00

08000ca8 <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <MX_I2C5_Init+0x74>)
 8000cae:	4a1c      	ldr	r2, [pc, #112]	@ (8000d20 <MX_I2C5_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x30909DEC;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <MX_I2C5_Init+0x74>)
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d24 <MX_I2C5_Init+0x7c>)
 8000cb6:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <MX_I2C5_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <MX_I2C5_Init+0x74>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <MX_I2C5_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <MX_I2C5_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <MX_I2C5_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <MX_I2C5_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <MX_I2C5_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8000ce2:	480e      	ldr	r0, [pc, #56]	@ (8000d1c <MX_I2C5_Init+0x74>)
 8000ce4:	f006 fdc6 	bl	8007874 <HAL_I2C_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8000cee:	f000 fca9 	bl	8001644 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4809      	ldr	r0, [pc, #36]	@ (8000d1c <MX_I2C5_Init+0x74>)
 8000cf6:	f006 fe58 	bl	80079aa <HAL_I2CEx_ConfigAnalogFilter>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8000d00:	f000 fca0 	bl	8001644 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8000d04:	2100      	movs	r1, #0
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_I2C5_Init+0x74>)
 8000d08:	f006 fe9a 	bl	8007a40 <HAL_I2CEx_ConfigDigitalFilter>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8000d12:	f000 fc97 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200001e4 	.word	0x200001e4
 8000d20:	40009800 	.word	0x40009800
 8000d24:	30909dec 	.word	0x30909dec

08000d28 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000d2c:	f006 fed4 	bl	8007ad8 <HAL_ICACHE_Enable>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000d36:	f000 fc85 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08e      	sub	sp, #56	@ 0x38
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2234      	movs	r2, #52	@ 0x34
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f00d f8e1 	bl	800df14 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000d52:	4b38      	ldr	r3, [pc, #224]	@ (8000e34 <MX_LTDC_Init+0xf4>)
 8000d54:	4a38      	ldr	r2, [pc, #224]	@ (8000e38 <MX_LTDC_Init+0xf8>)
 8000d56:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d58:	4b36      	ldr	r3, [pc, #216]	@ (8000e34 <MX_LTDC_Init+0xf4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d5e:	4b35      	ldr	r3, [pc, #212]	@ (8000e34 <MX_LTDC_Init+0xf4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d64:	4b33      	ldr	r3, [pc, #204]	@ (8000e34 <MX_LTDC_Init+0xf4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d6a:	4b32      	ldr	r3, [pc, #200]	@ (8000e34 <MX_LTDC_Init+0xf4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000d70:	4b30      	ldr	r3, [pc, #192]	@ (8000e34 <MX_LTDC_Init+0xf4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000d76:	4b2f      	ldr	r3, [pc, #188]	@ (8000e34 <MX_LTDC_Init+0xf4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e34 <MX_LTDC_Init+0xf4>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000d82:	4b2c      	ldr	r3, [pc, #176]	@ (8000e34 <MX_LTDC_Init+0xf4>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 417;
 8000d88:	4b2a      	ldr	r3, [pc, #168]	@ (8000e34 <MX_LTDC_Init+0xf4>)
 8000d8a:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000d8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 417;
 8000d90:	4b28      	ldr	r3, [pc, #160]	@ (8000e34 <MX_LTDC_Init+0xf4>)
 8000d92:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000d96:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 418;
 8000d98:	4b26      	ldr	r3, [pc, #152]	@ (8000e34 <MX_LTDC_Init+0xf4>)
 8000d9a:	f44f 72d1 	mov.w	r2, #418	@ 0x1a2
 8000d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 418;
 8000da0:	4b24      	ldr	r3, [pc, #144]	@ (8000e34 <MX_LTDC_Init+0xf4>)
 8000da2:	f44f 72d1 	mov.w	r2, #418	@ 0x1a2
 8000da6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000da8:	4b22      	ldr	r3, [pc, #136]	@ (8000e34 <MX_LTDC_Init+0xf4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000db0:	4b20      	ldr	r3, [pc, #128]	@ (8000e34 <MX_LTDC_Init+0xf4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000db8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e34 <MX_LTDC_Init+0xf4>)
 8000dba:	22ff      	movs	r2, #255	@ 0xff
 8000dbc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000dc0:	481c      	ldr	r0, [pc, #112]	@ (8000e34 <MX_LTDC_Init+0xf4>)
 8000dc2:	f006 fe99 	bl	8007af8 <HAL_LTDC_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000dcc:	f000 fc3a 	bl	8001644 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000dec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000df0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000df2:	2305      	movs	r3, #5
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000e0e:	23ff      	movs	r3, #255	@ 0xff
 8000e10:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2200      	movs	r2, #0
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4806      	ldr	r0, [pc, #24]	@ (8000e34 <MX_LTDC_Init+0xf4>)
 8000e1c:	f006 fffe 	bl	8007e1c <HAL_LTDC_ConfigLayer>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_LTDC_Init+0xea>
  {
    Error_Handler();
 8000e26:	f000 fc0d 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	3738      	adds	r7, #56	@ 0x38
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000238 	.word	0x20000238
 8000e38:	40016800 	.word	0x40016800

08000e3c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
 8000e50:	615a      	str	r2, [r3, #20]
 8000e52:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed0 <MX_RTC_Init+0x94>)
 8000e56:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed4 <MX_RTC_Init+0x98>)
 8000e58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed0 <MX_RTC_Init+0x94>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed0 <MX_RTC_Init+0x94>)
 8000e62:	227f      	movs	r2, #127	@ 0x7f
 8000e64:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed0 <MX_RTC_Init+0x94>)
 8000e68:	22ff      	movs	r2, #255	@ 0xff
 8000e6a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ed0 <MX_RTC_Init+0x94>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e72:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <MX_RTC_Init+0x94>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e78:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <MX_RTC_Init+0x94>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <MX_RTC_Init+0x94>)
 8000e80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e84:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000e86:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <MX_RTC_Init+0x94>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000e8c:	4b10      	ldr	r3, [pc, #64]	@ (8000ed0 <MX_RTC_Init+0x94>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e92:	480f      	ldr	r0, [pc, #60]	@ (8000ed0 <MX_RTC_Init+0x94>)
 8000e94:	f00b fdfc 	bl	800ca90 <HAL_RTC_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000e9e:	f000 fbd1 	bl	8001644 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4806      	ldr	r0, [pc, #24]	@ (8000ed0 <MX_RTC_Init+0x94>)
 8000eb8:	f00b ff18 	bl	800ccec <HAL_RTCEx_PrivilegeModeSet>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8000ec2:	f000 fbbf 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	3720      	adds	r7, #32
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200002e0 	.word	0x200002e0
 8000ed4:	46007800 	.word	0x46007800

08000ed8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000edc:	4b22      	ldr	r3, [pc, #136]	@ (8000f68 <MX_UART4_Init+0x90>)
 8000ede:	4a23      	ldr	r2, [pc, #140]	@ (8000f6c <MX_UART4_Init+0x94>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	@ (8000f68 <MX_UART4_Init+0x90>)
 8000ee4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b1f      	ldr	r3, [pc, #124]	@ (8000f68 <MX_UART4_Init+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <MX_UART4_Init+0x90>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <MX_UART4_Init+0x90>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <MX_UART4_Init+0x90>)
 8000efe:	220c      	movs	r2, #12
 8000f00:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f02:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <MX_UART4_Init+0x90>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f08:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <MX_UART4_Init+0x90>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <MX_UART4_Init+0x90>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f14:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <MX_UART4_Init+0x90>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <MX_UART4_Init+0x90>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f20:	4811      	ldr	r0, [pc, #68]	@ (8000f68 <MX_UART4_Init+0x90>)
 8000f22:	f00c fad7 	bl	800d4d4 <HAL_UART_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000f2c:	f000 fb8a 	bl	8001644 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f30:	2100      	movs	r1, #0
 8000f32:	480d      	ldr	r0, [pc, #52]	@ (8000f68 <MX_UART4_Init+0x90>)
 8000f34:	f00c ff24 	bl	800dd80 <HAL_UARTEx_SetTxFifoThreshold>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000f3e:	f000 fb81 	bl	8001644 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f42:	2100      	movs	r1, #0
 8000f44:	4808      	ldr	r0, [pc, #32]	@ (8000f68 <MX_UART4_Init+0x90>)
 8000f46:	f00c ff59 	bl	800ddfc <HAL_UARTEx_SetRxFifoThreshold>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000f50:	f000 fb78 	bl	8001644 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <MX_UART4_Init+0x90>)
 8000f56:	f00c feda 	bl	800dd0e <HAL_UARTEx_DisableFifoMode>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000f60:	f000 fb70 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000310 	.word	0x20000310
 8000f6c:	40004c00 	.word	0x40004c00

08000f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08e      	sub	sp, #56	@ 0x38
 8000f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	4bbf      	ldr	r3, [pc, #764]	@ (8001284 <MX_GPIO_Init+0x314>)
 8000f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f8c:	4abd      	ldr	r2, [pc, #756]	@ (8001284 <MX_GPIO_Init+0x314>)
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f96:	4bbb      	ldr	r3, [pc, #748]	@ (8001284 <MX_GPIO_Init+0x314>)
 8000f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	623b      	str	r3, [r7, #32]
 8000fa2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa4:	4bb7      	ldr	r3, [pc, #732]	@ (8001284 <MX_GPIO_Init+0x314>)
 8000fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000faa:	4ab6      	ldr	r2, [pc, #728]	@ (8001284 <MX_GPIO_Init+0x314>)
 8000fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fb0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fb4:	4bb3      	ldr	r3, [pc, #716]	@ (8001284 <MX_GPIO_Init+0x314>)
 8000fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fbe:	61fb      	str	r3, [r7, #28]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc2:	4bb0      	ldr	r3, [pc, #704]	@ (8001284 <MX_GPIO_Init+0x314>)
 8000fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fc8:	4aae      	ldr	r2, [pc, #696]	@ (8001284 <MX_GPIO_Init+0x314>)
 8000fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fd2:	4bac      	ldr	r3, [pc, #688]	@ (8001284 <MX_GPIO_Init+0x314>)
 8000fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fdc:	61bb      	str	r3, [r7, #24]
 8000fde:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe0:	4ba8      	ldr	r3, [pc, #672]	@ (8001284 <MX_GPIO_Init+0x314>)
 8000fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fe6:	4aa7      	ldr	r2, [pc, #668]	@ (8001284 <MX_GPIO_Init+0x314>)
 8000fe8:	f043 0308 	orr.w	r3, r3, #8
 8000fec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ff0:	4ba4      	ldr	r3, [pc, #656]	@ (8001284 <MX_GPIO_Init+0x314>)
 8000ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	4ba1      	ldr	r3, [pc, #644]	@ (8001284 <MX_GPIO_Init+0x314>)
 8001000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001004:	4a9f      	ldr	r2, [pc, #636]	@ (8001284 <MX_GPIO_Init+0x314>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800100e:	4b9d      	ldr	r3, [pc, #628]	@ (8001284 <MX_GPIO_Init+0x314>)
 8001010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800101c:	4b99      	ldr	r3, [pc, #612]	@ (8001284 <MX_GPIO_Init+0x314>)
 800101e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001022:	4a98      	ldr	r2, [pc, #608]	@ (8001284 <MX_GPIO_Init+0x314>)
 8001024:	f043 0310 	orr.w	r3, r3, #16
 8001028:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800102c:	4b95      	ldr	r3, [pc, #596]	@ (8001284 <MX_GPIO_Init+0x314>)
 800102e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001032:	f003 0310 	and.w	r3, r3, #16
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b92      	ldr	r3, [pc, #584]	@ (8001284 <MX_GPIO_Init+0x314>)
 800103c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001040:	4a90      	ldr	r2, [pc, #576]	@ (8001284 <MX_GPIO_Init+0x314>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800104a:	4b8e      	ldr	r3, [pc, #568]	@ (8001284 <MX_GPIO_Init+0x314>)
 800104c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001058:	4b8a      	ldr	r3, [pc, #552]	@ (8001284 <MX_GPIO_Init+0x314>)
 800105a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800105e:	4a89      	ldr	r2, [pc, #548]	@ (8001284 <MX_GPIO_Init+0x314>)
 8001060:	f043 0320 	orr.w	r3, r3, #32
 8001064:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001068:	4b86      	ldr	r3, [pc, #536]	@ (8001284 <MX_GPIO_Init+0x314>)
 800106a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800106e:	f003 0320 	and.w	r3, r3, #32
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001076:	4b83      	ldr	r3, [pc, #524]	@ (8001284 <MX_GPIO_Init+0x314>)
 8001078:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800107c:	4a81      	ldr	r2, [pc, #516]	@ (8001284 <MX_GPIO_Init+0x314>)
 800107e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001082:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001086:	4b7f      	ldr	r3, [pc, #508]	@ (8001284 <MX_GPIO_Init+0x314>)
 8001088:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800108c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DISPLAY_RST_Pin|WL_BT_PWR_EN_Pin|FLASH_RST_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f24a 0108 	movw	r1, #40968	@ 0xa008
 800109a:	487b      	ldr	r0, [pc, #492]	@ (8001288 <MX_GPIO_Init+0x318>)
 800109c:	f006 fbd2 	bl	8007844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GNSS_WAKEUP_Pin|GNSS_RST_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80010a6:	4879      	ldr	r0, [pc, #484]	@ (800128c <MX_GPIO_Init+0x31c>)
 80010a8:	f006 fbcc 	bl	8007844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TP_RST_Pin|AVDDEN_Pin|SD_EN_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	21c8      	movs	r1, #200	@ 0xc8
 80010b0:	4877      	ldr	r0, [pc, #476]	@ (8001290 <MX_GPIO_Init+0x320>)
 80010b2:	f006 fbc7 	bl	8007844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, BT_DEV_WAKE_Pin|BT_EN_Pin|WL_EN_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2107      	movs	r1, #7
 80010ba:	4876      	ldr	r0, [pc, #472]	@ (8001294 <MX_GPIO_Init+0x324>)
 80010bc:	f006 fbc2 	bl	8007844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO2_GPIO_Port, GPIO2_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2104      	movs	r1, #4
 80010c4:	4874      	ldr	r0, [pc, #464]	@ (8001298 <MX_GPIO_Init+0x328>)
 80010c6:	f006 fbbd 	bl	8007844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2104      	movs	r1, #4
 80010ce:	4873      	ldr	r0, [pc, #460]	@ (800129c <MX_GPIO_Init+0x32c>)
 80010d0:	f006 fbb8 	bl	8007844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TOUCH_RST_Pin|LRA_EN_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 4141 	mov.w	r1, #49408	@ 0xc100
 80010da:	4871      	ldr	r0, [pc, #452]	@ (80012a0 <MX_GPIO_Init+0x330>)
 80010dc:	f006 fbb2 	bl	8007844 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 80010e0:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e6:	2312      	movs	r3, #18
 80010e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f2:	2304      	movs	r3, #4
 80010f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010fa:	4619      	mov	r1, r3
 80010fc:	4869      	ldr	r0, [pc, #420]	@ (80012a4 <MX_GPIO_Init+0x334>)
 80010fe:	f006 f9b1 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_RST_Pin WL_BT_PWR_EN_Pin FLASH_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin|WL_BT_PWR_EN_Pin|FLASH_RST_Pin;
 8001102:	f24a 0308 	movw	r3, #40968	@ 0xa008
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001114:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001118:	4619      	mov	r1, r3
 800111a:	485b      	ldr	r0, [pc, #364]	@ (8001288 <MX_GPIO_Init+0x318>)
 800111c:	f006 f9a2 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB3 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_14;
 8001120:	f244 0318 	movw	r3, #16408	@ 0x4018
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112e:	2302      	movs	r3, #2
 8001130:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC2;
 8001132:	230c      	movs	r3, #12
 8001134:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800113a:	4619      	mov	r1, r3
 800113c:	4859      	ldr	r0, [pc, #356]	@ (80012a4 <MX_GPIO_Init+0x334>)
 800113e:	f006 f991 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_WAKEUP_Pin GNSS_RST_Pin GPIO3_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin|GNSS_RST_Pin|GPIO3_Pin;
 8001142:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001154:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001158:	4619      	mov	r1, r3
 800115a:	484c      	ldr	r0, [pc, #304]	@ (800128c <MX_GPIO_Init+0x31c>)
 800115c:	f006 f982 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_PPS_Pin ALS_INT_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin|ALS_INT_Pin;
 8001160:	f241 0302 	movw	r3, #4098	@ 0x1002
 8001164:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001166:	4b50      	ldr	r3, [pc, #320]	@ (80012a8 <MX_GPIO_Init+0x338>)
 8001168:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800116e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001172:	4619      	mov	r1, r3
 8001174:	4845      	ldr	r0, [pc, #276]	@ (800128c <MX_GPIO_Init+0x31c>)
 8001176:	f006 f975 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800117a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800118c:	2307      	movs	r3, #7
 800118e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001190:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001194:	4619      	mov	r1, r3
 8001196:	483d      	ldr	r0, [pc, #244]	@ (800128c <MX_GPIO_Init+0x31c>)
 8001198:	f006 f964 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800119c:	23c0      	movs	r3, #192	@ 0xc0
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a8:	2302      	movs	r3, #2
 80011aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80011ac:	230b      	movs	r3, #11
 80011ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b4:	4619      	mov	r1, r3
 80011b6:	483a      	ldr	r0, [pc, #232]	@ (80012a0 <MX_GPIO_Init+0x330>)
 80011b8:	f006 f954 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD5 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_4;
 80011bc:	2338      	movs	r3, #56	@ 0x38
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011cc:	2307      	movs	r3, #7
 80011ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d4:	4619      	mov	r1, r3
 80011d6:	4832      	ldr	r0, [pc, #200]	@ (80012a0 <MX_GPIO_Init+0x330>)
 80011d8:	f006 f944 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC10 PC11 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 80011dc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ea:	2302      	movs	r3, #2
 80011ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011ee:	230c      	movs	r3, #12
 80011f0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f6:	4619      	mov	r1, r3
 80011f8:	4828      	ldr	r0, [pc, #160]	@ (800129c <MX_GPIO_Init+0x32c>)
 80011fa:	f006 f933 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_INT_Pin SWIRE_IN_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin|SWIRE_IN_Pin;
 80011fe:	2305      	movs	r3, #5
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001202:	2300      	movs	r3, #0
 8001204:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800120a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120e:	4619      	mov	r1, r3
 8001210:	481f      	ldr	r0, [pc, #124]	@ (8001290 <MX_GPIO_Init+0x320>)
 8001212:	f006 f927 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_RST_Pin AVDDEN_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = TP_RST_Pin|AVDDEN_Pin|SD_EN_Pin;
 8001216:	23c8      	movs	r3, #200	@ 0xc8
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800122a:	4619      	mov	r1, r3
 800122c:	4818      	ldr	r0, [pc, #96]	@ (8001290 <MX_GPIO_Init+0x320>)
 800122e:	f006 f919 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001232:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001240:	2302      	movs	r3, #2
 8001242:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001244:	2308      	movs	r3, #8
 8001246:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800124c:	4619      	mov	r1, r3
 800124e:	4815      	ldr	r0, [pc, #84]	@ (80012a4 <MX_GPIO_Init+0x334>)
 8001250:	f006 f908 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001254:	2320      	movs	r3, #32
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001264:	2303      	movs	r3, #3
 8001266:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800126c:	4619      	mov	r1, r3
 800126e:	480d      	ldr	r0, [pc, #52]	@ (80012a4 <MX_GPIO_Init+0x334>)
 8001270:	f006 f8f8 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001274:	2304      	movs	r3, #4
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001280:	e014      	b.n	80012ac <MX_GPIO_Init+0x33c>
 8001282:	bf00      	nop
 8001284:	46020c00 	.word	0x46020c00
 8001288:	42021c00 	.word	0x42021c00
 800128c:	42021800 	.word	0x42021800
 8001290:	42021000 	.word	0x42021000
 8001294:	42022000 	.word	0x42022000
 8001298:	42021400 	.word	0x42021400
 800129c:	42020800 	.word	0x42020800
 80012a0:	42020c00 	.word	0x42020c00
 80012a4:	42020400 	.word	0x42020400
 80012a8:	10110000 	.word	0x10110000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ac:	2302      	movs	r3, #2
 80012ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012b0:	230c      	movs	r3, #12
 80012b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b8:	4619      	mov	r1, r3
 80012ba:	48ba      	ldr	r0, [pc, #744]	@ (80015a4 <MX_GPIO_Init+0x634>)
 80012bc:	f006 f8d2 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWIRE_OUT_Pin */
  GPIO_InitStruct.Pin = SWIRE_OUT_Pin;
 80012c0:	2310      	movs	r3, #16
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012c8:	2302      	movs	r3, #2
 80012ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SWIRE_OUT_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	48b5      	ldr	r0, [pc, #724]	@ (80015a8 <MX_GPIO_Init+0x638>)
 80012d4:	f006 f8c6 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT1_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|MAG_INT_Pin;
 80012d8:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012de:	4bb3      	ldr	r3, [pc, #716]	@ (80015ac <MX_GPIO_Init+0x63c>)
 80012e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	48ae      	ldr	r0, [pc, #696]	@ (80015a8 <MX_GPIO_Init+0x638>)
 80012ee:	f006 f8b9 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001304:	2303      	movs	r3, #3
 8001306:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	48a8      	ldr	r0, [pc, #672]	@ (80015b0 <MX_GPIO_Init+0x640>)
 8001310:	f006 f8a8 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001314:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	48a0      	ldr	r0, [pc, #640]	@ (80015b0 <MX_GPIO_Init+0x640>)
 800132e:	f006 f899 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001332:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001340:	2302      	movs	r3, #2
 8001342:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC2;
 8001344:	2308      	movs	r3, #8
 8001346:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	4898      	ldr	r0, [pc, #608]	@ (80015b0 <MX_GPIO_Init+0x640>)
 8001350:	f006 f888 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin FLASH_RSTO_Pin FLASH_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|FLASH_RSTO_Pin|FLASH_INT_Pin;
 8001354:	f44f 5303 	mov.w	r3, #8384	@ 0x20c0
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800135a:	4b94      	ldr	r3, [pc, #592]	@ (80015ac <MX_GPIO_Init+0x63c>)
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	4892      	ldr	r0, [pc, #584]	@ (80015b4 <MX_GPIO_Init+0x644>)
 800136a:	f006 f87b 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800136e:	2303      	movs	r3, #3
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001372:	2312      	movs	r3, #18
 8001374:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 800137e:	2302      	movs	r3, #2
 8001380:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001382:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001386:	4619      	mov	r1, r3
 8001388:	488b      	ldr	r0, [pc, #556]	@ (80015b8 <MX_GPIO_Init+0x648>)
 800138a:	f006 f86b 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_DEV_WAKE_Pin BT_EN_Pin WL_EN_Pin */
  GPIO_InitStruct.Pin = BT_DEV_WAKE_Pin|BT_EN_Pin|WL_EN_Pin;
 800138e:	2307      	movs	r3, #7
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800139e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a2:	4619      	mov	r1, r3
 80013a4:	4885      	ldr	r0, [pc, #532]	@ (80015bc <MX_GPIO_Init+0x64c>)
 80013a6:	f006 f85d 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_HOST_WAKE_Pin */
  GPIO_InitStruct.Pin = BT_HOST_WAKE_Pin;
 80013aa:	2308      	movs	r3, #8
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ae:	4b7f      	ldr	r3, [pc, #508]	@ (80015ac <MX_GPIO_Init+0x63c>)
 80013b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BT_HOST_WAKE_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ba:	4619      	mov	r1, r3
 80013bc:	487f      	ldr	r0, [pc, #508]	@ (80015bc <MX_GPIO_Init+0x64c>)
 80013be:	f006 f851 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin;
 80013c2:	2304      	movs	r3, #4
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIO2_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d6:	4619      	mov	r1, r3
 80013d8:	4877      	ldr	r0, [pc, #476]	@ (80015b8 <MX_GPIO_Init+0x648>)
 80013da:	f006 f843 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin;
 80013de:	2304      	movs	r3, #4
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIO1_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f2:	4619      	mov	r1, r3
 80013f4:	486f      	ldr	r0, [pc, #444]	@ (80015b4 <MX_GPIO_Init+0x644>)
 80013f6:	f006 f835 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pin : WL_HOST_WAKE_Pin */
  GPIO_InitStruct.Pin = WL_HOST_WAKE_Pin;
 80013fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001400:	4b6a      	ldr	r3, [pc, #424]	@ (80015ac <MX_GPIO_Init+0x63c>)
 8001402:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(WL_HOST_WAKE_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800140c:	4619      	mov	r1, r3
 800140e:	486c      	ldr	r0, [pc, #432]	@ (80015c0 <MX_GPIO_Init+0x650>)
 8001410:	f006 f828 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8001414:	f240 4304 	movw	r3, #1028	@ 0x404
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001426:	230a      	movs	r3, #10
 8001428:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800142e:	4619      	mov	r1, r3
 8001430:	4864      	ldr	r0, [pc, #400]	@ (80015c4 <MX_GPIO_Init+0x654>)
 8001432:	f006 f817 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8001436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800143c:	2311      	movs	r3, #17
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800144c:	4619      	mov	r1, r3
 800144e:	4855      	ldr	r0, [pc, #340]	@ (80015a4 <MX_GPIO_Init+0x634>)
 8001450:	f006 f808 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH12 PH11 PH10 PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9;
 8001454:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001466:	2305      	movs	r3, #5
 8001468:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800146a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146e:	4619      	mov	r1, r3
 8001470:	4853      	ldr	r0, [pc, #332]	@ (80015c0 <MX_GPIO_Init+0x650>)
 8001472:	f005 fff7 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001476:	2301      	movs	r3, #1
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001486:	2305      	movs	r3, #5
 8001488:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800148e:	4619      	mov	r1, r3
 8001490:	484c      	ldr	r0, [pc, #304]	@ (80015c4 <MX_GPIO_Init+0x654>)
 8001492:	f005 ffe7 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001496:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 80014a8:	2303      	movs	r3, #3
 80014aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b0:	4619      	mov	r1, r3
 80014b2:	483d      	ldr	r0, [pc, #244]	@ (80015a8 <MX_GPIO_Init+0x638>)
 80014b4:	f005 ffd6 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE14 PE13 PE11
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11
 80014b8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80014ca:	230a      	movs	r3, #10
 80014cc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d2:	4619      	mov	r1, r3
 80014d4:	4834      	ldr	r0, [pc, #208]	@ (80015a8 <MX_GPIO_Init+0x638>)
 80014d6:	f005 ffc5 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80014da:	2303      	movs	r3, #3
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014de:	2312      	movs	r3, #18
 80014e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014ea:	2304      	movs	r3, #4
 80014ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f2:	4619      	mov	r1, r3
 80014f4:	482f      	ldr	r0, [pc, #188]	@ (80015b4 <MX_GPIO_Init+0x644>)
 80014f6:	f005 ffb5 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 80014fa:	23e0      	movs	r3, #224	@ 0xe0
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800150a:	2305      	movs	r3, #5
 800150c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001512:	4619      	mov	r1, r3
 8001514:	4826      	ldr	r0, [pc, #152]	@ (80015b0 <MX_GPIO_Init+0x640>)
 8001516:	f005 ffa5 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 800151a:	2301      	movs	r3, #1
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151e:	2300      	movs	r3, #0
 8001520:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	4826      	ldr	r0, [pc, #152]	@ (80015c8 <MX_GPIO_Init+0x658>)
 800152e:	f005 ff99 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001532:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001538:	2312      	movs	r3, #18
 800153a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001544:	2304      	movs	r3, #4
 8001546:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001548:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154c:	4619      	mov	r1, r3
 800154e:	4815      	ldr	r0, [pc, #84]	@ (80015a4 <MX_GPIO_Init+0x634>)
 8001550:	f005 ff88 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_INT_Pin TOUCH_INT_Pin HR_INT_Pin */
  GPIO_InitStruct.Pin = PWR_INT_Pin|TOUCH_INT_Pin|HR_INT_Pin;
 8001554:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800155a:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <MX_GPIO_Init+0x63c>)
 800155c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001566:	4619      	mov	r1, r3
 8001568:	480e      	ldr	r0, [pc, #56]	@ (80015a4 <MX_GPIO_Init+0x634>)
 800156a:	f005 ff7b 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800156e:	2304      	movs	r3, #4
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001572:	2303      	movs	r3, #3
 8001574:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	480b      	ldr	r0, [pc, #44]	@ (80015b0 <MX_GPIO_Init+0x640>)
 8001582:	f005 ff6f 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001586:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800158c:	2312      	movs	r3, #18
 800158e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001598:	2304      	movs	r3, #4
 800159a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	e013      	b.n	80015cc <MX_GPIO_Init+0x65c>
 80015a4:	42020c00 	.word	0x42020c00
 80015a8:	42021000 	.word	0x42021000
 80015ac:	10110000 	.word	0x10110000
 80015b0:	42020000 	.word	0x42020000
 80015b4:	42020800 	.word	0x42020800
 80015b8:	42021400 	.word	0x42021400
 80015bc:	42022000 	.word	0x42022000
 80015c0:	42021c00 	.word	0x42021c00
 80015c4:	42020400 	.word	0x42020400
 80015c8:	42021800 	.word	0x42021800
 80015cc:	4811      	ldr	r0, [pc, #68]	@ (8001614 <MX_GPIO_Init+0x6a4>)
 80015ce:	f005 ff49 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pins : LRA_EN_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin|PWR_ENCHG_Pin;
 80015d2:	f44f 4382 	mov.w	r3, #16640	@ 0x4100
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e8:	4619      	mov	r1, r3
 80015ea:	480b      	ldr	r0, [pc, #44]	@ (8001618 <MX_GPIO_Init+0x6a8>)
 80015ec:	f005 ff3a 	bl	8007464 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80015f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f6:	4b09      	ldr	r3, [pc, #36]	@ (800161c <MX_GPIO_Init+0x6ac>)
 80015f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001602:	4619      	mov	r1, r3
 8001604:	4803      	ldr	r0, [pc, #12]	@ (8001614 <MX_GPIO_Init+0x6a4>)
 8001606:	f005 ff2d 	bl	8007464 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800160a:	bf00      	nop
 800160c:	3738      	adds	r7, #56	@ 0x38
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	42020400 	.word	0x42020400
 8001618:	42020c00 	.word	0x42020c00
 800161c:	10110000 	.word	0x10110000

08001620 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a04      	ldr	r2, [pc, #16]	@ (8001640 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d101      	bne.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001632:	f000 fd89 	bl	8002148 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40001000 	.word	0x40001000

08001644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
}
 800164a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <Error_Handler+0x8>

08001650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <HAL_MspInit+0x70>)
 8001658:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800165c:	4a18      	ldr	r2, [pc, #96]	@ (80016c0 <HAL_MspInit+0x70>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001666:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <HAL_MspInit+0x70>)
 8001668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001674:	f006 fe90 	bl	8008398 <HAL_PWREx_EnableVddA>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	2009      	movs	r0, #9
 800167e:	f003 fac9 	bl	8004c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001682:	2009      	movs	r0, #9
 8001684:	f003 fae0 	bl	8004c48 <HAL_NVIC_EnableIRQ>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8001688:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <HAL_MspInit+0x70>)
 800168a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800168e:	4a0c      	ldr	r2, [pc, #48]	@ (80016c0 <HAL_MspInit+0x70>)
 8001690:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001694:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001698:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <HAL_MspInit+0x70>)
 800169a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800169e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f000 fd92 	bl	80021d0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80016ac:	f000 fdb8 	bl	8002220 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80016b0:	2000      	movs	r0, #0
 80016b2:	f000 fda1 	bl	80021f8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	46020c00 	.word	0x46020c00

080016c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0de      	sub	sp, #376	@ 0x178
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80016ce:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80016d2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80016e8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80016ec:	4618      	mov	r0, r3
 80016ee:	23e0      	movs	r3, #224	@ 0xe0
 80016f0:	461a      	mov	r2, r3
 80016f2:	2100      	movs	r1, #0
 80016f4:	f00c fc0e 	bl	800df14 <memset>
  if(hadc->Instance==ADC1)
 80016f8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80016fc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a9f      	ldr	r2, [pc, #636]	@ (8001984 <HAL_ADC_MspInit+0x2c0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	f040 8136 	bne.w	8001978 <HAL_ADC_MspInit+0x2b4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800170c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001710:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001714:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001720:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001724:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001728:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800172c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001730:	f107 0318 	add.w	r3, r7, #24
 8001734:	4618      	mov	r0, r3
 8001736:	f008 f94f 	bl	80099d8 <HAL_RCCEx_PeriphCLKConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001740:	f7ff ff80 	bl	8001644 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001744:	4b90      	ldr	r3, [pc, #576]	@ (8001988 <HAL_ADC_MspInit+0x2c4>)
 8001746:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800174a:	4a8f      	ldr	r2, [pc, #572]	@ (8001988 <HAL_ADC_MspInit+0x2c4>)
 800174c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001750:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001754:	4b8c      	ldr	r3, [pc, #560]	@ (8001988 <HAL_ADC_MspInit+0x2c4>)
 8001756:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800175a:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800175e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001762:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800176c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001770:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001772:	4b85      	ldr	r3, [pc, #532]	@ (8001988 <HAL_ADC_MspInit+0x2c4>)
 8001774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001778:	4a83      	ldr	r2, [pc, #524]	@ (8001988 <HAL_ADC_MspInit+0x2c4>)
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001782:	4b81      	ldr	r3, [pc, #516]	@ (8001988 <HAL_ADC_MspInit+0x2c4>)
 8001784:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001788:	f003 0204 	and.w	r2, r3, #4
 800178c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001790:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800179a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800179e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a0:	4b79      	ldr	r3, [pc, #484]	@ (8001988 <HAL_ADC_MspInit+0x2c4>)
 80017a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017a6:	4a78      	ldr	r2, [pc, #480]	@ (8001988 <HAL_ADC_MspInit+0x2c4>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017b0:	4b75      	ldr	r3, [pc, #468]	@ (8001988 <HAL_ADC_MspInit+0x2c4>)
 80017b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017b6:	f003 0201 	and.w	r2, r3, #1
 80017ba:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80017be:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80017c8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017cc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001988 <HAL_ADC_MspInit+0x2c4>)
 80017d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017d4:	4a6c      	ldr	r2, [pc, #432]	@ (8001988 <HAL_ADC_MspInit+0x2c4>)
 80017d6:	f043 0302 	orr.w	r3, r3, #2
 80017da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017de:	4b6a      	ldr	r3, [pc, #424]	@ (8001988 <HAL_ADC_MspInit+0x2c4>)
 80017e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017e4:	f003 0202 	and.w	r2, r3, #2
 80017e8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80017ec:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80017f6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80017fa:	681b      	ldr	r3, [r3, #0]
    PC3     ------> ADC1_IN4
    PA4     ------> ADC1_IN9
    PA3     ------> ADC1_IN8
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ELVSS_ADC_Pin;
 80017fc:	2308      	movs	r3, #8
 80017fe:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001802:	2303      	movs	r3, #3
 8001804:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    HAL_GPIO_Init(ELVSS_ADC_GPIO_Port, &GPIO_InitStruct);
 800180e:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8001812:	4619      	mov	r1, r3
 8001814:	485d      	ldr	r0, [pc, #372]	@ (800198c <HAL_ADC_MspInit+0x2c8>)
 8001816:	f005 fe25 	bl	8007464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ELVDD_ADC_Pin|AVDD_ADC_Pin;
 800181a:	2318      	movs	r3, #24
 800181c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001820:	2303      	movs	r3, #3
 8001822:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8001830:	4619      	mov	r1, r3
 8001832:	4857      	ldr	r0, [pc, #348]	@ (8001990 <HAL_ADC_MspInit+0x2cc>)
 8001834:	f005 fe16 	bl	8007464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ISYS_ADC_Pin;
 8001838:	2302      	movs	r3, #2
 800183a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800183e:	2303      	movs	r3, #3
 8001840:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    HAL_GPIO_Init(ISYS_ADC_GPIO_Port, &GPIO_InitStruct);
 800184a:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800184e:	4619      	mov	r1, r3
 8001850:	4850      	ldr	r0, [pc, #320]	@ (8001994 <HAL_ADC_MspInit+0x2d0>)
 8001852:	f005 fe07 	bl	8007464 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001856:	2321      	movs	r3, #33	@ 0x21
 8001858:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001868:	2300      	movs	r3, #0
 800186a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800186e:	2300      	movs	r3, #0
 8001870:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8001874:	2300      	movs	r3, #0
 8001876:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800187a:	2301      	movs	r3, #1
 800187c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001880:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001884:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcBurstLength = 1;
 8001888:	2301      	movs	r3, #1
 800188a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.DestBurstLength = 1;
 800188e:	2301      	movs	r3, #1
 8001890:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8001894:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001898:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.Mode = DMA_NORMAL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80018ba:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 80018be:	4936      	ldr	r1, [pc, #216]	@ (8001998 <HAL_ADC_MspInit+0x2d4>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	f003 feb5 	bl	8005630 <HAL_DMAEx_List_BuildNode>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_ADC_MspInit+0x20c>
    {
      Error_Handler();
 80018cc:	f7ff feba 	bl	8001644 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80018d0:	4a31      	ldr	r2, [pc, #196]	@ (8001998 <HAL_ADC_MspInit+0x2d4>)
 80018d2:	2100      	movs	r1, #0
 80018d4:	4831      	ldr	r0, [pc, #196]	@ (800199c <HAL_ADC_MspInit+0x2d8>)
 80018d6:	f003 fed7 	bl	8005688 <HAL_DMAEx_List_InsertNode>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <HAL_ADC_MspInit+0x220>
    {
      Error_Handler();
 80018e0:	f7ff feb0 	bl	8001644 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80018e4:	482d      	ldr	r0, [pc, #180]	@ (800199c <HAL_ADC_MspInit+0x2d8>)
 80018e6:	f003 ff98 	bl	800581a <HAL_DMAEx_List_SetCircularMode>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 80018f0:	f7ff fea8 	bl	8001644 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80018f4:	4b2a      	ldr	r3, [pc, #168]	@ (80019a0 <HAL_ADC_MspInit+0x2dc>)
 80018f6:	4a2b      	ldr	r2, [pc, #172]	@ (80019a4 <HAL_ADC_MspInit+0x2e0>)
 80018f8:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80018fa:	4b29      	ldr	r3, [pc, #164]	@ (80019a0 <HAL_ADC_MspInit+0x2dc>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001900:	4b27      	ldr	r3, [pc, #156]	@ (80019a0 <HAL_ADC_MspInit+0x2dc>)
 8001902:	2200      	movs	r2, #0
 8001904:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001906:	4b26      	ldr	r3, [pc, #152]	@ (80019a0 <HAL_ADC_MspInit+0x2dc>)
 8001908:	2200      	movs	r2, #0
 800190a:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800190c:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <HAL_ADC_MspInit+0x2dc>)
 800190e:	2200      	movs	r2, #0
 8001910:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001912:	4b23      	ldr	r3, [pc, #140]	@ (80019a0 <HAL_ADC_MspInit+0x2dc>)
 8001914:	2281      	movs	r2, #129	@ 0x81
 8001916:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001918:	4821      	ldr	r0, [pc, #132]	@ (80019a0 <HAL_ADC_MspInit+0x2dc>)
 800191a:	f003 fcc9 	bl	80052b0 <HAL_DMAEx_List_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_ADC_MspInit+0x264>
    {
      Error_Handler();
 8001924:	f7ff fe8e 	bl	8001644 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001928:	491c      	ldr	r1, [pc, #112]	@ (800199c <HAL_ADC_MspInit+0x2d8>)
 800192a:	481d      	ldr	r0, [pc, #116]	@ (80019a0 <HAL_ADC_MspInit+0x2dc>)
 800192c:	f003 ffd6 	bl	80058dc <HAL_DMAEx_List_LinkQ>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_ADC_MspInit+0x276>
    {
      Error_Handler();
 8001936:	f7ff fe85 	bl	8001644 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 800193a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800193e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a16      	ldr	r2, [pc, #88]	@ (80019a0 <HAL_ADC_MspInit+0x2dc>)
 8001946:	671a      	str	r2, [r3, #112]	@ 0x70
 8001948:	4a15      	ldr	r2, [pc, #84]	@ (80019a0 <HAL_ADC_MspInit+0x2dc>)
 800194a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800194e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001956:	2110      	movs	r1, #16
 8001958:	4811      	ldr	r0, [pc, #68]	@ (80019a0 <HAL_ADC_MspInit+0x2dc>)
 800195a:	f003 fc47 	bl	80051ec <HAL_DMA_ConfigChannelAttributes>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_ADC_MspInit+0x2a4>
    {
      Error_Handler();
 8001964:	f7ff fe6e 	bl	8001644 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001968:	2200      	movs	r2, #0
 800196a:	2100      	movs	r1, #0
 800196c:	2025      	movs	r0, #37	@ 0x25
 800196e:	f003 f951 	bl	8004c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001972:	2025      	movs	r0, #37	@ 0x25
 8001974:	f003 f968 	bl	8004c48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001978:	bf00      	nop
 800197a:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	42028000 	.word	0x42028000
 8001988:	46020c00 	.word	0x46020c00
 800198c:	42020800 	.word	0x42020800
 8001990:	42020000 	.word	0x42020000
 8001994:	42020400 	.word	0x42020400
 8001998:	200000b4 	.word	0x200000b4
 800199c:	200000d8 	.word	0x200000d8
 80019a0:	200000f0 	.word	0x200000f0
 80019a4:	40020050 	.word	0x40020050

080019a8 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a16      	ldr	r2, [pc, #88]	@ (8001a10 <HAL_DCACHE_MspInit+0x68>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d10f      	bne.n	80019da <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 80019ba:	4b16      	ldr	r3, [pc, #88]	@ (8001a14 <HAL_DCACHE_MspInit+0x6c>)
 80019bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019c0:	4a14      	ldr	r2, [pc, #80]	@ (8001a14 <HAL_DCACHE_MspInit+0x6c>)
 80019c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80019c6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80019ca:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <HAL_DCACHE_MspInit+0x6c>)
 80019cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 80019d8:	e013      	b.n	8001a02 <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a0e      	ldr	r2, [pc, #56]	@ (8001a18 <HAL_DCACHE_MspInit+0x70>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d10e      	bne.n	8001a02 <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 80019e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <HAL_DCACHE_MspInit+0x6c>)
 80019e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001a14 <HAL_DCACHE_MspInit+0x6c>)
 80019ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80019f4:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <HAL_DCACHE_MspInit+0x6c>)
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40031400 	.word	0x40031400
 8001a14:	46020c00 	.word	0x46020c00
 8001a18:	40031800 	.word	0x40031800

08001a1c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b0c2      	sub	sp, #264	@ 0x108
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a2a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	22e0      	movs	r2, #224	@ 0xe0
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f00c fa65 	bl	800df14 <memset>
  if(hdsi->Instance==DSI)
 8001a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a38      	ldr	r2, [pc, #224]	@ (8001b38 <HAL_DSI_MspInit+0x11c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d168      	bne.n	8001b2e <HAL_DSI_MspInit+0x112>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0304 	mov.w	r3, #4
 8001a64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_PLL3;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001a72:	2304      	movs	r3, #4
 8001a74:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.PLL3.PLL3N = 125;
 8001a76:	237d      	movs	r3, #125	@ 0x7d
 8001a78:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInit.PLL3.PLL3P = 8;
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001a82:	2308      	movs	r3, #8
 8001a84:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVP;
 8001a8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a92:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f007 ff9d 	bl	80099d8 <HAL_RCCEx_PeriphCLKConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_DSI_MspInit+0x8c>
    {
      Error_Handler();
 8001aa4:	f7ff fdce 	bl	8001644 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001aa8:	4b24      	ldr	r3, [pc, #144]	@ (8001b3c <HAL_DSI_MspInit+0x120>)
 8001aaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001aae:	4a23      	ldr	r2, [pc, #140]	@ (8001b3c <HAL_DSI_MspInit+0x120>)
 8001ab0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001ab4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001ab8:	4b20      	ldr	r3, [pc, #128]	@ (8001b3c <HAL_DSI_MspInit+0x120>)
 8001aba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001abe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b3c <HAL_DSI_MspInit+0x120>)
 8001ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001acc:	4a1b      	ldr	r2, [pc, #108]	@ (8001b3c <HAL_DSI_MspInit+0x120>)
 8001ace:	f043 0302 	orr.w	r3, r3, #2
 8001ad2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ad6:	4b19      	ldr	r3, [pc, #100]	@ (8001b3c <HAL_DSI_MspInit+0x120>)
 8001ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001adc:	f003 0202 	and.w	r2, r3, #2
 8001ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ae4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001aee:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001af2:	681b      	ldr	r3, [r3, #0]
    DSI_CKN     ------> DSIHOST_CKN
    DSI_CKP     ------> DSIHOST_CKP
    DSI_D1N     ------> DSIHOST_D1N
    DSI_D1P     ------> DSIHOST_D1P
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001af4:	2380      	movs	r3, #128	@ 0x80
 8001af6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8001b0c:	230b      	movs	r3, #11
 8001b0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b12:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001b16:	4619      	mov	r1, r3
 8001b18:	4809      	ldr	r0, [pc, #36]	@ (8001b40 <HAL_DSI_MspInit+0x124>)
 8001b1a:	f005 fca3 	bl	8007464 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	2089      	movs	r0, #137	@ 0x89
 8001b24:	f003 f876 	bl	8004c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001b28:	2089      	movs	r0, #137	@ 0x89
 8001b2a:	f003 f88d 	bl	8004c48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001b2e:	bf00      	nop
 8001b30:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40016c00 	.word	0x40016c00
 8001b3c:	46020c00 	.word	0x46020c00
 8001b40:	42020400 	.word	0x42020400

08001b44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b0c2      	sub	sp, #264	@ 0x108
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b52:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	22e0      	movs	r2, #224	@ 0xe0
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f00c f9d1 	bl	800df14 <memset>
  if(hi2c->Instance==I2C5)
 8001b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8001c2c <HAL_I2C_MspInit+0xe8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d14d      	bne.n	8001c20 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8001b84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c5ClockSelection = RCC_I2C5CLKSOURCE_PCLK1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f007 ff1c 	bl	80099d8 <HAL_RCCEx_PeriphCLKConfig>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001ba6:	f7ff fd4d 	bl	8001644 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001baa:	4b21      	ldr	r3, [pc, #132]	@ (8001c30 <HAL_I2C_MspInit+0xec>)
 8001bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8001c30 <HAL_I2C_MspInit+0xec>)
 8001bb2:	f043 0308 	orr.w	r3, r3, #8
 8001bb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bba:	4b1d      	ldr	r3, [pc, #116]	@ (8001c30 <HAL_I2C_MspInit+0xec>)
 8001bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PD0     ------> I2C5_SDA
    PD1     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bce:	2312      	movs	r3, #18
 8001bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8001be0:	2304      	movs	r3, #4
 8001be2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be6:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001bea:	4619      	mov	r1, r3
 8001bec:	4811      	ldr	r0, [pc, #68]	@ (8001c34 <HAL_I2C_MspInit+0xf0>)
 8001bee:	f005 fc39 	bl	8007464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <HAL_I2C_MspInit+0xec>)
 8001bf4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <HAL_I2C_MspInit+0xec>)
 8001bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bfe:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8001c02:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <HAL_I2C_MspInit+0xec>)
 8001c04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001c08:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c10:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c1a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001c1e:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }

}
 8001c20:	bf00      	nop
 8001c22:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40009800 	.word	0x40009800
 8001c30:	46020c00 	.word	0x46020c00
 8001c34:	42020c00 	.word	0x42020c00

08001c38 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b0bc      	sub	sp, #240	@ 0xf0
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	22e0      	movs	r2, #224	@ 0xe0
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f00c f963 	bl	800df14 <memset>
  if(hltdc->Instance==LTDC)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a22      	ldr	r2, [pc, #136]	@ (8001cdc <HAL_LTDC_MspInit+0xa4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d13d      	bne.n	8001cd4 <HAL_LTDC_MspInit+0x9c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	f04f 0302 	mov.w	r3, #2
 8001c60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 8001c64:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001c68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLL2.PLL2M = 1;
 8001c70:	2301      	movs	r3, #1
 8001c72:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLL2.PLL2N = 10;
 8001c74:	230a      	movs	r3, #10
 8001c76:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2P = 2;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLL2.PLL2Q = 2;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLL2.PLL2R = 8;
 8001c80:	2308      	movs	r3, #8
 8001c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8001c84:	230c      	movs	r3, #12
 8001c86:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8001c8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001c90:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c92:	f107 0310 	add.w	r3, r7, #16
 8001c96:	4618      	mov	r0, r3
 8001c98:	f007 fe9e 	bl	80099d8 <HAL_RCCEx_PeriphCLKConfig>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8001ca2:	f7ff fccf 	bl	8001644 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <HAL_LTDC_MspInit+0xa8>)
 8001ca8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001cac:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce0 <HAL_LTDC_MspInit+0xa8>)
 8001cae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001cb2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <HAL_LTDC_MspInit+0xa8>)
 8001cb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001cbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2087      	movs	r0, #135	@ 0x87
 8001cca:	f002 ffa3 	bl	8004c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001cce:	2087      	movs	r0, #135	@ 0x87
 8001cd0:	f002 ffba 	bl	8004c48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001cd4:	bf00      	nop
 8001cd6:	37f0      	adds	r7, #240	@ 0xf0
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40016800 	.word	0x40016800
 8001ce0:	46020c00 	.word	0x46020c00

08001ce4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b0bc      	sub	sp, #240	@ 0xf0
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	22e0      	movs	r2, #224	@ 0xe0
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f00c f90d 	bl	800df14 <memset>
  if(hrtc->Instance==RTC)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1d      	ldr	r2, [pc, #116]	@ (8001d74 <HAL_RTC_MspInit+0x90>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d132      	bne.n	8001d6a <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d04:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f007 fe5b 	bl	80099d8 <HAL_RCCEx_PeriphCLKConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001d28:	f7ff fc8c 	bl	8001644 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d2c:	4b12      	ldr	r3, [pc, #72]	@ (8001d78 <HAL_RTC_MspInit+0x94>)
 8001d2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d32:	4a11      	ldr	r2, [pc, #68]	@ (8001d78 <HAL_RTC_MspInit+0x94>)
 8001d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <HAL_RTC_MspInit+0x94>)
 8001d3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001d42:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <HAL_RTC_MspInit+0x94>)
 8001d44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d48:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <HAL_RTC_MspInit+0x94>)
 8001d4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001d52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8001d5a:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <HAL_RTC_MspInit+0x94>)
 8001d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d60:	4a05      	ldr	r2, [pc, #20]	@ (8001d78 <HAL_RTC_MspInit+0x94>)
 8001d62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	37f0      	adds	r7, #240	@ 0xf0
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	46007800 	.word	0x46007800
 8001d78:	46020c00 	.word	0x46020c00

08001d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b0c2      	sub	sp, #264	@ 0x108
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d8a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	22e0      	movs	r2, #224	@ 0xe0
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f00c f8b5 	bl	800df14 <memset>
  if(huart->Instance==UART4)
 8001daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001dae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a2a      	ldr	r2, [pc, #168]	@ (8001e60 <HAL_UART_MspInit+0xe4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d14c      	bne.n	8001e56 <HAL_UART_MspInit+0xda>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001dbc:	f04f 0208 	mov.w	r2, #8
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dcc:	f107 0310 	add.w	r3, r7, #16
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f007 fe01 	bl	80099d8 <HAL_RCCEx_PeriphCLKConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8001ddc:	f7ff fc32 	bl	8001644 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001de0:	4b20      	ldr	r3, [pc, #128]	@ (8001e64 <HAL_UART_MspInit+0xe8>)
 8001de2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001de6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e64 <HAL_UART_MspInit+0xe8>)
 8001de8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001dec:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001df0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e64 <HAL_UART_MspInit+0xe8>)
 8001df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001df6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	4b19      	ldr	r3, [pc, #100]	@ (8001e64 <HAL_UART_MspInit+0xe8>)
 8001e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e04:	4a17      	ldr	r2, [pc, #92]	@ (8001e64 <HAL_UART_MspInit+0xe8>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e0e:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <HAL_UART_MspInit+0xe8>)
 8001e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e14:	f003 0201 	and.w	r2, r3, #1
 8001e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e1c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e26:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e2a:	681b      	ldr	r3, [r3, #0]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e44:	2308      	movs	r3, #8
 8001e46:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4805      	ldr	r0, [pc, #20]	@ (8001e68 <HAL_UART_MspInit+0xec>)
 8001e52:	f005 fb07 	bl	8007464 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001e56:	bf00      	nop
 8001e58:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40004c00 	.word	0x40004c00
 8001e64:	46020c00 	.word	0x46020c00
 8001e68:	42020000 	.word	0x42020000

08001e6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08e      	sub	sp, #56	@ 0x38
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f38 <HAL_InitTick+0xcc>)
 8001e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e82:	4a2d      	ldr	r2, [pc, #180]	@ (8001f38 <HAL_InitTick+0xcc>)
 8001e84:	f043 0310 	orr.w	r3, r3, #16
 8001e88:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f38 <HAL_InitTick+0xcc>)
 8001e8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e9a:	f107 0210 	add.w	r2, r7, #16
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f007 fcad 	bl	8009804 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001eaa:	f007 fc6f 	bl	800978c <HAL_RCC_GetPCLK1Freq>
 8001eae:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb2:	4a22      	ldr	r2, [pc, #136]	@ (8001f3c <HAL_InitTick+0xd0>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	0c9b      	lsrs	r3, r3, #18
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ebe:	4b20      	ldr	r3, [pc, #128]	@ (8001f40 <HAL_InitTick+0xd4>)
 8001ec0:	4a20      	ldr	r2, [pc, #128]	@ (8001f44 <HAL_InitTick+0xd8>)
 8001ec2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f40 <HAL_InitTick+0xd4>)
 8001ec6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001eca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8001f40 <HAL_InitTick+0xd4>)
 8001ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f40 <HAL_InitTick+0xd4>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed8:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <HAL_InitTick+0xd4>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001ede:	4818      	ldr	r0, [pc, #96]	@ (8001f40 <HAL_InitTick+0xd4>)
 8001ee0:	f00a ff32 	bl	800cd48 <HAL_TIM_Base_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001eea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d118      	bne.n	8001f24 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001ef2:	4813      	ldr	r0, [pc, #76]	@ (8001f40 <HAL_InitTick+0xd4>)
 8001ef4:	f00a ff8a 	bl	800ce0c <HAL_TIM_Base_Start_IT>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001efe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10e      	bne.n	8001f24 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b0f      	cmp	r3, #15
 8001f0a:	d808      	bhi.n	8001f1e <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	2031      	movs	r0, #49	@ 0x31
 8001f12:	f002 fe7f 	bl	8004c14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f16:	4a0c      	ldr	r2, [pc, #48]	@ (8001f48 <HAL_InitTick+0xdc>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	e002      	b.n	8001f24 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001f24:	2031      	movs	r0, #49	@ 0x31
 8001f26:	f002 fe8f 	bl	8004c48 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001f2a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3738      	adds	r7, #56	@ 0x38
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	46020c00 	.word	0x46020c00
 8001f3c:	431bde83 	.word	0x431bde83
 8001f40:	200003a8 	.word	0x200003a8
 8001f44:	40001000 	.word	0x40001000
 8001f48:	20000004 	.word	0x20000004

08001f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001f50:	f007 fca0 	bl	8009894 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <NMI_Handler+0x8>

08001f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <HardFault_Handler+0x4>

08001f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <MemManage_Handler+0x4>

08001f68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <BusFault_Handler+0x4>

08001f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <UsageFault_Handler+0x4>

08001f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC non-secure global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001fc4:	4802      	ldr	r0, [pc, #8]	@ (8001fd0 <GPDMA1_Channel0_IRQHandler+0x10>)
 8001fc6:	f002 ffb0 	bl	8004f2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200000f0 	.word	0x200000f0

08001fd4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fd8:	4802      	ldr	r0, [pc, #8]	@ (8001fe4 <ADC1_2_IRQHandler+0x10>)
 8001fda:	f001 f8ff 	bl	80031dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000028 	.word	0x20000028

08001fe8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fec:	4802      	ldr	r0, [pc, #8]	@ (8001ff8 <TIM6_IRQHandler+0x10>)
 8001fee:	f00a ffad 	bl	800cf4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200003a8 	.word	0x200003a8

08001ffc <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002000:	4802      	ldr	r0, [pc, #8]	@ (800200c <LTDC_IRQHandler+0x10>)
 8002002:	f005 fe49 	bl	8007c98 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000238 	.word	0x20000238

08002010 <DSI_IRQHandler>:

/**
  * @brief This function handles DSIHOST global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002014:	4802      	ldr	r0, [pc, #8]	@ (8002020 <DSI_IRQHandler+0x10>)
 8002016:	f004 fd39 	bl	8006a8c <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200001c0 	.word	0x200001c0

08002024 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002028:	4b18      	ldr	r3, [pc, #96]	@ (800208c <SystemInit+0x68>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202e:	4a17      	ldr	r2, [pc, #92]	@ (800208c <SystemInit+0x68>)
 8002030:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002034:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002038:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <SystemInit+0x6c>)
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800203e:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <SystemInit+0x6c>)
 8002040:	2200      	movs	r2, #0
 8002042:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002044:	4b12      	ldr	r3, [pc, #72]	@ (8002090 <SystemInit+0x6c>)
 8002046:	2200      	movs	r2, #0
 8002048:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800204a:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <SystemInit+0x6c>)
 800204c:	2200      	movs	r2, #0
 800204e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002050:	4b0f      	ldr	r3, [pc, #60]	@ (8002090 <SystemInit+0x6c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0e      	ldr	r2, [pc, #56]	@ (8002090 <SystemInit+0x6c>)
 8002056:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800205a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800205e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <SystemInit+0x6c>)
 8002062:	2200      	movs	r2, #0
 8002064:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002066:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <SystemInit+0x6c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a09      	ldr	r2, [pc, #36]	@ (8002090 <SystemInit+0x6c>)
 800206c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002070:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002072:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <SystemInit+0x6c>)
 8002074:	2200      	movs	r2, #0
 8002076:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002078:	4b04      	ldr	r3, [pc, #16]	@ (800208c <SystemInit+0x68>)
 800207a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800207e:	609a      	str	r2, [r3, #8]
  #endif
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00
 8002090:	46020c00 	.word	0x46020c00

08002094 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002094:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020cc <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002098:	f7ff ffc4 	bl	8002024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800209c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800209e:	e003      	b.n	80020a8 <LoopCopyDataInit>

080020a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020a0:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020a6:	3104      	adds	r1, #4

080020a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020a8:	480a      	ldr	r0, [pc, #40]	@ (80020d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80020aa:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80020ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020b0:	d3f6      	bcc.n	80020a0 <CopyDataInit>
	ldr	r2, =_sbss
 80020b2:	4a0a      	ldr	r2, [pc, #40]	@ (80020dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80020b4:	e002      	b.n	80020bc <LoopFillZerobss>

080020b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020b8:	f842 3b04 	str.w	r3, [r2], #4

080020bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020bc:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <LoopForever+0x16>)
	cmp	r2, r3
 80020be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020c0:	d3f9      	bcc.n	80020b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020c2:	f00b ff2f 	bl	800df24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020c6:	f7fe fa81 	bl	80005cc <main>

080020ca <LoopForever>:

LoopForever:
    b LoopForever
 80020ca:	e7fe      	b.n	80020ca <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80020cc:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 80020d0:	0800e094 	.word	0x0800e094
	ldr	r0, =_sdata
 80020d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80020d8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80020dc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80020e0:	200003f8 	.word	0x200003f8

080020e4 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020e4:	e7fe      	b.n	80020e4 <ADC4_IRQHandler>
	...

080020e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ec:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <HAL_Init+0x50>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a11      	ldr	r2, [pc, #68]	@ (8002138 <HAL_Init+0x50>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f8:	2003      	movs	r0, #3
 80020fa:	f002 fd80 	bl	8004bfe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80020fe:	f007 fa29 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 8002102:	4602      	mov	r2, r0
 8002104:	4b0d      	ldr	r3, [pc, #52]	@ (800213c <HAL_Init+0x54>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	490c      	ldr	r1, [pc, #48]	@ (8002140 <HAL_Init+0x58>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
 8002114:	4a0b      	ldr	r2, [pc, #44]	@ (8002144 <HAL_Init+0x5c>)
 8002116:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002118:	2004      	movs	r0, #4
 800211a:	f002 fda3 	bl	8004c64 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800211e:	200f      	movs	r0, #15
 8002120:	f7ff fea4 	bl	8001e6c <HAL_InitTick>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e002      	b.n	8002134 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800212e:	f7ff fa8f 	bl	8001650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40022000 	.word	0x40022000
 800213c:	46020c00 	.word	0x46020c00
 8002140:	0800df84 	.word	0x0800df84
 8002144:	20000000 	.word	0x20000000

08002148 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_IncTick+0x20>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	4b06      	ldr	r3, [pc, #24]	@ (800216c <HAL_IncTick+0x24>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4413      	add	r3, r2
 8002158:	4a04      	ldr	r2, [pc, #16]	@ (800216c <HAL_IncTick+0x24>)
 800215a:	6013      	str	r3, [r2, #0]
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000008 	.word	0x20000008
 800216c:	200003f4 	.word	0x200003f4

08002170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return uwTick;
 8002174:	4b03      	ldr	r3, [pc, #12]	@ (8002184 <HAL_GetTick+0x14>)
 8002176:	681b      	ldr	r3, [r3, #0]
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	200003f4 	.word	0x200003f4

08002188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002190:	f7ff ffee 	bl	8002170 <HAL_GetTick>
 8002194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a0:	d005      	beq.n	80021ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021a2:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <HAL_Delay+0x44>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4413      	add	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ae:	bf00      	nop
 80021b0:	f7ff ffde 	bl	8002170 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d8f7      	bhi.n	80021b0 <HAL_Delay+0x28>
  {
  }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000008 	.word	0x20000008

080021d0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT1 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021e0:	4904      	ldr	r1, [pc, #16]	@ (80021f4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	46007400 	.word	0x46007400

080021f8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002200:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 0202 	bic.w	r2, r3, #2
 8002208:	4904      	ldr	r1, [pc, #16]	@ (800221c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	46007400 	.word	0x46007400

08002220 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002226:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a0e      	ldr	r2, [pc, #56]	@ (8002264 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002232:	f7ff ff9d 	bl	8002170 <HAL_GetTick>
 8002236:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8002238:	e008      	b.n	800224c <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800223a:	f7ff ff99 	bl	8002170 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b0a      	cmp	r3, #10
 8002246:	d901      	bls.n	800224c <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e006      	b.n	800225a <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800224c:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	46007400 	.word	0x46007400

08002268 <HAL_SYSCFG_DisableSRAMCached>:
  * @brief  Disable the Cacheability of internal SRAMx by DCACHE2
  *
  * @retval None
  */
void HAL_SYSCFG_DisableSRAMCached(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  CLEAR_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_SRAMCACHED);
 800226c:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <HAL_SYSCFG_DisableSRAMCached+0x1c>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4a04      	ldr	r2, [pc, #16]	@ (8002284 <HAL_SYSCFG_DisableSRAMCached+0x1c>)
 8002272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002276:	6053      	str	r3, [r2, #4]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	46000400 	.word	0x46000400

08002288 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	609a      	str	r2, [r3, #8]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	609a      	str	r2, [r3, #8]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a0a      	ldr	r2, [pc, #40]	@ (800232c <LL_ADC_SetResolution+0x3c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d104      	bne.n	8002310 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3b01      	subs	r3, #1
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f023 020c 	bic.w	r2, r3, #12
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	60da      	str	r2, [r3, #12]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	46021000 	.word	0x46021000

08002330 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3360      	adds	r3, #96	@ 0x60
 8002342:	461a      	mov	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	430b      	orrs	r3, r1
 8002360:	431a      	orrs	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002366:	bf00      	nop
 8002368:	371c      	adds	r7, #28
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002372:	b480      	push	{r7}
 8002374:	b085      	sub	sp, #20
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3360      	adds	r3, #96	@ 0x60
 8002380:	461a      	mov	r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800239e:	b480      	push	{r7}
 80023a0:	b087      	sub	sp, #28
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	3360      	adds	r3, #96	@ 0x60
 80023ae:	461a      	mov	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	601a      	str	r2, [r3, #0]
}
 80023c8:	bf00      	nop
 80023ca:	371c      	adds	r7, #28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3360      	adds	r3, #96	@ 0x60
 80023e4:	461a      	mov	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	601a      	str	r2, [r3, #0]
}
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800240a:	b480      	push	{r7}
 800240c:	b087      	sub	sp, #28
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3360      	adds	r3, #96	@ 0x60
 800241a:	461a      	mov	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	431a      	orrs	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	601a      	str	r2, [r3, #0]
}
 8002434:	bf00      	nop
 8002436:	371c      	adds	r7, #28
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800244e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002452:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002462:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	2a00      	cmp	r2, #0
 800246a:	d002      	beq.n	8002472 <LL_ADC_SetGainCompensation+0x32>
 800246c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002470:	e000      	b.n	8002474 <LL_ADC_SetGainCompensation+0x34>
 8002472:	2200      	movs	r2, #0
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	671a      	str	r2, [r3, #112]	@ 0x70
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002486:	b480      	push	{r7}
 8002488:	b085      	sub	sp, #20
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2107      	movs	r1, #7
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	401a      	ands	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	431a      	orrs	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	@ 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a2b      	ldr	r2, [pc, #172]	@ (80025a8 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d020      	beq.n	8002542 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3330      	adds	r3, #48	@ 0x30
 8002504:	461a      	mov	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	4413      	add	r3, r2
 8002512:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	211f      	movs	r1, #31
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	401a      	ands	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	0e9b      	lsrs	r3, r3, #26
 800252c:	f003 011f 	and.w	r1, r3, #31
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	431a      	orrs	r2, r3
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002540:	e02b      	b.n	800259a <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	210f      	movs	r1, #15
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	401a      	ands	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d104      	bne.n	800256a <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	0e9b      	lsrs	r3, r3, #26
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	e010      	b.n	800258c <LL_ADC_REG_SetSequencerRanks+0xa0>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	613b      	str	r3, [r7, #16]
  return result;
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002580:	2320      	movs	r3, #32
 8002582:	e003      	b.n	800258c <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	f001 011f 	and.w	r1, r1, #31
 8002592:	408b      	lsls	r3, r1
 8002594:	431a      	orrs	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800259a:	bf00      	nop
 800259c:	3724      	adds	r7, #36	@ 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	46021000 	.word	0x46021000

080025ac <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d107      	bne.n	80025d0 <LL_ADC_REG_SetSequencerChAdd+0x24>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	0e9b      	lsrs	r3, r3, #26
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	2201      	movs	r2, #1
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	e015      	b.n	80025fc <LL_ADC_REG_SetSequencerChAdd+0x50>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	fa93 f3a3 	rbit	r3, r3
 80025da:	60fb      	str	r3, [r7, #12]
  return result;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 80025e6:	2320      	movs	r3, #32
 80025e8:	e003      	b.n	80025f2 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	2201      	movs	r2, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	0e9b      	lsrs	r3, r3, #26
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	2101      	movs	r1, #1
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	401a      	ands	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f003 0303 	and.w	r3, r3, #3
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002684:	b480      	push	{r7}
 8002686:	b08b      	sub	sp, #44	@ 0x2c
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a2d      	ldr	r2, [pc, #180]	@ (8002748 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d042      	beq.n	800271e <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d104      	bne.n	80026ac <LL_ADC_SetChannelSamplingTime+0x28>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	0e9b      	lsrs	r3, r3, #26
 80026a6:	f003 021f 	and.w	r2, r3, #31
 80026aa:	e011      	b.n	80026d0 <LL_ADC_SetChannelSamplingTime+0x4c>
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	617b      	str	r3, [r7, #20]
  return result;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80026c2:	2320      	movs	r3, #32
 80026c4:	e003      	b.n	80026ce <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	0e5b      	lsrs	r3, r3, #25
 80026d4:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80026d8:	460b      	mov	r3, r1
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	1ad2      	subs	r2, r2, r3
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	3314      	adds	r3, #20
 80026ee:	461a      	mov	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	0e5b      	lsrs	r3, r3, #25
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	4413      	add	r3, r2
 80026fc:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	2107      	movs	r1, #7
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	401a      	ands	r2, r3
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	431a      	orrs	r2, r3
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 800271c:	e00e      	b.n	800273c <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	43db      	mvns	r3, r3
 8002728:	401a      	ands	r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	0219      	lsls	r1, r3, #8
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	400b      	ands	r3, r1
 8002732:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002736:	431a      	orrs	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	615a      	str	r2, [r3, #20]
}
 800273c:	bf00      	nop
 800273e:	372c      	adds	r7, #44	@ 0x2c
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	46021000 	.word	0x46021000

0800274c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002764:	43db      	mvns	r3, r3
 8002766:	401a      	ands	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0318 	and.w	r3, r3, #24
 800276e:	4908      	ldr	r1, [pc, #32]	@ (8002790 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002770:	40d9      	lsrs	r1, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	400b      	ands	r3, r1
 8002776:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800277a:	431a      	orrs	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	000fffff 	.word	0x000fffff

08002794 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 031f 	and.w	r3, r3, #31
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80027dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6093      	str	r3, [r2, #8]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002804:	d101      	bne.n	800280a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002828:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800282c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002850:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002854:	d101      	bne.n	800285a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002878:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800287c:	f043 0201 	orr.w	r2, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028a4:	f043 0202 	orr.w	r2, r3, #2
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	609a      	str	r2, [r3, #8]
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <LL_ADC_IsEnabled+0x18>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <LL_ADC_IsEnabled+0x1a>
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d101      	bne.n	80028f6 <LL_ADC_IsDisableOngoing+0x18>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <LL_ADC_IsDisableOngoing+0x1a>
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002914:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002918:	f043 0204 	orr.w	r2, r3, #4
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	609a      	str	r2, [r3, #8]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b04      	cmp	r3, #4
 800293e:	d101      	bne.n	8002944 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b08      	cmp	r3, #8
 8002964:	d101      	bne.n	800296a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b08b      	sub	sp, #44	@ 0x2c
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8002986:	2300      	movs	r3, #0
 8002988:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e2ce      	b.n	8002f36 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a95      	ldr	r2, [pc, #596]	@ (8002bfc <HAL_ADC_Init+0x284>)
 80029a6:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d109      	bne.n	80029c4 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7fe fe87 	bl	80016c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff11 	bl	80027f0 <LL_ADC_IsDeepPowerDownEnabled>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d004      	beq.n	80029de <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fef7 	bl	80027cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ff2c 	bl	8002840 <LL_ADC_IsInternalRegulatorEnabled>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d115      	bne.n	8002a1a <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ff10 	bl	8002818 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029f8:	4b81      	ldr	r3, [pc, #516]	@ (8002c00 <HAL_ADC_Init+0x288>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	4a81      	ldr	r2, [pc, #516]	@ (8002c04 <HAL_ADC_Init+0x28c>)
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	099b      	lsrs	r3, r3, #6
 8002a06:	3301      	adds	r3, #1
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a0c:	e002      	b.n	8002a14 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	3b01      	subs	r3, #1
 8002a12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f9      	bne.n	8002a0e <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ff0e 	bl	8002840 <LL_ADC_IsInternalRegulatorEnabled>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10e      	bne.n	8002a48 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a2e:	f043 0210 	orr.w	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a3a:	f043 0201 	orr.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff6d 	bl	800292c <LL_ADC_REG_IsConversionOngoing>
 8002a52:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f040 825f 	bne.w	8002f20 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f040 825b 	bne.w	8002f20 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a6e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a72:	f043 0202 	orr.w	r2, r3, #2
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff ff1a 	bl	80028b8 <LL_ADC_IsEnabled>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d14f      	bne.n	8002b2a <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a5b      	ldr	r2, [pc, #364]	@ (8002bfc <HAL_ADC_Init+0x284>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d037      	beq.n	8002b04 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a5b      	ldr	r2, [pc, #364]	@ (8002c08 <HAL_ADC_Init+0x290>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_ADC_Init+0x130>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a5a      	ldr	r2, [pc, #360]	@ (8002c0c <HAL_ADC_Init+0x294>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d10e      	bne.n	8002ac6 <HAL_ADC_Init+0x14e>
 8002aa8:	4857      	ldr	r0, [pc, #348]	@ (8002c08 <HAL_ADC_Init+0x290>)
 8002aaa:	f7ff ff05 	bl	80028b8 <LL_ADC_IsEnabled>
 8002aae:	4604      	mov	r4, r0
 8002ab0:	4856      	ldr	r0, [pc, #344]	@ (8002c0c <HAL_ADC_Init+0x294>)
 8002ab2:	f7ff ff01 	bl	80028b8 <LL_ADC_IsEnabled>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4323      	orrs	r3, r4
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf0c      	ite	eq
 8002abe:	2301      	moveq	r3, #1
 8002ac0:	2300      	movne	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	e008      	b.n	8002ad8 <HAL_ADC_Init+0x160>
 8002ac6:	484d      	ldr	r0, [pc, #308]	@ (8002bfc <HAL_ADC_Init+0x284>)
 8002ac8:	f7ff fef6 	bl	80028b8 <LL_ADC_IsEnabled>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bf0c      	ite	eq
 8002ad2:	2301      	moveq	r3, #1
 8002ad4:	2300      	movne	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d026      	beq.n	8002b2a <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a49      	ldr	r2, [pc, #292]	@ (8002c08 <HAL_ADC_Init+0x290>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_ADC_Init+0x178>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a48      	ldr	r2, [pc, #288]	@ (8002c0c <HAL_ADC_Init+0x294>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d101      	bne.n	8002af4 <HAL_ADC_Init+0x17c>
 8002af0:	4a47      	ldr	r2, [pc, #284]	@ (8002c10 <HAL_ADC_Init+0x298>)
 8002af2:	e000      	b.n	8002af6 <HAL_ADC_Init+0x17e>
 8002af4:	4a47      	ldr	r2, [pc, #284]	@ (8002c14 <HAL_ADC_Init+0x29c>)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4619      	mov	r1, r3
 8002afc:	4610      	mov	r0, r2
 8002afe:	f7ff fbc3 	bl	8002288 <LL_ADC_SetCommonClock>
 8002b02:	e012      	b.n	8002b2a <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4610      	mov	r0, r2
 8002b10:	f7ff fbee 	bl	80022f0 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8002b14:	4b3f      	ldr	r3, [pc, #252]	@ (8002c14 <HAL_ADC_Init+0x29c>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002b24:	493b      	ldr	r1, [pc, #236]	@ (8002c14 <HAL_ADC_Init+0x29c>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a33      	ldr	r2, [pc, #204]	@ (8002bfc <HAL_ADC_Init+0x284>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d010      	beq.n	8002b56 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b3a:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002b40:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8002b46:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002b4e:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002b50:	4313      	orrs	r3, r2
 8002b52:	623b      	str	r3, [r7, #32]
 8002b54:	e035      	b.n	8002bc2 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	7f1b      	ldrb	r3, [r3, #28]
 8002b5a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b62:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b64:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b6a:	2a00      	cmp	r2, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_ADC_Init+0x1fc>
 8002b6e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b72:	e000      	b.n	8002b76 <HAL_ADC_Init+0x1fe>
 8002b74:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002b76:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002b7c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	da04      	bge.n	8002b90 <HAL_ADC_Init+0x218>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b8e:	e001      	b.n	8002b94 <HAL_ADC_Init+0x21c>
 8002b90:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8002b94:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	491b      	ldr	r1, [pc, #108]	@ (8002c08 <HAL_ADC_Init+0x290>)
 8002b9c:	428b      	cmp	r3, r1
 8002b9e:	d004      	beq.n	8002baa <HAL_ADC_Init+0x232>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4919      	ldr	r1, [pc, #100]	@ (8002c0c <HAL_ADC_Init+0x294>)
 8002ba6:	428b      	cmp	r3, r1
 8002ba8:	d103      	bne.n	8002bb2 <HAL_ADC_Init+0x23a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bb0:	e003      	b.n	8002bba <HAL_ADC_Init+0x242>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bb8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002bba:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bbc:	6a3a      	ldr	r2, [r7, #32]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d131      	bne.n	8002c30 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <HAL_ADC_Init+0x284>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d007      	beq.n	8002be6 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	045b      	lsls	r3, r3, #17
 8002bde:	6a3a      	ldr	r2, [r7, #32]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	623b      	str	r3, [r7, #32]
 8002be4:	e024      	b.n	8002c30 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d113      	bne.n	8002c18 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf6:	623b      	str	r3, [r7, #32]
 8002bf8:	e01a      	b.n	8002c30 <HAL_ADC_Init+0x2b8>
 8002bfa:	bf00      	nop
 8002bfc:	46021000 	.word	0x46021000
 8002c00:	20000000 	.word	0x20000000
 8002c04:	053e2d63 	.word	0x053e2d63
 8002c08:	42028000 	.word	0x42028000
 8002c0c:	42028100 	.word	0x42028100
 8002c10:	42028300 	.word	0x42028300
 8002c14:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c28:	f043 0201 	orr.w	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a75      	ldr	r2, [pc, #468]	@ (8002e0c <HAL_ADC_Init+0x494>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d018      	beq.n	8002c6c <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c46:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	6a3a      	ldr	r2, [r7, #32]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002e10 <HAL_ADC_Init+0x498>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	6a39      	ldr	r1, [r7, #32]
 8002c66:	430b      	orrs	r3, r1
 8002c68:	60d3      	str	r3, [r2, #12]
 8002c6a:	e031      	b.n	8002cd0 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d009      	beq.n	8002c88 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c78:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c80:	4313      	orrs	r3, r2
 8002c82:	6a3a      	ldr	r2, [r7, #32]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	4b61      	ldr	r3, [pc, #388]	@ (8002e14 <HAL_ADC_Init+0x49c>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	6a39      	ldr	r1, [r7, #32]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1a      	ldr	r2, [r3, #32]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a4d      	ldr	r2, [pc, #308]	@ (8002e0c <HAL_ADC_Init+0x494>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	f000 80a4 	beq.w	8002e24 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fe23 	bl	800292c <LL_ADC_REG_IsConversionOngoing>
 8002ce6:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fe30 	bl	8002952 <LL_ADC_INJ_IsConversionOngoing>
 8002cf2:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d166      	bne.n	8002dc8 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d163      	bne.n	8002dc8 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	7f1b      	ldrb	r3, [r3, #28]
 8002d04:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4943      	ldr	r1, [pc, #268]	@ (8002e18 <HAL_ADC_Init+0x4a0>)
 8002d0c:	428b      	cmp	r3, r1
 8002d0e:	d004      	beq.n	8002d1a <HAL_ADC_Init+0x3a2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4941      	ldr	r1, [pc, #260]	@ (8002e1c <HAL_ADC_Init+0x4a4>)
 8002d16:	428b      	cmp	r3, r1
 8002d18:	d102      	bne.n	8002d20 <HAL_ADC_Init+0x3a8>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d1e:	e002      	b.n	8002d26 <HAL_ADC_Init+0x3ae>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d24:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d26:	4313      	orrs	r3, r2
 8002d28:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d34:	f023 0303 	bic.w	r3, r3, #3
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	6a39      	ldr	r1, [r7, #32]
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	4619      	mov	r1, r3
 8002d54:	4610      	mov	r0, r2
 8002d56:	f7ff fb73 	bl	8002440 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d11e      	bne.n	8002da2 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d68:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	4b2b      	ldr	r3, [pc, #172]	@ (8002e20 <HAL_ADC_Init+0x4a8>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002d78:	0411      	lsls	r1, r2, #16
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d7e:	4311      	orrs	r1, r2
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8002d84:	4311      	orrs	r1, r2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002d8a:	4311      	orrs	r1, r2
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d90:	0892      	lsrs	r2, r2, #2
 8002d92:	430a      	orrs	r2, r1
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	611a      	str	r2, [r3, #16]
 8002da0:	e007      	b.n	8002db2 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0201 	bic.w	r2, r2, #1
 8002db0:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d10c      	bne.n	8002dea <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	f023 010f 	bic.w	r1, r3, #15
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dde:	1e5a      	subs	r2, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002de8:	e007      	b.n	8002dfa <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 020f 	bic.w	r2, r2, #15
 8002df8:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dfe:	f023 0303 	bic.w	r3, r3, #3
 8002e02:	f043 0201 	orr.w	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002e0a:	e092      	b.n	8002f32 <HAL_ADC_Init+0x5ba>
 8002e0c:	46021000 	.word	0x46021000
 8002e10:	fff0c013 	.word	0xfff0c013
 8002e14:	ffde800d 	.word	0xffde800d
 8002e18:	42028000 	.word	0x42028000
 8002e1c:	42028100 	.word	0x42028100
 8002e20:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d111      	bne.n	8002e52 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002e36:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002e3c:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002e42:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	4b39      	ldr	r3, [pc, #228]	@ (8002f40 <HAL_ADC_Init+0x5c8>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	69f9      	ldr	r1, [r7, #28]
 8002e62:	430b      	orrs	r3, r1
 8002e64:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6e:	461a      	mov	r2, r3
 8002e70:	2100      	movs	r1, #0
 8002e72:	f7ff fb08 	bl	8002486 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8002e84:	f7ff faff 	bl	8002486 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d108      	bne.n	8002ea2 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f062 020f 	orn	r2, r2, #15
 8002e9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ea0:	e018      	b.n	8002ed4 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002eaa:	d113      	bne.n	8002ed4 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	f003 031c 	and.w	r3, r3, #28
 8002ebe:	f06f 020f 	mvn.w	r2, #15
 8002ec2:	fa02 f103 	lsl.w	r1, r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	4b1a      	ldr	r3, [pc, #104]	@ (8002f44 <HAL_ADC_Init+0x5cc>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	6a3a      	ldr	r2, [r7, #32]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d10b      	bne.n	8002efc <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002eee:	f023 0303 	bic.w	r3, r3, #3
 8002ef2:	f043 0201 	orr.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002efa:	e01a      	b.n	8002f32 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f00:	f023 0312 	bic.w	r3, r3, #18
 8002f04:	f043 0210 	orr.w	r2, r3, #16
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002f1e:	e008      	b.n	8002f32 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f24:	f043 0210 	orr.w	r2, r3, #16
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002f32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	372c      	adds	r7, #44	@ 0x2c
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd90      	pop	{r4, r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	f7fffc02 	.word	0xf7fffc02
 8002f44:	833ffff3 	.word	0x833ffff3

08002f48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b0a2      	sub	sp, #136	@ 0x88
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a98      	ldr	r2, [pc, #608]	@ (80031bc <HAL_ADC_Start_DMA+0x274>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d004      	beq.n	8002f68 <HAL_ADC_Start_DMA+0x20>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a97      	ldr	r2, [pc, #604]	@ (80031c0 <HAL_ADC_Start_DMA+0x278>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d101      	bne.n	8002f6c <HAL_ADC_Start_DMA+0x24>
 8002f68:	4b96      	ldr	r3, [pc, #600]	@ (80031c4 <HAL_ADC_Start_DMA+0x27c>)
 8002f6a:	e000      	b.n	8002f6e <HAL_ADC_Start_DMA+0x26>
 8002f6c:	4b96      	ldr	r3, [pc, #600]	@ (80031c8 <HAL_ADC_Start_DMA+0x280>)
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fc10 	bl	8002794 <LL_ADC_GetMultimode>
 8002f74:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fcd6 	bl	800292c <LL_ADC_REG_IsConversionOngoing>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f040 8111 	bne.w	80031aa <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_Start_DMA+0x4e>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e10e      	b.n	80031b4 <HAL_ADC_Start_DMA+0x26c>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d006      	beq.n	8002fb2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fa4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fa6:	2b05      	cmp	r3, #5
 8002fa8:	d003      	beq.n	8002fb2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002faa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fac:	2b09      	cmp	r3, #9
 8002fae:	f040 80f4 	bne.w	800319a <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f001 fa2c 	bl	8004410 <ADC_Enable>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002fbe:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f040 80e4 	bne.w	8003190 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fcc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a7a      	ldr	r2, [pc, #488]	@ (80031cc <HAL_ADC_Start_DMA+0x284>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d026      	beq.n	8003034 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a75      	ldr	r2, [pc, #468]	@ (80031c0 <HAL_ADC_Start_DMA+0x278>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d002      	beq.n	8002ff6 <HAL_ADC_Start_DMA+0xae>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	e000      	b.n	8002ff8 <HAL_ADC_Start_DMA+0xb0>
 8002ff6:	4b71      	ldr	r3, [pc, #452]	@ (80031bc <HAL_ADC_Start_DMA+0x274>)
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d002      	beq.n	8003006 <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003000:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003002:	2b00      	cmp	r3, #0
 8003004:	d105      	bne.n	8003012 <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800300a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003016:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d006      	beq.n	800302c <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003022:	f023 0206 	bic.w	r2, r3, #6
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	67da      	str	r2, [r3, #124]	@ 0x7c
 800302a:	e006      	b.n	800303a <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003032:	e002      	b.n	800303a <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303e:	4a64      	ldr	r2, [pc, #400]	@ (80031d0 <HAL_ADC_Start_DMA+0x288>)
 8003040:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003046:	4a63      	ldr	r2, [pc, #396]	@ (80031d4 <HAL_ADC_Start_DMA+0x28c>)
 8003048:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304e:	4a62      	ldr	r2, [pc, #392]	@ (80031d8 <HAL_ADC_Start_DMA+0x290>)
 8003050:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	221c      	movs	r2, #28
 8003058:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f042 0210 	orr.w	r2, r2, #16
 8003070:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a55      	ldr	r2, [pc, #340]	@ (80031cc <HAL_ADC_Start_DMA+0x284>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d107      	bne.n	800308c <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003096:	2b00      	cmp	r3, #0
 8003098:	d04f      	beq.n	800313a <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d046      	beq.n	8003132 <HAL_ADC_Start_DMA+0x1ea>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d040      	beq.n	8003132 <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	f107 0310 	add.w	r3, r7, #16
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 facc 	bl	800565c <HAL_DMAEx_List_GetNodeConfig>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e072      	b.n	80031b4 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80030ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d104      	bne.n	80030de <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80030dc:	e00a      	b.n	80030f4 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80030de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d104      	bne.n	80030ee <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80030ec:	e002      	b.n	80030f4 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003100:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003124:	4618      	mov	r0, r3
 8003126:	f002 f9ef 	bl	8005508 <HAL_DMAEx_List_Start_IT>
 800312a:	4603      	mov	r3, r0
 800312c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003130:	e028      	b.n	8003184 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003138:	e024      	b.n	8003184 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d104      	bne.n	800314e <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800314c:	e00c      	b.n	8003168 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d104      	bne.n	8003162 <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003160:	e002      	b.n	8003168 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3340      	adds	r3, #64	@ 0x40
 8003172:	4619      	mov	r1, r3
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800317a:	f001 fe76 	bl	8004e6a <HAL_DMA_Start_IT>
 800317e:	4603      	mov	r3, r0
 8003180:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fbbb 	bl	8002904 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800318e:	e00f      	b.n	80031b0 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8003198:	e00a      	b.n	80031b0 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 80031a8:	e002      	b.n	80031b0 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031aa:	2302      	movs	r3, #2
 80031ac:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 80031b0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3788      	adds	r7, #136	@ 0x88
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	42028000 	.word	0x42028000
 80031c0:	42028100 	.word	0x42028100
 80031c4:	42028300 	.word	0x42028300
 80031c8:	46021300 	.word	0x46021300
 80031cc:	46021000 	.word	0x46021000
 80031d0:	08004603 	.word	0x08004603
 80031d4:	080046db 	.word	0x080046db
 80031d8:	080046f7 	.word	0x080046f7

080031dc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08a      	sub	sp, #40	@ 0x28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80031e4:	2300      	movs	r3, #0
 80031e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a77      	ldr	r2, [pc, #476]	@ (80033dc <HAL_ADC_IRQHandler+0x200>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d004      	beq.n	800320c <HAL_ADC_IRQHandler+0x30>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a76      	ldr	r2, [pc, #472]	@ (80033e0 <HAL_ADC_IRQHandler+0x204>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d101      	bne.n	8003210 <HAL_ADC_IRQHandler+0x34>
 800320c:	4b75      	ldr	r3, [pc, #468]	@ (80033e4 <HAL_ADC_IRQHandler+0x208>)
 800320e:	e000      	b.n	8003212 <HAL_ADC_IRQHandler+0x36>
 8003210:	4b75      	ldr	r3, [pc, #468]	@ (80033e8 <HAL_ADC_IRQHandler+0x20c>)
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff fabe 	bl	8002794 <LL_ADC_GetMultimode>
 8003218:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d017      	beq.n	8003254 <HAL_ADC_IRQHandler+0x78>
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d012      	beq.n	8003254 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	2b00      	cmp	r3, #0
 8003238:	d105      	bne.n	8003246 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800323e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f001 fc22 	bl	8004a90 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2202      	movs	r2, #2
 8003252:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <HAL_ADC_IRQHandler+0x8c>
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10b      	bne.n	8003280 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 80d1 	beq.w	8003416 <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 80cb 	beq.w	8003416 <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	d105      	bne.n	8003298 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003290:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a53      	ldr	r2, [pc, #332]	@ (80033ec <HAL_ADC_IRQHandler+0x210>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d06c      	beq.n	800337c <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff f90c 	bl	80024c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80aa 	beq.w	8003408 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a49      	ldr	r2, [pc, #292]	@ (80033e0 <HAL_ADC_IRQHandler+0x204>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d002      	beq.n	80032c4 <HAL_ADC_IRQHandler+0xe8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	e000      	b.n	80032c6 <HAL_ADC_IRQHandler+0xea>
 80032c4:	4b45      	ldr	r3, [pc, #276]	@ (80033dc <HAL_ADC_IRQHandler+0x200>)
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d008      	beq.n	80032e0 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2b05      	cmp	r3, #5
 80032d8:	d002      	beq.n	80032e0 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b09      	cmp	r3, #9
 80032de:	d104      	bne.n	80032ea <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	623b      	str	r3, [r7, #32]
 80032e8:	e00c      	b.n	8003304 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a3c      	ldr	r2, [pc, #240]	@ (80033e0 <HAL_ADC_IRQHandler+0x204>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d002      	beq.n	80032fa <HAL_ADC_IRQHandler+0x11e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	e000      	b.n	80032fc <HAL_ADC_IRQHandler+0x120>
 80032fa:	4b38      	ldr	r3, [pc, #224]	@ (80033dc <HAL_ADC_IRQHandler+0x200>)
 80032fc:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d17c      	bne.n	8003408 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b08      	cmp	r3, #8
 800331a:	d175      	bne.n	8003408 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fb03 	bl	800292c <LL_ADC_REG_IsConversionOngoing>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d11a      	bne.n	8003362 <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 020c 	bic.w	r2, r2, #12
 800333a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003340:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800334c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d159      	bne.n	8003408 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003358:	f043 0201 	orr.w	r2, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	679a      	str	r2, [r3, #120]	@ 0x78
 8003360:	e052      	b.n	8003408 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003366:	f043 0210 	orr.w	r2, r3, #16
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	67da      	str	r2, [r3, #124]	@ 0x7c
 800337a:	e045      	b.n	8003408 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff f89f 	bl	80024c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d03d      	beq.n	8003408 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003392:	2b00      	cmp	r3, #0
 8003394:	d138      	bne.n	8003408 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d131      	bne.n	8003408 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fabf 	bl	800292c <LL_ADC_REG_IsConversionOngoing>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d11d      	bne.n	80033f0 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 020c 	bic.w	r2, r2, #12
 80033c2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	f043 0201 	orr.w	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	679a      	str	r2, [r3, #120]	@ 0x78
 80033d8:	e016      	b.n	8003408 <HAL_ADC_IRQHandler+0x22c>
 80033da:	bf00      	nop
 80033dc:	42028000 	.word	0x42028000
 80033e0:	42028100 	.word	0x42028100
 80033e4:	42028300 	.word	0x42028300
 80033e8:	46021300 	.word	0x46021300
 80033ec:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033f4:	f043 0220 	orr.w	r2, r3, #32
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003400:	f043 0201 	orr.w	r2, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f99d 	bl	8003748 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	220c      	movs	r2, #12
 8003414:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a8c      	ldr	r2, [pc, #560]	@ (800364c <HAL_ADC_IRQHandler+0x470>)
 800341c:	4293      	cmp	r3, r2
 800341e:	f000 8095 	beq.w	800354c <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d004      	beq.n	8003436 <HAL_ADC_IRQHandler+0x25a>
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8085 	beq.w	800354c <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d07f      	beq.n	800354c <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b00      	cmp	r3, #0
 8003456:	d105      	bne.n	8003464 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800345c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff f8f8 	bl	800265e <LL_ADC_INJ_IsTriggerSourceSWStart>
 800346e:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff f825 	bl	80024c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800347a:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a73      	ldr	r2, [pc, #460]	@ (8003650 <HAL_ADC_IRQHandler+0x474>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d002      	beq.n	800348c <HAL_ADC_IRQHandler+0x2b0>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	e000      	b.n	800348e <HAL_ADC_IRQHandler+0x2b2>
 800348c:	4b71      	ldr	r3, [pc, #452]	@ (8003654 <HAL_ADC_IRQHandler+0x478>)
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6812      	ldr	r2, [r2, #0]
 8003492:	4293      	cmp	r3, r2
 8003494:	d008      	beq.n	80034a8 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d002      	beq.n	80034a8 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2b07      	cmp	r3, #7
 80034a6:	d104      	bne.n	80034b2 <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	623b      	str	r3, [r7, #32]
 80034b0:	e00c      	b.n	80034cc <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a66      	ldr	r2, [pc, #408]	@ (8003650 <HAL_ADC_IRQHandler+0x474>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d002      	beq.n	80034c2 <HAL_ADC_IRQHandler+0x2e6>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	e000      	b.n	80034c4 <HAL_ADC_IRQHandler+0x2e8>
 80034c2:	4b64      	ldr	r3, [pc, #400]	@ (8003654 <HAL_ADC_IRQHandler+0x478>)
 80034c4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d035      	beq.n	800353e <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d007      	beq.n	80034ec <HAL_ADC_IRQHandler+0x310>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d02d      	beq.n	800353e <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d128      	bne.n	800353e <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f6:	2b40      	cmp	r3, #64	@ 0x40
 80034f8:	d121      	bne.n	800353e <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff fa27 	bl	8002952 <LL_ADC_INJ_IsConversionOngoing>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d119      	bne.n	800353e <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003518:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800351e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800352a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d105      	bne.n	800353e <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003536:	f043 0201 	orr.w	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f001 fa88 	bl	8004a54 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2260      	movs	r2, #96	@ 0x60
 800354a:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003552:	2b00      	cmp	r3, #0
 8003554:	d011      	beq.n	800357a <HAL_ADC_IRQHandler+0x39e>
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00c      	beq.n	800357a <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003564:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f8ff 	bl	8003770 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2280      	movs	r2, #128	@ 0x80
 8003578:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d012      	beq.n	80035aa <HAL_ADC_IRQHandler+0x3ce>
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00d      	beq.n	80035aa <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003592:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f001 fa64 	bl	8004a68 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d012      	beq.n	80035da <HAL_ADC_IRQHandler+0x3fe>
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00d      	beq.n	80035da <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f001 fa56 	bl	8004a7c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d05d      	beq.n	80036a0 <HAL_ADC_IRQHandler+0x4c4>
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	f003 0310 	and.w	r3, r3, #16
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d058      	beq.n	80036a0 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d102      	bne.n	80035fc <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 80035f6:	2301      	movs	r3, #1
 80035f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035fa:	e03b      	b.n	8003674 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a12      	ldr	r2, [pc, #72]	@ (800364c <HAL_ADC_IRQHandler+0x470>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d02c      	beq.n	8003660 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d015      	beq.n	8003638 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a10      	ldr	r2, [pc, #64]	@ (8003654 <HAL_ADC_IRQHandler+0x478>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d004      	beq.n	8003620 <HAL_ADC_IRQHandler+0x444>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a0d      	ldr	r2, [pc, #52]	@ (8003650 <HAL_ADC_IRQHandler+0x474>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d101      	bne.n	8003624 <HAL_ADC_IRQHandler+0x448>
 8003620:	4b0d      	ldr	r3, [pc, #52]	@ (8003658 <HAL_ADC_IRQHandler+0x47c>)
 8003622:	e000      	b.n	8003626 <HAL_ADC_IRQHandler+0x44a>
 8003624:	4b0d      	ldr	r3, [pc, #52]	@ (800365c <HAL_ADC_IRQHandler+0x480>)
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff f8c2 	bl	80027b0 <LL_ADC_GetMultiDMATransfer>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d020      	beq.n	8003674 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8003632:	2301      	movs	r3, #1
 8003634:	627b      	str	r3, [r7, #36]	@ 0x24
 8003636:	e01d      	b.n	8003674 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d016      	beq.n	8003674 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8003646:	2301      	movs	r3, #1
 8003648:	627b      	str	r3, [r7, #36]	@ 0x24
 800364a:	e013      	b.n	8003674 <HAL_ADC_IRQHandler+0x498>
 800364c:	46021000 	.word	0x46021000
 8003650:	42028100 	.word	0x42028100
 8003654:	42028000 	.word	0x42028000
 8003658:	42028300 	.word	0x42028300
 800365c:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe ffec 	bl	8002642 <LL_ADC_REG_GetDMATransfer>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8003670:	2301      	movs	r3, #1
 8003672:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	2b01      	cmp	r3, #1
 8003678:	d10e      	bne.n	8003698 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800367e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800368a:	f043 0202 	orr.w	r2, r3, #2
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f876 	bl	8003784 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2210      	movs	r2, #16
 800369e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d01b      	beq.n	80036e2 <HAL_ADC_IRQHandler+0x506>
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d016      	beq.n	80036e2 <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036c4:	f043 0201 	orr.w	r2, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f877 	bl	80037c0 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0201 	bic.w	r2, r2, #1
 80036e0:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a17      	ldr	r2, [pc, #92]	@ (8003744 <HAL_ADC_IRQHandler+0x568>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d126      	bne.n	800373a <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00c      	beq.n	8003710 <HAL_ADC_IRQHandler+0x534>
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d007      	beq.n	8003710 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f849 	bl	8003798 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800370e:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00f      	beq.n	800373a <HAL_ADC_IRQHandler+0x55e>
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f841 	bl	80037ac <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003738:	605a      	str	r2, [r3, #4]
    }
  }
}
 800373a:	bf00      	nop
 800373c:	3728      	adds	r7, #40	@ 0x28
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	46021000 	.word	0x46021000

08003748 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b0b7      	sub	sp, #220	@ 0xdc
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4aa8      	ldr	r2, [pc, #672]	@ (8003a90 <HAL_ADC_ConfigChannel+0x2bc>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d103      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003800:	2b01      	cmp	r3, #1
 8003802:	d102      	bne.n	800380a <HAL_ADC_ConfigChannel+0x36>
 8003804:	2302      	movs	r3, #2
 8003806:	f000 bdfe 	b.w	8004406 <HAL_ADC_ConfigChannel+0xc32>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff f888 	bl	800292c <LL_ADC_REG_IsConversionOngoing>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	f040 85c1 	bne.w	80043a6 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a99      	ldr	r2, [pc, #612]	@ (8003a90 <HAL_ADC_ConfigChannel+0x2bc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	f000 8409 	beq.w	8004042 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d108      	bne.n	800384e <HAL_ADC_ConfigChannel+0x7a>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	0e9b      	lsrs	r3, r3, #26
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	2201      	movs	r2, #1
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	e01d      	b.n	800388a <HAL_ADC_ConfigChannel+0xb6>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800385a:	fa93 f3a3 	rbit	r3, r3
 800385e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003862:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003866:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800386a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8003872:	2320      	movs	r3, #32
 8003874:	e004      	b.n	8003880 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8003876:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f003 031f 	and.w	r3, r3, #31
 8003884:	2201      	movs	r2, #1
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6812      	ldr	r2, [r2, #0]
 800388e:	69d1      	ldr	r1, [r2, #28]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6812      	ldr	r2, [r2, #0]
 8003894:	430b      	orrs	r3, r1
 8003896:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	f7fe fe21 	bl	80024ec <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff f83c 	bl	800292c <LL_ADC_REG_IsConversionOngoing>
 80038b4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff f848 	bl	8002952 <LL_ADC_INJ_IsConversionOngoing>
 80038c2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f040 81df 	bne.w	8003c8e <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f040 81da 	bne.w	8003c8e <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	6819      	ldr	r1, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	461a      	mov	r2, r3
 80038e8:	f7fe fecc 	bl	8002684 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	089b      	lsrs	r3, r3, #2
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	2b04      	cmp	r3, #4
 800390c:	d046      	beq.n	800399c <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6919      	ldr	r1, [r3, #16]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800391e:	f7fe fd07 	bl	8002330 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	6919      	ldr	r1, [r3, #16]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	461a      	mov	r2, r3
 8003930:	f7fe fd35 	bl	800239e <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	7e9b      	ldrb	r3, [r3, #26]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d11e      	bne.n	800397a <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003948:	2b00      	cmp	r3, #0
 800394a:	d102      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x17e>
 800394c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003950:	e000      	b.n	8003954 <HAL_ADC_ConfigChannel+0x180>
 8003952:	2300      	movs	r3, #0
 8003954:	461a      	mov	r2, r3
 8003956:	f7fe fd58 	bl	800240a <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003966:	2b01      	cmp	r3, #1
 8003968:	d102      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x19c>
 800396a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800396e:	e000      	b.n	8003972 <HAL_ADC_ConfigChannel+0x19e>
 8003970:	2300      	movs	r3, #0
 8003972:	461a      	mov	r2, r3
 8003974:	f7fe fd2e 	bl	80023d4 <LL_ADC_SetOffsetSignedSaturation>
 8003978:	e189      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6818      	ldr	r0, [r3, #0]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2200      	movs	r2, #0
 8003984:	4619      	mov	r1, r3
 8003986:	f7fe fd40 	bl	800240a <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2200      	movs	r2, #0
 8003994:	4619      	mov	r1, r3
 8003996:	f7fe fd1d 	bl	80023d4 <LL_ADC_SetOffsetSignedSaturation>
 800399a:	e178      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2100      	movs	r1, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe fce5 	bl	8002372 <LL_ADC_GetOffsetChannel>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x1f4>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fe fcda 	bl	8002372 <LL_ADC_GetOffsetChannel>
 80039be:	4603      	mov	r3, r0
 80039c0:	0e9b      	lsrs	r3, r3, #26
 80039c2:	f003 021f 	and.w	r2, r3, #31
 80039c6:	e01e      	b.n	8003a06 <HAL_ADC_ConfigChannel+0x232>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2100      	movs	r1, #0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fe fccf 	bl	8002372 <LL_ADC_GetOffsetChannel>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039de:	fa93 f3a3 	rbit	r3, r3
 80039e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80039e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80039ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80039ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80039f6:	2320      	movs	r3, #32
 80039f8:	e004      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80039fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d105      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x24a>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	0e9b      	lsrs	r3, r3, #26
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	e018      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x27c>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a2a:	fa93 f3a3 	rbit	r3, r3
 8003a2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003a32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003a3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8003a42:	2320      	movs	r3, #32
 8003a44:	e004      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8003a46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a4a:	fab3 f383 	clz	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d107      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2100      	movs	r1, #0
 8003a60:	f7fe fc66 	bl	8002330 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2101      	movs	r1, #1
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fc81 	bl	8002372 <LL_ADC_GetOffsetChannel>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10c      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x2c0>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2101      	movs	r1, #1
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe fc76 	bl	8002372 <LL_ADC_GetOffsetChannel>
 8003a86:	4603      	mov	r3, r0
 8003a88:	0e9b      	lsrs	r3, r3, #26
 8003a8a:	f003 021f 	and.w	r2, r3, #31
 8003a8e:	e020      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x2fe>
 8003a90:	46021000 	.word	0x46021000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2101      	movs	r1, #1
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fc69 	bl	8002372 <LL_ADC_GetOffsetChannel>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003aaa:	fa93 f3a3 	rbit	r3, r3
 8003aae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003ab2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ab6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003aba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8003ac2:	2320      	movs	r3, #32
 8003ac4:	e004      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8003ac6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003aca:	fab3 f383 	clz	r3, r3
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d105      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x316>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	0e9b      	lsrs	r3, r3, #26
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	e018      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x348>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003afe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8003b0e:	2320      	movs	r3, #32
 8003b10:	e004      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8003b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d107      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6818      	ldr	r0, [r3, #0]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	f7fe fc00 	bl	8002330 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2102      	movs	r1, #2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fe fc1b 	bl	8002372 <LL_ADC_GetOffsetChannel>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x388>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe fc10 	bl	8002372 <LL_ADC_GetOffsetChannel>
 8003b52:	4603      	mov	r3, r0
 8003b54:	0e9b      	lsrs	r3, r3, #26
 8003b56:	f003 021f 	and.w	r2, r3, #31
 8003b5a:	e01a      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x3be>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2102      	movs	r1, #2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fc05 	bl	8002372 <LL_ADC_GetOffsetChannel>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b6e:	fa93 f3a3 	rbit	r3, r3
 8003b72:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003b74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003b7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003b82:	2320      	movs	r3, #32
 8003b84:	e004      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8003b86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d105      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x3d6>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	0e9b      	lsrs	r3, r3, #26
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	e011      	b.n	8003bce <HAL_ADC_ConfigChannel+0x3fa>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bb2:	fa93 f3a3 	rbit	r3, r3
 8003bb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003bb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bba:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003bbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003bc2:	2320      	movs	r3, #32
 8003bc4:	e003      	b.n	8003bce <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003bc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bc8:	fab3 f383 	clz	r3, r3
 8003bcc:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d107      	bne.n	8003be2 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2102      	movs	r1, #2
 8003bde:	f7fe fba7 	bl	8002330 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2103      	movs	r1, #3
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fe fbc2 	bl	8002372 <LL_ADC_GetOffsetChannel>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x43a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2103      	movs	r1, #3
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe fbb7 	bl	8002372 <LL_ADC_GetOffsetChannel>
 8003c04:	4603      	mov	r3, r0
 8003c06:	0e9b      	lsrs	r3, r3, #26
 8003c08:	f003 021f 	and.w	r2, r3, #31
 8003c0c:	e017      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x46a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2103      	movs	r1, #3
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fe fbac 	bl	8002372 <LL_ADC_GetOffsetChannel>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c20:	fa93 f3a3 	rbit	r3, r3
 8003c24:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003c26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c28:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003c2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8003c30:	2320      	movs	r3, #32
 8003c32:	e003      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8003c34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d105      	bne.n	8003c56 <HAL_ADC_ConfigChannel+0x482>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	0e9b      	lsrs	r3, r3, #26
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	e011      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x4a6>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c66:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003c68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 8003c6e:	2320      	movs	r3, #32
 8003c70:	e003      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8003c72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c74:	fab3 f383 	clz	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d107      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	2300      	movs	r3, #0
 8003c88:	2103      	movs	r1, #3
 8003c8a:	f7fe fb51 	bl	8002330 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe fe10 	bl	80028b8 <LL_ADC_IsEnabled>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f040 83ad 	bne.w	80043fa <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6818      	ldr	r0, [r3, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	6819      	ldr	r1, [r3, #0]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	461a      	mov	r2, r3
 8003cae:	f7fe fd4d 	bl	800274c <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cba:	f040 80d6 	bne.w	8003e6a <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10b      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x50e>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	0e9b      	lsrs	r3, r3, #26
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	2b09      	cmp	r3, #9
 8003cd8:	bf94      	ite	ls
 8003cda:	2301      	movls	r3, #1
 8003cdc:	2300      	movhi	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	e019      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x542>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003cf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cf2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	e003      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	3301      	adds	r3, #1
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	2b09      	cmp	r3, #9
 8003d0e:	bf94      	ite	ls
 8003d10:	2301      	movls	r3, #1
 8003d12:	2300      	movhi	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d04d      	beq.n	8003db6 <HAL_ADC_ConfigChannel+0x5e2>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d107      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x562>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	0e9b      	lsrs	r3, r3, #26
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	069b      	lsls	r3, r3, #26
 8003d30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d34:	e015      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x58e>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d3e:	fa93 f3a3 	rbit	r3, r3
 8003d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d46:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003d4e:	2320      	movs	r3, #32
 8003d50:	e003      	b.n	8003d5a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003d52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d54:	fab3 f383 	clz	r3, r3
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	069b      	lsls	r3, r3, #26
 8003d5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x5ae>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	0e9b      	lsrs	r3, r3, #26
 8003d74:	3301      	adds	r3, #1
 8003d76:	f003 031f 	and.w	r3, r3, #31
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	e017      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x5de>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d8a:	fa93 f3a3 	rbit	r3, r3
 8003d8e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d92:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8003d9a:	2320      	movs	r3, #32
 8003d9c:	e003      	b.n	8003da6 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da0:	fab3 f383 	clz	r3, r3
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	3301      	adds	r3, #1
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	2101      	movs	r1, #1
 8003dae:	fa01 f303 	lsl.w	r3, r1, r3
 8003db2:	4313      	orrs	r3, r2
 8003db4:	e04e      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x680>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d107      	bne.n	8003dd2 <HAL_ADC_ConfigChannel+0x5fe>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	0e9b      	lsrs	r3, r3, #26
 8003dc8:	3301      	adds	r3, #1
 8003dca:	069b      	lsls	r3, r3, #26
 8003dcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dd0:	e015      	b.n	8003dfe <HAL_ADC_ConfigChannel+0x62a>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dda:	fa93 f3a3 	rbit	r3, r3
 8003dde:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8003dea:	2320      	movs	r3, #32
 8003dec:	e003      	b.n	8003df6 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8003dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df0:	fab3 f383 	clz	r3, r3
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	3301      	adds	r3, #1
 8003df8:	069b      	lsls	r3, r3, #26
 8003dfa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x64a>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	0e9b      	lsrs	r3, r3, #26
 8003e10:	3301      	adds	r3, #1
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	2101      	movs	r1, #1
 8003e18:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1c:	e017      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x67a>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	fa93 f3a3 	rbit	r3, r3
 8003e2a:	61bb      	str	r3, [r7, #24]
  return result;
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8003e36:	2320      	movs	r3, #32
 8003e38:	e003      	b.n	8003e42 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	fab3 f383 	clz	r3, r3
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	3301      	adds	r3, #1
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	2101      	movs	r1, #1
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	461a      	mov	r2, r3
 8003e62:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003e66:	f7fe fc0d 	bl	8002684 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f280 82c3 	bge.w	80043fa <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a92      	ldr	r2, [pc, #584]	@ (80040c4 <HAL_ADC_ConfigChannel+0x8f0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <HAL_ADC_ConfigChannel+0x6b4>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a91      	ldr	r2, [pc, #580]	@ (80040c8 <HAL_ADC_ConfigChannel+0x8f4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d101      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x6b8>
 8003e88:	4b90      	ldr	r3, [pc, #576]	@ (80040cc <HAL_ADC_ConfigChannel+0x8f8>)
 8003e8a:	e000      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x6ba>
 8003e8c:	4b90      	ldr	r3, [pc, #576]	@ (80040d0 <HAL_ADC_ConfigChannel+0x8fc>)
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe fa20 	bl	80022d4 <LL_ADC_GetCommonPathInternalCh>
 8003e94:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a89      	ldr	r2, [pc, #548]	@ (80040c4 <HAL_ADC_ConfigChannel+0x8f0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d004      	beq.n	8003eac <HAL_ADC_ConfigChannel+0x6d8>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a88      	ldr	r2, [pc, #544]	@ (80040c8 <HAL_ADC_ConfigChannel+0x8f4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d10e      	bne.n	8003eca <HAL_ADC_ConfigChannel+0x6f6>
 8003eac:	4885      	ldr	r0, [pc, #532]	@ (80040c4 <HAL_ADC_ConfigChannel+0x8f0>)
 8003eae:	f7fe fd03 	bl	80028b8 <LL_ADC_IsEnabled>
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	4884      	ldr	r0, [pc, #528]	@ (80040c8 <HAL_ADC_ConfigChannel+0x8f4>)
 8003eb6:	f7fe fcff 	bl	80028b8 <LL_ADC_IsEnabled>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4323      	orrs	r3, r4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	bf0c      	ite	eq
 8003ec2:	2301      	moveq	r3, #1
 8003ec4:	2300      	movne	r3, #0
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	e008      	b.n	8003edc <HAL_ADC_ConfigChannel+0x708>
 8003eca:	4882      	ldr	r0, [pc, #520]	@ (80040d4 <HAL_ADC_ConfigChannel+0x900>)
 8003ecc:	f7fe fcf4 	bl	80028b8 <LL_ADC_IsEnabled>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bf0c      	ite	eq
 8003ed6:	2301      	moveq	r3, #1
 8003ed8:	2300      	movne	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80a6 	beq.w	800402e <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a7c      	ldr	r2, [pc, #496]	@ (80040d8 <HAL_ADC_ConfigChannel+0x904>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d13c      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003eec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ef0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d136      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a71      	ldr	r2, [pc, #452]	@ (80040c4 <HAL_ADC_ConfigChannel+0x8f0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00a      	beq.n	8003f18 <HAL_ADC_ConfigChannel+0x744>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a70      	ldr	r2, [pc, #448]	@ (80040c8 <HAL_ADC_ConfigChannel+0x8f4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d005      	beq.n	8003f18 <HAL_ADC_ConfigChannel+0x744>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a70      	ldr	r2, [pc, #448]	@ (80040d4 <HAL_ADC_ConfigChannel+0x900>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	f040 826e 	bne.w	80043f4 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a69      	ldr	r2, [pc, #420]	@ (80040c4 <HAL_ADC_ConfigChannel+0x8f0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d004      	beq.n	8003f2c <HAL_ADC_ConfigChannel+0x758>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a68      	ldr	r2, [pc, #416]	@ (80040c8 <HAL_ADC_ConfigChannel+0x8f4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d101      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x75c>
 8003f2c:	4a67      	ldr	r2, [pc, #412]	@ (80040cc <HAL_ADC_ConfigChannel+0x8f8>)
 8003f2e:	e000      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x75e>
 8003f30:	4a67      	ldr	r2, [pc, #412]	@ (80040d0 <HAL_ADC_ConfigChannel+0x8fc>)
 8003f32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	f7fe f9b6 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f42:	4b66      	ldr	r3, [pc, #408]	@ (80040dc <HAL_ADC_ConfigChannel+0x908>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	099b      	lsrs	r3, r3, #6
 8003f48:	4a65      	ldr	r2, [pc, #404]	@ (80040e0 <HAL_ADC_ConfigChannel+0x90c>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	099b      	lsrs	r3, r3, #6
 8003f50:	3301      	adds	r3, #1
 8003f52:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8003f54:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003f56:	e002      	b.n	8003f5e <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1f9      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f64:	e246      	b.n	80043f4 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a5e      	ldr	r2, [pc, #376]	@ (80040e4 <HAL_ADC_ConfigChannel+0x910>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d12b      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d125      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a50      	ldr	r2, [pc, #320]	@ (80040c4 <HAL_ADC_ConfigChannel+0x8f0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00a      	beq.n	8003f9c <HAL_ADC_ConfigChannel+0x7c8>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a4f      	ldr	r2, [pc, #316]	@ (80040c8 <HAL_ADC_ConfigChannel+0x8f4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d005      	beq.n	8003f9c <HAL_ADC_ConfigChannel+0x7c8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a4f      	ldr	r2, [pc, #316]	@ (80040d4 <HAL_ADC_ConfigChannel+0x900>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	f040 822e 	bne.w	80043f8 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a48      	ldr	r2, [pc, #288]	@ (80040c4 <HAL_ADC_ConfigChannel+0x8f0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <HAL_ADC_ConfigChannel+0x7dc>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a47      	ldr	r2, [pc, #284]	@ (80040c8 <HAL_ADC_ConfigChannel+0x8f4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d101      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x7e0>
 8003fb0:	4a46      	ldr	r2, [pc, #280]	@ (80040cc <HAL_ADC_ConfigChannel+0x8f8>)
 8003fb2:	e000      	b.n	8003fb6 <HAL_ADC_ConfigChannel+0x7e2>
 8003fb4:	4a46      	ldr	r2, [pc, #280]	@ (80040d0 <HAL_ADC_ConfigChannel+0x8fc>)
 8003fb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	f7fe f974 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fc6:	e217      	b.n	80043f8 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a46      	ldr	r2, [pc, #280]	@ (80040e8 <HAL_ADC_ConfigChannel+0x914>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	f040 8213 	bne.w	80043fa <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f040 820c 	bne.w	80043fa <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a37      	ldr	r2, [pc, #220]	@ (80040c4 <HAL_ADC_ConfigChannel+0x8f0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00a      	beq.n	8004002 <HAL_ADC_ConfigChannel+0x82e>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a35      	ldr	r2, [pc, #212]	@ (80040c8 <HAL_ADC_ConfigChannel+0x8f4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d005      	beq.n	8004002 <HAL_ADC_ConfigChannel+0x82e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a36      	ldr	r2, [pc, #216]	@ (80040d4 <HAL_ADC_ConfigChannel+0x900>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	f040 81fc 	bne.w	80043fa <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a2f      	ldr	r2, [pc, #188]	@ (80040c4 <HAL_ADC_ConfigChannel+0x8f0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d004      	beq.n	8004016 <HAL_ADC_ConfigChannel+0x842>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a2d      	ldr	r2, [pc, #180]	@ (80040c8 <HAL_ADC_ConfigChannel+0x8f4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d101      	bne.n	800401a <HAL_ADC_ConfigChannel+0x846>
 8004016:	4a2d      	ldr	r2, [pc, #180]	@ (80040cc <HAL_ADC_ConfigChannel+0x8f8>)
 8004018:	e000      	b.n	800401c <HAL_ADC_ConfigChannel+0x848>
 800401a:	4a2d      	ldr	r2, [pc, #180]	@ (80040d0 <HAL_ADC_ConfigChannel+0x8fc>)
 800401c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004020:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004024:	4619      	mov	r1, r3
 8004026:	4610      	mov	r0, r2
 8004028:	f7fe f941 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
 800402c:	e1e5      	b.n	80043fa <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004032:	f043 0220 	orr.w	r2, r3, #32
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004040:	e1db      	b.n	80043fa <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b02      	cmp	r3, #2
 8004050:	f000 811b 	beq.w	800428a <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800405c:	d004      	beq.n	8004068 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004062:	4a22      	ldr	r2, [pc, #136]	@ (80040ec <HAL_ADC_ConfigChannel+0x918>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d107      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004070:	4618      	mov	r0, r3
 8004072:	f7fe fa9b 	bl	80025ac <LL_ADC_REG_SetSequencerChAdd>
 8004076:	e059      	b.n	800412c <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f003 031f 	and.w	r3, r3, #31
 8004086:	210f      	movs	r1, #15
 8004088:	fa01 f303 	lsl.w	r3, r1, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	401a      	ands	r2, r3
 8004090:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004094:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d105      	bne.n	80040a8 <HAL_ADC_ConfigChannel+0x8d4>
 800409c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80040a0:	0e9b      	lsrs	r3, r3, #26
 80040a2:	f003 031f 	and.w	r3, r3, #31
 80040a6:	e027      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x924>
 80040a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80040ac:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	fa93 f3a3 	rbit	r3, r3
 80040b4:	60fb      	str	r3, [r7, #12]
  return result;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d117      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 80040c0:	2320      	movs	r3, #32
 80040c2:	e019      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x924>
 80040c4:	42028000 	.word	0x42028000
 80040c8:	42028100 	.word	0x42028100
 80040cc:	42028300 	.word	0x42028300
 80040d0:	46021300 	.word	0x46021300
 80040d4:	46021000 	.word	0x46021000
 80040d8:	ce080000 	.word	0xce080000
 80040dc:	20000000 	.word	0x20000000
 80040e0:	053e2d63 	.word	0x053e2d63
 80040e4:	ca040000 	.word	0xca040000
 80040e8:	80000001 	.word	0x80000001
 80040ec:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	6839      	ldr	r1, [r7, #0]
 80040fa:	6849      	ldr	r1, [r1, #4]
 80040fc:	f001 011f 	and.w	r1, r1, #31
 8004100:	408b      	lsls	r3, r1
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	089b      	lsrs	r3, r3, #2
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004116:	429a      	cmp	r2, r3
 8004118:	d808      	bhi.n	800412c <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004126:	4619      	mov	r1, r3
 8004128:	f7fe f9e0 	bl	80024ec <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	461a      	mov	r2, r3
 8004136:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800413a:	f7fe faa3 	bl	8002684 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	f280 8159 	bge.w	80043fa <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a9b      	ldr	r2, [pc, #620]	@ (80043bc <HAL_ADC_ConfigChannel+0xbe8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <HAL_ADC_ConfigChannel+0x988>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a9a      	ldr	r2, [pc, #616]	@ (80043c0 <HAL_ADC_ConfigChannel+0xbec>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d101      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x98c>
 800415c:	4b99      	ldr	r3, [pc, #612]	@ (80043c4 <HAL_ADC_ConfigChannel+0xbf0>)
 800415e:	e000      	b.n	8004162 <HAL_ADC_ConfigChannel+0x98e>
 8004160:	4b99      	ldr	r3, [pc, #612]	@ (80043c8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe f8b6 	bl	80022d4 <LL_ADC_GetCommonPathInternalCh>
 8004168:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a96      	ldr	r2, [pc, #600]	@ (80043cc <HAL_ADC_ConfigChannel+0xbf8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d12b      	bne.n	80041ce <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004176:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800417a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d125      	bne.n	80041ce <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a8d      	ldr	r2, [pc, #564]	@ (80043bc <HAL_ADC_ConfigChannel+0xbe8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d004      	beq.n	8004196 <HAL_ADC_ConfigChannel+0x9c2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a8b      	ldr	r2, [pc, #556]	@ (80043c0 <HAL_ADC_ConfigChannel+0xbec>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d101      	bne.n	800419a <HAL_ADC_ConfigChannel+0x9c6>
 8004196:	4a8b      	ldr	r2, [pc, #556]	@ (80043c4 <HAL_ADC_ConfigChannel+0xbf0>)
 8004198:	e000      	b.n	800419c <HAL_ADC_ConfigChannel+0x9c8>
 800419a:	4a8b      	ldr	r2, [pc, #556]	@ (80043c8 <HAL_ADC_ConfigChannel+0xbf4>)
 800419c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041a4:	4619      	mov	r1, r3
 80041a6:	4610      	mov	r0, r2
 80041a8:	f7fe f881 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80041ac:	4b88      	ldr	r3, [pc, #544]	@ (80043d0 <HAL_ADC_ConfigChannel+0xbfc>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	099b      	lsrs	r3, r3, #6
 80041b2:	4a88      	ldr	r2, [pc, #544]	@ (80043d4 <HAL_ADC_ConfigChannel+0xc00>)
 80041b4:	fba2 2303 	umull	r2, r3, r2, r3
 80041b8:	099b      	lsrs	r3, r3, #6
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80041be:	e002      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f9      	bne.n	80041c0 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80041cc:	e045      	b.n	800425a <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a81      	ldr	r2, [pc, #516]	@ (80043d8 <HAL_ADC_ConfigChannel+0xc04>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d11b      	bne.n	8004210 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d115      	bne.n	8004210 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a74      	ldr	r2, [pc, #464]	@ (80043bc <HAL_ADC_ConfigChannel+0xbe8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d004      	beq.n	80041f8 <HAL_ADC_ConfigChannel+0xa24>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a73      	ldr	r2, [pc, #460]	@ (80043c0 <HAL_ADC_ConfigChannel+0xbec>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d101      	bne.n	80041fc <HAL_ADC_ConfigChannel+0xa28>
 80041f8:	4a72      	ldr	r2, [pc, #456]	@ (80043c4 <HAL_ADC_ConfigChannel+0xbf0>)
 80041fa:	e000      	b.n	80041fe <HAL_ADC_ConfigChannel+0xa2a>
 80041fc:	4a72      	ldr	r2, [pc, #456]	@ (80043c8 <HAL_ADC_ConfigChannel+0xbf4>)
 80041fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004206:	4619      	mov	r1, r3
 8004208:	4610      	mov	r0, r2
 800420a:	f7fe f850 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
 800420e:	e024      	b.n	800425a <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a71      	ldr	r2, [pc, #452]	@ (80043dc <HAL_ADC_ConfigChannel+0xc08>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d11f      	bne.n	800425a <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800421a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800421e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d115      	bne.n	8004252 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a64      	ldr	r2, [pc, #400]	@ (80043bc <HAL_ADC_ConfigChannel+0xbe8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <HAL_ADC_ConfigChannel+0xa66>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a62      	ldr	r2, [pc, #392]	@ (80043c0 <HAL_ADC_ConfigChannel+0xbec>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d101      	bne.n	800423e <HAL_ADC_ConfigChannel+0xa6a>
 800423a:	4a62      	ldr	r2, [pc, #392]	@ (80043c4 <HAL_ADC_ConfigChannel+0xbf0>)
 800423c:	e000      	b.n	8004240 <HAL_ADC_ConfigChannel+0xa6c>
 800423e:	4a62      	ldr	r2, [pc, #392]	@ (80043c8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004240:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004244:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004248:	4619      	mov	r1, r3
 800424a:	4610      	mov	r0, r2
 800424c:	f7fe f82f 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
 8004250:	e003      	b.n	800425a <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a62      	ldr	r2, [pc, #392]	@ (80043e0 <HAL_ADC_ConfigChannel+0xc0c>)
 8004258:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a61      	ldr	r2, [pc, #388]	@ (80043e4 <HAL_ADC_ConfigChannel+0xc10>)
 8004260:	4293      	cmp	r3, r2
 8004262:	f040 80ca 	bne.w	80043fa <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004266:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800426a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800426e:	2b00      	cmp	r3, #0
 8004270:	f040 80c3 	bne.w	80043fa <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0201 	orr.w	r2, r2, #1
 8004284:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004288:	e0b7      	b.n	80043fa <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004292:	d004      	beq.n	800429e <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004298:	4a53      	ldr	r2, [pc, #332]	@ (80043e8 <HAL_ADC_ConfigChannel+0xc14>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d106      	bne.n	80042ac <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fe f9b3 	bl	8002612 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f280 80a2 	bge.w	80043fa <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a40      	ldr	r2, [pc, #256]	@ (80043bc <HAL_ADC_ConfigChannel+0xbe8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d004      	beq.n	80042ca <HAL_ADC_ConfigChannel+0xaf6>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a3e      	ldr	r2, [pc, #248]	@ (80043c0 <HAL_ADC_ConfigChannel+0xbec>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <HAL_ADC_ConfigChannel+0xafa>
 80042ca:	4b3e      	ldr	r3, [pc, #248]	@ (80043c4 <HAL_ADC_ConfigChannel+0xbf0>)
 80042cc:	e000      	b.n	80042d0 <HAL_ADC_ConfigChannel+0xafc>
 80042ce:	4b3e      	ldr	r3, [pc, #248]	@ (80043c8 <HAL_ADC_ConfigChannel+0xbf4>)
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fd ffff 	bl	80022d4 <LL_ADC_GetCommonPathInternalCh>
 80042d6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a43      	ldr	r2, [pc, #268]	@ (80043ec <HAL_ADC_ConfigChannel+0xc18>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d115      	bne.n	8004310 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a34      	ldr	r2, [pc, #208]	@ (80043bc <HAL_ADC_ConfigChannel+0xbe8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <HAL_ADC_ConfigChannel+0xb24>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a33      	ldr	r2, [pc, #204]	@ (80043c0 <HAL_ADC_ConfigChannel+0xbec>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d101      	bne.n	80042fc <HAL_ADC_ConfigChannel+0xb28>
 80042f8:	4a32      	ldr	r2, [pc, #200]	@ (80043c4 <HAL_ADC_ConfigChannel+0xbf0>)
 80042fa:	e000      	b.n	80042fe <HAL_ADC_ConfigChannel+0xb2a>
 80042fc:	4a32      	ldr	r2, [pc, #200]	@ (80043c8 <HAL_ADC_ConfigChannel+0xbf4>)
 80042fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004302:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004306:	4619      	mov	r1, r3
 8004308:	4610      	mov	r0, r2
 800430a:	f7fd ffd0 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
 800430e:	e034      	b.n	800437a <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a36      	ldr	r2, [pc, #216]	@ (80043f0 <HAL_ADC_ConfigChannel+0xc1c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d115      	bne.n	8004346 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a27      	ldr	r2, [pc, #156]	@ (80043bc <HAL_ADC_ConfigChannel+0xbe8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d004      	beq.n	800432e <HAL_ADC_ConfigChannel+0xb5a>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a25      	ldr	r2, [pc, #148]	@ (80043c0 <HAL_ADC_ConfigChannel+0xbec>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d101      	bne.n	8004332 <HAL_ADC_ConfigChannel+0xb5e>
 800432e:	4a25      	ldr	r2, [pc, #148]	@ (80043c4 <HAL_ADC_ConfigChannel+0xbf0>)
 8004330:	e000      	b.n	8004334 <HAL_ADC_ConfigChannel+0xb60>
 8004332:	4a25      	ldr	r2, [pc, #148]	@ (80043c8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004334:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004338:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800433c:	4619      	mov	r1, r3
 800433e:	4610      	mov	r0, r2
 8004340:	f7fd ffb5 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
 8004344:	e019      	b.n	800437a <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a24      	ldr	r2, [pc, #144]	@ (80043dc <HAL_ADC_ConfigChannel+0xc08>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d114      	bne.n	800437a <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a19      	ldr	r2, [pc, #100]	@ (80043bc <HAL_ADC_ConfigChannel+0xbe8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d004      	beq.n	8004364 <HAL_ADC_ConfigChannel+0xb90>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a18      	ldr	r2, [pc, #96]	@ (80043c0 <HAL_ADC_ConfigChannel+0xbec>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d101      	bne.n	8004368 <HAL_ADC_ConfigChannel+0xb94>
 8004364:	4a17      	ldr	r2, [pc, #92]	@ (80043c4 <HAL_ADC_ConfigChannel+0xbf0>)
 8004366:	e000      	b.n	800436a <HAL_ADC_ConfigChannel+0xb96>
 8004368:	4a17      	ldr	r2, [pc, #92]	@ (80043c8 <HAL_ADC_ConfigChannel+0xbf4>)
 800436a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800436e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004372:	4619      	mov	r1, r3
 8004374:	4610      	mov	r0, r2
 8004376:	f7fd ff9a 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a19      	ldr	r2, [pc, #100]	@ (80043e4 <HAL_ADC_ConfigChannel+0xc10>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d13a      	bne.n	80043fa <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004384:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004388:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d134      	bne.n	80043fa <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0201 	orr.w	r2, r2, #1
 80043a0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80043a4:	e029      	b.n	80043fa <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043aa:	f043 0220 	orr.w	r2, r3, #32
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80043b8:	e01f      	b.n	80043fa <HAL_ADC_ConfigChannel+0xc26>
 80043ba:	bf00      	nop
 80043bc:	42028000 	.word	0x42028000
 80043c0:	42028100 	.word	0x42028100
 80043c4:	42028300 	.word	0x42028300
 80043c8:	46021300 	.word	0x46021300
 80043cc:	b6002000 	.word	0xb6002000
 80043d0:	20000000 	.word	0x20000000
 80043d4:	053e2d63 	.word	0x053e2d63
 80043d8:	ba004000 	.word	0xba004000
 80043dc:	80000001 	.word	0x80000001
 80043e0:	b2001000 	.word	0xb2001000
 80043e4:	d7200000 	.word	0xd7200000
 80043e8:	80000010 	.word	0x80000010
 80043ec:	ce080000 	.word	0xce080000
 80043f0:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043f4:	bf00      	nop
 80043f6:	e000      	b.n	80043fa <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043f8:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004402:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004406:	4618      	mov	r0, r3
 8004408:	37dc      	adds	r7, #220	@ 0xdc
 800440a:	46bd      	mov	sp, r7
 800440c:	bd90      	pop	{r4, r7, pc}
 800440e:	bf00      	nop

08004410 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f7fe fa4b 	bl	80028b8 <LL_ADC_IsEnabled>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d17b      	bne.n	8004520 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	4b3f      	ldr	r3, [pc, #252]	@ (800452c <ADC_Enable+0x11c>)
 8004430:	4013      	ands	r3, r2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00d      	beq.n	8004452 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800443a:	f043 0210 	orr.w	r2, r3, #16
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004446:	f043 0201 	orr.w	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e067      	b.n	8004522 <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2201      	movs	r2, #1
 8004458:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe fa02 	bl	8002868 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d004      	beq.n	8004476 <ADC_Enable+0x66>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a2f      	ldr	r2, [pc, #188]	@ (8004530 <ADC_Enable+0x120>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d054      	beq.n	8004520 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004476:	f7fd fe7b 	bl	8002170 <HAL_GetTick>
 800447a:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2c      	ldr	r2, [pc, #176]	@ (8004534 <ADC_Enable+0x124>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <ADC_Enable+0x80>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a2b      	ldr	r2, [pc, #172]	@ (8004538 <ADC_Enable+0x128>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d101      	bne.n	8004494 <ADC_Enable+0x84>
 8004490:	4b2a      	ldr	r3, [pc, #168]	@ (800453c <ADC_Enable+0x12c>)
 8004492:	e000      	b.n	8004496 <ADC_Enable+0x86>
 8004494:	4b2a      	ldr	r3, [pc, #168]	@ (8004540 <ADC_Enable+0x130>)
 8004496:	4618      	mov	r0, r3
 8004498:	f7fe f97c 	bl	8002794 <LL_ADC_GetMultimode>
 800449c:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a25      	ldr	r2, [pc, #148]	@ (8004538 <ADC_Enable+0x128>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d002      	beq.n	80044ae <ADC_Enable+0x9e>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	e000      	b.n	80044b0 <ADC_Enable+0xa0>
 80044ae:	4b21      	ldr	r3, [pc, #132]	@ (8004534 <ADC_Enable+0x124>)
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6812      	ldr	r2, [r2, #0]
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d02c      	beq.n	8004512 <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d130      	bne.n	8004520 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044be:	e028      	b.n	8004512 <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fe f9f7 	bl	80028b8 <LL_ADC_IsEnabled>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d104      	bne.n	80044da <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fe f9c7 	bl	8002868 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044da:	f7fd fe49 	bl	8002170 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d914      	bls.n	8004512 <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d00d      	beq.n	8004512 <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044fa:	f043 0210 	orr.w	r2, r3, #16
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004506:	f043 0201 	orr.w	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e007      	b.n	8004522 <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b01      	cmp	r3, #1
 800451e:	d1cf      	bne.n	80044c0 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	8000003f 	.word	0x8000003f
 8004530:	46021000 	.word	0x46021000
 8004534:	42028000 	.word	0x42028000
 8004538:	42028100 	.word	0x42028100
 800453c:	42028300 	.word	0x42028300
 8004540:	46021300 	.word	0x46021300

08004544 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f7fe f9c4 	bl	80028de <LL_ADC_IsDisableOngoing>
 8004556:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f7fe f9ab 	bl	80028b8 <LL_ADC_IsEnabled>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d047      	beq.n	80045f8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d144      	bne.n	80045f8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 030d 	and.w	r3, r3, #13
 8004578:	2b01      	cmp	r3, #1
 800457a:	d10c      	bne.n	8004596 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f7fe f985 	bl	8002890 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2203      	movs	r2, #3
 800458c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800458e:	f7fd fdef 	bl	8002170 <HAL_GetTick>
 8004592:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004594:	e029      	b.n	80045ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800459a:	f043 0210 	orr.w	r2, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	679a      	str	r2, [r3, #120]	@ 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045a6:	f043 0201 	orr.w	r2, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	67da      	str	r2, [r3, #124]	@ 0x7c
      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e023      	b.n	80045fa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045b2:	f7fd fddd 	bl	8002170 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d914      	bls.n	80045ea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00d      	beq.n	80045ea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045d2:	f043 0210 	orr.w	r2, r3, #16
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045de:	f043 0201 	orr.w	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	67da      	str	r2, [r3, #124]	@ 0x7c

          return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e007      	b.n	80045fa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1dc      	bne.n	80045b2 <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800460e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004614:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004618:	2b00      	cmp	r3, #0
 800461a:	d14b      	bne.n	80046b4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004620:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d021      	beq.n	800467a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fd ff42 	bl	80024c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d032      	beq.n	80046ac <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d12b      	bne.n	80046ac <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004658:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004664:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d11f      	bne.n	80046ac <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004670:	f043 0201 	orr.w	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	679a      	str	r2, [r3, #120]	@ 0x78
 8004678:	e018      	b.n	80046ac <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d111      	bne.n	80046ac <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800468c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004698:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d105      	bne.n	80046ac <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046a4:	f043 0201 	orr.w	r2, r3, #1
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7ff f84b 	bl	8003748 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046b2:	e00e      	b.n	80046d2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f7ff f85f 	bl	8003784 <HAL_ADC_ErrorCallback>
}
 80046c6:	e004      	b.n	80046d2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
}
 80046d2:	bf00      	nop
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b084      	sub	sp, #16
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f7ff f837 	bl	800375c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046ee:	bf00      	nop
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b084      	sub	sp, #16
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004702:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004708:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004714:	f043 0204 	orr.w	r2, r3, #4
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7ff f831 	bl	8003784 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <LL_ADC_StartCalibration>:
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a0f      	ldr	r2, [pc, #60]	@ (8004778 <LL_ADC_StartCalibration+0x4c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00c      	beq.n	8004758 <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	4b0e      	ldr	r3, [pc, #56]	@ (800477c <LL_ADC_StartCalibration+0x50>)
 8004744:	4013      	ands	r3, r2
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 800474c:	4313      	orrs	r3, r2
 800474e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	609a      	str	r2, [r3, #8]
}
 8004756:	e009      	b.n	800476c <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004760:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004764:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	609a      	str	r2, [r3, #8]
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	46021000 	.word	0x46021000
 800477c:	7ffeffc0 	.word	0x7ffeffc0

08004780 <LL_ADC_IsCalibrationOnGoing>:
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004790:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004794:	d101      	bne.n	800479a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	@ 0x28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_ADCEx_Calibration_Start+0x1e>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e138      	b.n	8004a38 <HAL_ADCEx_Calibration_Start+0x290>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f7ff feb8 	bl	8004544 <ADC_Disable>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80047da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f040 811e 	bne.w	8004a20 <HAL_ADCEx_Calibration_Start+0x278>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047e8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80047ec:	f023 0302 	bic.w	r3, r3, #2
 80047f0:	f043 0202 	orr.w	r2, r3, #2
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hadc->Instance == ADC4)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a90      	ldr	r2, [pc, #576]	@ (8004a40 <HAL_ADCEx_Calibration_Start+0x298>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d150      	bne.n	80048a4 <HAL_ADCEx_Calibration_Start+0xfc>
      /* Note: Specificity of this STM32 series: Calibration factor is          */
      /*       available in data register and also transferred by DMA.          */
      /*       To not insert ADC calibration factor among ADC conversion data   */
      /*       in array variable, DMA transfer must be disabled during          */
      /*       calibration.                                                     */
      backup_setting_pwrr  = READ_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	61bb      	str	r3, [r7, #24]
      backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	617b      	str	r3, [r7, #20]
      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0203 	bic.w	r2, r2, #3
 8004828:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0201 	bic.w	r2, r2, #1
 8004838:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Start ADC calibration in mode single-ended */
      LL_ADC_StartCalibration(hadc->Instance, LL_ADC_CALIB_OFFSET);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2100      	movs	r1, #0
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff ff73 	bl	800472c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004846:	e014      	b.n	8004872 <HAL_ADCEx_Calibration_Start+0xca>
      {
        wait_loop_index++;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	3301      	adds	r3, #1
 800484c:	613b      	str	r3, [r7, #16]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	4a7c      	ldr	r2, [pc, #496]	@ (8004a44 <HAL_ADCEx_Calibration_Start+0x29c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d90d      	bls.n	8004872 <HAL_ADCEx_Calibration_Start+0xca>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800485a:	f023 0312 	bic.w	r3, r3, #18
 800485e:	f043 0210 	orr.w	r2, r3, #16
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	679a      	str	r2, [r3, #120]	@ 0x78

          __HAL_UNLOCK(hadc);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e0e2      	b.n	8004a38 <HAL_ADCEx_Calibration_Start+0x290>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff ff82 	bl	8004780 <LL_ADC_IsCalibrationOnGoing>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e2      	bne.n	8004848 <HAL_ADCEx_Calibration_Start+0xa0>
        }
      }

      /* Restore configuration after calibration */
      SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68d9      	ldr	r1, [r3, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	430a      	orrs	r2, r1
 8004890:	60da      	str	r2, [r3, #12]
      SET_BIT(hadc->Instance->PWRR, backup_setting_pwrr);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	430a      	orrs	r2, r1
 80048a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80048a2:	e0b4      	b.n	8004a0e <HAL_ADCEx_Calibration_Start+0x266>
    }
    else /* ADC instance ADC1 or ADC2 */
    {
      /* Get device information */
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
 80048a4:	4b68      	ldr	r3, [pc, #416]	@ (8004a48 <HAL_ADCEx_Calibration_Start+0x2a0>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ac:	623b      	str	r3, [r7, #32]
      uint32_t rev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos;
 80048ae:	4b66      	ldr	r3, [pc, #408]	@ (8004a48 <HAL_ADCEx_Calibration_Start+0x2a0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	0c1b      	lsrs	r3, r3, #16
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	61fb      	str	r3, [r7, #28]

      /* Assess whether extended calibration is available on the selected device */
      if ((dev_id == 0x455UL) || (dev_id == 0x476UL)
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	f240 4255 	movw	r2, #1109	@ 0x455
 80048be:	4293      	cmp	r3, r2
 80048c0:	d012      	beq.n	80048e8 <HAL_ADCEx_Calibration_Start+0x140>
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	f240 4276 	movw	r2, #1142	@ 0x476
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d00d      	beq.n	80048e8 <HAL_ADCEx_Calibration_Start+0x140>
          || (((dev_id == 0x481UL) || (dev_id == 0x482UL)) && (rev_id >= 0x3000UL)))
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	f240 4281 	movw	r2, #1153	@ 0x481
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d004      	beq.n	80048e0 <HAL_ADCEx_Calibration_Start+0x138>
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	f240 4282 	movw	r2, #1154	@ 0x482
 80048dc:	4293      	cmp	r3, r2
 80048de:	d172      	bne.n	80049c6 <HAL_ADCEx_Calibration_Start+0x21e>
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048e6:	d36e      	bcc.n	80049c6 <HAL_ADCEx_Calibration_Start+0x21e>
      {
        /* Perform extended calibration */
        /* Refer to ref manual for extended calibration procedure details */
        tmp_hal_status = ADC_Enable(hadc);
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f7ff fd91 	bl	8004410 <ADC_Enable>
 80048ee:	4603      	mov	r3, r0
 80048f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (tmp_hal_status == HAL_OK)
 80048f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f040 8088 	bne.w	8004a0e <HAL_ADCEx_Calibration_Start+0x266>
        {
          /* Use a Data Memory Barrier instruction to avoid synchronization issues when accessing ADC registers */
          MODIFY_REG(hadc->Instance->CR, ADC_CR_CALINDEX, 0x9UL << ADC_CR_CALINDEX_Pos);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 6210 	orr.w	r2, r2, #150994944	@ 0x9000000
 8004910:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 8004912:	f3bf 8f5f 	dmb	sy
}
 8004916:	bf00      	nop
          __DMB();
          MODIFY_REG(hadc->Instance->CALFACT2, 0xFFFFFF00UL, 0x03021100UL);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004920:	b2d9      	uxtb	r1, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	4b49      	ldr	r3, [pc, #292]	@ (8004a4c <HAL_ADCEx_Calibration_Start+0x2a4>)
 8004928:	430b      	orrs	r3, r1
 800492a:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  __ASM volatile ("dmb 0xF":::"memory");
 800492e:	f3bf 8f5f 	dmb	sy
}
 8004932:	bf00      	nop
          __DMB();
          SET_BIT(hadc->Instance->CALFACT, ADC_CALFACT_LATCH_COEF);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004944:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

          tmp_hal_status = ADC_Disable(hadc);
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f7ff fdfb 	bl	8004544 <ADC_Disable>
 800494e:	4603      	mov	r3, r0
 8004950:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

          if (CalibrationMode == ADC_CALIB_OFFSET_LINEARITY)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 800495a:	d109      	bne.n	8004970 <HAL_ADCEx_Calibration_Start+0x1c8>
          {
            MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN | ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCALLIN);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	4b3b      	ldr	r3, [pc, #236]	@ (8004a50 <HAL_ADCEx_Calibration_Start+0x2a8>)
 8004964:	4013      	ands	r3, r2
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	6812      	ldr	r2, [r2, #0]
 800496a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800496e:	6093      	str	r3, [r2, #8]
          }

          MODIFY_REG(hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCAL);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800497a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004986:	6093      	str	r3, [r2, #8]

          /* Wait for calibration completion */
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004988:	e014      	b.n	80049b4 <HAL_ADCEx_Calibration_Start+0x20c>
          {
            wait_loop_index++;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	3301      	adds	r3, #1
 800498e:	613b      	str	r3, [r7, #16]
            if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	4a2c      	ldr	r2, [pc, #176]	@ (8004a44 <HAL_ADCEx_Calibration_Start+0x29c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d90d      	bls.n	80049b4 <HAL_ADCEx_Calibration_Start+0x20c>
            {
              /* Update ADC state machine to error */
              ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800499c:	f023 0312 	bic.w	r3, r3, #18
 80049a0:	f043 0210 	orr.w	r2, r3, #16
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	679a      	str	r2, [r3, #120]	@ 0x78

              __HAL_UNLOCK(hadc);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

              return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e041      	b.n	8004a38 <HAL_ADCEx_Calibration_Start+0x290>
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff fee1 	bl	8004780 <LL_ADC_IsCalibrationOnGoing>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e2      	bne.n	800498a <HAL_ADCEx_Calibration_Start+0x1e2>
        if (tmp_hal_status == HAL_OK)
 80049c4:	e023      	b.n	8004a0e <HAL_ADCEx_Calibration_Start+0x266>
        }
      }
      else
      {
        /* Start ADC calibration in mode single-ended or differential */
        LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff fead 	bl	800472c <LL_ADC_StartCalibration>

        /* Wait for calibration completion */
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049d2:	e014      	b.n	80049fe <HAL_ADCEx_Calibration_Start+0x256>
        {
          wait_loop_index++;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	3301      	adds	r3, #1
 80049d8:	613b      	str	r3, [r7, #16]
          if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4a19      	ldr	r2, [pc, #100]	@ (8004a44 <HAL_ADCEx_Calibration_Start+0x29c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d90d      	bls.n	80049fe <HAL_ADCEx_Calibration_Start+0x256>
          {
            /* Update ADC state machine to error */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049e6:	f023 0312 	bic.w	r3, r3, #18
 80049ea:	f043 0210 	orr.w	r2, r3, #16
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	679a      	str	r2, [r3, #120]	@ 0x78

            __HAL_UNLOCK(hadc);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

            return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e01c      	b.n	8004a38 <HAL_ADCEx_Calibration_Start+0x290>
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff febc 	bl	8004780 <LL_ADC_IsCalibrationOnGoing>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1e2      	bne.n	80049d4 <HAL_ADCEx_Calibration_Start+0x22c>
        }
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a12:	f023 0303 	bic.w	r3, r3, #3
 8004a16:	f043 0201 	orr.w	r2, r3, #1
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	679a      	str	r2, [r3, #120]	@ 0x78
 8004a1e:	e005      	b.n	8004a2c <HAL_ADCEx_Calibration_Start+0x284>
  }
  else /* ADC not disabled */
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a24:	f043 0210 	orr.w	r2, r3, #16
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3728      	adds	r7, #40	@ 0x28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	46021000 	.word	0x46021000
 8004a44:	022b6b7f 	.word	0x022b6b7f
 8004a48:	e0044000 	.word	0xe0044000
 8004a4c:	03021100 	.word	0x03021100
 8004a50:	7ffeffc0 	.word	0x7ffeffc0

08004a54 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004acc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ad6:	4a04      	ldr	r2, [pc, #16]	@ (8004ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	60d3      	str	r3, [r2, #12]
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	e000ed00 	.word	0xe000ed00

08004aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004af0:	4b04      	ldr	r3, [pc, #16]	@ (8004b04 <__NVIC_GetPriorityGrouping+0x18>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	0a1b      	lsrs	r3, r3, #8
 8004af6:	f003 0307 	and.w	r3, r3, #7
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	e000ed00 	.word	0xe000ed00

08004b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	db0b      	blt.n	8004b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	f003 021f 	and.w	r2, r3, #31
 8004b20:	4907      	ldr	r1, [pc, #28]	@ (8004b40 <__NVIC_EnableIRQ+0x38>)
 8004b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	2001      	movs	r0, #1
 8004b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	e000e100 	.word	0xe000e100

08004b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	6039      	str	r1, [r7, #0]
 8004b4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	db0a      	blt.n	8004b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	490c      	ldr	r1, [pc, #48]	@ (8004b90 <__NVIC_SetPriority+0x4c>)
 8004b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b62:	0112      	lsls	r2, r2, #4
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	440b      	add	r3, r1
 8004b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b6c:	e00a      	b.n	8004b84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	4908      	ldr	r1, [pc, #32]	@ (8004b94 <__NVIC_SetPriority+0x50>)
 8004b74:	88fb      	ldrh	r3, [r7, #6]
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	3b04      	subs	r3, #4
 8004b7c:	0112      	lsls	r2, r2, #4
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	440b      	add	r3, r1
 8004b82:	761a      	strb	r2, [r3, #24]
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	e000e100 	.word	0xe000e100
 8004b94:	e000ed00 	.word	0xe000ed00

08004b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b089      	sub	sp, #36	@ 0x24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f1c3 0307 	rsb	r3, r3, #7
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	bf28      	it	cs
 8004bb6:	2304      	movcs	r3, #4
 8004bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	2b06      	cmp	r3, #6
 8004bc0:	d902      	bls.n	8004bc8 <NVIC_EncodePriority+0x30>
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	3b03      	subs	r3, #3
 8004bc6:	e000      	b.n	8004bca <NVIC_EncodePriority+0x32>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	43da      	mvns	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	401a      	ands	r2, r3
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004be0:	f04f 31ff 	mov.w	r1, #4294967295
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bea:	43d9      	mvns	r1, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf0:	4313      	orrs	r3, r2
         );
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3724      	adds	r7, #36	@ 0x24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff ff4c 	bl	8004aa4 <__NVIC_SetPriorityGrouping>
}
 8004c0c:	bf00      	nop
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c22:	f7ff ff63 	bl	8004aec <__NVIC_GetPriorityGrouping>
 8004c26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	6978      	ldr	r0, [r7, #20]
 8004c2e:	f7ff ffb3 	bl	8004b98 <NVIC_EncodePriority>
 8004c32:	4602      	mov	r2, r0
 8004c34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c38:	4611      	mov	r1, r2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff ff82 	bl	8004b44 <__NVIC_SetPriority>
}
 8004c40:	bf00      	nop
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	4603      	mov	r3, r0
 8004c50:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff ff56 	bl	8004b08 <__NVIC_EnableIRQ>
}
 8004c5c:	bf00      	nop
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d844      	bhi.n	8004cfc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004c72:	a201      	add	r2, pc, #4	@ (adr r2, 8004c78 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004c9b 	.word	0x08004c9b
 8004c7c:	08004cb9 	.word	0x08004cb9
 8004c80:	08004cdb 	.word	0x08004cdb
 8004c84:	08004cfd 	.word	0x08004cfd
 8004c88:	08004c8d 	.word	0x08004c8d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8004d0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1e      	ldr	r2, [pc, #120]	@ (8004d0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004c92:	f043 0304 	orr.w	r3, r3, #4
 8004c96:	6013      	str	r3, [r2, #0]
      break;
 8004c98:	e031      	b.n	8004cfe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8004d0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8004d0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004ca0:	f023 0304 	bic.w	r3, r3, #4
 8004ca4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8004ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d10 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cac:	4a18      	ldr	r2, [pc, #96]	@ (8004d10 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004cae:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004cb6:	e022      	b.n	8004cfe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004cb8:	4b14      	ldr	r3, [pc, #80]	@ (8004d0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a13      	ldr	r2, [pc, #76]	@ (8004d0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004cbe:	f023 0304 	bic.w	r3, r3, #4
 8004cc2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8004cc4:	4b12      	ldr	r3, [pc, #72]	@ (8004d10 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cca:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004cce:	4a10      	ldr	r2, [pc, #64]	@ (8004d10 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004cd0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004cd8:	e011      	b.n	8004cfe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004cda:	4b0c      	ldr	r3, [pc, #48]	@ (8004d0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a0b      	ldr	r2, [pc, #44]	@ (8004d0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004ce0:	f023 0304 	bic.w	r3, r3, #4
 8004ce4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8004ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8004d10 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cec:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004cf0:	4a07      	ldr	r2, [pc, #28]	@ (8004d10 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004cf2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004cfa:	e000      	b.n	8004cfe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004cfc:	bf00      	nop
  }
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	e000e010 	.word	0xe000e010
 8004d10:	46020c00 	.word	0x46020c00

08004d14 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e037      	b.n	8004d96 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d119      	bne.n	8004d66 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a1a      	ldr	r2, [pc, #104]	@ (8004da0 <HAL_DCACHE_Init+0x8c>)
 8004d36:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8004da4 <HAL_DCACHE_Init+0x90>)
 8004d3c:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a19      	ldr	r2, [pc, #100]	@ (8004da8 <HAL_DCACHE_Init+0x94>)
 8004d42:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a19      	ldr	r2, [pc, #100]	@ (8004dac <HAL_DCACHE_Init+0x98>)
 8004d48:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a18      	ldr	r2, [pc, #96]	@ (8004db0 <HAL_DCACHE_Init+0x9c>)
 8004d4e:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d102      	bne.n	8004d5e <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a16      	ldr	r2, [pc, #88]	@ (8004db4 <HAL_DCACHE_Init+0xa0>)
 8004d5c:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f814 	bl	8004db8 <HAL_DCACHE_Enable>
 8004d90:	4603      	mov	r3, r0
 8004d92:	73fb      	strb	r3, [r7, #15]

  return status;
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	08004e57 	.word	0x08004e57
 8004da4:	08004e07 	.word	0x08004e07
 8004da8:	08004e1b 	.word	0x08004e1b
 8004dac:	08004e43 	.word	0x08004e43
 8004db0:	08004e2f 	.word	0x08004e2f
 8004db4:	080019a9 	.word	0x080019a9

08004db8 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e015      	b.n	8004dfa <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f003 0309 	and.w	r3, r3, #9
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8004ddc:	2302      	movs	r3, #2
 8004dde:	73fb      	strb	r3, [r7, #15]
 8004de0:	e00a      	b.n	8004df8 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]
  }

  return status;
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	607a      	str	r2, [r7, #4]
 8004e76:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e04f      	b.n	8004f22 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_DMA_Start_IT+0x26>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e048      	b.n	8004f22 <HAL_DMA_Start_IT+0xb8>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d136      	bne.n	8004f12 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 f9d3 	bl	8005264 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695a      	ldr	r2, [r3, #20]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8004ecc:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d007      	beq.n	8004ee6 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ee4:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d007      	beq.n	8004efe <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004efc:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695a      	ldr	r2, [r3, #20]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0201 	orr.w	r2, r2, #1
 8004f0c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e007      	b.n	8004f22 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2240      	movs	r2, #64	@ 0x40
 8004f16:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b086      	sub	sp, #24
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004f3a:	f023 030f 	bic.w	r3, r3, #15
 8004f3e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f48:	3b50      	subs	r3, #80	@ 0x50
 8004f4a:	09db      	lsrs	r3, r3, #7
 8004f4c:	f003 031f 	and.w	r3, r3, #31
 8004f50:	2201      	movs	r2, #1
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 813b 	beq.w	80051e0 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d011      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f8e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f94:	f043 0201 	orr.w	r2, r3, #1
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d011      	beq.n	8004fce <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fc0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc6:	f043 0202 	orr.w	r2, r3, #2
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d011      	beq.n	8005000 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004ff2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff8:	f043 0204 	orr.w	r2, r3, #4
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d011      	beq.n	8005032 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005024:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800502a:	f043 0208 	orr.w	r2, r3, #8
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800503c:	2b00      	cmp	r3, #0
 800503e:	d013      	beq.n	8005068 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00c      	beq.n	8005068 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005056:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d04c      	beq.n	8005110 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d045      	beq.n	8005110 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800508c:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b04      	cmp	r3, #4
 8005098:	d12e      	bne.n	80050f8 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695a      	ldr	r2, [r3, #20]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050a8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695a      	ldr	r2, [r3, #20]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0202 	orr.w	r2, r2, #2
 80050b8:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d007      	beq.n	80050de <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050d2:	2201      	movs	r2, #1
 80050d4:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2200      	movs	r2, #0
 80050dc:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d07a      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	4798      	blx	r3
        }

        return;
 80050f6:	e075      	b.n	80051e4 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2205      	movs	r2, #5
 80050fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511a:	2b00      	cmp	r3, #0
 800511c:	d039      	beq.n	8005192 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005128:	2b00      	cmp	r3, #0
 800512a:	d032      	beq.n	8005192 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005134:	2b00      	cmp	r3, #0
 8005136:	d012      	beq.n	800515e <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d116      	bne.n	8005170 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005148:	2b00      	cmp	r3, #0
 800514a:	d111      	bne.n	8005170 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005158:	2201      	movs	r2, #1
 800515a:	731a      	strb	r2, [r3, #12]
 800515c:	e008      	b.n	8005170 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005164:	2b00      	cmp	r3, #0
 8005166:	d103      	bne.n	8005170 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005178:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005196:	2b00      	cmp	r3, #0
 8005198:	d025      	beq.n	80051e6 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	695a      	ldr	r2, [r3, #20]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0202 	orr.w	r2, r2, #2
 80051a8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051c2:	2201      	movs	r2, #1
 80051c4:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d007      	beq.n	80051e6 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	4798      	blx	r3
 80051de:	e002      	b.n	80051e6 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80051e0:	bf00      	nop
 80051e2:	e000      	b.n	80051e6 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80051e4:	bf00      	nop
    }
  }
}
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e02b      	b.n	8005258 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005208:	f023 030f 	bic.w	r3, r3, #15
 800520c:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005216:	3b50      	subs	r3, #80	@ 0x50
 8005218:	09db      	lsrs	r3, r3, #7
 800521a:	f003 031f 	and.w	r3, r3, #31
 800521e:	2201      	movs	r2, #1
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	f003 0310 	and.w	r3, r3, #16
 800522c:	2b00      	cmp	r3, #0
 800522e:	d012      	beq.n	8005256 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	f003 0311 	and.w	r3, r3, #17
 8005236:	2b11      	cmp	r3, #17
 8005238:	d106      	bne.n	8005248 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	431a      	orrs	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	605a      	str	r2, [r3, #4]
 8005246:	e006      	b.n	8005256 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	43db      	mvns	r3, r3
 8005250:	401a      	ands	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	041b      	lsls	r3, r3, #16
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	b291      	uxth	r1, r2
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	430b      	orrs	r3, r1
 8005286:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005290:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80052a2:	bf00      	nop
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
	...

080052b0 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80052b8:	f7fc ff5a 	bl	8002170 <HAL_GetTick>
 80052bc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0db      	b.n	8005480 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a6e      	ldr	r2, [pc, #440]	@ (8005488 <HAL_DMAEx_List_Init+0x1d8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	f000 809f 	beq.w	8005412 <HAL_DMAEx_List_Init+0x162>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a6c      	ldr	r2, [pc, #432]	@ (800548c <HAL_DMAEx_List_Init+0x1dc>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	f000 8099 	beq.w	8005412 <HAL_DMAEx_List_Init+0x162>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a6a      	ldr	r2, [pc, #424]	@ (8005490 <HAL_DMAEx_List_Init+0x1e0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	f000 8093 	beq.w	8005412 <HAL_DMAEx_List_Init+0x162>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a68      	ldr	r2, [pc, #416]	@ (8005494 <HAL_DMAEx_List_Init+0x1e4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	f000 808d 	beq.w	8005412 <HAL_DMAEx_List_Init+0x162>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a66      	ldr	r2, [pc, #408]	@ (8005498 <HAL_DMAEx_List_Init+0x1e8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	f000 8087 	beq.w	8005412 <HAL_DMAEx_List_Init+0x162>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a64      	ldr	r2, [pc, #400]	@ (800549c <HAL_DMAEx_List_Init+0x1ec>)
 800530a:	4293      	cmp	r3, r2
 800530c:	f000 8081 	beq.w	8005412 <HAL_DMAEx_List_Init+0x162>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a62      	ldr	r2, [pc, #392]	@ (80054a0 <HAL_DMAEx_List_Init+0x1f0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d07b      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a61      	ldr	r2, [pc, #388]	@ (80054a4 <HAL_DMAEx_List_Init+0x1f4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d076      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a5f      	ldr	r2, [pc, #380]	@ (80054a8 <HAL_DMAEx_List_Init+0x1f8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d071      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a5e      	ldr	r2, [pc, #376]	@ (80054ac <HAL_DMAEx_List_Init+0x1fc>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d06c      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a5c      	ldr	r2, [pc, #368]	@ (80054b0 <HAL_DMAEx_List_Init+0x200>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d067      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a5b      	ldr	r2, [pc, #364]	@ (80054b4 <HAL_DMAEx_List_Init+0x204>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d062      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a59      	ldr	r2, [pc, #356]	@ (80054b8 <HAL_DMAEx_List_Init+0x208>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d05d      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a58      	ldr	r2, [pc, #352]	@ (80054bc <HAL_DMAEx_List_Init+0x20c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d058      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a56      	ldr	r2, [pc, #344]	@ (80054c0 <HAL_DMAEx_List_Init+0x210>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d053      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a55      	ldr	r2, [pc, #340]	@ (80054c4 <HAL_DMAEx_List_Init+0x214>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d04e      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a53      	ldr	r2, [pc, #332]	@ (80054c8 <HAL_DMAEx_List_Init+0x218>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d049      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a52      	ldr	r2, [pc, #328]	@ (80054cc <HAL_DMAEx_List_Init+0x21c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d044      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a50      	ldr	r2, [pc, #320]	@ (80054d0 <HAL_DMAEx_List_Init+0x220>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d03f      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a4f      	ldr	r2, [pc, #316]	@ (80054d4 <HAL_DMAEx_List_Init+0x224>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d03a      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a4d      	ldr	r2, [pc, #308]	@ (80054d8 <HAL_DMAEx_List_Init+0x228>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d035      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a4c      	ldr	r2, [pc, #304]	@ (80054dc <HAL_DMAEx_List_Init+0x22c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d030      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a4a      	ldr	r2, [pc, #296]	@ (80054e0 <HAL_DMAEx_List_Init+0x230>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d02b      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a49      	ldr	r2, [pc, #292]	@ (80054e4 <HAL_DMAEx_List_Init+0x234>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d026      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a47      	ldr	r2, [pc, #284]	@ (80054e8 <HAL_DMAEx_List_Init+0x238>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d021      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a46      	ldr	r2, [pc, #280]	@ (80054ec <HAL_DMAEx_List_Init+0x23c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d01c      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a44      	ldr	r2, [pc, #272]	@ (80054f0 <HAL_DMAEx_List_Init+0x240>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d017      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a43      	ldr	r2, [pc, #268]	@ (80054f4 <HAL_DMAEx_List_Init+0x244>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d012      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a41      	ldr	r2, [pc, #260]	@ (80054f8 <HAL_DMAEx_List_Init+0x248>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00d      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a40      	ldr	r2, [pc, #256]	@ (80054fc <HAL_DMAEx_List_Init+0x24c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d008      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a3e      	ldr	r2, [pc, #248]	@ (8005500 <HAL_DMAEx_List_Init+0x250>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d003      	beq.n	8005412 <HAL_DMAEx_List_Init+0x162>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a3d      	ldr	r2, [pc, #244]	@ (8005504 <HAL_DMAEx_List_Init+0x254>)
 8005410:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2202      	movs	r2, #2
 800541e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695a      	ldr	r2, [r3, #20]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 0206 	orr.w	r2, r2, #6
 8005430:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005432:	e00f      	b.n	8005454 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005434:	f7fc fe9c 	bl	8002170 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b05      	cmp	r3, #5
 8005440:	d908      	bls.n	8005454 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2210      	movs	r2, #16
 8005446:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2203      	movs	r2, #3
 800544c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e015      	b.n	8005480 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e8      	bne.n	8005434 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fad0 	bl	8005a08 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40020050 	.word	0x40020050
 800548c:	50020050 	.word	0x50020050
 8005490:	400200d0 	.word	0x400200d0
 8005494:	500200d0 	.word	0x500200d0
 8005498:	40020150 	.word	0x40020150
 800549c:	50020150 	.word	0x50020150
 80054a0:	400201d0 	.word	0x400201d0
 80054a4:	500201d0 	.word	0x500201d0
 80054a8:	40020250 	.word	0x40020250
 80054ac:	50020250 	.word	0x50020250
 80054b0:	400202d0 	.word	0x400202d0
 80054b4:	500202d0 	.word	0x500202d0
 80054b8:	40020350 	.word	0x40020350
 80054bc:	50020350 	.word	0x50020350
 80054c0:	400203d0 	.word	0x400203d0
 80054c4:	500203d0 	.word	0x500203d0
 80054c8:	40020450 	.word	0x40020450
 80054cc:	50020450 	.word	0x50020450
 80054d0:	400204d0 	.word	0x400204d0
 80054d4:	500204d0 	.word	0x500204d0
 80054d8:	40020550 	.word	0x40020550
 80054dc:	50020550 	.word	0x50020550
 80054e0:	400205d0 	.word	0x400205d0
 80054e4:	500205d0 	.word	0x500205d0
 80054e8:	40020650 	.word	0x40020650
 80054ec:	50020650 	.word	0x50020650
 80054f0:	400206d0 	.word	0x400206d0
 80054f4:	500206d0 	.word	0x500206d0
 80054f8:	40020750 	.word	0x40020750
 80054fc:	50020750 	.word	0x50020750
 8005500:	400207d0 	.word	0x400207d0
 8005504:	500207d0 	.word	0x500207d0

08005508 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_DMAEx_List_Start_IT+0x16>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e082      	b.n	8005628 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005528:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005534:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8005536:	7dfb      	ldrb	r3, [r7, #23]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d005      	beq.n	8005548 <HAL_DMAEx_List_Start_IT+0x40>
 800553c:	7dfb      	ldrb	r3, [r7, #23]
 800553e:	2b02      	cmp	r3, #2
 8005540:	d16a      	bne.n	8005618 <HAL_DMAEx_List_Start_IT+0x110>
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d067      	beq.n	8005618 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b01      	cmp	r3, #1
 8005552:	d157      	bne.n	8005604 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_DMAEx_List_Start_IT+0x5a>
 800555e:	2302      	movs	r3, #2
 8005560:	e062      	b.n	8005628 <HAL_DMAEx_List_Start_IT+0x120>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2202      	movs	r2, #2
 800556e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005576:	2202      	movs	r2, #2
 8005578:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005584:	2200      	movs	r2, #0
 8005586:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695a      	ldr	r2, [r3, #20]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8005596:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800559c:	2b00      	cmp	r3, #0
 800559e:	d007      	beq.n	80055b0 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695a      	ldr	r2, [r3, #20]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ae:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695a      	ldr	r2, [r3, #20]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055c6:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f107 010c 	add.w	r1, r7, #12
 80055d2:	2200      	movs	r2, #0
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fe37 	bl	8006248 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4619      	mov	r1, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	0c0b      	lsrs	r3, r1, #16
 80055e8:	041b      	lsls	r3, r3, #16
 80055ea:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	461a      	mov	r2, r3
 80055f4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80055f8:	4013      	ands	r3, r2
 80055fa:	68f9      	ldr	r1, [r7, #12]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	430b      	orrs	r3, r1
 8005602:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695a      	ldr	r2, [r3, #20]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	e007      	b.n	8005628 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2240      	movs	r2, #64	@ 0x40
 800561c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <HAL_DMAEx_List_BuildNode+0x16>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e004      	b.n	8005654 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800564a:	6839      	ldr	r1, [r7, #0]
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fb33 	bl	8005cb8 <DMA_List_BuildNode>

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <HAL_DMAEx_List_GetNodeConfig+0x16>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e004      	b.n	8005680 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fc6f 	bl	8005f5c <DMA_List_GetNodeConfig>

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08c      	sub	sp, #48	@ 0x30
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_DMAEx_List_InsertNode+0x18>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0b6      	b.n	8005812 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d104      	bne.n	80056b6 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2204      	movs	r2, #4
 80056b0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e0ad      	b.n	8005812 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	68b9      	ldr	r1, [r7, #8]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fd56 	bl	8006170 <DMA_List_CheckNodesBaseAddresses>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d004      	beq.n	80056d4 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2205      	movs	r2, #5
 80056ce:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e09e      	b.n	8005812 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 fd77 	bl	80061d0 <DMA_List_CheckNodesTypes>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2204      	movs	r2, #4
 80056ec:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e08f      	b.n	8005812 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2202      	movs	r2, #2
 80056f6:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80056fe:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005702:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fd9d 	bl	8006248 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d11a      	bne.n	800574c <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d106      	bne.n	800572a <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	609a      	str	r2, [r3, #8]
 8005728:	e06c      	b.n	8005804 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005736:	4013      	ands	r3, r2
 8005738:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800573a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800573c:	4319      	orrs	r1, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2202      	movs	r2, #2
 8005748:	609a      	str	r2, [r3, #8]
 800574a:	e05b      	b.n	8005804 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10f      	bne.n	8005772 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800575c:	4013      	ands	r3, r2
 800575e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005760:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005762:	4319      	orrs	r1, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	e043      	b.n	80057fa <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8005772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005774:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8005776:	f107 0314 	add.w	r3, r7, #20
 800577a:	461a      	mov	r2, r3
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 fd92 	bl	80062a8 <DMA_List_FindNode>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d132      	bne.n	80057f0 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 800578a:	69fa      	ldr	r2, [r7, #28]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	429a      	cmp	r2, r3
 8005792:	d11a      	bne.n	80057ca <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00b      	beq.n	80057b4 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	461a      	mov	r2, r3
 80057a2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80057a6:	4013      	ands	r3, r2
 80057a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057ac:	4319      	orrs	r1, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80057ba:	4013      	ands	r3, r2
 80057bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057c0:	4319      	orrs	r1, r3
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80057c8:	e017      	b.n	80057fa <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 80057ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80057e0:	4013      	ands	r3, r2
 80057e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057e6:	4319      	orrs	r1, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80057ee:	e004      	b.n	80057fa <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2206      	movs	r2, #6
 80057f4:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e00b      	b.n	8005812 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3730      	adds	r7, #48	@ 0x30
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b08a      	sub	sp, #40	@ 0x28
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e052      	b.n	80058d2 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d104      	bne.n	800583e <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e049      	b.n	80058d2 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00c      	beq.n	8005860 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d101      	bne.n	8005856 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	e03d      	b.n	80058d2 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2204      	movs	r2, #4
 800585a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e038      	b.n	80058d2 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d104      	bne.n	8005872 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2204      	movs	r2, #4
 800586c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e02f      	b.n	80058d2 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2202      	movs	r2, #2
 8005876:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f107 0220 	add.w	r2, r7, #32
 8005886:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fcdc 	bl	8006248 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8005894:	f107 030c 	add.w	r3, r7, #12
 8005898:	461a      	mov	r2, r3
 800589a:	2100      	movs	r1, #0
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fd03 	bl	80062a8 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80058ac:	4013      	ands	r3, r2
 80058ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	4610      	mov	r0, r2
 80058b4:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80058b6:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80058b8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3728      	adds	r7, #40	@ 0x28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <HAL_DMAEx_List_LinkQ+0x16>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e072      	b.n	80059dc <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80058fc:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d002      	beq.n	8005910 <HAL_DMAEx_List_LinkQ+0x34>
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	2b05      	cmp	r3, #5
 800590e:	d108      	bne.n	8005922 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2240      	movs	r2, #64	@ 0x40
 8005914:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e05c      	b.n	80059dc <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	7b1b      	ldrb	r3, [r3, #12]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d104      	bne.n	8005936 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2201      	movs	r2, #1
 8005930:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e052      	b.n	80059dc <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a2b      	ldr	r2, [pc, #172]	@ (80059e8 <HAL_DMAEx_List_LinkQ+0x10c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d022      	beq.n	8005986 <HAL_DMAEx_List_LinkQ+0xaa>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a29      	ldr	r2, [pc, #164]	@ (80059ec <HAL_DMAEx_List_LinkQ+0x110>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d01d      	beq.n	8005986 <HAL_DMAEx_List_LinkQ+0xaa>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a28      	ldr	r2, [pc, #160]	@ (80059f0 <HAL_DMAEx_List_LinkQ+0x114>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d018      	beq.n	8005986 <HAL_DMAEx_List_LinkQ+0xaa>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a26      	ldr	r2, [pc, #152]	@ (80059f4 <HAL_DMAEx_List_LinkQ+0x118>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d013      	beq.n	8005986 <HAL_DMAEx_List_LinkQ+0xaa>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a25      	ldr	r2, [pc, #148]	@ (80059f8 <HAL_DMAEx_List_LinkQ+0x11c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d00e      	beq.n	8005986 <HAL_DMAEx_List_LinkQ+0xaa>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a23      	ldr	r2, [pc, #140]	@ (80059fc <HAL_DMAEx_List_LinkQ+0x120>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d009      	beq.n	8005986 <HAL_DMAEx_List_LinkQ+0xaa>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a22      	ldr	r2, [pc, #136]	@ (8005a00 <HAL_DMAEx_List_LinkQ+0x124>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d004      	beq.n	8005986 <HAL_DMAEx_List_LinkQ+0xaa>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a20      	ldr	r2, [pc, #128]	@ (8005a04 <HAL_DMAEx_List_LinkQ+0x128>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d101      	bne.n	800598a <HAL_DMAEx_List_LinkQ+0xae>
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <HAL_DMAEx_List_LinkQ+0xb0>
 800598a:	2300      	movs	r3, #0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10b      	bne.n	80059a8 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800599a:	2b00      	cmp	r3, #0
 800599c:	d004      	beq.n	80059a8 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2203      	movs	r2, #3
 80059a2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e019      	b.n	80059dc <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ac:	2b81      	cmp	r3, #129	@ 0x81
 80059ae:	d108      	bne.n	80059c2 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10d      	bne.n	80059d4 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2204      	movs	r2, #4
 80059bc:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e00c      	b.n	80059dc <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d004      	beq.n	80059d4 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2204      	movs	r2, #4
 80059ce:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e003      	b.n	80059dc <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	40020650 	.word	0x40020650
 80059ec:	50020650 	.word	0x50020650
 80059f0:	400206d0 	.word	0x400206d0
 80059f4:	500206d0 	.word	0x500206d0
 80059f8:	40020750 	.word	0x40020750
 80059fc:	50020750 	.word	0x50020750
 8005a00:	400207d0 	.word	0x400207d0
 8005a04:	500207d0 	.word	0x500207d0

08005a08 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a85      	ldr	r2, [pc, #532]	@ (8005c38 <DMA_List_Init+0x230>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	f000 80a0 	beq.w	8005b68 <DMA_List_Init+0x160>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a83      	ldr	r2, [pc, #524]	@ (8005c3c <DMA_List_Init+0x234>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	f000 809a 	beq.w	8005b68 <DMA_List_Init+0x160>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a81      	ldr	r2, [pc, #516]	@ (8005c40 <DMA_List_Init+0x238>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	f000 8094 	beq.w	8005b68 <DMA_List_Init+0x160>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a7f      	ldr	r2, [pc, #508]	@ (8005c44 <DMA_List_Init+0x23c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	f000 808e 	beq.w	8005b68 <DMA_List_Init+0x160>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a7d      	ldr	r2, [pc, #500]	@ (8005c48 <DMA_List_Init+0x240>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	f000 8088 	beq.w	8005b68 <DMA_List_Init+0x160>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a7b      	ldr	r2, [pc, #492]	@ (8005c4c <DMA_List_Init+0x244>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	f000 8082 	beq.w	8005b68 <DMA_List_Init+0x160>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a79      	ldr	r2, [pc, #484]	@ (8005c50 <DMA_List_Init+0x248>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d07c      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a78      	ldr	r2, [pc, #480]	@ (8005c54 <DMA_List_Init+0x24c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d077      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a76      	ldr	r2, [pc, #472]	@ (8005c58 <DMA_List_Init+0x250>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d072      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a75      	ldr	r2, [pc, #468]	@ (8005c5c <DMA_List_Init+0x254>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d06d      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a73      	ldr	r2, [pc, #460]	@ (8005c60 <DMA_List_Init+0x258>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d068      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a72      	ldr	r2, [pc, #456]	@ (8005c64 <DMA_List_Init+0x25c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d063      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a70      	ldr	r2, [pc, #448]	@ (8005c68 <DMA_List_Init+0x260>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d05e      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a6f      	ldr	r2, [pc, #444]	@ (8005c6c <DMA_List_Init+0x264>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d059      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a6d      	ldr	r2, [pc, #436]	@ (8005c70 <DMA_List_Init+0x268>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d054      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a6c      	ldr	r2, [pc, #432]	@ (8005c74 <DMA_List_Init+0x26c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d04f      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a6a      	ldr	r2, [pc, #424]	@ (8005c78 <DMA_List_Init+0x270>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d04a      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a69      	ldr	r2, [pc, #420]	@ (8005c7c <DMA_List_Init+0x274>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d045      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a67      	ldr	r2, [pc, #412]	@ (8005c80 <DMA_List_Init+0x278>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d040      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a66      	ldr	r2, [pc, #408]	@ (8005c84 <DMA_List_Init+0x27c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d03b      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a64      	ldr	r2, [pc, #400]	@ (8005c88 <DMA_List_Init+0x280>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d036      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a63      	ldr	r2, [pc, #396]	@ (8005c8c <DMA_List_Init+0x284>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d031      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a61      	ldr	r2, [pc, #388]	@ (8005c90 <DMA_List_Init+0x288>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d02c      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a60      	ldr	r2, [pc, #384]	@ (8005c94 <DMA_List_Init+0x28c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d027      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a5e      	ldr	r2, [pc, #376]	@ (8005c98 <DMA_List_Init+0x290>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d022      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a5d      	ldr	r2, [pc, #372]	@ (8005c9c <DMA_List_Init+0x294>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d01d      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a5b      	ldr	r2, [pc, #364]	@ (8005ca0 <DMA_List_Init+0x298>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d018      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a5a      	ldr	r2, [pc, #360]	@ (8005ca4 <DMA_List_Init+0x29c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d013      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a58      	ldr	r2, [pc, #352]	@ (8005ca8 <DMA_List_Init+0x2a0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00e      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a57      	ldr	r2, [pc, #348]	@ (8005cac <DMA_List_Init+0x2a4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d009      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a55      	ldr	r2, [pc, #340]	@ (8005cb0 <DMA_List_Init+0x2a8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d004      	beq.n	8005b68 <DMA_List_Init+0x160>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a54      	ldr	r2, [pc, #336]	@ (8005cb4 <DMA_List_Init+0x2ac>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d101      	bne.n	8005b6c <DMA_List_Init+0x164>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e000      	b.n	8005b6e <DMA_List_Init+0x166>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2200      	movs	r2, #0
 8005b96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005ba0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a36      	ldr	r2, [pc, #216]	@ (8005c98 <DMA_List_Init+0x290>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d022      	beq.n	8005c0a <DMA_List_Init+0x202>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a34      	ldr	r2, [pc, #208]	@ (8005c9c <DMA_List_Init+0x294>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d01d      	beq.n	8005c0a <DMA_List_Init+0x202>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a33      	ldr	r2, [pc, #204]	@ (8005ca0 <DMA_List_Init+0x298>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d018      	beq.n	8005c0a <DMA_List_Init+0x202>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a31      	ldr	r2, [pc, #196]	@ (8005ca4 <DMA_List_Init+0x29c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d013      	beq.n	8005c0a <DMA_List_Init+0x202>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a30      	ldr	r2, [pc, #192]	@ (8005ca8 <DMA_List_Init+0x2a0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00e      	beq.n	8005c0a <DMA_List_Init+0x202>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8005cac <DMA_List_Init+0x2a4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d009      	beq.n	8005c0a <DMA_List_Init+0x202>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a2d      	ldr	r2, [pc, #180]	@ (8005cb0 <DMA_List_Init+0x2a8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d004      	beq.n	8005c0a <DMA_List_Init+0x202>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a2b      	ldr	r2, [pc, #172]	@ (8005cb4 <DMA_List_Init+0x2ac>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d101      	bne.n	8005c0e <DMA_List_Init+0x206>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <DMA_List_Init+0x208>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d007      	beq.n	8005c24 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2200      	movs	r2, #0
 8005c22:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005c2c:	bf00      	nop
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	40020050 	.word	0x40020050
 8005c3c:	50020050 	.word	0x50020050
 8005c40:	400200d0 	.word	0x400200d0
 8005c44:	500200d0 	.word	0x500200d0
 8005c48:	40020150 	.word	0x40020150
 8005c4c:	50020150 	.word	0x50020150
 8005c50:	400201d0 	.word	0x400201d0
 8005c54:	500201d0 	.word	0x500201d0
 8005c58:	40020250 	.word	0x40020250
 8005c5c:	50020250 	.word	0x50020250
 8005c60:	400202d0 	.word	0x400202d0
 8005c64:	500202d0 	.word	0x500202d0
 8005c68:	40020350 	.word	0x40020350
 8005c6c:	50020350 	.word	0x50020350
 8005c70:	400203d0 	.word	0x400203d0
 8005c74:	500203d0 	.word	0x500203d0
 8005c78:	40020450 	.word	0x40020450
 8005c7c:	50020450 	.word	0x50020450
 8005c80:	400204d0 	.word	0x400204d0
 8005c84:	500204d0 	.word	0x500204d0
 8005c88:	40020550 	.word	0x40020550
 8005c8c:	50020550 	.word	0x50020550
 8005c90:	400205d0 	.word	0x400205d0
 8005c94:	500205d0 	.word	0x500205d0
 8005c98:	40020650 	.word	0x40020650
 8005c9c:	50020650 	.word	0x50020650
 8005ca0:	400206d0 	.word	0x400206d0
 8005ca4:	500206d0 	.word	0x500206d0
 8005ca8:	40020750 	.word	0x40020750
 8005cac:	50020750 	.word	0x50020750
 8005cb0:	400207d0 	.word	0x400207d0
 8005cb4:	500207d0 	.word	0x500207d0

08005cb8 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005cca:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8005cd0:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8005cd6:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8005cdc:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d017      	beq.n	8005d1e <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfa:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d00:	3b01      	subs	r3, #1
 8005d02:	051b      	lsls	r3, r3, #20
 8005d04:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8005d08:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8005d16:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6859      	ldr	r1, [r3, #4]
 8005d26:	f240 237f 	movw	r3, #639	@ 0x27f
 8005d2a:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d3a:	d10c      	bne.n	8005d56 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0320 	and.w	r3, r3, #32
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d011      	beq.n	8005d6c <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	605a      	str	r2, [r3, #4]
 8005d54:	e00a      	b.n	8005d6c <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d5e:	d105      	bne.n	8005d6c <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00f      	beq.n	8005d94 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d80:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005d8c:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d04e      	beq.n	8005e48 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005db2:	3b01      	subs	r3, #1
 8005db4:	0419      	lsls	r1, r3, #16
 8005db6:	4b67      	ldr	r3, [pc, #412]	@ (8005f54 <DMA_List_BuildNode+0x29c>)
 8005db8:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	da06      	bge.n	8005dd6 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	609a      	str	r2, [r3, #8]
 8005dd4:	e005      	b.n	8005de2 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	da06      	bge.n	8005df8 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	609a      	str	r2, [r3, #8]
 8005df6:	e005      	b.n	8005e04 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	da06      	bge.n	8005e1a <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	609a      	str	r2, [r3, #8]
 8005e18:	e005      	b.n	8005e26 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	da06      	bge.n	8005e3c <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	609a      	str	r2, [r3, #8]
 8005e3a:	e005      	b.n	8005e48 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d059      	beq.n	8005f18 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	da09      	bge.n	8005e80 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e70:	425b      	negs	r3, r3
 8005e72:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	615a      	str	r2, [r3, #20]
 8005e7e:	e005      	b.n	8005e8c <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e84:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	da0d      	bge.n	8005eb0 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e98:	425b      	negs	r3, r3
 8005e9a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	695a      	ldr	r2, [r3, #20]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	0419      	lsls	r1, r3, #16
 8005ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8005f58 <DMA_List_BuildNode+0x2a0>)
 8005ea6:	400b      	ands	r3, r1
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	615a      	str	r2, [r3, #20]
 8005eae:	e009      	b.n	8005ec4 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb8:	0419      	lsls	r1, r3, #16
 8005eba:	4b27      	ldr	r3, [pc, #156]	@ (8005f58 <DMA_List_BuildNode+0x2a0>)
 8005ebc:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	da08      	bge.n	8005ede <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ed0:	425b      	negs	r3, r3
 8005ed2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	619a      	str	r2, [r3, #24]
 8005edc:	e004      	b.n	8005ee8 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee2:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	da0b      	bge.n	8005f08 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ef4:	425b      	negs	r3, r3
 8005ef6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005f00:	431a      	orrs	r2, r3
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	619a      	str	r2, [r3, #24]
 8005f06:	e007      	b.n	8005f18 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f10:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005f12:	431a      	orrs	r2, r3
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d006      	beq.n	8005f3a <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8005f38:	e005      	b.n	8005f46 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	621a      	str	r2, [r3, #32]
}
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	07ff0000 	.word	0x07ff0000
 8005f58:	1fff0000 	.word	0x1fff0000

08005f5c <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0208 	and.w	r2, r3, #8
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0203 	and.w	r2, r3, #3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8005fa4:	091b      	lsrs	r3, r3, #4
 8005fa6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005faa:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8005fb4:	0d1b      	lsrs	r3, r3, #20
 8005fb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fba:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	4b66      	ldr	r3, [pc, #408]	@ (800616c <DMA_List_GetNodeConfig+0x210>)
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d008      	beq.n	8006002 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ff6:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ffe:	60da      	str	r2, [r3, #12]
 8006000:	e013      	b.n	800602a <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006016:	2b00      	cmp	r3, #0
 8006018:	d004      	beq.n	8006024 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006020:	60da      	str	r2, [r3, #12]
 8006022:	e002      	b.n	800602a <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8006052:	0c1b      	lsrs	r3, r3, #16
 8006054:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	b29a      	uxth	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d008      	beq.n	8006090 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	0c1b      	lsrs	r3, r3, #16
 8006084:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006088:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800608e:	e002      	b.n	8006096 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	691a      	ldr	r2, [r3, #16]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d04a      	beq.n	8006148 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060bc:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 80060be:	89fa      	ldrh	r2, [r7, #14]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	0c1b      	lsrs	r3, r3, #16
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060d0:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 80060d2:	89fa      	ldrh	r2, [r7, #14]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d004      	beq.n	80060ee <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e8:	425a      	negs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d004      	beq.n	8006104 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060fe:	425a      	negs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 800610a:	89fa      	ldrh	r2, [r7, #14]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	0c1b      	lsrs	r3, r3, #16
 8006116:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8006118:	89fa      	ldrh	r2, [r7, #14]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d004      	beq.n	8006134 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800612e:	425a      	negs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	da11      	bge.n	8006160 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006140:	425a      	negs	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8006146:	e00b      	b.n	8006160 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006160:	bf00      	nop
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	0c002000 	.word	0x0c002000

08006170 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	431a      	orrs	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4313      	orrs	r3, r2
 8006186:	0c1b      	lsrs	r3, r3, #16
 8006188:	041b      	lsls	r3, r3, #16
 800618a:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	e00a      	b.n	80061b2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	e004      	b.n	80061b2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	0c1b      	lsrs	r3, r3, #16
 80061b6:	041b      	lsls	r3, r3, #16
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d001      	beq.n	80061c2 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	371c      	adds	r7, #28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d004      	beq.n	80061f0 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	e00e      	b.n	800620e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d004      	beq.n	8006200 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	e006      	b.n	800620e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	b2db      	uxtb	r3, r3
 800620c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	429a      	cmp	r2, r3
 800621e:	d001      	beq.n	8006224 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8006220:	2302      	movs	r3, #2
 8006222:	e00b      	b.n	800623c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d007      	beq.n	800623a <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	b2db      	uxtb	r3, r3
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	429a      	cmp	r2, r3
 8006234:	d001      	beq.n	800623a <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8006236:	2303      	movs	r3, #3
 8006238:	e000      	b.n	800623c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	371c      	adds	r7, #28
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00c      	beq.n	800627a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4a0d      	ldr	r2, [pc, #52]	@ (80062a0 <DMA_List_GetCLLRNodeInfo+0x58>)
 800626a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00f      	beq.n	8006292 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2207      	movs	r2, #7
 8006276:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8006278:	e00b      	b.n	8006292 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4a08      	ldr	r2, [pc, #32]	@ (80062a4 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8006284:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2205      	movs	r2, #5
 8006290:	601a      	str	r2, [r3, #0]
}
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	fe010000 	.word	0xfe010000
 80062a4:	f8010000 	.word	0xf8010000

080062a8 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b089      	sub	sp, #36	@ 0x24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d142      	bne.n	8006352 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80062cc:	e01d      	b.n	800630a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d107      	bne.n	80062e4 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	461a      	mov	r2, r3
 80062da:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80062de:	4013      	ands	r3, r2
 80062e0:	61bb      	str	r3, [r7, #24]
 80062e2:	e00f      	b.n	8006304 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	0c1b      	lsrs	r3, r3, #16
 80062ee:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	4413      	add	r3, r2
 80062f4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80062fc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006300:	4013      	ands	r3, r2
 8006302:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	3301      	adds	r3, #1
 8006308:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	429a      	cmp	r2, r3
 8006312:	d3dc      	bcc.n	80062ce <DMA_List_FindNode+0x26>
 8006314:	e029      	b.n	800636a <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d107      	bne.n	800632c <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006326:	4013      	ands	r3, r2
 8006328:	61bb      	str	r3, [r7, #24]
 800632a:	e00f      	b.n	800634c <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	0c1b      	lsrs	r3, r3, #16
 8006336:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	4413      	add	r3, r2
 800633c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8006344:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006348:	4013      	ands	r3, r2
 800634a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	3301      	adds	r3, #1
 8006350:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	429a      	cmp	r2, r3
 800635a:	d206      	bcs.n	800636a <DMA_List_FindNode+0xc2>
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006362:	4013      	ands	r3, r2
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	429a      	cmp	r2, r3
 8006368:	d1d5      	bne.n	8006316 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d008      	beq.n	8006382 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006376:	4013      	ands	r3, r2
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	429a      	cmp	r2, r3
 800637c:	d001      	beq.n	8006382 <DMA_List_FindNode+0xda>
    {
      return 1U;
 800637e:	2301      	movs	r3, #1
 8006380:	e02b      	b.n	80063da <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69fa      	ldr	r2, [r7, #28]
 8006386:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	0c1b      	lsrs	r3, r3, #16
 800638e:	041b      	lsls	r3, r3, #16
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	0c1b      	lsrs	r3, r3, #16
 800639e:	041b      	lsls	r3, r3, #16
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	461a      	mov	r2, r3
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00f      	beq.n	80063d8 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	461a      	mov	r2, r3
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c4:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80063c8:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	0c1b      	lsrs	r3, r3, #16
 80063d0:	041b      	lsls	r3, r3, #16
 80063d2:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3724      	adds	r7, #36	@ 0x24
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b085      	sub	sp, #20
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	60f8      	str	r0, [r7, #12]
 80063ee:	60b9      	str	r1, [r7, #8]
 80063f0:	607a      	str	r2, [r7, #4]
 80063f2:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	019a      	lsls	r2, r3, #6
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	431a      	orrs	r2, r3
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	021b      	lsls	r3, r3, #8
 8006400:	431a      	orrs	r2, r3
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	041b      	lsls	r3, r3, #16
 8006406:	431a      	orrs	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800640c:	bf00      	nop
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
 8006424:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006426:	f7fb fea3 	bl	8002170 <HAL_GetTick>
 800642a:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800642c:	e008      	b.n	8006440 <DSI_ShortWrite+0x28>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800642e:	f7fb fe9f 	bl	8002170 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b64      	cmp	r3, #100	@ 0x64
 800643a:	d901      	bls.n	8006440 <DSI_ShortWrite+0x28>
    {
      return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e015      	b.n	800646c <DSI_ShortWrite+0x54>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0ef      	beq.n	800642e <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	019a      	lsls	r2, r3, #6
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	431a      	orrs	r2, r3
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	021b      	lsls	r3, r3, #8
 800645a:	ea42 0103 	orr.w	r1, r2, r3
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	041a      	lsls	r2, r3, #16
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 800648c:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	@ 0xc04
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	00da      	lsls	r2, r3, #3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	220e      	movs	r2, #14
 80064ae:	f8c3 2c34 	str.w	r2, [r3, #3124]	@ 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	@ 0xc70
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 021f 	bic.w	r2, r2, #31
 80064c2:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6912      	ldr	r2, [r2, #16]
 80064ce:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	220e      	movs	r2, #14
 80064d8:	f8c3 2ca0 	str.w	r2, [r3, #3232]	@ 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	@ 0xd08
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 021f 	bic.w	r2, r2, #31
 80064ec:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6912      	ldr	r2, [r2, #16]
 80064f8:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	220e      	movs	r2, #14
 8006502:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	@ 0xc5c
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006516:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	@ 0xcf4
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800652a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d007      	beq.n	8006546 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 800653a:	2b02      	cmp	r3, #2
 800653c:	d003      	beq.n	8006546 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8006542:	2b05      	cmp	r3, #5
 8006544:	d10a      	bne.n	800655c <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2200      	movs	r2, #0
 800654c:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2200      	movs	r2, #0
 8006556:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 800655a:	e02c      	b.n	80065b6 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00b      	beq.n	800657c <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8006568:	2b03      	cmp	r3, #3
 800656a:	d007      	beq.n	800657c <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8006570:	2b04      	cmp	r3, #4
 8006572:	d003      	beq.n	800657c <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8006578:	2b06      	cmp	r3, #6
 800657a:	d10a      	bne.n	8006592 <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2210      	movs	r2, #16
 8006582:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2210      	movs	r2, #16
 800658c:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 8006590:	e011      	b.n	80065b6 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b07      	cmp	r3, #7
 8006598:	d003      	beq.n	80065a2 <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 800659e:	2b08      	cmp	r3, #8
 80065a0:	d109      	bne.n	80065b6 <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	@ 0xc60
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 020f 	bic.w	r2, r2, #15
 80065c6:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	@ 0xcf8
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 020f 	bic.w	r2, r2, #15
 80065da:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6952      	ldr	r2, [r2, #20]
 80065e6:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6952      	ldr	r2, [r2, #20]
 80065f2:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800661c:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	075a      	lsls	r2, r3, #29
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f8d3 2434 	ldr.w	r2, [r3, #1076]	@ 0x434
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006648:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	031a      	lsls	r2, r3, #12
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	021a      	lsls	r2, r3, #8
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e124      	b.n	80068e6 <HAL_DSI_Init+0x25e>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	7e5b      	ldrb	r3, [r3, #25]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d102      	bne.n	80066ac <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fb f9b8 	bl	8001a1c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2203      	movs	r2, #3
 80066b0:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066c2:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 80066c6:	2002      	movs	r0, #2
 80066c8:	f7fb fd5e 	bl	8002188 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	4b85      	ldr	r3, [pc, #532]	@ (80068f0 <HAL_DSI_Init+0x268>)
 80066da:	400b      	ands	r3, r1
 80066dc:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80066f4:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80066fc:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8006708:	2300      	movs	r3, #0
 800670a:	613b      	str	r3, [r7, #16]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f042 0201 	orr.w	r2, r2, #1
 800671c:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	613b      	str	r3, [r7, #16]
 800672e:	693b      	ldr	r3, [r7, #16]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8006730:	2001      	movs	r0, #1
 8006732:	f7fb fd29 	bl	8002188 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8006736:	f7fb fd1b 	bl	8002170 <HAL_GetTick>
 800673a:	6178      	str	r0, [r7, #20]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800673c:	e008      	b.n	8006750 <HAL_DSI_Init+0xc8>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800673e:	f7fb fd17 	bl	8002170 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b64      	cmp	r3, #100	@ 0x64
 800674a:	d901      	bls.n	8006750 <HAL_DSI_Init+0xc8>
    {
      return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e0ca      	b.n	80068e6 <HAL_DSI_Init+0x25e>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8006758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800675c:	2b00      	cmp	r3, #0
 800675e:	d0ee      	beq.n	800673e <HAL_DSI_Init+0xb6>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0201 	orr.w	r2, r2, #1
 8006772:	605a      	str	r2, [r3, #4]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	68fb      	ldr	r3, [r7, #12]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006790:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6899      	ldr	r1, [r3, #8]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f042 0202 	orr.w	r2, r2, #2
 80067b4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7ff fe5b 	bl	8006474 <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7ff ff1e 	bl	8006602 <DSI_SetWrapperPLLTuning>

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0204 	orr.w	r2, r2, #4
 80067d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 0203 	bic.w	r2, r2, #3
 80067ea:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8006804:	f7fb fcb4 	bl	8002170 <HAL_GetTick>
 8006808:	6178      	str	r0, [r7, #20]
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d121      	bne.n	800685e <HAL_DSI_Init+0x1d6>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800681a:	e00b      	b.n	8006834 <HAL_DSI_Init+0x1ac>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800681c:	f7fb fca8 	bl	8002170 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b64      	cmp	r3, #100	@ 0x64
 8006828:	d904      	bls.n	8006834 <HAL_DSI_Init+0x1ac>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e058      	b.n	80068e6 <HAL_DSI_Init+0x25e>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800683c:	f003 0314 	and.w	r3, r3, #20
 8006840:	2b14      	cmp	r3, #20
 8006842:	d1eb      	bne.n	800681c <HAL_DSI_Init+0x194>
 8006844:	e013      	b.n	800686e <HAL_DSI_Init+0x1e6>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006846:	f7fb fc93 	bl	8002170 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b64      	cmp	r3, #100	@ 0x64
 8006852:	d904      	bls.n	800685e <HAL_DSI_Init+0x1d6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e043      	b.n	80068e6 <HAL_DSI_Init+0x25e>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006866:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 800686a:	2b94      	cmp	r3, #148	@ 0x94
 800686c:	d1eb      	bne.n	8006846 <HAL_DSI_Init+0x1be>


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2200      	movs	r2, #0
 800687e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	621a      	str	r2, [r3, #32]

  __HAL_DSI_DISABLE(hdsi);
 8006888:	2300      	movs	r3, #0
 800688a:	60bb      	str	r3, [r7, #8]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f022 0201 	bic.w	r2, r2, #1
 800689a:	605a      	str	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	60bb      	str	r3, [r7, #8]
 80068a8:	68bb      	ldr	r3, [r7, #8]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0203 	bic.w	r2, r2, #3
 80068ba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	431a      	orrs	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f042 0201 	orr.w	r2, r2, #1
 80068d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3718      	adds	r7, #24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	e0000003 	.word	0xe0000003

080068f4 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	7e1b      	ldrb	r3, [r3, #24]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d101      	bne.n	800690a <HAL_DSI_ConfigErrorMonitor+0x16>
 8006906:	2302      	movs	r3, #2
 8006908:	e0ba      	b.n	8006a80 <HAL_DSI_ConfigErrorMonitor+0x18c>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2200      	movs	r2, #0
 8006916:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2200      	movs	r2, #0
 8006920:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00b      	beq.n	800694c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6812      	ldr	r2, [r2, #0]
 8006940:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8006944:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8006948:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d009      	beq.n	800696a <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 8006966:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b00      	cmp	r3, #0
 8006972:	d009      	beq.n	8006988 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f042 0201 	orr.w	r2, r2, #1
 8006984:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	f003 0308 	and.w	r3, r3, #8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d009      	beq.n	80069a6 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0202 	orr.w	r2, r2, #2
 80069a2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	f003 0310 	and.w	r3, r3, #16
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d009      	beq.n	80069c4 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f042 020c 	orr.w	r2, r2, #12
 80069c0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d009      	beq.n	80069e2 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0210 	orr.w	r2, r2, #16
 80069de:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d009      	beq.n	8006a00 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f042 0220 	orr.w	r2, r2, #32
 80069fc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d009      	beq.n	8006a1e <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a1a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d009      	beq.n	8006a3c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006a38:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d009      	beq.n	8006a5a <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8006a56:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d009      	beq.n	8006a78 <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8006a74:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00f      	beq.n	8006ac4 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d007      	beq.n	8006ac4 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f8b8 	bl	8006c34 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00f      	beq.n	8006af4 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d007      	beq.n	8006af4 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f8aa 	bl	8006c48 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 8097 	beq.w	8006c2c <HAL_DSI_IRQHandler+0x1a0>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006b06:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4013      	ands	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006b1e:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	f043 0201 	orr.w	r2, r3, #1
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d005      	beq.n	8006b58 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	f043 0202 	orr.w	r2, r3, #2
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d005      	beq.n	8006b6e <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	f043 0204 	orr.w	r2, r3, #4
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	f043 0208 	orr.w	r2, r3, #8
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f003 030c 	and.w	r3, r3, #12
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d005      	beq.n	8006b9a <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	f043 0210 	orr.w	r2, r3, #16
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f003 0310 	and.w	r3, r3, #16
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d005      	beq.n	8006bb0 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	f043 0220 	orr.w	r2, r3, #32
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d005      	beq.n	8006bc6 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d005      	beq.n	8006c08 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PBU_MASK) != 0U)
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d005      	beq.n	8006c1e <HAL_DSI_IRQHandler+0x192>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PBU;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	61da      	str	r2, [r3, #28]
    }
    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d002      	beq.n	8006c2c <HAL_DSI_IRQHandler+0x1a0>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f818 	bl	8006c5c <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8006c2c:	bf00      	nop
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	7e1b      	ldrb	r3, [r3, #24]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d101      	bne.n	8006c86 <HAL_DSI_SetGenericVCID+0x16>
 8006c82:	2302      	movs	r3, #2
 8006c84:	e019      	b.n	8006cba <HAL_DSI_SetGenericVCID+0x4a>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 1203 	bic.w	r2, r2, #196611	@ 0x30003
 8006c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b083      	sub	sp, #12
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	7e1b      	ldrb	r3, [r3, #24]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e0c5      	b.n	8006e68 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0201 	orr.w	r2, r2, #1
 8006cf0:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0201 	bic.w	r2, r2, #1
 8006d02:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0201 	orr.w	r2, r2, #1
 8006d16:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68da      	ldr	r2, [r3, #12]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 0203 	bic.w	r2, r2, #3
 8006d28:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68d9      	ldr	r1, [r3, #12]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	695a      	ldr	r2, [r3, #20]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0207 	bic.w	r2, r2, #7
 8006d4a:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6959      	ldr	r1, [r3, #20]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	69da      	ldr	r2, [r3, #28]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	691a      	ldr	r2, [r3, #16]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 020f 	bic.w	r2, r2, #15
 8006d78:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6919      	ldr	r1, [r3, #16]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 020e 	bic.w	r2, r2, #14
 8006d9c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	005a      	lsls	r2, r3, #1
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	6812      	ldr	r2, [r2, #0]
 8006dc2:	0c1b      	lsrs	r3, r3, #16
 8006dc4:	041b      	lsls	r3, r3, #16
 8006dc6:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	689a      	ldr	r2, [r3, #8]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006dea:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e04:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0201 	bic.w	r2, r2, #1
 8006e24:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f042 0201 	orr.w	r2, r2, #1
 8006e48:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f042 0202 	orr.w	r2, r2, #2
 8006e5c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	7e1b      	ldrb	r3, [r3, #24]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d101      	bne.n	8006e8a <HAL_DSI_ConfigCommand+0x16>
 8006e86:	2302      	movs	r3, #2
 8006e88:	e049      	b.n	8006f1e <HAL_DSI_ConfigCommand+0xaa>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	4b24      	ldr	r3, [pc, #144]	@ (8006f2c <HAL_DSI_ConfigCommand+0xb8>)
 8006e9c:	400b      	ands	r3, r1
 8006e9e:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006eae:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8006eb4:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8006eba:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8006ec0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8006ec6:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8006ecc:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8006ed2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8006ed8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8006ede:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8006ee4:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8006eea:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0202 	bic.w	r2, r2, #2
 8006f02:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	fef080ff 	.word	0xfef080ff

08006f30 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	7e1b      	ldrb	r3, [r3, #24]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d101      	bne.n	8006f46 <HAL_DSI_ConfigFlowControl+0x16>
 8006f42:	2302      	movs	r3, #2
 8006f44:	e016      	b.n	8006f74 <HAL_DSI_ConfigFlowControl+0x44>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8006f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	7e1b      	ldrb	r3, [r3, #24]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_DSI_ConfigPhyTimer+0x16>
 8006f92:	2302      	movs	r3, #2
 8006f94:	e084      	b.n	80070a0 <HAL_DSI_ConfigPhyTimer+0x120>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	441a      	add	r2, r3
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6859      	ldr	r1, [r3, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	695a      	ldr	r2, [r3, #20]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	005b      	lsls	r3, r3, #1
 8006fb6:	4413      	add	r3, r2
 8006fb8:	18ca      	adds	r2, r1, r3
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	441a      	add	r2, r3
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	bf38      	it	cc
 8006fda:	4613      	movcc	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8006fee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	041a      	lsls	r2, r3, #16
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	431a      	orrs	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 800701c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	68da      	ldr	r2, [r3, #12]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	041b      	lsls	r3, r3, #16
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	6812      	ldr	r2, [r2, #0]
 800704a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800704e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007052:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	691a      	ldr	r2, [r3, #16]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800707c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	021a      	lsls	r2, r3, #8
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	7e1b      	ldrb	r3, [r3, #24]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d101      	bne.n	80070c2 <HAL_DSI_ConfigHostTimeouts+0x16>
 80070be:	2302      	movs	r3, #2
 80070c0:	e0b4      	b.n	800722c <HAL_DSI_ConfigHostTimeouts+0x180>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689a      	ldr	r2, [r3, #8]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80070d6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6899      	ldr	r1, [r3, #8]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	021a      	lsls	r2, r3, #8
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	430a      	orrs	r2, r1
 80070ea:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	b292      	uxth	r2, r2
 80070f8:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	041a      	lsls	r2, r3, #16
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6812      	ldr	r2, [r2, #0]
 8007118:	0c1b      	lsrs	r3, r3, #16
 800711a:	041b      	lsls	r3, r3, #16
 800711c:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	6812      	ldr	r2, [r2, #0]
 800713a:	0c1b      	lsrs	r3, r3, #16
 800713c:	041b      	lsls	r3, r3, #16
 800713e:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	6812      	ldr	r2, [r2, #0]
 800715e:	0c1b      	lsrs	r3, r3, #16
 8007160:	041b      	lsls	r3, r3, #16
 8007162:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	691a      	ldr	r2, [r3, #16]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6812      	ldr	r2, [r2, #0]
 8007188:	0c1b      	lsrs	r3, r3, #16
 800718a:	041b      	lsls	r3, r3, #16
 800718c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	695a      	ldr	r2, [r3, #20]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80071b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	699a      	ldr	r2, [r3, #24]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	0c1b      	lsrs	r3, r3, #16
 80071de:	041b      	lsls	r3, r3, #16
 80071e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	69da      	ldr	r2, [r3, #28]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	6812      	ldr	r2, [r2, #0]
 8007206:	0c1b      	lsrs	r3, r3, #16
 8007208:	041b      	lsls	r3, r3, #16
 800720a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	6a1a      	ldr	r2, [r3, #32]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	7e1b      	ldrb	r3, [r3, #24]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <HAL_DSI_Start+0x14>
 8007248:	2302      	movs	r3, #2
 800724a:	e02b      	b.n	80072a4 <HAL_DSI_Start+0x6c>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	761a      	strb	r2, [r3, #24]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8007252:	2300      	movs	r3, #0
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f042 0201 	orr.w	r2, r2, #1
 8007264:	605a      	str	r2, [r3, #4]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8007274:	2300      	movs	r3, #0
 8007276:	60bb      	str	r3, [r7, #8]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0208 	orr.w	r2, r2, #8
 8007288:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	60bb      	str	r3, [r7, #8]
 800729a:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <HAL_DSI_Refresh>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	7e1b      	ldrb	r3, [r3, #24]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d101      	bne.n	80072c4 <HAL_DSI_Refresh+0x14>
 80072c0:	2302      	movs	r3, #2
 80072c2:	e010      	b.n	80072e6 <HAL_DSI_Refresh+0x36>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	761a      	strb	r2, [r3, #24]

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0204 	orr.w	r2, r2, #4
 80072da:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b088      	sub	sp, #32
 80072f6:	af02      	add	r7, sp, #8
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	607a      	str	r2, [r7, #4]
 80072fe:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	7e1b      	ldrb	r3, [r3, #24]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d101      	bne.n	800730c <HAL_DSI_ShortWrite+0x1a>
 8007308:	2302      	movs	r3, #2
 800730a:	e010      	b.n	800732e <HAL_DSI_ShortWrite+0x3c>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	761a      	strb	r2, [r3, #24]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	68b9      	ldr	r1, [r7, #8]
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f7ff f87b 	bl	8006418 <DSI_ShortWrite>
 8007322:	4603      	mov	r3, r0
 8007324:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	761a      	strb	r2, [r3, #24]

  return status;
 800732c:	7dfb      	ldrb	r3, [r7, #23]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b08c      	sub	sp, #48	@ 0x30
 800733a:	af02      	add	r7, sp, #8
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	60b9      	str	r1, [r7, #8]
 8007340:	607a      	str	r2, [r7, #4]
 8007342:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8007344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007346:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	7e1b      	ldrb	r3, [r3, #24]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d101      	bne.n	8007354 <HAL_DSI_LongWrite+0x1e>
 8007350:	2302      	movs	r3, #2
 8007352:	e083      	b.n	800745c <HAL_DSI_LongWrite+0x126>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2201      	movs	r2, #1
 8007358:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800735a:	f7fa ff09 	bl	8002170 <HAL_GetTick>
 800735e:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007360:	e00b      	b.n	800737a <HAL_DSI_LongWrite+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007362:	f7fa ff05 	bl	8002170 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b64      	cmp	r3, #100	@ 0x64
 800736e:	d904      	bls.n	800737a <HAL_DSI_LongWrite+0x44>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e070      	b.n	800745c <HAL_DSI_LongWrite+0x126>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0ec      	beq.n	8007362 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8007388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738a:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	2b03      	cmp	r3, #3
 8007390:	bf28      	it	cs
 8007392:	2303      	movcs	r3, #3
 8007394:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8007396:	2300      	movs	r3, #0
 8007398:	623b      	str	r3, [r7, #32]
 800739a:	e00f      	b.n	80073bc <HAL_DSI_LongWrite+0x86>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	4413      	add	r3, r2
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	461a      	mov	r2, r3
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	3301      	adds	r3, #1
 80073aa:	00db      	lsls	r3, r3, #3
 80073ac:	fa02 f303 	lsl.w	r3, r2, r3
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	3301      	adds	r3, #1
 80073ba:	623b      	str	r3, [r7, #32]
 80073bc:	6a3a      	ldr	r2, [r7, #32]
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d3eb      	bcc.n	800739c <HAL_DSI_LongWrite+0x66>
  }
  hdsi->Instance->GPDR = fifoword;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	69fa      	ldr	r2, [r7, #28]
 80073ca:	671a      	str	r2, [r3, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	627b      	str	r3, [r7, #36]	@ 0x24
  pparams += nbBytes;
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	4413      	add	r3, r2
 80073da:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80073dc:	e028      	b.n	8007430 <HAL_DSI_LongWrite+0xfa>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80073de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	bf28      	it	cs
 80073e4:	2304      	movcs	r3, #4
 80073e6:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80073ec:	2300      	movs	r3, #0
 80073ee:	623b      	str	r3, [r7, #32]
 80073f0:	e00e      	b.n	8007410 <HAL_DSI_LongWrite+0xda>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	4413      	add	r3, r2
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	461a      	mov	r2, r3
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	fa02 f303 	lsl.w	r3, r2, r3
 8007404:	69fa      	ldr	r2, [r7, #28]
 8007406:	4313      	orrs	r3, r2
 8007408:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	3301      	adds	r3, #1
 800740e:	623b      	str	r3, [r7, #32]
 8007410:	6a3a      	ldr	r2, [r7, #32]
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	429a      	cmp	r2, r3
 8007416:	d3ec      	bcc.n	80073f2 <HAL_DSI_LongWrite+0xbc>
    }
    hdsi->Instance->GPDR = fifoword;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	69fa      	ldr	r2, [r7, #28]
 800741e:	671a      	str	r2, [r3, #112]	@ 0x70

    uicounter -= nbBytes;
 8007420:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	627b      	str	r3, [r7, #36]	@ 0x24
    pparams += nbBytes;
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	4413      	add	r3, r2
 800742e:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8007430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1d3      	bne.n	80073de <HAL_DSI_LongWrite+0xa8>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800743e:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	3301      	adds	r3, #1
 8007444:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8007446:	b2db      	uxtb	r3, r3
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	4613      	mov	r3, r2
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	68b9      	ldr	r1, [r7, #8]
 8007450:	f7fe ffc9 	bl	80063e6 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3728      	adds	r7, #40	@ 0x28
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007464:	b480      	push	{r7}
 8007466:	b089      	sub	sp, #36	@ 0x24
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007476:	e1ba      	b.n	80077ee <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	2101      	movs	r1, #1
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	fa01 f303 	lsl.w	r3, r1, r3
 8007484:	4013      	ands	r3, r2
 8007486:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 81aa 	beq.w	80077e8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a55      	ldr	r2, [pc, #340]	@ (80075ec <HAL_GPIO_Init+0x188>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d15d      	bne.n	8007558 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80074a2:	2201      	movs	r2, #1
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	fa02 f303 	lsl.w	r3, r2, r3
 80074aa:	43db      	mvns	r3, r3
 80074ac:	69fa      	ldr	r2, [r7, #28]
 80074ae:	4013      	ands	r3, r2
 80074b0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f003 0201 	and.w	r2, r3, #1
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	fa02 f303 	lsl.w	r3, r2, r3
 80074c0:	69fa      	ldr	r2, [r7, #28]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	69fa      	ldr	r2, [r7, #28]
 80074ca:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80074cc:	4a48      	ldr	r2, [pc, #288]	@ (80075f0 <HAL_GPIO_Init+0x18c>)
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074d4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80074d6:	4a46      	ldr	r2, [pc, #280]	@ (80075f0 <HAL_GPIO_Init+0x18c>)
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	4413      	add	r3, r2
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	08da      	lsrs	r2, r3, #3
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	3208      	adds	r2, #8
 80074ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	220f      	movs	r2, #15
 80074fa:	fa02 f303 	lsl.w	r3, r2, r3
 80074fe:	43db      	mvns	r3, r3
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	4013      	ands	r3, r2
 8007504:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	f003 0307 	and.w	r3, r3, #7
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	220b      	movs	r2, #11
 8007510:	fa02 f303 	lsl.w	r3, r2, r3
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	4313      	orrs	r3, r2
 8007518:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	08da      	lsrs	r2, r3, #3
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	3208      	adds	r2, #8
 8007522:	69f9      	ldr	r1, [r7, #28]
 8007524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	2203      	movs	r2, #3
 8007534:	fa02 f303 	lsl.w	r3, r2, r3
 8007538:	43db      	mvns	r3, r3
 800753a:	69fa      	ldr	r2, [r7, #28]
 800753c:	4013      	ands	r3, r2
 800753e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	005b      	lsls	r3, r3, #1
 8007544:	2202      	movs	r2, #2
 8007546:	fa02 f303 	lsl.w	r3, r2, r3
 800754a:	69fa      	ldr	r2, [r7, #28]
 800754c:	4313      	orrs	r3, r2
 800754e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	69fa      	ldr	r2, [r7, #28]
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	e067      	b.n	8007628 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	2b02      	cmp	r3, #2
 800755e:	d003      	beq.n	8007568 <HAL_GPIO_Init+0x104>
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	2b12      	cmp	r3, #18
 8007566:	d145      	bne.n	80075f4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	08da      	lsrs	r2, r3, #3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3208      	adds	r2, #8
 8007570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007574:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f003 0307 	and.w	r3, r3, #7
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	220f      	movs	r2, #15
 8007580:	fa02 f303 	lsl.w	r3, r2, r3
 8007584:	43db      	mvns	r3, r3
 8007586:	69fa      	ldr	r2, [r7, #28]
 8007588:	4013      	ands	r3, r2
 800758a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	f003 020f 	and.w	r2, r3, #15
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f003 0307 	and.w	r3, r3, #7
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	fa02 f303 	lsl.w	r3, r2, r3
 80075a0:	69fa      	ldr	r2, [r7, #28]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	08da      	lsrs	r2, r3, #3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	3208      	adds	r2, #8
 80075ae:	69f9      	ldr	r1, [r7, #28]
 80075b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	005b      	lsls	r3, r3, #1
 80075be:	2203      	movs	r2, #3
 80075c0:	fa02 f303 	lsl.w	r3, r2, r3
 80075c4:	43db      	mvns	r3, r3
 80075c6:	69fa      	ldr	r2, [r7, #28]
 80075c8:	4013      	ands	r3, r2
 80075ca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f003 0203 	and.w	r2, r3, #3
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	005b      	lsls	r3, r3, #1
 80075d8:	fa02 f303 	lsl.w	r3, r2, r3
 80075dc:	69fa      	ldr	r2, [r7, #28]
 80075de:	4313      	orrs	r3, r2
 80075e0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	69fa      	ldr	r2, [r7, #28]
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	e01e      	b.n	8007628 <HAL_GPIO_Init+0x1c4>
 80075ea:	bf00      	nop
 80075ec:	46020000 	.word	0x46020000
 80075f0:	0800dfdc 	.word	0x0800dfdc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	2203      	movs	r2, #3
 8007600:	fa02 f303 	lsl.w	r3, r2, r3
 8007604:	43db      	mvns	r3, r3
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	4013      	ands	r3, r2
 800760a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f003 0203 	and.w	r2, r3, #3
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	fa02 f303 	lsl.w	r3, r2, r3
 800761c:	69fa      	ldr	r2, [r7, #28]
 800761e:	4313      	orrs	r3, r2
 8007620:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d00b      	beq.n	8007648 <HAL_GPIO_Init+0x1e4>
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	2b02      	cmp	r3, #2
 8007636:	d007      	beq.n	8007648 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800763c:	2b11      	cmp	r3, #17
 800763e:	d003      	beq.n	8007648 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	2b12      	cmp	r3, #18
 8007646:	d130      	bne.n	80076aa <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	005b      	lsls	r3, r3, #1
 8007652:	2203      	movs	r2, #3
 8007654:	fa02 f303 	lsl.w	r3, r2, r3
 8007658:	43db      	mvns	r3, r3
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	4013      	ands	r3, r2
 800765e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	fa02 f303 	lsl.w	r3, r2, r3
 800766c:	69fa      	ldr	r2, [r7, #28]
 800766e:	4313      	orrs	r3, r2
 8007670:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	69fa      	ldr	r2, [r7, #28]
 8007676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800767e:	2201      	movs	r2, #1
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	fa02 f303 	lsl.w	r3, r2, r3
 8007686:	43db      	mvns	r3, r3
 8007688:	69fa      	ldr	r2, [r7, #28]
 800768a:	4013      	ands	r3, r2
 800768c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	091b      	lsrs	r3, r3, #4
 8007694:	f003 0201 	and.w	r2, r3, #1
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	fa02 f303 	lsl.w	r3, r2, r3
 800769e:	69fa      	ldr	r2, [r7, #28]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	69fa      	ldr	r2, [r7, #28]
 80076a8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d017      	beq.n	80076e2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	2203      	movs	r2, #3
 80076be:	fa02 f303 	lsl.w	r3, r2, r3
 80076c2:	43db      	mvns	r3, r3
 80076c4:	69fa      	ldr	r2, [r7, #28]
 80076c6:	4013      	ands	r3, r2
 80076c8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	689a      	ldr	r2, [r3, #8]
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	fa02 f303 	lsl.w	r3, r2, r3
 80076d6:	69fa      	ldr	r2, [r7, #28]
 80076d8:	4313      	orrs	r3, r2
 80076da:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d07c      	beq.n	80077e8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80076ee:	4a47      	ldr	r2, [pc, #284]	@ (800780c <HAL_GPIO_Init+0x3a8>)
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	089b      	lsrs	r3, r3, #2
 80076f4:	3318      	adds	r3, #24
 80076f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f003 0303 	and.w	r3, r3, #3
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	220f      	movs	r2, #15
 8007706:	fa02 f303 	lsl.w	r3, r2, r3
 800770a:	43db      	mvns	r3, r3
 800770c:	69fa      	ldr	r2, [r7, #28]
 800770e:	4013      	ands	r3, r2
 8007710:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	0a9a      	lsrs	r2, r3, #10
 8007716:	4b3e      	ldr	r3, [pc, #248]	@ (8007810 <HAL_GPIO_Init+0x3ac>)
 8007718:	4013      	ands	r3, r2
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	f002 0203 	and.w	r2, r2, #3
 8007720:	00d2      	lsls	r2, r2, #3
 8007722:	4093      	lsls	r3, r2
 8007724:	69fa      	ldr	r2, [r7, #28]
 8007726:	4313      	orrs	r3, r2
 8007728:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800772a:	4938      	ldr	r1, [pc, #224]	@ (800780c <HAL_GPIO_Init+0x3a8>)
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	089b      	lsrs	r3, r3, #2
 8007730:	3318      	adds	r3, #24
 8007732:	69fa      	ldr	r2, [r7, #28]
 8007734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007738:	4b34      	ldr	r3, [pc, #208]	@ (800780c <HAL_GPIO_Init+0x3a8>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	43db      	mvns	r3, r3
 8007742:	69fa      	ldr	r2, [r7, #28]
 8007744:	4013      	ands	r3, r2
 8007746:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007754:	69fa      	ldr	r2, [r7, #28]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	4313      	orrs	r3, r2
 800775a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800775c:	4a2b      	ldr	r2, [pc, #172]	@ (800780c <HAL_GPIO_Init+0x3a8>)
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007762:	4b2a      	ldr	r3, [pc, #168]	@ (800780c <HAL_GPIO_Init+0x3a8>)
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	43db      	mvns	r3, r3
 800776c:	69fa      	ldr	r2, [r7, #28]
 800776e:	4013      	ands	r3, r2
 8007770:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800777e:	69fa      	ldr	r2, [r7, #28]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4313      	orrs	r3, r2
 8007784:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007786:	4a21      	ldr	r2, [pc, #132]	@ (800780c <HAL_GPIO_Init+0x3a8>)
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800778c:	4b1f      	ldr	r3, [pc, #124]	@ (800780c <HAL_GPIO_Init+0x3a8>)
 800778e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007792:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	43db      	mvns	r3, r3
 8007798:	69fa      	ldr	r2, [r7, #28]
 800779a:	4013      	ands	r3, r2
 800779c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80077aa:	69fa      	ldr	r2, [r7, #28]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80077b2:	4a16      	ldr	r2, [pc, #88]	@ (800780c <HAL_GPIO_Init+0x3a8>)
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80077ba:	4b14      	ldr	r3, [pc, #80]	@ (800780c <HAL_GPIO_Init+0x3a8>)
 80077bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	43db      	mvns	r3, r3
 80077c6:	69fa      	ldr	r2, [r7, #28]
 80077c8:	4013      	ands	r3, r2
 80077ca:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d003      	beq.n	80077e0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80077d8:	69fa      	ldr	r2, [r7, #28]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	4313      	orrs	r3, r2
 80077de:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80077e0:	4a0a      	ldr	r2, [pc, #40]	@ (800780c <HAL_GPIO_Init+0x3a8>)
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	3301      	adds	r3, #1
 80077ec:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	fa22 f303 	lsr.w	r3, r2, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f47f ae3d 	bne.w	8007478 <HAL_GPIO_Init+0x14>
  }
}
 80077fe:	bf00      	nop
 8007800:	bf00      	nop
 8007802:	3724      	adds	r7, #36	@ 0x24
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	46022000 	.word	0x46022000
 8007810:	002f7f7f 	.word	0x002f7f7f

08007814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691a      	ldr	r2, [r3, #16]
 8007824:	887b      	ldrh	r3, [r7, #2]
 8007826:	4013      	ands	r3, r2
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800782c:	2301      	movs	r3, #1
 800782e:	73fb      	strb	r3, [r7, #15]
 8007830:	e001      	b.n	8007836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8007836:	7bfb      	ldrb	r3, [r7, #15]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	807b      	strh	r3, [r7, #2]
 8007850:	4613      	mov	r3, r2
 8007852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007854:	787b      	ldrb	r3, [r7, #1]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800785a:	887a      	ldrh	r2, [r7, #2]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8007860:	e002      	b.n	8007868 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8007862:	887a      	ldrh	r2, [r7, #2]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e08d      	b.n	80079a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d106      	bne.n	80078a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7fa f952 	bl	8001b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2224      	movs	r2, #36	@ 0x24
 80078a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 0201 	bic.w	r2, r2, #1
 80078b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80078c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80078d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d107      	bne.n	80078ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	689a      	ldr	r2, [r3, #8]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078ea:	609a      	str	r2, [r3, #8]
 80078ec:	e006      	b.n	80078fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	689a      	ldr	r2, [r3, #8]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80078fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	2b02      	cmp	r3, #2
 8007902:	d108      	bne.n	8007916 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007912:	605a      	str	r2, [r3, #4]
 8007914:	e007      	b.n	8007926 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007924:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	6812      	ldr	r2, [r2, #0]
 8007930:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007934:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007938:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68da      	ldr	r2, [r3, #12]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007948:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691a      	ldr	r2, [r3, #16]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	430a      	orrs	r2, r1
 8007962:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	69d9      	ldr	r1, [r3, #28]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a1a      	ldr	r2, [r3, #32]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f042 0201 	orr.w	r2, r2, #1
 8007982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2220      	movs	r2, #32
 800798e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b20      	cmp	r3, #32
 80079be:	d138      	bne.n	8007a32 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d101      	bne.n	80079ce <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80079ca:	2302      	movs	r3, #2
 80079cc:	e032      	b.n	8007a34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2224      	movs	r2, #36	@ 0x24
 80079da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0201 	bic.w	r2, r2, #1
 80079ec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80079fc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6819      	ldr	r1, [r3, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f042 0201 	orr.w	r2, r2, #1
 8007a1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	e000      	b.n	8007a34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a32:	2302      	movs	r3, #2
  }
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b20      	cmp	r3, #32
 8007a54:	d139      	bne.n	8007aca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d101      	bne.n	8007a64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007a60:	2302      	movs	r3, #2
 8007a62:	e033      	b.n	8007acc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2224      	movs	r2, #36	@ 0x24
 8007a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0201 	bic.w	r2, r2, #1
 8007a82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007a92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	021b      	lsls	r3, r3, #8
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f042 0201 	orr.w	r2, r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	e000      	b.n	8007acc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007aca:	2302      	movs	r3, #2
  }
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8007adc:	4b05      	ldr	r3, [pc, #20]	@ (8007af4 <HAL_ICACHE_Enable+0x1c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a04      	ldr	r2, [pc, #16]	@ (8007af4 <HAL_ICACHE_Enable+0x1c>)
 8007ae2:	f043 0301 	orr.w	r3, r3, #1
 8007ae6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr
 8007af4:	40030400 	.word	0x40030400

08007af8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e0bf      	b.n	8007c8a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d106      	bne.n	8007b24 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7fa f88a 	bl	8001c38 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2202      	movs	r2, #2
 8007b28:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	699a      	ldr	r2, [r3, #24]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007b3a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6999      	ldr	r1, [r3, #24]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007b50:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6899      	ldr	r1, [r3, #8]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8007c94 <HAL_LTDC_Init+0x19c>)
 8007b6c:	400b      	ands	r3, r1
 8007b6e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	041b      	lsls	r3, r3, #16
 8007b76:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6899      	ldr	r1, [r3, #8]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	699a      	ldr	r2, [r3, #24]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	431a      	orrs	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68d9      	ldr	r1, [r3, #12]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	4b3e      	ldr	r3, [pc, #248]	@ (8007c94 <HAL_LTDC_Init+0x19c>)
 8007b9a:	400b      	ands	r3, r1
 8007b9c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	041b      	lsls	r3, r3, #16
 8007ba4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68d9      	ldr	r1, [r3, #12]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a1a      	ldr	r2, [r3, #32]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6919      	ldr	r1, [r3, #16]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	4b33      	ldr	r3, [pc, #204]	@ (8007c94 <HAL_LTDC_Init+0x19c>)
 8007bc8:	400b      	ands	r3, r1
 8007bca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd0:	041b      	lsls	r3, r3, #16
 8007bd2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6919      	ldr	r1, [r3, #16]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	431a      	orrs	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6959      	ldr	r1, [r3, #20]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	4b27      	ldr	r3, [pc, #156]	@ (8007c94 <HAL_LTDC_Init+0x19c>)
 8007bf6:	400b      	ands	r3, r1
 8007bf8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfe:	041b      	lsls	r3, r3, #16
 8007c00:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6959      	ldr	r1, [r3, #20]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	430a      	orrs	r2, r1
 8007c16:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007c1e:	021b      	lsls	r3, r3, #8
 8007c20:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007c28:	041b      	lsls	r3, r3, #16
 8007c2a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	430a      	orrs	r2, r1
 8007c56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f042 0206 	orr.w	r2, r2, #6
 8007c66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	699a      	ldr	r2, [r3, #24]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0201 	orr.w	r2, r2, #1
 8007c76:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	f000f800 	.word	0xf000f800

08007c98 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cae:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f003 0304 	and.w	r3, r3, #4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d023      	beq.n	8007d02 <HAL_LTDC_IRQHandler+0x6a>
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f003 0304 	and.w	r3, r3, #4
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d01e      	beq.n	8007d02 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 0204 	bic.w	r2, r2, #4
 8007cd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2204      	movs	r2, #4
 8007cda:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ce2:	f043 0201 	orr.w	r2, r3, #1
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2204      	movs	r2, #4
 8007cf0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f86f 	bl	8007de0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f003 0302 	and.w	r3, r3, #2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d023      	beq.n	8007d54 <HAL_LTDC_IRQHandler+0xbc>
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d01e      	beq.n	8007d54 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f022 0202 	bic.w	r2, r2, #2
 8007d24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d34:	f043 0202 	orr.w	r2, r3, #2
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2204      	movs	r2, #4
 8007d42:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f846 	bl	8007de0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d01b      	beq.n	8007d96 <HAL_LTDC_IRQHandler+0xfe>
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d016      	beq.n	8007d96 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 0201 	bic.w	r2, r2, #1
 8007d76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f82f 	bl	8007df4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f003 0308 	and.w	r3, r3, #8
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01b      	beq.n	8007dd8 <HAL_LTDC_IRQHandler+0x140>
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f003 0308 	and.w	r3, r3, #8
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d016      	beq.n	8007dd8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 0208 	bic.w	r2, r2, #8
 8007db8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2208      	movs	r2, #8
 8007dc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f818 	bl	8007e08 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007dd8:	bf00      	nop
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007e1c:	b5b0      	push	{r4, r5, r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d101      	bne.n	8007e36 <HAL_LTDC_ConfigLayer+0x1a>
 8007e32:	2302      	movs	r3, #2
 8007e34:	e02c      	b.n	8007e90 <HAL_LTDC_ConfigLayer+0x74>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2202      	movs	r2, #2
 8007e42:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2134      	movs	r1, #52	@ 0x34
 8007e4c:	fb01 f303 	mul.w	r3, r1, r3
 8007e50:	4413      	add	r3, r2
 8007e52:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	4614      	mov	r4, r2
 8007e5a:	461d      	mov	r5, r3
 8007e5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e68:	682b      	ldr	r3, [r5, #0]
 8007e6a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	68b9      	ldr	r1, [r7, #8]
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 f811 	bl	8007e98 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bdb0      	pop	{r4, r5, r7, pc}

08007e98 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b089      	sub	sp, #36	@ 0x24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	0c1b      	lsrs	r3, r3, #16
 8007eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007eb4:	4413      	add	r3, r2
 8007eb6:	041b      	lsls	r3, r3, #16
 8007eb8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	01db      	lsls	r3, r3, #7
 8007ec4:	4413      	add	r3, r2
 8007ec6:	3384      	adds	r3, #132	@ 0x84
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	6812      	ldr	r2, [r2, #0]
 8007ece:	4611      	mov	r1, r2
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	01d2      	lsls	r2, r2, #7
 8007ed4:	440a      	add	r2, r1
 8007ed6:	3284      	adds	r2, #132	@ 0x84
 8007ed8:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8007edc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	0c1b      	lsrs	r3, r3, #16
 8007eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007eee:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007ef0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	01db      	lsls	r3, r3, #7
 8007efc:	440b      	add	r3, r1
 8007efe:	3384      	adds	r3, #132	@ 0x84
 8007f00:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007f06:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	68da      	ldr	r2, [r3, #12]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f16:	4413      	add	r3, r2
 8007f18:	041b      	lsls	r3, r3, #16
 8007f1a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	461a      	mov	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	01db      	lsls	r3, r3, #7
 8007f26:	4413      	add	r3, r2
 8007f28:	3384      	adds	r3, #132	@ 0x84
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	6812      	ldr	r2, [r2, #0]
 8007f30:	4611      	mov	r1, r2
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	01d2      	lsls	r2, r2, #7
 8007f36:	440a      	add	r2, r1
 8007f38:	3284      	adds	r2, #132	@ 0x84
 8007f3a:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8007f3e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	689a      	ldr	r2, [r3, #8]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f4e:	4413      	add	r3, r2
 8007f50:	1c5a      	adds	r2, r3, #1
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4619      	mov	r1, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	01db      	lsls	r3, r3, #7
 8007f5c:	440b      	add	r3, r1
 8007f5e:	3384      	adds	r3, #132	@ 0x84
 8007f60:	4619      	mov	r1, r3
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	01db      	lsls	r3, r3, #7
 8007f72:	4413      	add	r3, r2
 8007f74:	3384      	adds	r3, #132	@ 0x84
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	6812      	ldr	r2, [r2, #0]
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	01d2      	lsls	r2, r2, #7
 8007f82:	440a      	add	r2, r1
 8007f84:	3284      	adds	r2, #132	@ 0x84
 8007f86:	f023 0307 	bic.w	r3, r3, #7
 8007f8a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	461a      	mov	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	01db      	lsls	r3, r3, #7
 8007f96:	4413      	add	r3, r2
 8007f98:	3384      	adds	r3, #132	@ 0x84
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007fa8:	021b      	lsls	r3, r3, #8
 8007faa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007fb2:	041b      	lsls	r3, r3, #16
 8007fb4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	061b      	lsls	r3, r3, #24
 8007fbc:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	431a      	orrs	r2, r3
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	01db      	lsls	r3, r3, #7
 8007fd8:	440b      	add	r3, r1
 8007fda:	3384      	adds	r3, #132	@ 0x84
 8007fdc:	4619      	mov	r1, r3
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	01db      	lsls	r3, r3, #7
 8007fee:	4413      	add	r3, r2
 8007ff0:	3384      	adds	r3, #132	@ 0x84
 8007ff2:	695b      	ldr	r3, [r3, #20]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	6812      	ldr	r2, [r2, #0]
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	01d2      	lsls	r2, r2, #7
 8007ffe:	440a      	add	r2, r1
 8008000:	3284      	adds	r2, #132	@ 0x84
 8008002:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008006:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	461a      	mov	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	01db      	lsls	r3, r3, #7
 8008012:	4413      	add	r3, r2
 8008014:	3384      	adds	r3, #132	@ 0x84
 8008016:	461a      	mov	r2, r3
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	01db      	lsls	r3, r3, #7
 8008028:	4413      	add	r3, r2
 800802a:	3384      	adds	r3, #132	@ 0x84
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	6812      	ldr	r2, [r2, #0]
 8008032:	4611      	mov	r1, r2
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	01d2      	lsls	r2, r2, #7
 8008038:	440a      	add	r2, r1
 800803a:	3284      	adds	r2, #132	@ 0x84
 800803c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008040:	f023 0307 	bic.w	r3, r3, #7
 8008044:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	69da      	ldr	r2, [r3, #28]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	68f9      	ldr	r1, [r7, #12]
 8008050:	6809      	ldr	r1, [r1, #0]
 8008052:	4608      	mov	r0, r1
 8008054:	6879      	ldr	r1, [r7, #4]
 8008056:	01c9      	lsls	r1, r1, #7
 8008058:	4401      	add	r1, r0
 800805a:	3184      	adds	r1, #132	@ 0x84
 800805c:	4313      	orrs	r3, r2
 800805e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	461a      	mov	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	01db      	lsls	r3, r3, #7
 800806a:	4413      	add	r3, r2
 800806c:	3384      	adds	r3, #132	@ 0x84
 800806e:	461a      	mov	r2, r3
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008074:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d102      	bne.n	8008084 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 800807e:	2304      	movs	r3, #4
 8008080:	61fb      	str	r3, [r7, #28]
 8008082:	e01b      	b.n	80080bc <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d102      	bne.n	8008092 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 800808c:	2303      	movs	r3, #3
 800808e:	61fb      	str	r3, [r7, #28]
 8008090:	e014      	b.n	80080bc <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	2b04      	cmp	r3, #4
 8008098:	d00b      	beq.n	80080b2 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d007      	beq.n	80080b2 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d003      	beq.n	80080b2 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80080ae:	2b07      	cmp	r3, #7
 80080b0:	d102      	bne.n	80080b8 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 80080b2:	2302      	movs	r3, #2
 80080b4:	61fb      	str	r3, [r7, #28]
 80080b6:	e001      	b.n	80080bc <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 80080b8:	2301      	movs	r3, #1
 80080ba:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	461a      	mov	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	01db      	lsls	r3, r3, #7
 80080c6:	4413      	add	r3, r2
 80080c8:	3384      	adds	r3, #132	@ 0x84
 80080ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	6812      	ldr	r2, [r2, #0]
 80080d0:	4611      	mov	r1, r2
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	01d2      	lsls	r2, r2, #7
 80080d6:	440a      	add	r2, r1
 80080d8:	3284      	adds	r2, #132	@ 0x84
 80080da:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80080de:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e4:	69fa      	ldr	r2, [r7, #28]
 80080e6:	fb02 f303 	mul.w	r3, r2, r3
 80080ea:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	6859      	ldr	r1, [r3, #4]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	1acb      	subs	r3, r1, r3
 80080f6:	69f9      	ldr	r1, [r7, #28]
 80080f8:	fb01 f303 	mul.w	r3, r1, r3
 80080fc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80080fe:	68f9      	ldr	r1, [r7, #12]
 8008100:	6809      	ldr	r1, [r1, #0]
 8008102:	4608      	mov	r0, r1
 8008104:	6879      	ldr	r1, [r7, #4]
 8008106:	01c9      	lsls	r1, r1, #7
 8008108:	4401      	add	r1, r0
 800810a:	3184      	adds	r1, #132	@ 0x84
 800810c:	4313      	orrs	r3, r2
 800810e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	461a      	mov	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	01db      	lsls	r3, r3, #7
 800811a:	4413      	add	r3, r2
 800811c:	3384      	adds	r3, #132	@ 0x84
 800811e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	6812      	ldr	r2, [r2, #0]
 8008124:	4611      	mov	r1, r2
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	01d2      	lsls	r2, r2, #7
 800812a:	440a      	add	r2, r1
 800812c:	3284      	adds	r2, #132	@ 0x84
 800812e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008132:	f023 0307 	bic.w	r3, r3, #7
 8008136:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	461a      	mov	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	01db      	lsls	r3, r3, #7
 8008142:	4413      	add	r3, r2
 8008144:	3384      	adds	r3, #132	@ 0x84
 8008146:	461a      	mov	r2, r3
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	01db      	lsls	r3, r3, #7
 8008158:	4413      	add	r3, r2
 800815a:	3384      	adds	r3, #132	@ 0x84
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	6812      	ldr	r2, [r2, #0]
 8008162:	4611      	mov	r1, r2
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	01d2      	lsls	r2, r2, #7
 8008168:	440a      	add	r2, r1
 800816a:	3284      	adds	r2, #132	@ 0x84
 800816c:	f043 0301 	orr.w	r3, r3, #1
 8008170:	6013      	str	r3, [r2, #0]
}
 8008172:	bf00      	nop
 8008174:	3724      	adds	r7, #36	@ 0x24
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
	...

08008180 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008180:	b480      	push	{r7}
 8008182:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008184:	4b05      	ldr	r3, [pc, #20]	@ (800819c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008188:	4a04      	ldr	r2, [pc, #16]	@ (800819c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800818a:	f043 0301 	orr.w	r3, r3, #1
 800818e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8008190:	bf00      	nop
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	46020800 	.word	0x46020800

080081a0 <HAL_PWR_DisableBkUpAccess>:
  *         register RCC_BDCR, RTC registers, TAMP registers, backup registers
  *         and backup SRAM).
  * @retval None.
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80081a0:	b480      	push	{r7}
 80081a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80081a4:	4b05      	ldr	r3, [pc, #20]	@ (80081bc <HAL_PWR_DisableBkUpAccess+0x1c>)
 80081a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a8:	4a04      	ldr	r2, [pc, #16]	@ (80081bc <HAL_PWR_DisableBkUpAccess+0x1c>)
 80081aa:	f023 0301 	bic.w	r3, r3, #1
 80081ae:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80081b0:	bf00      	nop
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	46020800 	.word	0x46020800

080081c0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80081c8:	4b39      	ldr	r3, [pc, #228]	@ (80082b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80081ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80081d0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d10b      	bne.n	80081f2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081e0:	d905      	bls.n	80081ee <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80081e2:	4b33      	ldr	r3, [pc, #204]	@ (80082b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	4a32      	ldr	r2, [pc, #200]	@ (80082b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80081e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80081ec:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	e057      	b.n	80082a2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081f8:	d90a      	bls.n	8008210 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80081fa:	4b2d      	ldr	r3, [pc, #180]	@ (80082b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4313      	orrs	r3, r2
 8008206:	4a2a      	ldr	r2, [pc, #168]	@ (80082b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800820c:	60d3      	str	r3, [r2, #12]
 800820e:	e007      	b.n	8008220 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8008210:	4b27      	ldr	r3, [pc, #156]	@ (80082b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8008218:	4925      	ldr	r1, [pc, #148]	@ (80082b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4313      	orrs	r3, r2
 800821e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008220:	4b24      	ldr	r3, [pc, #144]	@ (80082b4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a24      	ldr	r2, [pc, #144]	@ (80082b8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008226:	fba2 2303 	umull	r2, r3, r2, r3
 800822a:	099b      	lsrs	r3, r3, #6
 800822c:	2232      	movs	r2, #50	@ 0x32
 800822e:	fb02 f303 	mul.w	r3, r2, r3
 8008232:	4a21      	ldr	r2, [pc, #132]	@ (80082b8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008234:	fba2 2303 	umull	r2, r3, r2, r3
 8008238:	099b      	lsrs	r3, r3, #6
 800823a:	3301      	adds	r3, #1
 800823c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800823e:	e002      	b.n	8008246 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3b01      	subs	r3, #1
 8008244:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8008246:	4b1a      	ldr	r3, [pc, #104]	@ (80082b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d102      	bne.n	8008258 <HAL_PWREx_ControlVoltageScaling+0x98>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1f3      	bne.n	8008240 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d01b      	beq.n	8008296 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800825e:	4b15      	ldr	r3, [pc, #84]	@ (80082b4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a15      	ldr	r2, [pc, #84]	@ (80082b8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008264:	fba2 2303 	umull	r2, r3, r2, r3
 8008268:	099b      	lsrs	r3, r3, #6
 800826a:	2232      	movs	r2, #50	@ 0x32
 800826c:	fb02 f303 	mul.w	r3, r2, r3
 8008270:	4a11      	ldr	r2, [pc, #68]	@ (80082b8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008272:	fba2 2303 	umull	r2, r3, r2, r3
 8008276:	099b      	lsrs	r3, r3, #6
 8008278:	3301      	adds	r3, #1
 800827a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800827c:	e002      	b.n	8008284 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3b01      	subs	r3, #1
 8008282:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008284:	4b0a      	ldr	r3, [pc, #40]	@ (80082b0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008288:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d102      	bne.n	8008296 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1f3      	bne.n	800827e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d101      	bne.n	80082a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e000      	b.n	80082a2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	46020800 	.word	0x46020800
 80082b4:	20000000 	.word	0x20000000
 80082b8:	10624dd3 	.word	0x10624dd3

080082bc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80082bc:	b480      	push	{r7}
 80082be:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80082c0:	4b04      	ldr	r3, [pc, #16]	@ (80082d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80082c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	46020800 	.word	0x46020800

080082d8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80082e0:	4b22      	ldr	r3, [pc, #136]	@ (800836c <HAL_PWREx_ConfigSupply+0x94>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a22      	ldr	r2, [pc, #136]	@ (8008370 <HAL_PWREx_ConfigSupply+0x98>)
 80082e6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ea:	099b      	lsrs	r3, r3, #6
 80082ec:	2232      	movs	r2, #50	@ 0x32
 80082ee:	fb02 f303 	mul.w	r3, r2, r3
 80082f2:	4a1f      	ldr	r2, [pc, #124]	@ (8008370 <HAL_PWREx_ConfigSupply+0x98>)
 80082f4:	fba2 2303 	umull	r2, r3, r2, r3
 80082f8:	099b      	lsrs	r3, r3, #6
 80082fa:	3301      	adds	r3, #1
 80082fc:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d113      	bne.n	800832c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8008304:	4b1b      	ldr	r3, [pc, #108]	@ (8008374 <HAL_PWREx_ConfigSupply+0x9c>)
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	4a1a      	ldr	r2, [pc, #104]	@ (8008374 <HAL_PWREx_ConfigSupply+0x9c>)
 800830a:	f023 0302 	bic.w	r3, r3, #2
 800830e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008310:	e002      	b.n	8008318 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3b01      	subs	r3, #1
 8008316:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008318:	4b16      	ldr	r3, [pc, #88]	@ (8008374 <HAL_PWREx_ConfigSupply+0x9c>)
 800831a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800831c:	f003 0302 	and.w	r3, r3, #2
 8008320:	2b02      	cmp	r3, #2
 8008322:	d116      	bne.n	8008352 <HAL_PWREx_ConfigSupply+0x7a>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1f3      	bne.n	8008312 <HAL_PWREx_ConfigSupply+0x3a>
 800832a:	e012      	b.n	8008352 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800832c:	4b11      	ldr	r3, [pc, #68]	@ (8008374 <HAL_PWREx_ConfigSupply+0x9c>)
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	4a10      	ldr	r2, [pc, #64]	@ (8008374 <HAL_PWREx_ConfigSupply+0x9c>)
 8008332:	f043 0302 	orr.w	r3, r3, #2
 8008336:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008338:	e002      	b.n	8008340 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3b01      	subs	r3, #1
 800833e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008340:	4b0c      	ldr	r3, [pc, #48]	@ (8008374 <HAL_PWREx_ConfigSupply+0x9c>)
 8008342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008344:	f003 0302 	and.w	r3, r3, #2
 8008348:	2b00      	cmp	r3, #0
 800834a:	d102      	bne.n	8008352 <HAL_PWREx_ConfigSupply+0x7a>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1f3      	bne.n	800833a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e000      	b.n	800835e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	20000000 	.word	0x20000000
 8008370:	10624dd3 	.word	0x10624dd3
 8008374:	46020800 	.word	0x46020800

08008378 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008378:	b480      	push	{r7}
 800837a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800837c:	4b05      	ldr	r3, [pc, #20]	@ (8008394 <HAL_PWREx_EnableVddIO2+0x1c>)
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	4a04      	ldr	r2, [pc, #16]	@ (8008394 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008382:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008386:	6113      	str	r3, [r2, #16]
}
 8008388:	bf00      	nop
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	46020800 	.word	0x46020800

08008398 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8008398:	b480      	push	{r7}
 800839a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800839c:	4b05      	ldr	r3, [pc, #20]	@ (80083b4 <HAL_PWREx_EnableVddA+0x1c>)
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	4a04      	ldr	r2, [pc, #16]	@ (80083b4 <HAL_PWREx_EnableVddA+0x1c>)
 80083a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083a6:	6113      	str	r3, [r2, #16]
}
 80083a8:	bf00      	nop
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	46020800 	.word	0x46020800

080083b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08e      	sub	sp, #56	@ 0x38
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80083c0:	2300      	movs	r3, #0
 80083c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d102      	bne.n	80083d2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	f000 bec8 	b.w	8009162 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083d2:	4b99      	ldr	r3, [pc, #612]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 80083d4:	69db      	ldr	r3, [r3, #28]
 80083d6:	f003 030c 	and.w	r3, r3, #12
 80083da:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083dc:	4b96      	ldr	r3, [pc, #600]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 80083de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e0:	f003 0303 	and.w	r3, r3, #3
 80083e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0310 	and.w	r3, r3, #16
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 816c 	beq.w	80086cc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80083f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d007      	beq.n	800840a <HAL_RCC_OscConfig+0x52>
 80083fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fc:	2b0c      	cmp	r3, #12
 80083fe:	f040 80de 	bne.w	80085be <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008404:	2b01      	cmp	r3, #1
 8008406:	f040 80da 	bne.w	80085be <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	69db      	ldr	r3, [r3, #28]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d102      	bne.n	8008418 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	f000 bea5 	b.w	8009162 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800841c:	4b86      	ldr	r3, [pc, #536]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d004      	beq.n	8008432 <HAL_RCC_OscConfig+0x7a>
 8008428:	4b83      	ldr	r3, [pc, #524]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008430:	e005      	b.n	800843e <HAL_RCC_OscConfig+0x86>
 8008432:	4b81      	ldr	r3, [pc, #516]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008434:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008438:	041b      	lsls	r3, r3, #16
 800843a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800843e:	4293      	cmp	r3, r2
 8008440:	d255      	bcs.n	80084ee <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10a      	bne.n	800845e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800844c:	4618      	mov	r0, r3
 800844e:	f001 fa3d 	bl	80098cc <RCC_SetFlashLatencyFromMSIRange>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	f000 be82 	b.w	8009162 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800845e:	4b76      	ldr	r3, [pc, #472]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	4a75      	ldr	r2, [pc, #468]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008464:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008468:	6093      	str	r3, [r2, #8]
 800846a:	4b73      	ldr	r3, [pc, #460]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008476:	4970      	ldr	r1, [pc, #448]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008478:	4313      	orrs	r3, r2
 800847a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008480:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008484:	d309      	bcc.n	800849a <HAL_RCC_OscConfig+0xe2>
 8008486:	4b6c      	ldr	r3, [pc, #432]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	f023 021f 	bic.w	r2, r3, #31
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	4969      	ldr	r1, [pc, #420]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008494:	4313      	orrs	r3, r2
 8008496:	60cb      	str	r3, [r1, #12]
 8008498:	e07e      	b.n	8008598 <HAL_RCC_OscConfig+0x1e0>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800849e:	2b00      	cmp	r3, #0
 80084a0:	da0a      	bge.n	80084b8 <HAL_RCC_OscConfig+0x100>
 80084a2:	4b65      	ldr	r3, [pc, #404]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	015b      	lsls	r3, r3, #5
 80084b0:	4961      	ldr	r1, [pc, #388]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	60cb      	str	r3, [r1, #12]
 80084b6:	e06f      	b.n	8008598 <HAL_RCC_OscConfig+0x1e0>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084c0:	d30a      	bcc.n	80084d8 <HAL_RCC_OscConfig+0x120>
 80084c2:	4b5d      	ldr	r3, [pc, #372]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	029b      	lsls	r3, r3, #10
 80084d0:	4959      	ldr	r1, [pc, #356]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 80084d2:	4313      	orrs	r3, r2
 80084d4:	60cb      	str	r3, [r1, #12]
 80084d6:	e05f      	b.n	8008598 <HAL_RCC_OscConfig+0x1e0>
 80084d8:	4b57      	ldr	r3, [pc, #348]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a1b      	ldr	r3, [r3, #32]
 80084e4:	03db      	lsls	r3, r3, #15
 80084e6:	4954      	ldr	r1, [pc, #336]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60cb      	str	r3, [r1, #12]
 80084ec:	e054      	b.n	8008598 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80084ee:	4b52      	ldr	r3, [pc, #328]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	4a51      	ldr	r2, [pc, #324]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 80084f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80084f8:	6093      	str	r3, [r2, #8]
 80084fa:	4b4f      	ldr	r3, [pc, #316]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008506:	494c      	ldr	r1, [pc, #304]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008508:	4313      	orrs	r3, r2
 800850a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008510:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008514:	d309      	bcc.n	800852a <HAL_RCC_OscConfig+0x172>
 8008516:	4b48      	ldr	r3, [pc, #288]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	f023 021f 	bic.w	r2, r3, #31
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	4945      	ldr	r1, [pc, #276]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008524:	4313      	orrs	r3, r2
 8008526:	60cb      	str	r3, [r1, #12]
 8008528:	e028      	b.n	800857c <HAL_RCC_OscConfig+0x1c4>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800852e:	2b00      	cmp	r3, #0
 8008530:	da0a      	bge.n	8008548 <HAL_RCC_OscConfig+0x190>
 8008532:	4b41      	ldr	r3, [pc, #260]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	015b      	lsls	r3, r3, #5
 8008540:	493d      	ldr	r1, [pc, #244]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008542:	4313      	orrs	r3, r2
 8008544:	60cb      	str	r3, [r1, #12]
 8008546:	e019      	b.n	800857c <HAL_RCC_OscConfig+0x1c4>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800854c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008550:	d30a      	bcc.n	8008568 <HAL_RCC_OscConfig+0x1b0>
 8008552:	4b39      	ldr	r3, [pc, #228]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	029b      	lsls	r3, r3, #10
 8008560:	4935      	ldr	r1, [pc, #212]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008562:	4313      	orrs	r3, r2
 8008564:	60cb      	str	r3, [r1, #12]
 8008566:	e009      	b.n	800857c <HAL_RCC_OscConfig+0x1c4>
 8008568:	4b33      	ldr	r3, [pc, #204]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	03db      	lsls	r3, r3, #15
 8008576:	4930      	ldr	r1, [pc, #192]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008578:	4313      	orrs	r3, r2
 800857a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800857c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10a      	bne.n	8008598 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008586:	4618      	mov	r0, r3
 8008588:	f001 f9a0 	bl	80098cc <RCC_SetFlashLatencyFromMSIRange>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	f000 bde5 	b.w	8009162 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8008598:	f001 f8de 	bl	8009758 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800859c:	4b27      	ldr	r3, [pc, #156]	@ (800863c <HAL_RCC_OscConfig+0x284>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7f9 fc63 	bl	8001e6c <HAL_InitTick>
 80085a6:	4603      	mov	r3, r0
 80085a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80085ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 808a 	beq.w	80086ca <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80085b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085ba:	f000 bdd2 	b.w	8009162 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	69db      	ldr	r3, [r3, #28]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d066      	beq.n	8008694 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80085c6:	4b1c      	ldr	r3, [pc, #112]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a1b      	ldr	r2, [pc, #108]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 80085cc:	f043 0301 	orr.w	r3, r3, #1
 80085d0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80085d2:	f7f9 fdcd 	bl	8002170 <HAL_GetTick>
 80085d6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80085d8:	e009      	b.n	80085ee <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80085da:	f7f9 fdc9 	bl	8002170 <HAL_GetTick>
 80085de:	4602      	mov	r2, r0
 80085e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d902      	bls.n	80085ee <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	f000 bdba 	b.w	8009162 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80085ee:	4b12      	ldr	r3, [pc, #72]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0304 	and.w	r3, r3, #4
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d0ef      	beq.n	80085da <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80085fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	4a0e      	ldr	r2, [pc, #56]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008600:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008604:	6093      	str	r3, [r2, #8]
 8008606:	4b0c      	ldr	r3, [pc, #48]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008612:	4909      	ldr	r1, [pc, #36]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008614:	4313      	orrs	r3, r2
 8008616:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800861c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008620:	d30e      	bcc.n	8008640 <HAL_RCC_OscConfig+0x288>
 8008622:	4b05      	ldr	r3, [pc, #20]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	f023 021f 	bic.w	r2, r3, #31
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	4902      	ldr	r1, [pc, #8]	@ (8008638 <HAL_RCC_OscConfig+0x280>)
 8008630:	4313      	orrs	r3, r2
 8008632:	60cb      	str	r3, [r1, #12]
 8008634:	e04a      	b.n	80086cc <HAL_RCC_OscConfig+0x314>
 8008636:	bf00      	nop
 8008638:	46020c00 	.word	0x46020c00
 800863c:	20000004 	.word	0x20000004
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008644:	2b00      	cmp	r3, #0
 8008646:	da0a      	bge.n	800865e <HAL_RCC_OscConfig+0x2a6>
 8008648:	4b98      	ldr	r3, [pc, #608]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a1b      	ldr	r3, [r3, #32]
 8008654:	015b      	lsls	r3, r3, #5
 8008656:	4995      	ldr	r1, [pc, #596]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 8008658:	4313      	orrs	r3, r2
 800865a:	60cb      	str	r3, [r1, #12]
 800865c:	e036      	b.n	80086cc <HAL_RCC_OscConfig+0x314>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008666:	d30a      	bcc.n	800867e <HAL_RCC_OscConfig+0x2c6>
 8008668:	4b90      	ldr	r3, [pc, #576]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a1b      	ldr	r3, [r3, #32]
 8008674:	029b      	lsls	r3, r3, #10
 8008676:	498d      	ldr	r1, [pc, #564]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 8008678:	4313      	orrs	r3, r2
 800867a:	60cb      	str	r3, [r1, #12]
 800867c:	e026      	b.n	80086cc <HAL_RCC_OscConfig+0x314>
 800867e:	4b8b      	ldr	r3, [pc, #556]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	03db      	lsls	r3, r3, #15
 800868c:	4987      	ldr	r1, [pc, #540]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800868e:	4313      	orrs	r3, r2
 8008690:	60cb      	str	r3, [r1, #12]
 8008692:	e01b      	b.n	80086cc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8008694:	4b85      	ldr	r3, [pc, #532]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a84      	ldr	r2, [pc, #528]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800869a:	f023 0301 	bic.w	r3, r3, #1
 800869e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80086a0:	f7f9 fd66 	bl	8002170 <HAL_GetTick>
 80086a4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80086a6:	e009      	b.n	80086bc <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80086a8:	f7f9 fd62 	bl	8002170 <HAL_GetTick>
 80086ac:	4602      	mov	r2, r0
 80086ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d902      	bls.n	80086bc <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	f000 bd53 	b.w	8009162 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80086bc:	4b7b      	ldr	r3, [pc, #492]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0304 	and.w	r3, r3, #4
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1ef      	bne.n	80086a8 <HAL_RCC_OscConfig+0x2f0>
 80086c8:	e000      	b.n	80086cc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80086ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 0301 	and.w	r3, r3, #1
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f000 808b 	beq.w	80087f0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80086da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086dc:	2b08      	cmp	r3, #8
 80086de:	d005      	beq.n	80086ec <HAL_RCC_OscConfig+0x334>
 80086e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e2:	2b0c      	cmp	r3, #12
 80086e4:	d109      	bne.n	80086fa <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80086e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d106      	bne.n	80086fa <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d17d      	bne.n	80087f0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	f000 bd34 	b.w	8009162 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008702:	d106      	bne.n	8008712 <HAL_RCC_OscConfig+0x35a>
 8008704:	4b69      	ldr	r3, [pc, #420]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a68      	ldr	r2, [pc, #416]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800870a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	e041      	b.n	8008796 <HAL_RCC_OscConfig+0x3de>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800871a:	d112      	bne.n	8008742 <HAL_RCC_OscConfig+0x38a>
 800871c:	4b63      	ldr	r3, [pc, #396]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a62      	ldr	r2, [pc, #392]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 8008722:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008726:	6013      	str	r3, [r2, #0]
 8008728:	4b60      	ldr	r3, [pc, #384]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a5f      	ldr	r2, [pc, #380]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800872e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008732:	6013      	str	r3, [r2, #0]
 8008734:	4b5d      	ldr	r3, [pc, #372]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a5c      	ldr	r2, [pc, #368]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800873a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	e029      	b.n	8008796 <HAL_RCC_OscConfig+0x3de>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800874a:	d112      	bne.n	8008772 <HAL_RCC_OscConfig+0x3ba>
 800874c:	4b57      	ldr	r3, [pc, #348]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a56      	ldr	r2, [pc, #344]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 8008752:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	4b54      	ldr	r3, [pc, #336]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a53      	ldr	r2, [pc, #332]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800875e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	4b51      	ldr	r3, [pc, #324]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a50      	ldr	r2, [pc, #320]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800876a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800876e:	6013      	str	r3, [r2, #0]
 8008770:	e011      	b.n	8008796 <HAL_RCC_OscConfig+0x3de>
 8008772:	4b4e      	ldr	r3, [pc, #312]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a4d      	ldr	r2, [pc, #308]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 8008778:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800877c:	6013      	str	r3, [r2, #0]
 800877e:	4b4b      	ldr	r3, [pc, #300]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a4a      	ldr	r2, [pc, #296]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 8008784:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008788:	6013      	str	r3, [r2, #0]
 800878a:	4b48      	ldr	r3, [pc, #288]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a47      	ldr	r2, [pc, #284]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 8008790:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008794:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d014      	beq.n	80087c8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800879e:	f7f9 fce7 	bl	8002170 <HAL_GetTick>
 80087a2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087a4:	e009      	b.n	80087ba <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087a6:	f7f9 fce3 	bl	8002170 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	2b64      	cmp	r3, #100	@ 0x64
 80087b2:	d902      	bls.n	80087ba <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	f000 bcd4 	b.w	8009162 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087ba:	4b3c      	ldr	r3, [pc, #240]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0ef      	beq.n	80087a6 <HAL_RCC_OscConfig+0x3ee>
 80087c6:	e013      	b.n	80087f0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80087c8:	f7f9 fcd2 	bl	8002170 <HAL_GetTick>
 80087cc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80087ce:	e009      	b.n	80087e4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087d0:	f7f9 fcce 	bl	8002170 <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	2b64      	cmp	r3, #100	@ 0x64
 80087dc:	d902      	bls.n	80087e4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	f000 bcbf 	b.w	8009162 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80087e4:	4b31      	ldr	r3, [pc, #196]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1ef      	bne.n	80087d0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0302 	and.w	r3, r3, #2
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d05f      	beq.n	80088bc <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80087fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fe:	2b04      	cmp	r3, #4
 8008800:	d005      	beq.n	800880e <HAL_RCC_OscConfig+0x456>
 8008802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008804:	2b0c      	cmp	r3, #12
 8008806:	d114      	bne.n	8008832 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800880a:	2b02      	cmp	r3, #2
 800880c:	d111      	bne.n	8008832 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d102      	bne.n	800881c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	f000 bca3 	b.w	8009162 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800881c:	4b23      	ldr	r3, [pc, #140]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	041b      	lsls	r3, r3, #16
 800882a:	4920      	ldr	r1, [pc, #128]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800882c:	4313      	orrs	r3, r2
 800882e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008830:	e044      	b.n	80088bc <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d024      	beq.n	8008884 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800883a:	4b1c      	ldr	r3, [pc, #112]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a1b      	ldr	r2, [pc, #108]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 8008840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008844:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008846:	f7f9 fc93 	bl	8002170 <HAL_GetTick>
 800884a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800884c:	e009      	b.n	8008862 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800884e:	f7f9 fc8f 	bl	8002170 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	2b02      	cmp	r3, #2
 800885a:	d902      	bls.n	8008862 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	f000 bc80 	b.w	8009162 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008862:	4b12      	ldr	r3, [pc, #72]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0ef      	beq.n	800884e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800886e:	4b0f      	ldr	r3, [pc, #60]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	041b      	lsls	r3, r3, #16
 800887c:	490b      	ldr	r1, [pc, #44]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800887e:	4313      	orrs	r3, r2
 8008880:	610b      	str	r3, [r1, #16]
 8008882:	e01b      	b.n	80088bc <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8008884:	4b09      	ldr	r3, [pc, #36]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a08      	ldr	r2, [pc, #32]	@ (80088ac <HAL_RCC_OscConfig+0x4f4>)
 800888a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800888e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008890:	f7f9 fc6e 	bl	8002170 <HAL_GetTick>
 8008894:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008896:	e00b      	b.n	80088b0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008898:	f7f9 fc6a 	bl	8002170 <HAL_GetTick>
 800889c:	4602      	mov	r2, r0
 800889e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d904      	bls.n	80088b0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	f000 bc5b 	b.w	8009162 <HAL_RCC_OscConfig+0xdaa>
 80088ac:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80088b0:	4baf      	ldr	r3, [pc, #700]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1ed      	bne.n	8008898 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0308 	and.w	r3, r3, #8
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 80c8 	beq.w	8008a5a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80088ca:	2300      	movs	r3, #0
 80088cc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088d0:	4ba7      	ldr	r3, [pc, #668]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 80088d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088d6:	f003 0304 	and.w	r3, r3, #4
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d111      	bne.n	8008902 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088de:	4ba4      	ldr	r3, [pc, #656]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 80088e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088e4:	4aa2      	ldr	r2, [pc, #648]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 80088e6:	f043 0304 	orr.w	r3, r3, #4
 80088ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80088ee:	4ba0      	ldr	r3, [pc, #640]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 80088f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088f4:	f003 0304 	and.w	r3, r3, #4
 80088f8:	617b      	str	r3, [r7, #20]
 80088fa:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80088fc:	2301      	movs	r3, #1
 80088fe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008902:	4b9c      	ldr	r3, [pc, #624]	@ (8008b74 <HAL_RCC_OscConfig+0x7bc>)
 8008904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008906:	f003 0301 	and.w	r3, r3, #1
 800890a:	2b00      	cmp	r3, #0
 800890c:	d119      	bne.n	8008942 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800890e:	4b99      	ldr	r3, [pc, #612]	@ (8008b74 <HAL_RCC_OscConfig+0x7bc>)
 8008910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008912:	4a98      	ldr	r2, [pc, #608]	@ (8008b74 <HAL_RCC_OscConfig+0x7bc>)
 8008914:	f043 0301 	orr.w	r3, r3, #1
 8008918:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800891a:	f7f9 fc29 	bl	8002170 <HAL_GetTick>
 800891e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008920:	e009      	b.n	8008936 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008922:	f7f9 fc25 	bl	8002170 <HAL_GetTick>
 8008926:	4602      	mov	r2, r0
 8008928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	2b02      	cmp	r3, #2
 800892e:	d902      	bls.n	8008936 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	f000 bc16 	b.w	8009162 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008936:	4b8f      	ldr	r3, [pc, #572]	@ (8008b74 <HAL_RCC_OscConfig+0x7bc>)
 8008938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	2b00      	cmp	r3, #0
 8008940:	d0ef      	beq.n	8008922 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d05f      	beq.n	8008a0a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800894a:	4b89      	ldr	r3, [pc, #548]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 800894c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008950:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	699a      	ldr	r2, [r3, #24]
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800895c:	429a      	cmp	r2, r3
 800895e:	d037      	beq.n	80089d0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8008960:	6a3b      	ldr	r3, [r7, #32]
 8008962:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d006      	beq.n	8008978 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e3f4      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8008978:	6a3b      	ldr	r3, [r7, #32]
 800897a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d01b      	beq.n	80089ba <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8008982:	4b7b      	ldr	r3, [pc, #492]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008988:	4a79      	ldr	r2, [pc, #484]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 800898a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800898e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8008992:	f7f9 fbed 	bl	8002170 <HAL_GetTick>
 8008996:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008998:	e008      	b.n	80089ac <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800899a:	f7f9 fbe9 	bl	8002170 <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	2b05      	cmp	r3, #5
 80089a6:	d901      	bls.n	80089ac <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e3da      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80089ac:	4b70      	ldr	r3, [pc, #448]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 80089ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1ef      	bne.n	800899a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80089ba:	4b6d      	ldr	r3, [pc, #436]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 80089bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089c0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	4969      	ldr	r1, [pc, #420]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 80089ca:	4313      	orrs	r3, r2
 80089cc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80089d0:	4b67      	ldr	r3, [pc, #412]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 80089d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089d6:	4a66      	ldr	r2, [pc, #408]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 80089d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80089e0:	f7f9 fbc6 	bl	8002170 <HAL_GetTick>
 80089e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80089e6:	e008      	b.n	80089fa <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089e8:	f7f9 fbc2 	bl	8002170 <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	2b05      	cmp	r3, #5
 80089f4:	d901      	bls.n	80089fa <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e3b3      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80089fa:	4b5d      	ldr	r3, [pc, #372]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 80089fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d0ef      	beq.n	80089e8 <HAL_RCC_OscConfig+0x630>
 8008a08:	e01b      	b.n	8008a42 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8008a0a:	4b59      	ldr	r3, [pc, #356]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a10:	4a57      	ldr	r2, [pc, #348]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008a12:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8008a16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8008a1a:	f7f9 fba9 	bl	8002170 <HAL_GetTick>
 8008a1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008a20:	e008      	b.n	8008a34 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a22:	f7f9 fba5 	bl	8002170 <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	2b05      	cmp	r3, #5
 8008a2e:	d901      	bls.n	8008a34 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e396      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008a34:	4b4e      	ldr	r3, [pc, #312]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008a36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1ef      	bne.n	8008a22 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a42:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d107      	bne.n	8008a5a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a4a:	4b49      	ldr	r3, [pc, #292]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a50:	4a47      	ldr	r2, [pc, #284]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008a52:	f023 0304 	bic.w	r3, r3, #4
 8008a56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0304 	and.w	r3, r3, #4
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 8111 	beq.w	8008c8a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a6e:	4b40      	ldr	r3, [pc, #256]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a74:	f003 0304 	and.w	r3, r3, #4
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d111      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a7c:	4b3c      	ldr	r3, [pc, #240]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a82:	4a3b      	ldr	r2, [pc, #236]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008a84:	f043 0304 	orr.w	r3, r3, #4
 8008a88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008a8c:	4b38      	ldr	r3, [pc, #224]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a92:	f003 0304 	and.w	r3, r3, #4
 8008a96:	613b      	str	r3, [r7, #16]
 8008a98:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008aa0:	4b34      	ldr	r3, [pc, #208]	@ (8008b74 <HAL_RCC_OscConfig+0x7bc>)
 8008aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d118      	bne.n	8008ade <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008aac:	4b31      	ldr	r3, [pc, #196]	@ (8008b74 <HAL_RCC_OscConfig+0x7bc>)
 8008aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab0:	4a30      	ldr	r2, [pc, #192]	@ (8008b74 <HAL_RCC_OscConfig+0x7bc>)
 8008ab2:	f043 0301 	orr.w	r3, r3, #1
 8008ab6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ab8:	f7f9 fb5a 	bl	8002170 <HAL_GetTick>
 8008abc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008abe:	e008      	b.n	8008ad2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ac0:	f7f9 fb56 	bl	8002170 <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e347      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008ad2:	4b28      	ldr	r3, [pc, #160]	@ (8008b74 <HAL_RCC_OscConfig+0x7bc>)
 8008ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d0f0      	beq.n	8008ac0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d01f      	beq.n	8008b2a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	f003 0304 	and.w	r3, r3, #4
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d010      	beq.n	8008b18 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008af6:	4b1e      	ldr	r3, [pc, #120]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008afc:	4a1c      	ldr	r2, [pc, #112]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008afe:	f043 0304 	orr.w	r3, r3, #4
 8008b02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008b06:	4b1a      	ldr	r3, [pc, #104]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b0c:	4a18      	ldr	r2, [pc, #96]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008b0e:	f043 0301 	orr.w	r3, r3, #1
 8008b12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008b16:	e018      	b.n	8008b4a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008b18:	4b15      	ldr	r3, [pc, #84]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b1e:	4a14      	ldr	r2, [pc, #80]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008b20:	f043 0301 	orr.w	r3, r3, #1
 8008b24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008b28:	e00f      	b.n	8008b4a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008b2a:	4b11      	ldr	r3, [pc, #68]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b30:	4a0f      	ldr	r2, [pc, #60]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008b32:	f023 0301 	bic.w	r3, r3, #1
 8008b36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008b3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b40:	4a0b      	ldr	r2, [pc, #44]	@ (8008b70 <HAL_RCC_OscConfig+0x7b8>)
 8008b42:	f023 0304 	bic.w	r3, r3, #4
 8008b46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d057      	beq.n	8008c02 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8008b52:	f7f9 fb0d 	bl	8002170 <HAL_GetTick>
 8008b56:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b58:	e00e      	b.n	8008b78 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b5a:	f7f9 fb09 	bl	8002170 <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d905      	bls.n	8008b78 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e2f8      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
 8008b70:	46020c00 	.word	0x46020c00
 8008b74:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b78:	4b9c      	ldr	r3, [pc, #624]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008b7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b7e:	f003 0302 	and.w	r3, r3, #2
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d0e9      	beq.n	8008b5a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d01b      	beq.n	8008bca <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008b92:	4b96      	ldr	r3, [pc, #600]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008b94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b98:	4a94      	ldr	r2, [pc, #592]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008ba2:	e00a      	b.n	8008bba <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ba4:	f7f9 fae4 	bl	8002170 <HAL_GetTick>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d901      	bls.n	8008bba <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e2d3      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008bba:	4b8c      	ldr	r3, [pc, #560]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d0ed      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x7ec>
 8008bc8:	e053      	b.n	8008c72 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008bca:	4b88      	ldr	r3, [pc, #544]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bd0:	4a86      	ldr	r2, [pc, #536]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008bd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008bda:	e00a      	b.n	8008bf2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bdc:	f7f9 fac8 	bl	8002170 <HAL_GetTick>
 8008be0:	4602      	mov	r2, r0
 8008be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d901      	bls.n	8008bf2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e2b7      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008bf2:	4b7e      	ldr	r3, [pc, #504]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1ed      	bne.n	8008bdc <HAL_RCC_OscConfig+0x824>
 8008c00:	e037      	b.n	8008c72 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8008c02:	f7f9 fab5 	bl	8002170 <HAL_GetTick>
 8008c06:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008c08:	e00a      	b.n	8008c20 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c0a:	f7f9 fab1 	bl	8002170 <HAL_GetTick>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d901      	bls.n	8008c20 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e2a0      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008c20:	4b72      	ldr	r3, [pc, #456]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008c22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c26:	f003 0302 	and.w	r3, r3, #2
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1ed      	bne.n	8008c0a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8008c2e:	4b6f      	ldr	r3, [pc, #444]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d01a      	beq.n	8008c72 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008c3c:	4b6b      	ldr	r3, [pc, #428]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008c3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c42:	4a6a      	ldr	r2, [pc, #424]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008c44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008c4c:	e00a      	b.n	8008c64 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c4e:	f7f9 fa8f 	bl	8002170 <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d901      	bls.n	8008c64 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e27e      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008c64:	4b61      	ldr	r3, [pc, #388]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008c66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1ed      	bne.n	8008c4e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008c72:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d107      	bne.n	8008c8a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c7a:	4b5c      	ldr	r3, [pc, #368]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c80:	4a5a      	ldr	r2, [pc, #360]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008c82:	f023 0304 	bic.w	r3, r3, #4
 8008c86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 0320 	and.w	r3, r3, #32
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d036      	beq.n	8008d04 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d019      	beq.n	8008cd2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8008c9e:	4b53      	ldr	r3, [pc, #332]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a52      	ldr	r2, [pc, #328]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008ca4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008ca8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008caa:	f7f9 fa61 	bl	8002170 <HAL_GetTick>
 8008cae:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008cb0:	e008      	b.n	8008cc4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008cb2:	f7f9 fa5d 	bl	8002170 <HAL_GetTick>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d901      	bls.n	8008cc4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e24e      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008cc4:	4b49      	ldr	r3, [pc, #292]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d0f0      	beq.n	8008cb2 <HAL_RCC_OscConfig+0x8fa>
 8008cd0:	e018      	b.n	8008d04 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8008cd2:	4b46      	ldr	r3, [pc, #280]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a45      	ldr	r2, [pc, #276]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008cd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cdc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008cde:	f7f9 fa47 	bl	8002170 <HAL_GetTick>
 8008ce2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008ce4:	e008      	b.n	8008cf8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ce6:	f7f9 fa43 	bl	8002170 <HAL_GetTick>
 8008cea:	4602      	mov	r2, r0
 8008cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d901      	bls.n	8008cf8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	e234      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008cf8:	4b3c      	ldr	r3, [pc, #240]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1f0      	bne.n	8008ce6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d036      	beq.n	8008d7e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d019      	beq.n	8008d4c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8008d18:	4b34      	ldr	r3, [pc, #208]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a33      	ldr	r2, [pc, #204]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d22:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008d24:	f7f9 fa24 	bl	8002170 <HAL_GetTick>
 8008d28:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008d2a:	e008      	b.n	8008d3e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008d2c:	f7f9 fa20 	bl	8002170 <HAL_GetTick>
 8008d30:	4602      	mov	r2, r0
 8008d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d901      	bls.n	8008d3e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e211      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d0f0      	beq.n	8008d2c <HAL_RCC_OscConfig+0x974>
 8008d4a:	e018      	b.n	8008d7e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8008d4c:	4b27      	ldr	r3, [pc, #156]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a26      	ldr	r2, [pc, #152]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008d52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d56:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008d58:	f7f9 fa0a 	bl	8002170 <HAL_GetTick>
 8008d5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008d5e:	e008      	b.n	8008d72 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008d60:	f7f9 fa06 	bl	8002170 <HAL_GetTick>
 8008d64:	4602      	mov	r2, r0
 8008d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d901      	bls.n	8008d72 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e1f7      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008d72:	4b1e      	ldr	r3, [pc, #120]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1f0      	bne.n	8008d60 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d07f      	beq.n	8008e8a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d062      	beq.n	8008e58 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8008d92:	4b16      	ldr	r3, [pc, #88]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	4a15      	ldr	r2, [pc, #84]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008d98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008d9c:	6093      	str	r3, [r2, #8]
 8008d9e:	4b13      	ldr	r3, [pc, #76]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008daa:	4910      	ldr	r1, [pc, #64]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008dac:	4313      	orrs	r3, r2
 8008dae:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008db8:	d309      	bcc.n	8008dce <HAL_RCC_OscConfig+0xa16>
 8008dba:	4b0c      	ldr	r3, [pc, #48]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	f023 021f 	bic.w	r2, r3, #31
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	4909      	ldr	r1, [pc, #36]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	60cb      	str	r3, [r1, #12]
 8008dcc:	e02a      	b.n	8008e24 <HAL_RCC_OscConfig+0xa6c>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	da0c      	bge.n	8008df0 <HAL_RCC_OscConfig+0xa38>
 8008dd6:	4b05      	ldr	r3, [pc, #20]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	015b      	lsls	r3, r3, #5
 8008de4:	4901      	ldr	r1, [pc, #4]	@ (8008dec <HAL_RCC_OscConfig+0xa34>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	60cb      	str	r3, [r1, #12]
 8008dea:	e01b      	b.n	8008e24 <HAL_RCC_OscConfig+0xa6c>
 8008dec:	46020c00 	.word	0x46020c00
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008df8:	d30a      	bcc.n	8008e10 <HAL_RCC_OscConfig+0xa58>
 8008dfa:	4ba1      	ldr	r3, [pc, #644]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	029b      	lsls	r3, r3, #10
 8008e08:	499d      	ldr	r1, [pc, #628]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	60cb      	str	r3, [r1, #12]
 8008e0e:	e009      	b.n	8008e24 <HAL_RCC_OscConfig+0xa6c>
 8008e10:	4b9b      	ldr	r3, [pc, #620]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	03db      	lsls	r3, r3, #15
 8008e1e:	4998      	ldr	r1, [pc, #608]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008e20:	4313      	orrs	r3, r2
 8008e22:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8008e24:	4b96      	ldr	r3, [pc, #600]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a95      	ldr	r2, [pc, #596]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008e2a:	f043 0310 	orr.w	r3, r3, #16
 8008e2e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008e30:	f7f9 f99e 	bl	8002170 <HAL_GetTick>
 8008e34:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008e36:	e008      	b.n	8008e4a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008e38:	f7f9 f99a 	bl	8002170 <HAL_GetTick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d901      	bls.n	8008e4a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e18b      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008e4a:	4b8d      	ldr	r3, [pc, #564]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0320 	and.w	r3, r3, #32
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d0f0      	beq.n	8008e38 <HAL_RCC_OscConfig+0xa80>
 8008e56:	e018      	b.n	8008e8a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8008e58:	4b89      	ldr	r3, [pc, #548]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a88      	ldr	r2, [pc, #544]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008e5e:	f023 0310 	bic.w	r3, r3, #16
 8008e62:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008e64:	f7f9 f984 	bl	8002170 <HAL_GetTick>
 8008e68:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008e6a:	e008      	b.n	8008e7e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008e6c:	f7f9 f980 	bl	8002170 <HAL_GetTick>
 8008e70:	4602      	mov	r2, r0
 8008e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d901      	bls.n	8008e7e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	e171      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008e7e:	4b80      	ldr	r3, [pc, #512]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 0320 	and.w	r3, r3, #32
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1f0      	bne.n	8008e6c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f000 8166 	beq.w	8009160 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008e94:	2300      	movs	r3, #0
 8008e96:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e9a:	4b79      	ldr	r3, [pc, #484]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	f003 030c 	and.w	r3, r3, #12
 8008ea2:	2b0c      	cmp	r3, #12
 8008ea4:	f000 80f2 	beq.w	800908c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	f040 80c5 	bne.w	800903c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008eb2:	4b73      	ldr	r3, [pc, #460]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a72      	ldr	r2, [pc, #456]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008eb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ebc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008ebe:	f7f9 f957 	bl	8002170 <HAL_GetTick>
 8008ec2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008ec4:	e008      	b.n	8008ed8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ec6:	f7f9 f953 	bl	8002170 <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d901      	bls.n	8008ed8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e144      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008ed8:	4b69      	ldr	r3, [pc, #420]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1f0      	bne.n	8008ec6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ee4:	4b66      	ldr	r3, [pc, #408]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008eea:	f003 0304 	and.w	r3, r3, #4
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d111      	bne.n	8008f16 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8008ef2:	4b63      	ldr	r3, [pc, #396]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ef8:	4a61      	ldr	r2, [pc, #388]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008efa:	f043 0304 	orr.w	r3, r3, #4
 8008efe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008f02:	4b5f      	ldr	r3, [pc, #380]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f08:	f003 0304 	and.w	r3, r3, #4
 8008f0c:	60fb      	str	r3, [r7, #12]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8008f10:	2301      	movs	r3, #1
 8008f12:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8008f16:	4b5b      	ldr	r3, [pc, #364]	@ (8009084 <HAL_RCC_OscConfig+0xccc>)
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008f1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f22:	d102      	bne.n	8008f2a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8008f24:	2301      	movs	r3, #1
 8008f26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008f2a:	4b56      	ldr	r3, [pc, #344]	@ (8009084 <HAL_RCC_OscConfig+0xccc>)
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	4a55      	ldr	r2, [pc, #340]	@ (8009084 <HAL_RCC_OscConfig+0xccc>)
 8008f30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f34:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8008f36:	4b52      	ldr	r3, [pc, #328]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f3e:	f023 0303 	bic.w	r3, r3, #3
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008f4a:	3a01      	subs	r2, #1
 8008f4c:	0212      	lsls	r2, r2, #8
 8008f4e:	4311      	orrs	r1, r2
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008f54:	430a      	orrs	r2, r1
 8008f56:	494a      	ldr	r1, [pc, #296]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008f5c:	4b48      	ldr	r3, [pc, #288]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008f5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f60:	4b49      	ldr	r3, [pc, #292]	@ (8009088 <HAL_RCC_OscConfig+0xcd0>)
 8008f62:	4013      	ands	r3, r2
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008f68:	3a01      	subs	r2, #1
 8008f6a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008f72:	3a01      	subs	r2, #1
 8008f74:	0252      	lsls	r2, r2, #9
 8008f76:	b292      	uxth	r2, r2
 8008f78:	4311      	orrs	r1, r2
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008f7e:	3a01      	subs	r2, #1
 8008f80:	0412      	lsls	r2, r2, #16
 8008f82:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008f86:	4311      	orrs	r1, r2
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008f8c:	3a01      	subs	r2, #1
 8008f8e:	0612      	lsls	r2, r2, #24
 8008f90:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008f94:	430a      	orrs	r2, r1
 8008f96:	493a      	ldr	r1, [pc, #232]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008f9c:	4b38      	ldr	r3, [pc, #224]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa0:	4a37      	ldr	r2, [pc, #220]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008fa2:	f023 0310 	bic.w	r3, r3, #16
 8008fa6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fac:	4a34      	ldr	r2, [pc, #208]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008fae:	00db      	lsls	r3, r3, #3
 8008fb0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008fb2:	4b33      	ldr	r3, [pc, #204]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb6:	4a32      	ldr	r2, [pc, #200]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008fb8:	f043 0310 	orr.w	r3, r3, #16
 8008fbc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8008fbe:	4b30      	ldr	r3, [pc, #192]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc2:	f023 020c 	bic.w	r2, r3, #12
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fca:	492d      	ldr	r1, [pc, #180]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8008fd0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d105      	bne.n	8008fe4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8009084 <HAL_RCC_OscConfig+0xccc>)
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	4a29      	ldr	r2, [pc, #164]	@ (8009084 <HAL_RCC_OscConfig+0xccc>)
 8008fde:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008fe2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8008fe4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d107      	bne.n	8008ffc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8008fec:	4b24      	ldr	r3, [pc, #144]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ff2:	4a23      	ldr	r2, [pc, #140]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008ff4:	f023 0304 	bic.w	r3, r3, #4
 8008ff8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8008ffc:	4b20      	ldr	r3, [pc, #128]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a1f      	ldr	r2, [pc, #124]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8009002:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009006:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009008:	f7f9 f8b2 	bl	8002170 <HAL_GetTick>
 800900c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800900e:	e008      	b.n	8009022 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009010:	f7f9 f8ae 	bl	8002170 <HAL_GetTick>
 8009014:	4602      	mov	r2, r0
 8009016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009018:	1ad3      	subs	r3, r2, r3
 800901a:	2b02      	cmp	r3, #2
 800901c:	d901      	bls.n	8009022 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e09f      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009022:	4b17      	ldr	r3, [pc, #92]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0f0      	beq.n	8009010 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800902e:	4b14      	ldr	r3, [pc, #80]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8009030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009032:	4a13      	ldr	r2, [pc, #76]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8009034:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009038:	6293      	str	r3, [r2, #40]	@ 0x28
 800903a:	e091      	b.n	8009160 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800903c:	4b10      	ldr	r3, [pc, #64]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a0f      	ldr	r2, [pc, #60]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8009042:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009046:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009048:	f7f9 f892 	bl	8002170 <HAL_GetTick>
 800904c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800904e:	e008      	b.n	8009062 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009050:	f7f9 f88e 	bl	8002170 <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	2b02      	cmp	r3, #2
 800905c:	d901      	bls.n	8009062 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	e07f      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009062:	4b07      	ldr	r3, [pc, #28]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1f0      	bne.n	8009050 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800906e:	4b04      	ldr	r3, [pc, #16]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8009070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009072:	4a03      	ldr	r2, [pc, #12]	@ (8009080 <HAL_RCC_OscConfig+0xcc8>)
 8009074:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8009078:	f023 0303 	bic.w	r3, r3, #3
 800907c:	6293      	str	r3, [r2, #40]	@ 0x28
 800907e:	e06f      	b.n	8009160 <HAL_RCC_OscConfig+0xda8>
 8009080:	46020c00 	.word	0x46020c00
 8009084:	46020800 	.word	0x46020800
 8009088:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800908c:	4b37      	ldr	r3, [pc, #220]	@ (800916c <HAL_RCC_OscConfig+0xdb4>)
 800908e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009090:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009092:	4b36      	ldr	r3, [pc, #216]	@ (800916c <HAL_RCC_OscConfig+0xdb4>)
 8009094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009096:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800909c:	2b01      	cmp	r3, #1
 800909e:	d039      	beq.n	8009114 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	f003 0203 	and.w	r2, r3, #3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d132      	bne.n	8009114 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	0a1b      	lsrs	r3, r3, #8
 80090b2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ba:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80090bc:	429a      	cmp	r2, r3
 80090be:	d129      	bne.n	8009114 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d122      	bne.n	8009114 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090d8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80090da:	429a      	cmp	r2, r3
 80090dc:	d11a      	bne.n	8009114 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	0a5b      	lsrs	r3, r3, #9
 80090e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d111      	bne.n	8009114 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	0c1b      	lsrs	r3, r3, #16
 80090f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090fc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80090fe:	429a      	cmp	r2, r3
 8009100:	d108      	bne.n	8009114 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	0e1b      	lsrs	r3, r3, #24
 8009106:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800910e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009110:	429a      	cmp	r2, r3
 8009112:	d001      	beq.n	8009118 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	e024      	b.n	8009162 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8009118:	4b14      	ldr	r3, [pc, #80]	@ (800916c <HAL_RCC_OscConfig+0xdb4>)
 800911a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800911c:	08db      	lsrs	r3, r3, #3
 800911e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8009126:	429a      	cmp	r2, r3
 8009128:	d01a      	beq.n	8009160 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800912a:	4b10      	ldr	r3, [pc, #64]	@ (800916c <HAL_RCC_OscConfig+0xdb4>)
 800912c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800912e:	4a0f      	ldr	r2, [pc, #60]	@ (800916c <HAL_RCC_OscConfig+0xdb4>)
 8009130:	f023 0310 	bic.w	r3, r3, #16
 8009134:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009136:	f7f9 f81b 	bl	8002170 <HAL_GetTick>
 800913a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800913c:	bf00      	nop
 800913e:	f7f9 f817 	bl	8002170 <HAL_GetTick>
 8009142:	4602      	mov	r2, r0
 8009144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009146:	4293      	cmp	r3, r2
 8009148:	d0f9      	beq.n	800913e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800914e:	4a07      	ldr	r2, [pc, #28]	@ (800916c <HAL_RCC_OscConfig+0xdb4>)
 8009150:	00db      	lsls	r3, r3, #3
 8009152:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8009154:	4b05      	ldr	r3, [pc, #20]	@ (800916c <HAL_RCC_OscConfig+0xdb4>)
 8009156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009158:	4a04      	ldr	r2, [pc, #16]	@ (800916c <HAL_RCC_OscConfig+0xdb4>)
 800915a:	f043 0310 	orr.w	r3, r3, #16
 800915e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3738      	adds	r7, #56	@ 0x38
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	46020c00 	.word	0x46020c00

08009170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	e1d9      	b.n	8009538 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009184:	4b9b      	ldr	r3, [pc, #620]	@ (80093f4 <HAL_RCC_ClockConfig+0x284>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 030f 	and.w	r3, r3, #15
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	429a      	cmp	r2, r3
 8009190:	d910      	bls.n	80091b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009192:	4b98      	ldr	r3, [pc, #608]	@ (80093f4 <HAL_RCC_ClockConfig+0x284>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f023 020f 	bic.w	r2, r3, #15
 800919a:	4996      	ldr	r1, [pc, #600]	@ (80093f4 <HAL_RCC_ClockConfig+0x284>)
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	4313      	orrs	r3, r2
 80091a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091a2:	4b94      	ldr	r3, [pc, #592]	@ (80093f4 <HAL_RCC_ClockConfig+0x284>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 030f 	and.w	r3, r3, #15
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d001      	beq.n	80091b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e1c1      	b.n	8009538 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 0310 	and.w	r3, r3, #16
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d010      	beq.n	80091e2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	695a      	ldr	r2, [r3, #20]
 80091c4:	4b8c      	ldr	r3, [pc, #560]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 80091c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d908      	bls.n	80091e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80091d0:	4b89      	ldr	r3, [pc, #548]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 80091d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	695b      	ldr	r3, [r3, #20]
 80091dc:	4986      	ldr	r1, [pc, #536]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 80091de:	4313      	orrs	r3, r2
 80091e0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 0308 	and.w	r3, r3, #8
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d012      	beq.n	8009214 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	691a      	ldr	r2, [r3, #16]
 80091f2:	4b81      	ldr	r3, [pc, #516]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	091b      	lsrs	r3, r3, #4
 80091f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d909      	bls.n	8009214 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009200:	4b7d      	ldr	r3, [pc, #500]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 8009202:	6a1b      	ldr	r3, [r3, #32]
 8009204:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	011b      	lsls	r3, r3, #4
 800920e:	497a      	ldr	r1, [pc, #488]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 8009210:	4313      	orrs	r3, r2
 8009212:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0304 	and.w	r3, r3, #4
 800921c:	2b00      	cmp	r3, #0
 800921e:	d010      	beq.n	8009242 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	68da      	ldr	r2, [r3, #12]
 8009224:	4b74      	ldr	r3, [pc, #464]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 8009226:	6a1b      	ldr	r3, [r3, #32]
 8009228:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800922c:	429a      	cmp	r2, r3
 800922e:	d908      	bls.n	8009242 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009230:	4b71      	ldr	r3, [pc, #452]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	496e      	ldr	r1, [pc, #440]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 800923e:	4313      	orrs	r3, r2
 8009240:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d010      	beq.n	8009270 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	689a      	ldr	r2, [r3, #8]
 8009252:	4b69      	ldr	r3, [pc, #420]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	f003 030f 	and.w	r3, r3, #15
 800925a:	429a      	cmp	r2, r3
 800925c:	d908      	bls.n	8009270 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800925e:	4b66      	ldr	r3, [pc, #408]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	f023 020f 	bic.w	r2, r3, #15
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	4963      	ldr	r1, [pc, #396]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 800926c:	4313      	orrs	r3, r2
 800926e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 80d2 	beq.w	8009422 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800927e:	2300      	movs	r3, #0
 8009280:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	2b03      	cmp	r3, #3
 8009288:	d143      	bne.n	8009312 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800928a:	4b5b      	ldr	r3, [pc, #364]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 800928c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009290:	f003 0304 	and.w	r3, r3, #4
 8009294:	2b00      	cmp	r3, #0
 8009296:	d110      	bne.n	80092ba <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009298:	4b57      	ldr	r3, [pc, #348]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 800929a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800929e:	4a56      	ldr	r2, [pc, #344]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 80092a0:	f043 0304 	orr.w	r3, r3, #4
 80092a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80092a8:	4b53      	ldr	r3, [pc, #332]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 80092aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80092ae:	f003 0304 	and.w	r3, r3, #4
 80092b2:	60bb      	str	r3, [r7, #8]
 80092b4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80092b6:	2301      	movs	r3, #1
 80092b8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80092ba:	f7f8 ff59 	bl	8002170 <HAL_GetTick>
 80092be:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80092c0:	4b4e      	ldr	r3, [pc, #312]	@ (80093fc <HAL_RCC_ClockConfig+0x28c>)
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00f      	beq.n	80092ec <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80092cc:	e008      	b.n	80092e0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80092ce:	f7f8 ff4f 	bl	8002170 <HAL_GetTick>
 80092d2:	4602      	mov	r2, r0
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d901      	bls.n	80092e0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e12b      	b.n	8009538 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80092e0:	4b46      	ldr	r3, [pc, #280]	@ (80093fc <HAL_RCC_ClockConfig+0x28c>)
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d0f0      	beq.n	80092ce <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80092ec:	7dfb      	ldrb	r3, [r7, #23]
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d107      	bne.n	8009302 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80092f2:	4b41      	ldr	r3, [pc, #260]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 80092f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80092f8:	4a3f      	ldr	r2, [pc, #252]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 80092fa:	f023 0304 	bic.w	r3, r3, #4
 80092fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009302:	4b3d      	ldr	r3, [pc, #244]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800930a:	2b00      	cmp	r3, #0
 800930c:	d121      	bne.n	8009352 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	e112      	b.n	8009538 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	2b02      	cmp	r3, #2
 8009318:	d107      	bne.n	800932a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800931a:	4b37      	ldr	r3, [pc, #220]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d115      	bne.n	8009352 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	e106      	b.n	8009538 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d107      	bne.n	8009342 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009332:	4b31      	ldr	r3, [pc, #196]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 0304 	and.w	r3, r3, #4
 800933a:	2b00      	cmp	r3, #0
 800933c:	d109      	bne.n	8009352 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e0fa      	b.n	8009538 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009342:	4b2d      	ldr	r3, [pc, #180]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800934a:	2b00      	cmp	r3, #0
 800934c:	d101      	bne.n	8009352 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e0f2      	b.n	8009538 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8009352:	4b29      	ldr	r3, [pc, #164]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	f023 0203 	bic.w	r2, r3, #3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	4926      	ldr	r1, [pc, #152]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 8009360:	4313      	orrs	r3, r2
 8009362:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8009364:	f7f8 ff04 	bl	8002170 <HAL_GetTick>
 8009368:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	2b03      	cmp	r3, #3
 8009370:	d112      	bne.n	8009398 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009372:	e00a      	b.n	800938a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009374:	f7f8 fefc 	bl	8002170 <HAL_GetTick>
 8009378:	4602      	mov	r2, r0
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	1ad3      	subs	r3, r2, r3
 800937e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009382:	4293      	cmp	r3, r2
 8009384:	d901      	bls.n	800938a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	e0d6      	b.n	8009538 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800938a:	4b1b      	ldr	r3, [pc, #108]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	f003 030c 	and.w	r3, r3, #12
 8009392:	2b0c      	cmp	r3, #12
 8009394:	d1ee      	bne.n	8009374 <HAL_RCC_ClockConfig+0x204>
 8009396:	e044      	b.n	8009422 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	2b02      	cmp	r3, #2
 800939e:	d112      	bne.n	80093c6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80093a0:	e00a      	b.n	80093b8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093a2:	f7f8 fee5 	bl	8002170 <HAL_GetTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d901      	bls.n	80093b8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e0bf      	b.n	8009538 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80093b8:	4b0f      	ldr	r3, [pc, #60]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 80093ba:	69db      	ldr	r3, [r3, #28]
 80093bc:	f003 030c 	and.w	r3, r3, #12
 80093c0:	2b08      	cmp	r3, #8
 80093c2:	d1ee      	bne.n	80093a2 <HAL_RCC_ClockConfig+0x232>
 80093c4:	e02d      	b.n	8009422 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d123      	bne.n	8009416 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80093ce:	e00a      	b.n	80093e6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093d0:	f7f8 fece 	bl	8002170 <HAL_GetTick>
 80093d4:	4602      	mov	r2, r0
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093de:	4293      	cmp	r3, r2
 80093e0:	d901      	bls.n	80093e6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80093e2:	2303      	movs	r3, #3
 80093e4:	e0a8      	b.n	8009538 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80093e6:	4b04      	ldr	r3, [pc, #16]	@ (80093f8 <HAL_RCC_ClockConfig+0x288>)
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	f003 030c 	and.w	r3, r3, #12
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1ee      	bne.n	80093d0 <HAL_RCC_ClockConfig+0x260>
 80093f2:	e016      	b.n	8009422 <HAL_RCC_ClockConfig+0x2b2>
 80093f4:	40022000 	.word	0x40022000
 80093f8:	46020c00 	.word	0x46020c00
 80093fc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009400:	f7f8 feb6 	bl	8002170 <HAL_GetTick>
 8009404:	4602      	mov	r2, r0
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800940e:	4293      	cmp	r3, r2
 8009410:	d901      	bls.n	8009416 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8009412:	2303      	movs	r3, #3
 8009414:	e090      	b.n	8009538 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009416:	4b4a      	ldr	r3, [pc, #296]	@ (8009540 <HAL_RCC_ClockConfig+0x3d0>)
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	f003 030c 	and.w	r3, r3, #12
 800941e:	2b04      	cmp	r3, #4
 8009420:	d1ee      	bne.n	8009400 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0302 	and.w	r3, r3, #2
 800942a:	2b00      	cmp	r3, #0
 800942c:	d010      	beq.n	8009450 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	689a      	ldr	r2, [r3, #8]
 8009432:	4b43      	ldr	r3, [pc, #268]	@ (8009540 <HAL_RCC_ClockConfig+0x3d0>)
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	f003 030f 	and.w	r3, r3, #15
 800943a:	429a      	cmp	r2, r3
 800943c:	d208      	bcs.n	8009450 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800943e:	4b40      	ldr	r3, [pc, #256]	@ (8009540 <HAL_RCC_ClockConfig+0x3d0>)
 8009440:	6a1b      	ldr	r3, [r3, #32]
 8009442:	f023 020f 	bic.w	r2, r3, #15
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	493d      	ldr	r1, [pc, #244]	@ (8009540 <HAL_RCC_ClockConfig+0x3d0>)
 800944c:	4313      	orrs	r3, r2
 800944e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009450:	4b3c      	ldr	r3, [pc, #240]	@ (8009544 <HAL_RCC_ClockConfig+0x3d4>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 030f 	and.w	r3, r3, #15
 8009458:	683a      	ldr	r2, [r7, #0]
 800945a:	429a      	cmp	r2, r3
 800945c:	d210      	bcs.n	8009480 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800945e:	4b39      	ldr	r3, [pc, #228]	@ (8009544 <HAL_RCC_ClockConfig+0x3d4>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f023 020f 	bic.w	r2, r3, #15
 8009466:	4937      	ldr	r1, [pc, #220]	@ (8009544 <HAL_RCC_ClockConfig+0x3d4>)
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	4313      	orrs	r3, r2
 800946c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800946e:	4b35      	ldr	r3, [pc, #212]	@ (8009544 <HAL_RCC_ClockConfig+0x3d4>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 030f 	and.w	r3, r3, #15
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	429a      	cmp	r2, r3
 800947a:	d001      	beq.n	8009480 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	e05b      	b.n	8009538 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 0304 	and.w	r3, r3, #4
 8009488:	2b00      	cmp	r3, #0
 800948a:	d010      	beq.n	80094ae <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	68da      	ldr	r2, [r3, #12]
 8009490:	4b2b      	ldr	r3, [pc, #172]	@ (8009540 <HAL_RCC_ClockConfig+0x3d0>)
 8009492:	6a1b      	ldr	r3, [r3, #32]
 8009494:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009498:	429a      	cmp	r2, r3
 800949a:	d208      	bcs.n	80094ae <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800949c:	4b28      	ldr	r3, [pc, #160]	@ (8009540 <HAL_RCC_ClockConfig+0x3d0>)
 800949e:	6a1b      	ldr	r3, [r3, #32]
 80094a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	4925      	ldr	r1, [pc, #148]	@ (8009540 <HAL_RCC_ClockConfig+0x3d0>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 0308 	and.w	r3, r3, #8
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d012      	beq.n	80094e0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	691a      	ldr	r2, [r3, #16]
 80094be:	4b20      	ldr	r3, [pc, #128]	@ (8009540 <HAL_RCC_ClockConfig+0x3d0>)
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	091b      	lsrs	r3, r3, #4
 80094c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d209      	bcs.n	80094e0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80094cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009540 <HAL_RCC_ClockConfig+0x3d0>)
 80094ce:	6a1b      	ldr	r3, [r3, #32]
 80094d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	011b      	lsls	r3, r3, #4
 80094da:	4919      	ldr	r1, [pc, #100]	@ (8009540 <HAL_RCC_ClockConfig+0x3d0>)
 80094dc:	4313      	orrs	r3, r2
 80094de:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0310 	and.w	r3, r3, #16
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d010      	beq.n	800950e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	695a      	ldr	r2, [r3, #20]
 80094f0:	4b13      	ldr	r3, [pc, #76]	@ (8009540 <HAL_RCC_ClockConfig+0x3d0>)
 80094f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d208      	bcs.n	800950e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80094fc:	4b10      	ldr	r3, [pc, #64]	@ (8009540 <HAL_RCC_ClockConfig+0x3d0>)
 80094fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009500:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	695b      	ldr	r3, [r3, #20]
 8009508:	490d      	ldr	r1, [pc, #52]	@ (8009540 <HAL_RCC_ClockConfig+0x3d0>)
 800950a:	4313      	orrs	r3, r2
 800950c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800950e:	f000 f821 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 8009512:	4602      	mov	r2, r0
 8009514:	4b0a      	ldr	r3, [pc, #40]	@ (8009540 <HAL_RCC_ClockConfig+0x3d0>)
 8009516:	6a1b      	ldr	r3, [r3, #32]
 8009518:	f003 030f 	and.w	r3, r3, #15
 800951c:	490a      	ldr	r1, [pc, #40]	@ (8009548 <HAL_RCC_ClockConfig+0x3d8>)
 800951e:	5ccb      	ldrb	r3, [r1, r3]
 8009520:	fa22 f303 	lsr.w	r3, r2, r3
 8009524:	4a09      	ldr	r2, [pc, #36]	@ (800954c <HAL_RCC_ClockConfig+0x3dc>)
 8009526:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009528:	4b09      	ldr	r3, [pc, #36]	@ (8009550 <HAL_RCC_ClockConfig+0x3e0>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4618      	mov	r0, r3
 800952e:	f7f8 fc9d 	bl	8001e6c <HAL_InitTick>
 8009532:	4603      	mov	r3, r0
 8009534:	73fb      	strb	r3, [r7, #15]

  return status;
 8009536:	7bfb      	ldrb	r3, [r7, #15]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3718      	adds	r7, #24
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	46020c00 	.word	0x46020c00
 8009544:	40022000 	.word	0x40022000
 8009548:	0800df84 	.word	0x0800df84
 800954c:	20000000 	.word	0x20000000
 8009550:	20000004 	.word	0x20000004

08009554 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009554:	b480      	push	{r7}
 8009556:	b08b      	sub	sp, #44	@ 0x2c
 8009558:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800955a:	2300      	movs	r3, #0
 800955c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800955e:	2300      	movs	r3, #0
 8009560:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009562:	4b78      	ldr	r3, [pc, #480]	@ (8009744 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009564:	69db      	ldr	r3, [r3, #28]
 8009566:	f003 030c 	and.w	r3, r3, #12
 800956a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800956c:	4b75      	ldr	r3, [pc, #468]	@ (8009744 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800956e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009570:	f003 0303 	and.w	r3, r3, #3
 8009574:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d005      	beq.n	8009588 <HAL_RCC_GetSysClockFreq+0x34>
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	2b0c      	cmp	r3, #12
 8009580:	d121      	bne.n	80095c6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d11e      	bne.n	80095c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8009588:	4b6e      	ldr	r3, [pc, #440]	@ (8009744 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d107      	bne.n	80095a4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8009594:	4b6b      	ldr	r3, [pc, #428]	@ (8009744 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009596:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800959a:	0b1b      	lsrs	r3, r3, #12
 800959c:	f003 030f 	and.w	r3, r3, #15
 80095a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80095a2:	e005      	b.n	80095b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80095a4:	4b67      	ldr	r3, [pc, #412]	@ (8009744 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	0f1b      	lsrs	r3, r3, #28
 80095aa:	f003 030f 	and.w	r3, r3, #15
 80095ae:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80095b0:	4a65      	ldr	r2, [pc, #404]	@ (8009748 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80095b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095b8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d110      	bne.n	80095e2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80095c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80095c4:	e00d      	b.n	80095e2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80095c6:	4b5f      	ldr	r3, [pc, #380]	@ (8009744 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80095c8:	69db      	ldr	r3, [r3, #28]
 80095ca:	f003 030c 	and.w	r3, r3, #12
 80095ce:	2b04      	cmp	r3, #4
 80095d0:	d102      	bne.n	80095d8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80095d2:	4b5e      	ldr	r3, [pc, #376]	@ (800974c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80095d4:	623b      	str	r3, [r7, #32]
 80095d6:	e004      	b.n	80095e2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	2b08      	cmp	r3, #8
 80095dc:	d101      	bne.n	80095e2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80095de:	4b5b      	ldr	r3, [pc, #364]	@ (800974c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80095e0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	2b0c      	cmp	r3, #12
 80095e6:	f040 80a5 	bne.w	8009734 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80095ea:	4b56      	ldr	r3, [pc, #344]	@ (8009744 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80095ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ee:	f003 0303 	and.w	r3, r3, #3
 80095f2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80095f4:	4b53      	ldr	r3, [pc, #332]	@ (8009744 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80095f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095f8:	0a1b      	lsrs	r3, r3, #8
 80095fa:	f003 030f 	and.w	r3, r3, #15
 80095fe:	3301      	adds	r3, #1
 8009600:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009602:	4b50      	ldr	r3, [pc, #320]	@ (8009744 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009606:	091b      	lsrs	r3, r3, #4
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800960e:	4b4d      	ldr	r3, [pc, #308]	@ (8009744 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009612:	08db      	lsrs	r3, r3, #3
 8009614:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	fb02 f303 	mul.w	r3, r2, r3
 800961e:	ee07 3a90 	vmov	s15, r3
 8009622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009626:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	2b02      	cmp	r3, #2
 800962e:	d003      	beq.n	8009638 <HAL_RCC_GetSysClockFreq+0xe4>
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	2b03      	cmp	r3, #3
 8009634:	d022      	beq.n	800967c <HAL_RCC_GetSysClockFreq+0x128>
 8009636:	e043      	b.n	80096c0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	ee07 3a90 	vmov	s15, r3
 800963e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009642:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8009750 <HAL_RCC_GetSysClockFreq+0x1fc>
 8009646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800964a:	4b3e      	ldr	r3, [pc, #248]	@ (8009744 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800964c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800964e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009652:	ee07 3a90 	vmov	s15, r3
 8009656:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800965a:	ed97 6a01 	vldr	s12, [r7, #4]
 800965e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8009754 <HAL_RCC_GetSysClockFreq+0x200>
 8009662:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009666:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800966a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800966e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009676:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800967a:	e046      	b.n	800970a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	ee07 3a90 	vmov	s15, r3
 8009682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009686:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8009750 <HAL_RCC_GetSysClockFreq+0x1fc>
 800968a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800968e:	4b2d      	ldr	r3, [pc, #180]	@ (8009744 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009696:	ee07 3a90 	vmov	s15, r3
 800969a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800969e:	ed97 6a01 	vldr	s12, [r7, #4]
 80096a2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8009754 <HAL_RCC_GetSysClockFreq+0x200>
 80096a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80096aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80096ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80096b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096be:	e024      	b.n	800970a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80096c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c2:	ee07 3a90 	vmov	s15, r3
 80096c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	ee07 3a90 	vmov	s15, r3
 80096d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096d8:	4b1a      	ldr	r3, [pc, #104]	@ (8009744 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80096da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e0:	ee07 3a90 	vmov	s15, r3
 80096e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80096e8:	ed97 6a01 	vldr	s12, [r7, #4]
 80096ec:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8009754 <HAL_RCC_GetSysClockFreq+0x200>
 80096f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80096f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80096f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009704:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009708:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800970a:	4b0e      	ldr	r3, [pc, #56]	@ (8009744 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800970c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800970e:	0e1b      	lsrs	r3, r3, #24
 8009710:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009714:	3301      	adds	r3, #1
 8009716:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	ee07 3a90 	vmov	s15, r3
 800971e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009722:	edd7 6a07 	vldr	s13, [r7, #28]
 8009726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800972a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800972e:	ee17 3a90 	vmov	r3, s15
 8009732:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8009734:	6a3b      	ldr	r3, [r7, #32]
}
 8009736:	4618      	mov	r0, r3
 8009738:	372c      	adds	r7, #44	@ 0x2c
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	46020c00 	.word	0x46020c00
 8009748:	0800df9c 	.word	0x0800df9c
 800974c:	00f42400 	.word	0x00f42400
 8009750:	4b742400 	.word	0x4b742400
 8009754:	46000000 	.word	0x46000000

08009758 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800975c:	f7ff fefa 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 8009760:	4602      	mov	r2, r0
 8009762:	4b07      	ldr	r3, [pc, #28]	@ (8009780 <HAL_RCC_GetHCLKFreq+0x28>)
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	f003 030f 	and.w	r3, r3, #15
 800976a:	4906      	ldr	r1, [pc, #24]	@ (8009784 <HAL_RCC_GetHCLKFreq+0x2c>)
 800976c:	5ccb      	ldrb	r3, [r1, r3]
 800976e:	fa22 f303 	lsr.w	r3, r2, r3
 8009772:	4a05      	ldr	r2, [pc, #20]	@ (8009788 <HAL_RCC_GetHCLKFreq+0x30>)
 8009774:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8009776:	4b04      	ldr	r3, [pc, #16]	@ (8009788 <HAL_RCC_GetHCLKFreq+0x30>)
 8009778:	681b      	ldr	r3, [r3, #0]
}
 800977a:	4618      	mov	r0, r3
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	46020c00 	.word	0x46020c00
 8009784:	0800df84 	.word	0x0800df84
 8009788:	20000000 	.word	0x20000000

0800978c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8009790:	f7ff ffe2 	bl	8009758 <HAL_RCC_GetHCLKFreq>
 8009794:	4602      	mov	r2, r0
 8009796:	4b05      	ldr	r3, [pc, #20]	@ (80097ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	091b      	lsrs	r3, r3, #4
 800979c:	f003 0307 	and.w	r3, r3, #7
 80097a0:	4903      	ldr	r1, [pc, #12]	@ (80097b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097a2:	5ccb      	ldrb	r3, [r1, r3]
 80097a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	46020c00 	.word	0x46020c00
 80097b0:	0800df94 	.word	0x0800df94

080097b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80097b8:	f7ff ffce 	bl	8009758 <HAL_RCC_GetHCLKFreq>
 80097bc:	4602      	mov	r2, r0
 80097be:	4b05      	ldr	r3, [pc, #20]	@ (80097d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	0a1b      	lsrs	r3, r3, #8
 80097c4:	f003 0307 	and.w	r3, r3, #7
 80097c8:	4903      	ldr	r1, [pc, #12]	@ (80097d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80097ca:	5ccb      	ldrb	r3, [r1, r3]
 80097cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	46020c00 	.word	0x46020c00
 80097d8:	0800df94 	.word	0x0800df94

080097dc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80097e0:	f7ff ffba 	bl	8009758 <HAL_RCC_GetHCLKFreq>
 80097e4:	4602      	mov	r2, r0
 80097e6:	4b05      	ldr	r3, [pc, #20]	@ (80097fc <HAL_RCC_GetPCLK3Freq+0x20>)
 80097e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ea:	091b      	lsrs	r3, r3, #4
 80097ec:	f003 0307 	and.w	r3, r3, #7
 80097f0:	4903      	ldr	r1, [pc, #12]	@ (8009800 <HAL_RCC_GetPCLK3Freq+0x24>)
 80097f2:	5ccb      	ldrb	r3, [r1, r3]
 80097f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	46020c00 	.word	0x46020c00
 8009800:	0800df94 	.word	0x0800df94

08009804 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	221f      	movs	r2, #31
 8009812:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8009814:	4b15      	ldr	r3, [pc, #84]	@ (800986c <HAL_RCC_GetClockConfig+0x68>)
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	f003 0203 	and.w	r2, r3, #3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8009820:	4b12      	ldr	r3, [pc, #72]	@ (800986c <HAL_RCC_GetClockConfig+0x68>)
 8009822:	6a1b      	ldr	r3, [r3, #32]
 8009824:	f003 020f 	and.w	r2, r3, #15
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800982c:	4b0f      	ldr	r3, [pc, #60]	@ (800986c <HAL_RCC_GetClockConfig+0x68>)
 800982e:	6a1b      	ldr	r3, [r3, #32]
 8009830:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8009838:	4b0c      	ldr	r3, [pc, #48]	@ (800986c <HAL_RCC_GetClockConfig+0x68>)
 800983a:	6a1b      	ldr	r3, [r3, #32]
 800983c:	091b      	lsrs	r3, r3, #4
 800983e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8009846:	4b09      	ldr	r3, [pc, #36]	@ (800986c <HAL_RCC_GetClockConfig+0x68>)
 8009848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800984a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009852:	4b07      	ldr	r3, [pc, #28]	@ (8009870 <HAL_RCC_GetClockConfig+0x6c>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 020f 	and.w	r2, r3, #15
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	601a      	str	r2, [r3, #0]
}
 800985e:	bf00      	nop
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	46020c00 	.word	0x46020c00
 8009870:	40022000 	.word	0x40022000

08009874 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009874:	b480      	push	{r7}
 8009876:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8009878:	4b05      	ldr	r3, [pc, #20]	@ (8009890 <HAL_RCC_EnableCSS+0x1c>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a04      	ldr	r2, [pc, #16]	@ (8009890 <HAL_RCC_EnableCSS+0x1c>)
 800987e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009882:	6013      	str	r3, [r2, #0]
}
 8009884:	bf00      	nop
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	46020c00 	.word	0x46020c00

08009894 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009898:	4b07      	ldr	r3, [pc, #28]	@ (80098b8 <HAL_RCC_NMI_IRQHandler+0x24>)
 800989a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800989c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098a4:	d105      	bne.n	80098b2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80098a6:	4b04      	ldr	r3, [pc, #16]	@ (80098b8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80098a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80098ac:	659a      	str	r2, [r3, #88]	@ 0x58

    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80098ae:	f000 f805 	bl	80098bc <HAL_RCC_CSSCallback>
  }
}
 80098b2:	bf00      	nop
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	46020c00 	.word	0x46020c00

080098bc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80098bc:	b480      	push	{r7}
 80098be:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80098c0:	bf00      	nop
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
	...

080098cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80098d4:	4b3e      	ldr	r3, [pc, #248]	@ (80099d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80098d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098da:	f003 0304 	and.w	r3, r3, #4
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d003      	beq.n	80098ea <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80098e2:	f7fe fceb 	bl	80082bc <HAL_PWREx_GetVoltageRange>
 80098e6:	6178      	str	r0, [r7, #20]
 80098e8:	e019      	b.n	800991e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80098ea:	4b39      	ldr	r3, [pc, #228]	@ (80099d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80098ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098f0:	4a37      	ldr	r2, [pc, #220]	@ (80099d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80098f2:	f043 0304 	orr.w	r3, r3, #4
 80098f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80098fa:	4b35      	ldr	r3, [pc, #212]	@ (80099d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80098fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009900:	f003 0304 	and.w	r3, r3, #4
 8009904:	60fb      	str	r3, [r7, #12]
 8009906:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009908:	f7fe fcd8 	bl	80082bc <HAL_PWREx_GetVoltageRange>
 800990c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800990e:	4b30      	ldr	r3, [pc, #192]	@ (80099d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009914:	4a2e      	ldr	r2, [pc, #184]	@ (80099d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009916:	f023 0304 	bic.w	r3, r3, #4
 800991a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009924:	d003      	beq.n	800992e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800992c:	d109      	bne.n	8009942 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009934:	d202      	bcs.n	800993c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8009936:	2301      	movs	r3, #1
 8009938:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800993a:	e033      	b.n	80099a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800993c:	2300      	movs	r3, #0
 800993e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009940:	e030      	b.n	80099a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009948:	d208      	bcs.n	800995c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009950:	d102      	bne.n	8009958 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8009952:	2303      	movs	r3, #3
 8009954:	613b      	str	r3, [r7, #16]
 8009956:	e025      	b.n	80099a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	e035      	b.n	80099c8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009962:	d90f      	bls.n	8009984 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d109      	bne.n	800997e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009970:	d902      	bls.n	8009978 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8009972:	2300      	movs	r3, #0
 8009974:	613b      	str	r3, [r7, #16]
 8009976:	e015      	b.n	80099a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8009978:	2301      	movs	r3, #1
 800997a:	613b      	str	r3, [r7, #16]
 800997c:	e012      	b.n	80099a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800997e:	2300      	movs	r3, #0
 8009980:	613b      	str	r3, [r7, #16]
 8009982:	e00f      	b.n	80099a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800998a:	d109      	bne.n	80099a0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009992:	d102      	bne.n	800999a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8009994:	2301      	movs	r3, #1
 8009996:	613b      	str	r3, [r7, #16]
 8009998:	e004      	b.n	80099a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800999a:	2302      	movs	r3, #2
 800999c:	613b      	str	r3, [r7, #16]
 800999e:	e001      	b.n	80099a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80099a0:	2301      	movs	r3, #1
 80099a2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80099a4:	4b0b      	ldr	r3, [pc, #44]	@ (80099d4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f023 020f 	bic.w	r2, r3, #15
 80099ac:	4909      	ldr	r1, [pc, #36]	@ (80099d4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80099b4:	4b07      	ldr	r3, [pc, #28]	@ (80099d4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 030f 	and.w	r3, r3, #15
 80099bc:	693a      	ldr	r2, [r7, #16]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d001      	beq.n	80099c6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	e000      	b.n	80099c8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3718      	adds	r7, #24
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	46020c00 	.word	0x46020c00
 80099d4:	40022000 	.word	0x40022000

080099d8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80099d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099dc:	b0c8      	sub	sp, #288	@ 0x120
 80099de:	af00      	add	r7, sp, #0
 80099e0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80099e4:	2300      	movs	r3, #0
 80099e6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80099ea:	2300      	movs	r3, #0
 80099ec:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80099f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	f002 0401 	and.w	r4, r2, #1
 80099fc:	2500      	movs	r5, #0
 80099fe:	ea54 0305 	orrs.w	r3, r4, r5
 8009a02:	d00b      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8009a04:	4bd5      	ldr	r3, [pc, #852]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a0a:	f023 0103 	bic.w	r1, r3, #3
 8009a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a14:	4ad1      	ldr	r2, [pc, #836]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a16:	430b      	orrs	r3, r1
 8009a18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a24:	f002 0802 	and.w	r8, r2, #2
 8009a28:	f04f 0900 	mov.w	r9, #0
 8009a2c:	ea58 0309 	orrs.w	r3, r8, r9
 8009a30:	d00b      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8009a32:	4bca      	ldr	r3, [pc, #808]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a38:	f023 010c 	bic.w	r1, r3, #12
 8009a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a42:	4ac6      	ldr	r2, [pc, #792]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a44:	430b      	orrs	r3, r1
 8009a46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a52:	f002 0a04 	and.w	sl, r2, #4
 8009a56:	f04f 0b00 	mov.w	fp, #0
 8009a5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8009a5e:	d00b      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8009a60:	4bbe      	ldr	r3, [pc, #760]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a66:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a70:	4aba      	ldr	r2, [pc, #744]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a72:	430b      	orrs	r3, r1
 8009a74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a80:	f002 0308 	and.w	r3, r2, #8
 8009a84:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009a8e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009a92:	460b      	mov	r3, r1
 8009a94:	4313      	orrs	r3, r2
 8009a96:	d00b      	beq.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8009a98:	4bb0      	ldr	r3, [pc, #704]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009aa8:	4aac      	ldr	r2, [pc, #688]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009aaa:	430b      	orrs	r3, r1
 8009aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab8:	f002 0310 	and.w	r3, r2, #16
 8009abc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009ac6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009aca:	460b      	mov	r3, r1
 8009acc:	4313      	orrs	r3, r2
 8009ace:	d00b      	beq.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8009ad0:	4ba2      	ldr	r3, [pc, #648]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ad6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ae0:	4a9e      	ldr	r2, [pc, #632]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009ae2:	430b      	orrs	r3, r1
 8009ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009af4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009af8:	2300      	movs	r3, #0
 8009afa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009afe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009b02:	460b      	mov	r3, r1
 8009b04:	4313      	orrs	r3, r2
 8009b06:	d00b      	beq.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8009b08:	4b94      	ldr	r3, [pc, #592]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009b0e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b18:	4a90      	ldr	r2, [pc, #576]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b1a:	430b      	orrs	r3, r1
 8009b1c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b28:	f002 0320 	and.w	r3, r2, #32
 8009b2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009b30:	2300      	movs	r3, #0
 8009b32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009b36:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	d00b      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8009b40:	4b86      	ldr	r3, [pc, #536]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b46:	f023 0107 	bic.w	r1, r3, #7
 8009b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b50:	4a82      	ldr	r2, [pc, #520]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b52:	430b      	orrs	r3, r1
 8009b54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b60:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009b64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009b6e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009b72:	460b      	mov	r3, r1
 8009b74:	4313      	orrs	r3, r2
 8009b76:	d00b      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8009b78:	4b78      	ldr	r3, [pc, #480]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b7e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8009b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b88:	4a74      	ldr	r2, [pc, #464]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b8a:	430b      	orrs	r3, r1
 8009b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b98:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009b9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009ba6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009baa:	460b      	mov	r3, r1
 8009bac:	4313      	orrs	r3, r2
 8009bae:	d00b      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8009bb0:	4b6a      	ldr	r3, [pc, #424]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009bb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bc0:	4a66      	ldr	r2, [pc, #408]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009bc2:	430b      	orrs	r3, r1
 8009bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8009bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009bd8:	2300      	movs	r3, #0
 8009bda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009bde:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009be2:	460b      	mov	r3, r1
 8009be4:	4313      	orrs	r3, r2
 8009be6:	d00b      	beq.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8009be8:	4b5c      	ldr	r3, [pc, #368]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009bea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009bee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bf8:	4a58      	ldr	r2, [pc, #352]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009bfa:	430b      	orrs	r3, r1
 8009bfc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c08:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009c0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c10:	2300      	movs	r3, #0
 8009c12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009c16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	d00b      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8009c20:	4b4e      	ldr	r3, [pc, #312]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009c26:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8009c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c30:	4a4a      	ldr	r2, [pc, #296]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009c32:	430b      	orrs	r3, r1
 8009c34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8009c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c40:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009c44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c48:	2300      	movs	r3, #0
 8009c4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009c52:	460b      	mov	r3, r1
 8009c54:	4313      	orrs	r3, r2
 8009c56:	d00b      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8009c58:	4b40      	ldr	r3, [pc, #256]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009c5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009c5e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8009c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c68:	4a3c      	ldr	r2, [pc, #240]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009c6a:	430b      	orrs	r3, r1
 8009c6c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8009c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c78:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c80:	2300      	movs	r3, #0
 8009c82:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009c86:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	d00c      	beq.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8009c90:	4b32      	ldr	r3, [pc, #200]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009c92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009c96:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ca2:	4a2e      	ldr	r2, [pc, #184]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009ca4:	430b      	orrs	r3, r1
 8009ca6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb2:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8009cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009cc0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	d00c      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8009cca:	4b24      	ldr	r3, [pc, #144]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009cd0:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8009cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009cde:	430b      	orrs	r3, r1
 8009ce0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009cfa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009cfe:	460b      	mov	r3, r1
 8009d00:	4313      	orrs	r3, r2
 8009d02:	d00c      	beq.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8009d04:	4b15      	ldr	r3, [pc, #84]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d0a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8009d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d16:	4a11      	ldr	r2, [pc, #68]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009d18:	430b      	orrs	r3, r1
 8009d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8009d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d26:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009d2e:	2300      	movs	r3, #0
 8009d30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009d34:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	d010      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8009d3e:	4b07      	ldr	r3, [pc, #28]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d44:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d50:	4a02      	ldr	r2, [pc, #8]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009d52:	430b      	orrs	r3, r1
 8009d54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009d58:	e002      	b.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8009d5a:	bf00      	nop
 8009d5c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d68:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009d6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d70:	2300      	movs	r3, #0
 8009d72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d76:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	d04c      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009d88:	2b80      	cmp	r3, #128	@ 0x80
 8009d8a:	d02d      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009d8c:	2b80      	cmp	r3, #128	@ 0x80
 8009d8e:	d827      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009d90:	2b60      	cmp	r3, #96	@ 0x60
 8009d92:	d02b      	beq.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009d94:	2b60      	cmp	r3, #96	@ 0x60
 8009d96:	d823      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009d98:	2b40      	cmp	r3, #64	@ 0x40
 8009d9a:	d006      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8009d9c:	2b40      	cmp	r3, #64	@ 0x40
 8009d9e:	d81f      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d009      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009da4:	2b20      	cmp	r3, #32
 8009da6:	d011      	beq.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009da8:	e01a      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009daa:	4bc0      	ldr	r3, [pc, #768]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dae:	4abf      	ldr	r2, [pc, #764]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009db4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009db6:	e01a      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dbc:	3308      	adds	r3, #8
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f002 fd36 	bl	800c830 <RCCEx_PLL2_Config>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009dca:	e010      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dd0:	332c      	adds	r3, #44	@ 0x2c
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f002 fdc4 	bl	800c960 <RCCEx_PLL3_Config>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009dde:	e006      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009de6:	e002      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009de8:	bf00      	nop
 8009dea:	e000      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dee:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10d      	bne.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8009df6:	4bad      	ldr	r3, [pc, #692]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009df8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009dfc:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8009e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e08:	4aa8      	ldr	r2, [pc, #672]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e0a:	430b      	orrs	r3, r1
 8009e0c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009e10:	e003      	b.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e12:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009e16:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e22:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009e26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e30:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009e34:	460b      	mov	r3, r1
 8009e36:	4313      	orrs	r3, r2
 8009e38:	d053      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8009e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e46:	d033      	beq.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8009e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e4c:	d82c      	bhi.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009e4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e52:	d02f      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8009e54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e58:	d826      	bhi.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009e5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e5e:	d008      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8009e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e64:	d820      	bhi.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00a      	beq.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e6e:	d011      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009e70:	e01a      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e72:	4b8e      	ldr	r3, [pc, #568]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e76:	4a8d      	ldr	r2, [pc, #564]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e7c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009e7e:	e01a      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e84:	3308      	adds	r3, #8
 8009e86:	4618      	mov	r0, r3
 8009e88:	f002 fcd2 	bl	800c830 <RCCEx_PLL2_Config>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009e92:	e010      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e98:	332c      	adds	r3, #44	@ 0x2c
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f002 fd60 	bl	800c960 <RCCEx_PLL3_Config>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009ea6:	e006      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009eae:	e002      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009eb0:	bf00      	nop
 8009eb2:	e000      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eb6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10d      	bne.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8009ebe:	4b7b      	ldr	r3, [pc, #492]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009ec0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ec4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8009ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ecc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009ed0:	4a76      	ldr	r2, [pc, #472]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009ed2:	430b      	orrs	r3, r1
 8009ed4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009ed8:	e003      	b.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eda:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009ede:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8009ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eea:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009eee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009ef8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009efc:	460b      	mov	r3, r1
 8009efe:	4313      	orrs	r3, r2
 8009f00:	d046      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8009f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009f0a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009f0e:	d028      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009f10:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009f14:	d821      	bhi.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009f16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f1a:	d022      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009f1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f20:	d81b      	bhi.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009f22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009f26:	d01c      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009f28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009f2c:	d815      	bhi.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009f2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f32:	d008      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8009f34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f38:	d80f      	bhi.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d011      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f42:	d00e      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009f44:	e009      	b.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f002 fc6f 	bl	800c830 <RCCEx_PLL2_Config>
 8009f52:	4603      	mov	r3, r0
 8009f54:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009f58:	e004      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009f60:	e000      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8009f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f64:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10d      	bne.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009f6c:	4b4f      	ldr	r3, [pc, #316]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009f6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009f72:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009f7e:	4a4b      	ldr	r2, [pc, #300]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009f80:	430b      	orrs	r3, r1
 8009f82:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009f86:	e003      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f88:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009f8c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f98:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009f9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009fa6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009faa:	460b      	mov	r3, r1
 8009fac:	4313      	orrs	r3, r2
 8009fae:	d03f      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8009fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009fb8:	2b04      	cmp	r3, #4
 8009fba:	d81e      	bhi.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x622>
 8009fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc2:	bf00      	nop
 8009fc4:	0800a003 	.word	0x0800a003
 8009fc8:	08009fd9 	.word	0x08009fd9
 8009fcc:	08009fe7 	.word	0x08009fe7
 8009fd0:	0800a003 	.word	0x0800a003
 8009fd4:	0800a003 	.word	0x0800a003
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009fd8:	4b34      	ldr	r3, [pc, #208]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fdc:	4a33      	ldr	r2, [pc, #204]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009fde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fe2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009fe4:	e00e      	b.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fea:	332c      	adds	r3, #44	@ 0x2c
 8009fec:	4618      	mov	r0, r3
 8009fee:	f002 fcb7 	bl	800c960 <RCCEx_PLL3_Config>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009ff8:	e004      	b.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a000:	e000      	b.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800a002:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a004:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10d      	bne.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800a00c:	4b27      	ldr	r3, [pc, #156]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a00e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a012:	f023 0107 	bic.w	r1, r3, #7
 800a016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a01a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a01e:	4a23      	ldr	r2, [pc, #140]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a020:	430b      	orrs	r3, r1
 800a022:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a026:	e003      	b.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a028:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a02c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800a030:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a038:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a03c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a03e:	2300      	movs	r3, #0
 800a040:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a042:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a046:	460b      	mov	r3, r1
 800a048:	4313      	orrs	r3, r2
 800a04a:	d04c      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800a04c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a050:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a054:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a058:	d02a      	beq.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800a05a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a05e:	d821      	bhi.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800a060:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a064:	d026      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800a066:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a06a:	d81b      	bhi.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800a06c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a070:	d00e      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a072:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a076:	d815      	bhi.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d01d      	beq.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800a07c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a080:	d110      	bne.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a082:	4b0a      	ldr	r3, [pc, #40]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a086:	4a09      	ldr	r2, [pc, #36]	@ (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a08c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800a08e:	e014      	b.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a090:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a094:	332c      	adds	r3, #44	@ 0x2c
 800a096:	4618      	mov	r0, r3
 800a098:	f002 fc62 	bl	800c960 <RCCEx_PLL3_Config>
 800a09c:	4603      	mov	r3, r0
 800a09e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a0a2:	e00a      	b.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a0aa:	e006      	b.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800a0ac:	46020c00 	.word	0x46020c00
        break;
 800a0b0:	bf00      	nop
 800a0b2:	e002      	b.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800a0b4:	bf00      	nop
 800a0b6:	e000      	b.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800a0b8:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a0ba:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10d      	bne.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800a0c2:	4baf      	ldr	r3, [pc, #700]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a0c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a0c8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a0cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a0d4:	4aaa      	ldr	r2, [pc, #680]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a0d6:	430b      	orrs	r3, r1
 800a0d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800a0dc:	e003      	b.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0de:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a0e2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a0e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a0f2:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	677b      	str	r3, [r7, #116]	@ 0x74
 800a0f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	4313      	orrs	r3, r2
 800a100:	f000 80b5 	beq.w	800a26e <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a104:	2300      	movs	r3, #0
 800a106:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a10a:	4b9d      	ldr	r3, [pc, #628]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a10c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a110:	f003 0304 	and.w	r3, r3, #4
 800a114:	2b00      	cmp	r3, #0
 800a116:	d113      	bne.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a118:	4b99      	ldr	r3, [pc, #612]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a11a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a11e:	4a98      	ldr	r2, [pc, #608]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a120:	f043 0304 	orr.w	r3, r3, #4
 800a124:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a128:	4b95      	ldr	r3, [pc, #596]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a12a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a12e:	f003 0304 	and.w	r3, r3, #4
 800a132:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800a136:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800a13a:	2301      	movs	r3, #1
 800a13c:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a140:	4b90      	ldr	r3, [pc, #576]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800a142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a144:	4a8f      	ldr	r2, [pc, #572]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800a146:	f043 0301 	orr.w	r3, r3, #1
 800a14a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a14c:	f7f8 f810 	bl	8002170 <HAL_GetTick>
 800a150:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a154:	e00b      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a156:	f7f8 f80b 	bl	8002170 <HAL_GetTick>
 800a15a:	4602      	mov	r2, r0
 800a15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	2b02      	cmp	r3, #2
 800a164:	d903      	bls.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800a166:	2303      	movs	r3, #3
 800a168:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a16c:	e005      	b.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a16e:	4b85      	ldr	r3, [pc, #532]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800a170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b00      	cmp	r3, #0
 800a178:	d0ed      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800a17a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d165      	bne.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a182:	4b7f      	ldr	r3, [pc, #508]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a18c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800a190:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a194:	2b00      	cmp	r3, #0
 800a196:	d023      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800a198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a19c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800a1a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d01b      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a1a8:	4b75      	ldr	r3, [pc, #468]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a1b6:	4b72      	ldr	r3, [pc, #456]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1bc:	4a70      	ldr	r2, [pc, #448]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a1c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a1c6:	4b6e      	ldr	r3, [pc, #440]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1cc:	4a6c      	ldr	r2, [pc, #432]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a1d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a1d6:	4a6a      	ldr	r2, [pc, #424]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a1dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a1e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a1e4:	f003 0301 	and.w	r3, r3, #1
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d019      	beq.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1ec:	f7f7 ffc0 	bl	8002170 <HAL_GetTick>
 800a1f0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1f4:	e00d      	b.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1f6:	f7f7 ffbb 	bl	8002170 <HAL_GetTick>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a200:	1ad2      	subs	r2, r2, r3
 800a202:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a206:	429a      	cmp	r2, r3
 800a208:	d903      	bls.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800a210:	e006      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a212:	4b5b      	ldr	r3, [pc, #364]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a218:	f003 0302 	and.w	r3, r3, #2
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d0ea      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800a220:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10d      	bne.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800a228:	4b55      	ldr	r3, [pc, #340]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a22a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a22e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a236:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800a23a:	4a51      	ldr	r2, [pc, #324]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a23c:	430b      	orrs	r3, r1
 800a23e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a242:	e008      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a244:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a248:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800a24c:	e003      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a24e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a252:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a256:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d107      	bne.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a25e:	4b48      	ldr	r3, [pc, #288]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a260:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a264:	4a46      	ldr	r2, [pc, #280]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a266:	f023 0304 	bic.w	r3, r3, #4
 800a26a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800a26e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a276:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a27a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a27c:	2300      	movs	r3, #0
 800a27e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a280:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a284:	460b      	mov	r3, r1
 800a286:	4313      	orrs	r3, r2
 800a288:	d042      	beq.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800a28a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a28e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a292:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a296:	d022      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x906>
 800a298:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a29c:	d81b      	bhi.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a29e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2a2:	d011      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800a2a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2a8:	d815      	bhi.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d019      	beq.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800a2ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2b2:	d110      	bne.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a2b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2b8:	3308      	adds	r3, #8
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f002 fab8 	bl	800c830 <RCCEx_PLL2_Config>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a2c6:	e00d      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2c8:	4b2d      	ldr	r3, [pc, #180]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a2ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2cc:	4a2c      	ldr	r2, [pc, #176]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a2ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2d2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800a2d4:	e006      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a2dc:	e002      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800a2de:	bf00      	nop
 800a2e0:	e000      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800a2e2:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a2e4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10d      	bne.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800a2ec:	4b24      	ldr	r3, [pc, #144]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a2ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a2f2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800a2f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a2fe:	4a20      	ldr	r2, [pc, #128]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a300:	430b      	orrs	r3, r1
 800a302:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a306:	e003      	b.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a308:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a30c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a318:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a31c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a31e:	2300      	movs	r3, #0
 800a320:	667b      	str	r3, [r7, #100]	@ 0x64
 800a322:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a326:	460b      	mov	r3, r1
 800a328:	4313      	orrs	r3, r2
 800a32a:	d031      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800a32c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a330:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a334:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a338:	d00b      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800a33a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a33e:	d804      	bhi.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800a340:	2b00      	cmp	r3, #0
 800a342:	d008      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800a344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a348:	d007      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a350:	e004      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a352:	bf00      	nop
 800a354:	e002      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a356:	bf00      	nop
 800a358:	e000      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a35a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a35c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a360:	2b00      	cmp	r3, #0
 800a362:	d111      	bne.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800a364:	4b06      	ldr	r3, [pc, #24]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a366:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a36a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a36e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a372:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a376:	4a02      	ldr	r2, [pc, #8]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a378:	430b      	orrs	r3, r1
 800a37a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a37e:	e007      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800a380:	46020c00 	.word	0x46020c00
 800a384:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a388:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a38c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800a390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a39c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a39e:	2300      	movs	r3, #0
 800a3a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	d00c      	beq.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800a3ac:	4bb2      	ldr	r3, [pc, #712]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a3b2:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800a3b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a3be:	4aae      	ldr	r2, [pc, #696]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3c0:	430b      	orrs	r3, r1
 800a3c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800a3c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a3d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a3d8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a3dc:	460b      	mov	r3, r1
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	d019      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800a3e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a3ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3ee:	d105      	bne.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a3f0:	4ba1      	ldr	r3, [pc, #644]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f4:	4aa0      	ldr	r2, [pc, #640]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a3fa:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800a3fc:	4b9e      	ldr	r3, [pc, #632]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a402:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a406:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a40a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a40e:	4a9a      	ldr	r2, [pc, #616]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a410:	430b      	orrs	r3, r1
 800a412:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800a416:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a422:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a424:	2300      	movs	r3, #0
 800a426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a428:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a42c:	460b      	mov	r3, r1
 800a42e:	4313      	orrs	r3, r2
 800a430:	d00c      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800a432:	4b91      	ldr	r3, [pc, #580]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a438:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a43c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a440:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a444:	4a8c      	ldr	r2, [pc, #560]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a446:	430b      	orrs	r3, r1
 800a448:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800a44c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a454:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a458:	643b      	str	r3, [r7, #64]	@ 0x40
 800a45a:	2300      	movs	r3, #0
 800a45c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a45e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a462:	460b      	mov	r3, r1
 800a464:	4313      	orrs	r3, r2
 800a466:	d00c      	beq.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800a468:	4b83      	ldr	r3, [pc, #524]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a46a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a46e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a476:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a47a:	4a7f      	ldr	r2, [pc, #508]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a47c:	430b      	orrs	r3, r1
 800a47e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800a482:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a48e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a490:	2300      	movs	r3, #0
 800a492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a494:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a498:	460b      	mov	r3, r1
 800a49a:	4313      	orrs	r3, r2
 800a49c:	d00c      	beq.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800a49e:	4b76      	ldr	r3, [pc, #472]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a4a4:	f023 0118 	bic.w	r1, r3, #24
 800a4a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4ac:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800a4b0:	4a71      	ldr	r2, [pc, #452]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4b2:	430b      	orrs	r3, r1
 800a4b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a4b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800a4c4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	d032      	beq.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800a4d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a4dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a4e0:	d105      	bne.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4e2:	4b65      	ldr	r3, [pc, #404]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4e6:	4a64      	ldr	r2, [pc, #400]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4ec:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800a4ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a4f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a4fa:	d108      	bne.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a4fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a500:	3308      	adds	r3, #8
 800a502:	4618      	mov	r0, r3
 800a504:	f002 f994 	bl	800c830 <RCCEx_PLL2_Config>
 800a508:	4603      	mov	r3, r0
 800a50a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800a50e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10d      	bne.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800a516:	4b58      	ldr	r3, [pc, #352]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a518:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a51c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a520:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a524:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a528:	4a53      	ldr	r2, [pc, #332]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a52a:	430b      	orrs	r3, r1
 800a52c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a530:	e003      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a532:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a536:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800a53a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a542:	2100      	movs	r1, #0
 800a544:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a54c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a550:	460b      	mov	r3, r1
 800a552:	4313      	orrs	r3, r2
 800a554:	d04a      	beq.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800a556:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a55a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a55e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a562:	d01e      	beq.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800a564:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a568:	d825      	bhi.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a56a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a56e:	d00e      	beq.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800a570:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a574:	d81f      	bhi.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a576:	2b00      	cmp	r3, #0
 800a578:	d021      	beq.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800a57a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a57e:	d11a      	bne.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a580:	4b3d      	ldr	r3, [pc, #244]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a584:	4a3c      	ldr	r2, [pc, #240]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a58a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a58c:	e018      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a58e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a592:	3308      	adds	r3, #8
 800a594:	4618      	mov	r0, r3
 800a596:	f002 f94b 	bl	800c830 <RCCEx_PLL2_Config>
 800a59a:	4603      	mov	r3, r0
 800a59c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a5a0:	e00e      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a5a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5a6:	332c      	adds	r3, #44	@ 0x2c
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f002 f9d9 	bl	800c960 <RCCEx_PLL3_Config>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a5b4:	e004      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a5bc:	e000      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800a5be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5c0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10d      	bne.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800a5c8:	4b2b      	ldr	r3, [pc, #172]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a5ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a5ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a5d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5d6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a5da:	4927      	ldr	r1, [pc, #156]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a5e2:	e003      	b.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5e4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a5e8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800a5ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800a5f8:	623b      	str	r3, [r7, #32]
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a602:	460b      	mov	r3, r1
 800a604:	4313      	orrs	r3, r2
 800a606:	d03d      	beq.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800a608:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a60c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a610:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a614:	d00e      	beq.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800a616:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a61a:	d815      	bhi.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d017      	beq.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a620:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a624:	d110      	bne.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a626:	4b14      	ldr	r3, [pc, #80]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a62a:	4a13      	ldr	r2, [pc, #76]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a62c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a630:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a632:	e00e      	b.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a638:	3308      	adds	r3, #8
 800a63a:	4618      	mov	r0, r3
 800a63c:	f002 f8f8 	bl	800c830 <RCCEx_PLL2_Config>
 800a640:	4603      	mov	r3, r0
 800a642:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a646:	e004      	b.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a64e:	e000      	b.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a650:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a652:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a656:	2b00      	cmp	r3, #0
 800a658:	d110      	bne.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800a65a:	4b07      	ldr	r3, [pc, #28]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a65c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a660:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a664:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a66c:	4902      	ldr	r1, [pc, #8]	@ (800a678 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a66e:	4313      	orrs	r3, r2
 800a670:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800a674:	e006      	b.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800a676:	bf00      	nop
 800a678:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a67c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a680:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800a684:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a690:	61bb      	str	r3, [r7, #24]
 800a692:	2300      	movs	r3, #0
 800a694:	61fb      	str	r3, [r7, #28]
 800a696:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a69a:	460b      	mov	r3, r1
 800a69c:	4313      	orrs	r3, r2
 800a69e:	d00c      	beq.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800a6a0:	4b68      	ldr	r3, [pc, #416]	@ (800a844 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a6a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a6a6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800a6aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a6b2:	4964      	ldr	r1, [pc, #400]	@ (800a844 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a6ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	6139      	str	r1, [r7, #16]
 800a6c6:	f003 0302 	and.w	r3, r3, #2
 800a6ca:	617b      	str	r3, [r7, #20]
 800a6cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	d036      	beq.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800a6d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00c      	beq.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800a6e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a6e6:	d113      	bne.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a6e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6ec:	3308      	adds	r3, #8
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f002 f89e 	bl	800c830 <RCCEx_PLL2_Config>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a6fa:	e00d      	b.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a6fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a700:	332c      	adds	r3, #44	@ 0x2c
 800a702:	4618      	mov	r0, r3
 800a704:	f002 f92c 	bl	800c960 <RCCEx_PLL3_Config>
 800a708:	4603      	mov	r3, r0
 800a70a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a70e:	e003      	b.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800a710:	2301      	movs	r3, #1
 800a712:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a716:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a718:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10d      	bne.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800a720:	4b48      	ldr	r3, [pc, #288]	@ (800a844 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a722:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a726:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a72a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a72e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800a732:	4944      	ldr	r1, [pc, #272]	@ (800a844 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a734:	4313      	orrs	r3, r2
 800a736:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a73a:	e003      	b.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a73c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a740:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74c:	2100      	movs	r1, #0
 800a74e:	60b9      	str	r1, [r7, #8]
 800a750:	f003 0304 	and.w	r3, r3, #4
 800a754:	60fb      	str	r3, [r7, #12]
 800a756:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a75a:	460b      	mov	r3, r1
 800a75c:	4313      	orrs	r3, r2
 800a75e:	d024      	beq.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800a760:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a764:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d108      	bne.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a76c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a770:	332c      	adds	r3, #44	@ 0x2c
 800a772:	4618      	mov	r0, r3
 800a774:	f002 f8f4 	bl	800c960 <RCCEx_PLL3_Config>
 800a778:	4603      	mov	r3, r0
 800a77a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800a77e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a782:	2b00      	cmp	r3, #0
 800a784:	d10d      	bne.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800a786:	4b2f      	ldr	r3, [pc, #188]	@ (800a844 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a788:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a78c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800a790:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a794:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a798:	492a      	ldr	r1, [pc, #168]	@ (800a844 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a79a:	4313      	orrs	r3, r2
 800a79c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a7a0:	e003      	b.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a7a6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800a7aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	6039      	str	r1, [r7, #0]
 800a7b6:	f003 0308 	and.w	r3, r3, #8
 800a7ba:	607b      	str	r3, [r7, #4]
 800a7bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	d036      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800a7c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a7ce:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a7d2:	d00d      	beq.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800a7d4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a7d8:	d811      	bhi.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a7da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7de:	d012      	beq.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a7e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7e4:	d80b      	bhi.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00d      	beq.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a7ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7ee:	d106      	bne.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a7f0:	4b14      	ldr	r3, [pc, #80]	@ (800a844 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a7f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7f4:	4a13      	ldr	r2, [pc, #76]	@ (800a844 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a7f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a7fa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800a7fc:	e004      	b.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a804:	e000      	b.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800a806:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a808:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d10d      	bne.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800a810:	4b0c      	ldr	r3, [pc, #48]	@ (800a844 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a812:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a816:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800a81a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a81e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a822:	4908      	ldr	r1, [pc, #32]	@ (800a844 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a824:	4313      	orrs	r3, r2
 800a826:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a82a:	e003      	b.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a82c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a830:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800a834:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800a838:	4618      	mov	r0, r3
 800a83a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a83e:	46bd      	mov	sp, r7
 800a840:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a844:	46020c00 	.word	0x46020c00

0800a848 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a848:	b480      	push	{r7}
 800a84a:	b089      	sub	sp, #36	@ 0x24
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800a850:	4ba6      	ldr	r3, [pc, #664]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a858:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a85a:	4ba4      	ldr	r3, [pc, #656]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a85c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a85e:	f003 0303 	and.w	r3, r3, #3
 800a862:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a864:	4ba1      	ldr	r3, [pc, #644]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a868:	0a1b      	lsrs	r3, r3, #8
 800a86a:	f003 030f 	and.w	r3, r3, #15
 800a86e:	3301      	adds	r3, #1
 800a870:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a872:	4b9e      	ldr	r3, [pc, #632]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a876:	091b      	lsrs	r3, r3, #4
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a87e:	4b9b      	ldr	r3, [pc, #620]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a882:	08db      	lsrs	r3, r3, #3
 800a884:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	fb02 f303 	mul.w	r3, r2, r3
 800a88e:	ee07 3a90 	vmov	s15, r3
 800a892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a896:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2b03      	cmp	r3, #3
 800a89e:	d062      	beq.n	800a966 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	2b03      	cmp	r3, #3
 800a8a4:	f200 8081 	bhi.w	800a9aa <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d024      	beq.n	800a8f8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d17a      	bne.n	800a9aa <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	ee07 3a90 	vmov	s15, r3
 800a8ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8be:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800aaf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a8c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8c6:	4b89      	ldr	r3, [pc, #548]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ce:	ee07 3a90 	vmov	s15, r3
 800a8d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8da:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800aaf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a8de:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a8e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a8ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8f6:	e08f      	b.n	800aa18 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a8f8:	4b7c      	ldr	r3, [pc, #496]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a900:	2b00      	cmp	r3, #0
 800a902:	d005      	beq.n	800a910 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800a904:	4b79      	ldr	r3, [pc, #484]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	0f1b      	lsrs	r3, r3, #28
 800a90a:	f003 030f 	and.w	r3, r3, #15
 800a90e:	e006      	b.n	800a91e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800a910:	4b76      	ldr	r3, [pc, #472]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a912:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a916:	041b      	lsls	r3, r3, #16
 800a918:	0f1b      	lsrs	r3, r3, #28
 800a91a:	f003 030f 	and.w	r3, r3, #15
 800a91e:	4a76      	ldr	r2, [pc, #472]	@ (800aaf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a924:	ee07 3a90 	vmov	s15, r3
 800a928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	ee07 3a90 	vmov	s15, r3
 800a932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	ee07 3a90 	vmov	s15, r3
 800a940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a944:	ed97 6a02 	vldr	s12, [r7, #8]
 800a948:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800aaf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a94c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a950:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a954:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a958:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a95c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a960:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a964:	e058      	b.n	800aa18 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	ee07 3a90 	vmov	s15, r3
 800a96c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a970:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aaf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a978:	4b5c      	ldr	r3, [pc, #368]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a97a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a97c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a980:	ee07 3a90 	vmov	s15, r3
 800a984:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a988:	ed97 6a02 	vldr	s12, [r7, #8]
 800a98c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800aaf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a990:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a994:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a998:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a99c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a9a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9a8:	e036      	b.n	800aa18 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a9aa:	4b50      	ldr	r3, [pc, #320]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d005      	beq.n	800a9c2 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800a9b6:	4b4d      	ldr	r3, [pc, #308]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	0f1b      	lsrs	r3, r3, #28
 800a9bc:	f003 030f 	and.w	r3, r3, #15
 800a9c0:	e006      	b.n	800a9d0 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800a9c2:	4b4a      	ldr	r3, [pc, #296]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a9c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a9c8:	041b      	lsls	r3, r3, #16
 800a9ca:	0f1b      	lsrs	r3, r3, #28
 800a9cc:	f003 030f 	and.w	r3, r3, #15
 800a9d0:	4a49      	ldr	r2, [pc, #292]	@ (800aaf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a9d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9d6:	ee07 3a90 	vmov	s15, r3
 800a9da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	ee07 3a90 	vmov	s15, r3
 800a9e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	ee07 3a90 	vmov	s15, r3
 800a9f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9fa:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800aaf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a9fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800aa0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa16:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800aa18:	4b34      	ldr	r3, [pc, #208]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aa1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d017      	beq.n	800aa54 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800aa24:	4b31      	ldr	r3, [pc, #196]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aa26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa28:	0a5b      	lsrs	r3, r3, #9
 800aa2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa2e:	ee07 3a90 	vmov	s15, r3
 800aa32:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800aa36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa3a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800aa3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa4a:	ee17 2a90 	vmov	r2, s15
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	601a      	str	r2, [r3, #0]
 800aa52:	e002      	b.n	800aa5a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800aa5a:	4b24      	ldr	r3, [pc, #144]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aa5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d017      	beq.n	800aa96 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800aa66:	4b21      	ldr	r3, [pc, #132]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aa68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa6a:	0c1b      	lsrs	r3, r3, #16
 800aa6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa70:	ee07 3a90 	vmov	s15, r3
 800aa74:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800aa78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa7c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800aa80:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa8c:	ee17 2a90 	vmov	r2, s15
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	605a      	str	r2, [r3, #4]
 800aa94:	e002      	b.n	800aa9c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800aa9c:	4b13      	ldr	r3, [pc, #76]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aa9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d017      	beq.n	800aad8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800aaa8:	4b10      	ldr	r3, [pc, #64]	@ (800aaec <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aaaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaac:	0e1b      	lsrs	r3, r3, #24
 800aaae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aab2:	ee07 3a90 	vmov	s15, r3
 800aab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800aaba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aabe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800aac2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aace:	ee17 2a90 	vmov	r2, s15
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800aad6:	e002      	b.n	800aade <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	609a      	str	r2, [r3, #8]
}
 800aade:	bf00      	nop
 800aae0:	3724      	adds	r7, #36	@ 0x24
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	46020c00 	.word	0x46020c00
 800aaf0:	4b742400 	.word	0x4b742400
 800aaf4:	46000000 	.word	0x46000000
 800aaf8:	0800df9c 	.word	0x0800df9c

0800aafc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b089      	sub	sp, #36	@ 0x24
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800ab04:	4ba6      	ldr	r3, [pc, #664]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab0c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800ab0e:	4ba4      	ldr	r3, [pc, #656]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab12:	f003 0303 	and.w	r3, r3, #3
 800ab16:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800ab18:	4ba1      	ldr	r3, [pc, #644]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab1c:	0a1b      	lsrs	r3, r3, #8
 800ab1e:	f003 030f 	and.w	r3, r3, #15
 800ab22:	3301      	adds	r3, #1
 800ab24:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800ab26:	4b9e      	ldr	r3, [pc, #632]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab2a:	091b      	lsrs	r3, r3, #4
 800ab2c:	f003 0301 	and.w	r3, r3, #1
 800ab30:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800ab32:	4b9b      	ldr	r3, [pc, #620]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab36:	08db      	lsrs	r3, r3, #3
 800ab38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	fb02 f303 	mul.w	r3, r2, r3
 800ab42:	ee07 3a90 	vmov	s15, r3
 800ab46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab4a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	2b03      	cmp	r3, #3
 800ab52:	d062      	beq.n	800ac1a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	2b03      	cmp	r3, #3
 800ab58:	f200 8081 	bhi.w	800ac5e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d024      	beq.n	800abac <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d17a      	bne.n	800ac5e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	ee07 3a90 	vmov	s15, r3
 800ab6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab72:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800ada4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800ab76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab7a:	4b89      	ldr	r3, [pc, #548]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab82:	ee07 3a90 	vmov	s15, r3
 800ab86:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab8a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab8e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ab92:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ab96:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abaa:	e08f      	b.n	800accc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800abac:	4b7c      	ldr	r3, [pc, #496]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d005      	beq.n	800abc4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800abb8:	4b79      	ldr	r3, [pc, #484]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	0f1b      	lsrs	r3, r3, #28
 800abbe:	f003 030f 	and.w	r3, r3, #15
 800abc2:	e006      	b.n	800abd2 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800abc4:	4b76      	ldr	r3, [pc, #472]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800abca:	041b      	lsls	r3, r3, #16
 800abcc:	0f1b      	lsrs	r3, r3, #28
 800abce:	f003 030f 	and.w	r3, r3, #15
 800abd2:	4a76      	ldr	r2, [pc, #472]	@ (800adac <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800abd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abd8:	ee07 3a90 	vmov	s15, r3
 800abdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	ee07 3a90 	vmov	s15, r3
 800abe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	ee07 3a90 	vmov	s15, r3
 800abf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abf8:	ed97 6a02 	vldr	s12, [r7, #8]
 800abfc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ac00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800ac10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac18:	e058      	b.n	800accc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	ee07 3a90 	vmov	s15, r3
 800ac20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac24:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ada4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800ac28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac2c:	4b5c      	ldr	r3, [pc, #368]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ac2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac34:	ee07 3a90 	vmov	s15, r3
 800ac38:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac3c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac40:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ac44:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ac48:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac50:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ac54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac5c:	e036      	b.n	800accc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ac5e:	4b50      	ldr	r3, [pc, #320]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ac60:	689b      	ldr	r3, [r3, #8]
 800ac62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d005      	beq.n	800ac76 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800ac6a:	4b4d      	ldr	r3, [pc, #308]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	0f1b      	lsrs	r3, r3, #28
 800ac70:	f003 030f 	and.w	r3, r3, #15
 800ac74:	e006      	b.n	800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800ac76:	4b4a      	ldr	r3, [pc, #296]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ac78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ac7c:	041b      	lsls	r3, r3, #16
 800ac7e:	0f1b      	lsrs	r3, r3, #28
 800ac80:	f003 030f 	and.w	r3, r3, #15
 800ac84:	4a49      	ldr	r2, [pc, #292]	@ (800adac <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800ac86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac8a:	ee07 3a90 	vmov	s15, r3
 800ac8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	ee07 3a90 	vmov	s15, r3
 800ac98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	ee07 3a90 	vmov	s15, r3
 800aca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acaa:	ed97 6a02 	vldr	s12, [r7, #8]
 800acae:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800ada8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800acb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800acc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acca:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800accc:	4b34      	ldr	r3, [pc, #208]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800acce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d017      	beq.n	800ad08 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800acd8:	4b31      	ldr	r3, [pc, #196]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800acda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acdc:	0a5b      	lsrs	r3, r3, #9
 800acde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ace2:	ee07 3a90 	vmov	s15, r3
 800ace6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800acea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800acee:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800acf2:	edd7 6a07 	vldr	s13, [r7, #28]
 800acf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acfe:	ee17 2a90 	vmov	r2, s15
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	601a      	str	r2, [r3, #0]
 800ad06:	e002      	b.n	800ad0e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800ad0e:	4b24      	ldr	r3, [pc, #144]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ad10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d017      	beq.n	800ad4a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ad1a:	4b21      	ldr	r3, [pc, #132]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ad1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad1e:	0c1b      	lsrs	r3, r3, #16
 800ad20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad24:	ee07 3a90 	vmov	s15, r3
 800ad28:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800ad2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad30:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ad34:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad40:	ee17 2a90 	vmov	r2, s15
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	605a      	str	r2, [r3, #4]
 800ad48:	e002      	b.n	800ad50 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800ad50:	4b13      	ldr	r3, [pc, #76]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ad52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d017      	beq.n	800ad8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ad5c:	4b10      	ldr	r3, [pc, #64]	@ (800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ad5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad60:	0e1b      	lsrs	r3, r3, #24
 800ad62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad66:	ee07 3a90 	vmov	s15, r3
 800ad6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800ad6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad72:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ad76:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad82:	ee17 2a90 	vmov	r2, s15
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ad8a:	e002      	b.n	800ad92 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	609a      	str	r2, [r3, #8]
}
 800ad92:	bf00      	nop
 800ad94:	3724      	adds	r7, #36	@ 0x24
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop
 800ada0:	46020c00 	.word	0x46020c00
 800ada4:	4b742400 	.word	0x4b742400
 800ada8:	46000000 	.word	0x46000000
 800adac:	0800df9c 	.word	0x0800df9c

0800adb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b089      	sub	sp, #36	@ 0x24
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800adb8:	4ba6      	ldr	r3, [pc, #664]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800adba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adc0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800adc2:	4ba4      	ldr	r3, [pc, #656]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800adc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adc6:	f003 0303 	and.w	r3, r3, #3
 800adca:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800adcc:	4ba1      	ldr	r3, [pc, #644]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800adce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800add0:	0a1b      	lsrs	r3, r3, #8
 800add2:	f003 030f 	and.w	r3, r3, #15
 800add6:	3301      	adds	r3, #1
 800add8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800adda:	4b9e      	ldr	r3, [pc, #632]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800addc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adde:	091b      	lsrs	r3, r3, #4
 800ade0:	f003 0301 	and.w	r3, r3, #1
 800ade4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800ade6:	4b9b      	ldr	r3, [pc, #620]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ade8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800adea:	08db      	lsrs	r3, r3, #3
 800adec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	fb02 f303 	mul.w	r3, r2, r3
 800adf6:	ee07 3a90 	vmov	s15, r3
 800adfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adfe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	2b03      	cmp	r3, #3
 800ae06:	d062      	beq.n	800aece <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	2b03      	cmp	r3, #3
 800ae0c:	f200 8081 	bhi.w	800af12 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d024      	beq.n	800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	d17a      	bne.n	800af12 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	ee07 3a90 	vmov	s15, r3
 800ae22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae26:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800b058 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800ae2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae2e:	4b89      	ldr	r3, [pc, #548]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae36:	ee07 3a90 	vmov	s15, r3
 800ae3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae3e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae42:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ae46:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ae4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae52:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ae56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae5a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800ae5e:	e08f      	b.n	800af80 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ae60:	4b7c      	ldr	r3, [pc, #496]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d005      	beq.n	800ae78 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800ae6c:	4b79      	ldr	r3, [pc, #484]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	0f1b      	lsrs	r3, r3, #28
 800ae72:	f003 030f 	and.w	r3, r3, #15
 800ae76:	e006      	b.n	800ae86 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800ae78:	4b76      	ldr	r3, [pc, #472]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ae7e:	041b      	lsls	r3, r3, #16
 800ae80:	0f1b      	lsrs	r3, r3, #28
 800ae82:	f003 030f 	and.w	r3, r3, #15
 800ae86:	4a76      	ldr	r2, [pc, #472]	@ (800b060 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800ae88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae8c:	ee07 3a90 	vmov	s15, r3
 800ae90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	ee07 3a90 	vmov	s15, r3
 800ae9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	ee07 3a90 	vmov	s15, r3
 800aea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeac:	ed97 6a02 	vldr	s12, [r7, #8]
 800aeb0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800aeb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aebc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aec0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800aec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aec8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aecc:	e058      	b.n	800af80 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	ee07 3a90 	vmov	s15, r3
 800aed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aed8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b058 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800aedc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aee0:	4b5c      	ldr	r3, [pc, #368]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aee8:	ee07 3a90 	vmov	s15, r3
 800aeec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800aef0:	ed97 6a02 	vldr	s12, [r7, #8]
 800aef4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800aef8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800aefc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800af00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af04:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800af08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af10:	e036      	b.n	800af80 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800af12:	4b50      	ldr	r3, [pc, #320]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d005      	beq.n	800af2a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800af1e:	4b4d      	ldr	r3, [pc, #308]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	0f1b      	lsrs	r3, r3, #28
 800af24:	f003 030f 	and.w	r3, r3, #15
 800af28:	e006      	b.n	800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800af2a:	4b4a      	ldr	r3, [pc, #296]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800af2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800af30:	041b      	lsls	r3, r3, #16
 800af32:	0f1b      	lsrs	r3, r3, #28
 800af34:	f003 030f 	and.w	r3, r3, #15
 800af38:	4a49      	ldr	r2, [pc, #292]	@ (800b060 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800af3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af3e:	ee07 3a90 	vmov	s15, r3
 800af42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	ee07 3a90 	vmov	s15, r3
 800af4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	ee07 3a90 	vmov	s15, r3
 800af5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af5e:	ed97 6a02 	vldr	s12, [r7, #8]
 800af62:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800b05c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800af66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af72:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800af76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af7e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800af80:	4b34      	ldr	r3, [pc, #208]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800af82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d017      	beq.n	800afbc <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800af8c:	4b31      	ldr	r3, [pc, #196]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800af8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af90:	0a5b      	lsrs	r3, r3, #9
 800af92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af96:	ee07 3a90 	vmov	s15, r3
 800af9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800af9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afa2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800afa6:	edd7 6a07 	vldr	s13, [r7, #28]
 800afaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afb2:	ee17 2a90 	vmov	r2, s15
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	601a      	str	r2, [r3, #0]
 800afba:	e002      	b.n	800afc2 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800afc2:	4b24      	ldr	r3, [pc, #144]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800afc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d017      	beq.n	800affe <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800afce:	4b21      	ldr	r3, [pc, #132]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800afd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afd2:	0c1b      	lsrs	r3, r3, #16
 800afd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afd8:	ee07 3a90 	vmov	s15, r3
 800afdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800afe0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afe4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800afe8:	edd7 6a07 	vldr	s13, [r7, #28]
 800afec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff4:	ee17 2a90 	vmov	r2, s15
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	605a      	str	r2, [r3, #4]
 800affc:	e002      	b.n	800b004 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800b004:	4b13      	ldr	r3, [pc, #76]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b008:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d017      	beq.n	800b040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b010:	4b10      	ldr	r3, [pc, #64]	@ (800b054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b014:	0e1b      	lsrs	r3, r3, #24
 800b016:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b01a:	ee07 3a90 	vmov	s15, r3
 800b01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800b022:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b026:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b02a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b02e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b036:	ee17 2a90 	vmov	r2, s15
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b03e:	e002      	b.n	800b046 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	609a      	str	r2, [r3, #8]
}
 800b046:	bf00      	nop
 800b048:	3724      	adds	r7, #36	@ 0x24
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	46020c00 	.word	0x46020c00
 800b058:	4b742400 	.word	0x4b742400
 800b05c:	46000000 	.word	0x46000000
 800b060:	0800df9c 	.word	0x0800df9c

0800b064 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b08e      	sub	sp, #56	@ 0x38
 800b068:	af00      	add	r7, sp, #0
 800b06a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800b06e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b072:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800b076:	430b      	orrs	r3, r1
 800b078:	d145      	bne.n	800b106 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800b07a:	4ba7      	ldr	r3, [pc, #668]	@ (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b07c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b080:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b084:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800b086:	4ba4      	ldr	r3, [pc, #656]	@ (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b08c:	f003 0302 	and.w	r3, r3, #2
 800b090:	2b02      	cmp	r3, #2
 800b092:	d108      	bne.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800b094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b09a:	d104      	bne.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800b09c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0a2:	f001 bb5a 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800b0a6:	4b9c      	ldr	r3, [pc, #624]	@ (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b0a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0b4:	d114      	bne.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0bc:	d110      	bne.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b0be:	4b96      	ldr	r3, [pc, #600]	@ (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b0c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0cc:	d103      	bne.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800b0ce:	23fa      	movs	r3, #250	@ 0xfa
 800b0d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b0d2:	f001 bb42 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b0d6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b0da:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b0dc:	f001 bb3d 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800b0e0:	4b8d      	ldr	r3, [pc, #564]	@ (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0ec:	d107      	bne.n	800b0fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800b0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0f4:	d103      	bne.n	800b0fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800b0f6:	4b89      	ldr	r3, [pc, #548]	@ (800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800b0f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0fa:	f001 bb2e 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800b0fe:	2300      	movs	r3, #0
 800b100:	637b      	str	r3, [r7, #52]	@ 0x34
 800b102:	f001 bb2a 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b10a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b10e:	430b      	orrs	r3, r1
 800b110:	d151      	bne.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b112:	4b81      	ldr	r3, [pc, #516]	@ (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b114:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b118:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800b11c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b120:	2b80      	cmp	r3, #128	@ 0x80
 800b122:	d035      	beq.n	800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800b124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b126:	2b80      	cmp	r3, #128	@ 0x80
 800b128:	d841      	bhi.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b12c:	2b60      	cmp	r3, #96	@ 0x60
 800b12e:	d02a      	beq.n	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800b130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b132:	2b60      	cmp	r3, #96	@ 0x60
 800b134:	d83b      	bhi.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b138:	2b40      	cmp	r3, #64	@ 0x40
 800b13a:	d009      	beq.n	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13e:	2b40      	cmp	r3, #64	@ 0x40
 800b140:	d835      	bhi.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00c      	beq.n	800b162 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800b148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14a:	2b20      	cmp	r3, #32
 800b14c:	d012      	beq.n	800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b14e:	e02e      	b.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b150:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b154:	4618      	mov	r0, r3
 800b156:	f7ff fb77 	bl	800a848 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b15e:	f001 bafc 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b162:	f107 0318 	add.w	r3, r7, #24
 800b166:	4618      	mov	r0, r3
 800b168:	f7ff fcc8 	bl	800aafc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b170:	f001 baf3 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b174:	f107 030c 	add.w	r3, r7, #12
 800b178:	4618      	mov	r0, r3
 800b17a:	f7ff fe19 	bl	800adb0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b182:	f001 baea 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b186:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b18a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b18c:	f001 bae5 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b190:	4b61      	ldr	r3, [pc, #388]	@ (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b19c:	d103      	bne.n	800b1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800b19e:	4b60      	ldr	r3, [pc, #384]	@ (800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b1a0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b1a2:	f001 bada 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1aa:	f001 bad6 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1b2:	f001 bad2 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b1b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1ba:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b1be:	430b      	orrs	r3, r1
 800b1c0:	d158      	bne.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b1c2:	4b55      	ldr	r3, [pc, #340]	@ (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b1c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b1c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b1cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1d4:	d03b      	beq.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800b1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1dc:	d846      	bhi.n	800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1e4:	d02e      	beq.n	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800b1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1ec:	d83e      	bhi.n	800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1f4:	d00b      	beq.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800b1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1fc:	d836      	bhi.n	800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00d      	beq.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800b204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b20a:	d012      	beq.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800b20c:	e02e      	b.n	800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b20e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b212:	4618      	mov	r0, r3
 800b214:	f7ff fb18 	bl	800a848 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b21c:	f001 ba9d 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b220:	f107 0318 	add.w	r3, r7, #24
 800b224:	4618      	mov	r0, r3
 800b226:	f7ff fc69 	bl	800aafc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b22e:	f001 ba94 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b232:	f107 030c 	add.w	r3, r7, #12
 800b236:	4618      	mov	r0, r3
 800b238:	f7ff fdba 	bl	800adb0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b240:	f001 ba8b 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b244:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b248:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b24a:	f001 ba86 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b24e:	4b32      	ldr	r3, [pc, #200]	@ (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b25a:	d103      	bne.n	800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800b25c:	4b30      	ldr	r3, [pc, #192]	@ (800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b25e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b260:	f001 ba7b 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b264:	2300      	movs	r3, #0
 800b266:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b268:	f001 ba77 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800b26c:	2300      	movs	r3, #0
 800b26e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b270:	f001 ba73 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800b274:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b278:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b27c:	430b      	orrs	r3, r1
 800b27e:	d126      	bne.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800b280:	4b25      	ldr	r3, [pc, #148]	@ (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b282:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b286:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b28a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800b28c:	4b22      	ldr	r3, [pc, #136]	@ (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b298:	d106      	bne.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800b29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d103      	bne.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800b2a0:	4b1f      	ldr	r3, [pc, #124]	@ (800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b2a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2a4:	f001 ba59 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800b2a8:	4b1b      	ldr	r3, [pc, #108]	@ (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2b4:	d107      	bne.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2bc:	d103      	bne.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800b2be:	4b19      	ldr	r3, [pc, #100]	@ (800b324 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b2c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2c2:	f001 ba4a 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2ca:	f001 ba46 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800b2ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2d2:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800b2d6:	430b      	orrs	r3, r1
 800b2d8:	d16e      	bne.n	800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b2da:	4b0f      	ldr	r3, [pc, #60]	@ (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b2dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b2e0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800b2e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b2ec:	d03d      	beq.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b2f4:	d85c      	bhi.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2fc:	d014      	beq.n	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800b2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b300:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b304:	d854      	bhi.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d01f      	beq.n	800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800b30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b30e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b312:	d012      	beq.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800b314:	e04c      	b.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b316:	bf00      	nop
 800b318:	46020c00 	.word	0x46020c00
 800b31c:	0007a120 	.word	0x0007a120
 800b320:	00f42400 	.word	0x00f42400
 800b324:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b328:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7ff fa8b 	bl	800a848 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b334:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b336:	f001 ba10 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b33a:	f107 0318 	add.w	r3, r7, #24
 800b33e:	4618      	mov	r0, r3
 800b340:	f7ff fbdc 	bl	800aafc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b348:	f001 ba07 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b34c:	4ba7      	ldr	r3, [pc, #668]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b354:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b358:	d103      	bne.n	800b362 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800b35a:	4ba5      	ldr	r3, [pc, #660]	@ (800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b35c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b35e:	f001 b9fc 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b362:	2300      	movs	r3, #0
 800b364:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b366:	f001 b9f8 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b36a:	4ba0      	ldr	r3, [pc, #640]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 0320 	and.w	r3, r3, #32
 800b372:	2b20      	cmp	r3, #32
 800b374:	d118      	bne.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b376:	4b9d      	ldr	r3, [pc, #628]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d005      	beq.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b382:	4b9a      	ldr	r3, [pc, #616]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	0e1b      	lsrs	r3, r3, #24
 800b388:	f003 030f 	and.w	r3, r3, #15
 800b38c:	e006      	b.n	800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b38e:	4b97      	ldr	r3, [pc, #604]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b390:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b394:	041b      	lsls	r3, r3, #16
 800b396:	0e1b      	lsrs	r3, r3, #24
 800b398:	f003 030f 	and.w	r3, r3, #15
 800b39c:	4a95      	ldr	r2, [pc, #596]	@ (800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b39e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b3a4:	f001 b9d9 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b3ac:	f001 b9d5 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b3b4:	f001 b9d1 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b3b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3bc:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800b3c0:	430b      	orrs	r3, r1
 800b3c2:	d17f      	bne.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b3c4:	4b89      	ldr	r3, [pc, #548]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b3c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b3ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b3ce:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d165      	bne.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b3d6:	4b85      	ldr	r3, [pc, #532]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b3d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b3dc:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800b3e0:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800b3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b3e8:	d034      	beq.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ec:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b3f0:	d853      	bhi.n	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800b3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3f8:	d00b      	beq.n	800b412 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b400:	d84b      	bhi.n	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800b402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b404:	2b00      	cmp	r3, #0
 800b406:	d016      	beq.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800b408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b40e:	d009      	beq.n	800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b410:	e043      	b.n	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b416:	4618      	mov	r0, r3
 800b418:	f7ff fa16 	bl	800a848 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b420:	f001 b99b 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b424:	f107 0318 	add.w	r3, r7, #24
 800b428:	4618      	mov	r0, r3
 800b42a:	f7ff fb67 	bl	800aafc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b432:	f001 b992 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b436:	4b6d      	ldr	r3, [pc, #436]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b43e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b442:	d103      	bne.n	800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800b444:	4b6a      	ldr	r3, [pc, #424]	@ (800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b446:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b448:	f001 b987 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800b44c:	2300      	movs	r3, #0
 800b44e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b450:	f001 b983 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b454:	4b65      	ldr	r3, [pc, #404]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 0320 	and.w	r3, r3, #32
 800b45c:	2b20      	cmp	r3, #32
 800b45e:	d118      	bne.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b460:	4b62      	ldr	r3, [pc, #392]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d005      	beq.n	800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800b46c:	4b5f      	ldr	r3, [pc, #380]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	0e1b      	lsrs	r3, r3, #24
 800b472:	f003 030f 	and.w	r3, r3, #15
 800b476:	e006      	b.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b478:	4b5c      	ldr	r3, [pc, #368]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b47a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b47e:	041b      	lsls	r3, r3, #16
 800b480:	0e1b      	lsrs	r3, r3, #24
 800b482:	f003 030f 	and.w	r3, r3, #15
 800b486:	4a5b      	ldr	r2, [pc, #364]	@ (800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b48c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b48e:	f001 b964 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800b492:	2300      	movs	r3, #0
 800b494:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b496:	f001 b960 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800b49a:	2300      	movs	r3, #0
 800b49c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b49e:	f001 b95c 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b4a8:	d108      	bne.n	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7ff f9ca 	bl	800a848 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4b8:	f001 b94f 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4c0:	f001 b94b 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800b4c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4c8:	1e51      	subs	r1, r2, #1
 800b4ca:	430b      	orrs	r3, r1
 800b4cc:	d136      	bne.n	800b53c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b4ce:	4b47      	ldr	r3, [pc, #284]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b4d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b4d4:	f003 0303 	and.w	r3, r3, #3
 800b4d8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d104      	bne.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800b4e0:	f7fe f968 	bl	80097b4 <HAL_RCC_GetPCLK2Freq>
 800b4e4:	6378      	str	r0, [r7, #52]	@ 0x34
 800b4e6:	f001 b938 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d104      	bne.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b4f0:	f7fe f830 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800b4f4:	6378      	str	r0, [r7, #52]	@ 0x34
 800b4f6:	f001 b930 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b4fa:	4b3c      	ldr	r3, [pc, #240]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b506:	d106      	bne.n	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800b508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b50a:	2b02      	cmp	r3, #2
 800b50c:	d103      	bne.n	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800b50e:	4b3a      	ldr	r3, [pc, #232]	@ (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b510:	637b      	str	r3, [r7, #52]	@ 0x34
 800b512:	f001 b922 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b516:	4b35      	ldr	r3, [pc, #212]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b51c:	f003 0302 	and.w	r3, r3, #2
 800b520:	2b02      	cmp	r3, #2
 800b522:	d107      	bne.n	800b534 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b526:	2b03      	cmp	r3, #3
 800b528:	d104      	bne.n	800b534 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800b52a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b52e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b530:	f001 b913 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800b534:	2300      	movs	r3, #0
 800b536:	637b      	str	r3, [r7, #52]	@ 0x34
 800b538:	f001 b90f 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800b53c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b540:	1e91      	subs	r1, r2, #2
 800b542:	430b      	orrs	r3, r1
 800b544:	d136      	bne.n	800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b546:	4b29      	ldr	r3, [pc, #164]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b54c:	f003 030c 	and.w	r3, r3, #12
 800b550:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b554:	2b00      	cmp	r3, #0
 800b556:	d104      	bne.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b558:	f7fe f918 	bl	800978c <HAL_RCC_GetPCLK1Freq>
 800b55c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b55e:	f001 b8fc 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800b562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b564:	2b04      	cmp	r3, #4
 800b566:	d104      	bne.n	800b572 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b568:	f7fd fff4 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800b56c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b56e:	f001 b8f4 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b572:	4b1e      	ldr	r3, [pc, #120]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b57a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b57e:	d106      	bne.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b582:	2b08      	cmp	r3, #8
 800b584:	d103      	bne.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800b586:	4b1c      	ldr	r3, [pc, #112]	@ (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b588:	637b      	str	r3, [r7, #52]	@ 0x34
 800b58a:	f001 b8e6 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b58e:	4b17      	ldr	r3, [pc, #92]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b594:	f003 0302 	and.w	r3, r3, #2
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d107      	bne.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800b59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59e:	2b0c      	cmp	r3, #12
 800b5a0:	d104      	bne.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800b5a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5a8:	f001 b8d7 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5b0:	f001 b8d3 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800b5b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5b8:	1f11      	subs	r1, r2, #4
 800b5ba:	430b      	orrs	r3, r1
 800b5bc:	d13f      	bne.n	800b63e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b5be:	4b0b      	ldr	r3, [pc, #44]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b5c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b5c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b5c8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d104      	bne.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b5d0:	f7fe f8dc 	bl	800978c <HAL_RCC_GetPCLK1Freq>
 800b5d4:	6378      	str	r0, [r7, #52]	@ 0x34
 800b5d6:	f001 b8c0 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800b5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5dc:	2b10      	cmp	r3, #16
 800b5de:	d10d      	bne.n	800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b5e0:	f7fd ffb8 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800b5e4:	6378      	str	r0, [r7, #52]	@ 0x34
 800b5e6:	f001 b8b8 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b5ea:	bf00      	nop
 800b5ec:	46020c00 	.word	0x46020c00
 800b5f0:	02dc6c00 	.word	0x02dc6c00
 800b5f4:	0800df9c 	.word	0x0800df9c
 800b5f8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b5fc:	4ba8      	ldr	r3, [pc, #672]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b608:	d106      	bne.n	800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800b60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b60c:	2b20      	cmp	r3, #32
 800b60e:	d103      	bne.n	800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800b610:	4ba4      	ldr	r3, [pc, #656]	@ (800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b612:	637b      	str	r3, [r7, #52]	@ 0x34
 800b614:	f001 b8a1 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b618:	4ba1      	ldr	r3, [pc, #644]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b61a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b61e:	f003 0302 	and.w	r3, r3, #2
 800b622:	2b02      	cmp	r3, #2
 800b624:	d107      	bne.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b628:	2b30      	cmp	r3, #48	@ 0x30
 800b62a:	d104      	bne.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800b62c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b630:	637b      	str	r3, [r7, #52]	@ 0x34
 800b632:	f001 b892 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800b636:	2300      	movs	r3, #0
 800b638:	637b      	str	r3, [r7, #52]	@ 0x34
 800b63a:	f001 b88e 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800b63e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b642:	f1a2 0108 	sub.w	r1, r2, #8
 800b646:	430b      	orrs	r3, r1
 800b648:	d136      	bne.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b64a:	4b95      	ldr	r3, [pc, #596]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b64c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b650:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b654:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d104      	bne.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b65c:	f7fe f896 	bl	800978c <HAL_RCC_GetPCLK1Freq>
 800b660:	6378      	str	r0, [r7, #52]	@ 0x34
 800b662:	f001 b87a 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800b666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b668:	2b40      	cmp	r3, #64	@ 0x40
 800b66a:	d104      	bne.n	800b676 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b66c:	f7fd ff72 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800b670:	6378      	str	r0, [r7, #52]	@ 0x34
 800b672:	f001 b872 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b676:	4b8a      	ldr	r3, [pc, #552]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b67e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b682:	d106      	bne.n	800b692 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800b684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b686:	2b80      	cmp	r3, #128	@ 0x80
 800b688:	d103      	bne.n	800b692 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800b68a:	4b86      	ldr	r3, [pc, #536]	@ (800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b68c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b68e:	f001 b864 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b692:	4b83      	ldr	r3, [pc, #524]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b698:	f003 0302 	and.w	r3, r3, #2
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d107      	bne.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800b6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a2:	2bc0      	cmp	r3, #192	@ 0xc0
 800b6a4:	d104      	bne.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800b6a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b6aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6ac:	f001 b855 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6b4:	f001 b851 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800b6b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6bc:	f1a2 0110 	sub.w	r1, r2, #16
 800b6c0:	430b      	orrs	r3, r1
 800b6c2:	d139      	bne.n	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b6c4:	4b76      	ldr	r3, [pc, #472]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b6ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6ce:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d104      	bne.n	800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b6d6:	f7fe f859 	bl	800978c <HAL_RCC_GetPCLK1Freq>
 800b6da:	6378      	str	r0, [r7, #52]	@ 0x34
 800b6dc:	f001 b83d 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800b6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6e6:	d104      	bne.n	800b6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b6e8:	f7fd ff34 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800b6ec:	6378      	str	r0, [r7, #52]	@ 0x34
 800b6ee:	f001 b834 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800b6f2:	4b6b      	ldr	r3, [pc, #428]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b6fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6fe:	d107      	bne.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800b700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b702:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b706:	d103      	bne.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800b708:	4b66      	ldr	r3, [pc, #408]	@ (800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b70a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b70c:	f001 b825 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800b710:	4b63      	ldr	r3, [pc, #396]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b712:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b716:	f003 0302 	and.w	r3, r3, #2
 800b71a:	2b02      	cmp	r3, #2
 800b71c:	d108      	bne.n	800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800b71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b720:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b724:	d104      	bne.n	800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800b726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b72a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b72c:	f001 b815 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b730:	2300      	movs	r3, #0
 800b732:	637b      	str	r3, [r7, #52]	@ 0x34
 800b734:	f001 b811 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800b738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b73c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800b740:	430b      	orrs	r3, r1
 800b742:	d139      	bne.n	800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800b744:	4b56      	ldr	r3, [pc, #344]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b746:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b74a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b74e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800b750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b752:	2b00      	cmp	r3, #0
 800b754:	d104      	bne.n	800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b756:	f7fe f819 	bl	800978c <HAL_RCC_GetPCLK1Freq>
 800b75a:	6378      	str	r0, [r7, #52]	@ 0x34
 800b75c:	f000 bffd 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800b760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b762:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b766:	d104      	bne.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b768:	f7fd fef4 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800b76c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b76e:	f000 bff4 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800b772:	4b4b      	ldr	r3, [pc, #300]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b77a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b77e:	d107      	bne.n	800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800b780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b782:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b786:	d103      	bne.n	800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800b788:	4b46      	ldr	r3, [pc, #280]	@ (800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b78a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b78c:	f000 bfe5 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800b790:	4b43      	ldr	r3, [pc, #268]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b796:	f003 0302 	and.w	r3, r3, #2
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	d108      	bne.n	800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800b79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b7a4:	d104      	bne.n	800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800b7a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b7aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7ac:	f000 bfd5 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7b4:	f000 bfd1 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800b7b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7bc:	f1a2 0120 	sub.w	r1, r2, #32
 800b7c0:	430b      	orrs	r3, r1
 800b7c2:	d158      	bne.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b7c4:	4b36      	ldr	r3, [pc, #216]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b7c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b7ca:	f003 0307 	and.w	r3, r3, #7
 800b7ce:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800b7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d104      	bne.n	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800b7d6:	f7fe f801 	bl	80097dc <HAL_RCC_GetPCLK3Freq>
 800b7da:	6378      	str	r0, [r7, #52]	@ 0x34
 800b7dc:	f000 bfbd 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800b7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d104      	bne.n	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b7e6:	f7fd feb5 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800b7ea:	6378      	str	r0, [r7, #52]	@ 0x34
 800b7ec:	f000 bfb5 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800b7f0:	4b2b      	ldr	r3, [pc, #172]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b7fc:	d106      	bne.n	800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800b7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b800:	2b02      	cmp	r3, #2
 800b802:	d103      	bne.n	800b80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800b804:	4b27      	ldr	r3, [pc, #156]	@ (800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b806:	637b      	str	r3, [r7, #52]	@ 0x34
 800b808:	f000 bfa7 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800b80c:	4b24      	ldr	r3, [pc, #144]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b80e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b812:	f003 0302 	and.w	r3, r3, #2
 800b816:	2b02      	cmp	r3, #2
 800b818:	d107      	bne.n	800b82a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800b81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b81c:	2b03      	cmp	r3, #3
 800b81e:	d104      	bne.n	800b82a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800b820:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b824:	637b      	str	r3, [r7, #52]	@ 0x34
 800b826:	f000 bf98 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800b82a:	4b1d      	ldr	r3, [pc, #116]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f003 0320 	and.w	r3, r3, #32
 800b832:	2b20      	cmp	r3, #32
 800b834:	d11b      	bne.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800b836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b838:	2b04      	cmp	r3, #4
 800b83a:	d118      	bne.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b83c:	4b18      	ldr	r3, [pc, #96]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b844:	2b00      	cmp	r3, #0
 800b846:	d005      	beq.n	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800b848:	4b15      	ldr	r3, [pc, #84]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	0e1b      	lsrs	r3, r3, #24
 800b84e:	f003 030f 	and.w	r3, r3, #15
 800b852:	e006      	b.n	800b862 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800b854:	4b12      	ldr	r3, [pc, #72]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b856:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b85a:	041b      	lsls	r3, r3, #16
 800b85c:	0e1b      	lsrs	r3, r3, #24
 800b85e:	f003 030f 	and.w	r3, r3, #15
 800b862:	4a11      	ldr	r2, [pc, #68]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b868:	637b      	str	r3, [r7, #52]	@ 0x34
 800b86a:	f000 bf76 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800b86e:	2300      	movs	r3, #0
 800b870:	637b      	str	r3, [r7, #52]	@ 0x34
 800b872:	f000 bf72 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800b876:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b87a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b87e:	430b      	orrs	r3, r1
 800b880:	d172      	bne.n	800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800b882:	4b07      	ldr	r3, [pc, #28]	@ (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b884:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b888:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b88c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800b88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b894:	d10a      	bne.n	800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b896:	f7fd fe5d 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800b89a:	6378      	str	r0, [r7, #52]	@ 0x34
 800b89c:	f000 bf5d 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b8a0:	46020c00 	.word	0x46020c00
 800b8a4:	00f42400 	.word	0x00f42400
 800b8a8:	0800df9c 	.word	0x0800df9c
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800b8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b8b2:	d108      	bne.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8b4:	f107 0318 	add.w	r3, r7, #24
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7ff f91f 	bl	800aafc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800b8be:	6a3b      	ldr	r3, [r7, #32]
 800b8c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8c2:	f000 bf4a 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800b8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d104      	bne.n	800b8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800b8cc:	f7fd ff44 	bl	8009758 <HAL_RCC_GetHCLKFreq>
 800b8d0:	6378      	str	r0, [r7, #52]	@ 0x34
 800b8d2:	f000 bf42 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b8dc:	d122      	bne.n	800b924 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b8de:	4bb0      	ldr	r3, [pc, #704]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f003 0320 	and.w	r3, r3, #32
 800b8e6:	2b20      	cmp	r3, #32
 800b8e8:	d118      	bne.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b8ea:	4bad      	ldr	r3, [pc, #692]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d005      	beq.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800b8f6:	4baa      	ldr	r3, [pc, #680]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	0e1b      	lsrs	r3, r3, #24
 800b8fc:	f003 030f 	and.w	r3, r3, #15
 800b900:	e006      	b.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800b902:	4ba7      	ldr	r3, [pc, #668]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b904:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b908:	041b      	lsls	r3, r3, #16
 800b90a:	0e1b      	lsrs	r3, r3, #24
 800b90c:	f003 030f 	and.w	r3, r3, #15
 800b910:	4aa4      	ldr	r2, [pc, #656]	@ (800bba4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b916:	637b      	str	r3, [r7, #52]	@ 0x34
 800b918:	f000 bf1f 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b91c:	2300      	movs	r3, #0
 800b91e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b920:	f000 bf1b 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800b924:	4b9e      	ldr	r3, [pc, #632]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b92c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b930:	d107      	bne.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b934:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b938:	d103      	bne.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800b93a:	4b9b      	ldr	r3, [pc, #620]	@ (800bba8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b93c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b93e:	f000 bf0c 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800b942:	4b97      	ldr	r3, [pc, #604]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b94a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b94e:	d107      	bne.n	800b960 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800b950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b952:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b956:	d103      	bne.n	800b960 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800b958:	4b93      	ldr	r3, [pc, #588]	@ (800bba8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b95a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b95c:	f000 befd 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800b960:	2300      	movs	r3, #0
 800b962:	637b      	str	r3, [r7, #52]	@ 0x34
 800b964:	f000 bef9 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800b968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b96c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b970:	430b      	orrs	r3, r1
 800b972:	d158      	bne.n	800ba26 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800b974:	4b8a      	ldr	r3, [pc, #552]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b976:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b97a:	f003 0307 	and.w	r3, r3, #7
 800b97e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b982:	2b04      	cmp	r3, #4
 800b984:	d84b      	bhi.n	800ba1e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800b986:	a201      	add	r2, pc, #4	@ (adr r2, 800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800b988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b98c:	0800b9c5 	.word	0x0800b9c5
 800b990:	0800b9a1 	.word	0x0800b9a1
 800b994:	0800b9b3 	.word	0x0800b9b3
 800b998:	0800b9cf 	.word	0x0800b9cf
 800b99c:	0800b9d9 	.word	0x0800b9d9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b9a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7fe ff4f 	bl	800a848 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b9ae:	f000 bed4 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9b2:	f107 030c 	add.w	r3, r7, #12
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7ff f9fa 	bl	800adb0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b9c0:	f000 becb 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b9c4:	f7fd fec8 	bl	8009758 <HAL_RCC_GetHCLKFreq>
 800b9c8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b9ca:	f000 bec6 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b9ce:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b9d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b9d4:	f000 bec1 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b9d8:	4b71      	ldr	r3, [pc, #452]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f003 0320 	and.w	r3, r3, #32
 800b9e0:	2b20      	cmp	r3, #32
 800b9e2:	d118      	bne.n	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b9e4:	4b6e      	ldr	r3, [pc, #440]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9e6:	689b      	ldr	r3, [r3, #8]
 800b9e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d005      	beq.n	800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800b9f0:	4b6b      	ldr	r3, [pc, #428]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	0e1b      	lsrs	r3, r3, #24
 800b9f6:	f003 030f 	and.w	r3, r3, #15
 800b9fa:	e006      	b.n	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800b9fc:	4b68      	ldr	r3, [pc, #416]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ba02:	041b      	lsls	r3, r3, #16
 800ba04:	0e1b      	lsrs	r3, r3, #24
 800ba06:	f003 030f 	and.w	r3, r3, #15
 800ba0a:	4a66      	ldr	r2, [pc, #408]	@ (800bba4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ba0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba10:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ba12:	f000 bea2 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ba16:	2300      	movs	r3, #0
 800ba18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba1a:	f000 be9e 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba22:	f000 be9a 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800ba26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba2a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800ba2e:	430b      	orrs	r3, r1
 800ba30:	d167      	bne.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800ba32:	4b5b      	ldr	r3, [pc, #364]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ba34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ba38:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ba3c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ba3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ba44:	d036      	beq.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800ba46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ba4c:	d855      	bhi.n	800bafa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ba4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ba54:	d029      	beq.n	800baaa <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800ba56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ba5c:	d84d      	bhi.n	800bafa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ba5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba64:	d013      	beq.n	800ba8e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800ba66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba6c:	d845      	bhi.n	800bafa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d015      	beq.n	800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800ba74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba7a:	d13e      	bne.n	800bafa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7fe fee1 	bl	800a848 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ba86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba8a:	f000 be66 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba8e:	f107 030c 	add.w	r3, r7, #12
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7ff f98c 	bl	800adb0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba9c:	f000 be5d 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800baa0:	f7fd fe5a 	bl	8009758 <HAL_RCC_GetHCLKFreq>
 800baa4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800baa6:	f000 be58 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800baaa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800baae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bab0:	f000 be53 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bab4:	4b3a      	ldr	r3, [pc, #232]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f003 0320 	and.w	r3, r3, #32
 800babc:	2b20      	cmp	r3, #32
 800babe:	d118      	bne.n	800baf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bac0:	4b37      	ldr	r3, [pc, #220]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d005      	beq.n	800bad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800bacc:	4b34      	ldr	r3, [pc, #208]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	0e1b      	lsrs	r3, r3, #24
 800bad2:	f003 030f 	and.w	r3, r3, #15
 800bad6:	e006      	b.n	800bae6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800bad8:	4b31      	ldr	r3, [pc, #196]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bada:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bade:	041b      	lsls	r3, r3, #16
 800bae0:	0e1b      	lsrs	r3, r3, #24
 800bae2:	f003 030f 	and.w	r3, r3, #15
 800bae6:	4a2f      	ldr	r2, [pc, #188]	@ (800bba4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800bae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800baee:	f000 be34 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800baf2:	2300      	movs	r3, #0
 800baf4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800baf6:	f000 be30 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bafa:	2300      	movs	r3, #0
 800bafc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bafe:	f000 be2c 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800bb02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb06:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800bb0a:	430b      	orrs	r3, r1
 800bb0c:	d152      	bne.n	800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800bb0e:	4b24      	ldr	r3, [pc, #144]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bb10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bb18:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d104      	bne.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bb20:	f7fd fe34 	bl	800978c <HAL_RCC_GetPCLK1Freq>
 800bb24:	6378      	str	r0, [r7, #52]	@ 0x34
 800bb26:	f000 be18 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb30:	d104      	bne.n	800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bb32:	f7fd fd0f 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800bb36:	6378      	str	r0, [r7, #52]	@ 0x34
 800bb38:	f000 be0f 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800bb3c:	4b18      	ldr	r3, [pc, #96]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bb44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb48:	d107      	bne.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800bb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb50:	d103      	bne.n	800bb5a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800bb52:	4b15      	ldr	r3, [pc, #84]	@ (800bba8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800bb54:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb56:	f000 be00 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800bb5a:	4b11      	ldr	r3, [pc, #68]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f003 0320 	and.w	r3, r3, #32
 800bb62:	2b20      	cmp	r3, #32
 800bb64:	d122      	bne.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800bb66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bb6c:	d11e      	bne.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bb6e:	4b0c      	ldr	r3, [pc, #48]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d005      	beq.n	800bb86 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800bb7a:	4b09      	ldr	r3, [pc, #36]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	0e1b      	lsrs	r3, r3, #24
 800bb80:	f003 030f 	and.w	r3, r3, #15
 800bb84:	e006      	b.n	800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800bb86:	4b06      	ldr	r3, [pc, #24]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bb88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bb8c:	041b      	lsls	r3, r3, #16
 800bb8e:	0e1b      	lsrs	r3, r3, #24
 800bb90:	f003 030f 	and.w	r3, r3, #15
 800bb94:	4a03      	ldr	r2, [pc, #12]	@ (800bba4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800bb96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb9c:	f000 bddd 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bba0:	46020c00 	.word	0x46020c00
 800bba4:	0800df9c 	.word	0x0800df9c
 800bba8:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800bbac:	2300      	movs	r3, #0
 800bbae:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbb0:	f000 bdd3 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800bbb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbb8:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800bbbc:	430b      	orrs	r3, r1
 800bbbe:	d14c      	bne.n	800bc5a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800bbc0:	4ba8      	ldr	r3, [pc, #672]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bbc6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800bbca:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800bbcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d104      	bne.n	800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bbd2:	f7fd fddb 	bl	800978c <HAL_RCC_GetPCLK1Freq>
 800bbd6:	6378      	str	r0, [r7, #52]	@ 0x34
 800bbd8:	f000 bdbf 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800bbdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbe2:	d104      	bne.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bbe4:	f7fd fcb6 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800bbe8:	6378      	str	r0, [r7, #52]	@ 0x34
 800bbea:	f000 bdb6 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800bbee:	4b9d      	ldr	r3, [pc, #628]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bbf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bbfa:	d107      	bne.n	800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800bbfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc02:	d103      	bne.n	800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800bc04:	4b98      	ldr	r3, [pc, #608]	@ (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bc06:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc08:	f000 bda7 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800bc0c:	4b95      	ldr	r3, [pc, #596]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f003 0320 	and.w	r3, r3, #32
 800bc14:	2b20      	cmp	r3, #32
 800bc16:	d11c      	bne.n	800bc52 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800bc18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bc1e:	d118      	bne.n	800bc52 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bc20:	4b90      	ldr	r3, [pc, #576]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc22:	689b      	ldr	r3, [r3, #8]
 800bc24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d005      	beq.n	800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800bc2c:	4b8d      	ldr	r3, [pc, #564]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	0e1b      	lsrs	r3, r3, #24
 800bc32:	f003 030f 	and.w	r3, r3, #15
 800bc36:	e006      	b.n	800bc46 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800bc38:	4b8a      	ldr	r3, [pc, #552]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bc3e:	041b      	lsls	r3, r3, #16
 800bc40:	0e1b      	lsrs	r3, r3, #24
 800bc42:	f003 030f 	and.w	r3, r3, #15
 800bc46:	4a89      	ldr	r2, [pc, #548]	@ (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bc48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc4e:	f000 bd84 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800bc52:	2300      	movs	r3, #0
 800bc54:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc56:	f000 bd80 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800bc5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc5e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800bc62:	430b      	orrs	r3, r1
 800bc64:	d158      	bne.n	800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800bc66:	4b7f      	ldr	r3, [pc, #508]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bc6c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bc70:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800bc72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc74:	2bc0      	cmp	r3, #192	@ 0xc0
 800bc76:	d028      	beq.n	800bcca <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800bc78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc7a:	2bc0      	cmp	r3, #192	@ 0xc0
 800bc7c:	d848      	bhi.n	800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800bc7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc80:	2b80      	cmp	r3, #128	@ 0x80
 800bc82:	d00e      	beq.n	800bca2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800bc84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc86:	2b80      	cmp	r3, #128	@ 0x80
 800bc88:	d842      	bhi.n	800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800bc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d003      	beq.n	800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800bc90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc92:	2b40      	cmp	r3, #64	@ 0x40
 800bc94:	d014      	beq.n	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800bc96:	e03b      	b.n	800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800bc98:	f7fd fda0 	bl	80097dc <HAL_RCC_GetPCLK3Freq>
 800bc9c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bc9e:	f000 bd5c 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bca2:	4b70      	ldr	r3, [pc, #448]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bcaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bcae:	d103      	bne.n	800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800bcb0:	4b6d      	ldr	r3, [pc, #436]	@ (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bcb2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bcb4:	f000 bd51 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bcbc:	f000 bd4d 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800bcc0:	f7fd fc48 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800bcc4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bcc6:	f000 bd48 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bcca:	4b66      	ldr	r3, [pc, #408]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f003 0320 	and.w	r3, r3, #32
 800bcd2:	2b20      	cmp	r3, #32
 800bcd4:	d118      	bne.n	800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bcd6:	4b63      	ldr	r3, [pc, #396]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d005      	beq.n	800bcee <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800bce2:	4b60      	ldr	r3, [pc, #384]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	0e1b      	lsrs	r3, r3, #24
 800bce8:	f003 030f 	and.w	r3, r3, #15
 800bcec:	e006      	b.n	800bcfc <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800bcee:	4b5d      	ldr	r3, [pc, #372]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bcf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bcf4:	041b      	lsls	r3, r3, #16
 800bcf6:	0e1b      	lsrs	r3, r3, #24
 800bcf8:	f003 030f 	and.w	r3, r3, #15
 800bcfc:	4a5b      	ldr	r2, [pc, #364]	@ (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bcfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd02:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bd04:	f000 bd29 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bd0c:	f000 bd25 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800bd10:	2300      	movs	r3, #0
 800bd12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bd14:	f000 bd21 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800bd18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd1c:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800bd20:	430b      	orrs	r3, r1
 800bd22:	d14c      	bne.n	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800bd24:	4b4f      	ldr	r3, [pc, #316]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bd26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bd2a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bd2e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800bd30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d104      	bne.n	800bd40 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bd36:	f7fd fd29 	bl	800978c <HAL_RCC_GetPCLK1Freq>
 800bd3a:	6378      	str	r0, [r7, #52]	@ 0x34
 800bd3c:	f000 bd0d 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800bd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd46:	d104      	bne.n	800bd52 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bd48:	f7fd fc04 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800bd4c:	6378      	str	r0, [r7, #52]	@ 0x34
 800bd4e:	f000 bd04 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800bd52:	4b44      	ldr	r3, [pc, #272]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd5e:	d107      	bne.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800bd60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd66:	d103      	bne.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800bd68:	4b3f      	ldr	r3, [pc, #252]	@ (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bd6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd6c:	f000 bcf5 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800bd70:	4b3c      	ldr	r3, [pc, #240]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f003 0320 	and.w	r3, r3, #32
 800bd78:	2b20      	cmp	r3, #32
 800bd7a:	d11c      	bne.n	800bdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800bd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd7e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bd82:	d118      	bne.n	800bdb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bd84:	4b37      	ldr	r3, [pc, #220]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d005      	beq.n	800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800bd90:	4b34      	ldr	r3, [pc, #208]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	0e1b      	lsrs	r3, r3, #24
 800bd96:	f003 030f 	and.w	r3, r3, #15
 800bd9a:	e006      	b.n	800bdaa <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800bd9c:	4b31      	ldr	r3, [pc, #196]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bd9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bda2:	041b      	lsls	r3, r3, #16
 800bda4:	0e1b      	lsrs	r3, r3, #24
 800bda6:	f003 030f 	and.w	r3, r3, #15
 800bdaa:	4a30      	ldr	r2, [pc, #192]	@ (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bdac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdb2:	f000 bcd2 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdba:	f000 bcce 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800bdbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdc2:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800bdc6:	430b      	orrs	r3, r1
 800bdc8:	d152      	bne.n	800be70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800bdca:	4b26      	ldr	r3, [pc, #152]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bdcc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bdd0:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800bdd4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800bdd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d104      	bne.n	800bde6 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bddc:	f7fd fcd6 	bl	800978c <HAL_RCC_GetPCLK1Freq>
 800bde0:	6378      	str	r0, [r7, #52]	@ 0x34
 800bde2:	f000 bcba 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800bde6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bde8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bdec:	d104      	bne.n	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bdee:	f7fd fbb1 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800bdf2:	6378      	str	r0, [r7, #52]	@ 0x34
 800bdf4:	f000 bcb1 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800bdf8:	4b1a      	ldr	r3, [pc, #104]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be04:	d107      	bne.n	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800be06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be0c:	d103      	bne.n	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800be0e:	4b16      	ldr	r3, [pc, #88]	@ (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800be10:	637b      	str	r3, [r7, #52]	@ 0x34
 800be12:	f000 bca2 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800be16:	4b13      	ldr	r3, [pc, #76]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f003 0320 	and.w	r3, r3, #32
 800be1e:	2b20      	cmp	r3, #32
 800be20:	d11c      	bne.n	800be5c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800be22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be24:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800be28:	d118      	bne.n	800be5c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800be2a:	4b0e      	ldr	r3, [pc, #56]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be32:	2b00      	cmp	r3, #0
 800be34:	d005      	beq.n	800be42 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800be36:	4b0b      	ldr	r3, [pc, #44]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	0e1b      	lsrs	r3, r3, #24
 800be3c:	f003 030f 	and.w	r3, r3, #15
 800be40:	e006      	b.n	800be50 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800be42:	4b08      	ldr	r3, [pc, #32]	@ (800be64 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800be44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800be48:	041b      	lsls	r3, r3, #16
 800be4a:	0e1b      	lsrs	r3, r3, #24
 800be4c:	f003 030f 	and.w	r3, r3, #15
 800be50:	4a06      	ldr	r2, [pc, #24]	@ (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800be52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be56:	637b      	str	r3, [r7, #52]	@ 0x34
 800be58:	f000 bc7f 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800be5c:	2300      	movs	r3, #0
 800be5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800be60:	f000 bc7b 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800be64:	46020c00 	.word	0x46020c00
 800be68:	00f42400 	.word	0x00f42400
 800be6c:	0800df9c 	.word	0x0800df9c
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800be70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be74:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800be78:	430b      	orrs	r3, r1
 800be7a:	d14c      	bne.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800be7c:	4ba6      	ldr	r3, [pc, #664]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800be82:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800be86:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800be88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d104      	bne.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800be8e:	f7fd fc7d 	bl	800978c <HAL_RCC_GetPCLK1Freq>
 800be92:	6378      	str	r0, [r7, #52]	@ 0x34
 800be94:	f000 bc61 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800be98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800be9e:	d104      	bne.n	800beaa <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bea0:	f7fd fb58 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800bea4:	6378      	str	r0, [r7, #52]	@ 0x34
 800bea6:	f000 bc58 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800beaa:	4b9b      	ldr	r3, [pc, #620]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800beb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800beb6:	d107      	bne.n	800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800beb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bebe:	d103      	bne.n	800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800bec0:	4b96      	ldr	r3, [pc, #600]	@ (800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800bec2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bec4:	f000 bc49 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800bec8:	4b93      	ldr	r3, [pc, #588]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f003 0320 	and.w	r3, r3, #32
 800bed0:	2b20      	cmp	r3, #32
 800bed2:	d11c      	bne.n	800bf0e <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800bed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800beda:	d118      	bne.n	800bf0e <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bedc:	4b8e      	ldr	r3, [pc, #568]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d005      	beq.n	800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800bee8:	4b8b      	ldr	r3, [pc, #556]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	0e1b      	lsrs	r3, r3, #24
 800beee:	f003 030f 	and.w	r3, r3, #15
 800bef2:	e006      	b.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800bef4:	4b88      	ldr	r3, [pc, #544]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800befa:	041b      	lsls	r3, r3, #16
 800befc:	0e1b      	lsrs	r3, r3, #24
 800befe:	f003 030f 	and.w	r3, r3, #15
 800bf02:	4a87      	ldr	r2, [pc, #540]	@ (800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bf04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf08:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf0a:	f000 bc26 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf12:	f000 bc22 	b.w	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800bf16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf1a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800bf1e:	430b      	orrs	r3, r1
 800bf20:	d164      	bne.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800bf22:	4b7d      	ldr	r3, [pc, #500]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bf28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf2c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d120      	bne.n	800bf76 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bf34:	4b78      	ldr	r3, [pc, #480]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f003 0320 	and.w	r3, r3, #32
 800bf3c:	2b20      	cmp	r3, #32
 800bf3e:	d117      	bne.n	800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bf40:	4b75      	ldr	r3, [pc, #468]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d005      	beq.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800bf4c:	4b72      	ldr	r3, [pc, #456]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	0e1b      	lsrs	r3, r3, #24
 800bf52:	f003 030f 	and.w	r3, r3, #15
 800bf56:	e006      	b.n	800bf66 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800bf58:	4b6f      	ldr	r3, [pc, #444]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bf5e:	041b      	lsls	r3, r3, #16
 800bf60:	0e1b      	lsrs	r3, r3, #24
 800bf62:	f003 030f 	and.w	r3, r3, #15
 800bf66:	4a6e      	ldr	r2, [pc, #440]	@ (800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bf68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf6e:	e3f4      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800bf70:	2300      	movs	r3, #0
 800bf72:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf74:	e3f1      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800bf76:	4b68      	ldr	r3, [pc, #416]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf84:	d112      	bne.n	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800bf86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf8c:	d10e      	bne.n	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf8e:	4b62      	ldr	r3, [pc, #392]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf9c:	d102      	bne.n	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800bf9e:	23fa      	movs	r3, #250	@ 0xfa
 800bfa0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bfa2:	e3da      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800bfa4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bfa8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bfaa:	e3d6      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800bfac:	4b5a      	ldr	r3, [pc, #360]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bfb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bfb8:	d106      	bne.n	800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800bfba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfc0:	d102      	bne.n	800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800bfc2:	4b56      	ldr	r3, [pc, #344]	@ (800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800bfc4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfc6:	e3c8      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800bfc8:	4b53      	ldr	r3, [pc, #332]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bfca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfce:	f003 0302 	and.w	r3, r3, #2
 800bfd2:	2b02      	cmp	r3, #2
 800bfd4:	d107      	bne.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800bfd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bfdc:	d103      	bne.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800bfde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bfe2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfe4:	e3b9      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfea:	e3b6      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800bfec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bff0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800bff4:	430b      	orrs	r3, r1
 800bff6:	d164      	bne.n	800c0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800bff8:	4b47      	ldr	r3, [pc, #284]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bffe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c002:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800c004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c006:	2b00      	cmp	r3, #0
 800c008:	d120      	bne.n	800c04c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c00a:	4b43      	ldr	r3, [pc, #268]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f003 0320 	and.w	r3, r3, #32
 800c012:	2b20      	cmp	r3, #32
 800c014:	d117      	bne.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c016:	4b40      	ldr	r3, [pc, #256]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d005      	beq.n	800c02e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800c022:	4b3d      	ldr	r3, [pc, #244]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	0e1b      	lsrs	r3, r3, #24
 800c028:	f003 030f 	and.w	r3, r3, #15
 800c02c:	e006      	b.n	800c03c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800c02e:	4b3a      	ldr	r3, [pc, #232]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c030:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c034:	041b      	lsls	r3, r3, #16
 800c036:	0e1b      	lsrs	r3, r3, #24
 800c038:	f003 030f 	and.w	r3, r3, #15
 800c03c:	4a38      	ldr	r2, [pc, #224]	@ (800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800c03e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c042:	637b      	str	r3, [r7, #52]	@ 0x34
 800c044:	e389      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800c046:	2300      	movs	r3, #0
 800c048:	637b      	str	r3, [r7, #52]	@ 0x34
 800c04a:	e386      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800c04c:	4b32      	ldr	r3, [pc, #200]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c04e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c052:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c056:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c05a:	d112      	bne.n	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800c05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c05e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c062:	d10e      	bne.n	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c064:	4b2c      	ldr	r3, [pc, #176]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c06a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c06e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c072:	d102      	bne.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800c074:	23fa      	movs	r3, #250	@ 0xfa
 800c076:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c078:	e36f      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c07a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c07e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c080:	e36b      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800c082:	4b25      	ldr	r3, [pc, #148]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c08a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c08e:	d106      	bne.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800c090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c092:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c096:	d102      	bne.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800c098:	4b20      	ldr	r3, [pc, #128]	@ (800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800c09a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c09c:	e35d      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800c09e:	4b1e      	ldr	r3, [pc, #120]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c0a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c0a4:	f003 0302 	and.w	r3, r3, #2
 800c0a8:	2b02      	cmp	r3, #2
 800c0aa:	d107      	bne.n	800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c0b2:	d103      	bne.n	800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800c0b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c0b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0ba:	e34e      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0c0:	e34b      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800c0c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0c6:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800c0ca:	430b      	orrs	r3, r1
 800c0cc:	d14e      	bne.n	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800c0ce:	4b12      	ldr	r3, [pc, #72]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c0d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c0d4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800c0d8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800c0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d103      	bne.n	800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c0e0:	f7fd fb54 	bl	800978c <HAL_RCC_GetPCLK1Freq>
 800c0e4:	6378      	str	r0, [r7, #52]	@ 0x34
 800c0e6:	e338      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800c0e8:	4b0b      	ldr	r3, [pc, #44]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c0ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c0ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c0f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c0f6:	d119      	bne.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800c0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c0fe:	d115      	bne.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c100:	4b05      	ldr	r3, [pc, #20]	@ (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c10a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c10e:	d109      	bne.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800c110:	23fa      	movs	r3, #250	@ 0xfa
 800c112:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c114:	e321      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c116:	bf00      	nop
 800c118:	46020c00 	.word	0x46020c00
 800c11c:	00f42400 	.word	0x00f42400
 800c120:	0800df9c 	.word	0x0800df9c
      }
      else
      {
        frequency = LSI_VALUE;
 800c124:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c128:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c12a:	e316      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800c12c:	4ba8      	ldr	r3, [pc, #672]	@ (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c138:	d106      	bne.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800c13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c13c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c140:	d102      	bne.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800c142:	4ba4      	ldr	r3, [pc, #656]	@ (800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c144:	637b      	str	r3, [r7, #52]	@ 0x34
 800c146:	e308      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800c148:	4ba1      	ldr	r3, [pc, #644]	@ (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c14a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c14e:	f003 0302 	and.w	r3, r3, #2
 800c152:	2b02      	cmp	r3, #2
 800c154:	d107      	bne.n	800c166 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800c156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c158:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800c15c:	d103      	bne.n	800c166 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800c15e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c162:	637b      	str	r3, [r7, #52]	@ 0x34
 800c164:	e2f9      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800c166:	2300      	movs	r3, #0
 800c168:	637b      	str	r3, [r7, #52]	@ 0x34
 800c16a:	e2f6      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800c16c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c170:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800c174:	430b      	orrs	r3, r1
 800c176:	d12d      	bne.n	800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800c178:	4b95      	ldr	r3, [pc, #596]	@ (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c17a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c17e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800c182:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800c184:	4b92      	ldr	r3, [pc, #584]	@ (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c18c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c190:	d105      	bne.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800c192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c194:	2b00      	cmp	r3, #0
 800c196:	d102      	bne.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800c198:	4b8e      	ldr	r3, [pc, #568]	@ (800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c19a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c19c:	e2dd      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800c19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c1a4:	d107      	bne.n	800c1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7fe fb4c 	bl	800a848 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1b4:	e2d1      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c1bc:	d107      	bne.n	800c1ce <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1be:	f107 0318 	add.w	r3, r7, #24
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7fe fc9a 	bl	800aafc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1cc:	e2c5      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1d2:	e2c2      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800c1d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1d8:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800c1dc:	430b      	orrs	r3, r1
 800c1de:	d156      	bne.n	800c28e <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800c1e0:	4b7b      	ldr	r3, [pc, #492]	@ (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c1e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c1e6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c1ea:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800c1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c1f2:	d028      	beq.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800c1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c1fa:	d845      	bhi.n	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800c1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c202:	d013      	beq.n	800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800c204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c206:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c20a:	d83d      	bhi.n	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800c20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d004      	beq.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800c212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c214:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c218:	d004      	beq.n	800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800c21a:	e035      	b.n	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800c21c:	f7fd faca 	bl	80097b4 <HAL_RCC_GetPCLK2Freq>
 800c220:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c222:	e29a      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c224:	f7fd f996 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800c228:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c22a:	e296      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c22c:	4b68      	ldr	r3, [pc, #416]	@ (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c238:	d102      	bne.n	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800c23a:	4b66      	ldr	r3, [pc, #408]	@ (800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c23c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c23e:	e28c      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c240:	2300      	movs	r3, #0
 800c242:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c244:	e289      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c246:	4b62      	ldr	r3, [pc, #392]	@ (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f003 0320 	and.w	r3, r3, #32
 800c24e:	2b20      	cmp	r3, #32
 800c250:	d117      	bne.n	800c282 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c252:	4b5f      	ldr	r3, [pc, #380]	@ (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d005      	beq.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800c25e:	4b5c      	ldr	r3, [pc, #368]	@ (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	0e1b      	lsrs	r3, r3, #24
 800c264:	f003 030f 	and.w	r3, r3, #15
 800c268:	e006      	b.n	800c278 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800c26a:	4b59      	ldr	r3, [pc, #356]	@ (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c26c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c270:	041b      	lsls	r3, r3, #16
 800c272:	0e1b      	lsrs	r3, r3, #24
 800c274:	f003 030f 	and.w	r3, r3, #15
 800c278:	4a57      	ldr	r2, [pc, #348]	@ (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800c27a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c27e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c280:	e26b      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c282:	2300      	movs	r3, #0
 800c284:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c286:	e268      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c288:	2300      	movs	r3, #0
 800c28a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c28c:	e265      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800c28e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c292:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800c296:	430b      	orrs	r3, r1
 800c298:	d156      	bne.n	800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800c29a:	4b4d      	ldr	r3, [pc, #308]	@ (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c29c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c2a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c2a4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800c2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c2ac:	d028      	beq.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800c2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c2b4:	d845      	bhi.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800c2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c2bc:	d013      	beq.n	800c2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800c2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c2c4:	d83d      	bhi.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d004      	beq.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800c2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2d2:	d004      	beq.n	800c2de <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800c2d4:	e035      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800c2d6:	f7fd fa59 	bl	800978c <HAL_RCC_GetPCLK1Freq>
 800c2da:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c2dc:	e23d      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c2de:	f7fd f939 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800c2e2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c2e4:	e239      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c2e6:	4b3a      	ldr	r3, [pc, #232]	@ (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c2ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2f2:	d102      	bne.n	800c2fa <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800c2f4:	4b37      	ldr	r3, [pc, #220]	@ (800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c2f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c2f8:	e22f      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2fe:	e22c      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c300:	4b33      	ldr	r3, [pc, #204]	@ (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 0320 	and.w	r3, r3, #32
 800c308:	2b20      	cmp	r3, #32
 800c30a:	d117      	bne.n	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c30c:	4b30      	ldr	r3, [pc, #192]	@ (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c314:	2b00      	cmp	r3, #0
 800c316:	d005      	beq.n	800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800c318:	4b2d      	ldr	r3, [pc, #180]	@ (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c31a:	689b      	ldr	r3, [r3, #8]
 800c31c:	0e1b      	lsrs	r3, r3, #24
 800c31e:	f003 030f 	and.w	r3, r3, #15
 800c322:	e006      	b.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800c324:	4b2a      	ldr	r3, [pc, #168]	@ (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c326:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c32a:	041b      	lsls	r3, r3, #16
 800c32c:	0e1b      	lsrs	r3, r3, #24
 800c32e:	f003 030f 	and.w	r3, r3, #15
 800c332:	4a29      	ldr	r2, [pc, #164]	@ (800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800c334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c338:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c33a:	e20e      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c33c:	2300      	movs	r3, #0
 800c33e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c340:	e20b      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c342:	2300      	movs	r3, #0
 800c344:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c346:	e208      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800c348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c34c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800c350:	430b      	orrs	r3, r1
 800c352:	d17c      	bne.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800c354:	4b1e      	ldr	r3, [pc, #120]	@ (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c356:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c35a:	f003 0318 	and.w	r3, r3, #24
 800c35e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800c360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c362:	2b18      	cmp	r3, #24
 800c364:	d870      	bhi.n	800c448 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800c366:	a201      	add	r2, pc, #4	@ (adr r2, 800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800c368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36c:	0800c3dd 	.word	0x0800c3dd
 800c370:	0800c449 	.word	0x0800c449
 800c374:	0800c449 	.word	0x0800c449
 800c378:	0800c449 	.word	0x0800c449
 800c37c:	0800c449 	.word	0x0800c449
 800c380:	0800c449 	.word	0x0800c449
 800c384:	0800c449 	.word	0x0800c449
 800c388:	0800c449 	.word	0x0800c449
 800c38c:	0800c3e5 	.word	0x0800c3e5
 800c390:	0800c449 	.word	0x0800c449
 800c394:	0800c449 	.word	0x0800c449
 800c398:	0800c449 	.word	0x0800c449
 800c39c:	0800c449 	.word	0x0800c449
 800c3a0:	0800c449 	.word	0x0800c449
 800c3a4:	0800c449 	.word	0x0800c449
 800c3a8:	0800c449 	.word	0x0800c449
 800c3ac:	0800c3ed 	.word	0x0800c3ed
 800c3b0:	0800c449 	.word	0x0800c449
 800c3b4:	0800c449 	.word	0x0800c449
 800c3b8:	0800c449 	.word	0x0800c449
 800c3bc:	0800c449 	.word	0x0800c449
 800c3c0:	0800c449 	.word	0x0800c449
 800c3c4:	0800c449 	.word	0x0800c449
 800c3c8:	0800c449 	.word	0x0800c449
 800c3cc:	0800c407 	.word	0x0800c407
 800c3d0:	46020c00 	.word	0x46020c00
 800c3d4:	00f42400 	.word	0x00f42400
 800c3d8:	0800df9c 	.word	0x0800df9c
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800c3dc:	f7fd f9fe 	bl	80097dc <HAL_RCC_GetPCLK3Freq>
 800c3e0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c3e2:	e1ba      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c3e4:	f7fd f8b6 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800c3e8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c3ea:	e1b6      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c3ec:	4b9f      	ldr	r3, [pc, #636]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3f8:	d102      	bne.n	800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800c3fa:	4b9d      	ldr	r3, [pc, #628]	@ (800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800c3fc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c3fe:	e1ac      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c400:	2300      	movs	r3, #0
 800c402:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c404:	e1a9      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c406:	4b99      	ldr	r3, [pc, #612]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f003 0320 	and.w	r3, r3, #32
 800c40e:	2b20      	cmp	r3, #32
 800c410:	d117      	bne.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c412:	4b96      	ldr	r3, [pc, #600]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d005      	beq.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800c41e:	4b93      	ldr	r3, [pc, #588]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	0e1b      	lsrs	r3, r3, #24
 800c424:	f003 030f 	and.w	r3, r3, #15
 800c428:	e006      	b.n	800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800c42a:	4b90      	ldr	r3, [pc, #576]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c42c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c430:	041b      	lsls	r3, r3, #16
 800c432:	0e1b      	lsrs	r3, r3, #24
 800c434:	f003 030f 	and.w	r3, r3, #15
 800c438:	4a8e      	ldr	r2, [pc, #568]	@ (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800c43a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c43e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c440:	e18b      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c442:	2300      	movs	r3, #0
 800c444:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c446:	e188      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c448:	2300      	movs	r3, #0
 800c44a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c44c:	e185      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800c44e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c452:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800c456:	430b      	orrs	r3, r1
 800c458:	d155      	bne.n	800c506 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c45a:	4b84      	ldr	r3, [pc, #528]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c45c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c460:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c464:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c468:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c46c:	d013      	beq.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800c46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c470:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c474:	d844      	bhi.n	800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800c476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c478:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c47c:	d013      	beq.n	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800c47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c480:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c484:	d83c      	bhi.n	800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800c486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d014      	beq.n	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800c48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c48e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c492:	d014      	beq.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800c494:	e034      	b.n	800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c496:	f107 0318 	add.w	r3, r7, #24
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fe fb2e 	bl	800aafc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c4a4:	e159      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fe f9cc 	bl	800a848 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c4b4:	e151      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c4b6:	f7fd f84d 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800c4ba:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c4bc:	e14d      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c4be:	4b6b      	ldr	r3, [pc, #428]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f003 0320 	and.w	r3, r3, #32
 800c4c6:	2b20      	cmp	r3, #32
 800c4c8:	d117      	bne.n	800c4fa <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c4ca:	4b68      	ldr	r3, [pc, #416]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c4cc:	689b      	ldr	r3, [r3, #8]
 800c4ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d005      	beq.n	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800c4d6:	4b65      	ldr	r3, [pc, #404]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	0e1b      	lsrs	r3, r3, #24
 800c4dc:	f003 030f 	and.w	r3, r3, #15
 800c4e0:	e006      	b.n	800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800c4e2:	4b62      	ldr	r3, [pc, #392]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c4e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c4e8:	041b      	lsls	r3, r3, #16
 800c4ea:	0e1b      	lsrs	r3, r3, #24
 800c4ec:	f003 030f 	and.w	r3, r3, #15
 800c4f0:	4a60      	ldr	r2, [pc, #384]	@ (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800c4f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c4f8:	e12f      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c4fe:	e12c      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c500:	2300      	movs	r3, #0
 800c502:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c504:	e129      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800c506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c50a:	1e59      	subs	r1, r3, #1
 800c50c:	ea52 0301 	orrs.w	r3, r2, r1
 800c510:	d13c      	bne.n	800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800c512:	4b56      	ldr	r3, [pc, #344]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c514:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c518:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800c51c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c520:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c524:	d027      	beq.n	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800c526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c528:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c52c:	d82b      	bhi.n	800c586 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800c52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c530:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c534:	d017      	beq.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800c536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c538:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c53c:	d823      	bhi.n	800c586 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800c53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c540:	2b00      	cmp	r3, #0
 800c542:	d004      	beq.n	800c54e <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800c544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c546:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c54a:	d004      	beq.n	800c556 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800c54c:	e01b      	b.n	800c586 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c54e:	f7fd f801 	bl	8009554 <HAL_RCC_GetSysClockFreq>
 800c552:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c554:	e101      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7fe f974 	bl	800a848 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c562:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c564:	e0f9      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c566:	f107 0318 	add.w	r3, r7, #24
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7fe fac6 	bl	800aafc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c574:	e0f1      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c576:	f107 030c 	add.w	r3, r7, #12
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7fe fc18 	bl	800adb0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c584:	e0e9      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c586:	2300      	movs	r3, #0
 800c588:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c58a:	e0e6      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800c58c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c590:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800c594:	430b      	orrs	r3, r1
 800c596:	d131      	bne.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800c598:	4b34      	ldr	r3, [pc, #208]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c59a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c59e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c5a2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800c5a4:	4b31      	ldr	r3, [pc, #196]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c5a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c5aa:	f003 0302 	and.w	r3, r3, #2
 800c5ae:	2b02      	cmp	r3, #2
 800c5b0:	d106      	bne.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800c5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d103      	bne.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800c5b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5be:	e0cc      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800c5c0:	4b2a      	ldr	r3, [pc, #168]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c5c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c5c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c5ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c5ce:	d112      	bne.n	800c5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800c5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c5d6:	d10e      	bne.n	800c5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c5d8:	4b24      	ldr	r3, [pc, #144]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c5da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c5de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c5e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c5e6:	d102      	bne.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800c5e8:	23fa      	movs	r3, #250	@ 0xfa
 800c5ea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c5ec:	e0b5      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c5ee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c5f2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c5f4:	e0b1      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5fa:	e0ae      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800c5fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c600:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800c604:	430b      	orrs	r3, r1
 800c606:	d13b      	bne.n	800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800c608:	4b18      	ldr	r3, [pc, #96]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c60a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c60e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c612:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800c614:	4b15      	ldr	r3, [pc, #84]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c61c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c620:	d105      	bne.n	800c62e <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800c622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c624:	2b00      	cmp	r3, #0
 800c626:	d102      	bne.n	800c62e <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800c628:	4b13      	ldr	r3, [pc, #76]	@ (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800c62a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c62c:	e095      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800c62e:	4b0f      	ldr	r3, [pc, #60]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c63a:	d106      	bne.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800c63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c63e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c642:	d102      	bne.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800c644:	4b0d      	ldr	r3, [pc, #52]	@ (800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800c646:	637b      	str	r3, [r7, #52]	@ 0x34
 800c648:	e087      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800c64a:	4b08      	ldr	r3, [pc, #32]	@ (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c656:	d106      	bne.n	800c666 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800c658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c65a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c65e:	d102      	bne.n	800c666 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800c660:	4b03      	ldr	r3, [pc, #12]	@ (800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800c662:	637b      	str	r3, [r7, #52]	@ 0x34
 800c664:	e079      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800c666:	2300      	movs	r3, #0
 800c668:	637b      	str	r3, [r7, #52]	@ 0x34
 800c66a:	e076      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c66c:	46020c00 	.word	0x46020c00
 800c670:	00f42400 	.word	0x00f42400
 800c674:	0800df9c 	.word	0x0800df9c
 800c678:	02dc6c00 	.word	0x02dc6c00
 800c67c:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800c680:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c684:	1e99      	subs	r1, r3, #2
 800c686:	ea52 0301 	orrs.w	r3, r2, r1
 800c68a:	d120      	bne.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800c68c:	4b35      	ldr	r3, [pc, #212]	@ (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c68e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c692:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c696:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d004      	beq.n	800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800c69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c6a4:	d008      	beq.n	800c6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800c6a6:	e00f      	b.n	800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6a8:	f107 030c 	add.w	r3, r7, #12
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7fe fb7f 	bl	800adb0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6b6:	e050      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6b8:	f107 0318 	add.w	r3, r7, #24
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f7fe fa1d 	bl	800aafc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800c6c2:	6a3b      	ldr	r3, [r7, #32]
 800c6c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6c6:	e048      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6cc:	e045      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800c6ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6d2:	f1a3 0108 	sub.w	r1, r3, #8
 800c6d6:	ea52 0301 	orrs.w	r3, r2, r1
 800c6da:	d13c      	bne.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800c6dc:	4b21      	ldr	r3, [pc, #132]	@ (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c6de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c6e2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c6e6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800c6e8:	4b1e      	ldr	r3, [pc, #120]	@ (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6f4:	d105      	bne.n	800c702 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d102      	bne.n	800c702 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800c6fc:	4b1a      	ldr	r3, [pc, #104]	@ (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800c6fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800c700:	e02b      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800c702:	4b18      	ldr	r3, [pc, #96]	@ (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c70a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c70e:	d106      	bne.n	800c71e <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800c710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c712:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c716:	d102      	bne.n	800c71e <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800c718:	4b14      	ldr	r3, [pc, #80]	@ (800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800c71a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c71c:	e01d      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800c71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c724:	d107      	bne.n	800c736 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7fe f88c 	bl	800a848 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c732:	637b      	str	r3, [r7, #52]	@ 0x34
 800c734:	e011      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800c736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c738:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c73c:	d108      	bne.n	800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c73e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c742:	4618      	mov	r0, r3
 800c744:	f7fe f880 	bl	800a848 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800c748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74a:	085b      	lsrs	r3, r3, #1
 800c74c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c74e:	e004      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800c750:	2300      	movs	r3, #0
 800c752:	637b      	str	r3, [r7, #52]	@ 0x34
 800c754:	e001      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800c756:	2300      	movs	r3, #0
 800c758:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800c75a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3738      	adds	r7, #56	@ 0x38
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	46020c00 	.word	0x46020c00
 800c768:	00f42400 	.word	0x00f42400
 800c76c:	007a1200 	.word	0x007a1200

0800c770 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800c770:	b480      	push	{r7}
 800c772:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800c774:	4b06      	ldr	r3, [pc, #24]	@ (800c790 <HAL_RCCEx_EnableLSECSS+0x20>)
 800c776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c77a:	4a05      	ldr	r2, [pc, #20]	@ (800c790 <HAL_RCCEx_EnableLSECSS+0x20>)
 800c77c:	f043 0320 	orr.w	r3, r3, #32
 800c780:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 800c784:	bf00      	nop
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	46020c00 	.word	0x46020c00

0800c794 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  FlagStatus       pwrclkchanged = RESET;
 800c79c:	2300      	movs	r3, #0
 800c79e:	73fb      	strb	r3, [r7, #15]
  FlagStatus       backupchanged = RESET;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c7a4:	4b20      	ldr	r3, [pc, #128]	@ (800c828 <HAL_RCCEx_EnableLSCO+0x94>)
 800c7a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c7aa:	f003 0304 	and.w	r3, r3, #4
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d110      	bne.n	800c7d4 <HAL_RCCEx_EnableLSCO+0x40>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c7b2:	4b1d      	ldr	r3, [pc, #116]	@ (800c828 <HAL_RCCEx_EnableLSCO+0x94>)
 800c7b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c7b8:	4a1b      	ldr	r2, [pc, #108]	@ (800c828 <HAL_RCCEx_EnableLSCO+0x94>)
 800c7ba:	f043 0304 	orr.w	r3, r3, #4
 800c7be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800c7c2:	4b19      	ldr	r3, [pc, #100]	@ (800c828 <HAL_RCCEx_EnableLSCO+0x94>)
 800c7c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c7c8:	f003 0304 	and.w	r3, r3, #4
 800c7cc:	60bb      	str	r3, [r7, #8]
 800c7ce:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	73fb      	strb	r3, [r7, #15]
  }
  if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c7d4:	4b15      	ldr	r3, [pc, #84]	@ (800c82c <HAL_RCCEx_EnableLSCO+0x98>)
 800c7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7d8:	f003 0301 	and.w	r3, r3, #1
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d103      	bne.n	800c7e8 <HAL_RCCEx_EnableLSCO+0x54>
  {
    HAL_PWR_EnableBkUpAccess();
 800c7e0:	f7fb fcce 	bl	8008180 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	73bb      	strb	r3, [r7, #14]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 800c7e8:	4b0f      	ldr	r3, [pc, #60]	@ (800c828 <HAL_RCCEx_EnableLSCO+0x94>)
 800c7ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c7ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	4a0c      	ldr	r2, [pc, #48]	@ (800c828 <HAL_RCCEx_EnableLSCO+0x94>)
 800c7f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c7fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  if (backupchanged == SET)
 800c800:	7bbb      	ldrb	r3, [r7, #14]
 800c802:	2b01      	cmp	r3, #1
 800c804:	d101      	bne.n	800c80a <HAL_RCCEx_EnableLSCO+0x76>
  {
    HAL_PWR_DisableBkUpAccess();
 800c806:	f7fb fccb 	bl	80081a0 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 800c80a:	7bfb      	ldrb	r3, [r7, #15]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d107      	bne.n	800c820 <HAL_RCCEx_EnableLSCO+0x8c>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 800c810:	4b05      	ldr	r3, [pc, #20]	@ (800c828 <HAL_RCCEx_EnableLSCO+0x94>)
 800c812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c816:	4a04      	ldr	r2, [pc, #16]	@ (800c828 <HAL_RCCEx_EnableLSCO+0x94>)
 800c818:	f023 0304 	bic.w	r3, r3, #4
 800c81c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }
}
 800c820:	bf00      	nop
 800c822:	3710      	adds	r7, #16
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	46020c00 	.word	0x46020c00
 800c82c:	46020800 	.word	0x46020800

0800c830 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800c838:	4b47      	ldr	r3, [pc, #284]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a46      	ldr	r2, [pc, #280]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c83e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c842:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c844:	f7f5 fc94 	bl	8002170 <HAL_GetTick>
 800c848:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c84a:	e008      	b.n	800c85e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c84c:	f7f5 fc90 	bl	8002170 <HAL_GetTick>
 800c850:	4602      	mov	r2, r0
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	1ad3      	subs	r3, r2, r3
 800c856:	2b02      	cmp	r3, #2
 800c858:	d901      	bls.n	800c85e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c85a:	2303      	movs	r3, #3
 800c85c:	e077      	b.n	800c94e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c85e:	4b3e      	ldr	r3, [pc, #248]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c866:	2b00      	cmp	r3, #0
 800c868:	d1f0      	bne.n	800c84c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c86a:	4b3b      	ldr	r3, [pc, #236]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c86e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c872:	f023 0303 	bic.w	r3, r3, #3
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	6811      	ldr	r1, [r2, #0]
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	6852      	ldr	r2, [r2, #4]
 800c87e:	3a01      	subs	r2, #1
 800c880:	0212      	lsls	r2, r2, #8
 800c882:	430a      	orrs	r2, r1
 800c884:	4934      	ldr	r1, [pc, #208]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c886:	4313      	orrs	r3, r2
 800c888:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800c88a:	4b33      	ldr	r3, [pc, #204]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c88c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c88e:	4b33      	ldr	r3, [pc, #204]	@ (800c95c <RCCEx_PLL2_Config+0x12c>)
 800c890:	4013      	ands	r3, r2
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	6892      	ldr	r2, [r2, #8]
 800c896:	3a01      	subs	r2, #1
 800c898:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	68d2      	ldr	r2, [r2, #12]
 800c8a0:	3a01      	subs	r2, #1
 800c8a2:	0252      	lsls	r2, r2, #9
 800c8a4:	b292      	uxth	r2, r2
 800c8a6:	4311      	orrs	r1, r2
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	6912      	ldr	r2, [r2, #16]
 800c8ac:	3a01      	subs	r2, #1
 800c8ae:	0412      	lsls	r2, r2, #16
 800c8b0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c8b4:	4311      	orrs	r1, r2
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	6952      	ldr	r2, [r2, #20]
 800c8ba:	3a01      	subs	r2, #1
 800c8bc:	0612      	lsls	r2, r2, #24
 800c8be:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c8c2:	430a      	orrs	r2, r1
 800c8c4:	4924      	ldr	r1, [pc, #144]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c8ca:	4b23      	ldr	r3, [pc, #140]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ce:	f023 020c 	bic.w	r2, r3, #12
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	699b      	ldr	r3, [r3, #24]
 800c8d6:	4920      	ldr	r1, [pc, #128]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c8dc:	4b1e      	ldr	r3, [pc, #120]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c8de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6a1b      	ldr	r3, [r3, #32]
 800c8e4:	491c      	ldr	r1, [pc, #112]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800c8ea:	4b1b      	ldr	r3, [pc, #108]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c8ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ee:	4a1a      	ldr	r2, [pc, #104]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c8f0:	f023 0310 	bic.w	r3, r3, #16
 800c8f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c8f6:	4b18      	ldr	r3, [pc, #96]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c8f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c8fe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	69d2      	ldr	r2, [r2, #28]
 800c906:	00d2      	lsls	r2, r2, #3
 800c908:	4913      	ldr	r1, [pc, #76]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c90a:	4313      	orrs	r3, r2
 800c90c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800c90e:	4b12      	ldr	r3, [pc, #72]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c912:	4a11      	ldr	r2, [pc, #68]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c914:	f043 0310 	orr.w	r3, r3, #16
 800c918:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800c91a:	4b0f      	ldr	r3, [pc, #60]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a0e      	ldr	r2, [pc, #56]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c920:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c924:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c926:	f7f5 fc23 	bl	8002170 <HAL_GetTick>
 800c92a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c92c:	e008      	b.n	800c940 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c92e:	f7f5 fc1f 	bl	8002170 <HAL_GetTick>
 800c932:	4602      	mov	r2, r0
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	1ad3      	subs	r3, r2, r3
 800c938:	2b02      	cmp	r3, #2
 800c93a:	d901      	bls.n	800c940 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c93c:	2303      	movs	r3, #3
 800c93e:	e006      	b.n	800c94e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c940:	4b05      	ldr	r3, [pc, #20]	@ (800c958 <RCCEx_PLL2_Config+0x128>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d0f0      	beq.n	800c92e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800c94c:	2300      	movs	r3, #0

}
 800c94e:	4618      	mov	r0, r3
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	46020c00 	.word	0x46020c00
 800c95c:	80800000 	.word	0x80800000

0800c960 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800c968:	4b47      	ldr	r3, [pc, #284]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a46      	ldr	r2, [pc, #280]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800c96e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c972:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c974:	f7f5 fbfc 	bl	8002170 <HAL_GetTick>
 800c978:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c97a:	e008      	b.n	800c98e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c97c:	f7f5 fbf8 	bl	8002170 <HAL_GetTick>
 800c980:	4602      	mov	r2, r0
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	1ad3      	subs	r3, r2, r3
 800c986:	2b02      	cmp	r3, #2
 800c988:	d901      	bls.n	800c98e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c98a:	2303      	movs	r3, #3
 800c98c:	e077      	b.n	800ca7e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c98e:	4b3e      	ldr	r3, [pc, #248]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c996:	2b00      	cmp	r3, #0
 800c998:	d1f0      	bne.n	800c97c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c99a:	4b3b      	ldr	r3, [pc, #236]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800c99c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c99e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c9a2:	f023 0303 	bic.w	r3, r3, #3
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	6811      	ldr	r1, [r2, #0]
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	6852      	ldr	r2, [r2, #4]
 800c9ae:	3a01      	subs	r2, #1
 800c9b0:	0212      	lsls	r2, r2, #8
 800c9b2:	430a      	orrs	r2, r1
 800c9b4:	4934      	ldr	r1, [pc, #208]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	630b      	str	r3, [r1, #48]	@ 0x30
 800c9ba:	4b33      	ldr	r3, [pc, #204]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800c9bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c9be:	4b33      	ldr	r3, [pc, #204]	@ (800ca8c <RCCEx_PLL3_Config+0x12c>)
 800c9c0:	4013      	ands	r3, r2
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	6892      	ldr	r2, [r2, #8]
 800c9c6:	3a01      	subs	r2, #1
 800c9c8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	68d2      	ldr	r2, [r2, #12]
 800c9d0:	3a01      	subs	r2, #1
 800c9d2:	0252      	lsls	r2, r2, #9
 800c9d4:	b292      	uxth	r2, r2
 800c9d6:	4311      	orrs	r1, r2
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	6912      	ldr	r2, [r2, #16]
 800c9dc:	3a01      	subs	r2, #1
 800c9de:	0412      	lsls	r2, r2, #16
 800c9e0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c9e4:	4311      	orrs	r1, r2
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	6952      	ldr	r2, [r2, #20]
 800c9ea:	3a01      	subs	r2, #1
 800c9ec:	0612      	lsls	r2, r2, #24
 800c9ee:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c9f2:	430a      	orrs	r2, r1
 800c9f4:	4924      	ldr	r1, [pc, #144]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800c9fa:	4b23      	ldr	r3, [pc, #140]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800c9fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9fe:	f023 020c 	bic.w	r2, r3, #12
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	699b      	ldr	r3, [r3, #24]
 800ca06:	4920      	ldr	r1, [pc, #128]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800ca0c:	4b1e      	ldr	r3, [pc, #120]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800ca0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6a1b      	ldr	r3, [r3, #32]
 800ca14:	491c      	ldr	r1, [pc, #112]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800ca16:	4313      	orrs	r3, r2
 800ca18:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800ca1a:	4b1b      	ldr	r3, [pc, #108]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800ca1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca1e:	4a1a      	ldr	r2, [pc, #104]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800ca20:	f023 0310 	bic.w	r3, r3, #16
 800ca24:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ca26:	4b18      	ldr	r3, [pc, #96]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800ca28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ca2e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	69d2      	ldr	r2, [r2, #28]
 800ca36:	00d2      	lsls	r2, r2, #3
 800ca38:	4913      	ldr	r1, [pc, #76]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800ca3e:	4b12      	ldr	r3, [pc, #72]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800ca40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca42:	4a11      	ldr	r2, [pc, #68]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800ca44:	f043 0310 	orr.w	r3, r3, #16
 800ca48:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800ca4a:	4b0f      	ldr	r3, [pc, #60]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4a0e      	ldr	r2, [pc, #56]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800ca50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca54:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ca56:	f7f5 fb8b 	bl	8002170 <HAL_GetTick>
 800ca5a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ca5c:	e008      	b.n	800ca70 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ca5e:	f7f5 fb87 	bl	8002170 <HAL_GetTick>
 800ca62:	4602      	mov	r2, r0
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	1ad3      	subs	r3, r2, r3
 800ca68:	2b02      	cmp	r3, #2
 800ca6a:	d901      	bls.n	800ca70 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800ca6c:	2303      	movs	r3, #3
 800ca6e:	e006      	b.n	800ca7e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ca70:	4b05      	ldr	r3, [pc, #20]	@ (800ca88 <RCCEx_PLL3_Config+0x128>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d0f0      	beq.n	800ca5e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800ca7c:	2300      	movs	r3, #0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3710      	adds	r7, #16
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	46020c00 	.word	0x46020c00
 800ca8c:	80800000 	.word	0x80800000

0800ca90 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d071      	beq.n	800cb86 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d106      	bne.n	800cabc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2200      	movs	r2, #0
 800cab2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f7f5 f914 	bl	8001ce4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2202      	movs	r2, #2
 800cac0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800cac4:	4b32      	ldr	r3, [pc, #200]	@ (800cb90 <HAL_RTC_Init+0x100>)
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	f003 0310 	and.w	r3, r3, #16
 800cacc:	2b10      	cmp	r3, #16
 800cace:	d051      	beq.n	800cb74 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cad0:	4b2f      	ldr	r3, [pc, #188]	@ (800cb90 <HAL_RTC_Init+0x100>)
 800cad2:	22ca      	movs	r2, #202	@ 0xca
 800cad4:	625a      	str	r2, [r3, #36]	@ 0x24
 800cad6:	4b2e      	ldr	r3, [pc, #184]	@ (800cb90 <HAL_RTC_Init+0x100>)
 800cad8:	2253      	movs	r2, #83	@ 0x53
 800cada:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 f88b 	bl	800cbf8 <RTC_EnterInitMode>
 800cae2:	4603      	mov	r3, r0
 800cae4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800cae6:	7bfb      	ldrb	r3, [r7, #15]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d13f      	bne.n	800cb6c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800caec:	4b28      	ldr	r3, [pc, #160]	@ (800cb90 <HAL_RTC_Init+0x100>)
 800caee:	699b      	ldr	r3, [r3, #24]
 800caf0:	4a27      	ldr	r2, [pc, #156]	@ (800cb90 <HAL_RTC_Init+0x100>)
 800caf2:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800caf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cafa:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800cafc:	4b24      	ldr	r3, [pc, #144]	@ (800cb90 <HAL_RTC_Init+0x100>)
 800cafe:	699a      	ldr	r2, [r3, #24]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6859      	ldr	r1, [r3, #4]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	691b      	ldr	r3, [r3, #16]
 800cb08:	4319      	orrs	r1, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	699b      	ldr	r3, [r3, #24]
 800cb0e:	430b      	orrs	r3, r1
 800cb10:	491f      	ldr	r1, [pc, #124]	@ (800cb90 <HAL_RTC_Init+0x100>)
 800cb12:	4313      	orrs	r3, r2
 800cb14:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	68da      	ldr	r2, [r3, #12]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	041b      	lsls	r3, r3, #16
 800cb20:	491b      	ldr	r1, [pc, #108]	@ (800cb90 <HAL_RTC_Init+0x100>)
 800cb22:	4313      	orrs	r3, r2
 800cb24:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800cb26:	4b1a      	ldr	r3, [pc, #104]	@ (800cb90 <HAL_RTC_Init+0x100>)
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb36:	430b      	orrs	r3, r1
 800cb38:	4915      	ldr	r1, [pc, #84]	@ (800cb90 <HAL_RTC_Init+0x100>)
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 f896 	bl	800cc70 <RTC_ExitInitMode>
 800cb44:	4603      	mov	r3, r0
 800cb46:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800cb48:	7bfb      	ldrb	r3, [r7, #15]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d10e      	bne.n	800cb6c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800cb4e:	4b10      	ldr	r3, [pc, #64]	@ (800cb90 <HAL_RTC_Init+0x100>)
 800cb50:	699b      	ldr	r3, [r3, #24]
 800cb52:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a19      	ldr	r1, [r3, #32]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	69db      	ldr	r3, [r3, #28]
 800cb5e:	4319      	orrs	r1, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	695b      	ldr	r3, [r3, #20]
 800cb64:	430b      	orrs	r3, r1
 800cb66:	490a      	ldr	r1, [pc, #40]	@ (800cb90 <HAL_RTC_Init+0x100>)
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb6c:	4b08      	ldr	r3, [pc, #32]	@ (800cb90 <HAL_RTC_Init+0x100>)
 800cb6e:	22ff      	movs	r2, #255	@ 0xff
 800cb70:	625a      	str	r2, [r3, #36]	@ 0x24
 800cb72:	e001      	b.n	800cb78 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800cb74:	2300      	movs	r3, #0
 800cb76:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800cb78:	7bfb      	ldrb	r3, [r7, #15]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d103      	bne.n	800cb86 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2201      	movs	r2, #1
 800cb82:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800cb86:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3710      	adds	r7, #16
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	46007800 	.word	0x46007800

0800cb94 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800cb9c:	4b15      	ldr	r3, [pc, #84]	@ (800cbf4 <HAL_RTC_WaitForSynchro+0x60>)
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	4a14      	ldr	r2, [pc, #80]	@ (800cbf4 <HAL_RTC_WaitForSynchro+0x60>)
 800cba2:	f023 0320 	bic.w	r3, r3, #32
 800cba6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800cba8:	f7f5 fae2 	bl	8002170 <HAL_GetTick>
 800cbac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cbae:	e013      	b.n	800cbd8 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cbb0:	f7f5 fade 	bl	8002170 <HAL_GetTick>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cbbe:	d90b      	bls.n	800cbd8 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cbc0:	4b0c      	ldr	r3, [pc, #48]	@ (800cbf4 <HAL_RTC_WaitForSynchro+0x60>)
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	f003 0320 	and.w	r3, r3, #32
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d10c      	bne.n	800cbe6 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2203      	movs	r2, #3
 800cbd0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800cbd4:	2303      	movs	r3, #3
 800cbd6:	e008      	b.n	800cbea <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cbd8:	4b06      	ldr	r3, [pc, #24]	@ (800cbf4 <HAL_RTC_WaitForSynchro+0x60>)
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	f003 0320 	and.w	r3, r3, #32
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d0e5      	beq.n	800cbb0 <HAL_RTC_WaitForSynchro+0x1c>
 800cbe4:	e000      	b.n	800cbe8 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800cbe6:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	46007800 	.word	0x46007800

0800cbf8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc00:	2300      	movs	r3, #0
 800cc02:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cc04:	4b19      	ldr	r3, [pc, #100]	@ (800cc6c <RTC_EnterInitMode+0x74>)
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d128      	bne.n	800cc62 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cc10:	4b16      	ldr	r3, [pc, #88]	@ (800cc6c <RTC_EnterInitMode+0x74>)
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	4a15      	ldr	r2, [pc, #84]	@ (800cc6c <RTC_EnterInitMode+0x74>)
 800cc16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc1a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800cc1c:	f7f5 faa8 	bl	8002170 <HAL_GetTick>
 800cc20:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cc22:	e013      	b.n	800cc4c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cc24:	f7f5 faa4 	bl	8002170 <HAL_GetTick>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	1ad3      	subs	r3, r2, r3
 800cc2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cc32:	d90b      	bls.n	800cc4c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cc34:	4b0d      	ldr	r3, [pc, #52]	@ (800cc6c <RTC_EnterInitMode+0x74>)
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d10f      	bne.n	800cc60 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800cc40:	2303      	movs	r3, #3
 800cc42:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2203      	movs	r2, #3
 800cc48:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cc4c:	4b07      	ldr	r3, [pc, #28]	@ (800cc6c <RTC_EnterInitMode+0x74>)
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d104      	bne.n	800cc62 <RTC_EnterInitMode+0x6a>
 800cc58:	7bfb      	ldrb	r3, [r7, #15]
 800cc5a:	2b03      	cmp	r3, #3
 800cc5c:	d1e2      	bne.n	800cc24 <RTC_EnterInitMode+0x2c>
 800cc5e:	e000      	b.n	800cc62 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800cc60:	bf00      	nop
        }
      }
    }
  }

  return status;
 800cc62:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3710      	adds	r7, #16
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	46007800 	.word	0x46007800

0800cc70 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cc7c:	4b1a      	ldr	r3, [pc, #104]	@ (800cce8 <RTC_ExitInitMode+0x78>)
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	4a19      	ldr	r2, [pc, #100]	@ (800cce8 <RTC_ExitInitMode+0x78>)
 800cc82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc86:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cc88:	4b17      	ldr	r3, [pc, #92]	@ (800cce8 <RTC_ExitInitMode+0x78>)
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	f003 0320 	and.w	r3, r3, #32
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10c      	bne.n	800ccae <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f7ff ff7d 	bl	800cb94 <HAL_RTC_WaitForSynchro>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d01e      	beq.n	800ccde <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2203      	movs	r2, #3
 800cca4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800cca8:	2303      	movs	r3, #3
 800ccaa:	73fb      	strb	r3, [r7, #15]
 800ccac:	e017      	b.n	800ccde <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ccae:	4b0e      	ldr	r3, [pc, #56]	@ (800cce8 <RTC_ExitInitMode+0x78>)
 800ccb0:	699b      	ldr	r3, [r3, #24]
 800ccb2:	4a0d      	ldr	r2, [pc, #52]	@ (800cce8 <RTC_ExitInitMode+0x78>)
 800ccb4:	f023 0320 	bic.w	r3, r3, #32
 800ccb8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f7ff ff6a 	bl	800cb94 <HAL_RTC_WaitForSynchro>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d005      	beq.n	800ccd2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2203      	movs	r2, #3
 800ccca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ccce:	2303      	movs	r3, #3
 800ccd0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ccd2:	4b05      	ldr	r3, [pc, #20]	@ (800cce8 <RTC_ExitInitMode+0x78>)
 800ccd4:	699b      	ldr	r3, [r3, #24]
 800ccd6:	4a04      	ldr	r2, [pc, #16]	@ (800cce8 <RTC_ExitInitMode+0x78>)
 800ccd8:	f043 0320 	orr.w	r3, r3, #32
 800ccdc:	6193      	str	r3, [r2, #24]
  }
  return status;
 800ccde:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3710      	adds	r7, #16
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	46007800 	.word	0x46007800

0800ccec <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	4910      	ldr	r1, [pc, #64]	@ (800cd40 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800cd00:	4313      	orrs	r3, r2
 800cd02:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	689a      	ldr	r2, [r3, #8]
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	431a      	orrs	r2, r3
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	699b      	ldr	r3, [r3, #24]
 800cd12:	490c      	ldr	r1, [pc, #48]	@ (800cd44 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd14:	4313      	orrs	r3, r2
 800cd16:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800cd18:	4b0a      	ldr	r3, [pc, #40]	@ (800cd44 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd1a:	6a1b      	ldr	r3, [r3, #32]
 800cd1c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	6919      	ldr	r1, [r3, #16]
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	695b      	ldr	r3, [r3, #20]
 800cd28:	041b      	lsls	r3, r3, #16
 800cd2a:	430b      	orrs	r3, r1
 800cd2c:	4905      	ldr	r1, [pc, #20]	@ (800cd44 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800cd32:	2300      	movs	r3, #0
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	370c      	adds	r7, #12
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr
 800cd40:	46007800 	.word	0x46007800
 800cd44:	46007c00 	.word	0x46007c00

0800cd48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d101      	bne.n	800cd5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cd56:	2301      	movs	r3, #1
 800cd58:	e049      	b.n	800cdee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d106      	bne.n	800cd74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 f841 	bl	800cdf6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2202      	movs	r2, #2
 800cd78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	3304      	adds	r3, #4
 800cd84:	4619      	mov	r1, r3
 800cd86:	4610      	mov	r0, r2
 800cd88:	f000 fa58 	bl	800d23c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2201      	movs	r2, #1
 800cd98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2201      	movs	r2, #1
 800cda0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2201      	movs	r2, #1
 800cda8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2201      	movs	r2, #1
 800cde0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2201      	movs	r2, #1
 800cde8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3708      	adds	r7, #8
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}

0800cdf6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800cdf6:	b480      	push	{r7}
 800cdf8:	b083      	sub	sp, #12
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800cdfe:	bf00      	nop
 800ce00:	370c      	adds	r7, #12
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr
	...

0800ce0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b085      	sub	sp, #20
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d001      	beq.n	800ce24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ce20:	2301      	movs	r3, #1
 800ce22:	e072      	b.n	800cf0a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2202      	movs	r2, #2
 800ce28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	68da      	ldr	r2, [r3, #12]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f042 0201 	orr.w	r2, r2, #1
 800ce3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a35      	ldr	r2, [pc, #212]	@ (800cf18 <HAL_TIM_Base_Start_IT+0x10c>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d040      	beq.n	800cec8 <HAL_TIM_Base_Start_IT+0xbc>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a34      	ldr	r2, [pc, #208]	@ (800cf1c <HAL_TIM_Base_Start_IT+0x110>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d03b      	beq.n	800cec8 <HAL_TIM_Base_Start_IT+0xbc>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce58:	d036      	beq.n	800cec8 <HAL_TIM_Base_Start_IT+0xbc>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ce62:	d031      	beq.n	800cec8 <HAL_TIM_Base_Start_IT+0xbc>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a2d      	ldr	r2, [pc, #180]	@ (800cf20 <HAL_TIM_Base_Start_IT+0x114>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d02c      	beq.n	800cec8 <HAL_TIM_Base_Start_IT+0xbc>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	4a2c      	ldr	r2, [pc, #176]	@ (800cf24 <HAL_TIM_Base_Start_IT+0x118>)
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d027      	beq.n	800cec8 <HAL_TIM_Base_Start_IT+0xbc>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4a2a      	ldr	r2, [pc, #168]	@ (800cf28 <HAL_TIM_Base_Start_IT+0x11c>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d022      	beq.n	800cec8 <HAL_TIM_Base_Start_IT+0xbc>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	4a29      	ldr	r2, [pc, #164]	@ (800cf2c <HAL_TIM_Base_Start_IT+0x120>)
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d01d      	beq.n	800cec8 <HAL_TIM_Base_Start_IT+0xbc>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4a27      	ldr	r2, [pc, #156]	@ (800cf30 <HAL_TIM_Base_Start_IT+0x124>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d018      	beq.n	800cec8 <HAL_TIM_Base_Start_IT+0xbc>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	4a26      	ldr	r2, [pc, #152]	@ (800cf34 <HAL_TIM_Base_Start_IT+0x128>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d013      	beq.n	800cec8 <HAL_TIM_Base_Start_IT+0xbc>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4a24      	ldr	r2, [pc, #144]	@ (800cf38 <HAL_TIM_Base_Start_IT+0x12c>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d00e      	beq.n	800cec8 <HAL_TIM_Base_Start_IT+0xbc>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	4a23      	ldr	r2, [pc, #140]	@ (800cf3c <HAL_TIM_Base_Start_IT+0x130>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d009      	beq.n	800cec8 <HAL_TIM_Base_Start_IT+0xbc>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	4a21      	ldr	r2, [pc, #132]	@ (800cf40 <HAL_TIM_Base_Start_IT+0x134>)
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d004      	beq.n	800cec8 <HAL_TIM_Base_Start_IT+0xbc>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	4a20      	ldr	r2, [pc, #128]	@ (800cf44 <HAL_TIM_Base_Start_IT+0x138>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d115      	bne.n	800cef4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	689a      	ldr	r2, [r3, #8]
 800cece:	4b1e      	ldr	r3, [pc, #120]	@ (800cf48 <HAL_TIM_Base_Start_IT+0x13c>)
 800ced0:	4013      	ands	r3, r2
 800ced2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2b06      	cmp	r3, #6
 800ced8:	d015      	beq.n	800cf06 <HAL_TIM_Base_Start_IT+0xfa>
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cee0:	d011      	beq.n	800cf06 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f042 0201 	orr.w	r2, r2, #1
 800cef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cef2:	e008      	b.n	800cf06 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f042 0201 	orr.w	r2, r2, #1
 800cf02:	601a      	str	r2, [r3, #0]
 800cf04:	e000      	b.n	800cf08 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cf08:	2300      	movs	r3, #0
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3714      	adds	r7, #20
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	40012c00 	.word	0x40012c00
 800cf1c:	50012c00 	.word	0x50012c00
 800cf20:	40000400 	.word	0x40000400
 800cf24:	50000400 	.word	0x50000400
 800cf28:	40000800 	.word	0x40000800
 800cf2c:	50000800 	.word	0x50000800
 800cf30:	40000c00 	.word	0x40000c00
 800cf34:	50000c00 	.word	0x50000c00
 800cf38:	40013400 	.word	0x40013400
 800cf3c:	50013400 	.word	0x50013400
 800cf40:	40014000 	.word	0x40014000
 800cf44:	50014000 	.word	0x50014000
 800cf48:	00010007 	.word	0x00010007

0800cf4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	691b      	ldr	r3, [r3, #16]
 800cf62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	f003 0302 	and.w	r3, r3, #2
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d020      	beq.n	800cfb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f003 0302 	and.w	r3, r3, #2
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d01b      	beq.n	800cfb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f06f 0202 	mvn.w	r2, #2
 800cf80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2201      	movs	r2, #1
 800cf86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	699b      	ldr	r3, [r3, #24]
 800cf8e:	f003 0303 	and.w	r3, r3, #3
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d003      	beq.n	800cf9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 f931 	bl	800d1fe <HAL_TIM_IC_CaptureCallback>
 800cf9c:	e005      	b.n	800cfaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 f923 	bl	800d1ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 f934 	bl	800d212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2200      	movs	r2, #0
 800cfae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	f003 0304 	and.w	r3, r3, #4
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d020      	beq.n	800cffc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	f003 0304 	and.w	r3, r3, #4
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d01b      	beq.n	800cffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f06f 0204 	mvn.w	r2, #4
 800cfcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2202      	movs	r2, #2
 800cfd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	699b      	ldr	r3, [r3, #24]
 800cfda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d003      	beq.n	800cfea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 f90b 	bl	800d1fe <HAL_TIM_IC_CaptureCallback>
 800cfe8:	e005      	b.n	800cff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 f8fd 	bl	800d1ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 f90e 	bl	800d212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2200      	movs	r2, #0
 800cffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	f003 0308 	and.w	r3, r3, #8
 800d002:	2b00      	cmp	r3, #0
 800d004:	d020      	beq.n	800d048 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f003 0308 	and.w	r3, r3, #8
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d01b      	beq.n	800d048 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f06f 0208 	mvn.w	r2, #8
 800d018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2204      	movs	r2, #4
 800d01e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	69db      	ldr	r3, [r3, #28]
 800d026:	f003 0303 	and.w	r3, r3, #3
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d003      	beq.n	800d036 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 f8e5 	bl	800d1fe <HAL_TIM_IC_CaptureCallback>
 800d034:	e005      	b.n	800d042 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 f8d7 	bl	800d1ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 f8e8 	bl	800d212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	f003 0310 	and.w	r3, r3, #16
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d020      	beq.n	800d094 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f003 0310 	and.w	r3, r3, #16
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d01b      	beq.n	800d094 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f06f 0210 	mvn.w	r2, #16
 800d064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2208      	movs	r2, #8
 800d06a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	69db      	ldr	r3, [r3, #28]
 800d072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d076:	2b00      	cmp	r3, #0
 800d078:	d003      	beq.n	800d082 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 f8bf 	bl	800d1fe <HAL_TIM_IC_CaptureCallback>
 800d080:	e005      	b.n	800d08e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 f8b1 	bl	800d1ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 f8c2 	bl	800d212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2200      	movs	r2, #0
 800d092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	f003 0301 	and.w	r3, r3, #1
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00c      	beq.n	800d0b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	f003 0301 	and.w	r3, r3, #1
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d007      	beq.n	800d0b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f06f 0201 	mvn.w	r2, #1
 800d0b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f7f4 fab4 	bl	8001620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d104      	bne.n	800d0cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d00c      	beq.n	800d0e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d007      	beq.n	800d0e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d0de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 f9bb 	bl	800d45c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d00c      	beq.n	800d10a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d007      	beq.n	800d10a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 f9b3 	bl	800d470 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d110:	2b00      	cmp	r3, #0
 800d112:	d00c      	beq.n	800d12e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d007      	beq.n	800d12e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 f87c 	bl	800d226 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	f003 0320 	and.w	r3, r3, #32
 800d134:	2b00      	cmp	r3, #0
 800d136:	d00c      	beq.n	800d152 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f003 0320 	and.w	r3, r3, #32
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d007      	beq.n	800d152 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f06f 0220 	mvn.w	r2, #32
 800d14a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 f97b 	bl	800d448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00c      	beq.n	800d176 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d162:	2b00      	cmp	r3, #0
 800d164:	d007      	beq.n	800d176 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800d16e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 f987 	bl	800d484 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00c      	beq.n	800d19a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d186:	2b00      	cmp	r3, #0
 800d188:	d007      	beq.n	800d19a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800d192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f000 f97f 	bl	800d498 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d00c      	beq.n	800d1be <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d007      	beq.n	800d1be <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800d1b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 f977 	bl	800d4ac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00c      	beq.n	800d1e2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d007      	beq.n	800d1e2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800d1da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 f96f 	bl	800d4c0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d1e2:	bf00      	nop
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d1ea:	b480      	push	{r7}
 800d1ec:	b083      	sub	sp, #12
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d1f2:	bf00      	nop
 800d1f4:	370c      	adds	r7, #12
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d1fe:	b480      	push	{r7}
 800d200:	b083      	sub	sp, #12
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d206:	bf00      	nop
 800d208:	370c      	adds	r7, #12
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr

0800d212 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d212:	b480      	push	{r7}
 800d214:	b083      	sub	sp, #12
 800d216:	af00      	add	r7, sp, #0
 800d218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d21a:	bf00      	nop
 800d21c:	370c      	adds	r7, #12
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr

0800d226 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d226:	b480      	push	{r7}
 800d228:	b083      	sub	sp, #12
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d22e:	bf00      	nop
 800d230:	370c      	adds	r7, #12
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
	...

0800d23c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b085      	sub	sp, #20
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	4a6e      	ldr	r2, [pc, #440]	@ (800d408 <TIM_Base_SetConfig+0x1cc>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d02b      	beq.n	800d2ac <TIM_Base_SetConfig+0x70>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	4a6d      	ldr	r2, [pc, #436]	@ (800d40c <TIM_Base_SetConfig+0x1d0>)
 800d258:	4293      	cmp	r3, r2
 800d25a:	d027      	beq.n	800d2ac <TIM_Base_SetConfig+0x70>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d262:	d023      	beq.n	800d2ac <TIM_Base_SetConfig+0x70>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d26a:	d01f      	beq.n	800d2ac <TIM_Base_SetConfig+0x70>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	4a68      	ldr	r2, [pc, #416]	@ (800d410 <TIM_Base_SetConfig+0x1d4>)
 800d270:	4293      	cmp	r3, r2
 800d272:	d01b      	beq.n	800d2ac <TIM_Base_SetConfig+0x70>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	4a67      	ldr	r2, [pc, #412]	@ (800d414 <TIM_Base_SetConfig+0x1d8>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d017      	beq.n	800d2ac <TIM_Base_SetConfig+0x70>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	4a66      	ldr	r2, [pc, #408]	@ (800d418 <TIM_Base_SetConfig+0x1dc>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d013      	beq.n	800d2ac <TIM_Base_SetConfig+0x70>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	4a65      	ldr	r2, [pc, #404]	@ (800d41c <TIM_Base_SetConfig+0x1e0>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d00f      	beq.n	800d2ac <TIM_Base_SetConfig+0x70>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	4a64      	ldr	r2, [pc, #400]	@ (800d420 <TIM_Base_SetConfig+0x1e4>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d00b      	beq.n	800d2ac <TIM_Base_SetConfig+0x70>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	4a63      	ldr	r2, [pc, #396]	@ (800d424 <TIM_Base_SetConfig+0x1e8>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d007      	beq.n	800d2ac <TIM_Base_SetConfig+0x70>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	4a62      	ldr	r2, [pc, #392]	@ (800d428 <TIM_Base_SetConfig+0x1ec>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d003      	beq.n	800d2ac <TIM_Base_SetConfig+0x70>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	4a61      	ldr	r2, [pc, #388]	@ (800d42c <TIM_Base_SetConfig+0x1f0>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d108      	bne.n	800d2be <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	4a51      	ldr	r2, [pc, #324]	@ (800d408 <TIM_Base_SetConfig+0x1cc>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d043      	beq.n	800d34e <TIM_Base_SetConfig+0x112>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	4a50      	ldr	r2, [pc, #320]	@ (800d40c <TIM_Base_SetConfig+0x1d0>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d03f      	beq.n	800d34e <TIM_Base_SetConfig+0x112>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2d4:	d03b      	beq.n	800d34e <TIM_Base_SetConfig+0x112>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d2dc:	d037      	beq.n	800d34e <TIM_Base_SetConfig+0x112>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	4a4b      	ldr	r2, [pc, #300]	@ (800d410 <TIM_Base_SetConfig+0x1d4>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d033      	beq.n	800d34e <TIM_Base_SetConfig+0x112>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	4a4a      	ldr	r2, [pc, #296]	@ (800d414 <TIM_Base_SetConfig+0x1d8>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d02f      	beq.n	800d34e <TIM_Base_SetConfig+0x112>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	4a49      	ldr	r2, [pc, #292]	@ (800d418 <TIM_Base_SetConfig+0x1dc>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d02b      	beq.n	800d34e <TIM_Base_SetConfig+0x112>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	4a48      	ldr	r2, [pc, #288]	@ (800d41c <TIM_Base_SetConfig+0x1e0>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d027      	beq.n	800d34e <TIM_Base_SetConfig+0x112>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	4a47      	ldr	r2, [pc, #284]	@ (800d420 <TIM_Base_SetConfig+0x1e4>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d023      	beq.n	800d34e <TIM_Base_SetConfig+0x112>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	4a46      	ldr	r2, [pc, #280]	@ (800d424 <TIM_Base_SetConfig+0x1e8>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d01f      	beq.n	800d34e <TIM_Base_SetConfig+0x112>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	4a45      	ldr	r2, [pc, #276]	@ (800d428 <TIM_Base_SetConfig+0x1ec>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d01b      	beq.n	800d34e <TIM_Base_SetConfig+0x112>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	4a44      	ldr	r2, [pc, #272]	@ (800d42c <TIM_Base_SetConfig+0x1f0>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d017      	beq.n	800d34e <TIM_Base_SetConfig+0x112>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	4a43      	ldr	r2, [pc, #268]	@ (800d430 <TIM_Base_SetConfig+0x1f4>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d013      	beq.n	800d34e <TIM_Base_SetConfig+0x112>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	4a42      	ldr	r2, [pc, #264]	@ (800d434 <TIM_Base_SetConfig+0x1f8>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d00f      	beq.n	800d34e <TIM_Base_SetConfig+0x112>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	4a41      	ldr	r2, [pc, #260]	@ (800d438 <TIM_Base_SetConfig+0x1fc>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d00b      	beq.n	800d34e <TIM_Base_SetConfig+0x112>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	4a40      	ldr	r2, [pc, #256]	@ (800d43c <TIM_Base_SetConfig+0x200>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d007      	beq.n	800d34e <TIM_Base_SetConfig+0x112>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	4a3f      	ldr	r2, [pc, #252]	@ (800d440 <TIM_Base_SetConfig+0x204>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d003      	beq.n	800d34e <TIM_Base_SetConfig+0x112>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4a3e      	ldr	r2, [pc, #248]	@ (800d444 <TIM_Base_SetConfig+0x208>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d108      	bne.n	800d360 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	68db      	ldr	r3, [r3, #12]
 800d35a:	68fa      	ldr	r2, [r7, #12]
 800d35c:	4313      	orrs	r3, r2
 800d35e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	695b      	ldr	r3, [r3, #20]
 800d36a:	4313      	orrs	r3, r2
 800d36c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	68fa      	ldr	r2, [r7, #12]
 800d372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	689a      	ldr	r2, [r3, #8]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	4a20      	ldr	r2, [pc, #128]	@ (800d408 <TIM_Base_SetConfig+0x1cc>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	d023      	beq.n	800d3d4 <TIM_Base_SetConfig+0x198>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	4a1f      	ldr	r2, [pc, #124]	@ (800d40c <TIM_Base_SetConfig+0x1d0>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d01f      	beq.n	800d3d4 <TIM_Base_SetConfig+0x198>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	4a24      	ldr	r2, [pc, #144]	@ (800d428 <TIM_Base_SetConfig+0x1ec>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	d01b      	beq.n	800d3d4 <TIM_Base_SetConfig+0x198>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	4a23      	ldr	r2, [pc, #140]	@ (800d42c <TIM_Base_SetConfig+0x1f0>)
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d017      	beq.n	800d3d4 <TIM_Base_SetConfig+0x198>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	4a22      	ldr	r2, [pc, #136]	@ (800d430 <TIM_Base_SetConfig+0x1f4>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d013      	beq.n	800d3d4 <TIM_Base_SetConfig+0x198>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	4a21      	ldr	r2, [pc, #132]	@ (800d434 <TIM_Base_SetConfig+0x1f8>)
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d00f      	beq.n	800d3d4 <TIM_Base_SetConfig+0x198>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	4a20      	ldr	r2, [pc, #128]	@ (800d438 <TIM_Base_SetConfig+0x1fc>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d00b      	beq.n	800d3d4 <TIM_Base_SetConfig+0x198>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	4a1f      	ldr	r2, [pc, #124]	@ (800d43c <TIM_Base_SetConfig+0x200>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d007      	beq.n	800d3d4 <TIM_Base_SetConfig+0x198>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	4a1e      	ldr	r2, [pc, #120]	@ (800d440 <TIM_Base_SetConfig+0x204>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d003      	beq.n	800d3d4 <TIM_Base_SetConfig+0x198>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	4a1d      	ldr	r2, [pc, #116]	@ (800d444 <TIM_Base_SetConfig+0x208>)
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d103      	bne.n	800d3dc <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	691a      	ldr	r2, [r3, #16]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2201      	movs	r2, #1
 800d3e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	691b      	ldr	r3, [r3, #16]
 800d3e6:	f003 0301 	and.w	r3, r3, #1
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d105      	bne.n	800d3fa <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	691b      	ldr	r3, [r3, #16]
 800d3f2:	f023 0201 	bic.w	r2, r3, #1
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	611a      	str	r2, [r3, #16]
  }
}
 800d3fa:	bf00      	nop
 800d3fc:	3714      	adds	r7, #20
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop
 800d408:	40012c00 	.word	0x40012c00
 800d40c:	50012c00 	.word	0x50012c00
 800d410:	40000400 	.word	0x40000400
 800d414:	50000400 	.word	0x50000400
 800d418:	40000800 	.word	0x40000800
 800d41c:	50000800 	.word	0x50000800
 800d420:	40000c00 	.word	0x40000c00
 800d424:	50000c00 	.word	0x50000c00
 800d428:	40013400 	.word	0x40013400
 800d42c:	50013400 	.word	0x50013400
 800d430:	40014000 	.word	0x40014000
 800d434:	50014000 	.word	0x50014000
 800d438:	40014400 	.word	0x40014400
 800d43c:	50014400 	.word	0x50014400
 800d440:	40014800 	.word	0x40014800
 800d444:	50014800 	.word	0x50014800

0800d448 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d450:	bf00      	nop
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d464:	bf00      	nop
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d478:	bf00      	nop
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d48c:	bf00      	nop
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d4a0:	bf00      	nop
 800d4a2:	370c      	adds	r7, #12
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d4b4:	bf00      	nop
 800d4b6:	370c      	adds	r7, #12
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d4c8:	bf00      	nop
 800d4ca:	370c      	adds	r7, #12
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d101      	bne.n	800d4e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e042      	b.n	800d56c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d106      	bne.n	800d4fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f7f4 fc3f 	bl	8001d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2224      	movs	r2, #36	@ 0x24
 800d502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f022 0201 	bic.w	r2, r2, #1
 800d514:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d002      	beq.n	800d524 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 f9d6 	bl	800d8d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 f825 	bl	800d574 <UART_SetConfig>
 800d52a:	4603      	mov	r3, r0
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d101      	bne.n	800d534 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d530:	2301      	movs	r3, #1
 800d532:	e01b      	b.n	800d56c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	685a      	ldr	r2, [r3, #4]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	689a      	ldr	r2, [r3, #8]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f042 0201 	orr.w	r2, r2, #1
 800d562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 fa55 	bl	800da14 <UART_CheckIdleState>
 800d56a:	4603      	mov	r3, r0
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3708      	adds	r7, #8
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d578:	b094      	sub	sp, #80	@ 0x50
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d57e:	2300      	movs	r3, #0
 800d580:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d586:	681a      	ldr	r2, [r3, #0]
 800d588:	4b83      	ldr	r3, [pc, #524]	@ (800d798 <UART_SetConfig+0x224>)
 800d58a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d58e:	689a      	ldr	r2, [r3, #8]
 800d590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d592:	691b      	ldr	r3, [r3, #16]
 800d594:	431a      	orrs	r2, r3
 800d596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d598:	695b      	ldr	r3, [r3, #20]
 800d59a:	431a      	orrs	r2, r3
 800d59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d59e:	69db      	ldr	r3, [r3, #28]
 800d5a0:	4313      	orrs	r3, r2
 800d5a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	497c      	ldr	r1, [pc, #496]	@ (800d79c <UART_SetConfig+0x228>)
 800d5ac:	4019      	ands	r1, r3
 800d5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5b4:	430b      	orrs	r3, r1
 800d5b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5c4:	68d9      	ldr	r1, [r3, #12]
 800d5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	ea40 0301 	orr.w	r3, r0, r1
 800d5ce:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5d2:	699b      	ldr	r3, [r3, #24]
 800d5d4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	4b6f      	ldr	r3, [pc, #444]	@ (800d798 <UART_SetConfig+0x224>)
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d009      	beq.n	800d5f4 <UART_SetConfig+0x80>
 800d5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	4b6e      	ldr	r3, [pc, #440]	@ (800d7a0 <UART_SetConfig+0x22c>)
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d004      	beq.n	800d5f4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d5ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ec:	6a1a      	ldr	r2, [r3, #32]
 800d5ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d5fe:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d608:	430b      	orrs	r3, r1
 800d60a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d612:	f023 000f 	bic.w	r0, r3, #15
 800d616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d618:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	ea40 0301 	orr.w	r3, r0, r1
 800d622:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d626:	681a      	ldr	r2, [r3, #0]
 800d628:	4b5e      	ldr	r3, [pc, #376]	@ (800d7a4 <UART_SetConfig+0x230>)
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d102      	bne.n	800d634 <UART_SetConfig+0xc0>
 800d62e:	2301      	movs	r3, #1
 800d630:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d632:	e032      	b.n	800d69a <UART_SetConfig+0x126>
 800d634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	4b5b      	ldr	r3, [pc, #364]	@ (800d7a8 <UART_SetConfig+0x234>)
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d102      	bne.n	800d644 <UART_SetConfig+0xd0>
 800d63e:	2302      	movs	r3, #2
 800d640:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d642:	e02a      	b.n	800d69a <UART_SetConfig+0x126>
 800d644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d646:	681a      	ldr	r2, [r3, #0]
 800d648:	4b58      	ldr	r3, [pc, #352]	@ (800d7ac <UART_SetConfig+0x238>)
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d102      	bne.n	800d654 <UART_SetConfig+0xe0>
 800d64e:	2304      	movs	r3, #4
 800d650:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d652:	e022      	b.n	800d69a <UART_SetConfig+0x126>
 800d654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d656:	681a      	ldr	r2, [r3, #0]
 800d658:	4b55      	ldr	r3, [pc, #340]	@ (800d7b0 <UART_SetConfig+0x23c>)
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d102      	bne.n	800d664 <UART_SetConfig+0xf0>
 800d65e:	2308      	movs	r3, #8
 800d660:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d662:	e01a      	b.n	800d69a <UART_SetConfig+0x126>
 800d664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d666:	681a      	ldr	r2, [r3, #0]
 800d668:	4b52      	ldr	r3, [pc, #328]	@ (800d7b4 <UART_SetConfig+0x240>)
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d102      	bne.n	800d674 <UART_SetConfig+0x100>
 800d66e:	2310      	movs	r3, #16
 800d670:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d672:	e012      	b.n	800d69a <UART_SetConfig+0x126>
 800d674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d676:	681a      	ldr	r2, [r3, #0]
 800d678:	4b4f      	ldr	r3, [pc, #316]	@ (800d7b8 <UART_SetConfig+0x244>)
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d103      	bne.n	800d686 <UART_SetConfig+0x112>
 800d67e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800d682:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d684:	e009      	b.n	800d69a <UART_SetConfig+0x126>
 800d686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	4b43      	ldr	r3, [pc, #268]	@ (800d798 <UART_SetConfig+0x224>)
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d102      	bne.n	800d696 <UART_SetConfig+0x122>
 800d690:	2320      	movs	r3, #32
 800d692:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d694:	e001      	b.n	800d69a <UART_SetConfig+0x126>
 800d696:	2300      	movs	r3, #0
 800d698:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	4b3e      	ldr	r3, [pc, #248]	@ (800d798 <UART_SetConfig+0x224>)
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d005      	beq.n	800d6b0 <UART_SetConfig+0x13c>
 800d6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a6:	681a      	ldr	r2, [r3, #0]
 800d6a8:	4b3d      	ldr	r3, [pc, #244]	@ (800d7a0 <UART_SetConfig+0x22c>)
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	f040 8088 	bne.w	800d7c0 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d6b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	623b      	str	r3, [r7, #32]
 800d6b6:	627a      	str	r2, [r7, #36]	@ 0x24
 800d6b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d6bc:	f7fd fcd2 	bl	800b064 <HAL_RCCEx_GetPeriphCLKFreq>
 800d6c0:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d6c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	f000 80eb 	beq.w	800d8a0 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6ce:	4a3b      	ldr	r2, [pc, #236]	@ (800d7bc <UART_SetConfig+0x248>)
 800d6d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6dc:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d6de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6e0:	685a      	ldr	r2, [r3, #4]
 800d6e2:	4613      	mov	r3, r2
 800d6e4:	005b      	lsls	r3, r3, #1
 800d6e6:	4413      	add	r3, r2
 800d6e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d305      	bcc.n	800d6fa <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d6f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d903      	bls.n	800d702 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d700:	e048      	b.n	800d794 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d704:	2200      	movs	r2, #0
 800d706:	61bb      	str	r3, [r7, #24]
 800d708:	61fa      	str	r2, [r7, #28]
 800d70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d70c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d70e:	4a2b      	ldr	r2, [pc, #172]	@ (800d7bc <UART_SetConfig+0x248>)
 800d710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d714:	b29b      	uxth	r3, r3
 800d716:	2200      	movs	r2, #0
 800d718:	613b      	str	r3, [r7, #16]
 800d71a:	617a      	str	r2, [r7, #20]
 800d71c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d720:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d724:	f7f2 fdc6 	bl	80002b4 <__aeabi_uldivmod>
 800d728:	4602      	mov	r2, r0
 800d72a:	460b      	mov	r3, r1
 800d72c:	4610      	mov	r0, r2
 800d72e:	4619      	mov	r1, r3
 800d730:	f04f 0200 	mov.w	r2, #0
 800d734:	f04f 0300 	mov.w	r3, #0
 800d738:	020b      	lsls	r3, r1, #8
 800d73a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d73e:	0202      	lsls	r2, r0, #8
 800d740:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d742:	6849      	ldr	r1, [r1, #4]
 800d744:	0849      	lsrs	r1, r1, #1
 800d746:	2000      	movs	r0, #0
 800d748:	460c      	mov	r4, r1
 800d74a:	4605      	mov	r5, r0
 800d74c:	eb12 0804 	adds.w	r8, r2, r4
 800d750:	eb43 0905 	adc.w	r9, r3, r5
 800d754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	2200      	movs	r2, #0
 800d75a:	60bb      	str	r3, [r7, #8]
 800d75c:	60fa      	str	r2, [r7, #12]
 800d75e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d762:	4640      	mov	r0, r8
 800d764:	4649      	mov	r1, r9
 800d766:	f7f2 fda5 	bl	80002b4 <__aeabi_uldivmod>
 800d76a:	4602      	mov	r2, r0
 800d76c:	460b      	mov	r3, r1
 800d76e:	4613      	mov	r3, r2
 800d770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d774:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d778:	d308      	bcc.n	800d78c <UART_SetConfig+0x218>
 800d77a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d77c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d780:	d204      	bcs.n	800d78c <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800d782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d788:	60da      	str	r2, [r3, #12]
 800d78a:	e003      	b.n	800d794 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800d78c:	2301      	movs	r3, #1
 800d78e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800d792:	e085      	b.n	800d8a0 <UART_SetConfig+0x32c>
 800d794:	e084      	b.n	800d8a0 <UART_SetConfig+0x32c>
 800d796:	bf00      	nop
 800d798:	46002400 	.word	0x46002400
 800d79c:	cfff69f3 	.word	0xcfff69f3
 800d7a0:	56002400 	.word	0x56002400
 800d7a4:	40013800 	.word	0x40013800
 800d7a8:	40004400 	.word	0x40004400
 800d7ac:	40004800 	.word	0x40004800
 800d7b0:	40004c00 	.word	0x40004c00
 800d7b4:	40005000 	.word	0x40005000
 800d7b8:	40006400 	.word	0x40006400
 800d7bc:	0800e05c 	.word	0x0800e05c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7c2:	69db      	ldr	r3, [r3, #28]
 800d7c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d7c8:	d13c      	bne.n	800d844 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d7ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	603b      	str	r3, [r7, #0]
 800d7d0:	607a      	str	r2, [r7, #4]
 800d7d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7d6:	f7fd fc45 	bl	800b064 <HAL_RCCEx_GetPeriphCLKFreq>
 800d7da:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d7dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d05e      	beq.n	800d8a0 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7e6:	4a39      	ldr	r2, [pc, #228]	@ (800d8cc <UART_SetConfig+0x358>)
 800d7e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7f4:	005a      	lsls	r2, r3, #1
 800d7f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	085b      	lsrs	r3, r3, #1
 800d7fc:	441a      	add	r2, r3
 800d7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	fbb2 f3f3 	udiv	r3, r2, r3
 800d806:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d80a:	2b0f      	cmp	r3, #15
 800d80c:	d916      	bls.n	800d83c <UART_SetConfig+0x2c8>
 800d80e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d814:	d212      	bcs.n	800d83c <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d818:	b29b      	uxth	r3, r3
 800d81a:	f023 030f 	bic.w	r3, r3, #15
 800d81e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d822:	085b      	lsrs	r3, r3, #1
 800d824:	b29b      	uxth	r3, r3
 800d826:	f003 0307 	and.w	r3, r3, #7
 800d82a:	b29a      	uxth	r2, r3
 800d82c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d82e:	4313      	orrs	r3, r2
 800d830:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800d832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d838:	60da      	str	r2, [r3, #12]
 800d83a:	e031      	b.n	800d8a0 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d83c:	2301      	movs	r3, #1
 800d83e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d842:	e02d      	b.n	800d8a0 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d844:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d846:	2200      	movs	r2, #0
 800d848:	469a      	mov	sl, r3
 800d84a:	4693      	mov	fp, r2
 800d84c:	4650      	mov	r0, sl
 800d84e:	4659      	mov	r1, fp
 800d850:	f7fd fc08 	bl	800b064 <HAL_RCCEx_GetPeriphCLKFreq>
 800d854:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800d856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d021      	beq.n	800d8a0 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d85e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d860:	4a1a      	ldr	r2, [pc, #104]	@ (800d8cc <UART_SetConfig+0x358>)
 800d862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d866:	461a      	mov	r2, r3
 800d868:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d86a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	085b      	lsrs	r3, r3, #1
 800d874:	441a      	add	r2, r3
 800d876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d882:	2b0f      	cmp	r3, #15
 800d884:	d909      	bls.n	800d89a <UART_SetConfig+0x326>
 800d886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d88c:	d205      	bcs.n	800d89a <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d88e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d890:	b29a      	uxth	r2, r3
 800d892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	60da      	str	r2, [r3, #12]
 800d898:	e002      	b.n	800d8a0 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d89a:	2301      	movs	r3, #1
 800d89c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d8b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d8bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3750      	adds	r7, #80	@ 0x50
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d8ca:	bf00      	nop
 800d8cc:	0800e05c 	.word	0x0800e05c

0800d8d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8dc:	f003 0308 	and.w	r3, r3, #8
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d00a      	beq.n	800d8fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	430a      	orrs	r2, r1
 800d8f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8fe:	f003 0301 	and.w	r3, r3, #1
 800d902:	2b00      	cmp	r3, #0
 800d904:	d00a      	beq.n	800d91c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	430a      	orrs	r2, r1
 800d91a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d920:	f003 0302 	and.w	r3, r3, #2
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00a      	beq.n	800d93e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	430a      	orrs	r2, r1
 800d93c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d942:	f003 0304 	and.w	r3, r3, #4
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00a      	beq.n	800d960 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	430a      	orrs	r2, r1
 800d95e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d964:	f003 0310 	and.w	r3, r3, #16
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d00a      	beq.n	800d982 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	689b      	ldr	r3, [r3, #8]
 800d972:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	430a      	orrs	r2, r1
 800d980:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d986:	f003 0320 	and.w	r3, r3, #32
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00a      	beq.n	800d9a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	430a      	orrs	r2, r1
 800d9a2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d01a      	beq.n	800d9e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	430a      	orrs	r2, r1
 800d9c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d9ce:	d10a      	bne.n	800d9e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	430a      	orrs	r2, r1
 800d9e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00a      	beq.n	800da08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	430a      	orrs	r2, r1
 800da06:	605a      	str	r2, [r3, #4]
  }
}
 800da08:	bf00      	nop
 800da0a:	370c      	adds	r7, #12
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b098      	sub	sp, #96	@ 0x60
 800da18:	af02      	add	r7, sp, #8
 800da1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2200      	movs	r2, #0
 800da20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800da24:	f7f4 fba4 	bl	8002170 <HAL_GetTick>
 800da28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f003 0308 	and.w	r3, r3, #8
 800da34:	2b08      	cmp	r3, #8
 800da36:	d12f      	bne.n	800da98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800da3c:	9300      	str	r3, [sp, #0]
 800da3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da40:	2200      	movs	r2, #0
 800da42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 f88e 	bl	800db68 <UART_WaitOnFlagUntilTimeout>
 800da4c:	4603      	mov	r3, r0
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d022      	beq.n	800da98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da5a:	e853 3f00 	ldrex	r3, [r3]
 800da5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800da60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da66:	653b      	str	r3, [r7, #80]	@ 0x50
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	461a      	mov	r2, r3
 800da6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da70:	647b      	str	r3, [r7, #68]	@ 0x44
 800da72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da78:	e841 2300 	strex	r3, r2, [r1]
 800da7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800da7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da80:	2b00      	cmp	r3, #0
 800da82:	d1e6      	bne.n	800da52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2220      	movs	r2, #32
 800da88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da94:	2303      	movs	r3, #3
 800da96:	e063      	b.n	800db60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f003 0304 	and.w	r3, r3, #4
 800daa2:	2b04      	cmp	r3, #4
 800daa4:	d149      	bne.n	800db3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800daa6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800daaa:	9300      	str	r3, [sp, #0]
 800daac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daae:	2200      	movs	r2, #0
 800dab0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 f857 	bl	800db68 <UART_WaitOnFlagUntilTimeout>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d03c      	beq.n	800db3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac8:	e853 3f00 	ldrex	r3, [r3]
 800dacc:	623b      	str	r3, [r7, #32]
   return(result);
 800dace:	6a3b      	ldr	r3, [r7, #32]
 800dad0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	461a      	mov	r2, r3
 800dadc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dade:	633b      	str	r3, [r7, #48]	@ 0x30
 800dae0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dae6:	e841 2300 	strex	r3, r2, [r1]
 800daea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800daec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d1e6      	bne.n	800dac0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	3308      	adds	r3, #8
 800daf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	e853 3f00 	ldrex	r3, [r3]
 800db00:	60fb      	str	r3, [r7, #12]
   return(result);
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f023 0301 	bic.w	r3, r3, #1
 800db08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	3308      	adds	r3, #8
 800db10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db12:	61fa      	str	r2, [r7, #28]
 800db14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db16:	69b9      	ldr	r1, [r7, #24]
 800db18:	69fa      	ldr	r2, [r7, #28]
 800db1a:	e841 2300 	strex	r3, r2, [r1]
 800db1e:	617b      	str	r3, [r7, #20]
   return(result);
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d1e5      	bne.n	800daf2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2220      	movs	r2, #32
 800db2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2200      	movs	r2, #0
 800db32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db36:	2303      	movs	r3, #3
 800db38:	e012      	b.n	800db60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2220      	movs	r2, #32
 800db3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2220      	movs	r2, #32
 800db46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2200      	movs	r2, #0
 800db4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2200      	movs	r2, #0
 800db54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2200      	movs	r2, #0
 800db5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db5e:	2300      	movs	r3, #0
}
 800db60:	4618      	mov	r0, r3
 800db62:	3758      	adds	r7, #88	@ 0x58
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	603b      	str	r3, [r7, #0]
 800db74:	4613      	mov	r3, r2
 800db76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db78:	e04f      	b.n	800dc1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db80:	d04b      	beq.n	800dc1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db82:	f7f4 faf5 	bl	8002170 <HAL_GetTick>
 800db86:	4602      	mov	r2, r0
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	1ad3      	subs	r3, r2, r3
 800db8c:	69ba      	ldr	r2, [r7, #24]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d302      	bcc.n	800db98 <UART_WaitOnFlagUntilTimeout+0x30>
 800db92:	69bb      	ldr	r3, [r7, #24]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d101      	bne.n	800db9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800db98:	2303      	movs	r3, #3
 800db9a:	e04e      	b.n	800dc3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f003 0304 	and.w	r3, r3, #4
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d037      	beq.n	800dc1a <UART_WaitOnFlagUntilTimeout+0xb2>
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	2b80      	cmp	r3, #128	@ 0x80
 800dbae:	d034      	beq.n	800dc1a <UART_WaitOnFlagUntilTimeout+0xb2>
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	2b40      	cmp	r3, #64	@ 0x40
 800dbb4:	d031      	beq.n	800dc1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	69db      	ldr	r3, [r3, #28]
 800dbbc:	f003 0308 	and.w	r3, r3, #8
 800dbc0:	2b08      	cmp	r3, #8
 800dbc2:	d110      	bne.n	800dbe6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2208      	movs	r2, #8
 800dbca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f000 f838 	bl	800dc42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2208      	movs	r2, #8
 800dbd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	e029      	b.n	800dc3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	69db      	ldr	r3, [r3, #28]
 800dbec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dbf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dbf4:	d111      	bne.n	800dc1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dbfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dc00:	68f8      	ldr	r0, [r7, #12]
 800dc02:	f000 f81e 	bl	800dc42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2220      	movs	r2, #32
 800dc0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dc16:	2303      	movs	r3, #3
 800dc18:	e00f      	b.n	800dc3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	69da      	ldr	r2, [r3, #28]
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	4013      	ands	r3, r2
 800dc24:	68ba      	ldr	r2, [r7, #8]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	bf0c      	ite	eq
 800dc2a:	2301      	moveq	r3, #1
 800dc2c:	2300      	movne	r3, #0
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	461a      	mov	r2, r3
 800dc32:	79fb      	ldrb	r3, [r7, #7]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d0a0      	beq.n	800db7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dc38:	2300      	movs	r3, #0
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dc42:	b480      	push	{r7}
 800dc44:	b095      	sub	sp, #84	@ 0x54
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc52:	e853 3f00 	ldrex	r3, [r3]
 800dc56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dc58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dc5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	461a      	mov	r2, r3
 800dc66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc68:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dc6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dc70:	e841 2300 	strex	r3, r2, [r1]
 800dc74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dc76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d1e6      	bne.n	800dc4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	3308      	adds	r3, #8
 800dc82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc84:	6a3b      	ldr	r3, [r7, #32]
 800dc86:	e853 3f00 	ldrex	r3, [r3]
 800dc8a:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dc92:	f023 0301 	bic.w	r3, r3, #1
 800dc96:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	3308      	adds	r3, #8
 800dc9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dca0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dca2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dca8:	e841 2300 	strex	r3, r2, [r1]
 800dcac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d1e3      	bne.n	800dc7c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d118      	bne.n	800dcee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	e853 3f00 	ldrex	r3, [r3]
 800dcc8:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	f023 0310 	bic.w	r3, r3, #16
 800dcd0:	647b      	str	r3, [r7, #68]	@ 0x44
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dcda:	61bb      	str	r3, [r7, #24]
 800dcdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcde:	6979      	ldr	r1, [r7, #20]
 800dce0:	69ba      	ldr	r2, [r7, #24]
 800dce2:	e841 2300 	strex	r3, r2, [r1]
 800dce6:	613b      	str	r3, [r7, #16]
   return(result);
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d1e6      	bne.n	800dcbc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2220      	movs	r2, #32
 800dcf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dd02:	bf00      	nop
 800dd04:	3754      	adds	r7, #84	@ 0x54
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr

0800dd0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dd0e:	b480      	push	{r7}
 800dd10:	b085      	sub	sp, #20
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d101      	bne.n	800dd24 <HAL_UARTEx_DisableFifoMode+0x16>
 800dd20:	2302      	movs	r3, #2
 800dd22:	e027      	b.n	800dd74 <HAL_UARTEx_DisableFifoMode+0x66>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2201      	movs	r2, #1
 800dd28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2224      	movs	r2, #36	@ 0x24
 800dd30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	681a      	ldr	r2, [r3, #0]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f022 0201 	bic.w	r2, r2, #1
 800dd4a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dd52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2200      	movs	r2, #0
 800dd58:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	68fa      	ldr	r2, [r7, #12]
 800dd60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2220      	movs	r2, #32
 800dd66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd72:	2300      	movs	r3, #0
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3714      	adds	r7, #20
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7e:	4770      	bx	lr

0800dd80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d101      	bne.n	800dd98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd94:	2302      	movs	r3, #2
 800dd96:	e02d      	b.n	800ddf4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2224      	movs	r2, #36	@ 0x24
 800dda4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f022 0201 	bic.w	r2, r2, #1
 800ddbe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	689b      	ldr	r3, [r3, #8]
 800ddc6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	683a      	ldr	r2, [r7, #0]
 800ddd0:	430a      	orrs	r2, r1
 800ddd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 f84f 	bl	800de78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	68fa      	ldr	r2, [r7, #12]
 800dde0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2220      	movs	r2, #32
 800dde6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2200      	movs	r2, #0
 800ddee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ddf2:	2300      	movs	r3, #0
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3710      	adds	r7, #16
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}

0800ddfc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d101      	bne.n	800de14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800de10:	2302      	movs	r3, #2
 800de12:	e02d      	b.n	800de70 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2201      	movs	r2, #1
 800de18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2224      	movs	r2, #36	@ 0x24
 800de20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f022 0201 	bic.w	r2, r2, #1
 800de3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	689b      	ldr	r3, [r3, #8]
 800de42:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	683a      	ldr	r2, [r7, #0]
 800de4c:	430a      	orrs	r2, r1
 800de4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 f811 	bl	800de78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	68fa      	ldr	r2, [r7, #12]
 800de5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2220      	movs	r2, #32
 800de62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2200      	movs	r2, #0
 800de6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de6e:	2300      	movs	r3, #0
}
 800de70:	4618      	mov	r0, r3
 800de72:	3710      	adds	r7, #16
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de78:	b480      	push	{r7}
 800de7a:	b085      	sub	sp, #20
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de84:	2b00      	cmp	r3, #0
 800de86:	d108      	bne.n	800de9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2201      	movs	r2, #1
 800de94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800de98:	e031      	b.n	800defe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800de9a:	2308      	movs	r3, #8
 800de9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800de9e:	2308      	movs	r3, #8
 800dea0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	689b      	ldr	r3, [r3, #8]
 800dea8:	0e5b      	lsrs	r3, r3, #25
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	f003 0307 	and.w	r3, r3, #7
 800deb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	689b      	ldr	r3, [r3, #8]
 800deb8:	0f5b      	lsrs	r3, r3, #29
 800deba:	b2db      	uxtb	r3, r3
 800debc:	f003 0307 	and.w	r3, r3, #7
 800dec0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dec2:	7bbb      	ldrb	r3, [r7, #14]
 800dec4:	7b3a      	ldrb	r2, [r7, #12]
 800dec6:	4911      	ldr	r1, [pc, #68]	@ (800df0c <UARTEx_SetNbDataToProcess+0x94>)
 800dec8:	5c8a      	ldrb	r2, [r1, r2]
 800deca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dece:	7b3a      	ldrb	r2, [r7, #12]
 800ded0:	490f      	ldr	r1, [pc, #60]	@ (800df10 <UARTEx_SetNbDataToProcess+0x98>)
 800ded2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ded4:	fb93 f3f2 	sdiv	r3, r3, r2
 800ded8:	b29a      	uxth	r2, r3
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dee0:	7bfb      	ldrb	r3, [r7, #15]
 800dee2:	7b7a      	ldrb	r2, [r7, #13]
 800dee4:	4909      	ldr	r1, [pc, #36]	@ (800df0c <UARTEx_SetNbDataToProcess+0x94>)
 800dee6:	5c8a      	ldrb	r2, [r1, r2]
 800dee8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800deec:	7b7a      	ldrb	r2, [r7, #13]
 800deee:	4908      	ldr	r1, [pc, #32]	@ (800df10 <UARTEx_SetNbDataToProcess+0x98>)
 800def0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800def2:	fb93 f3f2 	sdiv	r3, r3, r2
 800def6:	b29a      	uxth	r2, r3
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800defe:	bf00      	nop
 800df00:	3714      	adds	r7, #20
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr
 800df0a:	bf00      	nop
 800df0c:	0800e074 	.word	0x0800e074
 800df10:	0800e07c 	.word	0x0800e07c

0800df14 <memset>:
 800df14:	4402      	add	r2, r0
 800df16:	4603      	mov	r3, r0
 800df18:	4293      	cmp	r3, r2
 800df1a:	d100      	bne.n	800df1e <memset+0xa>
 800df1c:	4770      	bx	lr
 800df1e:	f803 1b01 	strb.w	r1, [r3], #1
 800df22:	e7f9      	b.n	800df18 <memset+0x4>

0800df24 <__libc_init_array>:
 800df24:	b570      	push	{r4, r5, r6, lr}
 800df26:	4d0d      	ldr	r5, [pc, #52]	@ (800df5c <__libc_init_array+0x38>)
 800df28:	2600      	movs	r6, #0
 800df2a:	4c0d      	ldr	r4, [pc, #52]	@ (800df60 <__libc_init_array+0x3c>)
 800df2c:	1b64      	subs	r4, r4, r5
 800df2e:	10a4      	asrs	r4, r4, #2
 800df30:	42a6      	cmp	r6, r4
 800df32:	d109      	bne.n	800df48 <__libc_init_array+0x24>
 800df34:	4d0b      	ldr	r5, [pc, #44]	@ (800df64 <__libc_init_array+0x40>)
 800df36:	2600      	movs	r6, #0
 800df38:	4c0b      	ldr	r4, [pc, #44]	@ (800df68 <__libc_init_array+0x44>)
 800df3a:	f000 f817 	bl	800df6c <_init>
 800df3e:	1b64      	subs	r4, r4, r5
 800df40:	10a4      	asrs	r4, r4, #2
 800df42:	42a6      	cmp	r6, r4
 800df44:	d105      	bne.n	800df52 <__libc_init_array+0x2e>
 800df46:	bd70      	pop	{r4, r5, r6, pc}
 800df48:	f855 3b04 	ldr.w	r3, [r5], #4
 800df4c:	3601      	adds	r6, #1
 800df4e:	4798      	blx	r3
 800df50:	e7ee      	b.n	800df30 <__libc_init_array+0xc>
 800df52:	f855 3b04 	ldr.w	r3, [r5], #4
 800df56:	3601      	adds	r6, #1
 800df58:	4798      	blx	r3
 800df5a:	e7f2      	b.n	800df42 <__libc_init_array+0x1e>
 800df5c:	0800e08c 	.word	0x0800e08c
 800df60:	0800e08c 	.word	0x0800e08c
 800df64:	0800e08c 	.word	0x0800e08c
 800df68:	0800e090 	.word	0x0800e090

0800df6c <_init>:
 800df6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df6e:	bf00      	nop
 800df70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df72:	bc08      	pop	{r3}
 800df74:	469e      	mov	lr, r3
 800df76:	4770      	bx	lr

0800df78 <_fini>:
 800df78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df7a:	bf00      	nop
 800df7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df7e:	bc08      	pop	{r3}
 800df80:	469e      	mov	lr, r3
 800df82:	4770      	bx	lr
