
display_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ddc4  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       002a4110  0800e038  0800e038  0000f038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  082b2148  082b2148  002b400c  2**0
                  CONTENTS
  4 .ARM          00000008  082b2148  082b2148  002b3148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  082b2150  082b2150  002b400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  082b2150  082b2150  002b3150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  082b2154  082b2154  002b3154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  082b2158  002b4000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000a93b8  2000000c  082b2164  002b400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200a93c4  082b2164  002b43c4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  002b400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bc58  00000000  00000000  002b4042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045ae  00000000  00000000  002dfc9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002470  00000000  00000000  002e4248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c7c  00000000  00000000  002e66b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00045368  00000000  00000000  002e8334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f73c  00000000  00000000  0032d69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b229f  00000000  00000000  0035cdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0050f077  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a088  00000000  00000000  0050f0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00519144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000000c 	.word	0x2000000c
 8000290:	00000000 	.word	0x00000000
 8000294:	0800e020 	.word	0x0800e020

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000010 	.word	0x20000010
 80002b0:	0800e020 	.word	0x0800e020

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b08b      	sub	sp, #44	@ 0x2c
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f001 fd8d 	bl	80020f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f937 	bl	8000848 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005da:	f000 f9ab 	bl	8000934 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 fce3 	bl	8000fa8 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e2:	f000 fb4f 	bl	8000c84 <MX_GPDMA1_Init>
  MX_DSIHOST_DSI_Init();
 80005e6:	f000 fa45 	bl	8000a74 <MX_DSIHOST_DSI_Init>
  MX_ICACHE_Init();
 80005ea:	f000 fbab 	bl	8000d44 <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005ee:	f000 fbbd 	bl	8000d6c <MX_LTDC_Init>
  MX_I2C5_Init();
 80005f2:	f000 fb67 	bl	8000cc4 <MX_I2C5_Init>
  MX_RTC_Init();
 80005f6:	f000 fc3d 	bl	8000e74 <MX_RTC_Init>
  MX_ADC1_Init();
 80005fa:	f000 f9a9 	bl	8000950 <MX_ADC1_Init>
  MX_UART4_Init();
 80005fe:	f000 fc87 	bl	8000f10 <MX_UART4_Init>
  MX_CRC_Init();
 8000602:	f000 fa15 	bl	8000a30 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

	HAL_DSI_Start(&hdsi);
 8000606:	4886      	ldr	r0, [pc, #536]	@ (8000820 <main+0x254>)
 8000608:	f006 fe50 	bl	80072ac <HAL_DSI_Start>

	HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2140      	movs	r1, #64	@ 0x40
 8000610:	4884      	ldr	r0, [pc, #528]	@ (8000824 <main+0x258>)
 8000612:	f007 f951 	bl	80078b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SD_EN_GPIO_Port,SD_EN_Pin, RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2180      	movs	r1, #128	@ 0x80
 800061a:	4882      	ldr	r0, [pc, #520]	@ (8000824 <main+0x258>)
 800061c:	f007 f94c 	bl	80078b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WL_BT_PWR_EN_GPIO_Port, WL_BT_PWR_EN_Pin, RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000626:	4880      	ldr	r0, [pc, #512]	@ (8000828 <main+0x25c>)
 8000628:	f007 f946 	bl	80078b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2108      	movs	r1, #8
 8000630:	487d      	ldr	r0, [pc, #500]	@ (8000828 <main+0x25c>)
 8000632:	f007 f941 	bl	80078b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800063c:	487b      	ldr	r0, [pc, #492]	@ (800082c <main+0x260>)
 800063e:	f007 f93b 	bl	80078b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4877      	ldr	r0, [pc, #476]	@ (8000824 <main+0x258>)
 8000648:	f007 f936 	bl	80078b8 <HAL_GPIO_WritePin>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 800064c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000650:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000654:	4876      	ldr	r0, [pc, #472]	@ (8000830 <main+0x264>)
 8000656:	f004 f89b 	bl	8004790 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&adc_value, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	4975      	ldr	r1, [pc, #468]	@ (8000834 <main+0x268>)
 800065e:	4874      	ldr	r0, [pc, #464]	@ (8000830 <main+0x264>)
 8000660:	f002 fc66 	bl	8002f30 <HAL_ADC_Start_DMA>
	HAL_Delay(1);
 8000664:	2001      	movs	r0, #1
 8000666:	f001 fd93 	bl	8002190 <HAL_Delay>

	//  uint8_t uart_data = adc_value >> 6;
	//  HAL_UART_Transmit(&huart4, &uart_data, 1, HAL_MAX_DELAY);

	// Turn on display power AVDD
	HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2140      	movs	r1, #64	@ 0x40
 800066e:	486d      	ldr	r0, [pc, #436]	@ (8000824 <main+0x258>)
 8000670:	f007 f922 	bl	80078b8 <HAL_GPIO_WritePin>
	//	GPIO_InitStruct.Pull = GPIO_PULLUP;
	//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	//	HAL_GPIO_Init(SWIRE_OUT_GPIO_Port, &GPIO_InitStruct);

	// Reset the display
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2108      	movs	r1, #8
 8000678:	486b      	ldr	r0, [pc, #428]	@ (8000828 <main+0x25c>)
 800067a:	f007 f91d 	bl	80078b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800067e:	2001      	movs	r0, #1
 8000680:	f001 fd86 	bl	8002190 <HAL_Delay>
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2108      	movs	r1, #8
 8000688:	4867      	ldr	r0, [pc, #412]	@ (8000828 <main+0x25c>)
 800068a:	f007 f915 	bl	80078b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800068e:	2001      	movs	r0, #1
 8000690:	f001 fd7e 	bl	8002190 <HAL_Delay>
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2108      	movs	r1, #8
 8000698:	4863      	ldr	r0, [pc, #396]	@ (8000828 <main+0x25c>)
 800069a:	f007 f90d 	bl	80078b8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800069e:	2032      	movs	r0, #50	@ 0x32
 80006a0:	f001 fd76 	bl	8002190 <HAL_Delay>

	HAL_StatusTypeDef status = HAL_OK;
 80006a4:	2300      	movs	r3, #0
 80006a6:	75fb      	strb	r3, [r7, #23]
	//	float old_a = 0;
	//	uint32_t count = 0;


	// Exit sleep
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 80006a8:	2300      	movs	r3, #0
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2311      	movs	r3, #17
 80006ae:	2205      	movs	r2, #5
 80006b0:	2100      	movs	r1, #0
 80006b2:	485b      	ldr	r0, [pc, #364]	@ (8000820 <main+0x254>)
 80006b4:	f006 fe57 	bl	8007366 <HAL_DSI_ShortWrite>
 80006b8:	4603      	mov	r3, r0
 80006ba:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 80006bc:	2064      	movs	r0, #100	@ 0x64
 80006be:	f001 fd67 	bl	8002190 <HAL_Delay>

//	// All pixels on
//	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x23, 0x00);
//	HAL_Delay(100);

	uint8_t caset_data[4] = {0x00, 0x1E, 0x01, 0xBD};
 80006c2:	4b5d      	ldr	r3, [pc, #372]	@ (8000838 <main+0x26c>)
 80006c4:	613b      	str	r3, [r7, #16]
	status = HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0x2A, caset_data);
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	232a      	movs	r3, #42	@ 0x2a
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2304      	movs	r3, #4
 80006d2:	2239      	movs	r2, #57	@ 0x39
 80006d4:	2100      	movs	r1, #0
 80006d6:	4852      	ldr	r0, [pc, #328]	@ (8000820 <main+0x254>)
 80006d8:	f006 fe67 	bl	80073aa <HAL_DSI_LongWrite>
 80006dc:	4603      	mov	r3, r0
 80006de:	75fb      	strb	r3, [r7, #23]

//	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x2A, 0x00);
	HAL_Delay(100);
 80006e0:	2064      	movs	r0, #100	@ 0x64
 80006e2:	f001 fd55 	bl	8002190 <HAL_Delay>

	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x2B, 0x00);
 80006e6:	2300      	movs	r3, #0
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	232b      	movs	r3, #43	@ 0x2b
 80006ec:	2215      	movs	r2, #21
 80006ee:	2100      	movs	r1, #0
 80006f0:	484b      	ldr	r0, [pc, #300]	@ (8000820 <main+0x254>)
 80006f2:	f006 fe38 	bl	8007366 <HAL_DSI_ShortWrite>
 80006f6:	4603      	mov	r3, r0
 80006f8:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 80006fa:	2064      	movs	r0, #100	@ 0x64
 80006fc:	f001 fd48 	bl	8002190 <HAL_Delay>

//	status = HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0x3C, pixels);
//	HAL_Delay(100);

	// Display on
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 8000700:	2300      	movs	r3, #0
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2329      	movs	r3, #41	@ 0x29
 8000706:	2205      	movs	r2, #5
 8000708:	2100      	movs	r1, #0
 800070a:	4845      	ldr	r0, [pc, #276]	@ (8000820 <main+0x254>)
 800070c:	f006 fe2b 	bl	8007366 <HAL_DSI_ShortWrite>
 8000710:	4603      	mov	r3, r0
 8000712:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 8000714:	2064      	movs	r0, #100	@ 0x64
 8000716:	f001 fd3b 	bl	8002190 <HAL_Delay>

	// Inversion on
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x21, 0x00);
 800071a:	2300      	movs	r3, #0
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2321      	movs	r3, #33	@ 0x21
 8000720:	2205      	movs	r2, #5
 8000722:	2100      	movs	r1, #0
 8000724:	483e      	ldr	r0, [pc, #248]	@ (8000820 <main+0x254>)
 8000726:	f006 fe1e 	bl	8007366 <HAL_DSI_ShortWrite>
 800072a:	4603      	mov	r3, r0
 800072c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(1000);
 800072e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000732:	f001 fd2d 	bl	8002190 <HAL_Delay>

	// Set normal display mode
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x13, 0x00);
 8000736:	2300      	movs	r3, #0
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2313      	movs	r3, #19
 800073c:	2205      	movs	r2, #5
 800073e:	2100      	movs	r1, #0
 8000740:	4837      	ldr	r0, [pc, #220]	@ (8000820 <main+0x254>)
 8000742:	f006 fe10 	bl	8007366 <HAL_DSI_ShortWrite>
 8000746:	4603      	mov	r3, r0
 8000748:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(1000);
 800074a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074e:	f001 fd1f 	bl	8002190 <HAL_Delay>

	// Set brightness to max
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x51, 0xFF);
 8000752:	23ff      	movs	r3, #255	@ 0xff
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2351      	movs	r3, #81	@ 0x51
 8000758:	2215      	movs	r2, #21
 800075a:	2100      	movs	r1, #0
 800075c:	4830      	ldr	r0, [pc, #192]	@ (8000820 <main+0x254>)
 800075e:	f006 fe02 	bl	8007366 <HAL_DSI_ShortWrite>
 8000762:	4603      	mov	r3, r0
 8000764:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(1000);
 8000766:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800076a:	f001 fd11 	bl	8002190 <HAL_Delay>

	status = HAL_DSI_Refresh(&hdsi);
 800076e:	482c      	ldr	r0, [pc, #176]	@ (8000820 <main+0x254>)
 8000770:	f006 fdd8 	bl	8007324 <HAL_DSI_Refresh>
 8000774:	4603      	mov	r3, r0
 8000776:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(2000);
 8000778:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800077c:	f001 fd08 	bl	8002190 <HAL_Delay>

	// Inversion off
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x20, 0x00);
 8000780:	2300      	movs	r3, #0
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2320      	movs	r3, #32
 8000786:	2205      	movs	r2, #5
 8000788:	2100      	movs	r1, #0
 800078a:	4825      	ldr	r0, [pc, #148]	@ (8000820 <main+0x254>)
 800078c:	f006 fdeb 	bl	8007366 <HAL_DSI_ShortWrite>
 8000790:	4603      	mov	r3, r0
 8000792:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(1000);
 8000794:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000798:	f001 fcfa 	bl	8002190 <HAL_Delay>

//	status = HAL_LTDC_SetAddress(&hltdc, framebuf, 0);
//
	uint32_t *images[4] = {image1, image2, image3, image4};
 800079c:	4b27      	ldr	r3, [pc, #156]	@ (800083c <main+0x270>)
 800079e:	463c      	mov	r4, r7
 80007a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint8_t current = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN WHILE */

	while (1)
	{

		GPIO_PinState pinState = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);
 80007aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ae:	4824      	ldr	r0, [pc, #144]	@ (8000840 <main+0x274>)
 80007b0:	f007 f86a 	bl	8007888 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	75bb      	strb	r3, [r7, #22]
		if (pinState == GPIO_PIN_RESET){
 80007b8:	7dbb      	ldrb	r3, [r7, #22]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d107      	bne.n	80007ce <main+0x202>
			current++;
 80007be:	7ffb      	ldrb	r3, [r7, #31]
 80007c0:	3301      	adds	r3, #1
 80007c2:	77fb      	strb	r3, [r7, #31]
			if (current >= 4){
 80007c4:	7ffb      	ldrb	r3, [r7, #31]
 80007c6:	2b03      	cmp	r3, #3
 80007c8:	d901      	bls.n	80007ce <main+0x202>
				current = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	77fb      	strb	r3, [r7, #31]
			}
		}


		for (uint32_t i = 0; i< 416*416; i++){
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
 80007d2:	e013      	b.n	80007fc <main+0x230>
	//		framebuf[i] = 0xFF000000 | (i*1000);
			framebuf[i] = 0xFF000000 | (images[current][i] >> 8);
 80007d4:	7ffb      	ldrb	r3, [r7, #31]
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	3320      	adds	r3, #32
 80007da:	443b      	add	r3, r7
 80007dc:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80007ee:	4915      	ldr	r1, [pc, #84]	@ (8000844 <main+0x278>)
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (uint32_t i = 0; i< 416*416; i++){
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	3301      	adds	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	f5b3 3f29 	cmp.w	r3, #173056	@ 0x2a400
 8000802:	d3e7      	bcc.n	80007d4 <main+0x208>
		}

		status = HAL_DSI_Refresh(&hdsi);
 8000804:	4806      	ldr	r0, [pc, #24]	@ (8000820 <main+0x254>)
 8000806:	f006 fd8d 	bl	8007324 <HAL_DSI_Refresh>
 800080a:	4603      	mov	r3, r0
 800080c:	75fb      	strb	r3, [r7, #23]
		HAL_Delay(500);
 800080e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000812:	f001 fcbd 	bl	8002190 <HAL_Delay>
		//				HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, RESET);
		//			}
		//		}


		HAL_Delay(10);
 8000816:	200a      	movs	r0, #10
 8000818:	f001 fcba 	bl	8002190 <HAL_Delay>
	{
 800081c:	e7c5      	b.n	80007aa <main+0x1de>
 800081e:	bf00      	nop
 8000820:	2000018c 	.word	0x2000018c
 8000824:	42021000 	.word	0x42021000
 8000828:	42021c00 	.word	0x42021c00
 800082c:	42020c00 	.word	0x42020c00
 8000830:	20000028 	.word	0x20000028
 8000834:	20000370 	.word	0x20000370
 8000838:	bd011e00 	.word	0xbd011e00
 800083c:	0800e038 	.word	0x0800e038
 8000840:	42020400 	.word	0x42020400
 8000844:	20000374 	.word	0x20000374

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b09e      	sub	sp, #120	@ 0x78
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0318 	add.w	r3, r7, #24
 8000852:	2260      	movs	r2, #96	@ 0x60
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f00d fbb6 	bl	800dfc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	463b      	mov	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
 800086a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800086c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000870:	f007 fd00 	bl	8008274 <HAL_PWREx_ControlVoltageScaling>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800087a:	f000 feff 	bl	800167c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800087e:	f007 fcd9 	bl	8008234 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8000882:	4b2b      	ldr	r3, [pc, #172]	@ (8000930 <SystemClock_Config+0xe8>)
 8000884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000888:	f023 0318 	bic.w	r3, r3, #24
 800088c:	4a28      	ldr	r2, [pc, #160]	@ (8000930 <SystemClock_Config+0xe8>)
 800088e:	f043 0308 	orr.w	r3, r3, #8
 8000892:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000896:	2307      	movs	r3, #7
 8000898:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800089a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800089e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008a0:	2381      	movs	r3, #129	@ 0x81
 80008a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008aa:	2310      	movs	r3, #16
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	2303      	movs	r3, #3
 80008b4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008ba:	2301      	movs	r3, #1
 80008bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008be:	230a      	movs	r3, #10
 80008c0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 5;
 80008c2:	2305      	movs	r3, #5
 80008c4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80008ce:	230c      	movs	r3, #12
 80008d0:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	f107 0318 	add.w	r3, r7, #24
 80008da:	4618      	mov	r0, r3
 80008dc:	f007 fdc6 	bl	800846c <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008e6:	f000 fec9 	bl	800167c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	231f      	movs	r3, #31
 80008ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ee:	2303      	movs	r3, #3
 80008f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	2104      	movs	r1, #4
 8000906:	4618      	mov	r0, r3
 8000908:	f008 fc8c 	bl	8009224 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000912:	f000 feb3 	bl	800167c <Error_Handler>
  }

  /** LSCO configuration
  */
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSE);
 8000916:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800091a:	f00b ff95 	bl	800c848 <HAL_RCCEx_EnableLSCO>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800091e:	f009 f803 	bl	8009928 <HAL_RCC_EnableCSS>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8000922:	f00b ff7f 	bl	800c824 <HAL_RCCEx_EnableLSECSS>
}
 8000926:	bf00      	nop
 8000928:	3778      	adds	r7, #120	@ 0x78
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	46020c00 	.word	0x46020c00

08000934 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000938:	f007 fd78 	bl	800842c <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800093c:	2002      	movs	r0, #2
 800093e:	f007 fd25 	bl	800838c <HAL_PWREx_ConfigSupply>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000948:	f000 fe98 	bl	800167c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	2220      	movs	r2, #32
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f00d fb33 	bl	800dfc8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000962:	4b30      	ldr	r3, [pc, #192]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 8000964:	4a30      	ldr	r2, [pc, #192]	@ (8000a28 <MX_ADC1_Init+0xd8>)
 8000966:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8000968:	4b2e      	ldr	r3, [pc, #184]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 800096a:	f44f 1220 	mov.w	r2, #2621440	@ 0x280000
 800096e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000970:	4b2c      	ldr	r3, [pc, #176]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000976:	4b2b      	ldr	r3, [pc, #172]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800097c:	4b29      	ldr	r3, [pc, #164]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000982:	4b28      	ldr	r3, [pc, #160]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000988:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 800098a:	2204      	movs	r2, #4
 800098c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800098e:	4b25      	ldr	r3, [pc, #148]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 8000990:	2200      	movs	r2, #0
 8000992:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000994:	4b23      	ldr	r3, [pc, #140]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 8000996:	2201      	movs	r2, #1
 8000998:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 800099c:	4b21      	ldr	r3, [pc, #132]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 800099e:	2201      	movs	r2, #1
 80009a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009a2:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80009be:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009c4:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009ca:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009d0:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 80009d2:	2203      	movs	r2, #3
 80009d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009de:	4811      	ldr	r0, [pc, #68]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 80009e0:	f001 ffbe 	bl	8002960 <HAL_ADC_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80009ea:	f000 fe47 	bl	800167c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <MX_ADC1_Init+0xdc>)
 80009f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f2:	2306      	movs	r3, #6
 80009f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_68CYCLES;
 80009f6:	2305      	movs	r3, #5
 80009f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009fe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a00:	2304      	movs	r3, #4
 8000a02:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a08:	463b      	mov	r3, r7
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_ADC1_Init+0xd4>)
 8000a0e:	f002 fed5 	bl	80037bc <HAL_ADC_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000a18:	f000 fe30 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000028 	.word	0x20000028
 8000a28:	42028000 	.word	0x42028000
 8000a2c:	20000100 	.word	0x20000100

08000a30 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a34:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <MX_CRC_Init+0x3c>)
 8000a36:	4a0e      	ldr	r2, [pc, #56]	@ (8000a70 <MX_CRC_Init+0x40>)
 8000a38:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_CRC_Init+0x3c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <MX_CRC_Init+0x3c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_CRC_Init+0x3c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <MX_CRC_Init+0x3c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a52:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <MX_CRC_Init+0x3c>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <MX_CRC_Init+0x3c>)
 8000a5a:	f004 f94f 	bl	8004cfc <HAL_CRC_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000a64:	f000 fe0a 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000168 	.word	0x20000168
 8000a70:	40023000 	.word	0x40023000

08000a74 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b0ae      	sub	sp, #184	@ 0xb8
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000a7a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
 8000a8a:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000a8c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a90:	2224      	movs	r2, #36	@ 0x24
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f00d fa97 	bl	800dfc8 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000a9a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
 8000aaa:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000aac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ab0:	2234      	movs	r2, #52	@ 0x34
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f00d fa87 	bl	800dfc8 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	222c      	movs	r2, #44	@ 0x2c
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f00d fa81 	bl	800dfc8 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8000c7c <MX_DSIHOST_DSI_Init+0x208>)
 8000ac8:	4a6d      	ldr	r2, [pc, #436]	@ (8000c80 <MX_DSIHOST_DSI_Init+0x20c>)
 8000aca:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000acc:	4b6b      	ldr	r3, [pc, #428]	@ (8000c7c <MX_DSIHOST_DSI_Init+0x208>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000ad2:	4b6a      	ldr	r3, [pc, #424]	@ (8000c7c <MX_DSIHOST_DSI_Init+0x208>)
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000ad8:	4b68      	ldr	r3, [pc, #416]	@ (8000c7c <MX_DSIHOST_DSI_Init+0x208>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 8000ade:	4b67      	ldr	r3, [pc, #412]	@ (8000c7c <MX_DSIHOST_DSI_Init+0x208>)
 8000ae0:	2208      	movs	r2, #8
 8000ae2:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 8000ae4:	4b65      	ldr	r3, [pc, #404]	@ (8000c7c <MX_DSIHOST_DSI_Init+0x208>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 8000aea:	237d      	movs	r3, #125	@ 0x7d
 8000aec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 8000af0:	2304      	movs	r3, #4
 8000af2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 8000afc:	2301      	movs	r3, #1
 8000afe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000b0e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000b12:	4619      	mov	r1, r3
 8000b14:	4859      	ldr	r0, [pc, #356]	@ (8000c7c <MX_DSIHOST_DSI_Init+0x208>)
 8000b16:	f005 fdf1 	bl	80066fc <HAL_DSI_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 8000b20:	f000 fdac 	bl	800167c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000b24:	2301      	movs	r3, #1
 8000b26:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 20;
 8000b28:	2314      	movs	r3, #20
 8000b2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.LowPowerReceptionTimeout = 20;
 8000b2e:	2314      	movs	r3, #20
 8000b30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.HighSpeedReadTimeout = 20;
 8000b34:	2314      	movs	r3, #20
 8000b36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.LowPowerReadTimeout = 20;
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWriteTimeout = 20;
 8000b40:	2314      	movs	r3, #20
 8000b42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.LowPowerWriteTimeout = 20;
 8000b4c:	2314      	movs	r3, #20
 8000b4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  HostTimeouts.BTATimeout = 20;
 8000b52:	2314      	movs	r3, #20
 8000b54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000b58:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4847      	ldr	r0, [pc, #284]	@ (8000c7c <MX_DSIHOST_DSI_Init+0x208>)
 8000b60:	f006 fade 	bl	8007120 <HAL_DSI_ConfigHostTimeouts>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_DSIHOST_DSI_Init+0xfa>
  {
    Error_Handler();
 8000b6a:	f000 fd87 	bl	800167c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 10;
 8000b6e:	230a      	movs	r3, #10
 8000b70:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.ClockLaneLP2HSTime = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneHS2LPTime = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneLP2HSTime = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.DataLaneMaxReadTime = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	677b      	str	r3, [r7, #116]	@ 0x74
  PhyTimings.StopWaitTime = 10;
 8000b82:	230a      	movs	r3, #10
 8000b84:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000b86:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	483b      	ldr	r0, [pc, #236]	@ (8000c7c <MX_DSIHOST_DSI_Init+0x208>)
 8000b8e:	f006 fa31 	bl	8006ff4 <HAL_DSI_ConfigPhyTimer>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000b98:	f000 fd70 	bl	800167c <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000b9c:	2104      	movs	r1, #4
 8000b9e:	4837      	ldr	r0, [pc, #220]	@ (8000c7c <MX_DSIHOST_DSI_Init+0x208>)
 8000ba0:	f006 fa00 	bl	8006fa4 <HAL_DSI_ConfigFlowControl>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000baa:	f000 fd67 	bl	800167c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4832      	ldr	r0, [pc, #200]	@ (8000c7c <MX_DSIHOST_DSI_Init+0x208>)
 8000bb2:	f005 fed9 	bl	8006968 <HAL_DSI_ConfigErrorMonitor>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 8000bbc:	f000 fd5e 	bl	800167c <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000bc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bc4:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000bc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bca:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000bcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000bd2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000bd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bdc:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000bde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000be2:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000be4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000be8:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000bea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000bf0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bf4:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000bf6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000bfa:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000bfc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000c00:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000c02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c06:	65fb      	str	r3, [r7, #92]	@ 0x5c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000c0c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c10:	4619      	mov	r1, r3
 8000c12:	481a      	ldr	r0, [pc, #104]	@ (8000c7c <MX_DSIHOST_DSI_Init+0x208>)
 8000c14:	f006 f968 	bl	8006ee8 <HAL_DSI_ConfigCommand>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_DSIHOST_DSI_Init+0x1ae>
  {
    Error_Handler();
 8000c1e:	f000 fd2d 	bl	800167c <Error_Handler>
  }
  CmdCfg.ColorCoding = DSI_RGB888;
 8000c22:	2305      	movs	r3, #5
 8000c24:	60bb      	str	r3, [r7, #8]
  CmdCfg.CommandSize = 416;
 8000c26:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8000c2a:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	613b      	str	r3, [r7, #16]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000c34:	2304      	movs	r3, #4
 8000c36:	61bb      	str	r3, [r7, #24]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	61fb      	str	r3, [r7, #28]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480a      	ldr	r0, [pc, #40]	@ (8000c7c <MX_DSIHOST_DSI_Init+0x208>)
 8000c52:	f006 f872 	bl	8006d3a <HAL_DSI_ConfigAdaptedCommandMode>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_DSIHOST_DSI_Init+0x1ec>
  {
    Error_Handler();
 8000c5c:	f000 fd0e 	bl	800167c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000c60:	2100      	movs	r1, #0
 8000c62:	4806      	ldr	r0, [pc, #24]	@ (8000c7c <MX_DSIHOST_DSI_Init+0x208>)
 8000c64:	f006 f83e 	bl	8006ce4 <HAL_DSI_SetGenericVCID>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_DSIHOST_DSI_Init+0x1fe>
  {
    Error_Handler();
 8000c6e:	f000 fd05 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	37b8      	adds	r7, #184	@ 0xb8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000018c 	.word	0x2000018c
 8000c80:	40016c00 	.word	0x40016c00

08000c84 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <MX_GPDMA1_Init+0x3c>)
 8000c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c90:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc0 <MX_GPDMA1_Init+0x3c>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000c9a:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_GPDMA1_Init+0x3c>)
 8000c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	201d      	movs	r0, #29
 8000cae:	f003 ffa5 	bl	8004bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000cb2:	201d      	movs	r0, #29
 8000cb4:	f003 ffbc 	bl	8004c30 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	46020c00 	.word	0x46020c00

08000cc4 <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d38 <MX_I2C5_Init+0x74>)
 8000cca:	4a1c      	ldr	r2, [pc, #112]	@ (8000d3c <MX_I2C5_Init+0x78>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x30909DEC;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <MX_I2C5_Init+0x74>)
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d40 <MX_I2C5_Init+0x7c>)
 8000cd2:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	@ (8000d38 <MX_I2C5_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cda:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <MX_I2C5_Init+0x74>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <MX_I2C5_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <MX_I2C5_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <MX_I2C5_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <MX_I2C5_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <MX_I2C5_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8000cfe:	480e      	ldr	r0, [pc, #56]	@ (8000d38 <MX_I2C5_Init+0x74>)
 8000d00:	f006 fdf2 	bl	80078e8 <HAL_I2C_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8000d0a:	f000 fcb7 	bl	800167c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4809      	ldr	r0, [pc, #36]	@ (8000d38 <MX_I2C5_Init+0x74>)
 8000d12:	f006 fe84 	bl	8007a1e <HAL_I2CEx_ConfigAnalogFilter>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8000d1c:	f000 fcae 	bl	800167c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8000d20:	2100      	movs	r1, #0
 8000d22:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <MX_I2C5_Init+0x74>)
 8000d24:	f006 fec6 	bl	8007ab4 <HAL_I2CEx_ConfigDigitalFilter>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8000d2e:	f000 fca5 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200001b0 	.word	0x200001b0
 8000d3c:	40009800 	.word	0x40009800
 8000d40:	30909dec 	.word	0x30909dec

08000d44 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f006 feff 	bl	8007b4c <HAL_ICACHE_ConfigAssociativityMode>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000d54:	f000 fc92 	bl	800167c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000d58:	f006 ff18 	bl	8007b8c <HAL_ICACHE_Enable>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000d62:	f000 fc8b 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08e      	sub	sp, #56	@ 0x38
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2234      	movs	r2, #52	@ 0x34
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f00d f925 	bl	800dfc8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e68 <MX_LTDC_Init+0xfc>)
 8000d80:	4a3a      	ldr	r2, [pc, #232]	@ (8000e6c <MX_LTDC_Init+0x100>)
 8000d82:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d84:	4b38      	ldr	r3, [pc, #224]	@ (8000e68 <MX_LTDC_Init+0xfc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d8a:	4b37      	ldr	r3, [pc, #220]	@ (8000e68 <MX_LTDC_Init+0xfc>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d90:	4b35      	ldr	r3, [pc, #212]	@ (8000e68 <MX_LTDC_Init+0xfc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d96:	4b34      	ldr	r3, [pc, #208]	@ (8000e68 <MX_LTDC_Init+0xfc>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000d9c:	4b32      	ldr	r3, [pc, #200]	@ (8000e68 <MX_LTDC_Init+0xfc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000da2:	4b31      	ldr	r3, [pc, #196]	@ (8000e68 <MX_LTDC_Init+0xfc>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 0;
 8000da8:	4b2f      	ldr	r3, [pc, #188]	@ (8000e68 <MX_LTDC_Init+0xfc>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 0;
 8000dae:	4b2e      	ldr	r3, [pc, #184]	@ (8000e68 <MX_LTDC_Init+0xfc>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 416;
 8000db4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e68 <MX_LTDC_Init+0xfc>)
 8000db6:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000dba:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 416;
 8000dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8000e68 <MX_LTDC_Init+0xfc>)
 8000dbe:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 416;
 8000dc4:	4b28      	ldr	r3, [pc, #160]	@ (8000e68 <MX_LTDC_Init+0xfc>)
 8000dc6:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 416;
 8000dcc:	4b26      	ldr	r3, [pc, #152]	@ (8000e68 <MX_LTDC_Init+0xfc>)
 8000dce:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000dd4:	4b24      	ldr	r3, [pc, #144]	@ (8000e68 <MX_LTDC_Init+0xfc>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ddc:	4b22      	ldr	r3, [pc, #136]	@ (8000e68 <MX_LTDC_Init+0xfc>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000de4:	4b20      	ldr	r3, [pc, #128]	@ (8000e68 <MX_LTDC_Init+0xfc>)
 8000de6:	22ff      	movs	r2, #255	@ 0xff
 8000de8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000dec:	481e      	ldr	r0, [pc, #120]	@ (8000e68 <MX_LTDC_Init+0xfc>)
 8000dee:	f006 fedd 	bl	8007bac <HAL_LTDC_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000df8:	f000 fc40 	bl	800167c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 416;
 8000e00:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8000e04:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 416;
 8000e0a:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8000e0e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000e14:	23ff      	movs	r3, #255	@ 0xff
 8000e16:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 255;
 8000e18:	23ff      	movs	r3, #255	@ 0xff
 8000e1a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e20:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e22:	2305      	movs	r3, #5
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = framebuf;
 8000e26:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <MX_LTDC_Init+0x104>)
 8000e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 416;
 8000e2a:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8000e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 416;
 8000e30:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8000e34:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4806      	ldr	r0, [pc, #24]	@ (8000e68 <MX_LTDC_Init+0xfc>)
 8000e50:	f007 f83e 	bl	8007ed0 <HAL_LTDC_ConfigLayer>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8000e5a:	f000 fc0f 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	3738      	adds	r7, #56	@ 0x38
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000204 	.word	0x20000204
 8000e6c:	40016800 	.word	0x40016800
 8000e70:	20000374 	.word	0x20000374

08000e74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
 8000e88:	615a      	str	r2, [r3, #20]
 8000e8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f08 <MX_RTC_Init+0x94>)
 8000e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8000f0c <MX_RTC_Init+0x98>)
 8000e90:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e92:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <MX_RTC_Init+0x94>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <MX_RTC_Init+0x94>)
 8000e9a:	227f      	movs	r2, #127	@ 0x7f
 8000e9c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <MX_RTC_Init+0x94>)
 8000ea0:	22ff      	movs	r2, #255	@ 0xff
 8000ea2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <MX_RTC_Init+0x94>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <MX_RTC_Init+0x94>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <MX_RTC_Init+0x94>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <MX_RTC_Init+0x94>)
 8000eb8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ebc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000ebe:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <MX_RTC_Init+0x94>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000ec4:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <MX_RTC_Init+0x94>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000eca:	480f      	ldr	r0, [pc, #60]	@ (8000f08 <MX_RTC_Init+0x94>)
 8000ecc:	f00b fe3a 	bl	800cb44 <HAL_RTC_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000ed6:	f000 fbd1 	bl	800167c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4806      	ldr	r0, [pc, #24]	@ (8000f08 <MX_RTC_Init+0x94>)
 8000ef0:	f00b ff56 	bl	800cda0 <HAL_RTCEx_PrivilegeModeSet>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8000efa:	f000 fbbf 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	3720      	adds	r7, #32
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200002ac 	.word	0x200002ac
 8000f0c:	46007800 	.word	0x46007800

08000f10 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f14:	4b22      	ldr	r3, [pc, #136]	@ (8000fa0 <MX_UART4_Init+0x90>)
 8000f16:	4a23      	ldr	r2, [pc, #140]	@ (8000fa4 <MX_UART4_Init+0x94>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	@ (8000fa0 <MX_UART4_Init+0x90>)
 8000f1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f20:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa0 <MX_UART4_Init+0x90>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <MX_UART4_Init+0x90>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <MX_UART4_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <MX_UART4_Init+0x90>)
 8000f36:	220c      	movs	r2, #12
 8000f38:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3a:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <MX_UART4_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f40:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <MX_UART4_Init+0x90>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f46:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <MX_UART4_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <MX_UART4_Init+0x90>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f52:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <MX_UART4_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f58:	4811      	ldr	r0, [pc, #68]	@ (8000fa0 <MX_UART4_Init+0x90>)
 8000f5a:	f00c fb15 	bl	800d588 <HAL_UART_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000f64:	f000 fb8a 	bl	800167c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <MX_UART4_Init+0x90>)
 8000f6c:	f00c ff62 	bl	800de34 <HAL_UARTEx_SetTxFifoThreshold>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000f76:	f000 fb81 	bl	800167c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4808      	ldr	r0, [pc, #32]	@ (8000fa0 <MX_UART4_Init+0x90>)
 8000f7e:	f00c ff97 	bl	800deb0 <HAL_UARTEx_SetRxFifoThreshold>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000f88:	f000 fb78 	bl	800167c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <MX_UART4_Init+0x90>)
 8000f8e:	f00c ff18 	bl	800ddc2 <HAL_UARTEx_DisableFifoMode>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000f98:	f000 fb70 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200002dc 	.word	0x200002dc
 8000fa4:	40004c00 	.word	0x40004c00

08000fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08e      	sub	sp, #56	@ 0x38
 8000fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4bbf      	ldr	r3, [pc, #764]	@ (80012bc <MX_GPIO_Init+0x314>)
 8000fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fc4:	4abd      	ldr	r2, [pc, #756]	@ (80012bc <MX_GPIO_Init+0x314>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fce:	4bbb      	ldr	r3, [pc, #748]	@ (80012bc <MX_GPIO_Init+0x314>)
 8000fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	623b      	str	r3, [r7, #32]
 8000fda:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fdc:	4bb7      	ldr	r3, [pc, #732]	@ (80012bc <MX_GPIO_Init+0x314>)
 8000fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fe2:	4ab6      	ldr	r2, [pc, #728]	@ (80012bc <MX_GPIO_Init+0x314>)
 8000fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fe8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fec:	4bb3      	ldr	r3, [pc, #716]	@ (80012bc <MX_GPIO_Init+0x314>)
 8000fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ffa:	4bb0      	ldr	r3, [pc, #704]	@ (80012bc <MX_GPIO_Init+0x314>)
 8000ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001000:	4aae      	ldr	r2, [pc, #696]	@ (80012bc <MX_GPIO_Init+0x314>)
 8001002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001006:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800100a:	4bac      	ldr	r3, [pc, #688]	@ (80012bc <MX_GPIO_Init+0x314>)
 800100c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001018:	4ba8      	ldr	r3, [pc, #672]	@ (80012bc <MX_GPIO_Init+0x314>)
 800101a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800101e:	4aa7      	ldr	r2, [pc, #668]	@ (80012bc <MX_GPIO_Init+0x314>)
 8001020:	f043 0308 	orr.w	r3, r3, #8
 8001024:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001028:	4ba4      	ldr	r3, [pc, #656]	@ (80012bc <MX_GPIO_Init+0x314>)
 800102a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	4ba1      	ldr	r3, [pc, #644]	@ (80012bc <MX_GPIO_Init+0x314>)
 8001038:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800103c:	4a9f      	ldr	r2, [pc, #636]	@ (80012bc <MX_GPIO_Init+0x314>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001046:	4b9d      	ldr	r3, [pc, #628]	@ (80012bc <MX_GPIO_Init+0x314>)
 8001048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001054:	4b99      	ldr	r3, [pc, #612]	@ (80012bc <MX_GPIO_Init+0x314>)
 8001056:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800105a:	4a98      	ldr	r2, [pc, #608]	@ (80012bc <MX_GPIO_Init+0x314>)
 800105c:	f043 0310 	orr.w	r3, r3, #16
 8001060:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001064:	4b95      	ldr	r3, [pc, #596]	@ (80012bc <MX_GPIO_Init+0x314>)
 8001066:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800106a:	f003 0310 	and.w	r3, r3, #16
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b92      	ldr	r3, [pc, #584]	@ (80012bc <MX_GPIO_Init+0x314>)
 8001074:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001078:	4a90      	ldr	r2, [pc, #576]	@ (80012bc <MX_GPIO_Init+0x314>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001082:	4b8e      	ldr	r3, [pc, #568]	@ (80012bc <MX_GPIO_Init+0x314>)
 8001084:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001090:	4b8a      	ldr	r3, [pc, #552]	@ (80012bc <MX_GPIO_Init+0x314>)
 8001092:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001096:	4a89      	ldr	r2, [pc, #548]	@ (80012bc <MX_GPIO_Init+0x314>)
 8001098:	f043 0320 	orr.w	r3, r3, #32
 800109c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010a0:	4b86      	ldr	r3, [pc, #536]	@ (80012bc <MX_GPIO_Init+0x314>)
 80010a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010ae:	4b83      	ldr	r3, [pc, #524]	@ (80012bc <MX_GPIO_Init+0x314>)
 80010b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010b4:	4a81      	ldr	r2, [pc, #516]	@ (80012bc <MX_GPIO_Init+0x314>)
 80010b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010be:	4b7f      	ldr	r3, [pc, #508]	@ (80012bc <MX_GPIO_Init+0x314>)
 80010c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DISPLAY_RST_Pin|WL_BT_PWR_EN_Pin|FLASH_RST_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	f24a 0108 	movw	r1, #40968	@ 0xa008
 80010d2:	487b      	ldr	r0, [pc, #492]	@ (80012c0 <MX_GPIO_Init+0x318>)
 80010d4:	f006 fbf0 	bl	80078b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GNSS_WAKEUP_Pin|GNSS_RST_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80010de:	4879      	ldr	r0, [pc, #484]	@ (80012c4 <MX_GPIO_Init+0x31c>)
 80010e0:	f006 fbea 	bl	80078b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TP_RST_Pin|AVDDEN_Pin|SD_EN_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	21c8      	movs	r1, #200	@ 0xc8
 80010e8:	4877      	ldr	r0, [pc, #476]	@ (80012c8 <MX_GPIO_Init+0x320>)
 80010ea:	f006 fbe5 	bl	80078b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, BT_DEV_WAKE_Pin|BT_EN_Pin|WL_EN_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2107      	movs	r1, #7
 80010f2:	4876      	ldr	r0, [pc, #472]	@ (80012cc <MX_GPIO_Init+0x324>)
 80010f4:	f006 fbe0 	bl	80078b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO2_GPIO_Port, GPIO2_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2104      	movs	r1, #4
 80010fc:	4874      	ldr	r0, [pc, #464]	@ (80012d0 <MX_GPIO_Init+0x328>)
 80010fe:	f006 fbdb 	bl	80078b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	2104      	movs	r1, #4
 8001106:	4873      	ldr	r0, [pc, #460]	@ (80012d4 <MX_GPIO_Init+0x32c>)
 8001108:	f006 fbd6 	bl	80078b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TOUCH_RST_Pin|LRA_EN_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 4141 	mov.w	r1, #49408	@ 0xc100
 8001112:	4871      	ldr	r0, [pc, #452]	@ (80012d8 <MX_GPIO_Init+0x330>)
 8001114:	f006 fbd0 	bl	80078b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 8001118:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111e:	2312      	movs	r3, #18
 8001120:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800112a:	2304      	movs	r3, #4
 800112c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001132:	4619      	mov	r1, r3
 8001134:	4869      	ldr	r0, [pc, #420]	@ (80012dc <MX_GPIO_Init+0x334>)
 8001136:	f006 f9cf 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_RST_Pin WL_BT_PWR_EN_Pin FLASH_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin|WL_BT_PWR_EN_Pin|FLASH_RST_Pin;
 800113a:	f24a 0308 	movw	r3, #40968	@ 0xa008
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800114c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001150:	4619      	mov	r1, r3
 8001152:	485b      	ldr	r0, [pc, #364]	@ (80012c0 <MX_GPIO_Init+0x318>)
 8001154:	f006 f9c0 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB3 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_14;
 8001158:	f244 0318 	movw	r3, #16408	@ 0x4018
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001166:	2302      	movs	r3, #2
 8001168:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC2;
 800116a:	230c      	movs	r3, #12
 800116c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001172:	4619      	mov	r1, r3
 8001174:	4859      	ldr	r0, [pc, #356]	@ (80012dc <MX_GPIO_Init+0x334>)
 8001176:	f006 f9af 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_WAKEUP_Pin GNSS_RST_Pin GPIO3_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin|GNSS_RST_Pin|GPIO3_Pin;
 800117a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800118c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001190:	4619      	mov	r1, r3
 8001192:	484c      	ldr	r0, [pc, #304]	@ (80012c4 <MX_GPIO_Init+0x31c>)
 8001194:	f006 f9a0 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_PPS_Pin ALS_INT_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin|ALS_INT_Pin;
 8001198:	f241 0302 	movw	r3, #4098	@ 0x1002
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119e:	4b50      	ldr	r3, [pc, #320]	@ (80012e0 <MX_GPIO_Init+0x338>)
 80011a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011aa:	4619      	mov	r1, r3
 80011ac:	4845      	ldr	r0, [pc, #276]	@ (80012c4 <MX_GPIO_Init+0x31c>)
 80011ae:	f006 f993 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80011b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80011b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011c4:	2307      	movs	r3, #7
 80011c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011cc:	4619      	mov	r1, r3
 80011ce:	483d      	ldr	r0, [pc, #244]	@ (80012c4 <MX_GPIO_Init+0x31c>)
 80011d0:	f006 f982 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80011d4:	23c0      	movs	r3, #192	@ 0xc0
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e0:	2302      	movs	r3, #2
 80011e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80011e4:	230b      	movs	r3, #11
 80011e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ec:	4619      	mov	r1, r3
 80011ee:	483a      	ldr	r0, [pc, #232]	@ (80012d8 <MX_GPIO_Init+0x330>)
 80011f0:	f006 f972 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD5 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_4;
 80011f4:	2338      	movs	r3, #56	@ 0x38
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001204:	2307      	movs	r3, #7
 8001206:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001208:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120c:	4619      	mov	r1, r3
 800120e:	4832      	ldr	r0, [pc, #200]	@ (80012d8 <MX_GPIO_Init+0x330>)
 8001210:	f006 f962 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC10 PC11 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 8001214:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001222:	2302      	movs	r3, #2
 8001224:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001226:	230c      	movs	r3, #12
 8001228:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800122e:	4619      	mov	r1, r3
 8001230:	4828      	ldr	r0, [pc, #160]	@ (80012d4 <MX_GPIO_Init+0x32c>)
 8001232:	f006 f951 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_INT_Pin SWIRE_IN_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin|SWIRE_IN_Pin;
 8001236:	2305      	movs	r3, #5
 8001238:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123a:	2300      	movs	r3, #0
 800123c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001242:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001246:	4619      	mov	r1, r3
 8001248:	481f      	ldr	r0, [pc, #124]	@ (80012c8 <MX_GPIO_Init+0x320>)
 800124a:	f006 f945 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_RST_Pin AVDDEN_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = TP_RST_Pin|AVDDEN_Pin|SD_EN_Pin;
 800124e:	23c8      	movs	r3, #200	@ 0xc8
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800125e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001262:	4619      	mov	r1, r3
 8001264:	4818      	ldr	r0, [pc, #96]	@ (80012c8 <MX_GPIO_Init+0x320>)
 8001266:	f006 f937 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800126a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001278:	2302      	movs	r3, #2
 800127a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 800127c:	2308      	movs	r3, #8
 800127e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001280:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001284:	4619      	mov	r1, r3
 8001286:	4815      	ldr	r0, [pc, #84]	@ (80012dc <MX_GPIO_Init+0x334>)
 8001288:	f006 f926 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800128c:	2320      	movs	r3, #32
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800129c:	2303      	movs	r3, #3
 800129e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	480d      	ldr	r0, [pc, #52]	@ (80012dc <MX_GPIO_Init+0x334>)
 80012a8:	f006 f916 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012ac:	2304      	movs	r3, #4
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012b8:	e014      	b.n	80012e4 <MX_GPIO_Init+0x33c>
 80012ba:	bf00      	nop
 80012bc:	46020c00 	.word	0x46020c00
 80012c0:	42021c00 	.word	0x42021c00
 80012c4:	42021800 	.word	0x42021800
 80012c8:	42021000 	.word	0x42021000
 80012cc:	42022000 	.word	0x42022000
 80012d0:	42021400 	.word	0x42021400
 80012d4:	42020800 	.word	0x42020800
 80012d8:	42020c00 	.word	0x42020c00
 80012dc:	42020400 	.word	0x42020400
 80012e0:	10110000 	.word	0x10110000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e4:	2302      	movs	r3, #2
 80012e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012e8:	230c      	movs	r3, #12
 80012ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f0:	4619      	mov	r1, r3
 80012f2:	48ba      	ldr	r0, [pc, #744]	@ (80015dc <MX_GPIO_Init+0x634>)
 80012f4:	f006 f8f0 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWIRE_OUT_Pin */
  GPIO_InitStruct.Pin = SWIRE_OUT_Pin;
 80012f8:	2310      	movs	r3, #16
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001300:	2302      	movs	r3, #2
 8001302:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SWIRE_OUT_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001308:	4619      	mov	r1, r3
 800130a:	48b5      	ldr	r0, [pc, #724]	@ (80015e0 <MX_GPIO_Init+0x638>)
 800130c:	f006 f8e4 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT1_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|MAG_INT_Pin;
 8001310:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001314:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001316:	4bb3      	ldr	r3, [pc, #716]	@ (80015e4 <MX_GPIO_Init+0x63c>)
 8001318:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800131e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001322:	4619      	mov	r1, r3
 8001324:	48ae      	ldr	r0, [pc, #696]	@ (80015e0 <MX_GPIO_Init+0x638>)
 8001326:	f006 f8d7 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800132a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800133c:	2303      	movs	r3, #3
 800133e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	48a8      	ldr	r0, [pc, #672]	@ (80015e8 <MX_GPIO_Init+0x640>)
 8001348:	f006 f8c6 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800134c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001362:	4619      	mov	r1, r3
 8001364:	48a0      	ldr	r0, [pc, #640]	@ (80015e8 <MX_GPIO_Init+0x640>)
 8001366:	f006 f8b7 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800136a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001378:	2302      	movs	r3, #2
 800137a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC2;
 800137c:	2308      	movs	r3, #8
 800137e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001384:	4619      	mov	r1, r3
 8001386:	4898      	ldr	r0, [pc, #608]	@ (80015e8 <MX_GPIO_Init+0x640>)
 8001388:	f006 f8a6 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin FLASH_RSTO_Pin FLASH_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|FLASH_RSTO_Pin|FLASH_INT_Pin;
 800138c:	f44f 5303 	mov.w	r3, #8384	@ 0x20c0
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001392:	4b94      	ldr	r3, [pc, #592]	@ (80015e4 <MX_GPIO_Init+0x63c>)
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800139e:	4619      	mov	r1, r3
 80013a0:	4892      	ldr	r0, [pc, #584]	@ (80015ec <MX_GPIO_Init+0x644>)
 80013a2:	f006 f899 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013a6:	2303      	movs	r3, #3
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013aa:	2312      	movs	r3, #18
 80013ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 80013b6:	2302      	movs	r3, #2
 80013b8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013be:	4619      	mov	r1, r3
 80013c0:	488b      	ldr	r0, [pc, #556]	@ (80015f0 <MX_GPIO_Init+0x648>)
 80013c2:	f006 f889 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_DEV_WAKE_Pin BT_EN_Pin WL_EN_Pin */
  GPIO_InitStruct.Pin = BT_DEV_WAKE_Pin|BT_EN_Pin|WL_EN_Pin;
 80013c6:	2307      	movs	r3, #7
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013da:	4619      	mov	r1, r3
 80013dc:	4885      	ldr	r0, [pc, #532]	@ (80015f4 <MX_GPIO_Init+0x64c>)
 80013de:	f006 f87b 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_HOST_WAKE_Pin */
  GPIO_InitStruct.Pin = BT_HOST_WAKE_Pin;
 80013e2:	2308      	movs	r3, #8
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e6:	4b7f      	ldr	r3, [pc, #508]	@ (80015e4 <MX_GPIO_Init+0x63c>)
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BT_HOST_WAKE_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f2:	4619      	mov	r1, r3
 80013f4:	487f      	ldr	r0, [pc, #508]	@ (80015f4 <MX_GPIO_Init+0x64c>)
 80013f6:	f006 f86f 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin;
 80013fa:	2304      	movs	r3, #4
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIO2_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800140e:	4619      	mov	r1, r3
 8001410:	4877      	ldr	r0, [pc, #476]	@ (80015f0 <MX_GPIO_Init+0x648>)
 8001412:	f006 f861 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin;
 8001416:	2304      	movs	r3, #4
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIO1_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800142a:	4619      	mov	r1, r3
 800142c:	486f      	ldr	r0, [pc, #444]	@ (80015ec <MX_GPIO_Init+0x644>)
 800142e:	f006 f853 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WL_HOST_WAKE_Pin */
  GPIO_InitStruct.Pin = WL_HOST_WAKE_Pin;
 8001432:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001438:	4b6a      	ldr	r3, [pc, #424]	@ (80015e4 <MX_GPIO_Init+0x63c>)
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(WL_HOST_WAKE_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001444:	4619      	mov	r1, r3
 8001446:	486c      	ldr	r0, [pc, #432]	@ (80015f8 <MX_GPIO_Init+0x650>)
 8001448:	f006 f846 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800144c:	f240 4304 	movw	r3, #1028	@ 0x404
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800145e:	230a      	movs	r3, #10
 8001460:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	4864      	ldr	r0, [pc, #400]	@ (80015fc <MX_GPIO_Init+0x654>)
 800146a:	f006 f835 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 800146e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001474:	2311      	movs	r3, #17
 8001476:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001484:	4619      	mov	r1, r3
 8001486:	4855      	ldr	r0, [pc, #340]	@ (80015dc <MX_GPIO_Init+0x634>)
 8001488:	f006 f826 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH12 PH11 PH10 PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9;
 800148c:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800149e:	2305      	movs	r3, #5
 80014a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a6:	4619      	mov	r1, r3
 80014a8:	4853      	ldr	r0, [pc, #332]	@ (80015f8 <MX_GPIO_Init+0x650>)
 80014aa:	f006 f815 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014ae:	2301      	movs	r3, #1
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014be:	2305      	movs	r3, #5
 80014c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c6:	4619      	mov	r1, r3
 80014c8:	484c      	ldr	r0, [pc, #304]	@ (80015fc <MX_GPIO_Init+0x654>)
 80014ca:	f006 f805 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80014ce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 80014e0:	2303      	movs	r3, #3
 80014e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e8:	4619      	mov	r1, r3
 80014ea:	483d      	ldr	r0, [pc, #244]	@ (80015e0 <MX_GPIO_Init+0x638>)
 80014ec:	f005 fff4 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE14 PE13 PE11
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11
 80014f0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001502:	230a      	movs	r3, #10
 8001504:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	4834      	ldr	r0, [pc, #208]	@ (80015e0 <MX_GPIO_Init+0x638>)
 800150e:	f005 ffe3 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001512:	2303      	movs	r3, #3
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001516:	2312      	movs	r3, #18
 8001518:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001522:	2304      	movs	r3, #4
 8001524:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	482f      	ldr	r0, [pc, #188]	@ (80015ec <MX_GPIO_Init+0x644>)
 800152e:	f005 ffd3 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 8001532:	23e0      	movs	r3, #224	@ 0xe0
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001542:	2305      	movs	r3, #5
 8001544:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	4826      	ldr	r0, [pc, #152]	@ (80015e8 <MX_GPIO_Init+0x640>)
 800154e:	f005 ffc3 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8001552:	2301      	movs	r3, #1
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001556:	2300      	movs	r3, #0
 8001558:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 800155e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001562:	4619      	mov	r1, r3
 8001564:	4826      	ldr	r0, [pc, #152]	@ (8001600 <MX_GPIO_Init+0x658>)
 8001566:	f005 ffb7 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 800156a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800156e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001570:	2312      	movs	r3, #18
 8001572:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800157c:	2304      	movs	r3, #4
 800157e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001584:	4619      	mov	r1, r3
 8001586:	4815      	ldr	r0, [pc, #84]	@ (80015dc <MX_GPIO_Init+0x634>)
 8001588:	f005 ffa6 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_INT_Pin TOUCH_INT_Pin HR_INT_Pin */
  GPIO_InitStruct.Pin = PWR_INT_Pin|TOUCH_INT_Pin|HR_INT_Pin;
 800158c:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001592:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <MX_GPIO_Init+0x63c>)
 8001594:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	480e      	ldr	r0, [pc, #56]	@ (80015dc <MX_GPIO_Init+0x634>)
 80015a2:	f005 ff99 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015a6:	2304      	movs	r3, #4
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015aa:	2303      	movs	r3, #3
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b6:	4619      	mov	r1, r3
 80015b8:	480b      	ldr	r0, [pc, #44]	@ (80015e8 <MX_GPIO_Init+0x640>)
 80015ba:	f005 ff8d 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80015be:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c4:	2312      	movs	r3, #18
 80015c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015d0:	2304      	movs	r3, #4
 80015d2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	e013      	b.n	8001604 <MX_GPIO_Init+0x65c>
 80015dc:	42020c00 	.word	0x42020c00
 80015e0:	42021000 	.word	0x42021000
 80015e4:	10110000 	.word	0x10110000
 80015e8:	42020000 	.word	0x42020000
 80015ec:	42020800 	.word	0x42020800
 80015f0:	42021400 	.word	0x42021400
 80015f4:	42022000 	.word	0x42022000
 80015f8:	42021c00 	.word	0x42021c00
 80015fc:	42020400 	.word	0x42020400
 8001600:	42021800 	.word	0x42021800
 8001604:	4811      	ldr	r0, [pc, #68]	@ (800164c <MX_GPIO_Init+0x6a4>)
 8001606:	f005 ff67 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LRA_EN_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin|PWR_ENCHG_Pin;
 800160a:	f44f 4382 	mov.w	r3, #16640	@ 0x4100
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800161c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	480b      	ldr	r0, [pc, #44]	@ (8001650 <MX_GPIO_Init+0x6a8>)
 8001624:	f005 ff58 	bl	80074d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001628:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <MX_GPIO_Init+0x6ac>)
 8001630:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	4803      	ldr	r0, [pc, #12]	@ (800164c <MX_GPIO_Init+0x6a4>)
 800163e:	f005 ff4b 	bl	80074d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001642:	bf00      	nop
 8001644:	3738      	adds	r7, #56	@ 0x38
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	42020400 	.word	0x42020400
 8001650:	42020c00 	.word	0x42020c00
 8001654:	10110000 	.word	0x10110000

08001658 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d101      	bne.n	800166e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800166a:	f000 fd71 	bl	8002150 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40001000 	.word	0x40001000

0800167c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001680:	b672      	cpsid	i
}
 8001682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <Error_Handler+0x8>

08001688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <HAL_MspInit+0x70>)
 8001690:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001694:	4a18      	ldr	r2, [pc, #96]	@ (80016f8 <HAL_MspInit+0x70>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <HAL_MspInit+0x70>)
 80016a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80016ac:	f006 fece 	bl	800844c <HAL_PWREx_EnableVddA>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	2009      	movs	r0, #9
 80016b6:	f003 faa1 	bl	8004bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80016ba:	2009      	movs	r0, #9
 80016bc:	f003 fab8 	bl	8004c30 <HAL_NVIC_EnableIRQ>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80016c0:	4b0d      	ldr	r3, [pc, #52]	@ (80016f8 <HAL_MspInit+0x70>)
 80016c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80016c6:	4a0c      	ldr	r2, [pc, #48]	@ (80016f8 <HAL_MspInit+0x70>)
 80016c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016cc:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80016d0:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <HAL_MspInit+0x70>)
 80016d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80016d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 fd7a 	bl	80021d8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80016e4:	f000 fda0 	bl	8002228 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f000 fd89 	bl	8002200 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	46020c00 	.word	0x46020c00

080016fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b0de      	sub	sp, #376	@ 0x178
 8001700:	af00      	add	r7, sp, #0
 8001702:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001706:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800170a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800171c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001720:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001724:	4618      	mov	r0, r3
 8001726:	23e0      	movs	r3, #224	@ 0xe0
 8001728:	461a      	mov	r2, r3
 800172a:	2100      	movs	r1, #0
 800172c:	f00c fc4c 	bl	800dfc8 <memset>
  if(hadc->Instance==ADC1)
 8001730:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001734:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a9f      	ldr	r2, [pc, #636]	@ (80019bc <HAL_ADC_MspInit+0x2c0>)
 800173e:	4293      	cmp	r3, r2
 8001740:	f040 8136 	bne.w	80019b0 <HAL_ADC_MspInit+0x2b4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001744:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001748:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 800174c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001758:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800175c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001760:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001764:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001768:	f107 0318 	add.w	r3, r7, #24
 800176c:	4618      	mov	r0, r3
 800176e:	f008 f98d 	bl	8009a8c <HAL_RCCEx_PeriphCLKConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001778:	f7ff ff80 	bl	800167c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800177c:	4b90      	ldr	r3, [pc, #576]	@ (80019c0 <HAL_ADC_MspInit+0x2c4>)
 800177e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001782:	4a8f      	ldr	r2, [pc, #572]	@ (80019c0 <HAL_ADC_MspInit+0x2c4>)
 8001784:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001788:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800178c:	4b8c      	ldr	r3, [pc, #560]	@ (80019c0 <HAL_ADC_MspInit+0x2c4>)
 800178e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001792:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001796:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800179a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80017a4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80017a8:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	4b85      	ldr	r3, [pc, #532]	@ (80019c0 <HAL_ADC_MspInit+0x2c4>)
 80017ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017b0:	4a83      	ldr	r2, [pc, #524]	@ (80019c0 <HAL_ADC_MspInit+0x2c4>)
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017ba:	4b81      	ldr	r3, [pc, #516]	@ (80019c0 <HAL_ADC_MspInit+0x2c4>)
 80017bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017c0:	f003 0204 	and.w	r2, r3, #4
 80017c4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80017c8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80017d2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017d6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d8:	4b79      	ldr	r3, [pc, #484]	@ (80019c0 <HAL_ADC_MspInit+0x2c4>)
 80017da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017de:	4a78      	ldr	r2, [pc, #480]	@ (80019c0 <HAL_ADC_MspInit+0x2c4>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017e8:	4b75      	ldr	r3, [pc, #468]	@ (80019c0 <HAL_ADC_MspInit+0x2c4>)
 80017ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ee:	f003 0201 	and.w	r2, r3, #1
 80017f2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80017f6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001800:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001804:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	4b6e      	ldr	r3, [pc, #440]	@ (80019c0 <HAL_ADC_MspInit+0x2c4>)
 8001808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800180c:	4a6c      	ldr	r2, [pc, #432]	@ (80019c0 <HAL_ADC_MspInit+0x2c4>)
 800180e:	f043 0302 	orr.w	r3, r3, #2
 8001812:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001816:	4b6a      	ldr	r3, [pc, #424]	@ (80019c0 <HAL_ADC_MspInit+0x2c4>)
 8001818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800181c:	f003 0202 	and.w	r2, r3, #2
 8001820:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001824:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800182e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001832:	681b      	ldr	r3, [r3, #0]
    PC3     ------> ADC1_IN4
    PA4     ------> ADC1_IN9
    PA3     ------> ADC1_IN8
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ELVSS_ADC_Pin;
 8001834:	2308      	movs	r3, #8
 8001836:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800183a:	2303      	movs	r3, #3
 800183c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    HAL_GPIO_Init(ELVSS_ADC_GPIO_Port, &GPIO_InitStruct);
 8001846:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800184a:	4619      	mov	r1, r3
 800184c:	485d      	ldr	r0, [pc, #372]	@ (80019c4 <HAL_ADC_MspInit+0x2c8>)
 800184e:	f005 fe43 	bl	80074d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ELVDD_ADC_Pin|AVDD_ADC_Pin;
 8001852:	2318      	movs	r3, #24
 8001854:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001858:	2303      	movs	r3, #3
 800185a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8001868:	4619      	mov	r1, r3
 800186a:	4857      	ldr	r0, [pc, #348]	@ (80019c8 <HAL_ADC_MspInit+0x2cc>)
 800186c:	f005 fe34 	bl	80074d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ISYS_ADC_Pin;
 8001870:	2302      	movs	r3, #2
 8001872:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001876:	2303      	movs	r3, #3
 8001878:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    HAL_GPIO_Init(ISYS_ADC_GPIO_Port, &GPIO_InitStruct);
 8001882:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8001886:	4619      	mov	r1, r3
 8001888:	4850      	ldr	r0, [pc, #320]	@ (80019cc <HAL_ADC_MspInit+0x2d0>)
 800188a:	f005 fe25 	bl	80074d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800188e:	2321      	movs	r3, #33	@ 0x21
 8001890:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8001894:	2300      	movs	r3, #0
 8001896:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800189a:	2300      	movs	r3, #0
 800189c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80018b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018bc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcBurstLength = 1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.DestBurstLength = 1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 80018cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.Mode = DMA_NORMAL;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80018f2:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 80018f6:	4936      	ldr	r1, [pc, #216]	@ (80019d0 <HAL_ADC_MspInit+0x2d4>)
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 fed3 	bl	80056a4 <HAL_DMAEx_List_BuildNode>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_ADC_MspInit+0x20c>
    {
      Error_Handler();
 8001904:	f7ff feba 	bl	800167c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8001908:	4a31      	ldr	r2, [pc, #196]	@ (80019d0 <HAL_ADC_MspInit+0x2d4>)
 800190a:	2100      	movs	r1, #0
 800190c:	4831      	ldr	r0, [pc, #196]	@ (80019d4 <HAL_ADC_MspInit+0x2d8>)
 800190e:	f003 fef5 	bl	80056fc <HAL_DMAEx_List_InsertNode>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_ADC_MspInit+0x220>
    {
      Error_Handler();
 8001918:	f7ff feb0 	bl	800167c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 800191c:	482d      	ldr	r0, [pc, #180]	@ (80019d4 <HAL_ADC_MspInit+0x2d8>)
 800191e:	f003 ffb6 	bl	800588e <HAL_DMAEx_List_SetCircularMode>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 8001928:	f7ff fea8 	bl	800167c <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800192c:	4b2a      	ldr	r3, [pc, #168]	@ (80019d8 <HAL_ADC_MspInit+0x2dc>)
 800192e:	4a2b      	ldr	r2, [pc, #172]	@ (80019dc <HAL_ADC_MspInit+0x2e0>)
 8001930:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001932:	4b29      	ldr	r3, [pc, #164]	@ (80019d8 <HAL_ADC_MspInit+0x2dc>)
 8001934:	2200      	movs	r2, #0
 8001936:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001938:	4b27      	ldr	r3, [pc, #156]	@ (80019d8 <HAL_ADC_MspInit+0x2dc>)
 800193a:	2200      	movs	r2, #0
 800193c:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800193e:	4b26      	ldr	r3, [pc, #152]	@ (80019d8 <HAL_ADC_MspInit+0x2dc>)
 8001940:	2200      	movs	r2, #0
 8001942:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001944:	4b24      	ldr	r3, [pc, #144]	@ (80019d8 <HAL_ADC_MspInit+0x2dc>)
 8001946:	2200      	movs	r2, #0
 8001948:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800194a:	4b23      	ldr	r3, [pc, #140]	@ (80019d8 <HAL_ADC_MspInit+0x2dc>)
 800194c:	2281      	movs	r2, #129	@ 0x81
 800194e:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001950:	4821      	ldr	r0, [pc, #132]	@ (80019d8 <HAL_ADC_MspInit+0x2dc>)
 8001952:	f003 fce7 	bl	8005324 <HAL_DMAEx_List_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_ADC_MspInit+0x264>
    {
      Error_Handler();
 800195c:	f7ff fe8e 	bl	800167c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001960:	491c      	ldr	r1, [pc, #112]	@ (80019d4 <HAL_ADC_MspInit+0x2d8>)
 8001962:	481d      	ldr	r0, [pc, #116]	@ (80019d8 <HAL_ADC_MspInit+0x2dc>)
 8001964:	f003 fff4 	bl	8005950 <HAL_DMAEx_List_LinkQ>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_ADC_MspInit+0x276>
    {
      Error_Handler();
 800196e:	f7ff fe85 	bl	800167c <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001972:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001976:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a16      	ldr	r2, [pc, #88]	@ (80019d8 <HAL_ADC_MspInit+0x2dc>)
 800197e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001980:	4a15      	ldr	r2, [pc, #84]	@ (80019d8 <HAL_ADC_MspInit+0x2dc>)
 8001982:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001986:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 800198e:	2110      	movs	r1, #16
 8001990:	4811      	ldr	r0, [pc, #68]	@ (80019d8 <HAL_ADC_MspInit+0x2dc>)
 8001992:	f003 fc66 	bl	8005262 <HAL_DMA_ConfigChannelAttributes>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_ADC_MspInit+0x2a4>
    {
      Error_Handler();
 800199c:	f7ff fe6e 	bl	800167c <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2100      	movs	r1, #0
 80019a4:	2025      	movs	r0, #37	@ 0x25
 80019a6:	f003 f929 	bl	8004bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80019aa:	2025      	movs	r0, #37	@ 0x25
 80019ac:	f003 f940 	bl	8004c30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019b0:	bf00      	nop
 80019b2:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	42028000 	.word	0x42028000
 80019c0:	46020c00 	.word	0x46020c00
 80019c4:	42020800 	.word	0x42020800
 80019c8:	42020000 	.word	0x42020000
 80019cc:	42020400 	.word	0x42020400
 80019d0:	200000b4 	.word	0x200000b4
 80019d4:	200000d8 	.word	0x200000d8
 80019d8:	200000f0 	.word	0x200000f0
 80019dc:	40020050 	.word	0x40020050

080019e0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0b      	ldr	r2, [pc, #44]	@ (8001a1c <HAL_CRC_MspInit+0x3c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10e      	bne.n	8001a10 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a20 <HAL_CRC_MspInit+0x40>)
 80019f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019f8:	4a09      	ldr	r2, [pc, #36]	@ (8001a20 <HAL_CRC_MspInit+0x40>)
 80019fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019fe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001a02:	4b07      	ldr	r3, [pc, #28]	@ (8001a20 <HAL_CRC_MspInit+0x40>)
 8001a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40023000 	.word	0x40023000
 8001a20:	46020c00 	.word	0x46020c00

08001a24 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0c2      	sub	sp, #264	@ 0x108
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a32:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	22e0      	movs	r2, #224	@ 0xe0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f00c fabb 	bl	800dfc8 <memset>
  if(hdsi->Instance==DSI)
 8001a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a38      	ldr	r2, [pc, #224]	@ (8001b40 <HAL_DSI_MspInit+0x11c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d168      	bne.n	8001b36 <HAL_DSI_MspInit+0x112>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0304 	mov.w	r3, #4
 8001a6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_PLL3;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001a76:	2303      	movs	r3, #3
 8001a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.PLL3.PLL3N = 125;
 8001a7e:	237d      	movs	r3, #125	@ 0x7d
 8001a80:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInit.PLL3.PLL3P = 8;
 8001a82:	2308      	movs	r3, #8
 8001a84:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001a86:	2302      	movs	r3, #2
 8001a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001a8a:	2308      	movs	r3, #8
 8001a8c:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVP;
 8001a96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f007 fff3 	bl	8009a8c <HAL_RCCEx_PeriphCLKConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_DSI_MspInit+0x8c>
    {
      Error_Handler();
 8001aac:	f7ff fde6 	bl	800167c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001ab0:	4b24      	ldr	r3, [pc, #144]	@ (8001b44 <HAL_DSI_MspInit+0x120>)
 8001ab2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ab6:	4a23      	ldr	r2, [pc, #140]	@ (8001b44 <HAL_DSI_MspInit+0x120>)
 8001ab8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001abc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001ac0:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <HAL_DSI_MspInit+0x120>)
 8001ac2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ac6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	4b1d      	ldr	r3, [pc, #116]	@ (8001b44 <HAL_DSI_MspInit+0x120>)
 8001ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b44 <HAL_DSI_MspInit+0x120>)
 8001ad6:	f043 0302 	orr.w	r3, r3, #2
 8001ada:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ade:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <HAL_DSI_MspInit+0x120>)
 8001ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ae4:	f003 0202 	and.w	r2, r3, #2
 8001ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001aec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001af6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001afa:	681b      	ldr	r3, [r3, #0]
    DSI_CKN     ------> DSIHOST_CKN
    DSI_CKP     ------> DSIHOST_CKP
    DSI_D1N     ------> DSIHOST_D1N
    DSI_D1P     ------> DSIHOST_D1P
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001afc:	2380      	movs	r3, #128	@ 0x80
 8001afe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8001b14:	230b      	movs	r3, #11
 8001b16:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4809      	ldr	r0, [pc, #36]	@ (8001b48 <HAL_DSI_MspInit+0x124>)
 8001b22:	f005 fcd9 	bl	80074d8 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2089      	movs	r0, #137	@ 0x89
 8001b2c:	f003 f866 	bl	8004bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001b30:	2089      	movs	r0, #137	@ 0x89
 8001b32:	f003 f87d 	bl	8004c30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001b36:	bf00      	nop
 8001b38:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40016c00 	.word	0x40016c00
 8001b44:	46020c00 	.word	0x46020c00
 8001b48:	42020400 	.word	0x42020400

08001b4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b0c2      	sub	sp, #264	@ 0x108
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b5a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	22e0      	movs	r2, #224	@ 0xe0
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f00c fa27 	bl	800dfc8 <memset>
  if(hi2c->Instance==I2C5)
 8001b7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001b7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a2b      	ldr	r2, [pc, #172]	@ (8001c34 <HAL_I2C_MspInit+0xe8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d14d      	bne.n	8001c28 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8001b8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c5ClockSelection = RCC_I2C5CLKSOURCE_PCLK1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b9e:	f107 0310 	add.w	r3, r7, #16
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f007 ff72 	bl	8009a8c <HAL_RCCEx_PeriphCLKConfig>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001bae:	f7ff fd65 	bl	800167c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb2:	4b21      	ldr	r3, [pc, #132]	@ (8001c38 <HAL_I2C_MspInit+0xec>)
 8001bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c38 <HAL_I2C_MspInit+0xec>)
 8001bba:	f043 0308 	orr.w	r3, r3, #8
 8001bbe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c38 <HAL_I2C_MspInit+0xec>)
 8001bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PD0     ------> I2C5_SDA
    PD1     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd6:	2312      	movs	r3, #18
 8001bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8001be8:	2304      	movs	r3, #4
 8001bea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bee:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4811      	ldr	r0, [pc, #68]	@ (8001c3c <HAL_I2C_MspInit+0xf0>)
 8001bf6:	f005 fc6f 	bl	80074d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <HAL_I2C_MspInit+0xec>)
 8001bfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001c00:	4a0d      	ldr	r2, [pc, #52]	@ (8001c38 <HAL_I2C_MspInit+0xec>)
 8001c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c06:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <HAL_I2C_MspInit+0xec>)
 8001c0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001c10:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c18:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c22:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001c26:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }

}
 8001c28:	bf00      	nop
 8001c2a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40009800 	.word	0x40009800
 8001c38:	46020c00 	.word	0x46020c00
 8001c3c:	42020c00 	.word	0x42020c00

08001c40 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b0bc      	sub	sp, #240	@ 0xf0
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	22e0      	movs	r2, #224	@ 0xe0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f00c f9b9 	bl	800dfc8 <memset>
  if(hltdc->Instance==LTDC)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a22      	ldr	r2, [pc, #136]	@ (8001ce4 <HAL_LTDC_MspInit+0xa4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d13d      	bne.n	8001cdc <HAL_LTDC_MspInit+0x9c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0302 	mov.w	r3, #2
 8001c68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 8001c6c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001c70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8001c74:	2303      	movs	r3, #3
 8001c76:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLL2.PLL2M = 1;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLL2.PLL2N = 10;
 8001c7c:	230a      	movs	r3, #10
 8001c7e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2P = 2;
 8001c80:	2302      	movs	r3, #2
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLL2.PLL2Q = 2;
 8001c84:	2302      	movs	r3, #2
 8001c86:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLL2.PLL2R = 8;
 8001c88:	2308      	movs	r3, #8
 8001c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8001c8c:	230c      	movs	r3, #12
 8001c8e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8001c94:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001c98:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c9a:	f107 0310 	add.w	r3, r7, #16
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f007 fef4 	bl	8009a8c <HAL_RCCEx_PeriphCLKConfig>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8001caa:	f7ff fce7 	bl	800167c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001cae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <HAL_LTDC_MspInit+0xa8>)
 8001cb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce8 <HAL_LTDC_MspInit+0xa8>)
 8001cb6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001cba:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <HAL_LTDC_MspInit+0xa8>)
 8001cc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001cc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	2087      	movs	r0, #135	@ 0x87
 8001cd2:	f002 ff93 	bl	8004bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001cd6:	2087      	movs	r0, #135	@ 0x87
 8001cd8:	f002 ffaa 	bl	8004c30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001cdc:	bf00      	nop
 8001cde:	37f0      	adds	r7, #240	@ 0xf0
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40016800 	.word	0x40016800
 8001ce8:	46020c00 	.word	0x46020c00

08001cec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0bc      	sub	sp, #240	@ 0xf0
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	22e0      	movs	r2, #224	@ 0xe0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f00c f963 	bl	800dfc8 <memset>
  if(hrtc->Instance==RTC)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a1d      	ldr	r2, [pc, #116]	@ (8001d7c <HAL_RTC_MspInit+0x90>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d132      	bne.n	8001d72 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d0c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d20:	f107 0310 	add.w	r3, r7, #16
 8001d24:	4618      	mov	r0, r3
 8001d26:	f007 feb1 	bl	8009a8c <HAL_RCCEx_PeriphCLKConfig>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001d30:	f7ff fca4 	bl	800167c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d34:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <HAL_RTC_MspInit+0x94>)
 8001d36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d3a:	4a11      	ldr	r2, [pc, #68]	@ (8001d80 <HAL_RTC_MspInit+0x94>)
 8001d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001d44:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_RTC_MspInit+0x94>)
 8001d46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001d4a:	4a0d      	ldr	r2, [pc, #52]	@ (8001d80 <HAL_RTC_MspInit+0x94>)
 8001d4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d50:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001d54:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <HAL_RTC_MspInit+0x94>)
 8001d56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001d5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8001d62:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <HAL_RTC_MspInit+0x94>)
 8001d64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d68:	4a05      	ldr	r2, [pc, #20]	@ (8001d80 <HAL_RTC_MspInit+0x94>)
 8001d6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d6e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d72:	bf00      	nop
 8001d74:	37f0      	adds	r7, #240	@ 0xf0
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	46007800 	.word	0x46007800
 8001d80:	46020c00 	.word	0x46020c00

08001d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b0c2      	sub	sp, #264	@ 0x108
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d92:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da4:	f107 0310 	add.w	r3, r7, #16
 8001da8:	22e0      	movs	r2, #224	@ 0xe0
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f00c f90b 	bl	800dfc8 <memset>
  if(huart->Instance==UART4)
 8001db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001db6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8001e68 <HAL_UART_MspInit+0xe4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d14c      	bne.n	8001e5e <HAL_UART_MspInit+0xda>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001dc4:	f04f 0208 	mov.w	r2, #8
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f007 fe57 	bl	8009a8c <HAL_RCCEx_PeriphCLKConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8001de4:	f7ff fc4a 	bl	800167c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001de8:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <HAL_UART_MspInit+0xe8>)
 8001dea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001dee:	4a1f      	ldr	r2, [pc, #124]	@ (8001e6c <HAL_UART_MspInit+0xe8>)
 8001df0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001df4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001df8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e6c <HAL_UART_MspInit+0xe8>)
 8001dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001dfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <HAL_UART_MspInit+0xe8>)
 8001e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e0c:	4a17      	ldr	r2, [pc, #92]	@ (8001e6c <HAL_UART_MspInit+0xe8>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <HAL_UART_MspInit+0xe8>)
 8001e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e1c:	f003 0201 	and.w	r2, r3, #1
 8001e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e24:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e2e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e32:	681b      	ldr	r3, [r3, #0]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e34:	2303      	movs	r3, #3
 8001e36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001e56:	4619      	mov	r1, r3
 8001e58:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <HAL_UART_MspInit+0xec>)
 8001e5a:	f005 fb3d 	bl	80074d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001e5e:	bf00      	nop
 8001e60:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40004c00 	.word	0x40004c00
 8001e6c:	46020c00 	.word	0x46020c00
 8001e70:	42020000 	.word	0x42020000

08001e74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08e      	sub	sp, #56	@ 0x38
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e84:	4b2e      	ldr	r3, [pc, #184]	@ (8001f40 <HAL_InitTick+0xcc>)
 8001e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e8a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f40 <HAL_InitTick+0xcc>)
 8001e8c:	f043 0310 	orr.w	r3, r3, #16
 8001e90:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001e94:	4b2a      	ldr	r3, [pc, #168]	@ (8001f40 <HAL_InitTick+0xcc>)
 8001e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ea2:	f107 0210 	add.w	r2, r7, #16
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f007 fd03 	bl	80098b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001eb2:	f007 fcc5 	bl	8009840 <HAL_RCC_GetPCLK1Freq>
 8001eb6:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eba:	4a22      	ldr	r2, [pc, #136]	@ (8001f44 <HAL_InitTick+0xd0>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	0c9b      	lsrs	r3, r3, #18
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ec6:	4b20      	ldr	r3, [pc, #128]	@ (8001f48 <HAL_InitTick+0xd4>)
 8001ec8:	4a20      	ldr	r2, [pc, #128]	@ (8001f4c <HAL_InitTick+0xd8>)
 8001eca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f48 <HAL_InitTick+0xd4>)
 8001ece:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ed2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f48 <HAL_InitTick+0xd4>)
 8001ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001eda:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <HAL_InitTick+0xd4>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee0:	4b19      	ldr	r3, [pc, #100]	@ (8001f48 <HAL_InitTick+0xd4>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001ee6:	4818      	ldr	r0, [pc, #96]	@ (8001f48 <HAL_InitTick+0xd4>)
 8001ee8:	f00a ff88 	bl	800cdfc <HAL_TIM_Base_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001ef2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d118      	bne.n	8001f2c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001efa:	4813      	ldr	r0, [pc, #76]	@ (8001f48 <HAL_InitTick+0xd4>)
 8001efc:	f00a ffe0 	bl	800cec0 <HAL_TIM_Base_Start_IT>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001f06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10e      	bne.n	8001f2c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b0f      	cmp	r3, #15
 8001f12:	d808      	bhi.n	8001f26 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001f14:	2200      	movs	r2, #0
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	2031      	movs	r0, #49	@ 0x31
 8001f1a:	f002 fe6f 	bl	8004bfc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f50 <HAL_InitTick+0xdc>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	e002      	b.n	8001f2c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001f2c:	2031      	movs	r0, #49	@ 0x31
 8001f2e:	f002 fe7f 	bl	8004c30 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001f32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3738      	adds	r7, #56	@ 0x38
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	46020c00 	.word	0x46020c00
 8001f44:	431bde83 	.word	0x431bde83
 8001f48:	200a9374 	.word	0x200a9374
 8001f4c:	40001000 	.word	0x40001000
 8001f50:	20000004 	.word	0x20000004

08001f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001f58:	f007 fcf6 	bl	8009948 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <NMI_Handler+0x8>

08001f60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <HardFault_Handler+0x4>

08001f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <MemManage_Handler+0x4>

08001f70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <BusFault_Handler+0x4>

08001f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <UsageFault_Handler+0x4>

08001f80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC non-secure global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <GPDMA1_Channel0_IRQHandler+0x10>)
 8001fce:	f002 ffe7 	bl	8004fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200000f0 	.word	0x200000f0

08001fdc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fe0:	4802      	ldr	r0, [pc, #8]	@ (8001fec <ADC1_2_IRQHandler+0x10>)
 8001fe2:	f001 f8ef 	bl	80031c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000028 	.word	0x20000028

08001ff0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ff4:	4802      	ldr	r0, [pc, #8]	@ (8002000 <TIM6_IRQHandler+0x10>)
 8001ff6:	f00b f803 	bl	800d000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200a9374 	.word	0x200a9374

08002004 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002008:	4802      	ldr	r0, [pc, #8]	@ (8002014 <LTDC_IRQHandler+0x10>)
 800200a:	f005 fe9f 	bl	8007d4c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000204 	.word	0x20000204

08002018 <DSI_IRQHandler>:

/**
  * @brief This function handles DSIHOST global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 800201c:	4802      	ldr	r0, [pc, #8]	@ (8002028 <DSI_IRQHandler+0x10>)
 800201e:	f004 fd6f 	bl	8006b00 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000018c 	.word	0x2000018c

0800202c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002030:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <SystemInit+0x68>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002036:	4a17      	ldr	r2, [pc, #92]	@ (8002094 <SystemInit+0x68>)
 8002038:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800203c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002040:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <SystemInit+0x6c>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002046:	4b14      	ldr	r3, [pc, #80]	@ (8002098 <SystemInit+0x6c>)
 8002048:	2200      	movs	r2, #0
 800204a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800204c:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <SystemInit+0x6c>)
 800204e:	2200      	movs	r2, #0
 8002050:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002052:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <SystemInit+0x6c>)
 8002054:	2200      	movs	r2, #0
 8002056:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002058:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <SystemInit+0x6c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0e      	ldr	r2, [pc, #56]	@ (8002098 <SystemInit+0x6c>)
 800205e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002062:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002066:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002068:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <SystemInit+0x6c>)
 800206a:	2200      	movs	r2, #0
 800206c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800206e:	4b0a      	ldr	r3, [pc, #40]	@ (8002098 <SystemInit+0x6c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a09      	ldr	r2, [pc, #36]	@ (8002098 <SystemInit+0x6c>)
 8002074:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002078:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800207a:	4b07      	ldr	r3, [pc, #28]	@ (8002098 <SystemInit+0x6c>)
 800207c:	2200      	movs	r2, #0
 800207e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002080:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <SystemInit+0x68>)
 8002082:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002086:	609a      	str	r2, [r3, #8]
  #endif
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000ed00 	.word	0xe000ed00
 8002098:	46020c00 	.word	0x46020c00

0800209c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800209c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020d4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80020a0:	f7ff ffc4 	bl	800202c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020a6:	e003      	b.n	80020b0 <LoopCopyDataInit>

080020a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020a8:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020ae:	3104      	adds	r1, #4

080020b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020b0:	480a      	ldr	r0, [pc, #40]	@ (80020dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80020b2:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80020b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020b8:	d3f6      	bcc.n	80020a8 <CopyDataInit>
	ldr	r2, =_sbss
 80020ba:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80020bc:	e002      	b.n	80020c4 <LoopFillZerobss>

080020be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020c0:	f842 3b04 	str.w	r3, [r2], #4

080020c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020c4:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <LoopForever+0x16>)
	cmp	r2, r3
 80020c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020c8:	d3f9      	bcc.n	80020be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ca:	f00b ff85 	bl	800dfd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020ce:	f7fe fa7d 	bl	80005cc <main>

080020d2 <LoopForever>:

LoopForever:
    b LoopForever
 80020d2:	e7fe      	b.n	80020d2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80020d4:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 80020d8:	082b2158 	.word	0x082b2158
	ldr	r0, =_sdata
 80020dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80020e0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80020e4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80020e8:	200a93c4 	.word	0x200a93c4

080020ec <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020ec:	e7fe      	b.n	80020ec <ADC4_IRQHandler>
	...

080020f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f4:	4b12      	ldr	r3, [pc, #72]	@ (8002140 <HAL_Init+0x50>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a11      	ldr	r2, [pc, #68]	@ (8002140 <HAL_Init+0x50>)
 80020fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002100:	2003      	movs	r0, #3
 8002102:	f002 fd70 	bl	8004be6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002106:	f007 fa7f 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800210a:	4602      	mov	r2, r0
 800210c:	4b0d      	ldr	r3, [pc, #52]	@ (8002144 <HAL_Init+0x54>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	490c      	ldr	r1, [pc, #48]	@ (8002148 <HAL_Init+0x58>)
 8002116:	5ccb      	ldrb	r3, [r1, r3]
 8002118:	fa22 f303 	lsr.w	r3, r2, r3
 800211c:	4a0b      	ldr	r2, [pc, #44]	@ (800214c <HAL_Init+0x5c>)
 800211e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002120:	2004      	movs	r0, #4
 8002122:	f002 fd93 	bl	8004c4c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002126:	200f      	movs	r0, #15
 8002128:	f7ff fea4 	bl	8001e74 <HAL_InitTick>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e002      	b.n	800213c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002136:	f7ff faa7 	bl	8001688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40022000 	.word	0x40022000
 8002144:	46020c00 	.word	0x46020c00
 8002148:	082b2048 	.word	0x082b2048
 800214c:	20000000 	.word	0x20000000

08002150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002154:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <HAL_IncTick+0x20>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <HAL_IncTick+0x24>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4413      	add	r3, r2
 8002160:	4a04      	ldr	r2, [pc, #16]	@ (8002174 <HAL_IncTick+0x24>)
 8002162:	6013      	str	r3, [r2, #0]
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000008 	.word	0x20000008
 8002174:	200a93c0 	.word	0x200a93c0

08002178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return uwTick;
 800217c:	4b03      	ldr	r3, [pc, #12]	@ (800218c <HAL_GetTick+0x14>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	200a93c0 	.word	0x200a93c0

08002190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff ffee 	bl	8002178 <HAL_GetTick>
 800219c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d005      	beq.n	80021b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021aa:	4b0a      	ldr	r3, [pc, #40]	@ (80021d4 <HAL_Delay+0x44>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021b6:	bf00      	nop
 80021b8:	f7ff ffde 	bl	8002178 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d8f7      	bhi.n	80021b8 <HAL_Delay+0x28>
  {
  }
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000008 	.word	0x20000008

080021d8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT1 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021e8:	4904      	ldr	r1, [pc, #16]	@ (80021fc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	600b      	str	r3, [r1, #0]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	46007400 	.word	0x46007400

08002200 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f023 0202 	bic.w	r2, r3, #2
 8002210:	4904      	ldr	r1, [pc, #16]	@ (8002224 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	46007400 	.word	0x46007400

08002228 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800222e:	4b0f      	ldr	r3, [pc, #60]	@ (800226c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a0e      	ldr	r2, [pc, #56]	@ (800226c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800223a:	f7ff ff9d 	bl	8002178 <HAL_GetTick>
 800223e:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8002240:	e008      	b.n	8002254 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8002242:	f7ff ff99 	bl	8002178 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b0a      	cmp	r3, #10
 800224e:	d901      	bls.n	8002254 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e006      	b.n	8002262 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8002254:	4b05      	ldr	r3, [pc, #20]	@ (800226c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	46007400 	.word	0x46007400

08002270 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	609a      	str	r2, [r3, #8]
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	609a      	str	r2, [r3, #8]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <LL_ADC_SetResolution+0x3c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d104      	bne.n	80022f8 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f023 020c 	bic.w	r2, r3, #12
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	60da      	str	r2, [r3, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	46021000 	.word	0x46021000

08002318 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	3360      	adds	r3, #96	@ 0x60
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	430b      	orrs	r3, r1
 8002348:	431a      	orrs	r2, r3
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 800234e:	bf00      	nop
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800235a:	b480      	push	{r7}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3360      	adds	r3, #96	@ 0x60
 8002368:	461a      	mov	r2, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002386:	b480      	push	{r7}
 8002388:	b087      	sub	sp, #28
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3360      	adds	r3, #96	@ 0x60
 8002396:	461a      	mov	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	601a      	str	r2, [r3, #0]
}
 80023b0:	bf00      	nop
 80023b2:	371c      	adds	r7, #28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3360      	adds	r3, #96	@ 0x60
 80023cc:	461a      	mov	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	431a      	orrs	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	601a      	str	r2, [r3, #0]
}
 80023e6:	bf00      	nop
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b087      	sub	sp, #28
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3360      	adds	r3, #96	@ 0x60
 8002402:	461a      	mov	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	431a      	orrs	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	601a      	str	r2, [r3, #0]
}
 800241c:	bf00      	nop
 800241e:	371c      	adds	r7, #28
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002436:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800243a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800244a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	2a00      	cmp	r2, #0
 8002452:	d002      	beq.n	800245a <LL_ADC_SetGainCompensation+0x32>
 8002454:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002458:	e000      	b.n	800245c <LL_ADC_SetGainCompensation+0x34>
 800245a:	2200      	movs	r2, #0
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800246e:	b480      	push	{r7}
 8002470:	b085      	sub	sp, #20
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2107      	movs	r1, #7
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	401a      	ands	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	431a      	orrs	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	@ 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002590 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d020      	beq.n	800252a <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	3330      	adds	r3, #48	@ 0x30
 80024ec:	461a      	mov	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	0a1b      	lsrs	r3, r3, #8
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	4413      	add	r3, r2
 80024fa:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	211f      	movs	r1, #31
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	401a      	ands	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	0e9b      	lsrs	r3, r3, #26
 8002514:	f003 011f 	and.w	r1, r3, #31
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	431a      	orrs	r2, r3
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002528:	e02b      	b.n	8002582 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f003 031f 	and.w	r3, r3, #31
 8002534:	210f      	movs	r1, #15
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	401a      	ands	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d104      	bne.n	8002552 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	0e9b      	lsrs	r3, r3, #26
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	e010      	b.n	8002574 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	613b      	str	r3, [r7, #16]
  return result;
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002568:	2320      	movs	r3, #32
 800256a:	e003      	b.n	8002574 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	f001 011f 	and.w	r1, r1, #31
 800257a:	408b      	lsls	r3, r1
 800257c:	431a      	orrs	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002582:	bf00      	nop
 8002584:	3724      	adds	r7, #36	@ 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	46021000 	.word	0x46021000

08002594 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d107      	bne.n	80025b8 <LL_ADC_REG_SetSequencerChAdd+0x24>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	0e9b      	lsrs	r3, r3, #26
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	2201      	movs	r2, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	e015      	b.n	80025e4 <LL_ADC_REG_SetSequencerChAdd+0x50>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	60fb      	str	r3, [r7, #12]
  return result;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 80025ce:	2320      	movs	r3, #32
 80025d0:	e003      	b.n	80025da <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	fab3 f383 	clz	r3, r3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	2201      	movs	r2, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025ee:	bf00      	nop
 80025f0:	371c      	adds	r7, #28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	0e9b      	lsrs	r3, r3, #26
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	2101      	movs	r1, #1
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	401a      	ands	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f003 0303 	and.w	r3, r3, #3
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002652:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800266c:	b480      	push	{r7}
 800266e:	b08b      	sub	sp, #44	@ 0x2c
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4a2d      	ldr	r2, [pc, #180]	@ (8002730 <LL_ADC_SetChannelSamplingTime+0xc4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d042      	beq.n	8002706 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d104      	bne.n	8002694 <LL_ADC_SetChannelSamplingTime+0x28>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	0e9b      	lsrs	r3, r3, #26
 800268e:	f003 021f 	and.w	r2, r3, #31
 8002692:	e011      	b.n	80026b8 <LL_ADC_SetChannelSamplingTime+0x4c>
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	617b      	str	r3, [r7, #20]
  return result;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80026aa:	2320      	movs	r3, #32
 80026ac:	e003      	b.n	80026b6 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	0e5b      	lsrs	r3, r3, #25
 80026bc:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80026c0:	460b      	mov	r3, r1
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	1ad2      	subs	r2, r2, r3
 80026ca:	4613      	mov	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4413      	add	r3, r2
 80026d0:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3314      	adds	r3, #20
 80026d6:	461a      	mov	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	0e5b      	lsrs	r3, r3, #25
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	4413      	add	r3, r2
 80026e4:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	2107      	movs	r1, #7
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	401a      	ands	r2, r3
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	431a      	orrs	r2, r3
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8002704:	e00e      	b.n	8002724 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	43db      	mvns	r3, r3
 8002710:	401a      	ands	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	0219      	lsls	r1, r3, #8
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	400b      	ands	r3, r1
 800271a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800271e:	431a      	orrs	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	615a      	str	r2, [r3, #20]
}
 8002724:	bf00      	nop
 8002726:	372c      	adds	r7, #44	@ 0x2c
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	46021000 	.word	0x46021000

08002734 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800274c:	43db      	mvns	r3, r3
 800274e:	401a      	ands	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f003 0318 	and.w	r3, r3, #24
 8002756:	4908      	ldr	r1, [pc, #32]	@ (8002778 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002758:	40d9      	lsrs	r1, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	400b      	ands	r3, r1
 800275e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002762:	431a      	orrs	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	000fffff 	.word	0x000fffff

0800277c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 031f 	and.w	r3, r3, #31
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80027c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6093      	str	r3, [r2, #8]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027ec:	d101      	bne.n	80027f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002810:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002814:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	609a      	str	r2, [r3, #8]
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002838:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800283c:	d101      	bne.n	8002842 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002860:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002864:	f043 0201 	orr.w	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	609a      	str	r2, [r3, #8]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002888:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800288c:	f043 0202 	orr.w	r2, r3, #2
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	609a      	str	r2, [r3, #8]
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <LL_ADC_IsEnabled+0x18>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <LL_ADC_IsEnabled+0x1a>
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d101      	bne.n	80028de <LL_ADC_IsDisableOngoing+0x18>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <LL_ADC_IsDisableOngoing+0x1a>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002900:	f043 0204 	orr.w	r2, r3, #4
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	609a      	str	r2, [r3, #8]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b04      	cmp	r3, #4
 8002926:	d101      	bne.n	800292c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b08      	cmp	r3, #8
 800294c:	d101      	bne.n	8002952 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b08b      	sub	sp, #44	@ 0x2c
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e2ce      	b.n	8002f1e <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a95      	ldr	r2, [pc, #596]	@ (8002be4 <HAL_ADC_Init+0x284>)
 800298e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002994:	2b00      	cmp	r3, #0
 8002996:	d109      	bne.n	80029ac <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7fe feaf 	bl	80016fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff11 	bl	80027d8 <LL_ADC_IsDeepPowerDownEnabled>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d004      	beq.n	80029c6 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fef7 	bl	80027b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ff2c 	bl	8002828 <LL_ADC_IsInternalRegulatorEnabled>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d115      	bne.n	8002a02 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ff10 	bl	8002800 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029e0:	4b81      	ldr	r3, [pc, #516]	@ (8002be8 <HAL_ADC_Init+0x288>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	4a81      	ldr	r2, [pc, #516]	@ (8002bec <HAL_ADC_Init+0x28c>)
 80029e8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ec:	099b      	lsrs	r3, r3, #6
 80029ee:	3301      	adds	r3, #1
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029f4:	e002      	b.n	80029fc <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f9      	bne.n	80029f6 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff ff0e 	bl	8002828 <LL_ADC_IsInternalRegulatorEnabled>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10e      	bne.n	8002a30 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a16:	f043 0210 	orr.w	r2, r3, #16
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a22:	f043 0201 	orr.w	r2, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff6d 	bl	8002914 <LL_ADC_REG_IsConversionOngoing>
 8002a3a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f040 825f 	bne.w	8002f08 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f040 825b 	bne.w	8002f08 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a56:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a5a:	f043 0202 	orr.w	r2, r3, #2
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ff1a 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d14f      	bne.n	8002b12 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a5b      	ldr	r2, [pc, #364]	@ (8002be4 <HAL_ADC_Init+0x284>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d037      	beq.n	8002aec <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a5b      	ldr	r2, [pc, #364]	@ (8002bf0 <HAL_ADC_Init+0x290>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d004      	beq.n	8002a90 <HAL_ADC_Init+0x130>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a5a      	ldr	r2, [pc, #360]	@ (8002bf4 <HAL_ADC_Init+0x294>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d10e      	bne.n	8002aae <HAL_ADC_Init+0x14e>
 8002a90:	4857      	ldr	r0, [pc, #348]	@ (8002bf0 <HAL_ADC_Init+0x290>)
 8002a92:	f7ff ff05 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a96:	4604      	mov	r4, r0
 8002a98:	4856      	ldr	r0, [pc, #344]	@ (8002bf4 <HAL_ADC_Init+0x294>)
 8002a9a:	f7ff ff01 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4323      	orrs	r3, r4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	bf0c      	ite	eq
 8002aa6:	2301      	moveq	r3, #1
 8002aa8:	2300      	movne	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	e008      	b.n	8002ac0 <HAL_ADC_Init+0x160>
 8002aae:	484d      	ldr	r0, [pc, #308]	@ (8002be4 <HAL_ADC_Init+0x284>)
 8002ab0:	f7ff fef6 	bl	80028a0 <LL_ADC_IsEnabled>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	bf0c      	ite	eq
 8002aba:	2301      	moveq	r3, #1
 8002abc:	2300      	movne	r3, #0
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d026      	beq.n	8002b12 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a49      	ldr	r2, [pc, #292]	@ (8002bf0 <HAL_ADC_Init+0x290>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d004      	beq.n	8002ad8 <HAL_ADC_Init+0x178>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a48      	ldr	r2, [pc, #288]	@ (8002bf4 <HAL_ADC_Init+0x294>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d101      	bne.n	8002adc <HAL_ADC_Init+0x17c>
 8002ad8:	4a47      	ldr	r2, [pc, #284]	@ (8002bf8 <HAL_ADC_Init+0x298>)
 8002ada:	e000      	b.n	8002ade <HAL_ADC_Init+0x17e>
 8002adc:	4a47      	ldr	r2, [pc, #284]	@ (8002bfc <HAL_ADC_Init+0x29c>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	f7ff fbc3 	bl	8002270 <LL_ADC_SetCommonClock>
 8002aea:	e012      	b.n	8002b12 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4619      	mov	r1, r3
 8002af6:	4610      	mov	r0, r2
 8002af8:	f7ff fbee 	bl	80022d8 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8002afc:	4b3f      	ldr	r3, [pc, #252]	@ (8002bfc <HAL_ADC_Init+0x29c>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002b0c:	493b      	ldr	r1, [pc, #236]	@ (8002bfc <HAL_ADC_Init+0x29c>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a33      	ldr	r2, [pc, #204]	@ (8002be4 <HAL_ADC_Init+0x284>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d010      	beq.n	8002b3e <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b22:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002b28:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8002b2e:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002b36:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	623b      	str	r3, [r7, #32]
 8002b3c:	e035      	b.n	8002baa <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	7f1b      	ldrb	r3, [r3, #28]
 8002b42:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b4a:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b4c:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b52:	2a00      	cmp	r2, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_ADC_Init+0x1fc>
 8002b56:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b5a:	e000      	b.n	8002b5e <HAL_ADC_Init+0x1fe>
 8002b5c:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002b5e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002b64:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	da04      	bge.n	8002b78 <HAL_ADC_Init+0x218>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b76:	e001      	b.n	8002b7c <HAL_ADC_Init+0x21c>
 8002b78:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8002b7c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	491b      	ldr	r1, [pc, #108]	@ (8002bf0 <HAL_ADC_Init+0x290>)
 8002b84:	428b      	cmp	r3, r1
 8002b86:	d004      	beq.n	8002b92 <HAL_ADC_Init+0x232>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4919      	ldr	r1, [pc, #100]	@ (8002bf4 <HAL_ADC_Init+0x294>)
 8002b8e:	428b      	cmp	r3, r1
 8002b90:	d103      	bne.n	8002b9a <HAL_ADC_Init+0x23a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b98:	e003      	b.n	8002ba2 <HAL_ADC_Init+0x242>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ba0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002ba2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ba4:	6a3a      	ldr	r2, [r7, #32]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d131      	bne.n	8002c18 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002be4 <HAL_ADC_Init+0x284>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d007      	beq.n	8002bce <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	045b      	lsls	r3, r3, #17
 8002bc6:	6a3a      	ldr	r2, [r7, #32]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	623b      	str	r3, [r7, #32]
 8002bcc:	e024      	b.n	8002c18 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d113      	bne.n	8002c00 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bde:	623b      	str	r3, [r7, #32]
 8002be0:	e01a      	b.n	8002c18 <HAL_ADC_Init+0x2b8>
 8002be2:	bf00      	nop
 8002be4:	46021000 	.word	0x46021000
 8002be8:	20000000 	.word	0x20000000
 8002bec:	053e2d63 	.word	0x053e2d63
 8002bf0:	42028000 	.word	0x42028000
 8002bf4:	42028100 	.word	0x42028100
 8002bf8:	42028300 	.word	0x42028300
 8002bfc:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c04:	f043 0220 	orr.w	r2, r3, #32
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a75      	ldr	r2, [pc, #468]	@ (8002df4 <HAL_ADC_Init+0x494>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d018      	beq.n	8002c54 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c2e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c36:	4313      	orrs	r3, r2
 8002c38:	6a3a      	ldr	r2, [r7, #32]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	4b6c      	ldr	r3, [pc, #432]	@ (8002df8 <HAL_ADC_Init+0x498>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	6a39      	ldr	r1, [r7, #32]
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	60d3      	str	r3, [r2, #12]
 8002c52:	e031      	b.n	8002cb8 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d009      	beq.n	8002c70 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c60:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	6a3a      	ldr	r2, [r7, #32]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	4b61      	ldr	r3, [pc, #388]	@ (8002dfc <HAL_ADC_Init+0x49c>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	6a39      	ldr	r1, [r7, #32]
 8002c80:	430b      	orrs	r3, r1
 8002c82:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1a      	ldr	r2, [r3, #32]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a4d      	ldr	r2, [pc, #308]	@ (8002df4 <HAL_ADC_Init+0x494>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	f000 80a4 	beq.w	8002e0c <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fe23 	bl	8002914 <LL_ADC_REG_IsConversionOngoing>
 8002cce:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fe30 	bl	800293a <LL_ADC_INJ_IsConversionOngoing>
 8002cda:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d166      	bne.n	8002db0 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d163      	bne.n	8002db0 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	7f1b      	ldrb	r3, [r3, #28]
 8002cec:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4943      	ldr	r1, [pc, #268]	@ (8002e00 <HAL_ADC_Init+0x4a0>)
 8002cf4:	428b      	cmp	r3, r1
 8002cf6:	d004      	beq.n	8002d02 <HAL_ADC_Init+0x3a2>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4941      	ldr	r1, [pc, #260]	@ (8002e04 <HAL_ADC_Init+0x4a4>)
 8002cfe:	428b      	cmp	r3, r1
 8002d00:	d102      	bne.n	8002d08 <HAL_ADC_Init+0x3a8>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d06:	e002      	b.n	8002d0e <HAL_ADC_Init+0x3ae>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0c:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d1c:	f023 0303 	bic.w	r3, r3, #3
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	6a39      	ldr	r1, [r7, #32]
 8002d26:	430b      	orrs	r3, r1
 8002d28:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	f7ff fb73 	bl	8002428 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d11e      	bne.n	8002d8a <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d50:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	4b2b      	ldr	r3, [pc, #172]	@ (8002e08 <HAL_ADC_Init+0x4a8>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002d60:	0411      	lsls	r1, r2, #16
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d66:	4311      	orrs	r1, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8002d6c:	4311      	orrs	r1, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002d72:	4311      	orrs	r1, r2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d78:	0892      	lsrs	r2, r2, #2
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	611a      	str	r2, [r3, #16]
 8002d88:	e007      	b.n	8002d9a <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d10c      	bne.n	8002dd2 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	f023 010f 	bic.w	r1, r3, #15
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc6:	1e5a      	subs	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dd0:	e007      	b.n	8002de2 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 020f 	bic.w	r2, r2, #15
 8002de0:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002de6:	f023 0303 	bic.w	r3, r3, #3
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002df2:	e092      	b.n	8002f1a <HAL_ADC_Init+0x5ba>
 8002df4:	46021000 	.word	0x46021000
 8002df8:	fff0c013 	.word	0xfff0c013
 8002dfc:	ffde800d 	.word	0xffde800d
 8002e00:	42028000 	.word	0x42028000
 8002e04:	42028100 	.word	0x42028100
 8002e08:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d111      	bne.n	8002e3a <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002e1e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002e24:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002e2a:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	4b39      	ldr	r3, [pc, #228]	@ (8002f28 <HAL_ADC_Init+0x5c8>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	69f9      	ldr	r1, [r7, #28]
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e56:	461a      	mov	r2, r3
 8002e58:	2100      	movs	r1, #0
 8002e5a:	f7ff fb08 	bl	800246e <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e66:	461a      	mov	r2, r3
 8002e68:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8002e6c:	f7ff faff 	bl	800246e <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d108      	bne.n	8002e8a <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f062 020f 	orn	r2, r2, #15
 8002e86:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e88:	e018      	b.n	8002ebc <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e92:	d113      	bne.n	8002ebc <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	f003 031c 	and.w	r3, r3, #28
 8002ea6:	f06f 020f 	mvn.w	r2, #15
 8002eaa:	fa02 f103 	lsl.w	r1, r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f2c <HAL_ADC_Init+0x5cc>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	6a3a      	ldr	r2, [r7, #32]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d10b      	bne.n	8002ee4 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ed6:	f023 0303 	bic.w	r3, r3, #3
 8002eda:	f043 0201 	orr.w	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002ee2:	e01a      	b.n	8002f1a <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ee8:	f023 0312 	bic.w	r3, r3, #18
 8002eec:	f043 0210 	orr.w	r2, r3, #16
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ef8:	f043 0201 	orr.w	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002f06:	e008      	b.n	8002f1a <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f0c:	f043 0210 	orr.w	r2, r3, #16
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	372c      	adds	r7, #44	@ 0x2c
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd90      	pop	{r4, r7, pc}
 8002f26:	bf00      	nop
 8002f28:	f7fffc02 	.word	0xf7fffc02
 8002f2c:	833ffff3 	.word	0x833ffff3

08002f30 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b0a2      	sub	sp, #136	@ 0x88
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a98      	ldr	r2, [pc, #608]	@ (80031a4 <HAL_ADC_Start_DMA+0x274>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d004      	beq.n	8002f50 <HAL_ADC_Start_DMA+0x20>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a97      	ldr	r2, [pc, #604]	@ (80031a8 <HAL_ADC_Start_DMA+0x278>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d101      	bne.n	8002f54 <HAL_ADC_Start_DMA+0x24>
 8002f50:	4b96      	ldr	r3, [pc, #600]	@ (80031ac <HAL_ADC_Start_DMA+0x27c>)
 8002f52:	e000      	b.n	8002f56 <HAL_ADC_Start_DMA+0x26>
 8002f54:	4b96      	ldr	r3, [pc, #600]	@ (80031b0 <HAL_ADC_Start_DMA+0x280>)
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fc10 	bl	800277c <LL_ADC_GetMultimode>
 8002f5c:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fcd6 	bl	8002914 <LL_ADC_REG_IsConversionOngoing>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f040 8111 	bne.w	8003192 <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_ADC_Start_DMA+0x4e>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e10e      	b.n	800319c <HAL_ADC_Start_DMA+0x26c>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d006      	beq.n	8002f9a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d003      	beq.n	8002f9a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f94:	2b09      	cmp	r3, #9
 8002f96:	f040 80f4 	bne.w	8003182 <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f001 fa2c 	bl	80043f8 <ADC_Enable>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002fa6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f040 80e4 	bne.w	8003178 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fb4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002fb8:	f023 0301 	bic.w	r3, r3, #1
 8002fbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a7a      	ldr	r2, [pc, #488]	@ (80031b4 <HAL_ADC_Start_DMA+0x284>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d026      	beq.n	800301c <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a75      	ldr	r2, [pc, #468]	@ (80031a8 <HAL_ADC_Start_DMA+0x278>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d002      	beq.n	8002fde <HAL_ADC_Start_DMA+0xae>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	e000      	b.n	8002fe0 <HAL_ADC_Start_DMA+0xb0>
 8002fde:	4b71      	ldr	r3, [pc, #452]	@ (80031a4 <HAL_ADC_Start_DMA+0x274>)
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d002      	beq.n	8002fee <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fe8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d105      	bne.n	8002ffa <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ff2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ffe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d006      	beq.n	8003014 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800300a:	f023 0206 	bic.w	r2, r3, #6
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003012:	e006      	b.n	8003022 <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	67da      	str	r2, [r3, #124]	@ 0x7c
 800301a:	e002      	b.n	8003022 <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003026:	4a64      	ldr	r2, [pc, #400]	@ (80031b8 <HAL_ADC_Start_DMA+0x288>)
 8003028:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302e:	4a63      	ldr	r2, [pc, #396]	@ (80031bc <HAL_ADC_Start_DMA+0x28c>)
 8003030:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003036:	4a62      	ldr	r2, [pc, #392]	@ (80031c0 <HAL_ADC_Start_DMA+0x290>)
 8003038:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	221c      	movs	r2, #28
 8003040:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0210 	orr.w	r2, r2, #16
 8003058:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a55      	ldr	r2, [pc, #340]	@ (80031b4 <HAL_ADC_Start_DMA+0x284>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d107      	bne.n	8003074 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800307a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307e:	2b00      	cmp	r3, #0
 8003080:	d04f      	beq.n	8003122 <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003086:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003088:	2b00      	cmp	r3, #0
 800308a:	d046      	beq.n	800311a <HAL_ADC_Start_DMA+0x1ea>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d040      	beq.n	800311a <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	f107 0310 	add.w	r3, r7, #16
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f002 fb12 	bl	80056d0 <HAL_DMAEx_List_GetNodeConfig>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e072      	b.n	800319c <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80030b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d104      	bne.n	80030c6 <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80030c4:	e00a      	b.n	80030dc <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80030c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d104      	bne.n	80030d6 <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80030d4:	e002      	b.n	80030dc <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80030e8:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310c:	4618      	mov	r0, r3
 800310e:	f002 fa35 	bl	800557c <HAL_DMAEx_List_Start_IT>
 8003112:	4603      	mov	r3, r0
 8003114:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003118:	e028      	b.n	800316c <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003120:	e024      	b.n	800316c <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	2b02      	cmp	r3, #2
 800312a:	d104      	bne.n	8003136 <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003134:	e00c      	b.n	8003150 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d104      	bne.n	800314a <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003148:	e002      	b.n	8003150 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3340      	adds	r3, #64	@ 0x40
 800315a:	4619      	mov	r1, r3
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003162:	f001 febd 	bl	8004ee0 <HAL_DMA_Start_IT>
 8003166:	4603      	mov	r3, r0
 8003168:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fbbb 	bl	80028ec <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003176:	e00f      	b.n	8003198 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8003180:	e00a      	b.n	8003198 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8003190:	e002      	b.n	8003198 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003192:	2302      	movs	r3, #2
 8003194:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8003198:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800319c:	4618      	mov	r0, r3
 800319e:	3788      	adds	r7, #136	@ 0x88
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	42028000 	.word	0x42028000
 80031a8:	42028100 	.word	0x42028100
 80031ac:	42028300 	.word	0x42028300
 80031b0:	46021300 	.word	0x46021300
 80031b4:	46021000 	.word	0x46021000
 80031b8:	080045eb 	.word	0x080045eb
 80031bc:	080046c3 	.word	0x080046c3
 80031c0:	080046df 	.word	0x080046df

080031c4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08a      	sub	sp, #40	@ 0x28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80031cc:	2300      	movs	r3, #0
 80031ce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a77      	ldr	r2, [pc, #476]	@ (80033c4 <HAL_ADC_IRQHandler+0x200>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d004      	beq.n	80031f4 <HAL_ADC_IRQHandler+0x30>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a76      	ldr	r2, [pc, #472]	@ (80033c8 <HAL_ADC_IRQHandler+0x204>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d101      	bne.n	80031f8 <HAL_ADC_IRQHandler+0x34>
 80031f4:	4b75      	ldr	r3, [pc, #468]	@ (80033cc <HAL_ADC_IRQHandler+0x208>)
 80031f6:	e000      	b.n	80031fa <HAL_ADC_IRQHandler+0x36>
 80031f8:	4b75      	ldr	r3, [pc, #468]	@ (80033d0 <HAL_ADC_IRQHandler+0x20c>)
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fabe 	bl	800277c <LL_ADC_GetMultimode>
 8003200:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d017      	beq.n	800323c <HAL_ADC_IRQHandler+0x78>
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d012      	beq.n	800323c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b00      	cmp	r3, #0
 8003220:	d105      	bne.n	800322e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003226:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f001 fc22 	bl	8004a78 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2202      	movs	r2, #2
 800323a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b00      	cmp	r3, #0
 8003244:	d004      	beq.n	8003250 <HAL_ADC_IRQHandler+0x8c>
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10b      	bne.n	8003268 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80d1 	beq.w	80033fe <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 80cb 	beq.w	80033fe <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003278:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a53      	ldr	r2, [pc, #332]	@ (80033d4 <HAL_ADC_IRQHandler+0x210>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d06c      	beq.n	8003364 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff f90c 	bl	80024ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 80aa 	beq.w	80033f0 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a49      	ldr	r2, [pc, #292]	@ (80033c8 <HAL_ADC_IRQHandler+0x204>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d002      	beq.n	80032ac <HAL_ADC_IRQHandler+0xe8>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	e000      	b.n	80032ae <HAL_ADC_IRQHandler+0xea>
 80032ac:	4b45      	ldr	r3, [pc, #276]	@ (80033c4 <HAL_ADC_IRQHandler+0x200>)
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d008      	beq.n	80032c8 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b05      	cmp	r3, #5
 80032c0:	d002      	beq.n	80032c8 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b09      	cmp	r3, #9
 80032c6:	d104      	bne.n	80032d2 <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	623b      	str	r3, [r7, #32]
 80032d0:	e00c      	b.n	80032ec <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a3c      	ldr	r2, [pc, #240]	@ (80033c8 <HAL_ADC_IRQHandler+0x204>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d002      	beq.n	80032e2 <HAL_ADC_IRQHandler+0x11e>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	e000      	b.n	80032e4 <HAL_ADC_IRQHandler+0x120>
 80032e2:	4b38      	ldr	r3, [pc, #224]	@ (80033c4 <HAL_ADC_IRQHandler+0x200>)
 80032e4:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d17c      	bne.n	80033f0 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b08      	cmp	r3, #8
 8003302:	d175      	bne.n	80033f0 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fb03 	bl	8002914 <LL_ADC_REG_IsConversionOngoing>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d11a      	bne.n	800334a <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 020c 	bic.w	r2, r2, #12
 8003322:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003328:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003334:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d159      	bne.n	80033f0 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003340:	f043 0201 	orr.w	r2, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	679a      	str	r2, [r3, #120]	@ 0x78
 8003348:	e052      	b.n	80033f0 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800334e:	f043 0210 	orr.w	r2, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800335a:	f043 0201 	orr.w	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003362:	e045      	b.n	80033f0 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff f89f 	bl	80024ac <LL_ADC_REG_IsTriggerSourceSWStart>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d03d      	beq.n	80033f0 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800337a:	2b00      	cmp	r3, #0
 800337c:	d138      	bne.n	80033f0 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b08      	cmp	r3, #8
 800338a:	d131      	bne.n	80033f0 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fabf 	bl	8002914 <LL_ADC_REG_IsConversionOngoing>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d11d      	bne.n	80033d8 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 020c 	bic.w	r2, r2, #12
 80033aa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	f043 0201 	orr.w	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	679a      	str	r2, [r3, #120]	@ 0x78
 80033c0:	e016      	b.n	80033f0 <HAL_ADC_IRQHandler+0x22c>
 80033c2:	bf00      	nop
 80033c4:	42028000 	.word	0x42028000
 80033c8:	42028100 	.word	0x42028100
 80033cc:	42028300 	.word	0x42028300
 80033d0:	46021300 	.word	0x46021300
 80033d4:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033dc:	f043 0220 	orr.w	r2, r3, #32
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033e8:	f043 0201 	orr.w	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f99d 	bl	8003730 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	220c      	movs	r2, #12
 80033fc:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a8c      	ldr	r2, [pc, #560]	@ (8003634 <HAL_ADC_IRQHandler+0x470>)
 8003404:	4293      	cmp	r3, r2
 8003406:	f000 8095 	beq.w	8003534 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b00      	cmp	r3, #0
 8003412:	d004      	beq.n	800341e <HAL_ADC_IRQHandler+0x25a>
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8085 	beq.w	8003534 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d07f      	beq.n	8003534 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b00      	cmp	r3, #0
 800343e:	d105      	bne.n	800344c <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003444:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff f8f8 	bl	8002646 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003456:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff f825 	bl	80024ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8003462:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a73      	ldr	r2, [pc, #460]	@ (8003638 <HAL_ADC_IRQHandler+0x474>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d002      	beq.n	8003474 <HAL_ADC_IRQHandler+0x2b0>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	e000      	b.n	8003476 <HAL_ADC_IRQHandler+0x2b2>
 8003474:	4b71      	ldr	r3, [pc, #452]	@ (800363c <HAL_ADC_IRQHandler+0x478>)
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	4293      	cmp	r3, r2
 800347c:	d008      	beq.n	8003490 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2b06      	cmp	r3, #6
 8003488:	d002      	beq.n	8003490 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b07      	cmp	r3, #7
 800348e:	d104      	bne.n	800349a <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	623b      	str	r3, [r7, #32]
 8003498:	e00c      	b.n	80034b4 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a66      	ldr	r2, [pc, #408]	@ (8003638 <HAL_ADC_IRQHandler+0x474>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d002      	beq.n	80034aa <HAL_ADC_IRQHandler+0x2e6>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	e000      	b.n	80034ac <HAL_ADC_IRQHandler+0x2e8>
 80034aa:	4b64      	ldr	r3, [pc, #400]	@ (800363c <HAL_ADC_IRQHandler+0x478>)
 80034ac:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d035      	beq.n	8003526 <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d007      	beq.n	80034d4 <HAL_ADC_IRQHandler+0x310>
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d02d      	beq.n	8003526 <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d128      	bne.n	8003526 <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034de:	2b40      	cmp	r3, #64	@ 0x40
 80034e0:	d121      	bne.n	8003526 <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff fa27 	bl	800293a <LL_ADC_INJ_IsConversionOngoing>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d119      	bne.n	8003526 <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003500:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003506:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003516:	2b00      	cmp	r3, #0
 8003518:	d105      	bne.n	8003526 <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800351e:	f043 0201 	orr.w	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f001 fa88 	bl	8004a3c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2260      	movs	r2, #96	@ 0x60
 8003532:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800353a:	2b00      	cmp	r3, #0
 800353c:	d011      	beq.n	8003562 <HAL_ADC_IRQHandler+0x39e>
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00c      	beq.n	8003562 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800354c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f8ff 	bl	8003758 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2280      	movs	r2, #128	@ 0x80
 8003560:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d012      	beq.n	8003592 <HAL_ADC_IRQHandler+0x3ce>
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00d      	beq.n	8003592 <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800357a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f001 fa64 	bl	8004a50 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003590:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003598:	2b00      	cmp	r3, #0
 800359a:	d012      	beq.n	80035c2 <HAL_ADC_IRQHandler+0x3fe>
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00d      	beq.n	80035c2 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035aa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f001 fa56 	bl	8004a64 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d05d      	beq.n	8003688 <HAL_ADC_IRQHandler+0x4c4>
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d058      	beq.n	8003688 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d102      	bne.n	80035e4 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 80035de:	2301      	movs	r3, #1
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035e2:	e03b      	b.n	800365c <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a12      	ldr	r2, [pc, #72]	@ (8003634 <HAL_ADC_IRQHandler+0x470>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d02c      	beq.n	8003648 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d015      	beq.n	8003620 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a10      	ldr	r2, [pc, #64]	@ (800363c <HAL_ADC_IRQHandler+0x478>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d004      	beq.n	8003608 <HAL_ADC_IRQHandler+0x444>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a0d      	ldr	r2, [pc, #52]	@ (8003638 <HAL_ADC_IRQHandler+0x474>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d101      	bne.n	800360c <HAL_ADC_IRQHandler+0x448>
 8003608:	4b0d      	ldr	r3, [pc, #52]	@ (8003640 <HAL_ADC_IRQHandler+0x47c>)
 800360a:	e000      	b.n	800360e <HAL_ADC_IRQHandler+0x44a>
 800360c:	4b0d      	ldr	r3, [pc, #52]	@ (8003644 <HAL_ADC_IRQHandler+0x480>)
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff f8c2 	bl	8002798 <LL_ADC_GetMultiDMATransfer>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d020      	beq.n	800365c <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800361a:	2301      	movs	r3, #1
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24
 800361e:	e01d      	b.n	800365c <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d016      	beq.n	800365c <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800362e:	2301      	movs	r3, #1
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
 8003632:	e013      	b.n	800365c <HAL_ADC_IRQHandler+0x498>
 8003634:	46021000 	.word	0x46021000
 8003638:	42028100 	.word	0x42028100
 800363c:	42028000 	.word	0x42028000
 8003640:	42028300 	.word	0x42028300
 8003644:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7fe ffec 	bl	800262a <LL_ADC_REG_GetDMATransfer>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8003658:	2301      	movs	r3, #1
 800365a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800365c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365e:	2b01      	cmp	r3, #1
 8003660:	d10e      	bne.n	8003680 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003666:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003672:	f043 0202 	orr.w	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f876 	bl	800376c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2210      	movs	r2, #16
 8003686:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01b      	beq.n	80036ca <HAL_ADC_IRQHandler+0x506>
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d016      	beq.n	80036ca <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036ac:	f043 0201 	orr.w	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f877 	bl	80037a8 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0201 	bic.w	r2, r2, #1
 80036c8:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a17      	ldr	r2, [pc, #92]	@ (800372c <HAL_ADC_IRQHandler+0x568>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d126      	bne.n	8003722 <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00c      	beq.n	80036f8 <HAL_ADC_IRQHandler+0x534>
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d007      	beq.n	80036f8 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f849 	bl	8003780 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036f6:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00f      	beq.n	8003722 <HAL_ADC_IRQHandler+0x55e>
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f841 	bl	8003794 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003720:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003722:	bf00      	nop
 8003724:	3728      	adds	r7, #40	@ 0x28
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	46021000 	.word	0x46021000

08003730 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80037bc:	b590      	push	{r4, r7, lr}
 80037be:	b0b7      	sub	sp, #220	@ 0xdc
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4aa8      	ldr	r2, [pc, #672]	@ (8003a78 <HAL_ADC_ConfigChannel+0x2bc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d103      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d102      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x36>
 80037ec:	2302      	movs	r3, #2
 80037ee:	f000 bdfe 	b.w	80043ee <HAL_ADC_ConfigChannel+0xc32>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff f888 	bl	8002914 <LL_ADC_REG_IsConversionOngoing>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	f040 85c1 	bne.w	800438e <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a99      	ldr	r2, [pc, #612]	@ (8003a78 <HAL_ADC_ConfigChannel+0x2bc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	f000 8409 	beq.w	800402a <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d108      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x7a>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	0e9b      	lsrs	r3, r3, #26
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	2201      	movs	r2, #1
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	e01d      	b.n	8003872 <HAL_ADC_ConfigChannel+0xb6>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003842:	fa93 f3a3 	rbit	r3, r3
 8003846:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800384a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800384e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003852:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 800385a:	2320      	movs	r3, #32
 800385c:	e004      	b.n	8003868 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 800385e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003862:	fab3 f383 	clz	r3, r3
 8003866:	b2db      	uxtb	r3, r3
 8003868:	f003 031f 	and.w	r3, r3, #31
 800386c:	2201      	movs	r2, #1
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	69d1      	ldr	r1, [r2, #28]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	430b      	orrs	r3, r1
 800387e:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	f7fe fe21 	bl	80024d4 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff f83c 	bl	8002914 <LL_ADC_REG_IsConversionOngoing>
 800389c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff f848 	bl	800293a <LL_ADC_INJ_IsConversionOngoing>
 80038aa:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f040 81df 	bne.w	8003c76 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f040 81da 	bne.w	8003c76 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6819      	ldr	r1, [r3, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f7fe fecc 	bl	800266c <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	089b      	lsrs	r3, r3, #2
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d046      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6919      	ldr	r1, [r3, #16]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003906:	f7fe fd07 	bl	8002318 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6919      	ldr	r1, [r3, #16]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	461a      	mov	r2, r3
 8003918:	f7fe fd35 	bl	8002386 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	7e9b      	ldrb	r3, [r3, #26]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d11e      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003930:	2b00      	cmp	r3, #0
 8003932:	d102      	bne.n	800393a <HAL_ADC_ConfigChannel+0x17e>
 8003934:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003938:	e000      	b.n	800393c <HAL_ADC_ConfigChannel+0x180>
 800393a:	2300      	movs	r3, #0
 800393c:	461a      	mov	r2, r3
 800393e:	f7fe fd58 	bl	80023f2 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800394e:	2b01      	cmp	r3, #1
 8003950:	d102      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x19c>
 8003952:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003956:	e000      	b.n	800395a <HAL_ADC_ConfigChannel+0x19e>
 8003958:	2300      	movs	r3, #0
 800395a:	461a      	mov	r2, r3
 800395c:	f7fe fd2e 	bl	80023bc <LL_ADC_SetOffsetSignedSaturation>
 8003960:	e189      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2200      	movs	r2, #0
 800396c:	4619      	mov	r1, r3
 800396e:	f7fe fd40 	bl	80023f2 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2200      	movs	r2, #0
 800397c:	4619      	mov	r1, r3
 800397e:	f7fe fd1d 	bl	80023bc <LL_ADC_SetOffsetSignedSaturation>
 8003982:	e178      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fce5 	bl	800235a <LL_ADC_GetOffsetChannel>
 8003990:	4603      	mov	r3, r0
 8003992:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x1f4>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe fcda 	bl	800235a <LL_ADC_GetOffsetChannel>
 80039a6:	4603      	mov	r3, r0
 80039a8:	0e9b      	lsrs	r3, r3, #26
 80039aa:	f003 021f 	and.w	r2, r3, #31
 80039ae:	e01e      	b.n	80039ee <HAL_ADC_ConfigChannel+0x232>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2100      	movs	r1, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe fccf 	bl	800235a <LL_ADC_GetOffsetChannel>
 80039bc:	4603      	mov	r3, r0
 80039be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039c6:	fa93 f3a3 	rbit	r3, r3
 80039ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80039ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80039d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80039d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80039de:	2320      	movs	r3, #32
 80039e0:	e004      	b.n	80039ec <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80039e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80039e6:	fab3 f383 	clz	r3, r3
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d105      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x24a>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	0e9b      	lsrs	r3, r3, #26
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	e018      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x27c>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a12:	fa93 f3a3 	rbit	r3, r3
 8003a16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003a1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003a22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8003a2a:	2320      	movs	r3, #32
 8003a2c:	e004      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8003a2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a32:	fab3 f383 	clz	r3, r3
 8003a36:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d107      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	2300      	movs	r3, #0
 8003a46:	2100      	movs	r1, #0
 8003a48:	f7fe fc66 	bl	8002318 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2101      	movs	r1, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe fc81 	bl	800235a <LL_ADC_GetOffsetChannel>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10c      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x2c0>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2101      	movs	r1, #1
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fe fc76 	bl	800235a <LL_ADC_GetOffsetChannel>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	0e9b      	lsrs	r3, r3, #26
 8003a72:	f003 021f 	and.w	r2, r3, #31
 8003a76:	e020      	b.n	8003aba <HAL_ADC_ConfigChannel+0x2fe>
 8003a78:	46021000 	.word	0x46021000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2101      	movs	r1, #1
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe fc69 	bl	800235a <LL_ADC_GetOffsetChannel>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003a9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a9e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003aa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8003aaa:	2320      	movs	r3, #32
 8003aac:	e004      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8003aae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ab2:	fab3 f383 	clz	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d105      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x316>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	0e9b      	lsrs	r3, r3, #26
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	e018      	b.n	8003b04 <HAL_ADC_ConfigChannel+0x348>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ada:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ade:	fa93 f3a3 	rbit	r3, r3
 8003ae2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003ae6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003aea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8003af6:	2320      	movs	r3, #32
 8003af8:	e004      	b.n	8003b04 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8003afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003afe:	fab3 f383 	clz	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d107      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6818      	ldr	r0, [r3, #0]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	2300      	movs	r3, #0
 8003b12:	2101      	movs	r1, #1
 8003b14:	f7fe fc00 	bl	8002318 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2102      	movs	r1, #2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fe fc1b 	bl	800235a <LL_ADC_GetOffsetChannel>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10a      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x388>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2102      	movs	r1, #2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fe fc10 	bl	800235a <LL_ADC_GetOffsetChannel>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	0e9b      	lsrs	r3, r3, #26
 8003b3e:	f003 021f 	and.w	r2, r3, #31
 8003b42:	e01a      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x3be>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2102      	movs	r1, #2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fe fc05 	bl	800235a <LL_ADC_GetOffsetChannel>
 8003b50:	4603      	mov	r3, r0
 8003b52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b56:	fa93 f3a3 	rbit	r3, r3
 8003b5a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003b5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003b62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003b6a:	2320      	movs	r3, #32
 8003b6c:	e004      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8003b6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b72:	fab3 f383 	clz	r3, r3
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d105      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x3d6>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	0e9b      	lsrs	r3, r3, #26
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	e011      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0x3fa>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b9a:	fa93 f3a3 	rbit	r3, r3
 8003b9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003ba0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ba2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003ba4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003baa:	2320      	movs	r3, #32
 8003bac:	e003      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003bae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bb0:	fab3 f383 	clz	r3, r3
 8003bb4:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d107      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	f7fe fba7 	bl	8002318 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2103      	movs	r1, #3
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe fbc2 	bl	800235a <LL_ADC_GetOffsetChannel>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10a      	bne.n	8003bf6 <HAL_ADC_ConfigChannel+0x43a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2103      	movs	r1, #3
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe fbb7 	bl	800235a <LL_ADC_GetOffsetChannel>
 8003bec:	4603      	mov	r3, r0
 8003bee:	0e9b      	lsrs	r3, r3, #26
 8003bf0:	f003 021f 	and.w	r2, r3, #31
 8003bf4:	e017      	b.n	8003c26 <HAL_ADC_ConfigChannel+0x46a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2103      	movs	r1, #3
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fe fbac 	bl	800235a <LL_ADC_GetOffsetChannel>
 8003c02:	4603      	mov	r3, r0
 8003c04:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c08:	fa93 f3a3 	rbit	r3, r3
 8003c0c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003c0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c10:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003c12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8003c18:	2320      	movs	r3, #32
 8003c1a:	e003      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8003c1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c1e:	fab3 f383 	clz	r3, r3
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d105      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x482>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	0e9b      	lsrs	r3, r3, #26
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	e011      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x4a6>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c46:	fa93 f3a3 	rbit	r3, r3
 8003c4a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003c50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 8003c56:	2320      	movs	r3, #32
 8003c58:	e003      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8003c5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c5c:	fab3 f383 	clz	r3, r3
 8003c60:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d107      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	2103      	movs	r1, #3
 8003c72:	f7fe fb51 	bl	8002318 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe fe10 	bl	80028a0 <LL_ADC_IsEnabled>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f040 83ad 	bne.w	80043e2 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6818      	ldr	r0, [r3, #0]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	6819      	ldr	r1, [r3, #0]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	461a      	mov	r2, r3
 8003c96:	f7fe fd4d 	bl	8002734 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ca2:	f040 80d6 	bne.w	8003e52 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10b      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x50e>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	0e9b      	lsrs	r3, r3, #26
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	2b09      	cmp	r3, #9
 8003cc0:	bf94      	ite	ls
 8003cc2:	2301      	movls	r3, #1
 8003cc4:	2300      	movhi	r3, #0
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	e019      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x542>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cd2:	fa93 f3a3 	rbit	r3, r3
 8003cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003cd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cda:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003ce2:	2320      	movs	r3, #32
 8003ce4:	e003      	b.n	8003cee <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003ce6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ce8:	fab3 f383 	clz	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	2b09      	cmp	r3, #9
 8003cf6:	bf94      	ite	ls
 8003cf8:	2301      	movls	r3, #1
 8003cfa:	2300      	movhi	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d04d      	beq.n	8003d9e <HAL_ADC_ConfigChannel+0x5e2>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d107      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x562>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	0e9b      	lsrs	r3, r3, #26
 8003d14:	3301      	adds	r3, #1
 8003d16:	069b      	lsls	r3, r3, #26
 8003d18:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d1c:	e015      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x58e>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d26:	fa93 f3a3 	rbit	r3, r3
 8003d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d2e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003d36:	2320      	movs	r3, #32
 8003d38:	e003      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003d3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d3c:	fab3 f383 	clz	r3, r3
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	3301      	adds	r3, #1
 8003d44:	069b      	lsls	r3, r3, #26
 8003d46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x5ae>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	0e9b      	lsrs	r3, r3, #26
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	f003 031f 	and.w	r3, r3, #31
 8003d62:	2101      	movs	r1, #1
 8003d64:	fa01 f303 	lsl.w	r3, r1, r3
 8003d68:	e017      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x5de>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d72:	fa93 f3a3 	rbit	r3, r3
 8003d76:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8003d82:	2320      	movs	r3, #32
 8003d84:	e003      	b.n	8003d8e <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 8003d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d88:	fab3 f383 	clz	r3, r3
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	2101      	movs	r1, #1
 8003d96:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	e04e      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x680>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d107      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x5fe>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	0e9b      	lsrs	r3, r3, #26
 8003db0:	3301      	adds	r3, #1
 8003db2:	069b      	lsls	r3, r3, #26
 8003db4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003db8:	e015      	b.n	8003de6 <HAL_ADC_ConfigChannel+0x62a>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc2:	fa93 f3a3 	rbit	r3, r3
 8003dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8003dd2:	2320      	movs	r3, #32
 8003dd4:	e003      	b.n	8003dde <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8003dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd8:	fab3 f383 	clz	r3, r3
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	3301      	adds	r3, #1
 8003de0:	069b      	lsls	r3, r3, #26
 8003de2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x64a>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	0e9b      	lsrs	r3, r3, #26
 8003df8:	3301      	adds	r3, #1
 8003dfa:	f003 031f 	and.w	r3, r3, #31
 8003dfe:	2101      	movs	r1, #1
 8003e00:	fa01 f303 	lsl.w	r3, r1, r3
 8003e04:	e017      	b.n	8003e36 <HAL_ADC_ConfigChannel+0x67a>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	fa93 f3a3 	rbit	r3, r3
 8003e12:	61bb      	str	r3, [r7, #24]
  return result;
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8003e1e:	2320      	movs	r3, #32
 8003e20:	e003      	b.n	8003e2a <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	fab3 f383 	clz	r3, r3
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	2101      	movs	r1, #1
 8003e32:	fa01 f303 	lsl.w	r3, r1, r3
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6818      	ldr	r0, [r3, #0]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003e4e:	f7fe fc0d 	bl	800266c <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f280 82c3 	bge.w	80043e2 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a92      	ldr	r2, [pc, #584]	@ (80040ac <HAL_ADC_ConfigChannel+0x8f0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d004      	beq.n	8003e70 <HAL_ADC_ConfigChannel+0x6b4>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a91      	ldr	r2, [pc, #580]	@ (80040b0 <HAL_ADC_ConfigChannel+0x8f4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d101      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x6b8>
 8003e70:	4b90      	ldr	r3, [pc, #576]	@ (80040b4 <HAL_ADC_ConfigChannel+0x8f8>)
 8003e72:	e000      	b.n	8003e76 <HAL_ADC_ConfigChannel+0x6ba>
 8003e74:	4b90      	ldr	r3, [pc, #576]	@ (80040b8 <HAL_ADC_ConfigChannel+0x8fc>)
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe fa20 	bl	80022bc <LL_ADC_GetCommonPathInternalCh>
 8003e7c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a89      	ldr	r2, [pc, #548]	@ (80040ac <HAL_ADC_ConfigChannel+0x8f0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d004      	beq.n	8003e94 <HAL_ADC_ConfigChannel+0x6d8>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a88      	ldr	r2, [pc, #544]	@ (80040b0 <HAL_ADC_ConfigChannel+0x8f4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d10e      	bne.n	8003eb2 <HAL_ADC_ConfigChannel+0x6f6>
 8003e94:	4885      	ldr	r0, [pc, #532]	@ (80040ac <HAL_ADC_ConfigChannel+0x8f0>)
 8003e96:	f7fe fd03 	bl	80028a0 <LL_ADC_IsEnabled>
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4884      	ldr	r0, [pc, #528]	@ (80040b0 <HAL_ADC_ConfigChannel+0x8f4>)
 8003e9e:	f7fe fcff 	bl	80028a0 <LL_ADC_IsEnabled>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4323      	orrs	r3, r4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bf0c      	ite	eq
 8003eaa:	2301      	moveq	r3, #1
 8003eac:	2300      	movne	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	e008      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x708>
 8003eb2:	4882      	ldr	r0, [pc, #520]	@ (80040bc <HAL_ADC_ConfigChannel+0x900>)
 8003eb4:	f7fe fcf4 	bl	80028a0 <LL_ADC_IsEnabled>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	bf0c      	ite	eq
 8003ebe:	2301      	moveq	r3, #1
 8003ec0:	2300      	movne	r3, #0
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80a6 	beq.w	8004016 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a7c      	ldr	r2, [pc, #496]	@ (80040c0 <HAL_ADC_ConfigChannel+0x904>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d13c      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ed4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ed8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d136      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a71      	ldr	r2, [pc, #452]	@ (80040ac <HAL_ADC_ConfigChannel+0x8f0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00a      	beq.n	8003f00 <HAL_ADC_ConfigChannel+0x744>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a70      	ldr	r2, [pc, #448]	@ (80040b0 <HAL_ADC_ConfigChannel+0x8f4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d005      	beq.n	8003f00 <HAL_ADC_ConfigChannel+0x744>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a70      	ldr	r2, [pc, #448]	@ (80040bc <HAL_ADC_ConfigChannel+0x900>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	f040 826e 	bne.w	80043dc <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a69      	ldr	r2, [pc, #420]	@ (80040ac <HAL_ADC_ConfigChannel+0x8f0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d004      	beq.n	8003f14 <HAL_ADC_ConfigChannel+0x758>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a68      	ldr	r2, [pc, #416]	@ (80040b0 <HAL_ADC_ConfigChannel+0x8f4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d101      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x75c>
 8003f14:	4a67      	ldr	r2, [pc, #412]	@ (80040b4 <HAL_ADC_ConfigChannel+0x8f8>)
 8003f16:	e000      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x75e>
 8003f18:	4a67      	ldr	r2, [pc, #412]	@ (80040b8 <HAL_ADC_ConfigChannel+0x8fc>)
 8003f1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f1e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f22:	4619      	mov	r1, r3
 8003f24:	4610      	mov	r0, r2
 8003f26:	f7fe f9b6 	bl	8002296 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f2a:	4b66      	ldr	r3, [pc, #408]	@ (80040c4 <HAL_ADC_ConfigChannel+0x908>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	099b      	lsrs	r3, r3, #6
 8003f30:	4a65      	ldr	r2, [pc, #404]	@ (80040c8 <HAL_ADC_ConfigChannel+0x90c>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	099b      	lsrs	r3, r3, #6
 8003f38:	3301      	adds	r3, #1
 8003f3a:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8003f3c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003f3e:	e002      	b.n	8003f46 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f9      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f4c:	e246      	b.n	80043dc <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a5e      	ldr	r2, [pc, #376]	@ (80040cc <HAL_ADC_ConfigChannel+0x910>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d12b      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d125      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a50      	ldr	r2, [pc, #320]	@ (80040ac <HAL_ADC_ConfigChannel+0x8f0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00a      	beq.n	8003f84 <HAL_ADC_ConfigChannel+0x7c8>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a4f      	ldr	r2, [pc, #316]	@ (80040b0 <HAL_ADC_ConfigChannel+0x8f4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d005      	beq.n	8003f84 <HAL_ADC_ConfigChannel+0x7c8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a4f      	ldr	r2, [pc, #316]	@ (80040bc <HAL_ADC_ConfigChannel+0x900>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	f040 822e 	bne.w	80043e0 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a48      	ldr	r2, [pc, #288]	@ (80040ac <HAL_ADC_ConfigChannel+0x8f0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d004      	beq.n	8003f98 <HAL_ADC_ConfigChannel+0x7dc>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a47      	ldr	r2, [pc, #284]	@ (80040b0 <HAL_ADC_ConfigChannel+0x8f4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d101      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x7e0>
 8003f98:	4a46      	ldr	r2, [pc, #280]	@ (80040b4 <HAL_ADC_ConfigChannel+0x8f8>)
 8003f9a:	e000      	b.n	8003f9e <HAL_ADC_ConfigChannel+0x7e2>
 8003f9c:	4a46      	ldr	r2, [pc, #280]	@ (80040b8 <HAL_ADC_ConfigChannel+0x8fc>)
 8003f9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4610      	mov	r0, r2
 8003faa:	f7fe f974 	bl	8002296 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fae:	e217      	b.n	80043e0 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a46      	ldr	r2, [pc, #280]	@ (80040d0 <HAL_ADC_ConfigChannel+0x914>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	f040 8213 	bne.w	80043e2 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f040 820c 	bne.w	80043e2 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a37      	ldr	r2, [pc, #220]	@ (80040ac <HAL_ADC_ConfigChannel+0x8f0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00a      	beq.n	8003fea <HAL_ADC_ConfigChannel+0x82e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a35      	ldr	r2, [pc, #212]	@ (80040b0 <HAL_ADC_ConfigChannel+0x8f4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d005      	beq.n	8003fea <HAL_ADC_ConfigChannel+0x82e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a36      	ldr	r2, [pc, #216]	@ (80040bc <HAL_ADC_ConfigChannel+0x900>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	f040 81fc 	bne.w	80043e2 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a2f      	ldr	r2, [pc, #188]	@ (80040ac <HAL_ADC_ConfigChannel+0x8f0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <HAL_ADC_ConfigChannel+0x842>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a2d      	ldr	r2, [pc, #180]	@ (80040b0 <HAL_ADC_ConfigChannel+0x8f4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d101      	bne.n	8004002 <HAL_ADC_ConfigChannel+0x846>
 8003ffe:	4a2d      	ldr	r2, [pc, #180]	@ (80040b4 <HAL_ADC_ConfigChannel+0x8f8>)
 8004000:	e000      	b.n	8004004 <HAL_ADC_ConfigChannel+0x848>
 8004002:	4a2d      	ldr	r2, [pc, #180]	@ (80040b8 <HAL_ADC_ConfigChannel+0x8fc>)
 8004004:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004008:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800400c:	4619      	mov	r1, r3
 800400e:	4610      	mov	r0, r2
 8004010:	f7fe f941 	bl	8002296 <LL_ADC_SetCommonPathInternalCh>
 8004014:	e1e5      	b.n	80043e2 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800401a:	f043 0220 	orr.w	r2, r3, #32
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004028:	e1db      	b.n	80043e2 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b02      	cmp	r3, #2
 8004038:	f000 811b 	beq.w	8004272 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004044:	d004      	beq.n	8004050 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800404a:	4a22      	ldr	r2, [pc, #136]	@ (80040d4 <HAL_ADC_ConfigChannel+0x918>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d107      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004058:	4618      	mov	r0, r3
 800405a:	f7fe fa9b 	bl	8002594 <LL_ADC_REG_SetSequencerChAdd>
 800405e:	e059      	b.n	8004114 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f003 031f 	and.w	r3, r3, #31
 800406e:	210f      	movs	r1, #15
 8004070:	fa01 f303 	lsl.w	r3, r1, r3
 8004074:	43db      	mvns	r3, r3
 8004076:	401a      	ands	r2, r3
 8004078:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800407c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d105      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x8d4>
 8004084:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004088:	0e9b      	lsrs	r3, r3, #26
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	e027      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x924>
 8004090:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004094:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	fa93 f3a3 	rbit	r3, r3
 800409c:	60fb      	str	r3, [r7, #12]
  return result;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d117      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 80040a8:	2320      	movs	r3, #32
 80040aa:	e019      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x924>
 80040ac:	42028000 	.word	0x42028000
 80040b0:	42028100 	.word	0x42028100
 80040b4:	42028300 	.word	0x42028300
 80040b8:	46021300 	.word	0x46021300
 80040bc:	46021000 	.word	0x46021000
 80040c0:	ce080000 	.word	0xce080000
 80040c4:	20000000 	.word	0x20000000
 80040c8:	053e2d63 	.word	0x053e2d63
 80040cc:	ca040000 	.word	0xca040000
 80040d0:	80000001 	.word	0x80000001
 80040d4:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	fab3 f383 	clz	r3, r3
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	6839      	ldr	r1, [r7, #0]
 80040e2:	6849      	ldr	r1, [r1, #4]
 80040e4:	f001 011f 	and.w	r1, r1, #31
 80040e8:	408b      	lsls	r3, r1
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	089b      	lsrs	r3, r3, #2
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fe:	429a      	cmp	r2, r3
 8004100:	d808      	bhi.n	8004114 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800410e:	4619      	mov	r1, r3
 8004110:	f7fe f9e0 	bl	80024d4 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	461a      	mov	r2, r3
 800411e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004122:	f7fe faa3 	bl	800266c <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	f280 8159 	bge.w	80043e2 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a9b      	ldr	r2, [pc, #620]	@ (80043a4 <HAL_ADC_ConfigChannel+0xbe8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d004      	beq.n	8004144 <HAL_ADC_ConfigChannel+0x988>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a9a      	ldr	r2, [pc, #616]	@ (80043a8 <HAL_ADC_ConfigChannel+0xbec>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d101      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x98c>
 8004144:	4b99      	ldr	r3, [pc, #612]	@ (80043ac <HAL_ADC_ConfigChannel+0xbf0>)
 8004146:	e000      	b.n	800414a <HAL_ADC_ConfigChannel+0x98e>
 8004148:	4b99      	ldr	r3, [pc, #612]	@ (80043b0 <HAL_ADC_ConfigChannel+0xbf4>)
 800414a:	4618      	mov	r0, r3
 800414c:	f7fe f8b6 	bl	80022bc <LL_ADC_GetCommonPathInternalCh>
 8004150:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a96      	ldr	r2, [pc, #600]	@ (80043b4 <HAL_ADC_ConfigChannel+0xbf8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d12b      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800415e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004162:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d125      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a8d      	ldr	r2, [pc, #564]	@ (80043a4 <HAL_ADC_ConfigChannel+0xbe8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d004      	beq.n	800417e <HAL_ADC_ConfigChannel+0x9c2>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a8b      	ldr	r2, [pc, #556]	@ (80043a8 <HAL_ADC_ConfigChannel+0xbec>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d101      	bne.n	8004182 <HAL_ADC_ConfigChannel+0x9c6>
 800417e:	4a8b      	ldr	r2, [pc, #556]	@ (80043ac <HAL_ADC_ConfigChannel+0xbf0>)
 8004180:	e000      	b.n	8004184 <HAL_ADC_ConfigChannel+0x9c8>
 8004182:	4a8b      	ldr	r2, [pc, #556]	@ (80043b0 <HAL_ADC_ConfigChannel+0xbf4>)
 8004184:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004188:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800418c:	4619      	mov	r1, r3
 800418e:	4610      	mov	r0, r2
 8004190:	f7fe f881 	bl	8002296 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004194:	4b88      	ldr	r3, [pc, #544]	@ (80043b8 <HAL_ADC_ConfigChannel+0xbfc>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	099b      	lsrs	r3, r3, #6
 800419a:	4a88      	ldr	r2, [pc, #544]	@ (80043bc <HAL_ADC_ConfigChannel+0xc00>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	099b      	lsrs	r3, r3, #6
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80041a6:	e002      	b.n	80041ae <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1f9      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80041b4:	e045      	b.n	8004242 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a81      	ldr	r2, [pc, #516]	@ (80043c0 <HAL_ADC_ConfigChannel+0xc04>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d11b      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d115      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a74      	ldr	r2, [pc, #464]	@ (80043a4 <HAL_ADC_ConfigChannel+0xbe8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d004      	beq.n	80041e0 <HAL_ADC_ConfigChannel+0xa24>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a73      	ldr	r2, [pc, #460]	@ (80043a8 <HAL_ADC_ConfigChannel+0xbec>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0xa28>
 80041e0:	4a72      	ldr	r2, [pc, #456]	@ (80043ac <HAL_ADC_ConfigChannel+0xbf0>)
 80041e2:	e000      	b.n	80041e6 <HAL_ADC_ConfigChannel+0xa2a>
 80041e4:	4a72      	ldr	r2, [pc, #456]	@ (80043b0 <HAL_ADC_ConfigChannel+0xbf4>)
 80041e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041ee:	4619      	mov	r1, r3
 80041f0:	4610      	mov	r0, r2
 80041f2:	f7fe f850 	bl	8002296 <LL_ADC_SetCommonPathInternalCh>
 80041f6:	e024      	b.n	8004242 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a71      	ldr	r2, [pc, #452]	@ (80043c4 <HAL_ADC_ConfigChannel+0xc08>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d11f      	bne.n	8004242 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004202:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d115      	bne.n	800423a <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a64      	ldr	r2, [pc, #400]	@ (80043a4 <HAL_ADC_ConfigChannel+0xbe8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d004      	beq.n	8004222 <HAL_ADC_ConfigChannel+0xa66>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a62      	ldr	r2, [pc, #392]	@ (80043a8 <HAL_ADC_ConfigChannel+0xbec>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <HAL_ADC_ConfigChannel+0xa6a>
 8004222:	4a62      	ldr	r2, [pc, #392]	@ (80043ac <HAL_ADC_ConfigChannel+0xbf0>)
 8004224:	e000      	b.n	8004228 <HAL_ADC_ConfigChannel+0xa6c>
 8004226:	4a62      	ldr	r2, [pc, #392]	@ (80043b0 <HAL_ADC_ConfigChannel+0xbf4>)
 8004228:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800422c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004230:	4619      	mov	r1, r3
 8004232:	4610      	mov	r0, r2
 8004234:	f7fe f82f 	bl	8002296 <LL_ADC_SetCommonPathInternalCh>
 8004238:	e003      	b.n	8004242 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a62      	ldr	r2, [pc, #392]	@ (80043c8 <HAL_ADC_ConfigChannel+0xc0c>)
 8004240:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a61      	ldr	r2, [pc, #388]	@ (80043cc <HAL_ADC_ConfigChannel+0xc10>)
 8004248:	4293      	cmp	r3, r2
 800424a:	f040 80ca 	bne.w	80043e2 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800424e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004256:	2b00      	cmp	r3, #0
 8004258:	f040 80c3 	bne.w	80043e2 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 0201 	orr.w	r2, r2, #1
 800426c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004270:	e0b7      	b.n	80043e2 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800427a:	d004      	beq.n	8004286 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004280:	4a53      	ldr	r2, [pc, #332]	@ (80043d0 <HAL_ADC_ConfigChannel+0xc14>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d106      	bne.n	8004294 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe f9b3 	bl	80025fa <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	f280 80a2 	bge.w	80043e2 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a40      	ldr	r2, [pc, #256]	@ (80043a4 <HAL_ADC_ConfigChannel+0xbe8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d004      	beq.n	80042b2 <HAL_ADC_ConfigChannel+0xaf6>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a3e      	ldr	r2, [pc, #248]	@ (80043a8 <HAL_ADC_ConfigChannel+0xbec>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d101      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0xafa>
 80042b2:	4b3e      	ldr	r3, [pc, #248]	@ (80043ac <HAL_ADC_ConfigChannel+0xbf0>)
 80042b4:	e000      	b.n	80042b8 <HAL_ADC_ConfigChannel+0xafc>
 80042b6:	4b3e      	ldr	r3, [pc, #248]	@ (80043b0 <HAL_ADC_ConfigChannel+0xbf4>)
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fd ffff 	bl	80022bc <LL_ADC_GetCommonPathInternalCh>
 80042be:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a43      	ldr	r2, [pc, #268]	@ (80043d4 <HAL_ADC_ConfigChannel+0xc18>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d115      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a34      	ldr	r2, [pc, #208]	@ (80043a4 <HAL_ADC_ConfigChannel+0xbe8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d004      	beq.n	80042e0 <HAL_ADC_ConfigChannel+0xb24>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a33      	ldr	r2, [pc, #204]	@ (80043a8 <HAL_ADC_ConfigChannel+0xbec>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d101      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0xb28>
 80042e0:	4a32      	ldr	r2, [pc, #200]	@ (80043ac <HAL_ADC_ConfigChannel+0xbf0>)
 80042e2:	e000      	b.n	80042e6 <HAL_ADC_ConfigChannel+0xb2a>
 80042e4:	4a32      	ldr	r2, [pc, #200]	@ (80043b0 <HAL_ADC_ConfigChannel+0xbf4>)
 80042e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042ea:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80042ee:	4619      	mov	r1, r3
 80042f0:	4610      	mov	r0, r2
 80042f2:	f7fd ffd0 	bl	8002296 <LL_ADC_SetCommonPathInternalCh>
 80042f6:	e034      	b.n	8004362 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a36      	ldr	r2, [pc, #216]	@ (80043d8 <HAL_ADC_ConfigChannel+0xc1c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d115      	bne.n	800432e <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a27      	ldr	r2, [pc, #156]	@ (80043a4 <HAL_ADC_ConfigChannel+0xbe8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d004      	beq.n	8004316 <HAL_ADC_ConfigChannel+0xb5a>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a25      	ldr	r2, [pc, #148]	@ (80043a8 <HAL_ADC_ConfigChannel+0xbec>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d101      	bne.n	800431a <HAL_ADC_ConfigChannel+0xb5e>
 8004316:	4a25      	ldr	r2, [pc, #148]	@ (80043ac <HAL_ADC_ConfigChannel+0xbf0>)
 8004318:	e000      	b.n	800431c <HAL_ADC_ConfigChannel+0xb60>
 800431a:	4a25      	ldr	r2, [pc, #148]	@ (80043b0 <HAL_ADC_ConfigChannel+0xbf4>)
 800431c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004320:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f7fd ffb5 	bl	8002296 <LL_ADC_SetCommonPathInternalCh>
 800432c:	e019      	b.n	8004362 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a24      	ldr	r2, [pc, #144]	@ (80043c4 <HAL_ADC_ConfigChannel+0xc08>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d114      	bne.n	8004362 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a19      	ldr	r2, [pc, #100]	@ (80043a4 <HAL_ADC_ConfigChannel+0xbe8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <HAL_ADC_ConfigChannel+0xb90>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a18      	ldr	r2, [pc, #96]	@ (80043a8 <HAL_ADC_ConfigChannel+0xbec>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d101      	bne.n	8004350 <HAL_ADC_ConfigChannel+0xb94>
 800434c:	4a17      	ldr	r2, [pc, #92]	@ (80043ac <HAL_ADC_ConfigChannel+0xbf0>)
 800434e:	e000      	b.n	8004352 <HAL_ADC_ConfigChannel+0xb96>
 8004350:	4a17      	ldr	r2, [pc, #92]	@ (80043b0 <HAL_ADC_ConfigChannel+0xbf4>)
 8004352:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004356:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800435a:	4619      	mov	r1, r3
 800435c:	4610      	mov	r0, r2
 800435e:	f7fd ff9a 	bl	8002296 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a19      	ldr	r2, [pc, #100]	@ (80043cc <HAL_ADC_ConfigChannel+0xc10>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d13a      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800436c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004370:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d134      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0201 	orr.w	r2, r2, #1
 8004388:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 800438c:	e029      	b.n	80043e2 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004392:	f043 0220 	orr.w	r2, r3, #32
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80043a0:	e01f      	b.n	80043e2 <HAL_ADC_ConfigChannel+0xc26>
 80043a2:	bf00      	nop
 80043a4:	42028000 	.word	0x42028000
 80043a8:	42028100 	.word	0x42028100
 80043ac:	42028300 	.word	0x42028300
 80043b0:	46021300 	.word	0x46021300
 80043b4:	b6002000 	.word	0xb6002000
 80043b8:	20000000 	.word	0x20000000
 80043bc:	053e2d63 	.word	0x053e2d63
 80043c0:	ba004000 	.word	0xba004000
 80043c4:	80000001 	.word	0x80000001
 80043c8:	b2001000 	.word	0xb2001000
 80043cc:	d7200000 	.word	0xd7200000
 80043d0:	80000010 	.word	0x80000010
 80043d4:	ce080000 	.word	0xce080000
 80043d8:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043dc:	bf00      	nop
 80043de:	e000      	b.n	80043e2 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043e0:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 80043ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	37dc      	adds	r7, #220	@ 0xdc
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd90      	pop	{r4, r7, pc}
 80043f6:	bf00      	nop

080043f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f7fe fa4b 	bl	80028a0 <LL_ADC_IsEnabled>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d17b      	bne.n	8004508 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	4b3f      	ldr	r3, [pc, #252]	@ (8004514 <ADC_Enable+0x11c>)
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00d      	beq.n	800443a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004422:	f043 0210 	orr.w	r2, r3, #16
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800442e:	f043 0201 	orr.w	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e067      	b.n	800450a <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2201      	movs	r2, #1
 8004440:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe fa02 	bl	8002850 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d004      	beq.n	800445e <ADC_Enable+0x66>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a2f      	ldr	r2, [pc, #188]	@ (8004518 <ADC_Enable+0x120>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d054      	beq.n	8004508 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800445e:	f7fd fe8b 	bl	8002178 <HAL_GetTick>
 8004462:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a2c      	ldr	r2, [pc, #176]	@ (800451c <ADC_Enable+0x124>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d004      	beq.n	8004478 <ADC_Enable+0x80>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a2b      	ldr	r2, [pc, #172]	@ (8004520 <ADC_Enable+0x128>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d101      	bne.n	800447c <ADC_Enable+0x84>
 8004478:	4b2a      	ldr	r3, [pc, #168]	@ (8004524 <ADC_Enable+0x12c>)
 800447a:	e000      	b.n	800447e <ADC_Enable+0x86>
 800447c:	4b2a      	ldr	r3, [pc, #168]	@ (8004528 <ADC_Enable+0x130>)
 800447e:	4618      	mov	r0, r3
 8004480:	f7fe f97c 	bl	800277c <LL_ADC_GetMultimode>
 8004484:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a25      	ldr	r2, [pc, #148]	@ (8004520 <ADC_Enable+0x128>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d002      	beq.n	8004496 <ADC_Enable+0x9e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	e000      	b.n	8004498 <ADC_Enable+0xa0>
 8004496:	4b21      	ldr	r3, [pc, #132]	@ (800451c <ADC_Enable+0x124>)
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	4293      	cmp	r3, r2
 800449e:	d02c      	beq.n	80044fa <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d130      	bne.n	8004508 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044a6:	e028      	b.n	80044fa <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fe f9f7 	bl	80028a0 <LL_ADC_IsEnabled>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d104      	bne.n	80044c2 <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fe f9c7 	bl	8002850 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044c2:	f7fd fe59 	bl	8002178 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d914      	bls.n	80044fa <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d00d      	beq.n	80044fa <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044e2:	f043 0210 	orr.w	r2, r3, #16
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044ee:	f043 0201 	orr.w	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e007      	b.n	800450a <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b01      	cmp	r3, #1
 8004506:	d1cf      	bne.n	80044a8 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	8000003f 	.word	0x8000003f
 8004518:	46021000 	.word	0x46021000
 800451c:	42028000 	.word	0x42028000
 8004520:	42028100 	.word	0x42028100
 8004524:	42028300 	.word	0x42028300
 8004528:	46021300 	.word	0x46021300

0800452c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe f9c4 	bl	80028c6 <LL_ADC_IsDisableOngoing>
 800453e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f7fe f9ab 	bl	80028a0 <LL_ADC_IsEnabled>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d047      	beq.n	80045e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d144      	bne.n	80045e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 030d 	and.w	r3, r3, #13
 8004560:	2b01      	cmp	r3, #1
 8004562:	d10c      	bne.n	800457e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe f985 	bl	8002878 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2203      	movs	r2, #3
 8004574:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004576:	f7fd fdff 	bl	8002178 <HAL_GetTick>
 800457a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800457c:	e029      	b.n	80045d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004582:	f043 0210 	orr.w	r2, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	679a      	str	r2, [r3, #120]	@ 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	67da      	str	r2, [r3, #124]	@ 0x7c
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e023      	b.n	80045e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800459a:	f7fd fded 	bl	8002178 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d914      	bls.n	80045d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00d      	beq.n	80045d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045ba:	f043 0210 	orr.w	r2, r3, #16
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045c6:	f043 0201 	orr.w	r2, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	67da      	str	r2, [r3, #124]	@ 0x7c

          return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e007      	b.n	80045e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1dc      	bne.n	800459a <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004600:	2b00      	cmp	r3, #0
 8004602:	d14b      	bne.n	800469c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004608:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d021      	beq.n	8004662 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f7fd ff42 	bl	80024ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d032      	beq.n	8004694 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d12b      	bne.n	8004694 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004640:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800464c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d11f      	bne.n	8004694 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004658:	f043 0201 	orr.w	r2, r3, #1
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	679a      	str	r2, [r3, #120]	@ 0x78
 8004660:	e018      	b.n	8004694 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d111      	bne.n	8004694 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004674:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004680:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d105      	bne.n	8004694 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800468c:	f043 0201 	orr.w	r2, r3, #1
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7ff f84b 	bl	8003730 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800469a:	e00e      	b.n	80046ba <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f7ff f85f 	bl	800376c <HAL_ADC_ErrorCallback>
}
 80046ae:	e004      	b.n	80046ba <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f7ff f837 	bl	8003744 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046fc:	f043 0204 	orr.w	r2, r3, #4
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f7ff f831 	bl	800376c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800470a:	bf00      	nop
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <LL_ADC_StartCalibration>:
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a0f      	ldr	r2, [pc, #60]	@ (8004760 <LL_ADC_StartCalibration+0x4c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00c      	beq.n	8004740 <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	4b0e      	ldr	r3, [pc, #56]	@ (8004764 <LL_ADC_StartCalibration+0x50>)
 800472c:	4013      	ands	r3, r2
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8004734:	4313      	orrs	r3, r2
 8004736:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	609a      	str	r2, [r3, #8]
}
 800473e:	e009      	b.n	8004754 <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004748:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800474c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	609a      	str	r2, [r3, #8]
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	46021000 	.word	0x46021000
 8004764:	7ffeffc0 	.word	0x7ffeffc0

08004768 <LL_ADC_IsCalibrationOnGoing>:
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004778:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800477c:	d101      	bne.n	8004782 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	@ 0x28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800479c:	2300      	movs	r3, #0
 800479e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_ADCEx_Calibration_Start+0x1e>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e138      	b.n	8004a20 <HAL_ADCEx_Calibration_Start+0x290>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f7ff feb8 	bl	800452c <ADC_Disable>
 80047bc:	4603      	mov	r3, r0
 80047be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80047c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f040 811e 	bne.w	8004a08 <HAL_ADCEx_Calibration_Start+0x278>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80047d4:	f023 0302 	bic.w	r3, r3, #2
 80047d8:	f043 0202 	orr.w	r2, r3, #2
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hadc->Instance == ADC4)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a90      	ldr	r2, [pc, #576]	@ (8004a28 <HAL_ADCEx_Calibration_Start+0x298>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d150      	bne.n	800488c <HAL_ADCEx_Calibration_Start+0xfc>
      /* Note: Specificity of this STM32 series: Calibration factor is          */
      /*       available in data register and also transferred by DMA.          */
      /*       To not insert ADC calibration factor among ADC conversion data   */
      /*       in array variable, DMA transfer must be disabled during          */
      /*       calibration.                                                     */
      backup_setting_pwrr  = READ_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	61bb      	str	r3, [r7, #24]
      backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	617b      	str	r3, [r7, #20]
      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0203 	bic.w	r2, r2, #3
 8004810:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0201 	bic.w	r2, r2, #1
 8004820:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Start ADC calibration in mode single-ended */
      LL_ADC_StartCalibration(hadc->Instance, LL_ADC_CALIB_OFFSET);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2100      	movs	r1, #0
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff ff73 	bl	8004714 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800482e:	e014      	b.n	800485a <HAL_ADCEx_Calibration_Start+0xca>
      {
        wait_loop_index++;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	3301      	adds	r3, #1
 8004834:	613b      	str	r3, [r7, #16]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	4a7c      	ldr	r2, [pc, #496]	@ (8004a2c <HAL_ADCEx_Calibration_Start+0x29c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d90d      	bls.n	800485a <HAL_ADCEx_Calibration_Start+0xca>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004842:	f023 0312 	bic.w	r3, r3, #18
 8004846:	f043 0210 	orr.w	r2, r3, #16
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	679a      	str	r2, [r3, #120]	@ 0x78

          __HAL_UNLOCK(hadc);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e0e2      	b.n	8004a20 <HAL_ADCEx_Calibration_Start+0x290>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff ff82 	bl	8004768 <LL_ADC_IsCalibrationOnGoing>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e2      	bne.n	8004830 <HAL_ADCEx_Calibration_Start+0xa0>
        }
      }

      /* Restore configuration after calibration */
      SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68d9      	ldr	r1, [r3, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	430a      	orrs	r2, r1
 8004878:	60da      	str	r2, [r3, #12]
      SET_BIT(hadc->Instance->PWRR, backup_setting_pwrr);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	430a      	orrs	r2, r1
 8004888:	645a      	str	r2, [r3, #68]	@ 0x44
 800488a:	e0b4      	b.n	80049f6 <HAL_ADCEx_Calibration_Start+0x266>
    }
    else /* ADC instance ADC1 or ADC2 */
    {
      /* Get device information */
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
 800488c:	4b68      	ldr	r3, [pc, #416]	@ (8004a30 <HAL_ADCEx_Calibration_Start+0x2a0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004894:	623b      	str	r3, [r7, #32]
      uint32_t rev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos;
 8004896:	4b66      	ldr	r3, [pc, #408]	@ (8004a30 <HAL_ADCEx_Calibration_Start+0x2a0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	0c1b      	lsrs	r3, r3, #16
 800489c:	b29b      	uxth	r3, r3
 800489e:	61fb      	str	r3, [r7, #28]

      /* Assess whether extended calibration is available on the selected device */
      if ((dev_id == 0x455UL) || (dev_id == 0x476UL)
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	f240 4255 	movw	r2, #1109	@ 0x455
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d012      	beq.n	80048d0 <HAL_ADCEx_Calibration_Start+0x140>
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	f240 4276 	movw	r2, #1142	@ 0x476
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00d      	beq.n	80048d0 <HAL_ADCEx_Calibration_Start+0x140>
          || (((dev_id == 0x481UL) || (dev_id == 0x482UL)) && (rev_id >= 0x3000UL)))
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	f240 4281 	movw	r2, #1153	@ 0x481
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d004      	beq.n	80048c8 <HAL_ADCEx_Calibration_Start+0x138>
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	f240 4282 	movw	r2, #1154	@ 0x482
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d172      	bne.n	80049ae <HAL_ADCEx_Calibration_Start+0x21e>
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048ce:	d36e      	bcc.n	80049ae <HAL_ADCEx_Calibration_Start+0x21e>
      {
        /* Perform extended calibration */
        /* Refer to ref manual for extended calibration procedure details */
        tmp_hal_status = ADC_Enable(hadc);
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f7ff fd91 	bl	80043f8 <ADC_Enable>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (tmp_hal_status == HAL_OK)
 80048dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f040 8088 	bne.w	80049f6 <HAL_ADCEx_Calibration_Start+0x266>
        {
          /* Use a Data Memory Barrier instruction to avoid synchronization issues when accessing ADC registers */
          MODIFY_REG(hadc->Instance->CR, ADC_CR_CALINDEX, 0x9UL << ADC_CR_CALINDEX_Pos);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 6210 	orr.w	r2, r2, #150994944	@ 0x9000000
 80048f8:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 80048fa:	f3bf 8f5f 	dmb	sy
}
 80048fe:	bf00      	nop
          __DMB();
          MODIFY_REG(hadc->Instance->CALFACT2, 0xFFFFFF00UL, 0x03021100UL);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004908:	b2d9      	uxtb	r1, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b49      	ldr	r3, [pc, #292]	@ (8004a34 <HAL_ADCEx_Calibration_Start+0x2a4>)
 8004910:	430b      	orrs	r3, r1
 8004912:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  __ASM volatile ("dmb 0xF":::"memory");
 8004916:	f3bf 8f5f 	dmb	sy
}
 800491a:	bf00      	nop
          __DMB();
          SET_BIT(hadc->Instance->CALFACT, ADC_CALFACT_LATCH_COEF);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800492c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

          tmp_hal_status = ADC_Disable(hadc);
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7ff fdfb 	bl	800452c <ADC_Disable>
 8004936:	4603      	mov	r3, r0
 8004938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

          if (CalibrationMode == ADC_CALIB_OFFSET_LINEARITY)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8004942:	d109      	bne.n	8004958 <HAL_ADCEx_Calibration_Start+0x1c8>
          {
            MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN | ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCALLIN);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a38 <HAL_ADCEx_Calibration_Start+0x2a8>)
 800494c:	4013      	ands	r3, r2
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004956:	6093      	str	r3, [r2, #8]
          }

          MODIFY_REG(hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCAL);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004962:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	6812      	ldr	r2, [r2, #0]
 800496a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800496e:	6093      	str	r3, [r2, #8]

          /* Wait for calibration completion */
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004970:	e014      	b.n	800499c <HAL_ADCEx_Calibration_Start+0x20c>
          {
            wait_loop_index++;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	3301      	adds	r3, #1
 8004976:	613b      	str	r3, [r7, #16]
            if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	4a2c      	ldr	r2, [pc, #176]	@ (8004a2c <HAL_ADCEx_Calibration_Start+0x29c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d90d      	bls.n	800499c <HAL_ADCEx_Calibration_Start+0x20c>
            {
              /* Update ADC state machine to error */
              ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004984:	f023 0312 	bic.w	r3, r3, #18
 8004988:	f043 0210 	orr.w	r2, r3, #16
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	679a      	str	r2, [r3, #120]	@ 0x78

              __HAL_UNLOCK(hadc);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

              return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e041      	b.n	8004a20 <HAL_ADCEx_Calibration_Start+0x290>
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff fee1 	bl	8004768 <LL_ADC_IsCalibrationOnGoing>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e2      	bne.n	8004972 <HAL_ADCEx_Calibration_Start+0x1e2>
        if (tmp_hal_status == HAL_OK)
 80049ac:	e023      	b.n	80049f6 <HAL_ADCEx_Calibration_Start+0x266>
        }
      }
      else
      {
        /* Start ADC calibration in mode single-ended or differential */
        LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68b9      	ldr	r1, [r7, #8]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fead 	bl	8004714 <LL_ADC_StartCalibration>

        /* Wait for calibration completion */
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049ba:	e014      	b.n	80049e6 <HAL_ADCEx_Calibration_Start+0x256>
        {
          wait_loop_index++;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	3301      	adds	r3, #1
 80049c0:	613b      	str	r3, [r7, #16]
          if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	4a19      	ldr	r2, [pc, #100]	@ (8004a2c <HAL_ADCEx_Calibration_Start+0x29c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d90d      	bls.n	80049e6 <HAL_ADCEx_Calibration_Start+0x256>
          {
            /* Update ADC state machine to error */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049ce:	f023 0312 	bic.w	r3, r3, #18
 80049d2:	f043 0210 	orr.w	r2, r3, #16
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	679a      	str	r2, [r3, #120]	@ 0x78

            __HAL_UNLOCK(hadc);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

            return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e01c      	b.n	8004a20 <HAL_ADCEx_Calibration_Start+0x290>
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff febc 	bl	8004768 <LL_ADC_IsCalibrationOnGoing>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e2      	bne.n	80049bc <HAL_ADCEx_Calibration_Start+0x22c>
        }
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049fa:	f023 0303 	bic.w	r3, r3, #3
 80049fe:	f043 0201 	orr.w	r2, r3, #1
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	679a      	str	r2, [r3, #120]	@ 0x78
 8004a06:	e005      	b.n	8004a14 <HAL_ADCEx_Calibration_Start+0x284>
  }
  else /* ADC not disabled */
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a0c:	f043 0210 	orr.w	r2, r3, #16
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3728      	adds	r7, #40	@ 0x28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	46021000 	.word	0x46021000
 8004a2c:	022b6b7f 	.word	0x022b6b7f
 8004a30:	e0044000 	.word	0xe0044000
 8004a34:	03021100 	.word	0x03021100
 8004a38:	7ffeffc0 	.word	0x7ffeffc0

08004a3c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ab4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004abe:	4a04      	ldr	r2, [pc, #16]	@ (8004ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	60d3      	str	r3, [r2, #12]
}
 8004ac4:	bf00      	nop
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	e000ed00 	.word	0xe000ed00

08004ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ad8:	4b04      	ldr	r3, [pc, #16]	@ (8004aec <__NVIC_GetPriorityGrouping+0x18>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	0a1b      	lsrs	r3, r3, #8
 8004ade:	f003 0307 	and.w	r3, r3, #7
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	e000ed00 	.word	0xe000ed00

08004af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	db0b      	blt.n	8004b1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	f003 021f 	and.w	r2, r3, #31
 8004b08:	4907      	ldr	r1, [pc, #28]	@ (8004b28 <__NVIC_EnableIRQ+0x38>)
 8004b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	2001      	movs	r0, #1
 8004b12:	fa00 f202 	lsl.w	r2, r0, r2
 8004b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	e000e100 	.word	0xe000e100

08004b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	6039      	str	r1, [r7, #0]
 8004b36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	db0a      	blt.n	8004b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	490c      	ldr	r1, [pc, #48]	@ (8004b78 <__NVIC_SetPriority+0x4c>)
 8004b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b4a:	0112      	lsls	r2, r2, #4
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	440b      	add	r3, r1
 8004b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b54:	e00a      	b.n	8004b6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	4908      	ldr	r1, [pc, #32]	@ (8004b7c <__NVIC_SetPriority+0x50>)
 8004b5c:	88fb      	ldrh	r3, [r7, #6]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	3b04      	subs	r3, #4
 8004b64:	0112      	lsls	r2, r2, #4
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	440b      	add	r3, r1
 8004b6a:	761a      	strb	r2, [r3, #24]
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	e000e100 	.word	0xe000e100
 8004b7c:	e000ed00 	.word	0xe000ed00

08004b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b089      	sub	sp, #36	@ 0x24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f1c3 0307 	rsb	r3, r3, #7
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	bf28      	it	cs
 8004b9e:	2304      	movcs	r3, #4
 8004ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	2b06      	cmp	r3, #6
 8004ba8:	d902      	bls.n	8004bb0 <NVIC_EncodePriority+0x30>
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	3b03      	subs	r3, #3
 8004bae:	e000      	b.n	8004bb2 <NVIC_EncodePriority+0x32>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	43da      	mvns	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	401a      	ands	r2, r3
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd2:	43d9      	mvns	r1, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bd8:	4313      	orrs	r3, r2
         );
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3724      	adds	r7, #36	@ 0x24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b082      	sub	sp, #8
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7ff ff4c 	bl	8004a8c <__NVIC_SetPriorityGrouping>
}
 8004bf4:	bf00      	nop
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4603      	mov	r3, r0
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c0a:	f7ff ff63 	bl	8004ad4 <__NVIC_GetPriorityGrouping>
 8004c0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	6978      	ldr	r0, [r7, #20]
 8004c16:	f7ff ffb3 	bl	8004b80 <NVIC_EncodePriority>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c20:	4611      	mov	r1, r2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff ff82 	bl	8004b2c <__NVIC_SetPriority>
}
 8004c28:	bf00      	nop
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff ff56 	bl	8004af0 <__NVIC_EnableIRQ>
}
 8004c44:	bf00      	nop
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d844      	bhi.n	8004ce4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c60 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004c83 	.word	0x08004c83
 8004c64:	08004ca1 	.word	0x08004ca1
 8004c68:	08004cc3 	.word	0x08004cc3
 8004c6c:	08004ce5 	.word	0x08004ce5
 8004c70:	08004c75 	.word	0x08004c75
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004c74:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004c7a:	f043 0304 	orr.w	r3, r3, #4
 8004c7e:	6013      	str	r3, [r2, #0]
      break;
 8004c80:	e031      	b.n	8004ce6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004c82:	4b1c      	ldr	r3, [pc, #112]	@ (8004cf4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1b      	ldr	r2, [pc, #108]	@ (8004cf4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004c88:	f023 0304 	bic.w	r3, r3, #4
 8004c8c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8004c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c94:	4a18      	ldr	r2, [pc, #96]	@ (8004cf8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004c96:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004c9e:	e022      	b.n	8004ce6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004ca0:	4b14      	ldr	r3, [pc, #80]	@ (8004cf4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a13      	ldr	r2, [pc, #76]	@ (8004cf4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004ca6:	f023 0304 	bic.w	r3, r3, #4
 8004caa:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8004cac:	4b12      	ldr	r3, [pc, #72]	@ (8004cf8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cb2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004cb6:	4a10      	ldr	r2, [pc, #64]	@ (8004cf8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004cb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004cc0:	e011      	b.n	8004ce6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a0b      	ldr	r2, [pc, #44]	@ (8004cf4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004cc8:	f023 0304 	bic.w	r3, r3, #4
 8004ccc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8004cce:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cd4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004cd8:	4a07      	ldr	r2, [pc, #28]	@ (8004cf8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004cda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004cde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004ce2:	e000      	b.n	8004ce6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004ce4:	bf00      	nop
  }
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	e000e010 	.word	0xe000e010
 8004cf8:	46020c00 	.word	0x46020c00

08004cfc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e054      	b.n	8004db8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	7f5b      	ldrb	r3, [r3, #29]
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d105      	bne.n	8004d24 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fc fe5e 	bl	80019e0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	791b      	ldrb	r3, [r3, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10c      	bne.n	8004d4c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a22      	ldr	r2, [pc, #136]	@ (8004dc0 <HAL_CRC_Init+0xc4>)
 8004d38:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0218 	bic.w	r2, r2, #24
 8004d48:	609a      	str	r2, [r3, #8]
 8004d4a:	e00c      	b.n	8004d66 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6899      	ldr	r1, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	461a      	mov	r2, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f834 	bl	8004dc4 <HAL_CRCEx_Polynomial_Set>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e028      	b.n	8004db8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	795b      	ldrb	r3, [r3, #5]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d105      	bne.n	8004d7a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f04f 32ff 	mov.w	r2, #4294967295
 8004d76:	611a      	str	r2, [r3, #16]
 8004d78:	e004      	b.n	8004d84 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6912      	ldr	r2, [r2, #16]
 8004d82:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695a      	ldr	r2, [r3, #20]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699a      	ldr	r2, [r3, #24]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	04c11db7 	.word	0x04c11db7

08004dc4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004dd4:	231f      	movs	r3, #31
 8004dd6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d102      	bne.n	8004de8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
 8004de6:	e063      	b.n	8004eb0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004de8:	bf00      	nop
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1e5a      	subs	r2, r3, #1
 8004dee:	613a      	str	r2, [r7, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d009      	beq.n	8004e08 <HAL_CRCEx_Polynomial_Set+0x44>
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f003 031f 	and.w	r3, r3, #31
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f0      	beq.n	8004dea <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b18      	cmp	r3, #24
 8004e0c:	d846      	bhi.n	8004e9c <HAL_CRCEx_Polynomial_Set+0xd8>
 8004e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e14 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e14:	08004ea3 	.word	0x08004ea3
 8004e18:	08004e9d 	.word	0x08004e9d
 8004e1c:	08004e9d 	.word	0x08004e9d
 8004e20:	08004e9d 	.word	0x08004e9d
 8004e24:	08004e9d 	.word	0x08004e9d
 8004e28:	08004e9d 	.word	0x08004e9d
 8004e2c:	08004e9d 	.word	0x08004e9d
 8004e30:	08004e9d 	.word	0x08004e9d
 8004e34:	08004e91 	.word	0x08004e91
 8004e38:	08004e9d 	.word	0x08004e9d
 8004e3c:	08004e9d 	.word	0x08004e9d
 8004e40:	08004e9d 	.word	0x08004e9d
 8004e44:	08004e9d 	.word	0x08004e9d
 8004e48:	08004e9d 	.word	0x08004e9d
 8004e4c:	08004e9d 	.word	0x08004e9d
 8004e50:	08004e9d 	.word	0x08004e9d
 8004e54:	08004e85 	.word	0x08004e85
 8004e58:	08004e9d 	.word	0x08004e9d
 8004e5c:	08004e9d 	.word	0x08004e9d
 8004e60:	08004e9d 	.word	0x08004e9d
 8004e64:	08004e9d 	.word	0x08004e9d
 8004e68:	08004e9d 	.word	0x08004e9d
 8004e6c:	08004e9d 	.word	0x08004e9d
 8004e70:	08004e9d 	.word	0x08004e9d
 8004e74:	08004e79 	.word	0x08004e79
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b06      	cmp	r3, #6
 8004e7c:	d913      	bls.n	8004ea6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004e82:	e010      	b.n	8004ea6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b07      	cmp	r3, #7
 8004e88:	d90f      	bls.n	8004eaa <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004e8e:	e00c      	b.n	8004eaa <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	2b0f      	cmp	r3, #15
 8004e94:	d90b      	bls.n	8004eae <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004e9a:	e008      	b.n	8004eae <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	75fb      	strb	r3, [r7, #23]
        break;
 8004ea0:	e006      	b.n	8004eb0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004ea2:	bf00      	nop
 8004ea4:	e004      	b.n	8004eb0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004ea6:	bf00      	nop
 8004ea8:	e002      	b.n	8004eb0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004eaa:	bf00      	nop
 8004eac:	e000      	b.n	8004eb0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004eae:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004eb0:	7dfb      	ldrb	r3, [r7, #23]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10d      	bne.n	8004ed2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f023 0118 	bic.w	r1, r3, #24
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	371c      	adds	r7, #28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e04f      	b.n	8004f98 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_DMA_Start_IT+0x26>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e048      	b.n	8004f98 <HAL_DMA_Start_IT+0xb8>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d136      	bne.n	8004f88 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	68b9      	ldr	r1, [r7, #8]
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f9d3 	bl	80052da <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8004f42:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d007      	beq.n	8004f5c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695a      	ldr	r2, [r3, #20]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f5a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d007      	beq.n	8004f74 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	695a      	ldr	r2, [r3, #20]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f72:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0201 	orr.w	r2, r2, #1
 8004f82:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	e007      	b.n	8004f98 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2240      	movs	r2, #64	@ 0x40
 8004f8c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004fb0:	f023 030f 	bic.w	r3, r3, #15
 8004fb4:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fbe:	3b50      	subs	r3, #80	@ 0x50
 8004fc0:	09db      	lsrs	r3, r3, #7
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 813b 	beq.w	8005256 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d011      	beq.n	8005012 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005004:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800500a:	f043 0201 	orr.w	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800501c:	2b00      	cmp	r3, #0
 800501e:	d011      	beq.n	8005044 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005036:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800503c:	f043 0202 	orr.w	r2, r3, #2
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d011      	beq.n	8005076 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005068:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800506e:	f043 0204 	orr.w	r2, r3, #4
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d011      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800509a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a0:	f043 0208 	orr.w	r2, r3, #8
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d013      	beq.n	80050de <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00c      	beq.n	80050de <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050cc:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d04c      	beq.n	8005186 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d045      	beq.n	8005186 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005102:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b04      	cmp	r3, #4
 800510e:	d12e      	bne.n	800516e <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695a      	ldr	r2, [r3, #20]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800511e:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695a      	ldr	r2, [r3, #20]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0202 	orr.w	r2, r2, #2
 800512e:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800513c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005140:	2b00      	cmp	r3, #0
 8005142:	d007      	beq.n	8005154 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005148:	2201      	movs	r2, #1
 800514a:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2200      	movs	r2, #0
 8005152:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d07a      	beq.n	800525a <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	4798      	blx	r3
        }

        return;
 800516c:	e075      	b.n	800525a <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2205      	movs	r2, #5
 8005172:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005190:	2b00      	cmp	r3, #0
 8005192:	d039      	beq.n	8005208 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d032      	beq.n	8005208 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d012      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d116      	bne.n	80051e6 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d111      	bne.n	80051e6 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ce:	2201      	movs	r2, #1
 80051d0:	731a      	strb	r2, [r3, #12]
 80051d2:	e008      	b.n	80051e6 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d103      	bne.n	80051e6 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80051ee:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520c:	2b00      	cmp	r3, #0
 800520e:	d025      	beq.n	800525c <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695a      	ldr	r2, [r3, #20]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0202 	orr.w	r2, r2, #2
 800521e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800522c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005238:	2201      	movs	r2, #1
 800523a:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005248:	2b00      	cmp	r3, #0
 800524a:	d007      	beq.n	800525c <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	4798      	blx	r3
 8005254:	e002      	b.n	800525c <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005256:	bf00      	nop
 8005258:	e000      	b.n	800525c <HAL_DMA_IRQHandler+0x2bc>
        return;
 800525a:	bf00      	nop
    }
  }
}
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005262:	b480      	push	{r7}
 8005264:	b085      	sub	sp, #20
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e02b      	b.n	80052ce <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800527e:	f023 030f 	bic.w	r3, r3, #15
 8005282:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800528c:	3b50      	subs	r3, #80	@ 0x50
 800528e:	09db      	lsrs	r3, r3, #7
 8005290:	f003 031f 	and.w	r3, r3, #31
 8005294:	2201      	movs	r2, #1
 8005296:	fa02 f303 	lsl.w	r3, r2, r3
 800529a:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	f003 0310 	and.w	r3, r3, #16
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d012      	beq.n	80052cc <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	f003 0311 	and.w	r3, r3, #17
 80052ac:	2b11      	cmp	r3, #17
 80052ae:	d106      	bne.n	80052be <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	605a      	str	r2, [r3, #4]
 80052bc:	e006      	b.n	80052cc <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	43db      	mvns	r3, r3
 80052c6:	401a      	ands	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	607a      	str	r2, [r7, #4]
 80052e6:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052ee:	0c1b      	lsrs	r3, r3, #16
 80052f0:	041b      	lsls	r3, r3, #16
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	b291      	uxth	r1, r2
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	6812      	ldr	r2, [r2, #0]
 80052fa:	430b      	orrs	r3, r1
 80052fc:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005306:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005318:	bf00      	nop
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800532c:	f7fc ff24 	bl	8002178 <HAL_GetTick>
 8005330:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e0db      	b.n	80054f4 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a6e      	ldr	r2, [pc, #440]	@ (80054fc <HAL_DMAEx_List_Init+0x1d8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	f000 809f 	beq.w	8005486 <HAL_DMAEx_List_Init+0x162>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a6c      	ldr	r2, [pc, #432]	@ (8005500 <HAL_DMAEx_List_Init+0x1dc>)
 800534e:	4293      	cmp	r3, r2
 8005350:	f000 8099 	beq.w	8005486 <HAL_DMAEx_List_Init+0x162>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a6a      	ldr	r2, [pc, #424]	@ (8005504 <HAL_DMAEx_List_Init+0x1e0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	f000 8093 	beq.w	8005486 <HAL_DMAEx_List_Init+0x162>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a68      	ldr	r2, [pc, #416]	@ (8005508 <HAL_DMAEx_List_Init+0x1e4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	f000 808d 	beq.w	8005486 <HAL_DMAEx_List_Init+0x162>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a66      	ldr	r2, [pc, #408]	@ (800550c <HAL_DMAEx_List_Init+0x1e8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	f000 8087 	beq.w	8005486 <HAL_DMAEx_List_Init+0x162>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a64      	ldr	r2, [pc, #400]	@ (8005510 <HAL_DMAEx_List_Init+0x1ec>)
 800537e:	4293      	cmp	r3, r2
 8005380:	f000 8081 	beq.w	8005486 <HAL_DMAEx_List_Init+0x162>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a62      	ldr	r2, [pc, #392]	@ (8005514 <HAL_DMAEx_List_Init+0x1f0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d07b      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a61      	ldr	r2, [pc, #388]	@ (8005518 <HAL_DMAEx_List_Init+0x1f4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d076      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a5f      	ldr	r2, [pc, #380]	@ (800551c <HAL_DMAEx_List_Init+0x1f8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d071      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a5e      	ldr	r2, [pc, #376]	@ (8005520 <HAL_DMAEx_List_Init+0x1fc>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d06c      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a5c      	ldr	r2, [pc, #368]	@ (8005524 <HAL_DMAEx_List_Init+0x200>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d067      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a5b      	ldr	r2, [pc, #364]	@ (8005528 <HAL_DMAEx_List_Init+0x204>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d062      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a59      	ldr	r2, [pc, #356]	@ (800552c <HAL_DMAEx_List_Init+0x208>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d05d      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a58      	ldr	r2, [pc, #352]	@ (8005530 <HAL_DMAEx_List_Init+0x20c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d058      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a56      	ldr	r2, [pc, #344]	@ (8005534 <HAL_DMAEx_List_Init+0x210>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d053      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a55      	ldr	r2, [pc, #340]	@ (8005538 <HAL_DMAEx_List_Init+0x214>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d04e      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a53      	ldr	r2, [pc, #332]	@ (800553c <HAL_DMAEx_List_Init+0x218>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d049      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a52      	ldr	r2, [pc, #328]	@ (8005540 <HAL_DMAEx_List_Init+0x21c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d044      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a50      	ldr	r2, [pc, #320]	@ (8005544 <HAL_DMAEx_List_Init+0x220>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d03f      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a4f      	ldr	r2, [pc, #316]	@ (8005548 <HAL_DMAEx_List_Init+0x224>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d03a      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a4d      	ldr	r2, [pc, #308]	@ (800554c <HAL_DMAEx_List_Init+0x228>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d035      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a4c      	ldr	r2, [pc, #304]	@ (8005550 <HAL_DMAEx_List_Init+0x22c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d030      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a4a      	ldr	r2, [pc, #296]	@ (8005554 <HAL_DMAEx_List_Init+0x230>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d02b      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a49      	ldr	r2, [pc, #292]	@ (8005558 <HAL_DMAEx_List_Init+0x234>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d026      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a47      	ldr	r2, [pc, #284]	@ (800555c <HAL_DMAEx_List_Init+0x238>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d021      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a46      	ldr	r2, [pc, #280]	@ (8005560 <HAL_DMAEx_List_Init+0x23c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d01c      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a44      	ldr	r2, [pc, #272]	@ (8005564 <HAL_DMAEx_List_Init+0x240>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d017      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a43      	ldr	r2, [pc, #268]	@ (8005568 <HAL_DMAEx_List_Init+0x244>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d012      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a41      	ldr	r2, [pc, #260]	@ (800556c <HAL_DMAEx_List_Init+0x248>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00d      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a40      	ldr	r2, [pc, #256]	@ (8005570 <HAL_DMAEx_List_Init+0x24c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d008      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a3e      	ldr	r2, [pc, #248]	@ (8005574 <HAL_DMAEx_List_Init+0x250>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <HAL_DMAEx_List_Init+0x162>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a3d      	ldr	r2, [pc, #244]	@ (8005578 <HAL_DMAEx_List_Init+0x254>)
 8005484:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2202      	movs	r2, #2
 8005492:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695a      	ldr	r2, [r3, #20]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0206 	orr.w	r2, r2, #6
 80054a4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80054a6:	e00f      	b.n	80054c8 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80054a8:	f7fc fe66 	bl	8002178 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b05      	cmp	r3, #5
 80054b4:	d908      	bls.n	80054c8 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2210      	movs	r2, #16
 80054ba:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2203      	movs	r2, #3
 80054c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e015      	b.n	80054f4 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e8      	bne.n	80054a8 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fad0 	bl	8005a7c <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	40020050 	.word	0x40020050
 8005500:	50020050 	.word	0x50020050
 8005504:	400200d0 	.word	0x400200d0
 8005508:	500200d0 	.word	0x500200d0
 800550c:	40020150 	.word	0x40020150
 8005510:	50020150 	.word	0x50020150
 8005514:	400201d0 	.word	0x400201d0
 8005518:	500201d0 	.word	0x500201d0
 800551c:	40020250 	.word	0x40020250
 8005520:	50020250 	.word	0x50020250
 8005524:	400202d0 	.word	0x400202d0
 8005528:	500202d0 	.word	0x500202d0
 800552c:	40020350 	.word	0x40020350
 8005530:	50020350 	.word	0x50020350
 8005534:	400203d0 	.word	0x400203d0
 8005538:	500203d0 	.word	0x500203d0
 800553c:	40020450 	.word	0x40020450
 8005540:	50020450 	.word	0x50020450
 8005544:	400204d0 	.word	0x400204d0
 8005548:	500204d0 	.word	0x500204d0
 800554c:	40020550 	.word	0x40020550
 8005550:	50020550 	.word	0x50020550
 8005554:	400205d0 	.word	0x400205d0
 8005558:	500205d0 	.word	0x500205d0
 800555c:	40020650 	.word	0x40020650
 8005560:	50020650 	.word	0x50020650
 8005564:	400206d0 	.word	0x400206d0
 8005568:	500206d0 	.word	0x500206d0
 800556c:	40020750 	.word	0x40020750
 8005570:	50020750 	.word	0x50020750
 8005574:	400207d0 	.word	0x400207d0
 8005578:	500207d0 	.word	0x500207d0

0800557c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_DMAEx_List_Start_IT+0x16>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e082      	b.n	800569c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800559c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055a8:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80055aa:	7dfb      	ldrb	r3, [r7, #23]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d005      	beq.n	80055bc <HAL_DMAEx_List_Start_IT+0x40>
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d16a      	bne.n	800568c <HAL_DMAEx_List_Start_IT+0x110>
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d067      	beq.n	800568c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d157      	bne.n	8005678 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_DMAEx_List_Start_IT+0x5a>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e062      	b.n	800569c <HAL_DMAEx_List_Start_IT+0x120>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2202      	movs	r2, #2
 80055e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ea:	2202      	movs	r2, #2
 80055ec:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f8:	2200      	movs	r2, #0
 80055fa:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695a      	ldr	r2, [r3, #20]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800560a:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005610:	2b00      	cmp	r3, #0
 8005612:	d007      	beq.n	8005624 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695a      	ldr	r2, [r3, #20]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005622:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005628:	2b00      	cmp	r3, #0
 800562a:	d007      	beq.n	800563c <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695a      	ldr	r2, [r3, #20]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800563a:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f107 010c 	add.w	r1, r7, #12
 8005646:	2200      	movs	r2, #0
 8005648:	4618      	mov	r0, r3
 800564a:	f000 fe37 	bl	80062bc <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4619      	mov	r1, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	0c0b      	lsrs	r3, r1, #16
 800565c:	041b      	lsls	r3, r3, #16
 800565e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800566c:	4013      	ands	r3, r2
 800566e:	68f9      	ldr	r1, [r7, #12]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6812      	ldr	r2, [r2, #0]
 8005674:	430b      	orrs	r3, r1
 8005676:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695a      	ldr	r2, [r3, #20]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0201 	orr.w	r2, r2, #1
 8005686:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
 800568a:	e007      	b.n	800569c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2240      	movs	r2, #64	@ 0x40
 8005690:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <HAL_DMAEx_List_BuildNode+0x16>
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e004      	b.n	80056c8 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80056be:	6839      	ldr	r1, [r7, #0]
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fb33 	bl	8005d2c <DMA_List_BuildNode>

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <HAL_DMAEx_List_GetNodeConfig+0x16>
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e004      	b.n	80056f4 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80056ea:	6839      	ldr	r1, [r7, #0]
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fc6f 	bl	8005fd0 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08c      	sub	sp, #48	@ 0x30
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <HAL_DMAEx_List_InsertNode+0x18>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e0b6      	b.n	8005886 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d104      	bne.n	800572a <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2204      	movs	r2, #4
 8005724:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e0ad      	b.n	8005886 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fd56 	bl	80061e4 <DMA_List_CheckNodesBaseAddresses>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d004      	beq.n	8005748 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2205      	movs	r2, #5
 8005742:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e09e      	b.n	8005886 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	68b9      	ldr	r1, [r7, #8]
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fd77 	bl	8006244 <DMA_List_CheckNodesTypes>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d004      	beq.n	8005766 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2204      	movs	r2, #4
 8005760:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e08f      	b.n	8005886 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2202      	movs	r2, #2
 800576a:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8005772:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005776:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800577a:	4619      	mov	r1, r3
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fd9d 	bl	80062bc <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d11a      	bne.n	80057c0 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d106      	bne.n	800579e <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	609a      	str	r2, [r3, #8]
 800579c:	e06c      	b.n	8005878 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80057aa:	4013      	ands	r3, r2
 80057ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057b0:	4319      	orrs	r1, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2202      	movs	r2, #2
 80057bc:	609a      	str	r2, [r3, #8]
 80057be:	e05b      	b.n	8005878 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10f      	bne.n	80057e6 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80057d0:	4013      	ands	r3, r2
 80057d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057d6:	4319      	orrs	r1, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	e043      	b.n	800586e <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80057e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e8:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80057ea:	f107 0314 	add.w	r3, r7, #20
 80057ee:	461a      	mov	r2, r3
 80057f0:	68b9      	ldr	r1, [r7, #8]
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 fd92 	bl	800631c <DMA_List_FindNode>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d132      	bne.n	8005864 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	429a      	cmp	r2, r3
 8005806:	d11a      	bne.n	800583e <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00b      	beq.n	8005828 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	461a      	mov	r2, r3
 8005816:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800581a:	4013      	ands	r3, r2
 800581c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800581e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005820:	4319      	orrs	r1, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800582e:	4013      	ands	r3, r2
 8005830:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005832:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005834:	4319      	orrs	r1, r3
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800583c:	e017      	b.n	800586e <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 800583e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005854:	4013      	ands	r3, r2
 8005856:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005858:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800585a:	4319      	orrs	r1, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005862:	e004      	b.n	800586e <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2206      	movs	r2, #6
 8005868:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e00b      	b.n	8005886 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3730      	adds	r7, #48	@ 0x30
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b08a      	sub	sp, #40	@ 0x28
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e052      	b.n	8005946 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d104      	bne.n	80058b2 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e049      	b.n	8005946 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00c      	beq.n	80058d4 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d101      	bne.n	80058ca <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	e03d      	b.n	8005946 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2204      	movs	r2, #4
 80058ce:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e038      	b.n	8005946 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d104      	bne.n	80058e6 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2204      	movs	r2, #4
 80058e0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e02f      	b.n	8005946 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2202      	movs	r2, #2
 80058ea:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f107 0220 	add.w	r2, r7, #32
 80058fa:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 fcdc 	bl	80062bc <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8005908:	f107 030c 	add.w	r3, r7, #12
 800590c:	461a      	mov	r2, r3
 800590e:	2100      	movs	r1, #0
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fd03 	bl	800631c <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005920:	4013      	ands	r3, r2
 8005922:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	4610      	mov	r0, r2
 8005928:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800592a:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800592c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3728      	adds	r7, #40	@ 0x28
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <HAL_DMAEx_List_LinkQ+0x16>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e072      	b.n	8005a50 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005970:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d002      	beq.n	8005984 <HAL_DMAEx_List_LinkQ+0x34>
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	2b05      	cmp	r3, #5
 8005982:	d108      	bne.n	8005996 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2240      	movs	r2, #64	@ 0x40
 8005988:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e05c      	b.n	8005a50 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	7b1b      	ldrb	r3, [r3, #12]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d104      	bne.n	80059aa <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2201      	movs	r2, #1
 80059a4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e052      	b.n	8005a50 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a2b      	ldr	r2, [pc, #172]	@ (8005a5c <HAL_DMAEx_List_LinkQ+0x10c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d022      	beq.n	80059fa <HAL_DMAEx_List_LinkQ+0xaa>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a29      	ldr	r2, [pc, #164]	@ (8005a60 <HAL_DMAEx_List_LinkQ+0x110>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d01d      	beq.n	80059fa <HAL_DMAEx_List_LinkQ+0xaa>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a28      	ldr	r2, [pc, #160]	@ (8005a64 <HAL_DMAEx_List_LinkQ+0x114>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d018      	beq.n	80059fa <HAL_DMAEx_List_LinkQ+0xaa>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a26      	ldr	r2, [pc, #152]	@ (8005a68 <HAL_DMAEx_List_LinkQ+0x118>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d013      	beq.n	80059fa <HAL_DMAEx_List_LinkQ+0xaa>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a25      	ldr	r2, [pc, #148]	@ (8005a6c <HAL_DMAEx_List_LinkQ+0x11c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00e      	beq.n	80059fa <HAL_DMAEx_List_LinkQ+0xaa>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a23      	ldr	r2, [pc, #140]	@ (8005a70 <HAL_DMAEx_List_LinkQ+0x120>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d009      	beq.n	80059fa <HAL_DMAEx_List_LinkQ+0xaa>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a22      	ldr	r2, [pc, #136]	@ (8005a74 <HAL_DMAEx_List_LinkQ+0x124>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d004      	beq.n	80059fa <HAL_DMAEx_List_LinkQ+0xaa>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a20      	ldr	r2, [pc, #128]	@ (8005a78 <HAL_DMAEx_List_LinkQ+0x128>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d101      	bne.n	80059fe <HAL_DMAEx_List_LinkQ+0xae>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <HAL_DMAEx_List_LinkQ+0xb0>
 80059fe:	2300      	movs	r3, #0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10b      	bne.n	8005a1c <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d004      	beq.n	8005a1c <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2203      	movs	r2, #3
 8005a16:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e019      	b.n	8005a50 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a20:	2b81      	cmp	r3, #129	@ 0x81
 8005a22:	d108      	bne.n	8005a36 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10d      	bne.n	8005a48 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2204      	movs	r2, #4
 8005a30:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e00c      	b.n	8005a50 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d004      	beq.n	8005a48 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2204      	movs	r2, #4
 8005a42:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e003      	b.n	8005a50 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	40020650 	.word	0x40020650
 8005a60:	50020650 	.word	0x50020650
 8005a64:	400206d0 	.word	0x400206d0
 8005a68:	500206d0 	.word	0x500206d0
 8005a6c:	40020750 	.word	0x40020750
 8005a70:	50020750 	.word	0x50020750
 8005a74:	400207d0 	.word	0x400207d0
 8005a78:	500207d0 	.word	0x500207d0

08005a7c <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a85      	ldr	r2, [pc, #532]	@ (8005cac <DMA_List_Init+0x230>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	f000 80a0 	beq.w	8005bdc <DMA_List_Init+0x160>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a83      	ldr	r2, [pc, #524]	@ (8005cb0 <DMA_List_Init+0x234>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	f000 809a 	beq.w	8005bdc <DMA_List_Init+0x160>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a81      	ldr	r2, [pc, #516]	@ (8005cb4 <DMA_List_Init+0x238>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	f000 8094 	beq.w	8005bdc <DMA_List_Init+0x160>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a7f      	ldr	r2, [pc, #508]	@ (8005cb8 <DMA_List_Init+0x23c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	f000 808e 	beq.w	8005bdc <DMA_List_Init+0x160>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a7d      	ldr	r2, [pc, #500]	@ (8005cbc <DMA_List_Init+0x240>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	f000 8088 	beq.w	8005bdc <DMA_List_Init+0x160>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a7b      	ldr	r2, [pc, #492]	@ (8005cc0 <DMA_List_Init+0x244>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	f000 8082 	beq.w	8005bdc <DMA_List_Init+0x160>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a79      	ldr	r2, [pc, #484]	@ (8005cc4 <DMA_List_Init+0x248>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d07c      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a78      	ldr	r2, [pc, #480]	@ (8005cc8 <DMA_List_Init+0x24c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d077      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a76      	ldr	r2, [pc, #472]	@ (8005ccc <DMA_List_Init+0x250>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d072      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a75      	ldr	r2, [pc, #468]	@ (8005cd0 <DMA_List_Init+0x254>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d06d      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a73      	ldr	r2, [pc, #460]	@ (8005cd4 <DMA_List_Init+0x258>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d068      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a72      	ldr	r2, [pc, #456]	@ (8005cd8 <DMA_List_Init+0x25c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d063      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a70      	ldr	r2, [pc, #448]	@ (8005cdc <DMA_List_Init+0x260>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d05e      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a6f      	ldr	r2, [pc, #444]	@ (8005ce0 <DMA_List_Init+0x264>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d059      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a6d      	ldr	r2, [pc, #436]	@ (8005ce4 <DMA_List_Init+0x268>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d054      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a6c      	ldr	r2, [pc, #432]	@ (8005ce8 <DMA_List_Init+0x26c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d04f      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a6a      	ldr	r2, [pc, #424]	@ (8005cec <DMA_List_Init+0x270>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d04a      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a69      	ldr	r2, [pc, #420]	@ (8005cf0 <DMA_List_Init+0x274>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d045      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a67      	ldr	r2, [pc, #412]	@ (8005cf4 <DMA_List_Init+0x278>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d040      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a66      	ldr	r2, [pc, #408]	@ (8005cf8 <DMA_List_Init+0x27c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d03b      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a64      	ldr	r2, [pc, #400]	@ (8005cfc <DMA_List_Init+0x280>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d036      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a63      	ldr	r2, [pc, #396]	@ (8005d00 <DMA_List_Init+0x284>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d031      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a61      	ldr	r2, [pc, #388]	@ (8005d04 <DMA_List_Init+0x288>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d02c      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a60      	ldr	r2, [pc, #384]	@ (8005d08 <DMA_List_Init+0x28c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d027      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a5e      	ldr	r2, [pc, #376]	@ (8005d0c <DMA_List_Init+0x290>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d022      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a5d      	ldr	r2, [pc, #372]	@ (8005d10 <DMA_List_Init+0x294>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d01d      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a5b      	ldr	r2, [pc, #364]	@ (8005d14 <DMA_List_Init+0x298>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d018      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a5a      	ldr	r2, [pc, #360]	@ (8005d18 <DMA_List_Init+0x29c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d013      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a58      	ldr	r2, [pc, #352]	@ (8005d1c <DMA_List_Init+0x2a0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00e      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a57      	ldr	r2, [pc, #348]	@ (8005d20 <DMA_List_Init+0x2a4>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d009      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a55      	ldr	r2, [pc, #340]	@ (8005d24 <DMA_List_Init+0x2a8>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <DMA_List_Init+0x160>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a54      	ldr	r2, [pc, #336]	@ (8005d28 <DMA_List_Init+0x2ac>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d101      	bne.n	8005be0 <DMA_List_Init+0x164>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e000      	b.n	8005be2 <DMA_List_Init+0x166>
 8005be0:	2300      	movs	r3, #0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d004      	beq.n	8005bf0 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005c14:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2200      	movs	r2, #0
 8005c24:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a36      	ldr	r2, [pc, #216]	@ (8005d0c <DMA_List_Init+0x290>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d022      	beq.n	8005c7e <DMA_List_Init+0x202>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a34      	ldr	r2, [pc, #208]	@ (8005d10 <DMA_List_Init+0x294>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d01d      	beq.n	8005c7e <DMA_List_Init+0x202>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a33      	ldr	r2, [pc, #204]	@ (8005d14 <DMA_List_Init+0x298>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d018      	beq.n	8005c7e <DMA_List_Init+0x202>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a31      	ldr	r2, [pc, #196]	@ (8005d18 <DMA_List_Init+0x29c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d013      	beq.n	8005c7e <DMA_List_Init+0x202>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a30      	ldr	r2, [pc, #192]	@ (8005d1c <DMA_List_Init+0x2a0>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d00e      	beq.n	8005c7e <DMA_List_Init+0x202>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2e      	ldr	r2, [pc, #184]	@ (8005d20 <DMA_List_Init+0x2a4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d009      	beq.n	8005c7e <DMA_List_Init+0x202>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a2d      	ldr	r2, [pc, #180]	@ (8005d24 <DMA_List_Init+0x2a8>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d004      	beq.n	8005c7e <DMA_List_Init+0x202>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a2b      	ldr	r2, [pc, #172]	@ (8005d28 <DMA_List_Init+0x2ac>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d101      	bne.n	8005c82 <DMA_List_Init+0x206>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e000      	b.n	8005c84 <DMA_List_Init+0x208>
 8005c82:	2300      	movs	r3, #0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2200      	movs	r2, #0
 8005c96:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005ca0:	bf00      	nop
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	40020050 	.word	0x40020050
 8005cb0:	50020050 	.word	0x50020050
 8005cb4:	400200d0 	.word	0x400200d0
 8005cb8:	500200d0 	.word	0x500200d0
 8005cbc:	40020150 	.word	0x40020150
 8005cc0:	50020150 	.word	0x50020150
 8005cc4:	400201d0 	.word	0x400201d0
 8005cc8:	500201d0 	.word	0x500201d0
 8005ccc:	40020250 	.word	0x40020250
 8005cd0:	50020250 	.word	0x50020250
 8005cd4:	400202d0 	.word	0x400202d0
 8005cd8:	500202d0 	.word	0x500202d0
 8005cdc:	40020350 	.word	0x40020350
 8005ce0:	50020350 	.word	0x50020350
 8005ce4:	400203d0 	.word	0x400203d0
 8005ce8:	500203d0 	.word	0x500203d0
 8005cec:	40020450 	.word	0x40020450
 8005cf0:	50020450 	.word	0x50020450
 8005cf4:	400204d0 	.word	0x400204d0
 8005cf8:	500204d0 	.word	0x500204d0
 8005cfc:	40020550 	.word	0x40020550
 8005d00:	50020550 	.word	0x50020550
 8005d04:	400205d0 	.word	0x400205d0
 8005d08:	500205d0 	.word	0x500205d0
 8005d0c:	40020650 	.word	0x40020650
 8005d10:	50020650 	.word	0x50020650
 8005d14:	400206d0 	.word	0x400206d0
 8005d18:	500206d0 	.word	0x500206d0
 8005d1c:	40020750 	.word	0x40020750
 8005d20:	50020750 	.word	0x50020750
 8005d24:	400207d0 	.word	0x400207d0
 8005d28:	500207d0 	.word	0x500207d0

08005d2c <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005d3e:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8005d44:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8005d4a:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8005d50:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d017      	beq.n	8005d92 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6e:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d74:	3b01      	subs	r3, #1
 8005d76:	051b      	lsls	r3, r3, #20
 8005d78:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8005d7c:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d82:	3b01      	subs	r3, #1
 8005d84:	011b      	lsls	r3, r3, #4
 8005d86:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8005d8a:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6859      	ldr	r1, [r3, #4]
 8005d9a:	f240 237f 	movw	r3, #639	@ 0x27f
 8005d9e:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8005da0:	431a      	orrs	r2, r3
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dae:	d10c      	bne.n	8005dca <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d011      	beq.n	8005de0 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	605a      	str	r2, [r3, #4]
 8005dc8:	e00a      	b.n	8005de0 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dd2:	d105      	bne.n	8005de0 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00f      	beq.n	8005e08 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df4:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dfa:	041b      	lsls	r3, r3, #16
 8005dfc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005e00:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005e02:	431a      	orrs	r2, r3
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d04e      	beq.n	8005ebc <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e26:	3b01      	subs	r3, #1
 8005e28:	0419      	lsls	r1, r3, #16
 8005e2a:	4b67      	ldr	r3, [pc, #412]	@ (8005fc8 <DMA_List_BuildNode+0x29c>)
 8005e2c:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	da06      	bge.n	8005e4a <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	609a      	str	r2, [r3, #8]
 8005e48:	e005      	b.n	8005e56 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	da06      	bge.n	8005e6c <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	609a      	str	r2, [r3, #8]
 8005e6a:	e005      	b.n	8005e78 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	da06      	bge.n	8005e8e <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	609a      	str	r2, [r3, #8]
 8005e8c:	e005      	b.n	8005e9a <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	da06      	bge.n	8005eb0 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	609a      	str	r2, [r3, #8]
 8005eae:	e005      	b.n	8005ebc <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d059      	beq.n	8005f8c <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	da09      	bge.n	8005ef4 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ee4:	425b      	negs	r3, r3
 8005ee6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	615a      	str	r2, [r3, #20]
 8005ef2:	e005      	b.n	8005f00 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef8:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	da0d      	bge.n	8005f24 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f0c:	425b      	negs	r3, r3
 8005f0e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	695a      	ldr	r2, [r3, #20]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	0419      	lsls	r1, r3, #16
 8005f18:	4b2c      	ldr	r3, [pc, #176]	@ (8005fcc <DMA_List_BuildNode+0x2a0>)
 8005f1a:	400b      	ands	r3, r1
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	615a      	str	r2, [r3, #20]
 8005f22:	e009      	b.n	8005f38 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f2c:	0419      	lsls	r1, r3, #16
 8005f2e:	4b27      	ldr	r3, [pc, #156]	@ (8005fcc <DMA_List_BuildNode+0x2a0>)
 8005f30:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005f32:	431a      	orrs	r2, r3
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	da08      	bge.n	8005f52 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f44:	425b      	negs	r3, r3
 8005f46:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	619a      	str	r2, [r3, #24]
 8005f50:	e004      	b.n	8005f5c <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f56:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	da0b      	bge.n	8005f7c <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f68:	425b      	negs	r3, r3
 8005f6a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005f74:	431a      	orrs	r2, r3
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	619a      	str	r2, [r3, #24]
 8005f7a:	e007      	b.n	8005f8c <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f84:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005f86:	431a      	orrs	r2, r3
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d006      	beq.n	8005fae <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8005fac:	e005      	b.n	8005fba <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	621a      	str	r2, [r3, #32]
}
 8005fba:	bf00      	nop
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	07ff0000 	.word	0x07ff0000
 8005fcc:	1fff0000 	.word	0x1fff0000

08005fd0 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0208 	and.w	r2, r3, #8
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0203 	and.w	r2, r3, #3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8006018:	091b      	lsrs	r3, r3, #4
 800601a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800601e:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8006028:	0d1b      	lsrs	r3, r3, #20
 800602a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800602e:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	4b66      	ldr	r3, [pc, #408]	@ (80061e0 <DMA_List_GetNodeConfig+0x210>)
 8006046:	4013      	ands	r3, r2
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006060:	2b00      	cmp	r3, #0
 8006062:	d008      	beq.n	8006076 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800606a:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006072:	60da      	str	r2, [r3, #12]
 8006074:	e013      	b.n	800609e <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800608a:	2b00      	cmp	r3, #0
 800608c:	d004      	beq.n	8006098 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006094:	60da      	str	r2, [r3, #12]
 8006096:	e002      	b.n	800609e <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 80060c6:	0c1b      	lsrs	r3, r3, #16
 80060c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d008      	beq.n	8006104 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	0c1b      	lsrs	r3, r3, #16
 80060f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060fc:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006102:	e002      	b.n	800610a <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	691a      	ldr	r2, [r3, #16]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d04a      	beq.n	80061bc <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	b29b      	uxth	r3, r3
 800612c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006130:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8006132:	89fa      	ldrh	r2, [r7, #14]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	0c1b      	lsrs	r3, r3, #16
 800613e:	b29b      	uxth	r3, r3
 8006140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006144:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8006146:	89fa      	ldrh	r2, [r7, #14]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800615c:	425a      	negs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006172:	425a      	negs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 800617e:	89fa      	ldrh	r2, [r7, #14]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	0c1b      	lsrs	r3, r3, #16
 800618a:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 800618c:	89fa      	ldrh	r2, [r7, #14]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d004      	beq.n	80061a8 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a2:	425a      	negs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	da11      	bge.n	80061d4 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b4:	425a      	negs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 80061ba:	e00b      	b.n	80061d4 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80061d4:	bf00      	nop
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	0c002000 	.word	0x0c002000

080061e4 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	0c1b      	lsrs	r3, r3, #16
 80061fc:	041b      	lsls	r3, r3, #16
 80061fe:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d002      	beq.n	8006210 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	e00a      	b.n	8006226 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	e004      	b.n	8006226 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	0c1b      	lsrs	r3, r3, #16
 800622a:	041b      	lsls	r3, r3, #16
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	429a      	cmp	r2, r3
 8006230:	d001      	beq.n	8006236 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8006232:	2301      	movs	r3, #1
 8006234:	e000      	b.n	8006238 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	371c      	adds	r7, #28
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8006250:	2300      	movs	r3, #0
 8006252:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d004      	beq.n	8006264 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	e00e      	b.n	8006282 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d004      	beq.n	8006274 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	b2db      	uxtb	r3, r3
 8006270:	617b      	str	r3, [r7, #20]
 8006272:	e006      	b.n	8006282 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	b2db      	uxtb	r3, r3
 8006280:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d007      	beq.n	8006298 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	b2db      	uxtb	r3, r3
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	429a      	cmp	r2, r3
 8006292:	d001      	beq.n	8006298 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8006294:	2302      	movs	r3, #2
 8006296:	e00b      	b.n	80062b0 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d007      	beq.n	80062ae <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d001      	beq.n	80062ae <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e000      	b.n	80062b0 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	371c      	adds	r7, #28
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00c      	beq.n	80062ee <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	4a0d      	ldr	r2, [pc, #52]	@ (8006314 <DMA_List_GetCLLRNodeInfo+0x58>)
 80062de:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00f      	beq.n	8006306 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2207      	movs	r2, #7
 80062ea:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80062ec:	e00b      	b.n	8006306 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	4a08      	ldr	r2, [pc, #32]	@ (8006318 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80062f8:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2205      	movs	r2, #5
 8006304:	601a      	str	r2, [r3, #0]
}
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	fe010000 	.word	0xfe010000
 8006318:	f8010000 	.word	0xf8010000

0800631c <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 800631c:	b480      	push	{r7}
 800631e:	b089      	sub	sp, #36	@ 0x24
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d142      	bne.n	80063c6 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8006340:	e01d      	b.n	800637e <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d107      	bne.n	8006358 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	461a      	mov	r2, r3
 800634e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006352:	4013      	ands	r3, r2
 8006354:	61bb      	str	r3, [r7, #24]
 8006356:	e00f      	b.n	8006378 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	0c1b      	lsrs	r3, r3, #16
 8006362:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	4413      	add	r3, r2
 8006368:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8006370:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006374:	4013      	ands	r3, r2
 8006376:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	3301      	adds	r3, #1
 800637c:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	429a      	cmp	r2, r3
 8006386:	d3dc      	bcc.n	8006342 <DMA_List_FindNode+0x26>
 8006388:	e029      	b.n	80063de <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d107      	bne.n	80063a0 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
 8006396:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800639a:	4013      	ands	r3, r2
 800639c:	61bb      	str	r3, [r7, #24]
 800639e:	e00f      	b.n	80063c0 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	0c1b      	lsrs	r3, r3, #16
 80063aa:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	4413      	add	r3, r2
 80063b0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80063b8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80063bc:	4013      	ands	r3, r2
 80063be:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	3301      	adds	r3, #1
 80063c4:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d206      	bcs.n	80063de <DMA_List_FindNode+0xc2>
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80063d6:	4013      	ands	r3, r2
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d1d5      	bne.n	800638a <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d008      	beq.n	80063f6 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80063ea:	4013      	ands	r3, r2
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d001      	beq.n	80063f6 <DMA_List_FindNode+0xda>
    {
      return 1U;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e02b      	b.n	800644e <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	69fa      	ldr	r2, [r7, #28]
 80063fa:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	0c1b      	lsrs	r3, r3, #16
 8006402:	041b      	lsls	r3, r3, #16
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	431a      	orrs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	0c1b      	lsrs	r3, r3, #16
 8006412:	041b      	lsls	r3, r3, #16
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	461a      	mov	r2, r3
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00f      	beq.n	800644c <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	461a      	mov	r2, r3
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006438:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800643c:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	0c1b      	lsrs	r3, r3, #16
 8006444:	041b      	lsls	r3, r3, #16
 8006446:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3724      	adds	r7, #36	@ 0x24
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 800645a:	b480      	push	{r7}
 800645c:	b085      	sub	sp, #20
 800645e:	af00      	add	r7, sp, #0
 8006460:	60f8      	str	r0, [r7, #12]
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	607a      	str	r2, [r7, #4]
 8006466:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	019a      	lsls	r2, r3, #6
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	431a      	orrs	r2, r3
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	021b      	lsls	r3, r3, #8
 8006474:	431a      	orrs	r2, r3
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	041b      	lsls	r3, r3, #16
 800647a:	431a      	orrs	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8006480:	bf00      	nop
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800649a:	f7fb fe6d 	bl	8002178 <HAL_GetTick>
 800649e:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80064a0:	e008      	b.n	80064b4 <DSI_ShortWrite+0x28>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80064a2:	f7fb fe69 	bl	8002178 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	2b64      	cmp	r3, #100	@ 0x64
 80064ae:	d901      	bls.n	80064b4 <DSI_ShortWrite+0x28>
    {
      return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e015      	b.n	80064e0 <DSI_ShortWrite+0x54>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0ef      	beq.n	80064a2 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	019a      	lsls	r2, r3, #6
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	431a      	orrs	r2, r3
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	021b      	lsls	r3, r3, #8
 80064ce:	ea42 0103 	orr.w	r1, r2, r3
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	041a      	lsls	r2, r3, #16
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3718      	adds	r7, #24
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8006500:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	@ 0xc04
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	00da      	lsls	r2, r3, #3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	220e      	movs	r2, #14
 8006522:	f8c3 2c34 	str.w	r2, [r3, #3124]	@ 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	@ 0xc70
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 021f 	bic.w	r2, r2, #31
 8006536:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6912      	ldr	r2, [r2, #16]
 8006542:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	220e      	movs	r2, #14
 800654c:	f8c3 2ca0 	str.w	r2, [r3, #3232]	@ 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	@ 0xd08
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 021f 	bic.w	r2, r2, #31
 8006560:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6912      	ldr	r2, [r2, #16]
 800656c:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	220e      	movs	r2, #14
 8006576:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	@ 0xc5c
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800658a:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	@ 0xcf4
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800659e:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d007      	beq.n	80065ba <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d003      	beq.n	80065ba <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 80065b6:	2b05      	cmp	r3, #5
 80065b8:	d10a      	bne.n	80065d0 <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2200      	movs	r2, #0
 80065c0:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 80065ce:	e02c      	b.n	800662a <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00b      	beq.n	80065f0 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d007      	beq.n	80065f0 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 80065e4:	2b04      	cmp	r3, #4
 80065e6:	d003      	beq.n	80065f0 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 80065ec:	2b06      	cmp	r3, #6
 80065ee:	d10a      	bne.n	8006606 <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2210      	movs	r2, #16
 80065f6:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2210      	movs	r2, #16
 8006600:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 8006604:	e011      	b.n	800662a <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	2b07      	cmp	r3, #7
 800660c:	d003      	beq.n	8006616 <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8006612:	2b08      	cmp	r3, #8
 8006614:	d109      	bne.n	800662a <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2220      	movs	r2, #32
 800661c:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2220      	movs	r2, #32
 8006626:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	@ 0xc60
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 020f 	bic.w	r2, r2, #15
 800663a:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	@ 0xcf8
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 020f 	bic.w	r2, r2, #15
 800664e:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	6952      	ldr	r2, [r2, #20]
 800665a:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6952      	ldr	r2, [r2, #20]
 8006666:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8006690:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	075a      	lsls	r2, r3, #29
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f8d3 2434 	ldr.w	r2, [r3, #1076]	@ 0x434
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80066bc:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	031a      	lsls	r2, r3, #12
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	021a      	lsls	r2, r3, #8
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e124      	b.n	800695a <HAL_DSI_Init+0x25e>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	7e5b      	ldrb	r3, [r3, #25]
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d102      	bne.n	8006720 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fb f982 	bl	8001a24 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2203      	movs	r2, #3
 8006724:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006736:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 800673a:	2002      	movs	r0, #2
 800673c:	f7fb fd28 	bl	8002190 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	4b85      	ldr	r3, [pc, #532]	@ (8006964 <HAL_DSI_Init+0x268>)
 800674e:	400b      	ands	r3, r1
 8006750:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006768:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006770:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800677c:	2300      	movs	r3, #0
 800677e:	613b      	str	r3, [r7, #16]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 0201 	orr.w	r2, r2, #1
 8006790:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	613b      	str	r3, [r7, #16]
 80067a2:	693b      	ldr	r3, [r7, #16]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80067a4:	2001      	movs	r0, #1
 80067a6:	f7fb fcf3 	bl	8002190 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80067aa:	f7fb fce5 	bl	8002178 <HAL_GetTick>
 80067ae:	6178      	str	r0, [r7, #20]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80067b0:	e008      	b.n	80067c4 <HAL_DSI_Init+0xc8>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80067b2:	f7fb fce1 	bl	8002178 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b64      	cmp	r3, #100	@ 0x64
 80067be:	d901      	bls.n	80067c4 <HAL_DSI_Init+0xc8>
    {
      return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e0ca      	b.n	800695a <HAL_DSI_Init+0x25e>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80067cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d0ee      	beq.n	80067b2 <HAL_DSI_Init+0xb6>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 80067d4:	2300      	movs	r3, #0
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0201 	orr.w	r2, r2, #1
 80067e6:	605a      	str	r2, [r3, #4]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006804:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6899      	ldr	r1, [r3, #8]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f042 0202 	orr.w	r2, r2, #2
 8006828:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7ff fe5b 	bl	80064e8 <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7ff ff1e 	bl	8006676 <DSI_SetWrapperPLLTuning>

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0204 	orr.w	r2, r2, #4
 800684a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0203 	bic.w	r2, r2, #3
 800685e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8006878:	f7fb fc7e 	bl	8002178 <HAL_GetTick>
 800687c:	6178      	str	r0, [r7, #20]
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d121      	bne.n	80068d2 <HAL_DSI_Init+0x1d6>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800688e:	e00b      	b.n	80068a8 <HAL_DSI_Init+0x1ac>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006890:	f7fb fc72 	bl	8002178 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b64      	cmp	r3, #100	@ 0x64
 800689c:	d904      	bls.n	80068a8 <HAL_DSI_Init+0x1ac>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e058      	b.n	800695a <HAL_DSI_Init+0x25e>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80068b0:	f003 0314 	and.w	r3, r3, #20
 80068b4:	2b14      	cmp	r3, #20
 80068b6:	d1eb      	bne.n	8006890 <HAL_DSI_Init+0x194>
 80068b8:	e013      	b.n	80068e2 <HAL_DSI_Init+0x1e6>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80068ba:	f7fb fc5d 	bl	8002178 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b64      	cmp	r3, #100	@ 0x64
 80068c6:	d904      	bls.n	80068d2 <HAL_DSI_Init+0x1d6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e043      	b.n	800695a <HAL_DSI_Init+0x25e>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80068da:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 80068de:	2b94      	cmp	r3, #148	@ 0x94
 80068e0:	d1eb      	bne.n	80068ba <HAL_DSI_Init+0x1be>


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	621a      	str	r2, [r3, #32]

  __HAL_DSI_DISABLE(hdsi);
 80068fc:	2300      	movs	r3, #0
 80068fe:	60bb      	str	r3, [r7, #8]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0201 	bic.w	r2, r2, #1
 800690e:	605a      	str	r2, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	60bb      	str	r3, [r7, #8]
 800691c:	68bb      	ldr	r3, [r7, #8]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 0203 	bic.w	r2, r2, #3
 800692e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0201 	orr.w	r2, r2, #1
 8006948:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	e0000003 	.word	0xe0000003

08006968 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	7e1b      	ldrb	r3, [r3, #24]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <HAL_DSI_ConfigErrorMonitor+0x16>
 800697a:	2302      	movs	r3, #2
 800697c:	e0ba      	b.n	8006af4 <HAL_DSI_ConfigErrorMonitor+0x18c>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2200      	movs	r2, #0
 800698a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00b      	beq.n	80069c0 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	6812      	ldr	r2, [r2, #0]
 80069b4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80069b8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80069bc:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 80069da:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	f003 0304 	and.w	r3, r3, #4
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d009      	beq.n	80069fc <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f042 0201 	orr.w	r2, r2, #1
 80069f8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	f003 0308 	and.w	r3, r3, #8
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d009      	beq.n	8006a1a <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0202 	orr.w	r2, r2, #2
 8006a16:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	f003 0310 	and.w	r3, r3, #16
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d009      	beq.n	8006a38 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 020c 	orr.w	r2, r2, #12
 8006a34:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d009      	beq.n	8006a56 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0210 	orr.w	r2, r2, #16
 8006a52:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d009      	beq.n	8006a74 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f042 0220 	orr.w	r2, r2, #32
 8006a70:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d009      	beq.n	8006a92 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a8e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d009      	beq.n	8006ab0 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006aac:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d009      	beq.n	8006ace <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8006aca:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d009      	beq.n	8006aec <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8006ae8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00f      	beq.n	8006b38 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d007      	beq.n	8006b38 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f8b8 	bl	8006ca8 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00f      	beq.n	8006b68 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d007      	beq.n	8006b68 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f8aa 	bl	8006cbc <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 8097 	beq.w	8006ca0 <HAL_DSI_IRQHandler+0x1a0>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006b7a:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4013      	ands	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006b92:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d005      	beq.n	8006bb6 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	f043 0201 	orr.w	r2, r3, #1
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	f043 0202 	orr.w	r2, r3, #2
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d005      	beq.n	8006be2 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f043 0204 	orr.w	r2, r3, #4
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d005      	beq.n	8006bf8 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	f043 0208 	orr.w	r2, r3, #8
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f003 030c 	and.w	r3, r3, #12
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	f043 0210 	orr.w	r2, r3, #16
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f003 0310 	and.w	r3, r3, #16
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	f043 0220 	orr.w	r2, r3, #32
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d005      	beq.n	8006c3a <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d005      	beq.n	8006c66 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d005      	beq.n	8006c7c <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PBU_MASK) != 0U)
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d005      	beq.n	8006c92 <HAL_DSI_IRQHandler+0x192>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PBU;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	61da      	str	r2, [r3, #28]
    }
    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <HAL_DSI_IRQHandler+0x1a0>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f818 	bl	8006cd0 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8006ca0:	bf00      	nop
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	7e1b      	ldrb	r3, [r3, #24]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d101      	bne.n	8006cfa <HAL_DSI_SetGenericVCID+0x16>
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	e019      	b.n	8006d2e <HAL_DSI_SetGenericVCID+0x4a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 1203 	bic.w	r2, r2, #196611	@ 0x30003
 8006d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6b19      	ldr	r1, [r3, #48]	@ 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	431a      	orrs	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	7e1b      	ldrb	r3, [r3, #24]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d101      	bne.n	8006d50 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e0c5      	b.n	8006edc <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f042 0201 	orr.w	r2, r2, #1
 8006d64:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0201 	bic.w	r2, r2, #1
 8006d76:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0201 	orr.w	r2, r2, #1
 8006d8a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 0203 	bic.w	r2, r2, #3
 8006d9c:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68d9      	ldr	r1, [r3, #12]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	695a      	ldr	r2, [r3, #20]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0207 	bic.w	r2, r2, #7
 8006dbe:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6959      	ldr	r1, [r3, #20]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	69da      	ldr	r2, [r3, #28]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	691a      	ldr	r2, [r3, #16]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 020f 	bic.w	r2, r2, #15
 8006dec:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6919      	ldr	r1, [r3, #16]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 020e 	bic.w	r2, r2, #14
 8006e10:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	005a      	lsls	r2, r3, #1
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	6812      	ldr	r2, [r2, #0]
 8006e36:	0c1b      	lsrs	r3, r3, #16
 8006e38:	041b      	lsls	r3, r3, #16
 8006e3a:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006e5e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	431a      	orrs	r2, r3
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e78:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0201 	bic.w	r2, r2, #1
 8006e98:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f042 0201 	orr.w	r2, r2, #1
 8006ebc:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f042 0202 	orr.w	r2, r2, #2
 8006ed0:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	7e1b      	ldrb	r3, [r3, #24]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d101      	bne.n	8006efe <HAL_DSI_ConfigCommand+0x16>
 8006efa:	2302      	movs	r3, #2
 8006efc:	e049      	b.n	8006f92 <HAL_DSI_ConfigCommand+0xaa>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b24      	ldr	r3, [pc, #144]	@ (8006fa0 <HAL_DSI_ConfigCommand+0xb8>)
 8006f10:	400b      	ands	r3, r1
 8006f12:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006f22:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8006f28:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8006f2e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8006f34:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8006f3a:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8006f40:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8006f46:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8006f4c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8006f52:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8006f58:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8006f5e:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0202 	bic.w	r2, r2, #2
 8006f76:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	fef080ff 	.word	0xfef080ff

08006fa4 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	7e1b      	ldrb	r3, [r3, #24]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d101      	bne.n	8006fba <HAL_DSI_ConfigFlowControl+0x16>
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	e016      	b.n	8006fe8 <HAL_DSI_ConfigFlowControl+0x44>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8006fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	7e1b      	ldrb	r3, [r3, #24]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d101      	bne.n	800700a <HAL_DSI_ConfigPhyTimer+0x16>
 8007006:	2302      	movs	r3, #2
 8007008:	e084      	b.n	8007114 <HAL_DSI_ConfigPhyTimer+0x120>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	441a      	add	r2, r3
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	6859      	ldr	r1, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	695a      	ldr	r2, [r3, #20]
 8007026:	4613      	mov	r3, r2
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	4413      	add	r3, r2
 800702c:	18ca      	adds	r2, r1, r3
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	005b      	lsls	r3, r3, #1
 800703c:	441a      	add	r2, r3
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	4293      	cmp	r3, r2
 800704c:	bf38      	it	cc
 800704e:	4613      	movcc	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8007062:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	041a      	lsls	r2, r3, #16
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	431a      	orrs	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8007090:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	68da      	ldr	r2, [r3, #12]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	041b      	lsls	r3, r3, #16
 80070a6:	431a      	orrs	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	6812      	ldr	r2, [r2, #0]
 80070be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80070c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80070c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	691a      	ldr	r2, [r3, #16]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80070f0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	021a      	lsls	r2, r3, #8
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	7e1b      	ldrb	r3, [r3, #24]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d101      	bne.n	8007136 <HAL_DSI_ConfigHostTimeouts+0x16>
 8007132:	2302      	movs	r3, #2
 8007134:	e0b4      	b.n	80072a0 <HAL_DSI_ConfigHostTimeouts+0x180>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689a      	ldr	r2, [r3, #8]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800714a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6899      	ldr	r1, [r3, #8]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	021a      	lsls	r2, r3, #8
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	b292      	uxth	r2, r2
 800716c:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	041a      	lsls	r2, r3, #16
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	6812      	ldr	r2, [r2, #0]
 800718c:	0c1b      	lsrs	r3, r3, #16
 800718e:	041b      	lsls	r3, r3, #16
 8007190:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	6812      	ldr	r2, [r2, #0]
 80071ae:	0c1b      	lsrs	r3, r3, #16
 80071b0:	041b      	lsls	r3, r3, #16
 80071b2:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6812      	ldr	r2, [r2, #0]
 80071d2:	0c1b      	lsrs	r3, r3, #16
 80071d4:	041b      	lsls	r3, r3, #16
 80071d6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	691a      	ldr	r2, [r3, #16]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	6812      	ldr	r2, [r2, #0]
 80071fc:	0c1b      	lsrs	r3, r3, #16
 80071fe:	041b      	lsls	r3, r3, #16
 8007200:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	695a      	ldr	r2, [r3, #20]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800722a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	699a      	ldr	r2, [r3, #24]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	6812      	ldr	r2, [r2, #0]
 8007250:	0c1b      	lsrs	r3, r3, #16
 8007252:	041b      	lsls	r3, r3, #16
 8007254:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	69da      	ldr	r2, [r3, #28]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	6812      	ldr	r2, [r2, #0]
 800727a:	0c1b      	lsrs	r3, r3, #16
 800727c:	041b      	lsls	r3, r3, #16
 800727e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	6a1a      	ldr	r2, [r3, #32]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	7e1b      	ldrb	r3, [r3, #24]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d101      	bne.n	80072c0 <HAL_DSI_Start+0x14>
 80072bc:	2302      	movs	r3, #2
 80072be:	e02b      	b.n	8007318 <HAL_DSI_Start+0x6c>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	761a      	strb	r2, [r3, #24]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f042 0201 	orr.w	r2, r2, #1
 80072d8:	605a      	str	r2, [r3, #4]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80072e8:	2300      	movs	r3, #0
 80072ea:	60bb      	str	r3, [r7, #8]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f042 0208 	orr.w	r2, r2, #8
 80072fc:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007308:	f003 0308 	and.w	r3, r3, #8
 800730c:	60bb      	str	r3, [r7, #8]
 800730e:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_DSI_Refresh>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	7e1b      	ldrb	r3, [r3, #24]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d101      	bne.n	8007338 <HAL_DSI_Refresh+0x14>
 8007334:	2302      	movs	r3, #2
 8007336:	e010      	b.n	800735a <HAL_DSI_Refresh+0x36>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	761a      	strb	r2, [r3, #24]

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0204 	orr.w	r2, r2, #4
 800734e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b088      	sub	sp, #32
 800736a:	af02      	add	r7, sp, #8
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	607a      	str	r2, [r7, #4]
 8007372:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	7e1b      	ldrb	r3, [r3, #24]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d101      	bne.n	8007380 <HAL_DSI_ShortWrite+0x1a>
 800737c:	2302      	movs	r3, #2
 800737e:	e010      	b.n	80073a2 <HAL_DSI_ShortWrite+0x3c>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2201      	movs	r2, #1
 8007384:	761a      	strb	r2, [r3, #24]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	68b9      	ldr	r1, [r7, #8]
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f7ff f87b 	bl	800648c <DSI_ShortWrite>
 8007396:	4603      	mov	r3, r0
 8007398:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	761a      	strb	r2, [r3, #24]

  return status;
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b08c      	sub	sp, #48	@ 0x30
 80073ae:	af02      	add	r7, sp, #8
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	607a      	str	r2, [r7, #4]
 80073b6:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80073b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ba:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	7e1b      	ldrb	r3, [r3, #24]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d101      	bne.n	80073c8 <HAL_DSI_LongWrite+0x1e>
 80073c4:	2302      	movs	r3, #2
 80073c6:	e083      	b.n	80074d0 <HAL_DSI_LongWrite+0x126>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2201      	movs	r2, #1
 80073cc:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80073ce:	f7fa fed3 	bl	8002178 <HAL_GetTick>
 80073d2:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80073d4:	e00b      	b.n	80073ee <HAL_DSI_LongWrite+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80073d6:	f7fa fecf 	bl	8002178 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	2b64      	cmp	r3, #100	@ 0x64
 80073e2:	d904      	bls.n	80073ee <HAL_DSI_LongWrite+0x44>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e070      	b.n	80074d0 <HAL_DSI_LongWrite+0x126>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0ec      	beq.n	80073d6 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80073fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fe:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2b03      	cmp	r3, #3
 8007404:	bf28      	it	cs
 8007406:	2303      	movcs	r3, #3
 8007408:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800740a:	2300      	movs	r3, #0
 800740c:	623b      	str	r3, [r7, #32]
 800740e:	e00f      	b.n	8007430 <HAL_DSI_LongWrite+0x86>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	4413      	add	r3, r2
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	3301      	adds	r3, #1
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	fa02 f303 	lsl.w	r3, r2, r3
 8007424:	69fa      	ldr	r2, [r7, #28]
 8007426:	4313      	orrs	r3, r2
 8007428:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	3301      	adds	r3, #1
 800742e:	623b      	str	r3, [r7, #32]
 8007430:	6a3a      	ldr	r2, [r7, #32]
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	429a      	cmp	r2, r3
 8007436:	d3eb      	bcc.n	8007410 <HAL_DSI_LongWrite+0x66>
  }
  hdsi->Instance->GPDR = fifoword;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	69fa      	ldr	r2, [r7, #28]
 800743e:	671a      	str	r2, [r3, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	627b      	str	r3, [r7, #36]	@ 0x24
  pparams += nbBytes;
 8007448:	69ba      	ldr	r2, [r7, #24]
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	4413      	add	r3, r2
 800744e:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8007450:	e028      	b.n	80074a4 <HAL_DSI_LongWrite+0xfa>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007454:	2b04      	cmp	r3, #4
 8007456:	bf28      	it	cs
 8007458:	2304      	movcs	r3, #4
 800745a:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8007460:	2300      	movs	r3, #0
 8007462:	623b      	str	r3, [r7, #32]
 8007464:	e00e      	b.n	8007484 <HAL_DSI_LongWrite+0xda>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007466:	69ba      	ldr	r2, [r7, #24]
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	4413      	add	r3, r2
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	fa02 f303 	lsl.w	r3, r2, r3
 8007478:	69fa      	ldr	r2, [r7, #28]
 800747a:	4313      	orrs	r3, r2
 800747c:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	3301      	adds	r3, #1
 8007482:	623b      	str	r3, [r7, #32]
 8007484:	6a3a      	ldr	r2, [r7, #32]
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	429a      	cmp	r2, r3
 800748a:	d3ec      	bcc.n	8007466 <HAL_DSI_LongWrite+0xbc>
    }
    hdsi->Instance->GPDR = fifoword;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	69fa      	ldr	r2, [r7, #28]
 8007492:	671a      	str	r2, [r3, #112]	@ 0x70

    uicounter -= nbBytes;
 8007494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	627b      	str	r3, [r7, #36]	@ 0x24
    pparams += nbBytes;
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	4413      	add	r3, r2
 80074a2:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80074a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1d3      	bne.n	8007452 <HAL_DSI_LongWrite+0xa8>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 80074b2:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	3301      	adds	r3, #1
 80074b8:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	4613      	mov	r3, r2
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	68b9      	ldr	r1, [r7, #8]
 80074c4:	f7fe ffc9 	bl	800645a <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3728      	adds	r7, #40	@ 0x28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80074d8:	b480      	push	{r7}
 80074da:	b089      	sub	sp, #36	@ 0x24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80074ea:	e1ba      	b.n	8007862 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	2101      	movs	r1, #1
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	fa01 f303 	lsl.w	r3, r1, r3
 80074f8:	4013      	ands	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 81aa 	beq.w	800785c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a55      	ldr	r2, [pc, #340]	@ (8007660 <HAL_GPIO_Init+0x188>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d15d      	bne.n	80075cc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8007516:	2201      	movs	r2, #1
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	fa02 f303 	lsl.w	r3, r2, r3
 800751e:	43db      	mvns	r3, r3
 8007520:	69fa      	ldr	r2, [r7, #28]
 8007522:	4013      	ands	r3, r2
 8007524:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f003 0201 	and.w	r2, r3, #1
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	fa02 f303 	lsl.w	r3, r2, r3
 8007534:	69fa      	ldr	r2, [r7, #28]
 8007536:	4313      	orrs	r3, r2
 8007538:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	69fa      	ldr	r2, [r7, #28]
 800753e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8007540:	4a48      	ldr	r2, [pc, #288]	@ (8007664 <HAL_GPIO_Init+0x18c>)
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007548:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800754a:	4a46      	ldr	r2, [pc, #280]	@ (8007664 <HAL_GPIO_Init+0x18c>)
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	4413      	add	r3, r2
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	08da      	lsrs	r2, r3, #3
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	3208      	adds	r2, #8
 800755e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007562:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	220f      	movs	r2, #15
 800756e:	fa02 f303 	lsl.w	r3, r2, r3
 8007572:	43db      	mvns	r3, r3
 8007574:	69fa      	ldr	r2, [r7, #28]
 8007576:	4013      	ands	r3, r2
 8007578:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	220b      	movs	r2, #11
 8007584:	fa02 f303 	lsl.w	r3, r2, r3
 8007588:	69fa      	ldr	r2, [r7, #28]
 800758a:	4313      	orrs	r3, r2
 800758c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	08da      	lsrs	r2, r3, #3
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	3208      	adds	r2, #8
 8007596:	69f9      	ldr	r1, [r7, #28]
 8007598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	2203      	movs	r2, #3
 80075a8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ac:	43db      	mvns	r3, r3
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	4013      	ands	r3, r2
 80075b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	005b      	lsls	r3, r3, #1
 80075b8:	2202      	movs	r2, #2
 80075ba:	fa02 f303 	lsl.w	r3, r2, r3
 80075be:	69fa      	ldr	r2, [r7, #28]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	69fa      	ldr	r2, [r7, #28]
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	e067      	b.n	800769c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d003      	beq.n	80075dc <HAL_GPIO_Init+0x104>
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	2b12      	cmp	r3, #18
 80075da:	d145      	bne.n	8007668 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	08da      	lsrs	r2, r3, #3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	3208      	adds	r2, #8
 80075e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f003 0307 	and.w	r3, r3, #7
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	220f      	movs	r2, #15
 80075f4:	fa02 f303 	lsl.w	r3, r2, r3
 80075f8:	43db      	mvns	r3, r3
 80075fa:	69fa      	ldr	r2, [r7, #28]
 80075fc:	4013      	ands	r3, r2
 80075fe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	f003 020f 	and.w	r2, r3, #15
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f003 0307 	and.w	r3, r3, #7
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	fa02 f303 	lsl.w	r3, r2, r3
 8007614:	69fa      	ldr	r2, [r7, #28]
 8007616:	4313      	orrs	r3, r2
 8007618:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	08da      	lsrs	r2, r3, #3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3208      	adds	r2, #8
 8007622:	69f9      	ldr	r1, [r7, #28]
 8007624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	2203      	movs	r2, #3
 8007634:	fa02 f303 	lsl.w	r3, r2, r3
 8007638:	43db      	mvns	r3, r3
 800763a:	69fa      	ldr	r2, [r7, #28]
 800763c:	4013      	ands	r3, r2
 800763e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f003 0203 	and.w	r2, r3, #3
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	69fa      	ldr	r2, [r7, #28]
 8007652:	4313      	orrs	r3, r2
 8007654:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	69fa      	ldr	r2, [r7, #28]
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	e01e      	b.n	800769c <HAL_GPIO_Init+0x1c4>
 800765e:	bf00      	nop
 8007660:	46020000 	.word	0x46020000
 8007664:	082b20a0 	.word	0x082b20a0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	2203      	movs	r2, #3
 8007674:	fa02 f303 	lsl.w	r3, r2, r3
 8007678:	43db      	mvns	r3, r3
 800767a:	69fa      	ldr	r2, [r7, #28]
 800767c:	4013      	ands	r3, r2
 800767e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f003 0203 	and.w	r2, r3, #3
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	fa02 f303 	lsl.w	r3, r2, r3
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	4313      	orrs	r3, r2
 8007694:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	69fa      	ldr	r2, [r7, #28]
 800769a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d00b      	beq.n	80076bc <HAL_GPIO_Init+0x1e4>
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d007      	beq.n	80076bc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80076b0:	2b11      	cmp	r3, #17
 80076b2:	d003      	beq.n	80076bc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	2b12      	cmp	r3, #18
 80076ba:	d130      	bne.n	800771e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	005b      	lsls	r3, r3, #1
 80076c6:	2203      	movs	r2, #3
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	43db      	mvns	r3, r3
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	4013      	ands	r3, r2
 80076d2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	fa02 f303 	lsl.w	r3, r2, r3
 80076e0:	69fa      	ldr	r2, [r7, #28]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	69fa      	ldr	r2, [r7, #28]
 80076ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80076f2:	2201      	movs	r2, #1
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	fa02 f303 	lsl.w	r3, r2, r3
 80076fa:	43db      	mvns	r3, r3
 80076fc:	69fa      	ldr	r2, [r7, #28]
 80076fe:	4013      	ands	r3, r2
 8007700:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	091b      	lsrs	r3, r3, #4
 8007708:	f003 0201 	and.w	r2, r3, #1
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	fa02 f303 	lsl.w	r3, r2, r3
 8007712:	69fa      	ldr	r2, [r7, #28]
 8007714:	4313      	orrs	r3, r2
 8007716:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	69fa      	ldr	r2, [r7, #28]
 800771c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	2b03      	cmp	r3, #3
 8007724:	d017      	beq.n	8007756 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	2203      	movs	r2, #3
 8007732:	fa02 f303 	lsl.w	r3, r2, r3
 8007736:	43db      	mvns	r3, r3
 8007738:	69fa      	ldr	r2, [r7, #28]
 800773a:	4013      	ands	r3, r2
 800773c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	689a      	ldr	r2, [r3, #8]
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	fa02 f303 	lsl.w	r3, r2, r3
 800774a:	69fa      	ldr	r2, [r7, #28]
 800774c:	4313      	orrs	r3, r2
 800774e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	69fa      	ldr	r2, [r7, #28]
 8007754:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d07c      	beq.n	800785c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007762:	4a47      	ldr	r2, [pc, #284]	@ (8007880 <HAL_GPIO_Init+0x3a8>)
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	089b      	lsrs	r3, r3, #2
 8007768:	3318      	adds	r3, #24
 800776a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800776e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f003 0303 	and.w	r3, r3, #3
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	220f      	movs	r2, #15
 800777a:	fa02 f303 	lsl.w	r3, r2, r3
 800777e:	43db      	mvns	r3, r3
 8007780:	69fa      	ldr	r2, [r7, #28]
 8007782:	4013      	ands	r3, r2
 8007784:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	0a9a      	lsrs	r2, r3, #10
 800778a:	4b3e      	ldr	r3, [pc, #248]	@ (8007884 <HAL_GPIO_Init+0x3ac>)
 800778c:	4013      	ands	r3, r2
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	f002 0203 	and.w	r2, r2, #3
 8007794:	00d2      	lsls	r2, r2, #3
 8007796:	4093      	lsls	r3, r2
 8007798:	69fa      	ldr	r2, [r7, #28]
 800779a:	4313      	orrs	r3, r2
 800779c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800779e:	4938      	ldr	r1, [pc, #224]	@ (8007880 <HAL_GPIO_Init+0x3a8>)
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	089b      	lsrs	r3, r3, #2
 80077a4:	3318      	adds	r3, #24
 80077a6:	69fa      	ldr	r2, [r7, #28]
 80077a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80077ac:	4b34      	ldr	r3, [pc, #208]	@ (8007880 <HAL_GPIO_Init+0x3a8>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	43db      	mvns	r3, r3
 80077b6:	69fa      	ldr	r2, [r7, #28]
 80077b8:	4013      	ands	r3, r2
 80077ba:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d003      	beq.n	80077d0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80077c8:	69fa      	ldr	r2, [r7, #28]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80077d0:	4a2b      	ldr	r2, [pc, #172]	@ (8007880 <HAL_GPIO_Init+0x3a8>)
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80077d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007880 <HAL_GPIO_Init+0x3a8>)
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	43db      	mvns	r3, r3
 80077e0:	69fa      	ldr	r2, [r7, #28]
 80077e2:	4013      	ands	r3, r2
 80077e4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80077f2:	69fa      	ldr	r2, [r7, #28]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80077fa:	4a21      	ldr	r2, [pc, #132]	@ (8007880 <HAL_GPIO_Init+0x3a8>)
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007800:	4b1f      	ldr	r3, [pc, #124]	@ (8007880 <HAL_GPIO_Init+0x3a8>)
 8007802:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007806:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	43db      	mvns	r3, r3
 800780c:	69fa      	ldr	r2, [r7, #28]
 800780e:	4013      	ands	r3, r2
 8007810:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800781e:	69fa      	ldr	r2, [r7, #28]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4313      	orrs	r3, r2
 8007824:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007826:	4a16      	ldr	r2, [pc, #88]	@ (8007880 <HAL_GPIO_Init+0x3a8>)
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800782e:	4b14      	ldr	r3, [pc, #80]	@ (8007880 <HAL_GPIO_Init+0x3a8>)
 8007830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007834:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	43db      	mvns	r3, r3
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	4013      	ands	r3, r2
 800783e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d003      	beq.n	8007854 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800784c:	69fa      	ldr	r2, [r7, #28]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	4313      	orrs	r3, r2
 8007852:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007854:	4a0a      	ldr	r2, [pc, #40]	@ (8007880 <HAL_GPIO_Init+0x3a8>)
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	3301      	adds	r3, #1
 8007860:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	fa22 f303 	lsr.w	r3, r2, r3
 800786c:	2b00      	cmp	r3, #0
 800786e:	f47f ae3d 	bne.w	80074ec <HAL_GPIO_Init+0x14>
  }
}
 8007872:	bf00      	nop
 8007874:	bf00      	nop
 8007876:	3724      	adds	r7, #36	@ 0x24
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	46022000 	.word	0x46022000
 8007884:	002f7f7f 	.word	0x002f7f7f

08007888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	460b      	mov	r3, r1
 8007892:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	887b      	ldrh	r3, [r7, #2]
 800789a:	4013      	ands	r3, r2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80078a0:	2301      	movs	r3, #1
 80078a2:	73fb      	strb	r3, [r7, #15]
 80078a4:	e001      	b.n	80078aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	807b      	strh	r3, [r7, #2]
 80078c4:	4613      	mov	r3, r2
 80078c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80078c8:	787b      	ldrb	r3, [r7, #1]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d003      	beq.n	80078d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80078ce:	887a      	ldrh	r2, [r7, #2]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80078d4:	e002      	b.n	80078dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80078d6:	887a      	ldrh	r2, [r7, #2]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e08d      	b.n	8007a16 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d106      	bne.n	8007914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fa f91c 	bl	8001b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2224      	movs	r2, #36	@ 0x24
 8007918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0201 	bic.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007938:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	689a      	ldr	r2, [r3, #8]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007948:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d107      	bne.n	8007962 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689a      	ldr	r2, [r3, #8]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800795e:	609a      	str	r2, [r3, #8]
 8007960:	e006      	b.n	8007970 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689a      	ldr	r2, [r3, #8]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800796e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	2b02      	cmp	r3, #2
 8007976:	d108      	bne.n	800798a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007986:	605a      	str	r2, [r3, #4]
 8007988:	e007      	b.n	800799a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007998:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6812      	ldr	r2, [r2, #0]
 80079a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80079a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68da      	ldr	r2, [r3, #12]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691a      	ldr	r2, [r3, #16]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	69d9      	ldr	r1, [r3, #28]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a1a      	ldr	r2, [r3, #32]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 0201 	orr.w	r2, r2, #1
 80079f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b083      	sub	sp, #12
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b20      	cmp	r3, #32
 8007a32:	d138      	bne.n	8007aa6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d101      	bne.n	8007a42 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007a3e:	2302      	movs	r3, #2
 8007a40:	e032      	b.n	8007aa8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2224      	movs	r2, #36	@ 0x24
 8007a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0201 	bic.w	r2, r2, #1
 8007a60:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007a70:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6819      	ldr	r1, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f042 0201 	orr.w	r2, r2, #1
 8007a90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2220      	movs	r2, #32
 8007a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	e000      	b.n	8007aa8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007aa6:	2302      	movs	r3, #2
  }
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b20      	cmp	r3, #32
 8007ac8:	d139      	bne.n	8007b3e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d101      	bne.n	8007ad8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e033      	b.n	8007b40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2224      	movs	r2, #36	@ 0x24
 8007ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0201 	bic.w	r2, r2, #1
 8007af6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007b06:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	021b      	lsls	r3, r3, #8
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f042 0201 	orr.w	r2, r2, #1
 8007b28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	e000      	b.n	8007b40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007b3e:	2302      	movs	r3, #2
  }
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8007b58:	4b0b      	ldr	r3, [pc, #44]	@ (8007b88 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	73fb      	strb	r3, [r7, #15]
 8007b68:	e007      	b.n	8007b7a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8007b6a:	4b07      	ldr	r3, [pc, #28]	@ (8007b88 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f023 0204 	bic.w	r2, r3, #4
 8007b72:	4905      	ldr	r1, [pc, #20]	@ (8007b88 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	600b      	str	r3, [r1, #0]
  }

  return status;
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	40030400 	.word	0x40030400

08007b8c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8007b90:	4b05      	ldr	r3, [pc, #20]	@ (8007ba8 <HAL_ICACHE_Enable+0x1c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a04      	ldr	r2, [pc, #16]	@ (8007ba8 <HAL_ICACHE_Enable+0x1c>)
 8007b96:	f043 0301 	orr.w	r3, r3, #1
 8007b9a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	40030400 	.word	0x40030400

08007bac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e0bf      	b.n	8007d3e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d106      	bne.n	8007bd8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7fa f834 	bl	8001c40 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	699a      	ldr	r2, [r3, #24]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007bee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	6999      	ldr	r1, [r3, #24]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c04:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	430a      	orrs	r2, r1
 8007c12:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6899      	ldr	r1, [r3, #8]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8007d48 <HAL_LTDC_Init+0x19c>)
 8007c20:	400b      	ands	r3, r1
 8007c22:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	041b      	lsls	r3, r3, #16
 8007c2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6899      	ldr	r1, [r3, #8]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	699a      	ldr	r2, [r3, #24]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68d9      	ldr	r1, [r3, #12]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	4b3e      	ldr	r3, [pc, #248]	@ (8007d48 <HAL_LTDC_Init+0x19c>)
 8007c4e:	400b      	ands	r3, r1
 8007c50:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	041b      	lsls	r3, r3, #16
 8007c58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68d9      	ldr	r1, [r3, #12]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a1a      	ldr	r2, [r3, #32]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	431a      	orrs	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6919      	ldr	r1, [r3, #16]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	4b33      	ldr	r3, [pc, #204]	@ (8007d48 <HAL_LTDC_Init+0x19c>)
 8007c7c:	400b      	ands	r3, r1
 8007c7e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c84:	041b      	lsls	r3, r3, #16
 8007c86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6919      	ldr	r1, [r3, #16]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	431a      	orrs	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6959      	ldr	r1, [r3, #20]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	4b27      	ldr	r3, [pc, #156]	@ (8007d48 <HAL_LTDC_Init+0x19c>)
 8007caa:	400b      	ands	r3, r1
 8007cac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb2:	041b      	lsls	r3, r3, #16
 8007cb4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6959      	ldr	r1, [r3, #20]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007cd2:	021b      	lsls	r3, r3, #8
 8007cd4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007cdc:	041b      	lsls	r3, r3, #16
 8007cde:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007cee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007d02:	431a      	orrs	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	430a      	orrs	r2, r1
 8007d0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f042 0206 	orr.w	r2, r2, #6
 8007d1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	699a      	ldr	r2, [r3, #24]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0201 	orr.w	r2, r2, #1
 8007d2a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	f000f800 	.word	0xf000f800

08007d4c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d62:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f003 0304 	and.w	r3, r3, #4
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d023      	beq.n	8007db6 <HAL_LTDC_IRQHandler+0x6a>
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	f003 0304 	and.w	r3, r3, #4
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d01e      	beq.n	8007db6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 0204 	bic.w	r2, r2, #4
 8007d86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2204      	movs	r2, #4
 8007d8e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d96:	f043 0201 	orr.w	r2, r3, #1
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2204      	movs	r2, #4
 8007da4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f86f 	bl	8007e94 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f003 0302 	and.w	r3, r3, #2
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d023      	beq.n	8007e08 <HAL_LTDC_IRQHandler+0xbc>
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d01e      	beq.n	8007e08 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f022 0202 	bic.w	r2, r2, #2
 8007dd8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2202      	movs	r2, #2
 8007de0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007de8:	f043 0202 	orr.w	r2, r3, #2
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2204      	movs	r2, #4
 8007df6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f846 	bl	8007e94 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d01b      	beq.n	8007e4a <HAL_LTDC_IRQHandler+0xfe>
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	f003 0301 	and.w	r3, r3, #1
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d016      	beq.n	8007e4a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f022 0201 	bic.w	r2, r2, #1
 8007e2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2201      	movs	r2, #1
 8007e32:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f82f 	bl	8007ea8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f003 0308 	and.w	r3, r3, #8
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d01b      	beq.n	8007e8c <HAL_LTDC_IRQHandler+0x140>
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f003 0308 	and.w	r3, r3, #8
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d016      	beq.n	8007e8c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 0208 	bic.w	r2, r2, #8
 8007e6c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2208      	movs	r2, #8
 8007e74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f818 	bl	8007ebc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007ed0:	b5b0      	push	{r4, r5, r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d101      	bne.n	8007eea <HAL_LTDC_ConfigLayer+0x1a>
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	e02c      	b.n	8007f44 <HAL_LTDC_ConfigLayer+0x74>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2134      	movs	r1, #52	@ 0x34
 8007f00:	fb01 f303 	mul.w	r3, r1, r3
 8007f04:	4413      	add	r3, r2
 8007f06:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	4614      	mov	r4, r2
 8007f0e:	461d      	mov	r5, r3
 8007f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f1c:	682b      	ldr	r3, [r5, #0]
 8007f1e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f000 f811 	bl	8007f4c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bdb0      	pop	{r4, r5, r7, pc}

08007f4c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b089      	sub	sp, #36	@ 0x24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	0c1b      	lsrs	r3, r3, #16
 8007f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f68:	4413      	add	r3, r2
 8007f6a:	041b      	lsls	r3, r3, #16
 8007f6c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	01db      	lsls	r3, r3, #7
 8007f78:	4413      	add	r3, r2
 8007f7a:	3384      	adds	r3, #132	@ 0x84
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	6812      	ldr	r2, [r2, #0]
 8007f82:	4611      	mov	r1, r2
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	01d2      	lsls	r2, r2, #7
 8007f88:	440a      	add	r2, r1
 8007f8a:	3284      	adds	r2, #132	@ 0x84
 8007f8c:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8007f90:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	0c1b      	lsrs	r3, r3, #16
 8007f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007fa2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007fa4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4619      	mov	r1, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	01db      	lsls	r3, r3, #7
 8007fb0:	440b      	add	r3, r1
 8007fb2:	3384      	adds	r3, #132	@ 0x84
 8007fb4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007fba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	68da      	ldr	r2, [r3, #12]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fca:	4413      	add	r3, r2
 8007fcc:	041b      	lsls	r3, r3, #16
 8007fce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	01db      	lsls	r3, r3, #7
 8007fda:	4413      	add	r3, r2
 8007fdc:	3384      	adds	r3, #132	@ 0x84
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	6812      	ldr	r2, [r2, #0]
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	01d2      	lsls	r2, r2, #7
 8007fea:	440a      	add	r2, r1
 8007fec:	3284      	adds	r2, #132	@ 0x84
 8007fee:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8007ff2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	689a      	ldr	r2, [r3, #8]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008002:	4413      	add	r3, r2
 8008004:	1c5a      	adds	r2, r3, #1
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4619      	mov	r1, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	01db      	lsls	r3, r3, #7
 8008010:	440b      	add	r3, r1
 8008012:	3384      	adds	r3, #132	@ 0x84
 8008014:	4619      	mov	r1, r3
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	4313      	orrs	r3, r2
 800801a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	461a      	mov	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	01db      	lsls	r3, r3, #7
 8008026:	4413      	add	r3, r2
 8008028:	3384      	adds	r3, #132	@ 0x84
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	6812      	ldr	r2, [r2, #0]
 8008030:	4611      	mov	r1, r2
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	01d2      	lsls	r2, r2, #7
 8008036:	440a      	add	r2, r1
 8008038:	3284      	adds	r2, #132	@ 0x84
 800803a:	f023 0307 	bic.w	r3, r3, #7
 800803e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	461a      	mov	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	01db      	lsls	r3, r3, #7
 800804a:	4413      	add	r3, r2
 800804c:	3384      	adds	r3, #132	@ 0x84
 800804e:	461a      	mov	r2, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800805c:	021b      	lsls	r3, r3, #8
 800805e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008066:	041b      	lsls	r3, r3, #16
 8008068:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	061b      	lsls	r3, r3, #24
 8008070:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008078:	461a      	mov	r2, r3
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	431a      	orrs	r2, r3
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	431a      	orrs	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4619      	mov	r1, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	01db      	lsls	r3, r3, #7
 800808c:	440b      	add	r3, r1
 800808e:	3384      	adds	r3, #132	@ 0x84
 8008090:	4619      	mov	r1, r3
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	4313      	orrs	r3, r2
 8008096:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	461a      	mov	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	01db      	lsls	r3, r3, #7
 80080a2:	4413      	add	r3, r2
 80080a4:	3384      	adds	r3, #132	@ 0x84
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	6812      	ldr	r2, [r2, #0]
 80080ac:	4611      	mov	r1, r2
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	01d2      	lsls	r2, r2, #7
 80080b2:	440a      	add	r2, r1
 80080b4:	3284      	adds	r2, #132	@ 0x84
 80080b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80080ba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	461a      	mov	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	01db      	lsls	r3, r3, #7
 80080c6:	4413      	add	r3, r2
 80080c8:	3384      	adds	r3, #132	@ 0x84
 80080ca:	461a      	mov	r2, r3
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	695b      	ldr	r3, [r3, #20]
 80080d0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	01db      	lsls	r3, r3, #7
 80080dc:	4413      	add	r3, r2
 80080de:	3384      	adds	r3, #132	@ 0x84
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	6812      	ldr	r2, [r2, #0]
 80080e6:	4611      	mov	r1, r2
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	01d2      	lsls	r2, r2, #7
 80080ec:	440a      	add	r2, r1
 80080ee:	3284      	adds	r2, #132	@ 0x84
 80080f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80080f4:	f023 0307 	bic.w	r3, r3, #7
 80080f8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	69da      	ldr	r2, [r3, #28]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	68f9      	ldr	r1, [r7, #12]
 8008104:	6809      	ldr	r1, [r1, #0]
 8008106:	4608      	mov	r0, r1
 8008108:	6879      	ldr	r1, [r7, #4]
 800810a:	01c9      	lsls	r1, r1, #7
 800810c:	4401      	add	r1, r0
 800810e:	3184      	adds	r1, #132	@ 0x84
 8008110:	4313      	orrs	r3, r2
 8008112:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	461a      	mov	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	01db      	lsls	r3, r3, #7
 800811e:	4413      	add	r3, r2
 8008120:	3384      	adds	r3, #132	@ 0x84
 8008122:	461a      	mov	r2, r3
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008128:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d102      	bne.n	8008138 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8008132:	2304      	movs	r3, #4
 8008134:	61fb      	str	r3, [r7, #28]
 8008136:	e01b      	b.n	8008170 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d102      	bne.n	8008146 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8008140:	2303      	movs	r3, #3
 8008142:	61fb      	str	r3, [r7, #28]
 8008144:	e014      	b.n	8008170 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	2b04      	cmp	r3, #4
 800814c:	d00b      	beq.n	8008166 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008152:	2b02      	cmp	r3, #2
 8008154:	d007      	beq.n	8008166 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800815a:	2b03      	cmp	r3, #3
 800815c:	d003      	beq.n	8008166 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008162:	2b07      	cmp	r3, #7
 8008164:	d102      	bne.n	800816c <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8008166:	2302      	movs	r3, #2
 8008168:	61fb      	str	r3, [r7, #28]
 800816a:	e001      	b.n	8008170 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 800816c:	2301      	movs	r3, #1
 800816e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	461a      	mov	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	01db      	lsls	r3, r3, #7
 800817a:	4413      	add	r3, r2
 800817c:	3384      	adds	r3, #132	@ 0x84
 800817e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	6812      	ldr	r2, [r2, #0]
 8008184:	4611      	mov	r1, r2
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	01d2      	lsls	r2, r2, #7
 800818a:	440a      	add	r2, r1
 800818c:	3284      	adds	r2, #132	@ 0x84
 800818e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008192:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008198:	69fa      	ldr	r2, [r7, #28]
 800819a:	fb02 f303 	mul.w	r3, r2, r3
 800819e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	6859      	ldr	r1, [r3, #4]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	1acb      	subs	r3, r1, r3
 80081aa:	69f9      	ldr	r1, [r7, #28]
 80081ac:	fb01 f303 	mul.w	r3, r1, r3
 80081b0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80081b2:	68f9      	ldr	r1, [r7, #12]
 80081b4:	6809      	ldr	r1, [r1, #0]
 80081b6:	4608      	mov	r0, r1
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	01c9      	lsls	r1, r1, #7
 80081bc:	4401      	add	r1, r0
 80081be:	3184      	adds	r1, #132	@ 0x84
 80081c0:	4313      	orrs	r3, r2
 80081c2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	461a      	mov	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	01db      	lsls	r3, r3, #7
 80081ce:	4413      	add	r3, r2
 80081d0:	3384      	adds	r3, #132	@ 0x84
 80081d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	6812      	ldr	r2, [r2, #0]
 80081d8:	4611      	mov	r1, r2
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	01d2      	lsls	r2, r2, #7
 80081de:	440a      	add	r2, r1
 80081e0:	3284      	adds	r2, #132	@ 0x84
 80081e2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80081e6:	f023 0307 	bic.w	r3, r3, #7
 80081ea:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	461a      	mov	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	01db      	lsls	r3, r3, #7
 80081f6:	4413      	add	r3, r2
 80081f8:	3384      	adds	r3, #132	@ 0x84
 80081fa:	461a      	mov	r2, r3
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008200:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	01db      	lsls	r3, r3, #7
 800820c:	4413      	add	r3, r2
 800820e:	3384      	adds	r3, #132	@ 0x84
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	6812      	ldr	r2, [r2, #0]
 8008216:	4611      	mov	r1, r2
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	01d2      	lsls	r2, r2, #7
 800821c:	440a      	add	r2, r1
 800821e:	3284      	adds	r2, #132	@ 0x84
 8008220:	f043 0301 	orr.w	r3, r3, #1
 8008224:	6013      	str	r3, [r2, #0]
}
 8008226:	bf00      	nop
 8008228:	3724      	adds	r7, #36	@ 0x24
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
	...

08008234 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008234:	b480      	push	{r7}
 8008236:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008238:	4b05      	ldr	r3, [pc, #20]	@ (8008250 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800823a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800823c:	4a04      	ldr	r2, [pc, #16]	@ (8008250 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800823e:	f043 0301 	orr.w	r3, r3, #1
 8008242:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8008244:	bf00      	nop
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	46020800 	.word	0x46020800

08008254 <HAL_PWR_DisableBkUpAccess>:
  *         register RCC_BDCR, RTC registers, TAMP registers, backup registers
  *         and backup SRAM).
  * @retval None.
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8008254:	b480      	push	{r7}
 8008256:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008258:	4b05      	ldr	r3, [pc, #20]	@ (8008270 <HAL_PWR_DisableBkUpAccess+0x1c>)
 800825a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800825c:	4a04      	ldr	r2, [pc, #16]	@ (8008270 <HAL_PWR_DisableBkUpAccess+0x1c>)
 800825e:	f023 0301 	bic.w	r3, r3, #1
 8008262:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8008264:	bf00      	nop
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	46020800 	.word	0x46020800

08008274 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800827c:	4b39      	ldr	r3, [pc, #228]	@ (8008364 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800827e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008280:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008284:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	429a      	cmp	r2, r3
 800828c:	d10b      	bne.n	80082a6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008294:	d905      	bls.n	80082a2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008296:	4b33      	ldr	r3, [pc, #204]	@ (8008364 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	4a32      	ldr	r2, [pc, #200]	@ (8008364 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800829c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80082a0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	e057      	b.n	8008356 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082ac:	d90a      	bls.n	80082c4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80082ae:	4b2d      	ldr	r3, [pc, #180]	@ (8008364 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	4a2a      	ldr	r2, [pc, #168]	@ (8008364 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80082bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80082c0:	60d3      	str	r3, [r2, #12]
 80082c2:	e007      	b.n	80082d4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80082c4:	4b27      	ldr	r3, [pc, #156]	@ (8008364 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80082cc:	4925      	ldr	r1, [pc, #148]	@ (8008364 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80082d4:	4b24      	ldr	r3, [pc, #144]	@ (8008368 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a24      	ldr	r2, [pc, #144]	@ (800836c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80082da:	fba2 2303 	umull	r2, r3, r2, r3
 80082de:	099b      	lsrs	r3, r3, #6
 80082e0:	2232      	movs	r2, #50	@ 0x32
 80082e2:	fb02 f303 	mul.w	r3, r2, r3
 80082e6:	4a21      	ldr	r2, [pc, #132]	@ (800836c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80082e8:	fba2 2303 	umull	r2, r3, r2, r3
 80082ec:	099b      	lsrs	r3, r3, #6
 80082ee:	3301      	adds	r3, #1
 80082f0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80082f2:	e002      	b.n	80082fa <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80082fa:	4b1a      	ldr	r3, [pc, #104]	@ (8008364 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d102      	bne.n	800830c <HAL_PWREx_ControlVoltageScaling+0x98>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1f3      	bne.n	80082f4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d01b      	beq.n	800834a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008312:	4b15      	ldr	r3, [pc, #84]	@ (8008368 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a15      	ldr	r2, [pc, #84]	@ (800836c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008318:	fba2 2303 	umull	r2, r3, r2, r3
 800831c:	099b      	lsrs	r3, r3, #6
 800831e:	2232      	movs	r2, #50	@ 0x32
 8008320:	fb02 f303 	mul.w	r3, r2, r3
 8008324:	4a11      	ldr	r2, [pc, #68]	@ (800836c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008326:	fba2 2303 	umull	r2, r3, r2, r3
 800832a:	099b      	lsrs	r3, r3, #6
 800832c:	3301      	adds	r3, #1
 800832e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008330:	e002      	b.n	8008338 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	3b01      	subs	r3, #1
 8008336:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008338:	4b0a      	ldr	r3, [pc, #40]	@ (8008364 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800833a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800833c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d102      	bne.n	800834a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1f3      	bne.n	8008332 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e000      	b.n	8008356 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	46020800 	.word	0x46020800
 8008368:	20000000 	.word	0x20000000
 800836c:	10624dd3 	.word	0x10624dd3

08008370 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008370:	b480      	push	{r7}
 8008372:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8008374:	4b04      	ldr	r3, [pc, #16]	@ (8008388 <HAL_PWREx_GetVoltageRange+0x18>)
 8008376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008378:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800837c:	4618      	mov	r0, r3
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	46020800 	.word	0x46020800

0800838c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008394:	4b22      	ldr	r3, [pc, #136]	@ (8008420 <HAL_PWREx_ConfigSupply+0x94>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a22      	ldr	r2, [pc, #136]	@ (8008424 <HAL_PWREx_ConfigSupply+0x98>)
 800839a:	fba2 2303 	umull	r2, r3, r2, r3
 800839e:	099b      	lsrs	r3, r3, #6
 80083a0:	2232      	movs	r2, #50	@ 0x32
 80083a2:	fb02 f303 	mul.w	r3, r2, r3
 80083a6:	4a1f      	ldr	r2, [pc, #124]	@ (8008424 <HAL_PWREx_ConfigSupply+0x98>)
 80083a8:	fba2 2303 	umull	r2, r3, r2, r3
 80083ac:	099b      	lsrs	r3, r3, #6
 80083ae:	3301      	adds	r3, #1
 80083b0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d113      	bne.n	80083e0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80083b8:	4b1b      	ldr	r3, [pc, #108]	@ (8008428 <HAL_PWREx_ConfigSupply+0x9c>)
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	4a1a      	ldr	r2, [pc, #104]	@ (8008428 <HAL_PWREx_ConfigSupply+0x9c>)
 80083be:	f023 0302 	bic.w	r3, r3, #2
 80083c2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80083c4:	e002      	b.n	80083cc <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3b01      	subs	r3, #1
 80083ca:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80083cc:	4b16      	ldr	r3, [pc, #88]	@ (8008428 <HAL_PWREx_ConfigSupply+0x9c>)
 80083ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d0:	f003 0302 	and.w	r3, r3, #2
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d116      	bne.n	8008406 <HAL_PWREx_ConfigSupply+0x7a>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1f3      	bne.n	80083c6 <HAL_PWREx_ConfigSupply+0x3a>
 80083de:	e012      	b.n	8008406 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80083e0:	4b11      	ldr	r3, [pc, #68]	@ (8008428 <HAL_PWREx_ConfigSupply+0x9c>)
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	4a10      	ldr	r2, [pc, #64]	@ (8008428 <HAL_PWREx_ConfigSupply+0x9c>)
 80083e6:	f043 0302 	orr.w	r3, r3, #2
 80083ea:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80083ec:	e002      	b.n	80083f4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80083f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008428 <HAL_PWREx_ConfigSupply+0x9c>)
 80083f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d102      	bne.n	8008406 <HAL_PWREx_ConfigSupply+0x7a>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1f3      	bne.n	80083ee <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	e000      	b.n	8008412 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	20000000 	.word	0x20000000
 8008424:	10624dd3 	.word	0x10624dd3
 8008428:	46020800 	.word	0x46020800

0800842c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800842c:	b480      	push	{r7}
 800842e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8008430:	4b05      	ldr	r3, [pc, #20]	@ (8008448 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	4a04      	ldr	r2, [pc, #16]	@ (8008448 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008436:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800843a:	6113      	str	r3, [r2, #16]
}
 800843c:	bf00      	nop
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	46020800 	.word	0x46020800

0800844c <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 800844c:	b480      	push	{r7}
 800844e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8008450:	4b05      	ldr	r3, [pc, #20]	@ (8008468 <HAL_PWREx_EnableVddA+0x1c>)
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	4a04      	ldr	r2, [pc, #16]	@ (8008468 <HAL_PWREx_EnableVddA+0x1c>)
 8008456:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800845a:	6113      	str	r3, [r2, #16]
}
 800845c:	bf00      	nop
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	46020800 	.word	0x46020800

0800846c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b08e      	sub	sp, #56	@ 0x38
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8008474:	2300      	movs	r3, #0
 8008476:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d102      	bne.n	8008486 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	f000 bec8 	b.w	8009216 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008486:	4b99      	ldr	r3, [pc, #612]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	f003 030c 	and.w	r3, r3, #12
 800848e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008490:	4b96      	ldr	r3, [pc, #600]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 8008492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008494:	f003 0303 	and.w	r3, r3, #3
 8008498:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0310 	and.w	r3, r3, #16
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 816c 	beq.w	8008780 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80084a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d007      	beq.n	80084be <HAL_RCC_OscConfig+0x52>
 80084ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b0:	2b0c      	cmp	r3, #12
 80084b2:	f040 80de 	bne.w	8008672 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80084b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	f040 80da 	bne.w	8008672 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d102      	bne.n	80084cc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	f000 bea5 	b.w	8009216 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80084d0:	4b86      	ldr	r3, [pc, #536]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d004      	beq.n	80084e6 <HAL_RCC_OscConfig+0x7a>
 80084dc:	4b83      	ldr	r3, [pc, #524]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80084e4:	e005      	b.n	80084f2 <HAL_RCC_OscConfig+0x86>
 80084e6:	4b81      	ldr	r3, [pc, #516]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 80084e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084ec:	041b      	lsls	r3, r3, #16
 80084ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d255      	bcs.n	80085a2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80084f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10a      	bne.n	8008512 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008500:	4618      	mov	r0, r3
 8008502:	f001 fa3d 	bl	8009980 <RCC_SetFlashLatencyFromMSIRange>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	f000 be82 	b.w	8009216 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008512:	4b76      	ldr	r3, [pc, #472]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	4a75      	ldr	r2, [pc, #468]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 8008518:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800851c:	6093      	str	r3, [r2, #8]
 800851e:	4b73      	ldr	r3, [pc, #460]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800852a:	4970      	ldr	r1, [pc, #448]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 800852c:	4313      	orrs	r3, r2
 800852e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008534:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008538:	d309      	bcc.n	800854e <HAL_RCC_OscConfig+0xe2>
 800853a:	4b6c      	ldr	r3, [pc, #432]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	f023 021f 	bic.w	r2, r3, #31
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	4969      	ldr	r1, [pc, #420]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 8008548:	4313      	orrs	r3, r2
 800854a:	60cb      	str	r3, [r1, #12]
 800854c:	e07e      	b.n	800864c <HAL_RCC_OscConfig+0x1e0>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008552:	2b00      	cmp	r3, #0
 8008554:	da0a      	bge.n	800856c <HAL_RCC_OscConfig+0x100>
 8008556:	4b65      	ldr	r3, [pc, #404]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	015b      	lsls	r3, r3, #5
 8008564:	4961      	ldr	r1, [pc, #388]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 8008566:	4313      	orrs	r3, r2
 8008568:	60cb      	str	r3, [r1, #12]
 800856a:	e06f      	b.n	800864c <HAL_RCC_OscConfig+0x1e0>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008574:	d30a      	bcc.n	800858c <HAL_RCC_OscConfig+0x120>
 8008576:	4b5d      	ldr	r3, [pc, #372]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	029b      	lsls	r3, r3, #10
 8008584:	4959      	ldr	r1, [pc, #356]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 8008586:	4313      	orrs	r3, r2
 8008588:	60cb      	str	r3, [r1, #12]
 800858a:	e05f      	b.n	800864c <HAL_RCC_OscConfig+0x1e0>
 800858c:	4b57      	ldr	r3, [pc, #348]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a1b      	ldr	r3, [r3, #32]
 8008598:	03db      	lsls	r3, r3, #15
 800859a:	4954      	ldr	r1, [pc, #336]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 800859c:	4313      	orrs	r3, r2
 800859e:	60cb      	str	r3, [r1, #12]
 80085a0:	e054      	b.n	800864c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80085a2:	4b52      	ldr	r3, [pc, #328]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	4a51      	ldr	r2, [pc, #324]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 80085a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80085ac:	6093      	str	r3, [r2, #8]
 80085ae:	4b4f      	ldr	r3, [pc, #316]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ba:	494c      	ldr	r1, [pc, #304]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80085c8:	d309      	bcc.n	80085de <HAL_RCC_OscConfig+0x172>
 80085ca:	4b48      	ldr	r3, [pc, #288]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	f023 021f 	bic.w	r2, r3, #31
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	4945      	ldr	r1, [pc, #276]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 80085d8:	4313      	orrs	r3, r2
 80085da:	60cb      	str	r3, [r1, #12]
 80085dc:	e028      	b.n	8008630 <HAL_RCC_OscConfig+0x1c4>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	da0a      	bge.n	80085fc <HAL_RCC_OscConfig+0x190>
 80085e6:	4b41      	ldr	r3, [pc, #260]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	015b      	lsls	r3, r3, #5
 80085f4:	493d      	ldr	r1, [pc, #244]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	60cb      	str	r3, [r1, #12]
 80085fa:	e019      	b.n	8008630 <HAL_RCC_OscConfig+0x1c4>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008604:	d30a      	bcc.n	800861c <HAL_RCC_OscConfig+0x1b0>
 8008606:	4b39      	ldr	r3, [pc, #228]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	029b      	lsls	r3, r3, #10
 8008614:	4935      	ldr	r1, [pc, #212]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 8008616:	4313      	orrs	r3, r2
 8008618:	60cb      	str	r3, [r1, #12]
 800861a:	e009      	b.n	8008630 <HAL_RCC_OscConfig+0x1c4>
 800861c:	4b33      	ldr	r3, [pc, #204]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a1b      	ldr	r3, [r3, #32]
 8008628:	03db      	lsls	r3, r3, #15
 800862a:	4930      	ldr	r1, [pc, #192]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 800862c:	4313      	orrs	r3, r2
 800862e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10a      	bne.n	800864c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800863a:	4618      	mov	r0, r3
 800863c:	f001 f9a0 	bl	8009980 <RCC_SetFlashLatencyFromMSIRange>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d002      	beq.n	800864c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	f000 bde5 	b.w	8009216 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800864c:	f001 f8de 	bl	800980c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008650:	4b27      	ldr	r3, [pc, #156]	@ (80086f0 <HAL_RCC_OscConfig+0x284>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4618      	mov	r0, r3
 8008656:	f7f9 fc0d 	bl	8001e74 <HAL_InitTick>
 800865a:	4603      	mov	r3, r0
 800865c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8008660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 808a 	beq.w	800877e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800866a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800866e:	f000 bdd2 	b.w	8009216 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d066      	beq.n	8008748 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800867a:	4b1c      	ldr	r3, [pc, #112]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a1b      	ldr	r2, [pc, #108]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 8008680:	f043 0301 	orr.w	r3, r3, #1
 8008684:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008686:	f7f9 fd77 	bl	8002178 <HAL_GetTick>
 800868a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800868c:	e009      	b.n	80086a2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800868e:	f7f9 fd73 	bl	8002178 <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	2b02      	cmp	r3, #2
 800869a:	d902      	bls.n	80086a2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	f000 bdba 	b.w	8009216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80086a2:	4b12      	ldr	r3, [pc, #72]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0304 	and.w	r3, r3, #4
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d0ef      	beq.n	800868e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80086ae:	4b0f      	ldr	r3, [pc, #60]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	4a0e      	ldr	r2, [pc, #56]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 80086b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80086b8:	6093      	str	r3, [r2, #8]
 80086ba:	4b0c      	ldr	r3, [pc, #48]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c6:	4909      	ldr	r1, [pc, #36]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80086d4:	d30e      	bcc.n	80086f4 <HAL_RCC_OscConfig+0x288>
 80086d6:	4b05      	ldr	r3, [pc, #20]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	f023 021f 	bic.w	r2, r3, #31
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	4902      	ldr	r1, [pc, #8]	@ (80086ec <HAL_RCC_OscConfig+0x280>)
 80086e4:	4313      	orrs	r3, r2
 80086e6:	60cb      	str	r3, [r1, #12]
 80086e8:	e04a      	b.n	8008780 <HAL_RCC_OscConfig+0x314>
 80086ea:	bf00      	nop
 80086ec:	46020c00 	.word	0x46020c00
 80086f0:	20000004 	.word	0x20000004
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	da0a      	bge.n	8008712 <HAL_RCC_OscConfig+0x2a6>
 80086fc:	4b98      	ldr	r3, [pc, #608]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a1b      	ldr	r3, [r3, #32]
 8008708:	015b      	lsls	r3, r3, #5
 800870a:	4995      	ldr	r1, [pc, #596]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 800870c:	4313      	orrs	r3, r2
 800870e:	60cb      	str	r3, [r1, #12]
 8008710:	e036      	b.n	8008780 <HAL_RCC_OscConfig+0x314>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800871a:	d30a      	bcc.n	8008732 <HAL_RCC_OscConfig+0x2c6>
 800871c:	4b90      	ldr	r3, [pc, #576]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	029b      	lsls	r3, r3, #10
 800872a:	498d      	ldr	r1, [pc, #564]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 800872c:	4313      	orrs	r3, r2
 800872e:	60cb      	str	r3, [r1, #12]
 8008730:	e026      	b.n	8008780 <HAL_RCC_OscConfig+0x314>
 8008732:	4b8b      	ldr	r3, [pc, #556]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	03db      	lsls	r3, r3, #15
 8008740:	4987      	ldr	r1, [pc, #540]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 8008742:	4313      	orrs	r3, r2
 8008744:	60cb      	str	r3, [r1, #12]
 8008746:	e01b      	b.n	8008780 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8008748:	4b85      	ldr	r3, [pc, #532]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a84      	ldr	r2, [pc, #528]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 800874e:	f023 0301 	bic.w	r3, r3, #1
 8008752:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008754:	f7f9 fd10 	bl	8002178 <HAL_GetTick>
 8008758:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800875a:	e009      	b.n	8008770 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800875c:	f7f9 fd0c 	bl	8002178 <HAL_GetTick>
 8008760:	4602      	mov	r2, r0
 8008762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	2b02      	cmp	r3, #2
 8008768:	d902      	bls.n	8008770 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800876a:	2303      	movs	r3, #3
 800876c:	f000 bd53 	b.w	8009216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008770:	4b7b      	ldr	r3, [pc, #492]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0304 	and.w	r3, r3, #4
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1ef      	bne.n	800875c <HAL_RCC_OscConfig+0x2f0>
 800877c:	e000      	b.n	8008780 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800877e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b00      	cmp	r3, #0
 800878a:	f000 808b 	beq.w	80088a4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800878e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008790:	2b08      	cmp	r3, #8
 8008792:	d005      	beq.n	80087a0 <HAL_RCC_OscConfig+0x334>
 8008794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008796:	2b0c      	cmp	r3, #12
 8008798:	d109      	bne.n	80087ae <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800879a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800879c:	2b03      	cmp	r3, #3
 800879e:	d106      	bne.n	80087ae <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d17d      	bne.n	80088a4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	f000 bd34 	b.w	8009216 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087b6:	d106      	bne.n	80087c6 <HAL_RCC_OscConfig+0x35a>
 80087b8:	4b69      	ldr	r3, [pc, #420]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a68      	ldr	r2, [pc, #416]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 80087be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087c2:	6013      	str	r3, [r2, #0]
 80087c4:	e041      	b.n	800884a <HAL_RCC_OscConfig+0x3de>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80087ce:	d112      	bne.n	80087f6 <HAL_RCC_OscConfig+0x38a>
 80087d0:	4b63      	ldr	r3, [pc, #396]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a62      	ldr	r2, [pc, #392]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 80087d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	4b60      	ldr	r3, [pc, #384]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a5f      	ldr	r2, [pc, #380]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 80087e2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80087e6:	6013      	str	r3, [r2, #0]
 80087e8:	4b5d      	ldr	r3, [pc, #372]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a5c      	ldr	r2, [pc, #368]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 80087ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	e029      	b.n	800884a <HAL_RCC_OscConfig+0x3de>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80087fe:	d112      	bne.n	8008826 <HAL_RCC_OscConfig+0x3ba>
 8008800:	4b57      	ldr	r3, [pc, #348]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a56      	ldr	r2, [pc, #344]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 8008806:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	4b54      	ldr	r3, [pc, #336]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a53      	ldr	r2, [pc, #332]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 8008812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	4b51      	ldr	r3, [pc, #324]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a50      	ldr	r2, [pc, #320]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 800881e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008822:	6013      	str	r3, [r2, #0]
 8008824:	e011      	b.n	800884a <HAL_RCC_OscConfig+0x3de>
 8008826:	4b4e      	ldr	r3, [pc, #312]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a4d      	ldr	r2, [pc, #308]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 800882c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	4b4b      	ldr	r3, [pc, #300]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a4a      	ldr	r2, [pc, #296]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 8008838:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800883c:	6013      	str	r3, [r2, #0]
 800883e:	4b48      	ldr	r3, [pc, #288]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a47      	ldr	r2, [pc, #284]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 8008844:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008848:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d014      	beq.n	800887c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8008852:	f7f9 fc91 	bl	8002178 <HAL_GetTick>
 8008856:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008858:	e009      	b.n	800886e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800885a:	f7f9 fc8d 	bl	8002178 <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	2b64      	cmp	r3, #100	@ 0x64
 8008866:	d902      	bls.n	800886e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	f000 bcd4 	b.w	8009216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800886e:	4b3c      	ldr	r3, [pc, #240]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0ef      	beq.n	800885a <HAL_RCC_OscConfig+0x3ee>
 800887a:	e013      	b.n	80088a4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800887c:	f7f9 fc7c 	bl	8002178 <HAL_GetTick>
 8008880:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008882:	e009      	b.n	8008898 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008884:	f7f9 fc78 	bl	8002178 <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b64      	cmp	r3, #100	@ 0x64
 8008890:	d902      	bls.n	8008898 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	f000 bcbf 	b.w	8009216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008898:	4b31      	ldr	r3, [pc, #196]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1ef      	bne.n	8008884 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0302 	and.w	r3, r3, #2
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d05f      	beq.n	8008970 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80088b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b2:	2b04      	cmp	r3, #4
 80088b4:	d005      	beq.n	80088c2 <HAL_RCC_OscConfig+0x456>
 80088b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b8:	2b0c      	cmp	r3, #12
 80088ba:	d114      	bne.n	80088e6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80088bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d111      	bne.n	80088e6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d102      	bne.n	80088d0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	f000 bca3 	b.w	8009216 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80088d0:	4b23      	ldr	r3, [pc, #140]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	041b      	lsls	r3, r3, #16
 80088de:	4920      	ldr	r1, [pc, #128]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 80088e0:	4313      	orrs	r3, r2
 80088e2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80088e4:	e044      	b.n	8008970 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d024      	beq.n	8008938 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80088ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a1b      	ldr	r2, [pc, #108]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 80088f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088f8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80088fa:	f7f9 fc3d 	bl	8002178 <HAL_GetTick>
 80088fe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008900:	e009      	b.n	8008916 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008902:	f7f9 fc39 	bl	8002178 <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	2b02      	cmp	r3, #2
 800890e:	d902      	bls.n	8008916 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	f000 bc80 	b.w	8009216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008916:	4b12      	ldr	r3, [pc, #72]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0ef      	beq.n	8008902 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8008922:	4b0f      	ldr	r3, [pc, #60]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	041b      	lsls	r3, r3, #16
 8008930:	490b      	ldr	r1, [pc, #44]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 8008932:	4313      	orrs	r3, r2
 8008934:	610b      	str	r3, [r1, #16]
 8008936:	e01b      	b.n	8008970 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8008938:	4b09      	ldr	r3, [pc, #36]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a08      	ldr	r2, [pc, #32]	@ (8008960 <HAL_RCC_OscConfig+0x4f4>)
 800893e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008942:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008944:	f7f9 fc18 	bl	8002178 <HAL_GetTick>
 8008948:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800894a:	e00b      	b.n	8008964 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800894c:	f7f9 fc14 	bl	8002178 <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	2b02      	cmp	r3, #2
 8008958:	d904      	bls.n	8008964 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	f000 bc5b 	b.w	8009216 <HAL_RCC_OscConfig+0xdaa>
 8008960:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008964:	4baf      	ldr	r3, [pc, #700]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1ed      	bne.n	800894c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 0308 	and.w	r3, r3, #8
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 80c8 	beq.w	8008b0e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800897e:	2300      	movs	r3, #0
 8008980:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008984:	4ba7      	ldr	r3, [pc, #668]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008986:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800898a:	f003 0304 	and.w	r3, r3, #4
 800898e:	2b00      	cmp	r3, #0
 8008990:	d111      	bne.n	80089b6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008992:	4ba4      	ldr	r3, [pc, #656]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008998:	4aa2      	ldr	r2, [pc, #648]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 800899a:	f043 0304 	orr.w	r3, r3, #4
 800899e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80089a2:	4ba0      	ldr	r3, [pc, #640]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 80089a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089a8:	f003 0304 	and.w	r3, r3, #4
 80089ac:	617b      	str	r3, [r7, #20]
 80089ae:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80089b0:	2301      	movs	r3, #1
 80089b2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80089b6:	4b9c      	ldr	r3, [pc, #624]	@ (8008c28 <HAL_RCC_OscConfig+0x7bc>)
 80089b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d119      	bne.n	80089f6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80089c2:	4b99      	ldr	r3, [pc, #612]	@ (8008c28 <HAL_RCC_OscConfig+0x7bc>)
 80089c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c6:	4a98      	ldr	r2, [pc, #608]	@ (8008c28 <HAL_RCC_OscConfig+0x7bc>)
 80089c8:	f043 0301 	orr.w	r3, r3, #1
 80089cc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089ce:	f7f9 fbd3 	bl	8002178 <HAL_GetTick>
 80089d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80089d4:	e009      	b.n	80089ea <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089d6:	f7f9 fbcf 	bl	8002178 <HAL_GetTick>
 80089da:	4602      	mov	r2, r0
 80089dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d902      	bls.n	80089ea <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	f000 bc16 	b.w	8009216 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80089ea:	4b8f      	ldr	r3, [pc, #572]	@ (8008c28 <HAL_RCC_OscConfig+0x7bc>)
 80089ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0ef      	beq.n	80089d6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d05f      	beq.n	8008abe <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80089fe:	4b89      	ldr	r3, [pc, #548]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a04:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	699a      	ldr	r2, [r3, #24]
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d037      	beq.n	8008a84 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8008a14:	6a3b      	ldr	r3, [r7, #32]
 8008a16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d006      	beq.n	8008a2c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d101      	bne.n	8008a2c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e3f4      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d01b      	beq.n	8008a6e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8008a36:	4b7b      	ldr	r3, [pc, #492]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a3c:	4a79      	ldr	r2, [pc, #484]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008a3e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8008a42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8008a46:	f7f9 fb97 	bl	8002178 <HAL_GetTick>
 8008a4a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008a4c:	e008      	b.n	8008a60 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a4e:	f7f9 fb93 	bl	8002178 <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	2b05      	cmp	r3, #5
 8008a5a:	d901      	bls.n	8008a60 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e3da      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008a60:	4b70      	ldr	r3, [pc, #448]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008a62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1ef      	bne.n	8008a4e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8008a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a74:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	4969      	ldr	r1, [pc, #420]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8008a84:	4b67      	ldr	r3, [pc, #412]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008a86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a8a:	4a66      	ldr	r2, [pc, #408]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008a8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8008a94:	f7f9 fb70 	bl	8002178 <HAL_GetTick>
 8008a98:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8008a9a:	e008      	b.n	8008aae <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a9c:	f7f9 fb6c 	bl	8002178 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	2b05      	cmp	r3, #5
 8008aa8:	d901      	bls.n	8008aae <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e3b3      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8008aae:	4b5d      	ldr	r3, [pc, #372]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d0ef      	beq.n	8008a9c <HAL_RCC_OscConfig+0x630>
 8008abc:	e01b      	b.n	8008af6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8008abe:	4b59      	ldr	r3, [pc, #356]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ac4:	4a57      	ldr	r2, [pc, #348]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008ac6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8008aca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8008ace:	f7f9 fb53 	bl	8002178 <HAL_GetTick>
 8008ad2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008ad4:	e008      	b.n	8008ae8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ad6:	f7f9 fb4f 	bl	8002178 <HAL_GetTick>
 8008ada:	4602      	mov	r2, r0
 8008adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	2b05      	cmp	r3, #5
 8008ae2:	d901      	bls.n	8008ae8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e396      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008aee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1ef      	bne.n	8008ad6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008af6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d107      	bne.n	8008b0e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008afe:	4b49      	ldr	r3, [pc, #292]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b04:	4a47      	ldr	r2, [pc, #284]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008b06:	f023 0304 	bic.w	r3, r3, #4
 8008b0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 0304 	and.w	r3, r3, #4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 8111 	beq.w	8008d3e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b22:	4b40      	ldr	r3, [pc, #256]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b28:	f003 0304 	and.w	r3, r3, #4
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d111      	bne.n	8008b54 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b30:	4b3c      	ldr	r3, [pc, #240]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b36:	4a3b      	ldr	r2, [pc, #236]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008b38:	f043 0304 	orr.w	r3, r3, #4
 8008b3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008b40:	4b38      	ldr	r3, [pc, #224]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b46:	f003 0304 	and.w	r3, r3, #4
 8008b4a:	613b      	str	r3, [r7, #16]
 8008b4c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008b54:	4b34      	ldr	r3, [pc, #208]	@ (8008c28 <HAL_RCC_OscConfig+0x7bc>)
 8008b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d118      	bne.n	8008b92 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008b60:	4b31      	ldr	r3, [pc, #196]	@ (8008c28 <HAL_RCC_OscConfig+0x7bc>)
 8008b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b64:	4a30      	ldr	r2, [pc, #192]	@ (8008c28 <HAL_RCC_OscConfig+0x7bc>)
 8008b66:	f043 0301 	orr.w	r3, r3, #1
 8008b6a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b6c:	f7f9 fb04 	bl	8002178 <HAL_GetTick>
 8008b70:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008b72:	e008      	b.n	8008b86 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b74:	f7f9 fb00 	bl	8002178 <HAL_GetTick>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d901      	bls.n	8008b86 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e347      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008b86:	4b28      	ldr	r3, [pc, #160]	@ (8008c28 <HAL_RCC_OscConfig+0x7bc>)
 8008b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d0f0      	beq.n	8008b74 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d01f      	beq.n	8008bde <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f003 0304 	and.w	r3, r3, #4
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d010      	beq.n	8008bcc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008baa:	4b1e      	ldr	r3, [pc, #120]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008bb2:	f043 0304 	orr.w	r3, r3, #4
 8008bb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008bba:	4b1a      	ldr	r3, [pc, #104]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bc0:	4a18      	ldr	r2, [pc, #96]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008bc2:	f043 0301 	orr.w	r3, r3, #1
 8008bc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008bca:	e018      	b.n	8008bfe <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008bcc:	4b15      	ldr	r3, [pc, #84]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008bce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bd2:	4a14      	ldr	r2, [pc, #80]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008bd4:	f043 0301 	orr.w	r3, r3, #1
 8008bd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008bdc:	e00f      	b.n	8008bfe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008bde:	4b11      	ldr	r3, [pc, #68]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008be4:	4a0f      	ldr	r2, [pc, #60]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008be6:	f023 0301 	bic.w	r3, r3, #1
 8008bea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008bee:	4b0d      	ldr	r3, [pc, #52]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8008c24 <HAL_RCC_OscConfig+0x7b8>)
 8008bf6:	f023 0304 	bic.w	r3, r3, #4
 8008bfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d057      	beq.n	8008cb6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8008c06:	f7f9 fab7 	bl	8002178 <HAL_GetTick>
 8008c0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c0c:	e00e      	b.n	8008c2c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c0e:	f7f9 fab3 	bl	8002178 <HAL_GetTick>
 8008c12:	4602      	mov	r2, r0
 8008c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d905      	bls.n	8008c2c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e2f8      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
 8008c24:	46020c00 	.word	0x46020c00
 8008c28:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c2c:	4b9c      	ldr	r3, [pc, #624]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008c2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c32:	f003 0302 	and.w	r3, r3, #2
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d0e9      	beq.n	8008c0e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d01b      	beq.n	8008c7e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008c46:	4b96      	ldr	r3, [pc, #600]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c4c:	4a94      	ldr	r2, [pc, #592]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008c56:	e00a      	b.n	8008c6e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c58:	f7f9 fa8e 	bl	8002178 <HAL_GetTick>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d901      	bls.n	8008c6e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e2d3      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008c6e:	4b8c      	ldr	r3, [pc, #560]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008c70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d0ed      	beq.n	8008c58 <HAL_RCC_OscConfig+0x7ec>
 8008c7c:	e053      	b.n	8008d26 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008c7e:	4b88      	ldr	r3, [pc, #544]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008c80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c84:	4a86      	ldr	r2, [pc, #536]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008c86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008c8e:	e00a      	b.n	8008ca6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c90:	f7f9 fa72 	bl	8002178 <HAL_GetTick>
 8008c94:	4602      	mov	r2, r0
 8008c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d901      	bls.n	8008ca6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e2b7      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008ca6:	4b7e      	ldr	r3, [pc, #504]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1ed      	bne.n	8008c90 <HAL_RCC_OscConfig+0x824>
 8008cb4:	e037      	b.n	8008d26 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8008cb6:	f7f9 fa5f 	bl	8002178 <HAL_GetTick>
 8008cba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008cbc:	e00a      	b.n	8008cd4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cbe:	f7f9 fa5b 	bl	8002178 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d901      	bls.n	8008cd4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e2a0      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008cd4:	4b72      	ldr	r3, [pc, #456]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1ed      	bne.n	8008cbe <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8008ce2:	4b6f      	ldr	r3, [pc, #444]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d01a      	beq.n	8008d26 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008cf0:	4b6b      	ldr	r3, [pc, #428]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cf6:	4a6a      	ldr	r2, [pc, #424]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008cf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cfc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008d00:	e00a      	b.n	8008d18 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d02:	f7f9 fa39 	bl	8002178 <HAL_GetTick>
 8008d06:	4602      	mov	r2, r0
 8008d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0a:	1ad3      	subs	r3, r2, r3
 8008d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d901      	bls.n	8008d18 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	e27e      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008d18:	4b61      	ldr	r3, [pc, #388]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008d1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1ed      	bne.n	8008d02 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008d26:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d107      	bne.n	8008d3e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d2e:	4b5c      	ldr	r3, [pc, #368]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d34:	4a5a      	ldr	r2, [pc, #360]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008d36:	f023 0304 	bic.w	r3, r3, #4
 8008d3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0320 	and.w	r3, r3, #32
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d036      	beq.n	8008db8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d019      	beq.n	8008d86 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8008d52:	4b53      	ldr	r3, [pc, #332]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a52      	ldr	r2, [pc, #328]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008d58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008d5c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008d5e:	f7f9 fa0b 	bl	8002178 <HAL_GetTick>
 8008d62:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008d64:	e008      	b.n	8008d78 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d66:	f7f9 fa07 	bl	8002178 <HAL_GetTick>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d901      	bls.n	8008d78 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e24e      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008d78:	4b49      	ldr	r3, [pc, #292]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d0f0      	beq.n	8008d66 <HAL_RCC_OscConfig+0x8fa>
 8008d84:	e018      	b.n	8008db8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8008d86:	4b46      	ldr	r3, [pc, #280]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a45      	ldr	r2, [pc, #276]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008d8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d90:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008d92:	f7f9 f9f1 	bl	8002178 <HAL_GetTick>
 8008d96:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008d98:	e008      	b.n	8008dac <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d9a:	f7f9 f9ed 	bl	8002178 <HAL_GetTick>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d901      	bls.n	8008dac <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e234      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008dac:	4b3c      	ldr	r3, [pc, #240]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1f0      	bne.n	8008d9a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d036      	beq.n	8008e32 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d019      	beq.n	8008e00 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8008dcc:	4b34      	ldr	r3, [pc, #208]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a33      	ldr	r2, [pc, #204]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008dd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008dd6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008dd8:	f7f9 f9ce 	bl	8002178 <HAL_GetTick>
 8008ddc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008dde:	e008      	b.n	8008df2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008de0:	f7f9 f9ca 	bl	8002178 <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d901      	bls.n	8008df2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e211      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008df2:	4b2b      	ldr	r3, [pc, #172]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0f0      	beq.n	8008de0 <HAL_RCC_OscConfig+0x974>
 8008dfe:	e018      	b.n	8008e32 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8008e00:	4b27      	ldr	r3, [pc, #156]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a26      	ldr	r2, [pc, #152]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008e06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e0a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008e0c:	f7f9 f9b4 	bl	8002178 <HAL_GetTick>
 8008e10:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008e12:	e008      	b.n	8008e26 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008e14:	f7f9 f9b0 	bl	8002178 <HAL_GetTick>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d901      	bls.n	8008e26 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e1f7      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008e26:	4b1e      	ldr	r3, [pc, #120]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1f0      	bne.n	8008e14 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d07f      	beq.n	8008f3e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d062      	beq.n	8008f0c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8008e46:	4b16      	ldr	r3, [pc, #88]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	4a15      	ldr	r2, [pc, #84]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008e4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008e50:	6093      	str	r3, [r2, #8]
 8008e52:	4b13      	ldr	r3, [pc, #76]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e5e:	4910      	ldr	r1, [pc, #64]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008e60:	4313      	orrs	r3, r2
 8008e62:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e68:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008e6c:	d309      	bcc.n	8008e82 <HAL_RCC_OscConfig+0xa16>
 8008e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	f023 021f 	bic.w	r2, r3, #31
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	4909      	ldr	r1, [pc, #36]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	60cb      	str	r3, [r1, #12]
 8008e80:	e02a      	b.n	8008ed8 <HAL_RCC_OscConfig+0xa6c>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	da0c      	bge.n	8008ea4 <HAL_RCC_OscConfig+0xa38>
 8008e8a:	4b05      	ldr	r3, [pc, #20]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	015b      	lsls	r3, r3, #5
 8008e98:	4901      	ldr	r1, [pc, #4]	@ (8008ea0 <HAL_RCC_OscConfig+0xa34>)
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	60cb      	str	r3, [r1, #12]
 8008e9e:	e01b      	b.n	8008ed8 <HAL_RCC_OscConfig+0xa6c>
 8008ea0:	46020c00 	.word	0x46020c00
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eac:	d30a      	bcc.n	8008ec4 <HAL_RCC_OscConfig+0xa58>
 8008eae:	4ba1      	ldr	r3, [pc, #644]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	029b      	lsls	r3, r3, #10
 8008ebc:	499d      	ldr	r1, [pc, #628]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	60cb      	str	r3, [r1, #12]
 8008ec2:	e009      	b.n	8008ed8 <HAL_RCC_OscConfig+0xa6c>
 8008ec4:	4b9b      	ldr	r3, [pc, #620]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6a1b      	ldr	r3, [r3, #32]
 8008ed0:	03db      	lsls	r3, r3, #15
 8008ed2:	4998      	ldr	r1, [pc, #608]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8008ed8:	4b96      	ldr	r3, [pc, #600]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a95      	ldr	r2, [pc, #596]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008ede:	f043 0310 	orr.w	r3, r3, #16
 8008ee2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008ee4:	f7f9 f948 	bl	8002178 <HAL_GetTick>
 8008ee8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008eea:	e008      	b.n	8008efe <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008eec:	f7f9 f944 	bl	8002178 <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d901      	bls.n	8008efe <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e18b      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008efe:	4b8d      	ldr	r3, [pc, #564]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0320 	and.w	r3, r3, #32
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d0f0      	beq.n	8008eec <HAL_RCC_OscConfig+0xa80>
 8008f0a:	e018      	b.n	8008f3e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8008f0c:	4b89      	ldr	r3, [pc, #548]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a88      	ldr	r2, [pc, #544]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008f12:	f023 0310 	bic.w	r3, r3, #16
 8008f16:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008f18:	f7f9 f92e 	bl	8002178 <HAL_GetTick>
 8008f1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008f1e:	e008      	b.n	8008f32 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008f20:	f7f9 f92a 	bl	8002178 <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d901      	bls.n	8008f32 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e171      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008f32:	4b80      	ldr	r3, [pc, #512]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0320 	and.w	r3, r3, #32
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1f0      	bne.n	8008f20 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f000 8166 	beq.w	8009214 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f4e:	4b79      	ldr	r3, [pc, #484]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008f50:	69db      	ldr	r3, [r3, #28]
 8008f52:	f003 030c 	and.w	r3, r3, #12
 8008f56:	2b0c      	cmp	r3, #12
 8008f58:	f000 80f2 	beq.w	8009140 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	f040 80c5 	bne.w	80090f0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008f66:	4b73      	ldr	r3, [pc, #460]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a72      	ldr	r2, [pc, #456]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008f6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f70:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008f72:	f7f9 f901 	bl	8002178 <HAL_GetTick>
 8008f76:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008f78:	e008      	b.n	8008f8c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f7a:	f7f9 f8fd 	bl	8002178 <HAL_GetTick>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f82:	1ad3      	subs	r3, r2, r3
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d901      	bls.n	8008f8c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e144      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008f8c:	4b69      	ldr	r3, [pc, #420]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1f0      	bne.n	8008f7a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f98:	4b66      	ldr	r3, [pc, #408]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f9e:	f003 0304 	and.w	r3, r3, #4
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d111      	bne.n	8008fca <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8008fa6:	4b63      	ldr	r3, [pc, #396]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008fac:	4a61      	ldr	r2, [pc, #388]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008fae:	f043 0304 	orr.w	r3, r3, #4
 8008fb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008fb6:	4b5f      	ldr	r3, [pc, #380]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008fbc:	f003 0304 	and.w	r3, r3, #4
 8008fc0:	60fb      	str	r3, [r7, #12]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8008fca:	4b5b      	ldr	r3, [pc, #364]	@ (8009138 <HAL_RCC_OscConfig+0xccc>)
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008fd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008fd6:	d102      	bne.n	8008fde <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008fde:	4b56      	ldr	r3, [pc, #344]	@ (8009138 <HAL_RCC_OscConfig+0xccc>)
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	4a55      	ldr	r2, [pc, #340]	@ (8009138 <HAL_RCC_OscConfig+0xccc>)
 8008fe4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008fe8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8008fea:	4b52      	ldr	r3, [pc, #328]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8008fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ff2:	f023 0303 	bic.w	r3, r3, #3
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008ffe:	3a01      	subs	r2, #1
 8009000:	0212      	lsls	r2, r2, #8
 8009002:	4311      	orrs	r1, r2
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009008:	430a      	orrs	r2, r1
 800900a:	494a      	ldr	r1, [pc, #296]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 800900c:	4313      	orrs	r3, r2
 800900e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009010:	4b48      	ldr	r3, [pc, #288]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8009012:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009014:	4b49      	ldr	r3, [pc, #292]	@ (800913c <HAL_RCC_OscConfig+0xcd0>)
 8009016:	4013      	ands	r3, r2
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800901c:	3a01      	subs	r2, #1
 800901e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009026:	3a01      	subs	r2, #1
 8009028:	0252      	lsls	r2, r2, #9
 800902a:	b292      	uxth	r2, r2
 800902c:	4311      	orrs	r1, r2
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009032:	3a01      	subs	r2, #1
 8009034:	0412      	lsls	r2, r2, #16
 8009036:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800903a:	4311      	orrs	r1, r2
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009040:	3a01      	subs	r2, #1
 8009042:	0612      	lsls	r2, r2, #24
 8009044:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009048:	430a      	orrs	r2, r1
 800904a:	493a      	ldr	r1, [pc, #232]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 800904c:	4313      	orrs	r3, r2
 800904e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8009050:	4b38      	ldr	r3, [pc, #224]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8009052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009054:	4a37      	ldr	r2, [pc, #220]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8009056:	f023 0310 	bic.w	r3, r3, #16
 800905a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009060:	4a34      	ldr	r2, [pc, #208]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8009062:	00db      	lsls	r3, r3, #3
 8009064:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8009066:	4b33      	ldr	r3, [pc, #204]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8009068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800906a:	4a32      	ldr	r2, [pc, #200]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 800906c:	f043 0310 	orr.w	r3, r3, #16
 8009070:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8009072:	4b30      	ldr	r3, [pc, #192]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8009074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009076:	f023 020c 	bic.w	r2, r3, #12
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800907e:	492d      	ldr	r1, [pc, #180]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8009080:	4313      	orrs	r3, r2
 8009082:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8009084:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009088:	2b01      	cmp	r3, #1
 800908a:	d105      	bne.n	8009098 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800908c:	4b2a      	ldr	r3, [pc, #168]	@ (8009138 <HAL_RCC_OscConfig+0xccc>)
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	4a29      	ldr	r2, [pc, #164]	@ (8009138 <HAL_RCC_OscConfig+0xccc>)
 8009092:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009096:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8009098:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800909c:	2b01      	cmp	r3, #1
 800909e:	d107      	bne.n	80090b0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80090a0:	4b24      	ldr	r3, [pc, #144]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 80090a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090a6:	4a23      	ldr	r2, [pc, #140]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 80090a8:	f023 0304 	bic.w	r3, r3, #4
 80090ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80090b0:	4b20      	ldr	r3, [pc, #128]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a1f      	ldr	r2, [pc, #124]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 80090b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80090ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80090bc:	f7f9 f85c 	bl	8002178 <HAL_GetTick>
 80090c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80090c2:	e008      	b.n	80090d6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090c4:	f7f9 f858 	bl	8002178 <HAL_GetTick>
 80090c8:	4602      	mov	r2, r0
 80090ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d901      	bls.n	80090d6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e09f      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80090d6:	4b17      	ldr	r3, [pc, #92]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0f0      	beq.n	80090c4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80090e2:	4b14      	ldr	r3, [pc, #80]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 80090e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e6:	4a13      	ldr	r2, [pc, #76]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 80090e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090ec:	6293      	str	r3, [r2, #40]	@ 0x28
 80090ee:	e091      	b.n	8009214 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80090f0:	4b10      	ldr	r3, [pc, #64]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a0f      	ldr	r2, [pc, #60]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 80090f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80090fc:	f7f9 f83c 	bl	8002178 <HAL_GetTick>
 8009100:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009102:	e008      	b.n	8009116 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009104:	f7f9 f838 	bl	8002178 <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	2b02      	cmp	r3, #2
 8009110:	d901      	bls.n	8009116 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e07f      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009116:	4b07      	ldr	r3, [pc, #28]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1f0      	bne.n	8009104 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8009122:	4b04      	ldr	r3, [pc, #16]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8009124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009126:	4a03      	ldr	r2, [pc, #12]	@ (8009134 <HAL_RCC_OscConfig+0xcc8>)
 8009128:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800912c:	f023 0303 	bic.w	r3, r3, #3
 8009130:	6293      	str	r3, [r2, #40]	@ 0x28
 8009132:	e06f      	b.n	8009214 <HAL_RCC_OscConfig+0xda8>
 8009134:	46020c00 	.word	0x46020c00
 8009138:	46020800 	.word	0x46020800
 800913c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8009140:	4b37      	ldr	r3, [pc, #220]	@ (8009220 <HAL_RCC_OscConfig+0xdb4>)
 8009142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009144:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009146:	4b36      	ldr	r3, [pc, #216]	@ (8009220 <HAL_RCC_OscConfig+0xdb4>)
 8009148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800914a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009150:	2b01      	cmp	r3, #1
 8009152:	d039      	beq.n	80091c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	f003 0203 	and.w	r2, r3, #3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800915e:	429a      	cmp	r2, r3
 8009160:	d132      	bne.n	80091c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	0a1b      	lsrs	r3, r3, #8
 8009166:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800916e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8009170:	429a      	cmp	r2, r3
 8009172:	d129      	bne.n	80091c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800917e:	429a      	cmp	r2, r3
 8009180:	d122      	bne.n	80091c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800918c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800918e:	429a      	cmp	r2, r3
 8009190:	d11a      	bne.n	80091c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	0a5b      	lsrs	r3, r3, #9
 8009196:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800919e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d111      	bne.n	80091c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	0c1b      	lsrs	r3, r3, #16
 80091a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091b0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d108      	bne.n	80091c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	0e1b      	lsrs	r3, r3, #24
 80091ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091c2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d001      	beq.n	80091cc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80091c8:	2301      	movs	r3, #1
 80091ca:	e024      	b.n	8009216 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80091cc:	4b14      	ldr	r3, [pc, #80]	@ (8009220 <HAL_RCC_OscConfig+0xdb4>)
 80091ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d0:	08db      	lsrs	r3, r3, #3
 80091d2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80091da:	429a      	cmp	r2, r3
 80091dc:	d01a      	beq.n	8009214 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80091de:	4b10      	ldr	r3, [pc, #64]	@ (8009220 <HAL_RCC_OscConfig+0xdb4>)
 80091e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e2:	4a0f      	ldr	r2, [pc, #60]	@ (8009220 <HAL_RCC_OscConfig+0xdb4>)
 80091e4:	f023 0310 	bic.w	r3, r3, #16
 80091e8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ea:	f7f8 ffc5 	bl	8002178 <HAL_GetTick>
 80091ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80091f0:	bf00      	nop
 80091f2:	f7f8 ffc1 	bl	8002178 <HAL_GetTick>
 80091f6:	4602      	mov	r2, r0
 80091f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d0f9      	beq.n	80091f2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009202:	4a07      	ldr	r2, [pc, #28]	@ (8009220 <HAL_RCC_OscConfig+0xdb4>)
 8009204:	00db      	lsls	r3, r3, #3
 8009206:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8009208:	4b05      	ldr	r3, [pc, #20]	@ (8009220 <HAL_RCC_OscConfig+0xdb4>)
 800920a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800920c:	4a04      	ldr	r2, [pc, #16]	@ (8009220 <HAL_RCC_OscConfig+0xdb4>)
 800920e:	f043 0310 	orr.w	r3, r3, #16
 8009212:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3738      	adds	r7, #56	@ 0x38
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	46020c00 	.word	0x46020c00

08009224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e1d9      	b.n	80095ec <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009238:	4b9b      	ldr	r3, [pc, #620]	@ (80094a8 <HAL_RCC_ClockConfig+0x284>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 030f 	and.w	r3, r3, #15
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	429a      	cmp	r2, r3
 8009244:	d910      	bls.n	8009268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009246:	4b98      	ldr	r3, [pc, #608]	@ (80094a8 <HAL_RCC_ClockConfig+0x284>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f023 020f 	bic.w	r2, r3, #15
 800924e:	4996      	ldr	r1, [pc, #600]	@ (80094a8 <HAL_RCC_ClockConfig+0x284>)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	4313      	orrs	r3, r2
 8009254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009256:	4b94      	ldr	r3, [pc, #592]	@ (80094a8 <HAL_RCC_ClockConfig+0x284>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 030f 	and.w	r3, r3, #15
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	429a      	cmp	r2, r3
 8009262:	d001      	beq.n	8009268 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e1c1      	b.n	80095ec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0310 	and.w	r3, r3, #16
 8009270:	2b00      	cmp	r3, #0
 8009272:	d010      	beq.n	8009296 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	695a      	ldr	r2, [r3, #20]
 8009278:	4b8c      	ldr	r3, [pc, #560]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 800927a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800927c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009280:	429a      	cmp	r2, r3
 8009282:	d908      	bls.n	8009296 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8009284:	4b89      	ldr	r3, [pc, #548]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 8009286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009288:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	4986      	ldr	r1, [pc, #536]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 8009292:	4313      	orrs	r3, r2
 8009294:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0308 	and.w	r3, r3, #8
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d012      	beq.n	80092c8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	691a      	ldr	r2, [r3, #16]
 80092a6:	4b81      	ldr	r3, [pc, #516]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	091b      	lsrs	r3, r3, #4
 80092ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d909      	bls.n	80092c8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80092b4:	4b7d      	ldr	r3, [pc, #500]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 80092b6:	6a1b      	ldr	r3, [r3, #32]
 80092b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	011b      	lsls	r3, r3, #4
 80092c2:	497a      	ldr	r1, [pc, #488]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 80092c4:	4313      	orrs	r3, r2
 80092c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f003 0304 	and.w	r3, r3, #4
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d010      	beq.n	80092f6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	68da      	ldr	r2, [r3, #12]
 80092d8:	4b74      	ldr	r3, [pc, #464]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 80092da:	6a1b      	ldr	r3, [r3, #32]
 80092dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d908      	bls.n	80092f6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80092e4:	4b71      	ldr	r3, [pc, #452]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 80092e6:	6a1b      	ldr	r3, [r3, #32]
 80092e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	496e      	ldr	r1, [pc, #440]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 80092f2:	4313      	orrs	r3, r2
 80092f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 0302 	and.w	r3, r3, #2
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d010      	beq.n	8009324 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	689a      	ldr	r2, [r3, #8]
 8009306:	4b69      	ldr	r3, [pc, #420]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	f003 030f 	and.w	r3, r3, #15
 800930e:	429a      	cmp	r2, r3
 8009310:	d908      	bls.n	8009324 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8009312:	4b66      	ldr	r3, [pc, #408]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	f023 020f 	bic.w	r2, r3, #15
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	4963      	ldr	r1, [pc, #396]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 8009320:	4313      	orrs	r3, r2
 8009322:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 80d2 	beq.w	80094d6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8009332:	2300      	movs	r3, #0
 8009334:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	2b03      	cmp	r3, #3
 800933c:	d143      	bne.n	80093c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800933e:	4b5b      	ldr	r3, [pc, #364]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 8009340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009344:	f003 0304 	and.w	r3, r3, #4
 8009348:	2b00      	cmp	r3, #0
 800934a:	d110      	bne.n	800936e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800934c:	4b57      	ldr	r3, [pc, #348]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 800934e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009352:	4a56      	ldr	r2, [pc, #344]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 8009354:	f043 0304 	orr.w	r3, r3, #4
 8009358:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800935c:	4b53      	ldr	r3, [pc, #332]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 800935e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009362:	f003 0304 	and.w	r3, r3, #4
 8009366:	60bb      	str	r3, [r7, #8]
 8009368:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800936a:	2301      	movs	r3, #1
 800936c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800936e:	f7f8 ff03 	bl	8002178 <HAL_GetTick>
 8009372:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8009374:	4b4e      	ldr	r3, [pc, #312]	@ (80094b0 <HAL_RCC_ClockConfig+0x28c>)
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00f      	beq.n	80093a0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009380:	e008      	b.n	8009394 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8009382:	f7f8 fef9 	bl	8002178 <HAL_GetTick>
 8009386:	4602      	mov	r2, r0
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	2b02      	cmp	r3, #2
 800938e:	d901      	bls.n	8009394 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	e12b      	b.n	80095ec <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009394:	4b46      	ldr	r3, [pc, #280]	@ (80094b0 <HAL_RCC_ClockConfig+0x28c>)
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d0f0      	beq.n	8009382 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d107      	bne.n	80093b6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80093a6:	4b41      	ldr	r3, [pc, #260]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 80093a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80093ac:	4a3f      	ldr	r2, [pc, #252]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 80093ae:	f023 0304 	bic.w	r3, r3, #4
 80093b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80093b6:	4b3d      	ldr	r3, [pc, #244]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d121      	bne.n	8009406 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e112      	b.n	80095ec <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d107      	bne.n	80093de <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80093ce:	4b37      	ldr	r3, [pc, #220]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d115      	bne.n	8009406 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e106      	b.n	80095ec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d107      	bne.n	80093f6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80093e6:	4b31      	ldr	r3, [pc, #196]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 0304 	and.w	r3, r3, #4
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d109      	bne.n	8009406 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e0fa      	b.n	80095ec <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80093f6:	4b2d      	ldr	r3, [pc, #180]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e0f2      	b.n	80095ec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8009406:	4b29      	ldr	r3, [pc, #164]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	f023 0203 	bic.w	r2, r3, #3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	4926      	ldr	r1, [pc, #152]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 8009414:	4313      	orrs	r3, r2
 8009416:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8009418:	f7f8 feae 	bl	8002178 <HAL_GetTick>
 800941c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	2b03      	cmp	r3, #3
 8009424:	d112      	bne.n	800944c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009426:	e00a      	b.n	800943e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009428:	f7f8 fea6 	bl	8002178 <HAL_GetTick>
 800942c:	4602      	mov	r2, r0
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009436:	4293      	cmp	r3, r2
 8009438:	d901      	bls.n	800943e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	e0d6      	b.n	80095ec <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800943e:	4b1b      	ldr	r3, [pc, #108]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 8009440:	69db      	ldr	r3, [r3, #28]
 8009442:	f003 030c 	and.w	r3, r3, #12
 8009446:	2b0c      	cmp	r3, #12
 8009448:	d1ee      	bne.n	8009428 <HAL_RCC_ClockConfig+0x204>
 800944a:	e044      	b.n	80094d6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	2b02      	cmp	r3, #2
 8009452:	d112      	bne.n	800947a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009454:	e00a      	b.n	800946c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009456:	f7f8 fe8f 	bl	8002178 <HAL_GetTick>
 800945a:	4602      	mov	r2, r0
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009464:	4293      	cmp	r3, r2
 8009466:	d901      	bls.n	800946c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009468:	2303      	movs	r3, #3
 800946a:	e0bf      	b.n	80095ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800946c:	4b0f      	ldr	r3, [pc, #60]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 800946e:	69db      	ldr	r3, [r3, #28]
 8009470:	f003 030c 	and.w	r3, r3, #12
 8009474:	2b08      	cmp	r3, #8
 8009476:	d1ee      	bne.n	8009456 <HAL_RCC_ClockConfig+0x232>
 8009478:	e02d      	b.n	80094d6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d123      	bne.n	80094ca <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009482:	e00a      	b.n	800949a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009484:	f7f8 fe78 	bl	8002178 <HAL_GetTick>
 8009488:	4602      	mov	r2, r0
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009492:	4293      	cmp	r3, r2
 8009494:	d901      	bls.n	800949a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8009496:	2303      	movs	r3, #3
 8009498:	e0a8      	b.n	80095ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800949a:	4b04      	ldr	r3, [pc, #16]	@ (80094ac <HAL_RCC_ClockConfig+0x288>)
 800949c:	69db      	ldr	r3, [r3, #28]
 800949e:	f003 030c 	and.w	r3, r3, #12
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1ee      	bne.n	8009484 <HAL_RCC_ClockConfig+0x260>
 80094a6:	e016      	b.n	80094d6 <HAL_RCC_ClockConfig+0x2b2>
 80094a8:	40022000 	.word	0x40022000
 80094ac:	46020c00 	.word	0x46020c00
 80094b0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094b4:	f7f8 fe60 	bl	8002178 <HAL_GetTick>
 80094b8:	4602      	mov	r2, r0
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d901      	bls.n	80094ca <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80094c6:	2303      	movs	r3, #3
 80094c8:	e090      	b.n	80095ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80094ca:	4b4a      	ldr	r3, [pc, #296]	@ (80095f4 <HAL_RCC_ClockConfig+0x3d0>)
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	f003 030c 	and.w	r3, r3, #12
 80094d2:	2b04      	cmp	r3, #4
 80094d4:	d1ee      	bne.n	80094b4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f003 0302 	and.w	r3, r3, #2
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d010      	beq.n	8009504 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	689a      	ldr	r2, [r3, #8]
 80094e6:	4b43      	ldr	r3, [pc, #268]	@ (80095f4 <HAL_RCC_ClockConfig+0x3d0>)
 80094e8:	6a1b      	ldr	r3, [r3, #32]
 80094ea:	f003 030f 	and.w	r3, r3, #15
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d208      	bcs.n	8009504 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80094f2:	4b40      	ldr	r3, [pc, #256]	@ (80095f4 <HAL_RCC_ClockConfig+0x3d0>)
 80094f4:	6a1b      	ldr	r3, [r3, #32]
 80094f6:	f023 020f 	bic.w	r2, r3, #15
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	493d      	ldr	r1, [pc, #244]	@ (80095f4 <HAL_RCC_ClockConfig+0x3d0>)
 8009500:	4313      	orrs	r3, r2
 8009502:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009504:	4b3c      	ldr	r3, [pc, #240]	@ (80095f8 <HAL_RCC_ClockConfig+0x3d4>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 030f 	and.w	r3, r3, #15
 800950c:	683a      	ldr	r2, [r7, #0]
 800950e:	429a      	cmp	r2, r3
 8009510:	d210      	bcs.n	8009534 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009512:	4b39      	ldr	r3, [pc, #228]	@ (80095f8 <HAL_RCC_ClockConfig+0x3d4>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f023 020f 	bic.w	r2, r3, #15
 800951a:	4937      	ldr	r1, [pc, #220]	@ (80095f8 <HAL_RCC_ClockConfig+0x3d4>)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	4313      	orrs	r3, r2
 8009520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009522:	4b35      	ldr	r3, [pc, #212]	@ (80095f8 <HAL_RCC_ClockConfig+0x3d4>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 030f 	and.w	r3, r3, #15
 800952a:	683a      	ldr	r2, [r7, #0]
 800952c:	429a      	cmp	r2, r3
 800952e:	d001      	beq.n	8009534 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e05b      	b.n	80095ec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 0304 	and.w	r3, r3, #4
 800953c:	2b00      	cmp	r3, #0
 800953e:	d010      	beq.n	8009562 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68da      	ldr	r2, [r3, #12]
 8009544:	4b2b      	ldr	r3, [pc, #172]	@ (80095f4 <HAL_RCC_ClockConfig+0x3d0>)
 8009546:	6a1b      	ldr	r3, [r3, #32]
 8009548:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800954c:	429a      	cmp	r2, r3
 800954e:	d208      	bcs.n	8009562 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009550:	4b28      	ldr	r3, [pc, #160]	@ (80095f4 <HAL_RCC_ClockConfig+0x3d0>)
 8009552:	6a1b      	ldr	r3, [r3, #32]
 8009554:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	4925      	ldr	r1, [pc, #148]	@ (80095f4 <HAL_RCC_ClockConfig+0x3d0>)
 800955e:	4313      	orrs	r3, r2
 8009560:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 0308 	and.w	r3, r3, #8
 800956a:	2b00      	cmp	r3, #0
 800956c:	d012      	beq.n	8009594 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	691a      	ldr	r2, [r3, #16]
 8009572:	4b20      	ldr	r3, [pc, #128]	@ (80095f4 <HAL_RCC_ClockConfig+0x3d0>)
 8009574:	6a1b      	ldr	r3, [r3, #32]
 8009576:	091b      	lsrs	r3, r3, #4
 8009578:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800957c:	429a      	cmp	r2, r3
 800957e:	d209      	bcs.n	8009594 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009580:	4b1c      	ldr	r3, [pc, #112]	@ (80095f4 <HAL_RCC_ClockConfig+0x3d0>)
 8009582:	6a1b      	ldr	r3, [r3, #32]
 8009584:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	011b      	lsls	r3, r3, #4
 800958e:	4919      	ldr	r1, [pc, #100]	@ (80095f4 <HAL_RCC_ClockConfig+0x3d0>)
 8009590:	4313      	orrs	r3, r2
 8009592:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0310 	and.w	r3, r3, #16
 800959c:	2b00      	cmp	r3, #0
 800959e:	d010      	beq.n	80095c2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	695a      	ldr	r2, [r3, #20]
 80095a4:	4b13      	ldr	r3, [pc, #76]	@ (80095f4 <HAL_RCC_ClockConfig+0x3d0>)
 80095a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d208      	bcs.n	80095c2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80095b0:	4b10      	ldr	r3, [pc, #64]	@ (80095f4 <HAL_RCC_ClockConfig+0x3d0>)
 80095b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	695b      	ldr	r3, [r3, #20]
 80095bc:	490d      	ldr	r1, [pc, #52]	@ (80095f4 <HAL_RCC_ClockConfig+0x3d0>)
 80095be:	4313      	orrs	r3, r2
 80095c0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80095c2:	f000 f821 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 80095c6:	4602      	mov	r2, r0
 80095c8:	4b0a      	ldr	r3, [pc, #40]	@ (80095f4 <HAL_RCC_ClockConfig+0x3d0>)
 80095ca:	6a1b      	ldr	r3, [r3, #32]
 80095cc:	f003 030f 	and.w	r3, r3, #15
 80095d0:	490a      	ldr	r1, [pc, #40]	@ (80095fc <HAL_RCC_ClockConfig+0x3d8>)
 80095d2:	5ccb      	ldrb	r3, [r1, r3]
 80095d4:	fa22 f303 	lsr.w	r3, r2, r3
 80095d8:	4a09      	ldr	r2, [pc, #36]	@ (8009600 <HAL_RCC_ClockConfig+0x3dc>)
 80095da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80095dc:	4b09      	ldr	r3, [pc, #36]	@ (8009604 <HAL_RCC_ClockConfig+0x3e0>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7f8 fc47 	bl	8001e74 <HAL_InitTick>
 80095e6:	4603      	mov	r3, r0
 80095e8:	73fb      	strb	r3, [r7, #15]

  return status;
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	46020c00 	.word	0x46020c00
 80095f8:	40022000 	.word	0x40022000
 80095fc:	082b2048 	.word	0x082b2048
 8009600:	20000000 	.word	0x20000000
 8009604:	20000004 	.word	0x20000004

08009608 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009608:	b480      	push	{r7}
 800960a:	b08b      	sub	sp, #44	@ 0x2c
 800960c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8009612:	2300      	movs	r3, #0
 8009614:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009616:	4b78      	ldr	r3, [pc, #480]	@ (80097f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	f003 030c 	and.w	r3, r3, #12
 800961e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009620:	4b75      	ldr	r3, [pc, #468]	@ (80097f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009624:	f003 0303 	and.w	r3, r3, #3
 8009628:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d005      	beq.n	800963c <HAL_RCC_GetSysClockFreq+0x34>
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	2b0c      	cmp	r3, #12
 8009634:	d121      	bne.n	800967a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d11e      	bne.n	800967a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800963c:	4b6e      	ldr	r3, [pc, #440]	@ (80097f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d107      	bne.n	8009658 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8009648:	4b6b      	ldr	r3, [pc, #428]	@ (80097f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800964a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800964e:	0b1b      	lsrs	r3, r3, #12
 8009650:	f003 030f 	and.w	r3, r3, #15
 8009654:	627b      	str	r3, [r7, #36]	@ 0x24
 8009656:	e005      	b.n	8009664 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8009658:	4b67      	ldr	r3, [pc, #412]	@ (80097f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	0f1b      	lsrs	r3, r3, #28
 800965e:	f003 030f 	and.w	r3, r3, #15
 8009662:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009664:	4a65      	ldr	r2, [pc, #404]	@ (80097fc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8009666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800966c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d110      	bne.n	8009696 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009676:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009678:	e00d      	b.n	8009696 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800967a:	4b5f      	ldr	r3, [pc, #380]	@ (80097f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800967c:	69db      	ldr	r3, [r3, #28]
 800967e:	f003 030c 	and.w	r3, r3, #12
 8009682:	2b04      	cmp	r3, #4
 8009684:	d102      	bne.n	800968c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009686:	4b5e      	ldr	r3, [pc, #376]	@ (8009800 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8009688:	623b      	str	r3, [r7, #32]
 800968a:	e004      	b.n	8009696 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	2b08      	cmp	r3, #8
 8009690:	d101      	bne.n	8009696 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009692:	4b5b      	ldr	r3, [pc, #364]	@ (8009800 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8009694:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	2b0c      	cmp	r3, #12
 800969a:	f040 80a5 	bne.w	80097e8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800969e:	4b56      	ldr	r3, [pc, #344]	@ (80097f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80096a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a2:	f003 0303 	and.w	r3, r3, #3
 80096a6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80096a8:	4b53      	ldr	r3, [pc, #332]	@ (80097f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80096aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ac:	0a1b      	lsrs	r3, r3, #8
 80096ae:	f003 030f 	and.w	r3, r3, #15
 80096b2:	3301      	adds	r3, #1
 80096b4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80096b6:	4b50      	ldr	r3, [pc, #320]	@ (80097f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80096b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ba:	091b      	lsrs	r3, r3, #4
 80096bc:	f003 0301 	and.w	r3, r3, #1
 80096c0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80096c2:	4b4d      	ldr	r3, [pc, #308]	@ (80097f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80096c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c6:	08db      	lsrs	r3, r3, #3
 80096c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	fb02 f303 	mul.w	r3, r2, r3
 80096d2:	ee07 3a90 	vmov	s15, r3
 80096d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096da:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d003      	beq.n	80096ec <HAL_RCC_GetSysClockFreq+0xe4>
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	2b03      	cmp	r3, #3
 80096e8:	d022      	beq.n	8009730 <HAL_RCC_GetSysClockFreq+0x128>
 80096ea:	e043      	b.n	8009774 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	ee07 3a90 	vmov	s15, r3
 80096f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8009804 <HAL_RCC_GetSysClockFreq+0x1fc>
 80096fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096fe:	4b3e      	ldr	r3, [pc, #248]	@ (80097f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009706:	ee07 3a90 	vmov	s15, r3
 800970a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800970e:	ed97 6a01 	vldr	s12, [r7, #4]
 8009712:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8009808 <HAL_RCC_GetSysClockFreq+0x200>
 8009716:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800971a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800971e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009722:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800972a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800972e:	e046      	b.n	80097be <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	ee07 3a90 	vmov	s15, r3
 8009736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800973a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8009804 <HAL_RCC_GetSysClockFreq+0x1fc>
 800973e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009742:	4b2d      	ldr	r3, [pc, #180]	@ (80097f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800974a:	ee07 3a90 	vmov	s15, r3
 800974e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009752:	ed97 6a01 	vldr	s12, [r7, #4]
 8009756:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8009808 <HAL_RCC_GetSysClockFreq+0x200>
 800975a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800975e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009766:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800976a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800976e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009772:	e024      	b.n	80097be <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009776:	ee07 3a90 	vmov	s15, r3
 800977a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	ee07 3a90 	vmov	s15, r3
 8009784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800978c:	4b1a      	ldr	r3, [pc, #104]	@ (80097f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800978e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009794:	ee07 3a90 	vmov	s15, r3
 8009798:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800979c:	ed97 6a01 	vldr	s12, [r7, #4]
 80097a0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8009808 <HAL_RCC_GetSysClockFreq+0x200>
 80097a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80097a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80097ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80097b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097bc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80097be:	4b0e      	ldr	r3, [pc, #56]	@ (80097f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80097c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097c2:	0e1b      	lsrs	r3, r3, #24
 80097c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097c8:	3301      	adds	r3, #1
 80097ca:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	ee07 3a90 	vmov	s15, r3
 80097d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80097d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80097da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097e2:	ee17 3a90 	vmov	r3, s15
 80097e6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80097e8:	6a3b      	ldr	r3, [r7, #32]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	372c      	adds	r7, #44	@ 0x2c
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	46020c00 	.word	0x46020c00
 80097fc:	082b2060 	.word	0x082b2060
 8009800:	00f42400 	.word	0x00f42400
 8009804:	4b742400 	.word	0x4b742400
 8009808:	46000000 	.word	0x46000000

0800980c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009810:	f7ff fefa 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 8009814:	4602      	mov	r2, r0
 8009816:	4b07      	ldr	r3, [pc, #28]	@ (8009834 <HAL_RCC_GetHCLKFreq+0x28>)
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	f003 030f 	and.w	r3, r3, #15
 800981e:	4906      	ldr	r1, [pc, #24]	@ (8009838 <HAL_RCC_GetHCLKFreq+0x2c>)
 8009820:	5ccb      	ldrb	r3, [r1, r3]
 8009822:	fa22 f303 	lsr.w	r3, r2, r3
 8009826:	4a05      	ldr	r2, [pc, #20]	@ (800983c <HAL_RCC_GetHCLKFreq+0x30>)
 8009828:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800982a:	4b04      	ldr	r3, [pc, #16]	@ (800983c <HAL_RCC_GetHCLKFreq+0x30>)
 800982c:	681b      	ldr	r3, [r3, #0]
}
 800982e:	4618      	mov	r0, r3
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	46020c00 	.word	0x46020c00
 8009838:	082b2048 	.word	0x082b2048
 800983c:	20000000 	.word	0x20000000

08009840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8009844:	f7ff ffe2 	bl	800980c <HAL_RCC_GetHCLKFreq>
 8009848:	4602      	mov	r2, r0
 800984a:	4b05      	ldr	r3, [pc, #20]	@ (8009860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800984c:	6a1b      	ldr	r3, [r3, #32]
 800984e:	091b      	lsrs	r3, r3, #4
 8009850:	f003 0307 	and.w	r3, r3, #7
 8009854:	4903      	ldr	r1, [pc, #12]	@ (8009864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009856:	5ccb      	ldrb	r3, [r1, r3]
 8009858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800985c:	4618      	mov	r0, r3
 800985e:	bd80      	pop	{r7, pc}
 8009860:	46020c00 	.word	0x46020c00
 8009864:	082b2058 	.word	0x082b2058

08009868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800986c:	f7ff ffce 	bl	800980c <HAL_RCC_GetHCLKFreq>
 8009870:	4602      	mov	r2, r0
 8009872:	4b05      	ldr	r3, [pc, #20]	@ (8009888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009874:	6a1b      	ldr	r3, [r3, #32]
 8009876:	0a1b      	lsrs	r3, r3, #8
 8009878:	f003 0307 	and.w	r3, r3, #7
 800987c:	4903      	ldr	r1, [pc, #12]	@ (800988c <HAL_RCC_GetPCLK2Freq+0x24>)
 800987e:	5ccb      	ldrb	r3, [r1, r3]
 8009880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009884:	4618      	mov	r0, r3
 8009886:	bd80      	pop	{r7, pc}
 8009888:	46020c00 	.word	0x46020c00
 800988c:	082b2058 	.word	0x082b2058

08009890 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8009894:	f7ff ffba 	bl	800980c <HAL_RCC_GetHCLKFreq>
 8009898:	4602      	mov	r2, r0
 800989a:	4b05      	ldr	r3, [pc, #20]	@ (80098b0 <HAL_RCC_GetPCLK3Freq+0x20>)
 800989c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800989e:	091b      	lsrs	r3, r3, #4
 80098a0:	f003 0307 	and.w	r3, r3, #7
 80098a4:	4903      	ldr	r1, [pc, #12]	@ (80098b4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80098a6:	5ccb      	ldrb	r3, [r1, r3]
 80098a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	46020c00 	.word	0x46020c00
 80098b4:	082b2058 	.word	0x082b2058

080098b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	221f      	movs	r2, #31
 80098c6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80098c8:	4b15      	ldr	r3, [pc, #84]	@ (8009920 <HAL_RCC_GetClockConfig+0x68>)
 80098ca:	69db      	ldr	r3, [r3, #28]
 80098cc:	f003 0203 	and.w	r2, r3, #3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80098d4:	4b12      	ldr	r3, [pc, #72]	@ (8009920 <HAL_RCC_GetClockConfig+0x68>)
 80098d6:	6a1b      	ldr	r3, [r3, #32]
 80098d8:	f003 020f 	and.w	r2, r3, #15
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80098e0:	4b0f      	ldr	r3, [pc, #60]	@ (8009920 <HAL_RCC_GetClockConfig+0x68>)
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80098ec:	4b0c      	ldr	r3, [pc, #48]	@ (8009920 <HAL_RCC_GetClockConfig+0x68>)
 80098ee:	6a1b      	ldr	r3, [r3, #32]
 80098f0:	091b      	lsrs	r3, r3, #4
 80098f2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80098fa:	4b09      	ldr	r3, [pc, #36]	@ (8009920 <HAL_RCC_GetClockConfig+0x68>)
 80098fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098fe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009906:	4b07      	ldr	r3, [pc, #28]	@ (8009924 <HAL_RCC_GetClockConfig+0x6c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f003 020f 	and.w	r2, r3, #15
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	601a      	str	r2, [r3, #0]
}
 8009912:	bf00      	nop
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	46020c00 	.word	0x46020c00
 8009924:	40022000 	.word	0x40022000

08009928 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009928:	b480      	push	{r7}
 800992a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 800992c:	4b05      	ldr	r3, [pc, #20]	@ (8009944 <HAL_RCC_EnableCSS+0x1c>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a04      	ldr	r2, [pc, #16]	@ (8009944 <HAL_RCC_EnableCSS+0x1c>)
 8009932:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009936:	6013      	str	r3, [r2, #0]
}
 8009938:	bf00      	nop
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	46020c00 	.word	0x46020c00

08009948 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800994c:	4b07      	ldr	r3, [pc, #28]	@ (800996c <HAL_RCC_NMI_IRQHandler+0x24>)
 800994e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009954:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009958:	d105      	bne.n	8009966 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800995a:	4b04      	ldr	r3, [pc, #16]	@ (800996c <HAL_RCC_NMI_IRQHandler+0x24>)
 800995c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009960:	659a      	str	r2, [r3, #88]	@ 0x58

    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009962:	f000 f805 	bl	8009970 <HAL_RCC_CSSCallback>
  }
}
 8009966:	bf00      	nop
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	46020c00 	.word	0x46020c00

08009970 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009970:	b480      	push	{r7}
 8009972:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8009974:	bf00      	nop
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
	...

08009980 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009988:	4b3e      	ldr	r3, [pc, #248]	@ (8009a84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800998a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800998e:	f003 0304 	and.w	r3, r3, #4
 8009992:	2b00      	cmp	r3, #0
 8009994:	d003      	beq.n	800999e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009996:	f7fe fceb 	bl	8008370 <HAL_PWREx_GetVoltageRange>
 800999a:	6178      	str	r0, [r7, #20]
 800999c:	e019      	b.n	80099d2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800999e:	4b39      	ldr	r3, [pc, #228]	@ (8009a84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80099a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099a4:	4a37      	ldr	r2, [pc, #220]	@ (8009a84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80099a6:	f043 0304 	orr.w	r3, r3, #4
 80099aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80099ae:	4b35      	ldr	r3, [pc, #212]	@ (8009a84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80099b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099b4:	f003 0304 	and.w	r3, r3, #4
 80099b8:	60fb      	str	r3, [r7, #12]
 80099ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80099bc:	f7fe fcd8 	bl	8008370 <HAL_PWREx_GetVoltageRange>
 80099c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80099c2:	4b30      	ldr	r3, [pc, #192]	@ (8009a84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80099c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099c8:	4a2e      	ldr	r2, [pc, #184]	@ (8009a84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80099ca:	f023 0304 	bic.w	r3, r3, #4
 80099ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80099d8:	d003      	beq.n	80099e2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099e0:	d109      	bne.n	80099f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099e8:	d202      	bcs.n	80099f0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80099ea:	2301      	movs	r3, #1
 80099ec:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80099ee:	e033      	b.n	8009a58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80099f0:	2300      	movs	r3, #0
 80099f2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80099f4:	e030      	b.n	8009a58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099fc:	d208      	bcs.n	8009a10 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a04:	d102      	bne.n	8009a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8009a06:	2303      	movs	r3, #3
 8009a08:	613b      	str	r3, [r7, #16]
 8009a0a:	e025      	b.n	8009a58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e035      	b.n	8009a7c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a16:	d90f      	bls.n	8009a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d109      	bne.n	8009a32 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a24:	d902      	bls.n	8009a2c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8009a26:	2300      	movs	r3, #0
 8009a28:	613b      	str	r3, [r7, #16]
 8009a2a:	e015      	b.n	8009a58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	613b      	str	r3, [r7, #16]
 8009a30:	e012      	b.n	8009a58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8009a32:	2300      	movs	r3, #0
 8009a34:	613b      	str	r3, [r7, #16]
 8009a36:	e00f      	b.n	8009a58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a3e:	d109      	bne.n	8009a54 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a46:	d102      	bne.n	8009a4e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8009a48:	2301      	movs	r3, #1
 8009a4a:	613b      	str	r3, [r7, #16]
 8009a4c:	e004      	b.n	8009a58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8009a4e:	2302      	movs	r3, #2
 8009a50:	613b      	str	r3, [r7, #16]
 8009a52:	e001      	b.n	8009a58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8009a54:	2301      	movs	r3, #1
 8009a56:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009a58:	4b0b      	ldr	r3, [pc, #44]	@ (8009a88 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f023 020f 	bic.w	r2, r3, #15
 8009a60:	4909      	ldr	r1, [pc, #36]	@ (8009a88 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8009a68:	4b07      	ldr	r3, [pc, #28]	@ (8009a88 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 030f 	and.w	r3, r3, #15
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d001      	beq.n	8009a7a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e000      	b.n	8009a7c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3718      	adds	r7, #24
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	46020c00 	.word	0x46020c00
 8009a88:	40022000 	.word	0x40022000

08009a8c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8009a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a90:	b0c8      	sub	sp, #288	@ 0x120
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aac:	f002 0401 	and.w	r4, r2, #1
 8009ab0:	2500      	movs	r5, #0
 8009ab2:	ea54 0305 	orrs.w	r3, r4, r5
 8009ab6:	d00b      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8009ab8:	4bd5      	ldr	r3, [pc, #852]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009abe:	f023 0103 	bic.w	r1, r3, #3
 8009ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ac8:	4ad1      	ldr	r2, [pc, #836]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009aca:	430b      	orrs	r3, r1
 8009acc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	f002 0802 	and.w	r8, r2, #2
 8009adc:	f04f 0900 	mov.w	r9, #0
 8009ae0:	ea58 0309 	orrs.w	r3, r8, r9
 8009ae4:	d00b      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8009ae6:	4bca      	ldr	r3, [pc, #808]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009aec:	f023 010c 	bic.w	r1, r3, #12
 8009af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009af6:	4ac6      	ldr	r2, [pc, #792]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009af8:	430b      	orrs	r3, r1
 8009afa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	f002 0a04 	and.w	sl, r2, #4
 8009b0a:	f04f 0b00 	mov.w	fp, #0
 8009b0e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009b12:	d00b      	beq.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8009b14:	4bbe      	ldr	r3, [pc, #760]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b1a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b24:	4aba      	ldr	r2, [pc, #744]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b26:	430b      	orrs	r3, r1
 8009b28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b34:	f002 0308 	and.w	r3, r2, #8
 8009b38:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009b42:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009b46:	460b      	mov	r3, r1
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	d00b      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8009b4c:	4bb0      	ldr	r3, [pc, #704]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b5c:	4aac      	ldr	r2, [pc, #688]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b5e:	430b      	orrs	r3, r1
 8009b60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6c:	f002 0310 	and.w	r3, r2, #16
 8009b70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009b74:	2300      	movs	r3, #0
 8009b76:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b7a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4313      	orrs	r3, r2
 8009b82:	d00b      	beq.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8009b84:	4ba2      	ldr	r3, [pc, #648]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b94:	4a9e      	ldr	r2, [pc, #632]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b96:	430b      	orrs	r3, r1
 8009b98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009ba8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009bac:	2300      	movs	r3, #0
 8009bae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009bb2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	d00b      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8009bbc:	4b94      	ldr	r3, [pc, #592]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009bbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009bc2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bcc:	4a90      	ldr	r2, [pc, #576]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009bce:	430b      	orrs	r3, r1
 8009bd0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	f002 0320 	and.w	r3, r2, #32
 8009be0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009be4:	2300      	movs	r3, #0
 8009be6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009bea:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009bee:	460b      	mov	r3, r1
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	d00b      	beq.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8009bf4:	4b86      	ldr	r3, [pc, #536]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009bf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009bfa:	f023 0107 	bic.w	r1, r3, #7
 8009bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c04:	4a82      	ldr	r2, [pc, #520]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009c06:	430b      	orrs	r3, r1
 8009c08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c14:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009c18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c22:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009c26:	460b      	mov	r3, r1
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	d00b      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8009c2c:	4b78      	ldr	r3, [pc, #480]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009c32:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8009c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c3c:	4a74      	ldr	r2, [pc, #464]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009c3e:	430b      	orrs	r3, r1
 8009c40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009c50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009c54:	2300      	movs	r3, #0
 8009c56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009c5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009c5e:	460b      	mov	r3, r1
 8009c60:	4313      	orrs	r3, r2
 8009c62:	d00b      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8009c64:	4b6a      	ldr	r3, [pc, #424]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009c6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c74:	4a66      	ldr	r2, [pc, #408]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009c76:	430b      	orrs	r3, r1
 8009c78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c84:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8009c88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009c92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009c96:	460b      	mov	r3, r1
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	d00b      	beq.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8009c9c:	4b5c      	ldr	r3, [pc, #368]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009c9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009ca2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cac:	4a58      	ldr	r2, [pc, #352]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009cae:	430b      	orrs	r3, r1
 8009cb0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009cc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009cca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009cce:	460b      	mov	r3, r1
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	d00b      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8009cd4:	4b4e      	ldr	r3, [pc, #312]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009cda:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8009cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ce2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009ce6:	430b      	orrs	r3, r1
 8009ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8009cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d02:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d06:	460b      	mov	r3, r1
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	d00b      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8009d0c:	4b40      	ldr	r3, [pc, #256]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009d0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d12:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8009d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d1c:	4a3c      	ldr	r2, [pc, #240]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009d1e:	430b      	orrs	r3, r1
 8009d20:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8009d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009d30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d34:	2300      	movs	r3, #0
 8009d36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009d3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4313      	orrs	r3, r2
 8009d42:	d00c      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8009d44:	4b32      	ldr	r3, [pc, #200]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009d46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d4a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d56:	4a2e      	ldr	r2, [pc, #184]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009d58:	430b      	orrs	r3, r1
 8009d5a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d66:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8009d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d6e:	2300      	movs	r3, #0
 8009d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d74:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009d78:	460b      	mov	r3, r1
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	d00c      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8009d7e:	4b24      	ldr	r3, [pc, #144]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009d80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d84:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8009d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d90:	4a1f      	ldr	r2, [pc, #124]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009d92:	430b      	orrs	r3, r1
 8009d94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009da4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009da8:	2300      	movs	r3, #0
 8009daa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009dae:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009db2:	460b      	mov	r3, r1
 8009db4:	4313      	orrs	r3, r2
 8009db6:	d00c      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8009db8:	4b15      	ldr	r3, [pc, #84]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009dbe:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8009dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dca:	4a11      	ldr	r2, [pc, #68]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009dcc:	430b      	orrs	r3, r1
 8009dce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8009dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dda:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009dde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009de2:	2300      	movs	r3, #0
 8009de4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009de8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009dec:	460b      	mov	r3, r1
 8009dee:	4313      	orrs	r3, r2
 8009df0:	d010      	beq.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8009df2:	4b07      	ldr	r3, [pc, #28]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009df4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009df8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e04:	4a02      	ldr	r2, [pc, #8]	@ (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009e06:	430b      	orrs	r3, r1
 8009e08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009e0c:	e002      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8009e0e:	bf00      	nop
 8009e10:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009e20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e24:	2300      	movs	r3, #0
 8009e26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e2a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009e2e:	460b      	mov	r3, r1
 8009e30:	4313      	orrs	r3, r2
 8009e32:	d04c      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e3c:	2b80      	cmp	r3, #128	@ 0x80
 8009e3e:	d02d      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009e40:	2b80      	cmp	r3, #128	@ 0x80
 8009e42:	d827      	bhi.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009e44:	2b60      	cmp	r3, #96	@ 0x60
 8009e46:	d02b      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009e48:	2b60      	cmp	r3, #96	@ 0x60
 8009e4a:	d823      	bhi.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009e4c:	2b40      	cmp	r3, #64	@ 0x40
 8009e4e:	d006      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8009e50:	2b40      	cmp	r3, #64	@ 0x40
 8009e52:	d81f      	bhi.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d009      	beq.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009e58:	2b20      	cmp	r3, #32
 8009e5a:	d011      	beq.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009e5c:	e01a      	b.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e5e:	4bc0      	ldr	r3, [pc, #768]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e62:	4abf      	ldr	r2, [pc, #764]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e68:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009e6a:	e01a      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e70:	3308      	adds	r3, #8
 8009e72:	4618      	mov	r0, r3
 8009e74:	f002 fd36 	bl	800c8e4 <RCCEx_PLL2_Config>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009e7e:	e010      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e84:	332c      	adds	r3, #44	@ 0x2c
 8009e86:	4618      	mov	r0, r3
 8009e88:	f002 fdc4 	bl	800ca14 <RCCEx_PLL3_Config>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009e92:	e006      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009e9a:	e002      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009e9c:	bf00      	nop
 8009e9e:	e000      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ea2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d10d      	bne.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8009eaa:	4bad      	ldr	r3, [pc, #692]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009eac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009eb0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8009eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ebc:	4aa8      	ldr	r2, [pc, #672]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009ebe:	430b      	orrs	r3, r1
 8009ec0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009ec4:	e003      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ec6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009eca:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009eda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ee4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009ee8:	460b      	mov	r3, r1
 8009eea:	4313      	orrs	r3, r2
 8009eec:	d053      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8009eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ef2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009efa:	d033      	beq.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8009efc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f00:	d82c      	bhi.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009f02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f06:	d02f      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8009f08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f0c:	d826      	bhi.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009f0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f12:	d008      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8009f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f18:	d820      	bhi.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00a      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f22:	d011      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009f24:	e01a      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009f26:	4b8e      	ldr	r3, [pc, #568]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f2a:	4a8d      	ldr	r2, [pc, #564]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f30:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009f32:	e01a      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f38:	3308      	adds	r3, #8
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f002 fcd2 	bl	800c8e4 <RCCEx_PLL2_Config>
 8009f40:	4603      	mov	r3, r0
 8009f42:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009f46:	e010      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f4c:	332c      	adds	r3, #44	@ 0x2c
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f002 fd60 	bl	800ca14 <RCCEx_PLL3_Config>
 8009f54:	4603      	mov	r3, r0
 8009f56:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009f5a:	e006      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009f62:	e002      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009f64:	bf00      	nop
 8009f66:	e000      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f6a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10d      	bne.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8009f72:	4b7b      	ldr	r3, [pc, #492]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009f74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009f78:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8009f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f84:	4a76      	ldr	r2, [pc, #472]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009f86:	430b      	orrs	r3, r1
 8009f88:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009f8c:	e003      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f8e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009f92:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8009f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009fa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009fac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	d046      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8009fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009fbe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009fc2:	d028      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009fc4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009fc8:	d821      	bhi.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009fca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009fce:	d022      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009fd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009fd4:	d81b      	bhi.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009fd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009fda:	d01c      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009fdc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009fe0:	d815      	bhi.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fe6:	d008      	beq.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8009fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fec:	d80f      	bhi.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d011      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ff6:	d00e      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009ff8:	e009      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ffe:	3308      	adds	r3, #8
 800a000:	4618      	mov	r0, r3
 800a002:	f002 fc6f 	bl	800c8e4 <RCCEx_PLL2_Config>
 800a006:	4603      	mov	r3, r0
 800a008:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a00c:	e004      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a014:	e000      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800a016:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a018:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10d      	bne.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800a020:	4b4f      	ldr	r3, [pc, #316]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a026:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a02a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a02e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a032:	4a4b      	ldr	r2, [pc, #300]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a034:	430b      	orrs	r3, r1
 800a036:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800a03a:	e003      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a03c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a040:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800a044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a050:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a054:	2300      	movs	r3, #0
 800a056:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a05a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a05e:	460b      	mov	r3, r1
 800a060:	4313      	orrs	r3, r2
 800a062:	d03f      	beq.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800a064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a06c:	2b04      	cmp	r3, #4
 800a06e:	d81e      	bhi.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x622>
 800a070:	a201      	add	r2, pc, #4	@ (adr r2, 800a078 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800a072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a076:	bf00      	nop
 800a078:	0800a0b7 	.word	0x0800a0b7
 800a07c:	0800a08d 	.word	0x0800a08d
 800a080:	0800a09b 	.word	0x0800a09b
 800a084:	0800a0b7 	.word	0x0800a0b7
 800a088:	0800a0b7 	.word	0x0800a0b7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a08c:	4b34      	ldr	r3, [pc, #208]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a090:	4a33      	ldr	r2, [pc, #204]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a092:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a096:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800a098:	e00e      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a09a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a09e:	332c      	adds	r3, #44	@ 0x2c
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f002 fcb7 	bl	800ca14 <RCCEx_PLL3_Config>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a0ac:	e004      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a0b4:	e000      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800a0b6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a0b8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10d      	bne.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800a0c0:	4b27      	ldr	r3, [pc, #156]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a0c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a0c6:	f023 0107 	bic.w	r1, r3, #7
 800a0ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a0d2:	4a23      	ldr	r2, [pc, #140]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a0d4:	430b      	orrs	r3, r1
 800a0d6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a0da:	e003      	b.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0dc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a0e0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800a0e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ec:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a0f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a0f6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	d04c      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800a100:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a104:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a108:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a10c:	d02a      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800a10e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a112:	d821      	bhi.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800a114:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a118:	d026      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800a11a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a11e:	d81b      	bhi.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800a120:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a124:	d00e      	beq.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a126:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a12a:	d815      	bhi.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d01d      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800a130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a134:	d110      	bne.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a136:	4b0a      	ldr	r3, [pc, #40]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a13a:	4a09      	ldr	r2, [pc, #36]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a13c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a140:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800a142:	e014      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a144:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a148:	332c      	adds	r3, #44	@ 0x2c
 800a14a:	4618      	mov	r0, r3
 800a14c:	f002 fc62 	bl	800ca14 <RCCEx_PLL3_Config>
 800a150:	4603      	mov	r3, r0
 800a152:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a156:	e00a      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a15e:	e006      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800a160:	46020c00 	.word	0x46020c00
        break;
 800a164:	bf00      	nop
 800a166:	e002      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800a168:	bf00      	nop
 800a16a:	e000      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800a16c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a16e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a172:	2b00      	cmp	r3, #0
 800a174:	d10d      	bne.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800a176:	4baf      	ldr	r3, [pc, #700]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a17c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a184:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a188:	4aaa      	ldr	r2, [pc, #680]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a18a:	430b      	orrs	r3, r1
 800a18c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800a190:	e003      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a192:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a196:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a19a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a1a6:	673b      	str	r3, [r7, #112]	@ 0x70
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	677b      	str	r3, [r7, #116]	@ 0x74
 800a1ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	f000 80b5 	beq.w	800a322 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a1be:	4b9d      	ldr	r3, [pc, #628]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1c4:	f003 0304 	and.w	r3, r3, #4
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d113      	bne.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1cc:	4b99      	ldr	r3, [pc, #612]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1d2:	4a98      	ldr	r2, [pc, #608]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1d4:	f043 0304 	orr.w	r3, r3, #4
 800a1d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a1dc:	4b95      	ldr	r3, [pc, #596]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1e2:	f003 0304 	and.w	r3, r3, #4
 800a1e6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800a1ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a1f4:	4b90      	ldr	r3, [pc, #576]	@ (800a438 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800a1f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f8:	4a8f      	ldr	r2, [pc, #572]	@ (800a438 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800a1fa:	f043 0301 	orr.w	r3, r3, #1
 800a1fe:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a200:	f7f7 ffba 	bl	8002178 <HAL_GetTick>
 800a204:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a208:	e00b      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a20a:	f7f7 ffb5 	bl	8002178 <HAL_GetTick>
 800a20e:	4602      	mov	r2, r0
 800a210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	2b02      	cmp	r3, #2
 800a218:	d903      	bls.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800a21a:	2303      	movs	r3, #3
 800a21c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a220:	e005      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a222:	4b85      	ldr	r3, [pc, #532]	@ (800a438 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800a224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a226:	f003 0301 	and.w	r3, r3, #1
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0ed      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800a22e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a232:	2b00      	cmp	r3, #0
 800a234:	d165      	bne.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a236:	4b7f      	ldr	r3, [pc, #508]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a23c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a240:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800a244:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d023      	beq.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800a24c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a250:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800a254:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a258:	4293      	cmp	r3, r2
 800a25a:	d01b      	beq.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a25c:	4b75      	ldr	r3, [pc, #468]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a25e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a266:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a26a:	4b72      	ldr	r3, [pc, #456]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a26c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a270:	4a70      	ldr	r2, [pc, #448]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a276:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a27a:	4b6e      	ldr	r3, [pc, #440]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a27c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a280:	4a6c      	ldr	r2, [pc, #432]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a286:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a28a:	4a6a      	ldr	r2, [pc, #424]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a28c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a290:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a294:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a298:	f003 0301 	and.w	r3, r3, #1
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d019      	beq.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2a0:	f7f7 ff6a 	bl	8002178 <HAL_GetTick>
 800a2a4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a2a8:	e00d      	b.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2aa:	f7f7 ff65 	bl	8002178 <HAL_GetTick>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2b4:	1ad2      	subs	r2, r2, r3
 800a2b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d903      	bls.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800a2c4:	e006      	b.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a2c6:	4b5b      	ldr	r3, [pc, #364]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a2c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2cc:	f003 0302 	and.w	r3, r3, #2
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d0ea      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800a2d4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d10d      	bne.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800a2dc:	4b55      	ldr	r3, [pc, #340]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a2de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a2e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2ea:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800a2ee:	4a51      	ldr	r2, [pc, #324]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a2f0:	430b      	orrs	r3, r1
 800a2f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a2f6:	e008      	b.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a2f8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a2fc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800a300:	e003      	b.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a302:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a306:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a30a:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d107      	bne.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a312:	4b48      	ldr	r3, [pc, #288]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a314:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a318:	4a46      	ldr	r2, [pc, #280]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a31a:	f023 0304 	bic.w	r3, r3, #4
 800a31e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800a322:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a32e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a330:	2300      	movs	r3, #0
 800a332:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a334:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a338:	460b      	mov	r3, r1
 800a33a:	4313      	orrs	r3, r2
 800a33c:	d042      	beq.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800a33e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a342:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a346:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a34a:	d022      	beq.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800a34c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a350:	d81b      	bhi.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a352:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a356:	d011      	beq.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800a358:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a35c:	d815      	bhi.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d019      	beq.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800a362:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a366:	d110      	bne.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a36c:	3308      	adds	r3, #8
 800a36e:	4618      	mov	r0, r3
 800a370:	f002 fab8 	bl	800c8e4 <RCCEx_PLL2_Config>
 800a374:	4603      	mov	r3, r0
 800a376:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a37a:	e00d      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a37c:	4b2d      	ldr	r3, [pc, #180]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a37e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a380:	4a2c      	ldr	r2, [pc, #176]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a382:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a386:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800a388:	e006      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a390:	e002      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800a392:	bf00      	nop
 800a394:	e000      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800a396:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a398:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10d      	bne.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800a3a0:	4b24      	ldr	r3, [pc, #144]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a3a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a3a6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800a3aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a3b2:	4a20      	ldr	r2, [pc, #128]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a3b4:	430b      	orrs	r3, r1
 800a3b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a3ba:	e003      	b.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3bc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a3c0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a3c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a3d0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3d6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a3da:	460b      	mov	r3, r1
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	d031      	beq.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800a3e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a3e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3ec:	d00b      	beq.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800a3ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3f2:	d804      	bhi.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x972>
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d008      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800a3f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3fc:	d007      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a404:	e004      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a406:	bf00      	nop
 800a408:	e002      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a40a:	bf00      	nop
 800a40c:	e000      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a40e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a410:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a414:	2b00      	cmp	r3, #0
 800a416:	d111      	bne.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800a418:	4b06      	ldr	r3, [pc, #24]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a41a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a41e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a422:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a426:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a42a:	4a02      	ldr	r2, [pc, #8]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a42c:	430b      	orrs	r3, r1
 800a42e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a432:	e007      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800a434:	46020c00 	.word	0x46020c00
 800a438:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a43c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a440:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800a444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a450:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a452:	2300      	movs	r3, #0
 800a454:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a456:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a45a:	460b      	mov	r3, r1
 800a45c:	4313      	orrs	r3, r2
 800a45e:	d00c      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800a460:	4bb2      	ldr	r3, [pc, #712]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a462:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a466:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800a46a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a46e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a472:	4aae      	ldr	r2, [pc, #696]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a474:	430b      	orrs	r3, r1
 800a476:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800a47a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a482:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a486:	653b      	str	r3, [r7, #80]	@ 0x50
 800a488:	2300      	movs	r3, #0
 800a48a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a48c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a490:	460b      	mov	r3, r1
 800a492:	4313      	orrs	r3, r2
 800a494:	d019      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800a496:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a49a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a49e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a4a2:	d105      	bne.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a4a4:	4ba1      	ldr	r3, [pc, #644]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a8:	4aa0      	ldr	r2, [pc, #640]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a4ae:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800a4b0:	4b9e      	ldr	r3, [pc, #632]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a4b6:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a4ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a4c2:	4a9a      	ldr	r2, [pc, #616]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4c4:	430b      	orrs	r3, r1
 800a4c6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800a4ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a4d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4d8:	2300      	movs	r3, #0
 800a4da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	d00c      	beq.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800a4e6:	4b91      	ldr	r3, [pc, #580]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a4ec:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a4f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a4f8:	4a8c      	ldr	r2, [pc, #560]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4fa:	430b      	orrs	r3, r1
 800a4fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800a500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a508:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a50c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a50e:	2300      	movs	r3, #0
 800a510:	647b      	str	r3, [r7, #68]	@ 0x44
 800a512:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a516:	460b      	mov	r3, r1
 800a518:	4313      	orrs	r3, r2
 800a51a:	d00c      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800a51c:	4b83      	ldr	r3, [pc, #524]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a51e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a522:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a526:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a52a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a52e:	4a7f      	ldr	r2, [pc, #508]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a530:	430b      	orrs	r3, r1
 800a532:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800a536:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a542:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a544:	2300      	movs	r3, #0
 800a546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a548:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a54c:	460b      	mov	r3, r1
 800a54e:	4313      	orrs	r3, r2
 800a550:	d00c      	beq.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800a552:	4b76      	ldr	r3, [pc, #472]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a558:	f023 0118 	bic.w	r1, r3, #24
 800a55c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a560:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800a564:	4a71      	ldr	r2, [pc, #452]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a566:	430b      	orrs	r3, r1
 800a568:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a56c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a574:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800a578:	633b      	str	r3, [r7, #48]	@ 0x30
 800a57a:	2300      	movs	r3, #0
 800a57c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a57e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a582:	460b      	mov	r3, r1
 800a584:	4313      	orrs	r3, r2
 800a586:	d032      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800a588:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a58c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a590:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a594:	d105      	bne.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a596:	4b65      	ldr	r3, [pc, #404]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a59a:	4a64      	ldr	r2, [pc, #400]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a59c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5a0:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800a5a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a5aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a5ae:	d108      	bne.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a5b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5b4:	3308      	adds	r3, #8
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f002 f994 	bl	800c8e4 <RCCEx_PLL2_Config>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800a5c2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d10d      	bne.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800a5ca:	4b58      	ldr	r3, [pc, #352]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a5cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a5d0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a5d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a5dc:	4a53      	ldr	r2, [pc, #332]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a5de:	430b      	orrs	r3, r1
 800a5e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a5e4:	e003      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5e6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a5ea:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800a5ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a5fa:	f003 0301 	and.w	r3, r3, #1
 800a5fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a600:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a604:	460b      	mov	r3, r1
 800a606:	4313      	orrs	r3, r2
 800a608:	d04a      	beq.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800a60a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a60e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a612:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a616:	d01e      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800a618:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a61c:	d825      	bhi.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a61e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a622:	d00e      	beq.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800a624:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a628:	d81f      	bhi.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d021      	beq.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800a62e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a632:	d11a      	bne.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a634:	4b3d      	ldr	r3, [pc, #244]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a638:	4a3c      	ldr	r2, [pc, #240]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a63a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a63e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a640:	e018      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a642:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a646:	3308      	adds	r3, #8
 800a648:	4618      	mov	r0, r3
 800a64a:	f002 f94b 	bl	800c8e4 <RCCEx_PLL2_Config>
 800a64e:	4603      	mov	r3, r0
 800a650:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a654:	e00e      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a65a:	332c      	adds	r3, #44	@ 0x2c
 800a65c:	4618      	mov	r0, r3
 800a65e:	f002 f9d9 	bl	800ca14 <RCCEx_PLL3_Config>
 800a662:	4603      	mov	r3, r0
 800a664:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a668:	e004      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a670:	e000      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800a672:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a674:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d10d      	bne.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800a67c:	4b2b      	ldr	r3, [pc, #172]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a67e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a682:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a686:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a68a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a68e:	4927      	ldr	r1, [pc, #156]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a690:	4313      	orrs	r3, r2
 800a692:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a696:	e003      	b.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a698:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a69c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800a6a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800a6ac:	623b      	str	r3, [r7, #32]
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	d03d      	beq.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800a6bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6c8:	d00e      	beq.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800a6ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6ce:	d815      	bhi.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d017      	beq.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a6d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6d8:	d110      	bne.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6da:	4b14      	ldr	r3, [pc, #80]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a6dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6de:	4a13      	ldr	r2, [pc, #76]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a6e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6e4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a6e6:	e00e      	b.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a6e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6ec:	3308      	adds	r3, #8
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f002 f8f8 	bl	800c8e4 <RCCEx_PLL2_Config>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a6fa:	e004      	b.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a702:	e000      	b.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a704:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a706:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d110      	bne.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800a70e:	4b07      	ldr	r3, [pc, #28]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a714:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a718:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a71c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a720:	4902      	ldr	r1, [pc, #8]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a722:	4313      	orrs	r3, r2
 800a724:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800a728:	e006      	b.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800a72a:	bf00      	nop
 800a72c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a730:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a734:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800a738:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a740:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a744:	61bb      	str	r3, [r7, #24]
 800a746:	2300      	movs	r3, #0
 800a748:	61fb      	str	r3, [r7, #28]
 800a74a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a74e:	460b      	mov	r3, r1
 800a750:	4313      	orrs	r3, r2
 800a752:	d00c      	beq.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800a754:	4b68      	ldr	r3, [pc, #416]	@ (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a756:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a75a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800a75e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a762:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a766:	4964      	ldr	r1, [pc, #400]	@ (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a768:	4313      	orrs	r3, r2
 800a76a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a76e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a776:	2100      	movs	r1, #0
 800a778:	6139      	str	r1, [r7, #16]
 800a77a:	f003 0302 	and.w	r3, r3, #2
 800a77e:	617b      	str	r3, [r7, #20]
 800a780:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a784:	460b      	mov	r3, r1
 800a786:	4313      	orrs	r3, r2
 800a788:	d036      	beq.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800a78a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a78e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00c      	beq.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800a796:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a79a:	d113      	bne.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a79c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7a0:	3308      	adds	r3, #8
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f002 f89e 	bl	800c8e4 <RCCEx_PLL2_Config>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a7ae:	e00d      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a7b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7b4:	332c      	adds	r3, #44	@ 0x2c
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f002 f92c 	bl	800ca14 <RCCEx_PLL3_Config>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a7c2:	e003      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a7ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7cc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d10d      	bne.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800a7d4:	4b48      	ldr	r3, [pc, #288]	@ (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a7d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a7da:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a7de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800a7e6:	4944      	ldr	r1, [pc, #272]	@ (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a7ee:	e003      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7f0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a7f4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a7f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a800:	2100      	movs	r1, #0
 800a802:	60b9      	str	r1, [r7, #8]
 800a804:	f003 0304 	and.w	r3, r3, #4
 800a808:	60fb      	str	r3, [r7, #12]
 800a80a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a80e:	460b      	mov	r3, r1
 800a810:	4313      	orrs	r3, r2
 800a812:	d024      	beq.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800a814:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a818:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d108      	bne.n	800a832 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a820:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a824:	332c      	adds	r3, #44	@ 0x2c
 800a826:	4618      	mov	r0, r3
 800a828:	f002 f8f4 	bl	800ca14 <RCCEx_PLL3_Config>
 800a82c:	4603      	mov	r3, r0
 800a82e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800a832:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10d      	bne.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800a83a:	4b2f      	ldr	r3, [pc, #188]	@ (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a83c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a840:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800a844:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a848:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a84c:	492a      	ldr	r1, [pc, #168]	@ (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a84e:	4313      	orrs	r3, r2
 800a850:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a854:	e003      	b.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a856:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a85a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800a85e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a866:	2100      	movs	r1, #0
 800a868:	6039      	str	r1, [r7, #0]
 800a86a:	f003 0308 	and.w	r3, r3, #8
 800a86e:	607b      	str	r3, [r7, #4]
 800a870:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a874:	460b      	mov	r3, r1
 800a876:	4313      	orrs	r3, r2
 800a878:	d036      	beq.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800a87a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a87e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a882:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a886:	d00d      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800a888:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a88c:	d811      	bhi.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a88e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a892:	d012      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a894:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a898:	d80b      	bhi.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00d      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a89e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8a2:	d106      	bne.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a8a4:	4b14      	ldr	r3, [pc, #80]	@ (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a8a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a8:	4a13      	ldr	r2, [pc, #76]	@ (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a8aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a8ae:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800a8b0:	e004      	b.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a8b8:	e000      	b.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800a8ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8bc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d10d      	bne.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800a8c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a8c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a8ca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800a8ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8d2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a8d6:	4908      	ldr	r1, [pc, #32]	@ (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a8de:	e003      	b.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8e0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a8e4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800a8e8:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8f8:	46020c00 	.word	0x46020c00

0800a8fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b089      	sub	sp, #36	@ 0x24
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800a904:	4ba6      	ldr	r3, [pc, #664]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a90c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a90e:	4ba4      	ldr	r3, [pc, #656]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a912:	f003 0303 	and.w	r3, r3, #3
 800a916:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a918:	4ba1      	ldr	r3, [pc, #644]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a91a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a91c:	0a1b      	lsrs	r3, r3, #8
 800a91e:	f003 030f 	and.w	r3, r3, #15
 800a922:	3301      	adds	r3, #1
 800a924:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a926:	4b9e      	ldr	r3, [pc, #632]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a92a:	091b      	lsrs	r3, r3, #4
 800a92c:	f003 0301 	and.w	r3, r3, #1
 800a930:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a932:	4b9b      	ldr	r3, [pc, #620]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a936:	08db      	lsrs	r3, r3, #3
 800a938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	fb02 f303 	mul.w	r3, r2, r3
 800a942:	ee07 3a90 	vmov	s15, r3
 800a946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a94a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	2b03      	cmp	r3, #3
 800a952:	d062      	beq.n	800aa1a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	2b03      	cmp	r3, #3
 800a958:	f200 8081 	bhi.w	800aa5e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d024      	beq.n	800a9ac <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2b02      	cmp	r3, #2
 800a966:	d17a      	bne.n	800aa5e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	ee07 3a90 	vmov	s15, r3
 800a96e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a972:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800aba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a97a:	4b89      	ldr	r3, [pc, #548]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a97c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a97e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a982:	ee07 3a90 	vmov	s15, r3
 800a986:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a98a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a98e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800aba8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a992:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a996:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a99a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a99e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a9a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9aa:	e08f      	b.n	800aacc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a9ac:	4b7c      	ldr	r3, [pc, #496]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d005      	beq.n	800a9c4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800a9b8:	4b79      	ldr	r3, [pc, #484]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	0f1b      	lsrs	r3, r3, #28
 800a9be:	f003 030f 	and.w	r3, r3, #15
 800a9c2:	e006      	b.n	800a9d2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800a9c4:	4b76      	ldr	r3, [pc, #472]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a9c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a9ca:	041b      	lsls	r3, r3, #16
 800a9cc:	0f1b      	lsrs	r3, r3, #28
 800a9ce:	f003 030f 	and.w	r3, r3, #15
 800a9d2:	4a76      	ldr	r2, [pc, #472]	@ (800abac <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a9d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9d8:	ee07 3a90 	vmov	s15, r3
 800a9dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	ee07 3a90 	vmov	s15, r3
 800a9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	ee07 3a90 	vmov	s15, r3
 800a9f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9f8:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9fc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800aba8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800aa00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800aa10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa18:	e058      	b.n	800aacc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	ee07 3a90 	vmov	s15, r3
 800aa20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa24:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800aa28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa2c:	4b5c      	ldr	r3, [pc, #368]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aa2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa34:	ee07 3a90 	vmov	s15, r3
 800aa38:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa3c:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa40:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800aba8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800aa44:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800aa48:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa50:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800aa54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa5c:	e036      	b.n	800aacc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800aa5e:	4b50      	ldr	r3, [pc, #320]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d005      	beq.n	800aa76 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800aa6a:	4b4d      	ldr	r3, [pc, #308]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	0f1b      	lsrs	r3, r3, #28
 800aa70:	f003 030f 	and.w	r3, r3, #15
 800aa74:	e006      	b.n	800aa84 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800aa76:	4b4a      	ldr	r3, [pc, #296]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aa78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aa7c:	041b      	lsls	r3, r3, #16
 800aa7e:	0f1b      	lsrs	r3, r3, #28
 800aa80:	f003 030f 	and.w	r3, r3, #15
 800aa84:	4a49      	ldr	r2, [pc, #292]	@ (800abac <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800aa86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	ee07 3a90 	vmov	s15, r3
 800aa98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	ee07 3a90 	vmov	s15, r3
 800aaa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaaa:	ed97 6a02 	vldr	s12, [r7, #8]
 800aaae:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800aba8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800aab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aabe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800aac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aac6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aaca:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800aacc:	4b34      	ldr	r3, [pc, #208]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d017      	beq.n	800ab08 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800aad8:	4b31      	ldr	r3, [pc, #196]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800aada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aadc:	0a5b      	lsrs	r3, r3, #9
 800aade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aae2:	ee07 3a90 	vmov	s15, r3
 800aae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800aaea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aaee:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800aaf2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aafa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aafe:	ee17 2a90 	vmov	r2, s15
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	601a      	str	r2, [r3, #0]
 800ab06:	e002      	b.n	800ab0e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800ab0e:	4b24      	ldr	r3, [pc, #144]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ab10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d017      	beq.n	800ab4a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ab1a:	4b21      	ldr	r3, [pc, #132]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ab1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab1e:	0c1b      	lsrs	r3, r3, #16
 800ab20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab24:	ee07 3a90 	vmov	s15, r3
 800ab28:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800ab2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab30:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ab34:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab40:	ee17 2a90 	vmov	r2, s15
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	605a      	str	r2, [r3, #4]
 800ab48:	e002      	b.n	800ab50 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800ab50:	4b13      	ldr	r3, [pc, #76]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ab52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d017      	beq.n	800ab8c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ab5c:	4b10      	ldr	r3, [pc, #64]	@ (800aba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ab5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab60:	0e1b      	lsrs	r3, r3, #24
 800ab62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab66:	ee07 3a90 	vmov	s15, r3
 800ab6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800ab6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab72:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ab76:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab82:	ee17 2a90 	vmov	r2, s15
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ab8a:	e002      	b.n	800ab92 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	609a      	str	r2, [r3, #8]
}
 800ab92:	bf00      	nop
 800ab94:	3724      	adds	r7, #36	@ 0x24
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	46020c00 	.word	0x46020c00
 800aba4:	4b742400 	.word	0x4b742400
 800aba8:	46000000 	.word	0x46000000
 800abac:	082b2060 	.word	0x082b2060

0800abb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b089      	sub	sp, #36	@ 0x24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800abb8:	4ba6      	ldr	r3, [pc, #664]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abc0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800abc2:	4ba4      	ldr	r3, [pc, #656]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abc6:	f003 0303 	and.w	r3, r3, #3
 800abca:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800abcc:	4ba1      	ldr	r3, [pc, #644]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abd0:	0a1b      	lsrs	r3, r3, #8
 800abd2:	f003 030f 	and.w	r3, r3, #15
 800abd6:	3301      	adds	r3, #1
 800abd8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800abda:	4b9e      	ldr	r3, [pc, #632]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abde:	091b      	lsrs	r3, r3, #4
 800abe0:	f003 0301 	and.w	r3, r3, #1
 800abe4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800abe6:	4b9b      	ldr	r3, [pc, #620]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abea:	08db      	lsrs	r3, r3, #3
 800abec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	fb02 f303 	mul.w	r3, r2, r3
 800abf6:	ee07 3a90 	vmov	s15, r3
 800abfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abfe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	2b03      	cmp	r3, #3
 800ac06:	d062      	beq.n	800acce <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	f200 8081 	bhi.w	800ad12 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d024      	beq.n	800ac60 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	d17a      	bne.n	800ad12 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	ee07 3a90 	vmov	s15, r3
 800ac22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac26:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800ae58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800ac2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac2e:	4b89      	ldr	r3, [pc, #548]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ac30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac36:	ee07 3a90 	vmov	s15, r3
 800ac3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac3e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac42:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800ae5c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ac46:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ac4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac52:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ac56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac5e:	e08f      	b.n	800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800ac60:	4b7c      	ldr	r3, [pc, #496]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d005      	beq.n	800ac78 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800ac6c:	4b79      	ldr	r3, [pc, #484]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	0f1b      	lsrs	r3, r3, #28
 800ac72:	f003 030f 	and.w	r3, r3, #15
 800ac76:	e006      	b.n	800ac86 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800ac78:	4b76      	ldr	r3, [pc, #472]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ac7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ac7e:	041b      	lsls	r3, r3, #16
 800ac80:	0f1b      	lsrs	r3, r3, #28
 800ac82:	f003 030f 	and.w	r3, r3, #15
 800ac86:	4a76      	ldr	r2, [pc, #472]	@ (800ae60 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800ac88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac8c:	ee07 3a90 	vmov	s15, r3
 800ac90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	ee07 3a90 	vmov	s15, r3
 800ac9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	ee07 3a90 	vmov	s15, r3
 800aca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acac:	ed97 6a02 	vldr	s12, [r7, #8]
 800acb0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800ae5c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800acb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800acc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800accc:	e058      	b.n	800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	ee07 3a90 	vmov	s15, r3
 800acd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acd8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ae58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800acdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ace0:	4b5c      	ldr	r3, [pc, #368]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ace2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ace4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ace8:	ee07 3a90 	vmov	s15, r3
 800acec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800acf0:	ed97 6a02 	vldr	s12, [r7, #8]
 800acf4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800ae5c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800acf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800acfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad04:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ad08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad10:	e036      	b.n	800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ad12:	4b50      	ldr	r3, [pc, #320]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d005      	beq.n	800ad2a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800ad1e:	4b4d      	ldr	r3, [pc, #308]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	0f1b      	lsrs	r3, r3, #28
 800ad24:	f003 030f 	and.w	r3, r3, #15
 800ad28:	e006      	b.n	800ad38 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800ad2a:	4b4a      	ldr	r3, [pc, #296]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ad2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ad30:	041b      	lsls	r3, r3, #16
 800ad32:	0f1b      	lsrs	r3, r3, #28
 800ad34:	f003 030f 	and.w	r3, r3, #15
 800ad38:	4a49      	ldr	r2, [pc, #292]	@ (800ae60 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800ad3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad3e:	ee07 3a90 	vmov	s15, r3
 800ad42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	ee07 3a90 	vmov	s15, r3
 800ad4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	ee07 3a90 	vmov	s15, r3
 800ad5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad5e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad62:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800ae5c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ad66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad72:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ad76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad7e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800ad80:	4b34      	ldr	r3, [pc, #208]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ad82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d017      	beq.n	800adbc <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ad8c:	4b31      	ldr	r3, [pc, #196]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ad8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad90:	0a5b      	lsrs	r3, r3, #9
 800ad92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad96:	ee07 3a90 	vmov	s15, r3
 800ad9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800ad9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ada2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ada6:	edd7 6a07 	vldr	s13, [r7, #28]
 800adaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adb2:	ee17 2a90 	vmov	r2, s15
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	601a      	str	r2, [r3, #0]
 800adba:	e002      	b.n	800adc2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800adc2:	4b24      	ldr	r3, [pc, #144]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800adc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d017      	beq.n	800adfe <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800adce:	4b21      	ldr	r3, [pc, #132]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800add0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800add2:	0c1b      	lsrs	r3, r3, #16
 800add4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800add8:	ee07 3a90 	vmov	s15, r3
 800addc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800ade0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ade4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ade8:	edd7 6a07 	vldr	s13, [r7, #28]
 800adec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adf4:	ee17 2a90 	vmov	r2, s15
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	605a      	str	r2, [r3, #4]
 800adfc:	e002      	b.n	800ae04 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800ae04:	4b13      	ldr	r3, [pc, #76]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ae06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d017      	beq.n	800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ae10:	4b10      	ldr	r3, [pc, #64]	@ (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ae12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae14:	0e1b      	lsrs	r3, r3, #24
 800ae16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae1a:	ee07 3a90 	vmov	s15, r3
 800ae1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800ae22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae26:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ae2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae36:	ee17 2a90 	vmov	r2, s15
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ae3e:	e002      	b.n	800ae46 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	609a      	str	r2, [r3, #8]
}
 800ae46:	bf00      	nop
 800ae48:	3724      	adds	r7, #36	@ 0x24
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	46020c00 	.word	0x46020c00
 800ae58:	4b742400 	.word	0x4b742400
 800ae5c:	46000000 	.word	0x46000000
 800ae60:	082b2060 	.word	0x082b2060

0800ae64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b089      	sub	sp, #36	@ 0x24
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800ae6c:	4ba6      	ldr	r3, [pc, #664]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae74:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800ae76:	4ba4      	ldr	r3, [pc, #656]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae7a:	f003 0303 	and.w	r3, r3, #3
 800ae7e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800ae80:	4ba1      	ldr	r3, [pc, #644]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae84:	0a1b      	lsrs	r3, r3, #8
 800ae86:	f003 030f 	and.w	r3, r3, #15
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800ae8e:	4b9e      	ldr	r3, [pc, #632]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae92:	091b      	lsrs	r3, r3, #4
 800ae94:	f003 0301 	and.w	r3, r3, #1
 800ae98:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800ae9a:	4b9b      	ldr	r3, [pc, #620]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae9e:	08db      	lsrs	r3, r3, #3
 800aea0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aea4:	68fa      	ldr	r2, [r7, #12]
 800aea6:	fb02 f303 	mul.w	r3, r2, r3
 800aeaa:	ee07 3a90 	vmov	s15, r3
 800aeae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	2b03      	cmp	r3, #3
 800aeba:	d062      	beq.n	800af82 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	2b03      	cmp	r3, #3
 800aec0:	f200 8081 	bhi.w	800afc6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d024      	beq.n	800af14 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d17a      	bne.n	800afc6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	ee07 3a90 	vmov	s15, r3
 800aed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeda:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800aede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aee2:	4b89      	ldr	r3, [pc, #548]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeea:	ee07 3a90 	vmov	s15, r3
 800aeee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800aef2:	ed97 6a02 	vldr	s12, [r7, #8]
 800aef6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800b110 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800aefa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800aefe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800af02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af06:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800af0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af0e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800af12:	e08f      	b.n	800b034 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800af14:	4b7c      	ldr	r3, [pc, #496]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d005      	beq.n	800af2c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800af20:	4b79      	ldr	r3, [pc, #484]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	0f1b      	lsrs	r3, r3, #28
 800af26:	f003 030f 	and.w	r3, r3, #15
 800af2a:	e006      	b.n	800af3a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800af2c:	4b76      	ldr	r3, [pc, #472]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800af2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800af32:	041b      	lsls	r3, r3, #16
 800af34:	0f1b      	lsrs	r3, r3, #28
 800af36:	f003 030f 	and.w	r3, r3, #15
 800af3a:	4a76      	ldr	r2, [pc, #472]	@ (800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800af3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af40:	ee07 3a90 	vmov	s15, r3
 800af44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	ee07 3a90 	vmov	s15, r3
 800af4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af56:	69bb      	ldr	r3, [r7, #24]
 800af58:	ee07 3a90 	vmov	s15, r3
 800af5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af60:	ed97 6a02 	vldr	s12, [r7, #8]
 800af64:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800b110 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800af68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af74:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800af78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af80:	e058      	b.n	800b034 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	ee07 3a90 	vmov	s15, r3
 800af88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800af90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af94:	4b5c      	ldr	r3, [pc, #368]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800af96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af9c:	ee07 3a90 	vmov	s15, r3
 800afa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800afa4:	ed97 6a02 	vldr	s12, [r7, #8]
 800afa8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800b110 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800afac:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800afb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800afb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800afbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afc4:	e036      	b.n	800b034 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800afc6:	4b50      	ldr	r3, [pc, #320]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d005      	beq.n	800afde <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800afd2:	4b4d      	ldr	r3, [pc, #308]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	0f1b      	lsrs	r3, r3, #28
 800afd8:	f003 030f 	and.w	r3, r3, #15
 800afdc:	e006      	b.n	800afec <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800afde:	4b4a      	ldr	r3, [pc, #296]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800afe0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800afe4:	041b      	lsls	r3, r3, #16
 800afe6:	0f1b      	lsrs	r3, r3, #28
 800afe8:	f003 030f 	and.w	r3, r3, #15
 800afec:	4a49      	ldr	r2, [pc, #292]	@ (800b114 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800afee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aff2:	ee07 3a90 	vmov	s15, r3
 800aff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	ee07 3a90 	vmov	s15, r3
 800b000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	ee07 3a90 	vmov	s15, r3
 800b00e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b012:	ed97 6a02 	vldr	s12, [r7, #8]
 800b016:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800b110 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800b01a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b01e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b026:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b02a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b02e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b032:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800b034:	4b34      	ldr	r3, [pc, #208]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d017      	beq.n	800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b040:	4b31      	ldr	r3, [pc, #196]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b044:	0a5b      	lsrs	r3, r3, #9
 800b046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b04a:	ee07 3a90 	vmov	s15, r3
 800b04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800b052:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b056:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b05a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b05e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b066:	ee17 2a90 	vmov	r2, s15
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	601a      	str	r2, [r3, #0]
 800b06e:	e002      	b.n	800b076 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800b076:	4b24      	ldr	r3, [pc, #144]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b07a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d017      	beq.n	800b0b2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b082:	4b21      	ldr	r3, [pc, #132]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b086:	0c1b      	lsrs	r3, r3, #16
 800b088:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b08c:	ee07 3a90 	vmov	s15, r3
 800b090:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800b094:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b098:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b09c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0a8:	ee17 2a90 	vmov	r2, s15
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	605a      	str	r2, [r3, #4]
 800b0b0:	e002      	b.n	800b0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800b0b8:	4b13      	ldr	r3, [pc, #76]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b0ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d017      	beq.n	800b0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b0c4:	4b10      	ldr	r3, [pc, #64]	@ (800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b0c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0c8:	0e1b      	lsrs	r3, r3, #24
 800b0ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0ce:	ee07 3a90 	vmov	s15, r3
 800b0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800b0d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0da:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b0de:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0ea:	ee17 2a90 	vmov	r2, s15
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b0f2:	e002      	b.n	800b0fa <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	609a      	str	r2, [r3, #8]
}
 800b0fa:	bf00      	nop
 800b0fc:	3724      	adds	r7, #36	@ 0x24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	46020c00 	.word	0x46020c00
 800b10c:	4b742400 	.word	0x4b742400
 800b110:	46000000 	.word	0x46000000
 800b114:	082b2060 	.word	0x082b2060

0800b118 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b08e      	sub	sp, #56	@ 0x38
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800b122:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b126:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800b12a:	430b      	orrs	r3, r1
 800b12c:	d145      	bne.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800b12e:	4ba7      	ldr	r3, [pc, #668]	@ (800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b134:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b138:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800b13a:	4ba4      	ldr	r3, [pc, #656]	@ (800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b13c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b140:	f003 0302 	and.w	r3, r3, #2
 800b144:	2b02      	cmp	r3, #2
 800b146:	d108      	bne.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800b148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b14e:	d104      	bne.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800b150:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b154:	637b      	str	r3, [r7, #52]	@ 0x34
 800b156:	f001 bb5a 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800b15a:	4b9c      	ldr	r3, [pc, #624]	@ (800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b15c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b160:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b164:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b168:	d114      	bne.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800b16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b170:	d110      	bne.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b172:	4b96      	ldr	r3, [pc, #600]	@ (800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b17c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b180:	d103      	bne.n	800b18a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800b182:	23fa      	movs	r3, #250	@ 0xfa
 800b184:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b186:	f001 bb42 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b18a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b18e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b190:	f001 bb3d 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800b194:	4b8d      	ldr	r3, [pc, #564]	@ (800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b19c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1a0:	d107      	bne.n	800b1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1a8:	d103      	bne.n	800b1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800b1aa:	4b89      	ldr	r3, [pc, #548]	@ (800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800b1ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1ae:	f001 bb2e 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1b6:	f001 bb2a 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b1ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1be:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b1c2:	430b      	orrs	r3, r1
 800b1c4:	d151      	bne.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b1c6:	4b81      	ldr	r3, [pc, #516]	@ (800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b1c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b1cc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800b1d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d4:	2b80      	cmp	r3, #128	@ 0x80
 800b1d6:	d035      	beq.n	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1da:	2b80      	cmp	r3, #128	@ 0x80
 800b1dc:	d841      	bhi.n	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e0:	2b60      	cmp	r3, #96	@ 0x60
 800b1e2:	d02a      	beq.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800b1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e6:	2b60      	cmp	r3, #96	@ 0x60
 800b1e8:	d83b      	bhi.n	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ec:	2b40      	cmp	r3, #64	@ 0x40
 800b1ee:	d009      	beq.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f2:	2b40      	cmp	r3, #64	@ 0x40
 800b1f4:	d835      	bhi.n	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00c      	beq.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fe:	2b20      	cmp	r3, #32
 800b200:	d012      	beq.n	800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b202:	e02e      	b.n	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b204:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b208:	4618      	mov	r0, r3
 800b20a:	f7ff fb77 	bl	800a8fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b210:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b212:	f001 bafc 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b216:	f107 0318 	add.w	r3, r7, #24
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7ff fcc8 	bl	800abb0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b224:	f001 baf3 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b228:	f107 030c 	add.w	r3, r7, #12
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7ff fe19 	bl	800ae64 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b236:	f001 baea 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b23a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b23e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b240:	f001 bae5 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b244:	4b61      	ldr	r3, [pc, #388]	@ (800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b24c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b250:	d103      	bne.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800b252:	4b60      	ldr	r3, [pc, #384]	@ (800b3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b254:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b256:	f001 bada 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b25a:	2300      	movs	r3, #0
 800b25c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b25e:	f001 bad6 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800b262:	2300      	movs	r3, #0
 800b264:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b266:	f001 bad2 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b26a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b26e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b272:	430b      	orrs	r3, r1
 800b274:	d158      	bne.n	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b276:	4b55      	ldr	r3, [pc, #340]	@ (800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b278:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b27c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b280:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b288:	d03b      	beq.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800b28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b290:	d846      	bhi.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b294:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b298:	d02e      	beq.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800b29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2a0:	d83e      	bhi.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2a8:	d00b      	beq.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800b2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2b0:	d836      	bhi.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00d      	beq.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800b2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2be:	d012      	beq.n	800b2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800b2c0:	e02e      	b.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7ff fb18 	bl	800a8fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b2d0:	f001 ba9d 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2d4:	f107 0318 	add.w	r3, r7, #24
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7ff fc69 	bl	800abb0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b2e2:	f001 ba94 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2e6:	f107 030c 	add.w	r3, r7, #12
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7ff fdba 	bl	800ae64 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b2f4:	f001 ba8b 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b2f8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b2fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b2fe:	f001 ba86 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b302:	4b32      	ldr	r3, [pc, #200]	@ (800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b30a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b30e:	d103      	bne.n	800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800b310:	4b30      	ldr	r3, [pc, #192]	@ (800b3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b312:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b314:	f001 ba7b 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b318:	2300      	movs	r3, #0
 800b31a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b31c:	f001 ba77 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800b320:	2300      	movs	r3, #0
 800b322:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b324:	f001 ba73 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800b328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b32c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b330:	430b      	orrs	r3, r1
 800b332:	d126      	bne.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800b334:	4b25      	ldr	r3, [pc, #148]	@ (800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b336:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b33a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b33e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800b340:	4b22      	ldr	r3, [pc, #136]	@ (800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b34c:	d106      	bne.n	800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800b34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b350:	2b00      	cmp	r3, #0
 800b352:	d103      	bne.n	800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800b354:	4b1f      	ldr	r3, [pc, #124]	@ (800b3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b356:	637b      	str	r3, [r7, #52]	@ 0x34
 800b358:	f001 ba59 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800b35c:	4b1b      	ldr	r3, [pc, #108]	@ (800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b368:	d107      	bne.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800b36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b370:	d103      	bne.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800b372:	4b19      	ldr	r3, [pc, #100]	@ (800b3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b374:	637b      	str	r3, [r7, #52]	@ 0x34
 800b376:	f001 ba4a 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800b37a:	2300      	movs	r3, #0
 800b37c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b37e:	f001 ba46 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800b382:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b386:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800b38a:	430b      	orrs	r3, r1
 800b38c:	d16e      	bne.n	800b46c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b38e:	4b0f      	ldr	r3, [pc, #60]	@ (800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b394:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800b398:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b3a0:	d03d      	beq.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b3a8:	d85c      	bhi.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3b0:	d014      	beq.n	800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3b8:	d854      	bhi.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d01f      	beq.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b3c6:	d012      	beq.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800b3c8:	e04c      	b.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b3ca:	bf00      	nop
 800b3cc:	46020c00 	.word	0x46020c00
 800b3d0:	0007a120 	.word	0x0007a120
 800b3d4:	00f42400 	.word	0x00f42400
 800b3d8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7ff fa8b 	bl	800a8fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b3ea:	f001 ba10 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3ee:	f107 0318 	add.w	r3, r7, #24
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7ff fbdc 	bl	800abb0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b3fc:	f001 ba07 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b400:	4ba7      	ldr	r3, [pc, #668]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b40c:	d103      	bne.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800b40e:	4ba5      	ldr	r3, [pc, #660]	@ (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b410:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b412:	f001 b9fc 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b416:	2300      	movs	r3, #0
 800b418:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b41a:	f001 b9f8 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b41e:	4ba0      	ldr	r3, [pc, #640]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 0320 	and.w	r3, r3, #32
 800b426:	2b20      	cmp	r3, #32
 800b428:	d118      	bne.n	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b42a:	4b9d      	ldr	r3, [pc, #628]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b432:	2b00      	cmp	r3, #0
 800b434:	d005      	beq.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b436:	4b9a      	ldr	r3, [pc, #616]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	0e1b      	lsrs	r3, r3, #24
 800b43c:	f003 030f 	and.w	r3, r3, #15
 800b440:	e006      	b.n	800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b442:	4b97      	ldr	r3, [pc, #604]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b444:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b448:	041b      	lsls	r3, r3, #16
 800b44a:	0e1b      	lsrs	r3, r3, #24
 800b44c:	f003 030f 	and.w	r3, r3, #15
 800b450:	4a95      	ldr	r2, [pc, #596]	@ (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b456:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b458:	f001 b9d9 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b45c:	2300      	movs	r3, #0
 800b45e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b460:	f001 b9d5 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800b464:	2300      	movs	r3, #0
 800b466:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b468:	f001 b9d1 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b46c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b470:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800b474:	430b      	orrs	r3, r1
 800b476:	d17f      	bne.n	800b578 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b478:	4b89      	ldr	r3, [pc, #548]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b47a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b47e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b482:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800b484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b486:	2b00      	cmp	r3, #0
 800b488:	d165      	bne.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b48a:	4b85      	ldr	r3, [pc, #532]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b48c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b490:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800b494:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800b496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b498:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b49c:	d034      	beq.n	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800b49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b4a4:	d853      	bhi.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4ac:	d00b      	beq.n	800b4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4b4:	d84b      	bhi.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d016      	beq.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800b4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b4c2:	d009      	beq.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b4c4:	e043      	b.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7ff fa16 	bl	800a8fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b4d4:	f001 b99b 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4d8:	f107 0318 	add.w	r3, r7, #24
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7ff fb67 	bl	800abb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b4e6:	f001 b992 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b4ea:	4b6d      	ldr	r3, [pc, #436]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b4f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4f6:	d103      	bne.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800b4f8:	4b6a      	ldr	r3, [pc, #424]	@ (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b4fa:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b4fc:	f001 b987 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800b500:	2300      	movs	r3, #0
 800b502:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b504:	f001 b983 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b508:	4b65      	ldr	r3, [pc, #404]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 0320 	and.w	r3, r3, #32
 800b510:	2b20      	cmp	r3, #32
 800b512:	d118      	bne.n	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b514:	4b62      	ldr	r3, [pc, #392]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d005      	beq.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800b520:	4b5f      	ldr	r3, [pc, #380]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	0e1b      	lsrs	r3, r3, #24
 800b526:	f003 030f 	and.w	r3, r3, #15
 800b52a:	e006      	b.n	800b53a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b52c:	4b5c      	ldr	r3, [pc, #368]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b52e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b532:	041b      	lsls	r3, r3, #16
 800b534:	0e1b      	lsrs	r3, r3, #24
 800b536:	f003 030f 	and.w	r3, r3, #15
 800b53a:	4a5b      	ldr	r2, [pc, #364]	@ (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b53c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b540:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b542:	f001 b964 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800b546:	2300      	movs	r3, #0
 800b548:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b54a:	f001 b960 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800b54e:	2300      	movs	r3, #0
 800b550:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b552:	f001 b95c 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800b556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b558:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b55c:	d108      	bne.n	800b570 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b55e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b562:	4618      	mov	r0, r3
 800b564:	f7ff f9ca 	bl	800a8fc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b56c:	f001 b94f 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800b570:	2300      	movs	r3, #0
 800b572:	637b      	str	r3, [r7, #52]	@ 0x34
 800b574:	f001 b94b 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800b578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b57c:	1e51      	subs	r1, r2, #1
 800b57e:	430b      	orrs	r3, r1
 800b580:	d136      	bne.n	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b582:	4b47      	ldr	r3, [pc, #284]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b588:	f003 0303 	and.w	r3, r3, #3
 800b58c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b590:	2b00      	cmp	r3, #0
 800b592:	d104      	bne.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800b594:	f7fe f968 	bl	8009868 <HAL_RCC_GetPCLK2Freq>
 800b598:	6378      	str	r0, [r7, #52]	@ 0x34
 800b59a:	f001 b938 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800b59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d104      	bne.n	800b5ae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b5a4:	f7fe f830 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800b5a8:	6378      	str	r0, [r7, #52]	@ 0x34
 800b5aa:	f001 b930 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b5ae:	4b3c      	ldr	r3, [pc, #240]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b5b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5ba:	d106      	bne.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800b5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d103      	bne.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800b5c2:	4b3a      	ldr	r3, [pc, #232]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b5c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5c6:	f001 b922 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b5ca:	4b35      	ldr	r3, [pc, #212]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b5cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5d0:	f003 0302 	and.w	r3, r3, #2
 800b5d4:	2b02      	cmp	r3, #2
 800b5d6:	d107      	bne.n	800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5da:	2b03      	cmp	r3, #3
 800b5dc:	d104      	bne.n	800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800b5de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5e4:	f001 b913 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5ec:	f001 b90f 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800b5f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5f4:	1e91      	subs	r1, r2, #2
 800b5f6:	430b      	orrs	r3, r1
 800b5f8:	d136      	bne.n	800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b5fa:	4b29      	ldr	r3, [pc, #164]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b5fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b600:	f003 030c 	and.w	r3, r3, #12
 800b604:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d104      	bne.n	800b616 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b60c:	f7fe f918 	bl	8009840 <HAL_RCC_GetPCLK1Freq>
 800b610:	6378      	str	r0, [r7, #52]	@ 0x34
 800b612:	f001 b8fc 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800b616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b618:	2b04      	cmp	r3, #4
 800b61a:	d104      	bne.n	800b626 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b61c:	f7fd fff4 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800b620:	6378      	str	r0, [r7, #52]	@ 0x34
 800b622:	f001 b8f4 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b626:	4b1e      	ldr	r3, [pc, #120]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b62e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b632:	d106      	bne.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b636:	2b08      	cmp	r3, #8
 800b638:	d103      	bne.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800b63a:	4b1c      	ldr	r3, [pc, #112]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b63c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b63e:	f001 b8e6 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b642:	4b17      	ldr	r3, [pc, #92]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b648:	f003 0302 	and.w	r3, r3, #2
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d107      	bne.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800b650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b652:	2b0c      	cmp	r3, #12
 800b654:	d104      	bne.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800b656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b65a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b65c:	f001 b8d7 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800b660:	2300      	movs	r3, #0
 800b662:	637b      	str	r3, [r7, #52]	@ 0x34
 800b664:	f001 b8d3 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800b668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b66c:	1f11      	subs	r1, r2, #4
 800b66e:	430b      	orrs	r3, r1
 800b670:	d13f      	bne.n	800b6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b672:	4b0b      	ldr	r3, [pc, #44]	@ (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b678:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b67c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b680:	2b00      	cmp	r3, #0
 800b682:	d104      	bne.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b684:	f7fe f8dc 	bl	8009840 <HAL_RCC_GetPCLK1Freq>
 800b688:	6378      	str	r0, [r7, #52]	@ 0x34
 800b68a:	f001 b8c0 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800b68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b690:	2b10      	cmp	r3, #16
 800b692:	d10d      	bne.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b694:	f7fd ffb8 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800b698:	6378      	str	r0, [r7, #52]	@ 0x34
 800b69a:	f001 b8b8 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b69e:	bf00      	nop
 800b6a0:	46020c00 	.word	0x46020c00
 800b6a4:	02dc6c00 	.word	0x02dc6c00
 800b6a8:	082b2060 	.word	0x082b2060
 800b6ac:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b6b0:	4ba8      	ldr	r3, [pc, #672]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b6b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6bc:	d106      	bne.n	800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800b6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c0:	2b20      	cmp	r3, #32
 800b6c2:	d103      	bne.n	800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800b6c4:	4ba4      	ldr	r3, [pc, #656]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b6c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6c8:	f001 b8a1 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b6cc:	4ba1      	ldr	r3, [pc, #644]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6d2:	f003 0302 	and.w	r3, r3, #2
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	d107      	bne.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6dc:	2b30      	cmp	r3, #48	@ 0x30
 800b6de:	d104      	bne.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800b6e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b6e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6e6:	f001 b892 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6ee:	f001 b88e 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800b6f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6f6:	f1a2 0108 	sub.w	r1, r2, #8
 800b6fa:	430b      	orrs	r3, r1
 800b6fc:	d136      	bne.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b6fe:	4b95      	ldr	r3, [pc, #596]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b704:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b708:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d104      	bne.n	800b71a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b710:	f7fe f896 	bl	8009840 <HAL_RCC_GetPCLK1Freq>
 800b714:	6378      	str	r0, [r7, #52]	@ 0x34
 800b716:	f001 b87a 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800b71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71c:	2b40      	cmp	r3, #64	@ 0x40
 800b71e:	d104      	bne.n	800b72a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b720:	f7fd ff72 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800b724:	6378      	str	r0, [r7, #52]	@ 0x34
 800b726:	f001 b872 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b72a:	4b8a      	ldr	r3, [pc, #552]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b736:	d106      	bne.n	800b746 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800b738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b73a:	2b80      	cmp	r3, #128	@ 0x80
 800b73c:	d103      	bne.n	800b746 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800b73e:	4b86      	ldr	r3, [pc, #536]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b740:	637b      	str	r3, [r7, #52]	@ 0x34
 800b742:	f001 b864 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b746:	4b83      	ldr	r3, [pc, #524]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b74c:	f003 0302 	and.w	r3, r3, #2
 800b750:	2b02      	cmp	r3, #2
 800b752:	d107      	bne.n	800b764 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800b754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b756:	2bc0      	cmp	r3, #192	@ 0xc0
 800b758:	d104      	bne.n	800b764 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800b75a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b75e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b760:	f001 b855 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800b764:	2300      	movs	r3, #0
 800b766:	637b      	str	r3, [r7, #52]	@ 0x34
 800b768:	f001 b851 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800b76c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b770:	f1a2 0110 	sub.w	r1, r2, #16
 800b774:	430b      	orrs	r3, r1
 800b776:	d139      	bne.n	800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b778:	4b76      	ldr	r3, [pc, #472]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b77a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b77e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b782:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b786:	2b00      	cmp	r3, #0
 800b788:	d104      	bne.n	800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b78a:	f7fe f859 	bl	8009840 <HAL_RCC_GetPCLK1Freq>
 800b78e:	6378      	str	r0, [r7, #52]	@ 0x34
 800b790:	f001 b83d 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800b794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b79a:	d104      	bne.n	800b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b79c:	f7fd ff34 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800b7a0:	6378      	str	r0, [r7, #52]	@ 0x34
 800b7a2:	f001 b834 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800b7a6:	4b6b      	ldr	r3, [pc, #428]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b7b2:	d107      	bne.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800b7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7ba:	d103      	bne.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800b7bc:	4b66      	ldr	r3, [pc, #408]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b7be:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7c0:	f001 b825 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800b7c4:	4b63      	ldr	r3, [pc, #396]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b7c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b7ca:	f003 0302 	and.w	r3, r3, #2
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d108      	bne.n	800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800b7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b7d8:	d104      	bne.n	800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800b7da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b7de:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7e0:	f001 b815 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7e8:	f001 b811 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800b7ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7f0:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800b7f4:	430b      	orrs	r3, r1
 800b7f6:	d139      	bne.n	800b86c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800b7f8:	4b56      	ldr	r3, [pc, #344]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b7fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b7fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b802:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800b804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b806:	2b00      	cmp	r3, #0
 800b808:	d104      	bne.n	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b80a:	f7fe f819 	bl	8009840 <HAL_RCC_GetPCLK1Freq>
 800b80e:	6378      	str	r0, [r7, #52]	@ 0x34
 800b810:	f000 bffd 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800b814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b81a:	d104      	bne.n	800b826 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b81c:	f7fd fef4 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800b820:	6378      	str	r0, [r7, #52]	@ 0x34
 800b822:	f000 bff4 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800b826:	4b4b      	ldr	r3, [pc, #300]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b82e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b832:	d107      	bne.n	800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800b834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b836:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b83a:	d103      	bne.n	800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800b83c:	4b46      	ldr	r3, [pc, #280]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b83e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b840:	f000 bfe5 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800b844:	4b43      	ldr	r3, [pc, #268]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b84a:	f003 0302 	and.w	r3, r3, #2
 800b84e:	2b02      	cmp	r3, #2
 800b850:	d108      	bne.n	800b864 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800b852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b854:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b858:	d104      	bne.n	800b864 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800b85a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b85e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b860:	f000 bfd5 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b864:	2300      	movs	r3, #0
 800b866:	637b      	str	r3, [r7, #52]	@ 0x34
 800b868:	f000 bfd1 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800b86c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b870:	f1a2 0120 	sub.w	r1, r2, #32
 800b874:	430b      	orrs	r3, r1
 800b876:	d158      	bne.n	800b92a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b878:	4b36      	ldr	r3, [pc, #216]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b87a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b87e:	f003 0307 	and.w	r3, r3, #7
 800b882:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800b884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b886:	2b00      	cmp	r3, #0
 800b888:	d104      	bne.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800b88a:	f7fe f801 	bl	8009890 <HAL_RCC_GetPCLK3Freq>
 800b88e:	6378      	str	r0, [r7, #52]	@ 0x34
 800b890:	f000 bfbd 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800b894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b896:	2b01      	cmp	r3, #1
 800b898:	d104      	bne.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b89a:	f7fd feb5 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800b89e:	6378      	str	r0, [r7, #52]	@ 0x34
 800b8a0:	f000 bfb5 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800b8a4:	4b2b      	ldr	r3, [pc, #172]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b8ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8b0:	d106      	bne.n	800b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d103      	bne.n	800b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800b8b8:	4b27      	ldr	r3, [pc, #156]	@ (800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b8ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8bc:	f000 bfa7 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800b8c0:	4b24      	ldr	r3, [pc, #144]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b8c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b8c6:	f003 0302 	and.w	r3, r3, #2
 800b8ca:	2b02      	cmp	r3, #2
 800b8cc:	d107      	bne.n	800b8de <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d0:	2b03      	cmp	r3, #3
 800b8d2:	d104      	bne.n	800b8de <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800b8d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b8d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8da:	f000 bf98 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800b8de:	4b1d      	ldr	r3, [pc, #116]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f003 0320 	and.w	r3, r3, #32
 800b8e6:	2b20      	cmp	r3, #32
 800b8e8:	d11b      	bne.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800b8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ec:	2b04      	cmp	r3, #4
 800b8ee:	d118      	bne.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b8f0:	4b18      	ldr	r3, [pc, #96]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d005      	beq.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800b8fc:	4b15      	ldr	r3, [pc, #84]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	0e1b      	lsrs	r3, r3, #24
 800b902:	f003 030f 	and.w	r3, r3, #15
 800b906:	e006      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800b908:	4b12      	ldr	r3, [pc, #72]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b90a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b90e:	041b      	lsls	r3, r3, #16
 800b910:	0e1b      	lsrs	r3, r3, #24
 800b912:	f003 030f 	and.w	r3, r3, #15
 800b916:	4a11      	ldr	r2, [pc, #68]	@ (800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b91c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b91e:	f000 bf76 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800b922:	2300      	movs	r3, #0
 800b924:	637b      	str	r3, [r7, #52]	@ 0x34
 800b926:	f000 bf72 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800b92a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b92e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b932:	430b      	orrs	r3, r1
 800b934:	d172      	bne.n	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800b936:	4b07      	ldr	r3, [pc, #28]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b938:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b93c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b940:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800b942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b948:	d10a      	bne.n	800b960 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b94a:	f7fd fe5d 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800b94e:	6378      	str	r0, [r7, #52]	@ 0x34
 800b950:	f000 bf5d 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b954:	46020c00 	.word	0x46020c00
 800b958:	00f42400 	.word	0x00f42400
 800b95c:	082b2060 	.word	0x082b2060
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800b960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b966:	d108      	bne.n	800b97a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b968:	f107 0318 	add.w	r3, r7, #24
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7ff f91f 	bl	800abb0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800b972:	6a3b      	ldr	r3, [r7, #32]
 800b974:	637b      	str	r3, [r7, #52]	@ 0x34
 800b976:	f000 bf4a 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800b97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d104      	bne.n	800b98a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800b980:	f7fd ff44 	bl	800980c <HAL_RCC_GetHCLKFreq>
 800b984:	6378      	str	r0, [r7, #52]	@ 0x34
 800b986:	f000 bf42 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800b98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b98c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b990:	d122      	bne.n	800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b992:	4bb0      	ldr	r3, [pc, #704]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f003 0320 	and.w	r3, r3, #32
 800b99a:	2b20      	cmp	r3, #32
 800b99c:	d118      	bne.n	800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b99e:	4bad      	ldr	r3, [pc, #692]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d005      	beq.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800b9aa:	4baa      	ldr	r3, [pc, #680]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	0e1b      	lsrs	r3, r3, #24
 800b9b0:	f003 030f 	and.w	r3, r3, #15
 800b9b4:	e006      	b.n	800b9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800b9b6:	4ba7      	ldr	r3, [pc, #668]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b9bc:	041b      	lsls	r3, r3, #16
 800b9be:	0e1b      	lsrs	r3, r3, #24
 800b9c0:	f003 030f 	and.w	r3, r3, #15
 800b9c4:	4aa4      	ldr	r2, [pc, #656]	@ (800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b9c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9cc:	f000 bf1f 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9d4:	f000 bf1b 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800b9d8:	4b9e      	ldr	r3, [pc, #632]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9e4:	d107      	bne.n	800b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b9ec:	d103      	bne.n	800b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800b9ee:	4b9b      	ldr	r3, [pc, #620]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b9f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9f2:	f000 bf0c 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800b9f6:	4b97      	ldr	r3, [pc, #604]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b9fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba02:	d107      	bne.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800ba04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ba0a:	d103      	bne.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800ba0c:	4b93      	ldr	r3, [pc, #588]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ba0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba10:	f000 befd 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800ba14:	2300      	movs	r3, #0
 800ba16:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba18:	f000 bef9 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800ba1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba20:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ba24:	430b      	orrs	r3, r1
 800ba26:	d158      	bne.n	800bada <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800ba28:	4b8a      	ldr	r3, [pc, #552]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ba2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ba2e:	f003 0307 	and.w	r3, r3, #7
 800ba32:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ba34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba36:	2b04      	cmp	r3, #4
 800ba38:	d84b      	bhi.n	800bad2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800ba3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba40 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800ba3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba40:	0800ba79 	.word	0x0800ba79
 800ba44:	0800ba55 	.word	0x0800ba55
 800ba48:	0800ba67 	.word	0x0800ba67
 800ba4c:	0800ba83 	.word	0x0800ba83
 800ba50:	0800ba8d 	.word	0x0800ba8d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7fe ff4f 	bl	800a8fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba62:	f000 bed4 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba66:	f107 030c 	add.w	r3, r7, #12
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7ff f9fa 	bl	800ae64 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba74:	f000 becb 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800ba78:	f7fd fec8 	bl	800980c <HAL_RCC_GetHCLKFreq>
 800ba7c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ba7e:	f000 bec6 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ba82:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ba86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba88:	f000 bec1 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ba8c:	4b71      	ldr	r3, [pc, #452]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f003 0320 	and.w	r3, r3, #32
 800ba94:	2b20      	cmp	r3, #32
 800ba96:	d118      	bne.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ba98:	4b6e      	ldr	r3, [pc, #440]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d005      	beq.n	800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800baa4:	4b6b      	ldr	r3, [pc, #428]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	0e1b      	lsrs	r3, r3, #24
 800baaa:	f003 030f 	and.w	r3, r3, #15
 800baae:	e006      	b.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800bab0:	4b68      	ldr	r3, [pc, #416]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bab2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bab6:	041b      	lsls	r3, r3, #16
 800bab8:	0e1b      	lsrs	r3, r3, #24
 800baba:	f003 030f 	and.w	r3, r3, #15
 800babe:	4a66      	ldr	r2, [pc, #408]	@ (800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800bac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bac4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bac6:	f000 bea2 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800baca:	2300      	movs	r3, #0
 800bacc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bace:	f000 be9e 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bad2:	2300      	movs	r3, #0
 800bad4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bad6:	f000 be9a 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800bada:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bade:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800bae2:	430b      	orrs	r3, r1
 800bae4:	d167      	bne.n	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800bae6:	4b5b      	ldr	r3, [pc, #364]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bae8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800baec:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800baf0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800baf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800baf8:	d036      	beq.n	800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800bafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bafc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bb00:	d855      	bhi.n	800bbae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800bb02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bb08:	d029      	beq.n	800bb5e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800bb0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bb10:	d84d      	bhi.n	800bbae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800bb12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb18:	d013      	beq.n	800bb42 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb20:	d845      	bhi.n	800bbae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800bb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d015      	beq.n	800bb54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800bb28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb2e:	d13e      	bne.n	800bbae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7fe fee1 	bl	800a8fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800bb3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb3e:	f000 be66 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb42:	f107 030c 	add.w	r3, r7, #12
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7ff f98c 	bl	800ae64 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb50:	f000 be5d 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800bb54:	f7fd fe5a 	bl	800980c <HAL_RCC_GetHCLKFreq>
 800bb58:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bb5a:	f000 be58 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800bb5e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800bb62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb64:	f000 be53 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bb68:	4b3a      	ldr	r3, [pc, #232]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 0320 	and.w	r3, r3, #32
 800bb70:	2b20      	cmp	r3, #32
 800bb72:	d118      	bne.n	800bba6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bb74:	4b37      	ldr	r3, [pc, #220]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d005      	beq.n	800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800bb80:	4b34      	ldr	r3, [pc, #208]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	0e1b      	lsrs	r3, r3, #24
 800bb86:	f003 030f 	and.w	r3, r3, #15
 800bb8a:	e006      	b.n	800bb9a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800bb8c:	4b31      	ldr	r3, [pc, #196]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bb8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bb92:	041b      	lsls	r3, r3, #16
 800bb94:	0e1b      	lsrs	r3, r3, #24
 800bb96:	f003 030f 	and.w	r3, r3, #15
 800bb9a:	4a2f      	ldr	r2, [pc, #188]	@ (800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800bb9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bba0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bba2:	f000 be34 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bba6:	2300      	movs	r3, #0
 800bba8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bbaa:	f000 be30 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bbb2:	f000 be2c 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800bbb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbba:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800bbbe:	430b      	orrs	r3, r1
 800bbc0:	d152      	bne.n	800bc68 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800bbc2:	4b24      	ldr	r3, [pc, #144]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bbc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bbc8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bbcc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800bbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d104      	bne.n	800bbde <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bbd4:	f7fd fe34 	bl	8009840 <HAL_RCC_GetPCLK1Freq>
 800bbd8:	6378      	str	r0, [r7, #52]	@ 0x34
 800bbda:	f000 be18 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800bbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bbe4:	d104      	bne.n	800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bbe6:	f7fd fd0f 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800bbea:	6378      	str	r0, [r7, #52]	@ 0x34
 800bbec:	f000 be0f 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800bbf0:	4b18      	ldr	r3, [pc, #96]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bbf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bbfc:	d107      	bne.n	800bc0e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800bbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc04:	d103      	bne.n	800bc0e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800bc06:	4b15      	ldr	r3, [pc, #84]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800bc08:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc0a:	f000 be00 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800bc0e:	4b11      	ldr	r3, [pc, #68]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f003 0320 	and.w	r3, r3, #32
 800bc16:	2b20      	cmp	r3, #32
 800bc18:	d122      	bne.n	800bc60 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800bc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bc20:	d11e      	bne.n	800bc60 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bc22:	4b0c      	ldr	r3, [pc, #48]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d005      	beq.n	800bc3a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800bc2e:	4b09      	ldr	r3, [pc, #36]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bc30:	689b      	ldr	r3, [r3, #8]
 800bc32:	0e1b      	lsrs	r3, r3, #24
 800bc34:	f003 030f 	and.w	r3, r3, #15
 800bc38:	e006      	b.n	800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800bc3a:	4b06      	ldr	r3, [pc, #24]	@ (800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800bc3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bc40:	041b      	lsls	r3, r3, #16
 800bc42:	0e1b      	lsrs	r3, r3, #24
 800bc44:	f003 030f 	and.w	r3, r3, #15
 800bc48:	4a03      	ldr	r2, [pc, #12]	@ (800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800bc4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc50:	f000 bddd 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bc54:	46020c00 	.word	0x46020c00
 800bc58:	082b2060 	.word	0x082b2060
 800bc5c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800bc60:	2300      	movs	r3, #0
 800bc62:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc64:	f000 bdd3 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800bc68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc6c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800bc70:	430b      	orrs	r3, r1
 800bc72:	d14c      	bne.n	800bd0e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800bc74:	4ba8      	ldr	r3, [pc, #672]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc7a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800bc7e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800bc80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d104      	bne.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bc86:	f7fd fddb 	bl	8009840 <HAL_RCC_GetPCLK1Freq>
 800bc8a:	6378      	str	r0, [r7, #52]	@ 0x34
 800bc8c:	f000 bdbf 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800bc90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc96:	d104      	bne.n	800bca2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bc98:	f7fd fcb6 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800bc9c:	6378      	str	r0, [r7, #52]	@ 0x34
 800bc9e:	f000 bdb6 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800bca2:	4b9d      	ldr	r3, [pc, #628]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bcaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bcae:	d107      	bne.n	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800bcb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcb6:	d103      	bne.n	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800bcb8:	4b98      	ldr	r3, [pc, #608]	@ (800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bcba:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcbc:	f000 bda7 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800bcc0:	4b95      	ldr	r3, [pc, #596]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f003 0320 	and.w	r3, r3, #32
 800bcc8:	2b20      	cmp	r3, #32
 800bcca:	d11c      	bne.n	800bd06 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800bccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bcd2:	d118      	bne.n	800bd06 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bcd4:	4b90      	ldr	r3, [pc, #576]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d005      	beq.n	800bcec <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800bce0:	4b8d      	ldr	r3, [pc, #564]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	0e1b      	lsrs	r3, r3, #24
 800bce6:	f003 030f 	and.w	r3, r3, #15
 800bcea:	e006      	b.n	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800bcec:	4b8a      	ldr	r3, [pc, #552]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bcee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bcf2:	041b      	lsls	r3, r3, #16
 800bcf4:	0e1b      	lsrs	r3, r3, #24
 800bcf6:	f003 030f 	and.w	r3, r3, #15
 800bcfa:	4a89      	ldr	r2, [pc, #548]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bcfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd00:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd02:	f000 bd84 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800bd06:	2300      	movs	r3, #0
 800bd08:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd0a:	f000 bd80 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800bd0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd12:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800bd16:	430b      	orrs	r3, r1
 800bd18:	d158      	bne.n	800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800bd1a:	4b7f      	ldr	r3, [pc, #508]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bd1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bd20:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bd24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800bd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd28:	2bc0      	cmp	r3, #192	@ 0xc0
 800bd2a:	d028      	beq.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd2e:	2bc0      	cmp	r3, #192	@ 0xc0
 800bd30:	d848      	bhi.n	800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800bd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd34:	2b80      	cmp	r3, #128	@ 0x80
 800bd36:	d00e      	beq.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800bd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd3a:	2b80      	cmp	r3, #128	@ 0x80
 800bd3c:	d842      	bhi.n	800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d003      	beq.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800bd44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd46:	2b40      	cmp	r3, #64	@ 0x40
 800bd48:	d014      	beq.n	800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800bd4a:	e03b      	b.n	800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800bd4c:	f7fd fda0 	bl	8009890 <HAL_RCC_GetPCLK3Freq>
 800bd50:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bd52:	f000 bd5c 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bd56:	4b70      	ldr	r3, [pc, #448]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd62:	d103      	bne.n	800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800bd64:	4b6d      	ldr	r3, [pc, #436]	@ (800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bd66:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bd68:	f000 bd51 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bd70:	f000 bd4d 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800bd74:	f7fd fc48 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800bd78:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bd7a:	f000 bd48 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bd7e:	4b66      	ldr	r3, [pc, #408]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f003 0320 	and.w	r3, r3, #32
 800bd86:	2b20      	cmp	r3, #32
 800bd88:	d118      	bne.n	800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bd8a:	4b63      	ldr	r3, [pc, #396]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d005      	beq.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800bd96:	4b60      	ldr	r3, [pc, #384]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	0e1b      	lsrs	r3, r3, #24
 800bd9c:	f003 030f 	and.w	r3, r3, #15
 800bda0:	e006      	b.n	800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800bda2:	4b5d      	ldr	r3, [pc, #372]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bda4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bda8:	041b      	lsls	r3, r3, #16
 800bdaa:	0e1b      	lsrs	r3, r3, #24
 800bdac:	f003 030f 	and.w	r3, r3, #15
 800bdb0:	4a5b      	ldr	r2, [pc, #364]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bdb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdb6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bdb8:	f000 bd29 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bdc0:	f000 bd25 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bdc8:	f000 bd21 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800bdcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdd0:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800bdd4:	430b      	orrs	r3, r1
 800bdd6:	d14c      	bne.n	800be72 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800bdd8:	4b4f      	ldr	r3, [pc, #316]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bdda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bdde:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bde2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800bde4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d104      	bne.n	800bdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bdea:	f7fd fd29 	bl	8009840 <HAL_RCC_GetPCLK1Freq>
 800bdee:	6378      	str	r0, [r7, #52]	@ 0x34
 800bdf0:	f000 bd0d 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800bdf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bdfa:	d104      	bne.n	800be06 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bdfc:	f7fd fc04 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800be00:	6378      	str	r0, [r7, #52]	@ 0x34
 800be02:	f000 bd04 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800be06:	4b44      	ldr	r3, [pc, #272]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be12:	d107      	bne.n	800be24 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800be14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800be1a:	d103      	bne.n	800be24 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800be1c:	4b3f      	ldr	r3, [pc, #252]	@ (800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800be1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800be20:	f000 bcf5 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800be24:	4b3c      	ldr	r3, [pc, #240]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f003 0320 	and.w	r3, r3, #32
 800be2c:	2b20      	cmp	r3, #32
 800be2e:	d11c      	bne.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800be30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be32:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800be36:	d118      	bne.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800be38:	4b37      	ldr	r3, [pc, #220]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be40:	2b00      	cmp	r3, #0
 800be42:	d005      	beq.n	800be50 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800be44:	4b34      	ldr	r3, [pc, #208]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	0e1b      	lsrs	r3, r3, #24
 800be4a:	f003 030f 	and.w	r3, r3, #15
 800be4e:	e006      	b.n	800be5e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800be50:	4b31      	ldr	r3, [pc, #196]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800be52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800be56:	041b      	lsls	r3, r3, #16
 800be58:	0e1b      	lsrs	r3, r3, #24
 800be5a:	f003 030f 	and.w	r3, r3, #15
 800be5e:	4a30      	ldr	r2, [pc, #192]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800be60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be64:	637b      	str	r3, [r7, #52]	@ 0x34
 800be66:	f000 bcd2 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800be6a:	2300      	movs	r3, #0
 800be6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800be6e:	f000 bcce 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800be72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be76:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800be7a:	430b      	orrs	r3, r1
 800be7c:	d152      	bne.n	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800be7e:	4b26      	ldr	r3, [pc, #152]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800be80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800be84:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800be88:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800be8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d104      	bne.n	800be9a <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800be90:	f7fd fcd6 	bl	8009840 <HAL_RCC_GetPCLK1Freq>
 800be94:	6378      	str	r0, [r7, #52]	@ 0x34
 800be96:	f000 bcba 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800be9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bea0:	d104      	bne.n	800beac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bea2:	f7fd fbb1 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800bea6:	6378      	str	r0, [r7, #52]	@ 0x34
 800bea8:	f000 bcb1 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800beac:	4b1a      	ldr	r3, [pc, #104]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800beb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800beb8:	d107      	bne.n	800beca <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800beba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bebc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bec0:	d103      	bne.n	800beca <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800bec2:	4b16      	ldr	r3, [pc, #88]	@ (800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bec4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bec6:	f000 bca2 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800beca:	4b13      	ldr	r3, [pc, #76]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f003 0320 	and.w	r3, r3, #32
 800bed2:	2b20      	cmp	r3, #32
 800bed4:	d11c      	bne.n	800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800bed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bedc:	d118      	bne.n	800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bede:	4b0e      	ldr	r3, [pc, #56]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bee0:	689b      	ldr	r3, [r3, #8]
 800bee2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d005      	beq.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800beea:	4b0b      	ldr	r3, [pc, #44]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	0e1b      	lsrs	r3, r3, #24
 800bef0:	f003 030f 	and.w	r3, r3, #15
 800bef4:	e006      	b.n	800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800bef6:	4b08      	ldr	r3, [pc, #32]	@ (800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bef8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800befc:	041b      	lsls	r3, r3, #16
 800befe:	0e1b      	lsrs	r3, r3, #24
 800bf00:	f003 030f 	and.w	r3, r3, #15
 800bf04:	4a06      	ldr	r2, [pc, #24]	@ (800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bf06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf0c:	f000 bc7f 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800bf10:	2300      	movs	r3, #0
 800bf12:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf14:	f000 bc7b 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bf18:	46020c00 	.word	0x46020c00
 800bf1c:	00f42400 	.word	0x00f42400
 800bf20:	082b2060 	.word	0x082b2060
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800bf24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf28:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800bf2c:	430b      	orrs	r3, r1
 800bf2e:	d14c      	bne.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800bf30:	4ba6      	ldr	r3, [pc, #664]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bf36:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800bf3a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800bf3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d104      	bne.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bf42:	f7fd fc7d 	bl	8009840 <HAL_RCC_GetPCLK1Freq>
 800bf46:	6378      	str	r0, [r7, #52]	@ 0x34
 800bf48:	f000 bc61 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800bf4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bf52:	d104      	bne.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bf54:	f7fd fb58 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800bf58:	6378      	str	r0, [r7, #52]	@ 0x34
 800bf5a:	f000 bc58 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800bf5e:	4b9b      	ldr	r3, [pc, #620]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf6a:	d107      	bne.n	800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf72:	d103      	bne.n	800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800bf74:	4b96      	ldr	r3, [pc, #600]	@ (800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800bf76:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf78:	f000 bc49 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800bf7c:	4b93      	ldr	r3, [pc, #588]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f003 0320 	and.w	r3, r3, #32
 800bf84:	2b20      	cmp	r3, #32
 800bf86:	d11c      	bne.n	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800bf88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf8a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800bf8e:	d118      	bne.n	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bf90:	4b8e      	ldr	r3, [pc, #568]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d005      	beq.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800bf9c:	4b8b      	ldr	r3, [pc, #556]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	0e1b      	lsrs	r3, r3, #24
 800bfa2:	f003 030f 	and.w	r3, r3, #15
 800bfa6:	e006      	b.n	800bfb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800bfa8:	4b88      	ldr	r3, [pc, #544]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bfaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bfae:	041b      	lsls	r3, r3, #16
 800bfb0:	0e1b      	lsrs	r3, r3, #24
 800bfb2:	f003 030f 	and.w	r3, r3, #15
 800bfb6:	4a87      	ldr	r2, [pc, #540]	@ (800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bfb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfbe:	f000 bc26 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfc6:	f000 bc22 	b.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800bfca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfce:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800bfd2:	430b      	orrs	r3, r1
 800bfd4:	d164      	bne.n	800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800bfd6:	4b7d      	ldr	r3, [pc, #500]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bfd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bfdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bfe0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800bfe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d120      	bne.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bfe8:	4b78      	ldr	r3, [pc, #480]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f003 0320 	and.w	r3, r3, #32
 800bff0:	2b20      	cmp	r3, #32
 800bff2:	d117      	bne.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bff4:	4b75      	ldr	r3, [pc, #468]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d005      	beq.n	800c00c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800c000:	4b72      	ldr	r3, [pc, #456]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	0e1b      	lsrs	r3, r3, #24
 800c006:	f003 030f 	and.w	r3, r3, #15
 800c00a:	e006      	b.n	800c01a <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800c00c:	4b6f      	ldr	r3, [pc, #444]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c00e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c012:	041b      	lsls	r3, r3, #16
 800c014:	0e1b      	lsrs	r3, r3, #24
 800c016:	f003 030f 	and.w	r3, r3, #15
 800c01a:	4a6e      	ldr	r2, [pc, #440]	@ (800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800c01c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c020:	637b      	str	r3, [r7, #52]	@ 0x34
 800c022:	e3f4      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800c024:	2300      	movs	r3, #0
 800c026:	637b      	str	r3, [r7, #52]	@ 0x34
 800c028:	e3f1      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800c02a:	4b68      	ldr	r3, [pc, #416]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c02c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c030:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c034:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c038:	d112      	bne.n	800c060 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800c03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c03c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c040:	d10e      	bne.n	800c060 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c042:	4b62      	ldr	r3, [pc, #392]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c04c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c050:	d102      	bne.n	800c058 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800c052:	23fa      	movs	r3, #250	@ 0xfa
 800c054:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c056:	e3da      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c058:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c05c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c05e:	e3d6      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800c060:	4b5a      	ldr	r3, [pc, #360]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c06c:	d106      	bne.n	800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800c06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c074:	d102      	bne.n	800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800c076:	4b56      	ldr	r3, [pc, #344]	@ (800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800c078:	637b      	str	r3, [r7, #52]	@ 0x34
 800c07a:	e3c8      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800c07c:	4b53      	ldr	r3, [pc, #332]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c07e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c082:	f003 0302 	and.w	r3, r3, #2
 800c086:	2b02      	cmp	r3, #2
 800c088:	d107      	bne.n	800c09a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800c08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c08c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c090:	d103      	bne.n	800c09a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800c092:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c096:	637b      	str	r3, [r7, #52]	@ 0x34
 800c098:	e3b9      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800c09a:	2300      	movs	r3, #0
 800c09c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c09e:	e3b6      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800c0a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0a4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800c0a8:	430b      	orrs	r3, r1
 800c0aa:	d164      	bne.n	800c176 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c0ac:	4b47      	ldr	r3, [pc, #284]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c0ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c0b2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c0b6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800c0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d120      	bne.n	800c100 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c0be:	4b43      	ldr	r3, [pc, #268]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f003 0320 	and.w	r3, r3, #32
 800c0c6:	2b20      	cmp	r3, #32
 800c0c8:	d117      	bne.n	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c0ca:	4b40      	ldr	r3, [pc, #256]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c0cc:	689b      	ldr	r3, [r3, #8]
 800c0ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d005      	beq.n	800c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800c0d6:	4b3d      	ldr	r3, [pc, #244]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c0d8:	689b      	ldr	r3, [r3, #8]
 800c0da:	0e1b      	lsrs	r3, r3, #24
 800c0dc:	f003 030f 	and.w	r3, r3, #15
 800c0e0:	e006      	b.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800c0e2:	4b3a      	ldr	r3, [pc, #232]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c0e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c0e8:	041b      	lsls	r3, r3, #16
 800c0ea:	0e1b      	lsrs	r3, r3, #24
 800c0ec:	f003 030f 	and.w	r3, r3, #15
 800c0f0:	4a38      	ldr	r2, [pc, #224]	@ (800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800c0f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0f8:	e389      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0fe:	e386      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800c100:	4b32      	ldr	r3, [pc, #200]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c106:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c10a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c10e:	d112      	bne.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800c110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c116:	d10e      	bne.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c118:	4b2c      	ldr	r3, [pc, #176]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c11a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c11e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c122:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c126:	d102      	bne.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800c128:	23fa      	movs	r3, #250	@ 0xfa
 800c12a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c12c:	e36f      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c12e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c132:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c134:	e36b      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800c136:	4b25      	ldr	r3, [pc, #148]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c13e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c142:	d106      	bne.n	800c152 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800c144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c146:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c14a:	d102      	bne.n	800c152 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800c14c:	4b20      	ldr	r3, [pc, #128]	@ (800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800c14e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c150:	e35d      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800c152:	4b1e      	ldr	r3, [pc, #120]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c154:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c158:	f003 0302 	and.w	r3, r3, #2
 800c15c:	2b02      	cmp	r3, #2
 800c15e:	d107      	bne.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800c160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c162:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c166:	d103      	bne.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800c168:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c16c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c16e:	e34e      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800c170:	2300      	movs	r3, #0
 800c172:	637b      	str	r3, [r7, #52]	@ 0x34
 800c174:	e34b      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800c176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c17a:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800c17e:	430b      	orrs	r3, r1
 800c180:	d14e      	bne.n	800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800c182:	4b12      	ldr	r3, [pc, #72]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c188:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800c18c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800c18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c190:	2b00      	cmp	r3, #0
 800c192:	d103      	bne.n	800c19c <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c194:	f7fd fb54 	bl	8009840 <HAL_RCC_GetPCLK1Freq>
 800c198:	6378      	str	r0, [r7, #52]	@ 0x34
 800c19a:	e338      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800c19c:	4b0b      	ldr	r3, [pc, #44]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c19e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c1a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c1a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1aa:	d119      	bne.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800c1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c1b2:	d115      	bne.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c1b4:	4b05      	ldr	r3, [pc, #20]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800c1b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c1ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c1be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1c2:	d109      	bne.n	800c1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800c1c4:	23fa      	movs	r3, #250	@ 0xfa
 800c1c6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c1c8:	e321      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c1ca:	bf00      	nop
 800c1cc:	46020c00 	.word	0x46020c00
 800c1d0:	00f42400 	.word	0x00f42400
 800c1d4:	082b2060 	.word	0x082b2060
      }
      else
      {
        frequency = LSI_VALUE;
 800c1d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c1dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c1de:	e316      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800c1e0:	4ba8      	ldr	r3, [pc, #672]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c1e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1ec:	d106      	bne.n	800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800c1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c1f4:	d102      	bne.n	800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800c1f6:	4ba4      	ldr	r3, [pc, #656]	@ (800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c1f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1fa:	e308      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800c1fc:	4ba1      	ldr	r3, [pc, #644]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c1fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c202:	f003 0302 	and.w	r3, r3, #2
 800c206:	2b02      	cmp	r3, #2
 800c208:	d107      	bne.n	800c21a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800c20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c20c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800c210:	d103      	bne.n	800c21a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800c212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c216:	637b      	str	r3, [r7, #52]	@ 0x34
 800c218:	e2f9      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800c21a:	2300      	movs	r3, #0
 800c21c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c21e:	e2f6      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800c220:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c224:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800c228:	430b      	orrs	r3, r1
 800c22a:	d12d      	bne.n	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800c22c:	4b95      	ldr	r3, [pc, #596]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c22e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c232:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800c236:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800c238:	4b92      	ldr	r3, [pc, #584]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c240:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c244:	d105      	bne.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800c246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d102      	bne.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800c24c:	4b8e      	ldr	r3, [pc, #568]	@ (800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c24e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c250:	e2dd      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800c252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c254:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c258:	d107      	bne.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c25a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fe fb4c 	bl	800a8fc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800c264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c266:	637b      	str	r3, [r7, #52]	@ 0x34
 800c268:	e2d1      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800c26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c26c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c270:	d107      	bne.n	800c282 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c272:	f107 0318 	add.w	r3, r7, #24
 800c276:	4618      	mov	r0, r3
 800c278:	f7fe fc9a 	bl	800abb0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c280:	e2c5      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800c282:	2300      	movs	r3, #0
 800c284:	637b      	str	r3, [r7, #52]	@ 0x34
 800c286:	e2c2      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800c288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c28c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800c290:	430b      	orrs	r3, r1
 800c292:	d156      	bne.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800c294:	4b7b      	ldr	r3, [pc, #492]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c29a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c29e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c2a6:	d028      	beq.n	800c2fa <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c2ae:	d845      	bhi.n	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800c2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c2b6:	d013      	beq.n	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800c2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c2be:	d83d      	bhi.n	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800c2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d004      	beq.n	800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c2cc:	d004      	beq.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800c2ce:	e035      	b.n	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800c2d0:	f7fd faca 	bl	8009868 <HAL_RCC_GetPCLK2Freq>
 800c2d4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c2d6:	e29a      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c2d8:	f7fd f996 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800c2dc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c2de:	e296      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c2e0:	4b68      	ldr	r3, [pc, #416]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c2e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2ec:	d102      	bne.n	800c2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800c2ee:	4b66      	ldr	r3, [pc, #408]	@ (800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c2f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c2f2:	e28c      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2f8:	e289      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c2fa:	4b62      	ldr	r3, [pc, #392]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f003 0320 	and.w	r3, r3, #32
 800c302:	2b20      	cmp	r3, #32
 800c304:	d117      	bne.n	800c336 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c306:	4b5f      	ldr	r3, [pc, #380]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d005      	beq.n	800c31e <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800c312:	4b5c      	ldr	r3, [pc, #368]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	0e1b      	lsrs	r3, r3, #24
 800c318:	f003 030f 	and.w	r3, r3, #15
 800c31c:	e006      	b.n	800c32c <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800c31e:	4b59      	ldr	r3, [pc, #356]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c324:	041b      	lsls	r3, r3, #16
 800c326:	0e1b      	lsrs	r3, r3, #24
 800c328:	f003 030f 	and.w	r3, r3, #15
 800c32c:	4a57      	ldr	r2, [pc, #348]	@ (800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800c32e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c332:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c334:	e26b      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c336:	2300      	movs	r3, #0
 800c338:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c33a:	e268      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c33c:	2300      	movs	r3, #0
 800c33e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c340:	e265      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800c342:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c346:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800c34a:	430b      	orrs	r3, r1
 800c34c:	d156      	bne.n	800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800c34e:	4b4d      	ldr	r3, [pc, #308]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c354:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c358:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800c35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c35c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c360:	d028      	beq.n	800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800c362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c364:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c368:	d845      	bhi.n	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800c36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c36c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c370:	d013      	beq.n	800c39a <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800c372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c378:	d83d      	bhi.n	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800c37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d004      	beq.n	800c38a <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800c380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c382:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c386:	d004      	beq.n	800c392 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800c388:	e035      	b.n	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800c38a:	f7fd fa59 	bl	8009840 <HAL_RCC_GetPCLK1Freq>
 800c38e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c390:	e23d      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c392:	f7fd f939 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800c396:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c398:	e239      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c39a:	4b3a      	ldr	r3, [pc, #232]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3a6:	d102      	bne.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800c3a8:	4b37      	ldr	r3, [pc, #220]	@ (800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c3aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c3ac:	e22f      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3b2:	e22c      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c3b4:	4b33      	ldr	r3, [pc, #204]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f003 0320 	and.w	r3, r3, #32
 800c3bc:	2b20      	cmp	r3, #32
 800c3be:	d117      	bne.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c3c0:	4b30      	ldr	r3, [pc, #192]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d005      	beq.n	800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800c3cc:	4b2d      	ldr	r3, [pc, #180]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c3ce:	689b      	ldr	r3, [r3, #8]
 800c3d0:	0e1b      	lsrs	r3, r3, #24
 800c3d2:	f003 030f 	and.w	r3, r3, #15
 800c3d6:	e006      	b.n	800c3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800c3d8:	4b2a      	ldr	r3, [pc, #168]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c3da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c3de:	041b      	lsls	r3, r3, #16
 800c3e0:	0e1b      	lsrs	r3, r3, #24
 800c3e2:	f003 030f 	and.w	r3, r3, #15
 800c3e6:	4a29      	ldr	r2, [pc, #164]	@ (800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800c3e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c3ee:	e20e      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3f4:	e20b      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3fa:	e208      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800c3fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c400:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800c404:	430b      	orrs	r3, r1
 800c406:	d17c      	bne.n	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800c408:	4b1e      	ldr	r3, [pc, #120]	@ (800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c40a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c40e:	f003 0318 	and.w	r3, r3, #24
 800c412:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800c414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c416:	2b18      	cmp	r3, #24
 800c418:	d870      	bhi.n	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800c41a:	a201      	add	r2, pc, #4	@ (adr r2, 800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800c41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c420:	0800c491 	.word	0x0800c491
 800c424:	0800c4fd 	.word	0x0800c4fd
 800c428:	0800c4fd 	.word	0x0800c4fd
 800c42c:	0800c4fd 	.word	0x0800c4fd
 800c430:	0800c4fd 	.word	0x0800c4fd
 800c434:	0800c4fd 	.word	0x0800c4fd
 800c438:	0800c4fd 	.word	0x0800c4fd
 800c43c:	0800c4fd 	.word	0x0800c4fd
 800c440:	0800c499 	.word	0x0800c499
 800c444:	0800c4fd 	.word	0x0800c4fd
 800c448:	0800c4fd 	.word	0x0800c4fd
 800c44c:	0800c4fd 	.word	0x0800c4fd
 800c450:	0800c4fd 	.word	0x0800c4fd
 800c454:	0800c4fd 	.word	0x0800c4fd
 800c458:	0800c4fd 	.word	0x0800c4fd
 800c45c:	0800c4fd 	.word	0x0800c4fd
 800c460:	0800c4a1 	.word	0x0800c4a1
 800c464:	0800c4fd 	.word	0x0800c4fd
 800c468:	0800c4fd 	.word	0x0800c4fd
 800c46c:	0800c4fd 	.word	0x0800c4fd
 800c470:	0800c4fd 	.word	0x0800c4fd
 800c474:	0800c4fd 	.word	0x0800c4fd
 800c478:	0800c4fd 	.word	0x0800c4fd
 800c47c:	0800c4fd 	.word	0x0800c4fd
 800c480:	0800c4bb 	.word	0x0800c4bb
 800c484:	46020c00 	.word	0x46020c00
 800c488:	00f42400 	.word	0x00f42400
 800c48c:	082b2060 	.word	0x082b2060
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800c490:	f7fd f9fe 	bl	8009890 <HAL_RCC_GetPCLK3Freq>
 800c494:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c496:	e1ba      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c498:	f7fd f8b6 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800c49c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c49e:	e1b6      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c4a0:	4b9f      	ldr	r3, [pc, #636]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c4a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4ac:	d102      	bne.n	800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800c4ae:	4b9d      	ldr	r3, [pc, #628]	@ (800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800c4b0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c4b2:	e1ac      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c4b8:	e1a9      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c4ba:	4b99      	ldr	r3, [pc, #612]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f003 0320 	and.w	r3, r3, #32
 800c4c2:	2b20      	cmp	r3, #32
 800c4c4:	d117      	bne.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c4c6:	4b96      	ldr	r3, [pc, #600]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d005      	beq.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800c4d2:	4b93      	ldr	r3, [pc, #588]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	0e1b      	lsrs	r3, r3, #24
 800c4d8:	f003 030f 	and.w	r3, r3, #15
 800c4dc:	e006      	b.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800c4de:	4b90      	ldr	r3, [pc, #576]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c4e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c4e4:	041b      	lsls	r3, r3, #16
 800c4e6:	0e1b      	lsrs	r3, r3, #24
 800c4e8:	f003 030f 	and.w	r3, r3, #15
 800c4ec:	4a8e      	ldr	r2, [pc, #568]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800c4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c4f4:	e18b      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c4fa:	e188      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c500:	e185      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800c502:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c506:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800c50a:	430b      	orrs	r3, r1
 800c50c:	d155      	bne.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c50e:	4b84      	ldr	r3, [pc, #528]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c510:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c514:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c518:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c51c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c520:	d013      	beq.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800c522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c524:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c528:	d844      	bhi.n	800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800c52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c52c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c530:	d013      	beq.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800c532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c534:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c538:	d83c      	bhi.n	800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800c53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d014      	beq.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800c540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c542:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c546:	d014      	beq.n	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800c548:	e034      	b.n	800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c54a:	f107 0318 	add.w	r3, r7, #24
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fe fb2e 	bl	800abb0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c558:	e159      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c55a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fe f9cc 	bl	800a8fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c566:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c568:	e151      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c56a:	f7fd f84d 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800c56e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c570:	e14d      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c572:	4b6b      	ldr	r3, [pc, #428]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f003 0320 	and.w	r3, r3, #32
 800c57a:	2b20      	cmp	r3, #32
 800c57c:	d117      	bne.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c57e:	4b68      	ldr	r3, [pc, #416]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c586:	2b00      	cmp	r3, #0
 800c588:	d005      	beq.n	800c596 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800c58a:	4b65      	ldr	r3, [pc, #404]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	0e1b      	lsrs	r3, r3, #24
 800c590:	f003 030f 	and.w	r3, r3, #15
 800c594:	e006      	b.n	800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800c596:	4b62      	ldr	r3, [pc, #392]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c598:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c59c:	041b      	lsls	r3, r3, #16
 800c59e:	0e1b      	lsrs	r3, r3, #24
 800c5a0:	f003 030f 	and.w	r3, r3, #15
 800c5a4:	4a60      	ldr	r2, [pc, #384]	@ (800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800c5a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c5ac:	e12f      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c5b2:	e12c      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c5b8:	e129      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800c5ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5be:	1e59      	subs	r1, r3, #1
 800c5c0:	ea52 0301 	orrs.w	r3, r2, r1
 800c5c4:	d13c      	bne.n	800c640 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800c5c6:	4b56      	ldr	r3, [pc, #344]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c5c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c5cc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800c5d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c5d8:	d027      	beq.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800c5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c5e0:	d82b      	bhi.n	800c63a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c5e8:	d017      	beq.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800c5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c5f0:	d823      	bhi.n	800c63a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d004      	beq.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800c5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c5fe:	d004      	beq.n	800c60a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800c600:	e01b      	b.n	800c63a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c602:	f7fd f801 	bl	8009608 <HAL_RCC_GetSysClockFreq>
 800c606:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c608:	e101      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c60a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fe f974 	bl	800a8fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c616:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c618:	e0f9      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c61a:	f107 0318 	add.w	r3, r7, #24
 800c61e:	4618      	mov	r0, r3
 800c620:	f7fe fac6 	bl	800abb0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c628:	e0f1      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c62a:	f107 030c 	add.w	r3, r7, #12
 800c62e:	4618      	mov	r0, r3
 800c630:	f7fe fc18 	bl	800ae64 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c638:	e0e9      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c63a:	2300      	movs	r3, #0
 800c63c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c63e:	e0e6      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800c640:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c644:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800c648:	430b      	orrs	r3, r1
 800c64a:	d131      	bne.n	800c6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800c64c:	4b34      	ldr	r3, [pc, #208]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c64e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c652:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c656:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800c658:	4b31      	ldr	r3, [pc, #196]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c65a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c65e:	f003 0302 	and.w	r3, r3, #2
 800c662:	2b02      	cmp	r3, #2
 800c664:	d106      	bne.n	800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800c666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d103      	bne.n	800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800c66c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c670:	637b      	str	r3, [r7, #52]	@ 0x34
 800c672:	e0cc      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800c674:	4b2a      	ldr	r3, [pc, #168]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c676:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c67a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c67e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c682:	d112      	bne.n	800c6aa <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800c684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c686:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c68a:	d10e      	bne.n	800c6aa <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c68c:	4b24      	ldr	r3, [pc, #144]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c68e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c696:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c69a:	d102      	bne.n	800c6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800c69c:	23fa      	movs	r3, #250	@ 0xfa
 800c69e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c6a0:	e0b5      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c6a2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c6a6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c6a8:	e0b1      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6ae:	e0ae      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800c6b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6b4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800c6b8:	430b      	orrs	r3, r1
 800c6ba:	d13b      	bne.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800c6bc:	4b18      	ldr	r3, [pc, #96]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c6be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c6c2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c6c6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800c6c8:	4b15      	ldr	r3, [pc, #84]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c6d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c6d4:	d105      	bne.n	800c6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800c6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d102      	bne.n	800c6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800c6dc:	4b13      	ldr	r3, [pc, #76]	@ (800c72c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800c6de:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6e0:	e095      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800c6e2:	4b0f      	ldr	r3, [pc, #60]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c6ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c6ee:	d106      	bne.n	800c6fe <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800c6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6f6:	d102      	bne.n	800c6fe <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800c6f8:	4b0d      	ldr	r3, [pc, #52]	@ (800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800c6fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6fc:	e087      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800c6fe:	4b08      	ldr	r3, [pc, #32]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c70a:	d106      	bne.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800c70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c70e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c712:	d102      	bne.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800c714:	4b03      	ldr	r3, [pc, #12]	@ (800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800c716:	637b      	str	r3, [r7, #52]	@ 0x34
 800c718:	e079      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800c71a:	2300      	movs	r3, #0
 800c71c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c71e:	e076      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c720:	46020c00 	.word	0x46020c00
 800c724:	00f42400 	.word	0x00f42400
 800c728:	082b2060 	.word	0x082b2060
 800c72c:	02dc6c00 	.word	0x02dc6c00
 800c730:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800c734:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c738:	1e99      	subs	r1, r3, #2
 800c73a:	ea52 0301 	orrs.w	r3, r2, r1
 800c73e:	d120      	bne.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800c740:	4b35      	ldr	r3, [pc, #212]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c742:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c746:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c74a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d004      	beq.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800c752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c754:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c758:	d008      	beq.n	800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800c75a:	e00f      	b.n	800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c75c:	f107 030c 	add.w	r3, r7, #12
 800c760:	4618      	mov	r0, r3
 800c762:	f7fe fb7f 	bl	800ae64 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c76a:	e050      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c76c:	f107 0318 	add.w	r3, r7, #24
 800c770:	4618      	mov	r0, r3
 800c772:	f7fe fa1d 	bl	800abb0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800c776:	6a3b      	ldr	r3, [r7, #32]
 800c778:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c77a:	e048      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c77c:	2300      	movs	r3, #0
 800c77e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c780:	e045      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800c782:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c786:	f1a3 0108 	sub.w	r1, r3, #8
 800c78a:	ea52 0301 	orrs.w	r3, r2, r1
 800c78e:	d13c      	bne.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800c790:	4b21      	ldr	r3, [pc, #132]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c792:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c796:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c79a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800c79c:	4b1e      	ldr	r3, [pc, #120]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c7a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c7a8:	d105      	bne.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d102      	bne.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800c7b0:	4b1a      	ldr	r3, [pc, #104]	@ (800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800c7b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7b4:	e02b      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800c7b6:	4b18      	ldr	r3, [pc, #96]	@ (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c7be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c7c2:	d106      	bne.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800c7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c7ca:	d102      	bne.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800c7cc:	4b14      	ldr	r3, [pc, #80]	@ (800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800c7ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7d0:	e01d      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800c7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7d8:	d107      	bne.n	800c7ea <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7fe f88c 	bl	800a8fc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7e8:	e011      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800c7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c7f0:	d108      	bne.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fe f880 	bl	800a8fc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800c7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7fe:	085b      	lsrs	r3, r3, #1
 800c800:	637b      	str	r3, [r7, #52]	@ 0x34
 800c802:	e004      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800c804:	2300      	movs	r3, #0
 800c806:	637b      	str	r3, [r7, #52]	@ 0x34
 800c808:	e001      	b.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800c80a:	2300      	movs	r3, #0
 800c80c:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800c80e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c810:	4618      	mov	r0, r3
 800c812:	3738      	adds	r7, #56	@ 0x38
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	46020c00 	.word	0x46020c00
 800c81c:	00f42400 	.word	0x00f42400
 800c820:	007a1200 	.word	0x007a1200

0800c824 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800c824:	b480      	push	{r7}
 800c826:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800c828:	4b06      	ldr	r3, [pc, #24]	@ (800c844 <HAL_RCCEx_EnableLSECSS+0x20>)
 800c82a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c82e:	4a05      	ldr	r2, [pc, #20]	@ (800c844 <HAL_RCCEx_EnableLSECSS+0x20>)
 800c830:	f043 0320 	orr.w	r3, r3, #32
 800c834:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 800c838:	bf00      	nop
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	46020c00 	.word	0x46020c00

0800c848 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  FlagStatus       pwrclkchanged = RESET;
 800c850:	2300      	movs	r3, #0
 800c852:	73fb      	strb	r3, [r7, #15]
  FlagStatus       backupchanged = RESET;
 800c854:	2300      	movs	r3, #0
 800c856:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c858:	4b20      	ldr	r3, [pc, #128]	@ (800c8dc <HAL_RCCEx_EnableLSCO+0x94>)
 800c85a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c85e:	f003 0304 	and.w	r3, r3, #4
 800c862:	2b00      	cmp	r3, #0
 800c864:	d110      	bne.n	800c888 <HAL_RCCEx_EnableLSCO+0x40>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c866:	4b1d      	ldr	r3, [pc, #116]	@ (800c8dc <HAL_RCCEx_EnableLSCO+0x94>)
 800c868:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c86c:	4a1b      	ldr	r2, [pc, #108]	@ (800c8dc <HAL_RCCEx_EnableLSCO+0x94>)
 800c86e:	f043 0304 	orr.w	r3, r3, #4
 800c872:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800c876:	4b19      	ldr	r3, [pc, #100]	@ (800c8dc <HAL_RCCEx_EnableLSCO+0x94>)
 800c878:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c87c:	f003 0304 	and.w	r3, r3, #4
 800c880:	60bb      	str	r3, [r7, #8]
 800c882:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 800c884:	2301      	movs	r3, #1
 800c886:	73fb      	strb	r3, [r7, #15]
  }
  if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c888:	4b15      	ldr	r3, [pc, #84]	@ (800c8e0 <HAL_RCCEx_EnableLSCO+0x98>)
 800c88a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c88c:	f003 0301 	and.w	r3, r3, #1
 800c890:	2b00      	cmp	r3, #0
 800c892:	d103      	bne.n	800c89c <HAL_RCCEx_EnableLSCO+0x54>
  {
    HAL_PWR_EnableBkUpAccess();
 800c894:	f7fb fcce 	bl	8008234 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 800c898:	2301      	movs	r3, #1
 800c89a:	73bb      	strb	r3, [r7, #14]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 800c89c:	4b0f      	ldr	r3, [pc, #60]	@ (800c8dc <HAL_RCCEx_EnableLSCO+0x94>)
 800c89e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c8a2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	4a0c      	ldr	r2, [pc, #48]	@ (800c8dc <HAL_RCCEx_EnableLSCO+0x94>)
 800c8ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c8b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  if (backupchanged == SET)
 800c8b4:	7bbb      	ldrb	r3, [r7, #14]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d101      	bne.n	800c8be <HAL_RCCEx_EnableLSCO+0x76>
  {
    HAL_PWR_DisableBkUpAccess();
 800c8ba:	f7fb fccb 	bl	8008254 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 800c8be:	7bfb      	ldrb	r3, [r7, #15]
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d107      	bne.n	800c8d4 <HAL_RCCEx_EnableLSCO+0x8c>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 800c8c4:	4b05      	ldr	r3, [pc, #20]	@ (800c8dc <HAL_RCCEx_EnableLSCO+0x94>)
 800c8c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c8ca:	4a04      	ldr	r2, [pc, #16]	@ (800c8dc <HAL_RCCEx_EnableLSCO+0x94>)
 800c8cc:	f023 0304 	bic.w	r3, r3, #4
 800c8d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }
}
 800c8d4:	bf00      	nop
 800c8d6:	3710      	adds	r7, #16
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	46020c00 	.word	0x46020c00
 800c8e0:	46020800 	.word	0x46020800

0800c8e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800c8ec:	4b47      	ldr	r3, [pc, #284]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a46      	ldr	r2, [pc, #280]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c8f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c8f6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c8f8:	f7f5 fc3e 	bl	8002178 <HAL_GetTick>
 800c8fc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c8fe:	e008      	b.n	800c912 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c900:	f7f5 fc3a 	bl	8002178 <HAL_GetTick>
 800c904:	4602      	mov	r2, r0
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	1ad3      	subs	r3, r2, r3
 800c90a:	2b02      	cmp	r3, #2
 800c90c:	d901      	bls.n	800c912 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c90e:	2303      	movs	r3, #3
 800c910:	e077      	b.n	800ca02 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c912:	4b3e      	ldr	r3, [pc, #248]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1f0      	bne.n	800c900 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c91e:	4b3b      	ldr	r3, [pc, #236]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c922:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c926:	f023 0303 	bic.w	r3, r3, #3
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	6811      	ldr	r1, [r2, #0]
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	6852      	ldr	r2, [r2, #4]
 800c932:	3a01      	subs	r2, #1
 800c934:	0212      	lsls	r2, r2, #8
 800c936:	430a      	orrs	r2, r1
 800c938:	4934      	ldr	r1, [pc, #208]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c93a:	4313      	orrs	r3, r2
 800c93c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800c93e:	4b33      	ldr	r3, [pc, #204]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c940:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c942:	4b33      	ldr	r3, [pc, #204]	@ (800ca10 <RCCEx_PLL2_Config+0x12c>)
 800c944:	4013      	ands	r3, r2
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	6892      	ldr	r2, [r2, #8]
 800c94a:	3a01      	subs	r2, #1
 800c94c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	68d2      	ldr	r2, [r2, #12]
 800c954:	3a01      	subs	r2, #1
 800c956:	0252      	lsls	r2, r2, #9
 800c958:	b292      	uxth	r2, r2
 800c95a:	4311      	orrs	r1, r2
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	6912      	ldr	r2, [r2, #16]
 800c960:	3a01      	subs	r2, #1
 800c962:	0412      	lsls	r2, r2, #16
 800c964:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c968:	4311      	orrs	r1, r2
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	6952      	ldr	r2, [r2, #20]
 800c96e:	3a01      	subs	r2, #1
 800c970:	0612      	lsls	r2, r2, #24
 800c972:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c976:	430a      	orrs	r2, r1
 800c978:	4924      	ldr	r1, [pc, #144]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c97a:	4313      	orrs	r3, r2
 800c97c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c97e:	4b23      	ldr	r3, [pc, #140]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c982:	f023 020c 	bic.w	r2, r3, #12
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	699b      	ldr	r3, [r3, #24]
 800c98a:	4920      	ldr	r1, [pc, #128]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c98c:	4313      	orrs	r3, r2
 800c98e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c990:	4b1e      	ldr	r3, [pc, #120]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6a1b      	ldr	r3, [r3, #32]
 800c998:	491c      	ldr	r1, [pc, #112]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c99a:	4313      	orrs	r3, r2
 800c99c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800c99e:	4b1b      	ldr	r3, [pc, #108]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9a2:	4a1a      	ldr	r2, [pc, #104]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c9a4:	f023 0310 	bic.w	r3, r3, #16
 800c9a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c9aa:	4b18      	ldr	r3, [pc, #96]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c9ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c9b2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	69d2      	ldr	r2, [r2, #28]
 800c9ba:	00d2      	lsls	r2, r2, #3
 800c9bc:	4913      	ldr	r1, [pc, #76]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800c9c2:	4b12      	ldr	r3, [pc, #72]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c9c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9c6:	4a11      	ldr	r2, [pc, #68]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c9c8:	f043 0310 	orr.w	r3, r3, #16
 800c9cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800c9ce:	4b0f      	ldr	r3, [pc, #60]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a0e      	ldr	r2, [pc, #56]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c9d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c9d8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c9da:	f7f5 fbcd 	bl	8002178 <HAL_GetTick>
 800c9de:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c9e0:	e008      	b.n	800c9f4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c9e2:	f7f5 fbc9 	bl	8002178 <HAL_GetTick>
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	1ad3      	subs	r3, r2, r3
 800c9ec:	2b02      	cmp	r3, #2
 800c9ee:	d901      	bls.n	800c9f4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c9f0:	2303      	movs	r3, #3
 800c9f2:	e006      	b.n	800ca02 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c9f4:	4b05      	ldr	r3, [pc, #20]	@ (800ca0c <RCCEx_PLL2_Config+0x128>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d0f0      	beq.n	800c9e2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800ca00:	2300      	movs	r3, #0

}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	46020c00 	.word	0x46020c00
 800ca10:	80800000 	.word	0x80800000

0800ca14 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b084      	sub	sp, #16
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800ca1c:	4b47      	ldr	r3, [pc, #284]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a46      	ldr	r2, [pc, #280]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800ca22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ca26:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ca28:	f7f5 fba6 	bl	8002178 <HAL_GetTick>
 800ca2c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ca2e:	e008      	b.n	800ca42 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ca30:	f7f5 fba2 	bl	8002178 <HAL_GetTick>
 800ca34:	4602      	mov	r2, r0
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	2b02      	cmp	r3, #2
 800ca3c:	d901      	bls.n	800ca42 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ca3e:	2303      	movs	r3, #3
 800ca40:	e077      	b.n	800cb32 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ca42:	4b3e      	ldr	r3, [pc, #248]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d1f0      	bne.n	800ca30 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ca4e:	4b3b      	ldr	r3, [pc, #236]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800ca50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca52:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ca56:	f023 0303 	bic.w	r3, r3, #3
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	6811      	ldr	r1, [r2, #0]
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	6852      	ldr	r2, [r2, #4]
 800ca62:	3a01      	subs	r2, #1
 800ca64:	0212      	lsls	r2, r2, #8
 800ca66:	430a      	orrs	r2, r1
 800ca68:	4934      	ldr	r1, [pc, #208]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	630b      	str	r3, [r1, #48]	@ 0x30
 800ca6e:	4b33      	ldr	r3, [pc, #204]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800ca70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ca72:	4b33      	ldr	r3, [pc, #204]	@ (800cb40 <RCCEx_PLL3_Config+0x12c>)
 800ca74:	4013      	ands	r3, r2
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	6892      	ldr	r2, [r2, #8]
 800ca7a:	3a01      	subs	r2, #1
 800ca7c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	68d2      	ldr	r2, [r2, #12]
 800ca84:	3a01      	subs	r2, #1
 800ca86:	0252      	lsls	r2, r2, #9
 800ca88:	b292      	uxth	r2, r2
 800ca8a:	4311      	orrs	r1, r2
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	6912      	ldr	r2, [r2, #16]
 800ca90:	3a01      	subs	r2, #1
 800ca92:	0412      	lsls	r2, r2, #16
 800ca94:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ca98:	4311      	orrs	r1, r2
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	6952      	ldr	r2, [r2, #20]
 800ca9e:	3a01      	subs	r2, #1
 800caa0:	0612      	lsls	r2, r2, #24
 800caa2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800caa6:	430a      	orrs	r2, r1
 800caa8:	4924      	ldr	r1, [pc, #144]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800caaa:	4313      	orrs	r3, r2
 800caac:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800caae:	4b23      	ldr	r3, [pc, #140]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800cab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cab2:	f023 020c 	bic.w	r2, r3, #12
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	699b      	ldr	r3, [r3, #24]
 800caba:	4920      	ldr	r1, [pc, #128]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800cabc:	4313      	orrs	r3, r2
 800cabe:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800cac0:	4b1e      	ldr	r3, [pc, #120]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800cac2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6a1b      	ldr	r3, [r3, #32]
 800cac8:	491c      	ldr	r1, [pc, #112]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800caca:	4313      	orrs	r3, r2
 800cacc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800cace:	4b1b      	ldr	r3, [pc, #108]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800cad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cad2:	4a1a      	ldr	r2, [pc, #104]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800cad4:	f023 0310 	bic.w	r3, r3, #16
 800cad8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cada:	4b18      	ldr	r3, [pc, #96]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800cadc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cade:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cae2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	69d2      	ldr	r2, [r2, #28]
 800caea:	00d2      	lsls	r2, r2, #3
 800caec:	4913      	ldr	r1, [pc, #76]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800caee:	4313      	orrs	r3, r2
 800caf0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800caf2:	4b12      	ldr	r3, [pc, #72]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800caf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caf6:	4a11      	ldr	r2, [pc, #68]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800caf8:	f043 0310 	orr.w	r3, r3, #16
 800cafc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800cafe:	4b0f      	ldr	r3, [pc, #60]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4a0e      	ldr	r2, [pc, #56]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800cb04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cb08:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cb0a:	f7f5 fb35 	bl	8002178 <HAL_GetTick>
 800cb0e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cb10:	e008      	b.n	800cb24 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cb12:	f7f5 fb31 	bl	8002178 <HAL_GetTick>
 800cb16:	4602      	mov	r2, r0
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	1ad3      	subs	r3, r2, r3
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d901      	bls.n	800cb24 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800cb20:	2303      	movs	r3, #3
 800cb22:	e006      	b.n	800cb32 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cb24:	4b05      	ldr	r3, [pc, #20]	@ (800cb3c <RCCEx_PLL3_Config+0x128>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d0f0      	beq.n	800cb12 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800cb30:	2300      	movs	r3, #0
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3710      	adds	r7, #16
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	46020c00 	.word	0x46020c00
 800cb40:	80800000 	.word	0x80800000

0800cb44 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d071      	beq.n	800cc3a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d106      	bne.n	800cb70 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2200      	movs	r2, #0
 800cb66:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f7f5 f8be 	bl	8001cec <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2202      	movs	r2, #2
 800cb74:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800cb78:	4b32      	ldr	r3, [pc, #200]	@ (800cc44 <HAL_RTC_Init+0x100>)
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	f003 0310 	and.w	r3, r3, #16
 800cb80:	2b10      	cmp	r3, #16
 800cb82:	d051      	beq.n	800cc28 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb84:	4b2f      	ldr	r3, [pc, #188]	@ (800cc44 <HAL_RTC_Init+0x100>)
 800cb86:	22ca      	movs	r2, #202	@ 0xca
 800cb88:	625a      	str	r2, [r3, #36]	@ 0x24
 800cb8a:	4b2e      	ldr	r3, [pc, #184]	@ (800cc44 <HAL_RTC_Init+0x100>)
 800cb8c:	2253      	movs	r2, #83	@ 0x53
 800cb8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 f88b 	bl	800ccac <RTC_EnterInitMode>
 800cb96:	4603      	mov	r3, r0
 800cb98:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800cb9a:	7bfb      	ldrb	r3, [r7, #15]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d13f      	bne.n	800cc20 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800cba0:	4b28      	ldr	r3, [pc, #160]	@ (800cc44 <HAL_RTC_Init+0x100>)
 800cba2:	699b      	ldr	r3, [r3, #24]
 800cba4:	4a27      	ldr	r2, [pc, #156]	@ (800cc44 <HAL_RTC_Init+0x100>)
 800cba6:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800cbaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbae:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800cbb0:	4b24      	ldr	r3, [pc, #144]	@ (800cc44 <HAL_RTC_Init+0x100>)
 800cbb2:	699a      	ldr	r2, [r3, #24]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6859      	ldr	r1, [r3, #4]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	691b      	ldr	r3, [r3, #16]
 800cbbc:	4319      	orrs	r1, r3
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	699b      	ldr	r3, [r3, #24]
 800cbc2:	430b      	orrs	r3, r1
 800cbc4:	491f      	ldr	r1, [pc, #124]	@ (800cc44 <HAL_RTC_Init+0x100>)
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	68da      	ldr	r2, [r3, #12]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	041b      	lsls	r3, r3, #16
 800cbd4:	491b      	ldr	r1, [pc, #108]	@ (800cc44 <HAL_RTC_Init+0x100>)
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800cbda:	4b1a      	ldr	r3, [pc, #104]	@ (800cc44 <HAL_RTC_Init+0x100>)
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbea:	430b      	orrs	r3, r1
 800cbec:	4915      	ldr	r1, [pc, #84]	@ (800cc44 <HAL_RTC_Init+0x100>)
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 f896 	bl	800cd24 <RTC_ExitInitMode>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800cbfc:	7bfb      	ldrb	r3, [r7, #15]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d10e      	bne.n	800cc20 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800cc02:	4b10      	ldr	r3, [pc, #64]	@ (800cc44 <HAL_RTC_Init+0x100>)
 800cc04:	699b      	ldr	r3, [r3, #24]
 800cc06:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6a19      	ldr	r1, [r3, #32]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	69db      	ldr	r3, [r3, #28]
 800cc12:	4319      	orrs	r1, r3
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	695b      	ldr	r3, [r3, #20]
 800cc18:	430b      	orrs	r3, r1
 800cc1a:	490a      	ldr	r1, [pc, #40]	@ (800cc44 <HAL_RTC_Init+0x100>)
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc20:	4b08      	ldr	r3, [pc, #32]	@ (800cc44 <HAL_RTC_Init+0x100>)
 800cc22:	22ff      	movs	r2, #255	@ 0xff
 800cc24:	625a      	str	r2, [r3, #36]	@ 0x24
 800cc26:	e001      	b.n	800cc2c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d103      	bne.n	800cc3a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2201      	movs	r2, #1
 800cc36:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800cc3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3710      	adds	r7, #16
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	46007800 	.word	0x46007800

0800cc48 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800cc50:	4b15      	ldr	r3, [pc, #84]	@ (800cca8 <HAL_RTC_WaitForSynchro+0x60>)
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	4a14      	ldr	r2, [pc, #80]	@ (800cca8 <HAL_RTC_WaitForSynchro+0x60>)
 800cc56:	f023 0320 	bic.w	r3, r3, #32
 800cc5a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800cc5c:	f7f5 fa8c 	bl	8002178 <HAL_GetTick>
 800cc60:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cc62:	e013      	b.n	800cc8c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cc64:	f7f5 fa88 	bl	8002178 <HAL_GetTick>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	1ad3      	subs	r3, r2, r3
 800cc6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cc72:	d90b      	bls.n	800cc8c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cc74:	4b0c      	ldr	r3, [pc, #48]	@ (800cca8 <HAL_RTC_WaitForSynchro+0x60>)
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	f003 0320 	and.w	r3, r3, #32
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d10c      	bne.n	800cc9a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2203      	movs	r2, #3
 800cc84:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800cc88:	2303      	movs	r3, #3
 800cc8a:	e008      	b.n	800cc9e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cc8c:	4b06      	ldr	r3, [pc, #24]	@ (800cca8 <HAL_RTC_WaitForSynchro+0x60>)
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	f003 0320 	and.w	r3, r3, #32
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d0e5      	beq.n	800cc64 <HAL_RTC_WaitForSynchro+0x1c>
 800cc98:	e000      	b.n	800cc9c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800cc9a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800cc9c:	2300      	movs	r3, #0
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	46007800 	.word	0x46007800

0800ccac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800ccb8:	4b19      	ldr	r3, [pc, #100]	@ (800cd20 <RTC_EnterInitMode+0x74>)
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d128      	bne.n	800cd16 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ccc4:	4b16      	ldr	r3, [pc, #88]	@ (800cd20 <RTC_EnterInitMode+0x74>)
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	4a15      	ldr	r2, [pc, #84]	@ (800cd20 <RTC_EnterInitMode+0x74>)
 800ccca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccce:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800ccd0:	f7f5 fa52 	bl	8002178 <HAL_GetTick>
 800ccd4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ccd6:	e013      	b.n	800cd00 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ccd8:	f7f5 fa4e 	bl	8002178 <HAL_GetTick>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cce6:	d90b      	bls.n	800cd00 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cce8:	4b0d      	ldr	r3, [pc, #52]	@ (800cd20 <RTC_EnterInitMode+0x74>)
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d10f      	bne.n	800cd14 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800ccf4:	2303      	movs	r3, #3
 800ccf6:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2203      	movs	r2, #3
 800ccfc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cd00:	4b07      	ldr	r3, [pc, #28]	@ (800cd20 <RTC_EnterInitMode+0x74>)
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d104      	bne.n	800cd16 <RTC_EnterInitMode+0x6a>
 800cd0c:	7bfb      	ldrb	r3, [r7, #15]
 800cd0e:	2b03      	cmp	r3, #3
 800cd10:	d1e2      	bne.n	800ccd8 <RTC_EnterInitMode+0x2c>
 800cd12:	e000      	b.n	800cd16 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800cd14:	bf00      	nop
        }
      }
    }
  }

  return status;
 800cd16:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	46007800 	.word	0x46007800

0800cd24 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cd30:	4b1a      	ldr	r3, [pc, #104]	@ (800cd9c <RTC_ExitInitMode+0x78>)
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	4a19      	ldr	r2, [pc, #100]	@ (800cd9c <RTC_ExitInitMode+0x78>)
 800cd36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd3a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cd3c:	4b17      	ldr	r3, [pc, #92]	@ (800cd9c <RTC_ExitInitMode+0x78>)
 800cd3e:	699b      	ldr	r3, [r3, #24]
 800cd40:	f003 0320 	and.w	r3, r3, #32
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10c      	bne.n	800cd62 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f7ff ff7d 	bl	800cc48 <HAL_RTC_WaitForSynchro>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d01e      	beq.n	800cd92 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2203      	movs	r2, #3
 800cd58:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800cd5c:	2303      	movs	r3, #3
 800cd5e:	73fb      	strb	r3, [r7, #15]
 800cd60:	e017      	b.n	800cd92 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cd62:	4b0e      	ldr	r3, [pc, #56]	@ (800cd9c <RTC_ExitInitMode+0x78>)
 800cd64:	699b      	ldr	r3, [r3, #24]
 800cd66:	4a0d      	ldr	r2, [pc, #52]	@ (800cd9c <RTC_ExitInitMode+0x78>)
 800cd68:	f023 0320 	bic.w	r3, r3, #32
 800cd6c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f7ff ff6a 	bl	800cc48 <HAL_RTC_WaitForSynchro>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d005      	beq.n	800cd86 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2203      	movs	r2, #3
 800cd7e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800cd82:	2303      	movs	r3, #3
 800cd84:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cd86:	4b05      	ldr	r3, [pc, #20]	@ (800cd9c <RTC_ExitInitMode+0x78>)
 800cd88:	699b      	ldr	r3, [r3, #24]
 800cd8a:	4a04      	ldr	r2, [pc, #16]	@ (800cd9c <RTC_ExitInitMode+0x78>)
 800cd8c:	f043 0320 	orr.w	r3, r3, #32
 800cd90:	6193      	str	r3, [r2, #24]
  }
  return status;
 800cd92:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3710      	adds	r7, #16
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	46007800 	.word	0x46007800

0800cda0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	4910      	ldr	r1, [pc, #64]	@ (800cdf4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	689a      	ldr	r2, [r3, #8]
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	431a      	orrs	r2, r3
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	699b      	ldr	r3, [r3, #24]
 800cdc6:	490c      	ldr	r1, [pc, #48]	@ (800cdf8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800cdcc:	4b0a      	ldr	r3, [pc, #40]	@ (800cdf8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cdce:	6a1b      	ldr	r3, [r3, #32]
 800cdd0:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	6919      	ldr	r1, [r3, #16]
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	695b      	ldr	r3, [r3, #20]
 800cddc:	041b      	lsls	r3, r3, #16
 800cdde:	430b      	orrs	r3, r1
 800cde0:	4905      	ldr	r1, [pc, #20]	@ (800cdf8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cde2:	4313      	orrs	r3, r2
 800cde4:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800cde6:	2300      	movs	r3, #0
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	370c      	adds	r7, #12
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr
 800cdf4:	46007800 	.word	0x46007800
 800cdf8:	46007c00 	.word	0x46007c00

0800cdfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d101      	bne.n	800ce0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e049      	b.n	800cea2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ce14:	b2db      	uxtb	r3, r3
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d106      	bne.n	800ce28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 f841 	bl	800ceaa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2202      	movs	r2, #2
 800ce2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	3304      	adds	r3, #4
 800ce38:	4619      	mov	r1, r3
 800ce3a:	4610      	mov	r0, r2
 800ce3c:	f000 fa58 	bl	800d2f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2201      	movs	r2, #1
 800ce44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2201      	movs	r2, #1
 800ce54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2201      	movs	r2, #1
 800ce64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2201      	movs	r2, #1
 800ce74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2201      	movs	r2, #1
 800ce84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2201      	movs	r2, #1
 800ce94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cea0:	2300      	movs	r3, #0
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3708      	adds	r7, #8
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ceaa:	b480      	push	{r7}
 800ceac:	b083      	sub	sp, #12
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ceb2:	bf00      	nop
 800ceb4:	370c      	adds	r7, #12
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr
	...

0800cec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b085      	sub	sp, #20
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cece:	b2db      	uxtb	r3, r3
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d001      	beq.n	800ced8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ced4:	2301      	movs	r3, #1
 800ced6:	e072      	b.n	800cfbe <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2202      	movs	r2, #2
 800cedc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	68da      	ldr	r2, [r3, #12]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f042 0201 	orr.w	r2, r2, #1
 800ceee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4a35      	ldr	r2, [pc, #212]	@ (800cfcc <HAL_TIM_Base_Start_IT+0x10c>)
 800cef6:	4293      	cmp	r3, r2
 800cef8:	d040      	beq.n	800cf7c <HAL_TIM_Base_Start_IT+0xbc>
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4a34      	ldr	r2, [pc, #208]	@ (800cfd0 <HAL_TIM_Base_Start_IT+0x110>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d03b      	beq.n	800cf7c <HAL_TIM_Base_Start_IT+0xbc>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf0c:	d036      	beq.n	800cf7c <HAL_TIM_Base_Start_IT+0xbc>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cf16:	d031      	beq.n	800cf7c <HAL_TIM_Base_Start_IT+0xbc>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a2d      	ldr	r2, [pc, #180]	@ (800cfd4 <HAL_TIM_Base_Start_IT+0x114>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d02c      	beq.n	800cf7c <HAL_TIM_Base_Start_IT+0xbc>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	4a2c      	ldr	r2, [pc, #176]	@ (800cfd8 <HAL_TIM_Base_Start_IT+0x118>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d027      	beq.n	800cf7c <HAL_TIM_Base_Start_IT+0xbc>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4a2a      	ldr	r2, [pc, #168]	@ (800cfdc <HAL_TIM_Base_Start_IT+0x11c>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d022      	beq.n	800cf7c <HAL_TIM_Base_Start_IT+0xbc>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4a29      	ldr	r2, [pc, #164]	@ (800cfe0 <HAL_TIM_Base_Start_IT+0x120>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d01d      	beq.n	800cf7c <HAL_TIM_Base_Start_IT+0xbc>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4a27      	ldr	r2, [pc, #156]	@ (800cfe4 <HAL_TIM_Base_Start_IT+0x124>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d018      	beq.n	800cf7c <HAL_TIM_Base_Start_IT+0xbc>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a26      	ldr	r2, [pc, #152]	@ (800cfe8 <HAL_TIM_Base_Start_IT+0x128>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d013      	beq.n	800cf7c <HAL_TIM_Base_Start_IT+0xbc>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a24      	ldr	r2, [pc, #144]	@ (800cfec <HAL_TIM_Base_Start_IT+0x12c>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d00e      	beq.n	800cf7c <HAL_TIM_Base_Start_IT+0xbc>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	4a23      	ldr	r2, [pc, #140]	@ (800cff0 <HAL_TIM_Base_Start_IT+0x130>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d009      	beq.n	800cf7c <HAL_TIM_Base_Start_IT+0xbc>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4a21      	ldr	r2, [pc, #132]	@ (800cff4 <HAL_TIM_Base_Start_IT+0x134>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d004      	beq.n	800cf7c <HAL_TIM_Base_Start_IT+0xbc>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4a20      	ldr	r2, [pc, #128]	@ (800cff8 <HAL_TIM_Base_Start_IT+0x138>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d115      	bne.n	800cfa8 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	689a      	ldr	r2, [r3, #8]
 800cf82:	4b1e      	ldr	r3, [pc, #120]	@ (800cffc <HAL_TIM_Base_Start_IT+0x13c>)
 800cf84:	4013      	ands	r3, r2
 800cf86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2b06      	cmp	r3, #6
 800cf8c:	d015      	beq.n	800cfba <HAL_TIM_Base_Start_IT+0xfa>
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf94:	d011      	beq.n	800cfba <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f042 0201 	orr.w	r2, r2, #1
 800cfa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfa6:	e008      	b.n	800cfba <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f042 0201 	orr.w	r2, r2, #1
 800cfb6:	601a      	str	r2, [r3, #0]
 800cfb8:	e000      	b.n	800cfbc <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr
 800cfca:	bf00      	nop
 800cfcc:	40012c00 	.word	0x40012c00
 800cfd0:	50012c00 	.word	0x50012c00
 800cfd4:	40000400 	.word	0x40000400
 800cfd8:	50000400 	.word	0x50000400
 800cfdc:	40000800 	.word	0x40000800
 800cfe0:	50000800 	.word	0x50000800
 800cfe4:	40000c00 	.word	0x40000c00
 800cfe8:	50000c00 	.word	0x50000c00
 800cfec:	40013400 	.word	0x40013400
 800cff0:	50013400 	.word	0x50013400
 800cff4:	40014000 	.word	0x40014000
 800cff8:	50014000 	.word	0x50014000
 800cffc:	00010007 	.word	0x00010007

0800d000 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	68db      	ldr	r3, [r3, #12]
 800d00e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	691b      	ldr	r3, [r3, #16]
 800d016:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	f003 0302 	and.w	r3, r3, #2
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d020      	beq.n	800d064 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f003 0302 	and.w	r3, r3, #2
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d01b      	beq.n	800d064 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f06f 0202 	mvn.w	r2, #2
 800d034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2201      	movs	r2, #1
 800d03a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	699b      	ldr	r3, [r3, #24]
 800d042:	f003 0303 	and.w	r3, r3, #3
 800d046:	2b00      	cmp	r3, #0
 800d048:	d003      	beq.n	800d052 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 f931 	bl	800d2b2 <HAL_TIM_IC_CaptureCallback>
 800d050:	e005      	b.n	800d05e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f000 f923 	bl	800d29e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f000 f934 	bl	800d2c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2200      	movs	r2, #0
 800d062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	f003 0304 	and.w	r3, r3, #4
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d020      	beq.n	800d0b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f003 0304 	and.w	r3, r3, #4
 800d074:	2b00      	cmp	r3, #0
 800d076:	d01b      	beq.n	800d0b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f06f 0204 	mvn.w	r2, #4
 800d080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2202      	movs	r2, #2
 800d086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	699b      	ldr	r3, [r3, #24]
 800d08e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d092:	2b00      	cmp	r3, #0
 800d094:	d003      	beq.n	800d09e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f000 f90b 	bl	800d2b2 <HAL_TIM_IC_CaptureCallback>
 800d09c:	e005      	b.n	800d0aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f000 f8fd 	bl	800d29e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f000 f90e 	bl	800d2c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	f003 0308 	and.w	r3, r3, #8
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d020      	beq.n	800d0fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f003 0308 	and.w	r3, r3, #8
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d01b      	beq.n	800d0fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f06f 0208 	mvn.w	r2, #8
 800d0cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2204      	movs	r2, #4
 800d0d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	69db      	ldr	r3, [r3, #28]
 800d0da:	f003 0303 	and.w	r3, r3, #3
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d003      	beq.n	800d0ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f000 f8e5 	bl	800d2b2 <HAL_TIM_IC_CaptureCallback>
 800d0e8:	e005      	b.n	800d0f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f000 f8d7 	bl	800d29e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 f8e8 	bl	800d2c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	f003 0310 	and.w	r3, r3, #16
 800d102:	2b00      	cmp	r3, #0
 800d104:	d020      	beq.n	800d148 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f003 0310 	and.w	r3, r3, #16
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d01b      	beq.n	800d148 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f06f 0210 	mvn.w	r2, #16
 800d118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2208      	movs	r2, #8
 800d11e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	69db      	ldr	r3, [r3, #28]
 800d126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d003      	beq.n	800d136 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 f8bf 	bl	800d2b2 <HAL_TIM_IC_CaptureCallback>
 800d134:	e005      	b.n	800d142 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 f8b1 	bl	800d29e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 f8c2 	bl	800d2c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	f003 0301 	and.w	r3, r3, #1
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d00c      	beq.n	800d16c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	f003 0301 	and.w	r3, r3, #1
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d007      	beq.n	800d16c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f06f 0201 	mvn.w	r2, #1
 800d164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f7f4 fa76 	bl	8001658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d172:	2b00      	cmp	r3, #0
 800d174:	d104      	bne.n	800d180 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00c      	beq.n	800d19a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d186:	2b00      	cmp	r3, #0
 800d188:	d007      	beq.n	800d19a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f000 f9bb 	bl	800d510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d00c      	beq.n	800d1be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d007      	beq.n	800d1be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d1b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 f9b3 	bl	800d524 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00c      	beq.n	800d1e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d007      	beq.n	800d1e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d1da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 f87c 	bl	800d2da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	f003 0320 	and.w	r3, r3, #32
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d00c      	beq.n	800d206 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f003 0320 	and.w	r3, r3, #32
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d007      	beq.n	800d206 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f06f 0220 	mvn.w	r2, #32
 800d1fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 f97b 	bl	800d4fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00c      	beq.n	800d22a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d216:	2b00      	cmp	r3, #0
 800d218:	d007      	beq.n	800d22a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800d222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f000 f987 	bl	800d538 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d230:	2b00      	cmp	r3, #0
 800d232:	d00c      	beq.n	800d24e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d007      	beq.n	800d24e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800d246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 f97f 	bl	800d54c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d254:	2b00      	cmp	r3, #0
 800d256:	d00c      	beq.n	800d272 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d007      	beq.n	800d272 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800d26a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 f977 	bl	800d560 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d00c      	beq.n	800d296 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d282:	2b00      	cmp	r3, #0
 800d284:	d007      	beq.n	800d296 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800d28e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f000 f96f 	bl	800d574 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d296:	bf00      	nop
 800d298:	3710      	adds	r7, #16
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d29e:	b480      	push	{r7}
 800d2a0:	b083      	sub	sp, #12
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d2a6:	bf00      	nop
 800d2a8:	370c      	adds	r7, #12
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr

0800d2b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d2b2:	b480      	push	{r7}
 800d2b4:	b083      	sub	sp, #12
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d2ba:	bf00      	nop
 800d2bc:	370c      	adds	r7, #12
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c4:	4770      	bx	lr

0800d2c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d2c6:	b480      	push	{r7}
 800d2c8:	b083      	sub	sp, #12
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d2ce:	bf00      	nop
 800d2d0:	370c      	adds	r7, #12
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr

0800d2da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d2da:	b480      	push	{r7}
 800d2dc:	b083      	sub	sp, #12
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d2e2:	bf00      	nop
 800d2e4:	370c      	adds	r7, #12
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr
	...

0800d2f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	4a6e      	ldr	r2, [pc, #440]	@ (800d4bc <TIM_Base_SetConfig+0x1cc>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d02b      	beq.n	800d360 <TIM_Base_SetConfig+0x70>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4a6d      	ldr	r2, [pc, #436]	@ (800d4c0 <TIM_Base_SetConfig+0x1d0>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d027      	beq.n	800d360 <TIM_Base_SetConfig+0x70>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d316:	d023      	beq.n	800d360 <TIM_Base_SetConfig+0x70>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d31e:	d01f      	beq.n	800d360 <TIM_Base_SetConfig+0x70>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	4a68      	ldr	r2, [pc, #416]	@ (800d4c4 <TIM_Base_SetConfig+0x1d4>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d01b      	beq.n	800d360 <TIM_Base_SetConfig+0x70>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	4a67      	ldr	r2, [pc, #412]	@ (800d4c8 <TIM_Base_SetConfig+0x1d8>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d017      	beq.n	800d360 <TIM_Base_SetConfig+0x70>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	4a66      	ldr	r2, [pc, #408]	@ (800d4cc <TIM_Base_SetConfig+0x1dc>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d013      	beq.n	800d360 <TIM_Base_SetConfig+0x70>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	4a65      	ldr	r2, [pc, #404]	@ (800d4d0 <TIM_Base_SetConfig+0x1e0>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d00f      	beq.n	800d360 <TIM_Base_SetConfig+0x70>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	4a64      	ldr	r2, [pc, #400]	@ (800d4d4 <TIM_Base_SetConfig+0x1e4>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d00b      	beq.n	800d360 <TIM_Base_SetConfig+0x70>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4a63      	ldr	r2, [pc, #396]	@ (800d4d8 <TIM_Base_SetConfig+0x1e8>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d007      	beq.n	800d360 <TIM_Base_SetConfig+0x70>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	4a62      	ldr	r2, [pc, #392]	@ (800d4dc <TIM_Base_SetConfig+0x1ec>)
 800d354:	4293      	cmp	r3, r2
 800d356:	d003      	beq.n	800d360 <TIM_Base_SetConfig+0x70>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	4a61      	ldr	r2, [pc, #388]	@ (800d4e0 <TIM_Base_SetConfig+0x1f0>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d108      	bne.n	800d372 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	68fa      	ldr	r2, [r7, #12]
 800d36e:	4313      	orrs	r3, r2
 800d370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	4a51      	ldr	r2, [pc, #324]	@ (800d4bc <TIM_Base_SetConfig+0x1cc>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d043      	beq.n	800d402 <TIM_Base_SetConfig+0x112>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	4a50      	ldr	r2, [pc, #320]	@ (800d4c0 <TIM_Base_SetConfig+0x1d0>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d03f      	beq.n	800d402 <TIM_Base_SetConfig+0x112>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d388:	d03b      	beq.n	800d402 <TIM_Base_SetConfig+0x112>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d390:	d037      	beq.n	800d402 <TIM_Base_SetConfig+0x112>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	4a4b      	ldr	r2, [pc, #300]	@ (800d4c4 <TIM_Base_SetConfig+0x1d4>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d033      	beq.n	800d402 <TIM_Base_SetConfig+0x112>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	4a4a      	ldr	r2, [pc, #296]	@ (800d4c8 <TIM_Base_SetConfig+0x1d8>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d02f      	beq.n	800d402 <TIM_Base_SetConfig+0x112>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	4a49      	ldr	r2, [pc, #292]	@ (800d4cc <TIM_Base_SetConfig+0x1dc>)
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d02b      	beq.n	800d402 <TIM_Base_SetConfig+0x112>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	4a48      	ldr	r2, [pc, #288]	@ (800d4d0 <TIM_Base_SetConfig+0x1e0>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d027      	beq.n	800d402 <TIM_Base_SetConfig+0x112>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	4a47      	ldr	r2, [pc, #284]	@ (800d4d4 <TIM_Base_SetConfig+0x1e4>)
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	d023      	beq.n	800d402 <TIM_Base_SetConfig+0x112>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	4a46      	ldr	r2, [pc, #280]	@ (800d4d8 <TIM_Base_SetConfig+0x1e8>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d01f      	beq.n	800d402 <TIM_Base_SetConfig+0x112>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	4a45      	ldr	r2, [pc, #276]	@ (800d4dc <TIM_Base_SetConfig+0x1ec>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d01b      	beq.n	800d402 <TIM_Base_SetConfig+0x112>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	4a44      	ldr	r2, [pc, #272]	@ (800d4e0 <TIM_Base_SetConfig+0x1f0>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d017      	beq.n	800d402 <TIM_Base_SetConfig+0x112>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	4a43      	ldr	r2, [pc, #268]	@ (800d4e4 <TIM_Base_SetConfig+0x1f4>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d013      	beq.n	800d402 <TIM_Base_SetConfig+0x112>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4a42      	ldr	r2, [pc, #264]	@ (800d4e8 <TIM_Base_SetConfig+0x1f8>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d00f      	beq.n	800d402 <TIM_Base_SetConfig+0x112>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	4a41      	ldr	r2, [pc, #260]	@ (800d4ec <TIM_Base_SetConfig+0x1fc>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d00b      	beq.n	800d402 <TIM_Base_SetConfig+0x112>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4a40      	ldr	r2, [pc, #256]	@ (800d4f0 <TIM_Base_SetConfig+0x200>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d007      	beq.n	800d402 <TIM_Base_SetConfig+0x112>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	4a3f      	ldr	r2, [pc, #252]	@ (800d4f4 <TIM_Base_SetConfig+0x204>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d003      	beq.n	800d402 <TIM_Base_SetConfig+0x112>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	4a3e      	ldr	r2, [pc, #248]	@ (800d4f8 <TIM_Base_SetConfig+0x208>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d108      	bne.n	800d414 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	68db      	ldr	r3, [r3, #12]
 800d40e:	68fa      	ldr	r2, [r7, #12]
 800d410:	4313      	orrs	r3, r2
 800d412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	695b      	ldr	r3, [r3, #20]
 800d41e:	4313      	orrs	r3, r2
 800d420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	68fa      	ldr	r2, [r7, #12]
 800d426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	689a      	ldr	r2, [r3, #8]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	4a20      	ldr	r2, [pc, #128]	@ (800d4bc <TIM_Base_SetConfig+0x1cc>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d023      	beq.n	800d488 <TIM_Base_SetConfig+0x198>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	4a1f      	ldr	r2, [pc, #124]	@ (800d4c0 <TIM_Base_SetConfig+0x1d0>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d01f      	beq.n	800d488 <TIM_Base_SetConfig+0x198>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	4a24      	ldr	r2, [pc, #144]	@ (800d4dc <TIM_Base_SetConfig+0x1ec>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d01b      	beq.n	800d488 <TIM_Base_SetConfig+0x198>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	4a23      	ldr	r2, [pc, #140]	@ (800d4e0 <TIM_Base_SetConfig+0x1f0>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d017      	beq.n	800d488 <TIM_Base_SetConfig+0x198>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	4a22      	ldr	r2, [pc, #136]	@ (800d4e4 <TIM_Base_SetConfig+0x1f4>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d013      	beq.n	800d488 <TIM_Base_SetConfig+0x198>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	4a21      	ldr	r2, [pc, #132]	@ (800d4e8 <TIM_Base_SetConfig+0x1f8>)
 800d464:	4293      	cmp	r3, r2
 800d466:	d00f      	beq.n	800d488 <TIM_Base_SetConfig+0x198>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	4a20      	ldr	r2, [pc, #128]	@ (800d4ec <TIM_Base_SetConfig+0x1fc>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d00b      	beq.n	800d488 <TIM_Base_SetConfig+0x198>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	4a1f      	ldr	r2, [pc, #124]	@ (800d4f0 <TIM_Base_SetConfig+0x200>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d007      	beq.n	800d488 <TIM_Base_SetConfig+0x198>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4a1e      	ldr	r2, [pc, #120]	@ (800d4f4 <TIM_Base_SetConfig+0x204>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d003      	beq.n	800d488 <TIM_Base_SetConfig+0x198>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a1d      	ldr	r2, [pc, #116]	@ (800d4f8 <TIM_Base_SetConfig+0x208>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d103      	bne.n	800d490 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	691a      	ldr	r2, [r3, #16]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2201      	movs	r2, #1
 800d494:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	691b      	ldr	r3, [r3, #16]
 800d49a:	f003 0301 	and.w	r3, r3, #1
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d105      	bne.n	800d4ae <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	691b      	ldr	r3, [r3, #16]
 800d4a6:	f023 0201 	bic.w	r2, r3, #1
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	611a      	str	r2, [r3, #16]
  }
}
 800d4ae:	bf00      	nop
 800d4b0:	3714      	adds	r7, #20
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr
 800d4ba:	bf00      	nop
 800d4bc:	40012c00 	.word	0x40012c00
 800d4c0:	50012c00 	.word	0x50012c00
 800d4c4:	40000400 	.word	0x40000400
 800d4c8:	50000400 	.word	0x50000400
 800d4cc:	40000800 	.word	0x40000800
 800d4d0:	50000800 	.word	0x50000800
 800d4d4:	40000c00 	.word	0x40000c00
 800d4d8:	50000c00 	.word	0x50000c00
 800d4dc:	40013400 	.word	0x40013400
 800d4e0:	50013400 	.word	0x50013400
 800d4e4:	40014000 	.word	0x40014000
 800d4e8:	50014000 	.word	0x50014000
 800d4ec:	40014400 	.word	0x40014400
 800d4f0:	50014400 	.word	0x50014400
 800d4f4:	40014800 	.word	0x40014800
 800d4f8:	50014800 	.word	0x50014800

0800d4fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b083      	sub	sp, #12
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d504:	bf00      	nop
 800d506:	370c      	adds	r7, #12
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr

0800d510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d518:	bf00      	nop
 800d51a:	370c      	adds	r7, #12
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr

0800d524 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d52c:	bf00      	nop
 800d52e:	370c      	adds	r7, #12
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr

0800d538 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d538:	b480      	push	{r7}
 800d53a:	b083      	sub	sp, #12
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d540:	bf00      	nop
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr

0800d54c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d554:	bf00      	nop
 800d556:	370c      	adds	r7, #12
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr

0800d560 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d560:	b480      	push	{r7}
 800d562:	b083      	sub	sp, #12
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d568:	bf00      	nop
 800d56a:	370c      	adds	r7, #12
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d574:	b480      	push	{r7}
 800d576:	b083      	sub	sp, #12
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d57c:	bf00      	nop
 800d57e:	370c      	adds	r7, #12
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr

0800d588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d101      	bne.n	800d59a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d596:	2301      	movs	r3, #1
 800d598:	e042      	b.n	800d620 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d106      	bne.n	800d5b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f7f4 fbe9 	bl	8001d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2224      	movs	r2, #36	@ 0x24
 800d5b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f022 0201 	bic.w	r2, r2, #1
 800d5c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d002      	beq.n	800d5d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f000 f9d6 	bl	800d984 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f000 f825 	bl	800d628 <UART_SetConfig>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	2b01      	cmp	r3, #1
 800d5e2:	d101      	bne.n	800d5e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e01b      	b.n	800d620 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	685a      	ldr	r2, [r3, #4]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d5f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	689a      	ldr	r2, [r3, #8]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d606:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f042 0201 	orr.w	r2, r2, #1
 800d616:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f000 fa55 	bl	800dac8 <UART_CheckIdleState>
 800d61e:	4603      	mov	r3, r0
}
 800d620:	4618      	mov	r0, r3
 800d622:	3708      	adds	r7, #8
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}

0800d628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d62c:	b094      	sub	sp, #80	@ 0x50
 800d62e:	af00      	add	r7, sp, #0
 800d630:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d632:	2300      	movs	r3, #0
 800d634:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	4b83      	ldr	r3, [pc, #524]	@ (800d84c <UART_SetConfig+0x224>)
 800d63e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d642:	689a      	ldr	r2, [r3, #8]
 800d644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d646:	691b      	ldr	r3, [r3, #16]
 800d648:	431a      	orrs	r2, r3
 800d64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d64c:	695b      	ldr	r3, [r3, #20]
 800d64e:	431a      	orrs	r2, r3
 800d650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d652:	69db      	ldr	r3, [r3, #28]
 800d654:	4313      	orrs	r3, r2
 800d656:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	497c      	ldr	r1, [pc, #496]	@ (800d850 <UART_SetConfig+0x228>)
 800d660:	4019      	ands	r1, r3
 800d662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d668:	430b      	orrs	r3, r1
 800d66a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d678:	68d9      	ldr	r1, [r3, #12]
 800d67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	ea40 0301 	orr.w	r3, r0, r1
 800d682:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d686:	699b      	ldr	r3, [r3, #24]
 800d688:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d68a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	4b6f      	ldr	r3, [pc, #444]	@ (800d84c <UART_SetConfig+0x224>)
 800d690:	429a      	cmp	r2, r3
 800d692:	d009      	beq.n	800d6a8 <UART_SetConfig+0x80>
 800d694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d696:	681a      	ldr	r2, [r3, #0]
 800d698:	4b6e      	ldr	r3, [pc, #440]	@ (800d854 <UART_SetConfig+0x22c>)
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d004      	beq.n	800d6a8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d69e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a0:	6a1a      	ldr	r2, [r3, #32]
 800d6a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d6b2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6bc:	430b      	orrs	r3, r1
 800d6be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6c6:	f023 000f 	bic.w	r0, r3, #15
 800d6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6cc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d6ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	ea40 0301 	orr.w	r3, r0, r1
 800d6d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	4b5e      	ldr	r3, [pc, #376]	@ (800d858 <UART_SetConfig+0x230>)
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d102      	bne.n	800d6e8 <UART_SetConfig+0xc0>
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6e6:	e032      	b.n	800d74e <UART_SetConfig+0x126>
 800d6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	4b5b      	ldr	r3, [pc, #364]	@ (800d85c <UART_SetConfig+0x234>)
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d102      	bne.n	800d6f8 <UART_SetConfig+0xd0>
 800d6f2:	2302      	movs	r3, #2
 800d6f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6f6:	e02a      	b.n	800d74e <UART_SetConfig+0x126>
 800d6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	4b58      	ldr	r3, [pc, #352]	@ (800d860 <UART_SetConfig+0x238>)
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d102      	bne.n	800d708 <UART_SetConfig+0xe0>
 800d702:	2304      	movs	r3, #4
 800d704:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d706:	e022      	b.n	800d74e <UART_SetConfig+0x126>
 800d708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	4b55      	ldr	r3, [pc, #340]	@ (800d864 <UART_SetConfig+0x23c>)
 800d70e:	429a      	cmp	r2, r3
 800d710:	d102      	bne.n	800d718 <UART_SetConfig+0xf0>
 800d712:	2308      	movs	r3, #8
 800d714:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d716:	e01a      	b.n	800d74e <UART_SetConfig+0x126>
 800d718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d71a:	681a      	ldr	r2, [r3, #0]
 800d71c:	4b52      	ldr	r3, [pc, #328]	@ (800d868 <UART_SetConfig+0x240>)
 800d71e:	429a      	cmp	r2, r3
 800d720:	d102      	bne.n	800d728 <UART_SetConfig+0x100>
 800d722:	2310      	movs	r3, #16
 800d724:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d726:	e012      	b.n	800d74e <UART_SetConfig+0x126>
 800d728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	4b4f      	ldr	r3, [pc, #316]	@ (800d86c <UART_SetConfig+0x244>)
 800d72e:	429a      	cmp	r2, r3
 800d730:	d103      	bne.n	800d73a <UART_SetConfig+0x112>
 800d732:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800d736:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d738:	e009      	b.n	800d74e <UART_SetConfig+0x126>
 800d73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	4b43      	ldr	r3, [pc, #268]	@ (800d84c <UART_SetConfig+0x224>)
 800d740:	429a      	cmp	r2, r3
 800d742:	d102      	bne.n	800d74a <UART_SetConfig+0x122>
 800d744:	2320      	movs	r3, #32
 800d746:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d748:	e001      	b.n	800d74e <UART_SetConfig+0x126>
 800d74a:	2300      	movs	r3, #0
 800d74c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	4b3e      	ldr	r3, [pc, #248]	@ (800d84c <UART_SetConfig+0x224>)
 800d754:	429a      	cmp	r2, r3
 800d756:	d005      	beq.n	800d764 <UART_SetConfig+0x13c>
 800d758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d75a:	681a      	ldr	r2, [r3, #0]
 800d75c:	4b3d      	ldr	r3, [pc, #244]	@ (800d854 <UART_SetConfig+0x22c>)
 800d75e:	429a      	cmp	r2, r3
 800d760:	f040 8088 	bne.w	800d874 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d766:	2200      	movs	r2, #0
 800d768:	623b      	str	r3, [r7, #32]
 800d76a:	627a      	str	r2, [r7, #36]	@ 0x24
 800d76c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d770:	f7fd fcd2 	bl	800b118 <HAL_RCCEx_GetPeriphCLKFreq>
 800d774:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f000 80eb 	beq.w	800d954 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d782:	4a3b      	ldr	r2, [pc, #236]	@ (800d870 <UART_SetConfig+0x248>)
 800d784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d788:	461a      	mov	r2, r3
 800d78a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d78c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d790:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d794:	685a      	ldr	r2, [r3, #4]
 800d796:	4613      	mov	r3, r2
 800d798:	005b      	lsls	r3, r3, #1
 800d79a:	4413      	add	r3, r2
 800d79c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d305      	bcc.n	800d7ae <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d7a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d903      	bls.n	800d7b6 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d7b4:	e048      	b.n	800d848 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	61bb      	str	r3, [r7, #24]
 800d7bc:	61fa      	str	r2, [r7, #28]
 800d7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7c2:	4a2b      	ldr	r2, [pc, #172]	@ (800d870 <UART_SetConfig+0x248>)
 800d7c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	613b      	str	r3, [r7, #16]
 800d7ce:	617a      	str	r2, [r7, #20]
 800d7d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d7d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d7d8:	f7f2 fd6c 	bl	80002b4 <__aeabi_uldivmod>
 800d7dc:	4602      	mov	r2, r0
 800d7de:	460b      	mov	r3, r1
 800d7e0:	4610      	mov	r0, r2
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	f04f 0200 	mov.w	r2, #0
 800d7e8:	f04f 0300 	mov.w	r3, #0
 800d7ec:	020b      	lsls	r3, r1, #8
 800d7ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d7f2:	0202      	lsls	r2, r0, #8
 800d7f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d7f6:	6849      	ldr	r1, [r1, #4]
 800d7f8:	0849      	lsrs	r1, r1, #1
 800d7fa:	2000      	movs	r0, #0
 800d7fc:	460c      	mov	r4, r1
 800d7fe:	4605      	mov	r5, r0
 800d800:	eb12 0804 	adds.w	r8, r2, r4
 800d804:	eb43 0905 	adc.w	r9, r3, r5
 800d808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	60bb      	str	r3, [r7, #8]
 800d810:	60fa      	str	r2, [r7, #12]
 800d812:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d816:	4640      	mov	r0, r8
 800d818:	4649      	mov	r1, r9
 800d81a:	f7f2 fd4b 	bl	80002b4 <__aeabi_uldivmod>
 800d81e:	4602      	mov	r2, r0
 800d820:	460b      	mov	r3, r1
 800d822:	4613      	mov	r3, r2
 800d824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d828:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d82c:	d308      	bcc.n	800d840 <UART_SetConfig+0x218>
 800d82e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d830:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d834:	d204      	bcs.n	800d840 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800d836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d83c:	60da      	str	r2, [r3, #12]
 800d83e:	e003      	b.n	800d848 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800d840:	2301      	movs	r3, #1
 800d842:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800d846:	e085      	b.n	800d954 <UART_SetConfig+0x32c>
 800d848:	e084      	b.n	800d954 <UART_SetConfig+0x32c>
 800d84a:	bf00      	nop
 800d84c:	46002400 	.word	0x46002400
 800d850:	cfff69f3 	.word	0xcfff69f3
 800d854:	56002400 	.word	0x56002400
 800d858:	40013800 	.word	0x40013800
 800d85c:	40004400 	.word	0x40004400
 800d860:	40004800 	.word	0x40004800
 800d864:	40004c00 	.word	0x40004c00
 800d868:	40005000 	.word	0x40005000
 800d86c:	40006400 	.word	0x40006400
 800d870:	082b2120 	.word	0x082b2120
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d876:	69db      	ldr	r3, [r3, #28]
 800d878:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d87c:	d13c      	bne.n	800d8f8 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d87e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d880:	2200      	movs	r2, #0
 800d882:	603b      	str	r3, [r7, #0]
 800d884:	607a      	str	r2, [r7, #4]
 800d886:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d88a:	f7fd fc45 	bl	800b118 <HAL_RCCEx_GetPeriphCLKFreq>
 800d88e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d890:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d892:	2b00      	cmp	r3, #0
 800d894:	d05e      	beq.n	800d954 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d89a:	4a39      	ldr	r2, [pc, #228]	@ (800d980 <UART_SetConfig+0x358>)
 800d89c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8a8:	005a      	lsls	r2, r3, #1
 800d8aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	085b      	lsrs	r3, r3, #1
 800d8b0:	441a      	add	r2, r3
 800d8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d8bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8be:	2b0f      	cmp	r3, #15
 800d8c0:	d916      	bls.n	800d8f0 <UART_SetConfig+0x2c8>
 800d8c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d8c8:	d212      	bcs.n	800d8f0 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d8ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	f023 030f 	bic.w	r3, r3, #15
 800d8d2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d8d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8d6:	085b      	lsrs	r3, r3, #1
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	f003 0307 	and.w	r3, r3, #7
 800d8de:	b29a      	uxth	r2, r3
 800d8e0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800d8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d8ec:	60da      	str	r2, [r3, #12]
 800d8ee:	e031      	b.n	800d954 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d8f6:	e02d      	b.n	800d954 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d8f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	469a      	mov	sl, r3
 800d8fe:	4693      	mov	fp, r2
 800d900:	4650      	mov	r0, sl
 800d902:	4659      	mov	r1, fp
 800d904:	f7fd fc08 	bl	800b118 <HAL_RCCEx_GetPeriphCLKFreq>
 800d908:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800d90a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d021      	beq.n	800d954 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d914:	4a1a      	ldr	r2, [pc, #104]	@ (800d980 <UART_SetConfig+0x358>)
 800d916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d91a:	461a      	mov	r2, r3
 800d91c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d91e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	085b      	lsrs	r3, r3, #1
 800d928:	441a      	add	r2, r3
 800d92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d932:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d936:	2b0f      	cmp	r3, #15
 800d938:	d909      	bls.n	800d94e <UART_SetConfig+0x326>
 800d93a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d93c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d940:	d205      	bcs.n	800d94e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d944:	b29a      	uxth	r2, r3
 800d946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	60da      	str	r2, [r3, #12]
 800d94c:	e002      	b.n	800d954 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d94e:	2301      	movs	r3, #1
 800d950:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d956:	2201      	movs	r2, #1
 800d958:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d95e:	2201      	movs	r2, #1
 800d960:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d966:	2200      	movs	r2, #0
 800d968:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d96a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d96c:	2200      	movs	r2, #0
 800d96e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d970:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d974:	4618      	mov	r0, r3
 800d976:	3750      	adds	r7, #80	@ 0x50
 800d978:	46bd      	mov	sp, r7
 800d97a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d97e:	bf00      	nop
 800d980:	082b2120 	.word	0x082b2120

0800d984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d984:	b480      	push	{r7}
 800d986:	b083      	sub	sp, #12
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d990:	f003 0308 	and.w	r3, r3, #8
 800d994:	2b00      	cmp	r3, #0
 800d996:	d00a      	beq.n	800d9ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	430a      	orrs	r2, r1
 800d9ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9b2:	f003 0301 	and.w	r3, r3, #1
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d00a      	beq.n	800d9d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	430a      	orrs	r2, r1
 800d9ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9d4:	f003 0302 	and.w	r3, r3, #2
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00a      	beq.n	800d9f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	430a      	orrs	r2, r1
 800d9f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9f6:	f003 0304 	and.w	r3, r3, #4
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00a      	beq.n	800da14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	685b      	ldr	r3, [r3, #4]
 800da04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	430a      	orrs	r2, r1
 800da12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da18:	f003 0310 	and.w	r3, r3, #16
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d00a      	beq.n	800da36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	689b      	ldr	r3, [r3, #8]
 800da26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	430a      	orrs	r2, r1
 800da34:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da3a:	f003 0320 	and.w	r3, r3, #32
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00a      	beq.n	800da58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	689b      	ldr	r3, [r3, #8]
 800da48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	430a      	orrs	r2, r1
 800da56:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da60:	2b00      	cmp	r3, #0
 800da62:	d01a      	beq.n	800da9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	430a      	orrs	r2, r1
 800da78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da82:	d10a      	bne.n	800da9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	430a      	orrs	r2, r1
 800da98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00a      	beq.n	800dabc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	430a      	orrs	r2, r1
 800daba:	605a      	str	r2, [r3, #4]
  }
}
 800dabc:	bf00      	nop
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b098      	sub	sp, #96	@ 0x60
 800dacc:	af02      	add	r7, sp, #8
 800dace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dad8:	f7f4 fb4e 	bl	8002178 <HAL_GetTick>
 800dadc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f003 0308 	and.w	r3, r3, #8
 800dae8:	2b08      	cmp	r3, #8
 800daea:	d12f      	bne.n	800db4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800daec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daf4:	2200      	movs	r2, #0
 800daf6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 f88e 	bl	800dc1c <UART_WaitOnFlagUntilTimeout>
 800db00:	4603      	mov	r3, r0
 800db02:	2b00      	cmp	r3, #0
 800db04:	d022      	beq.n	800db4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db0e:	e853 3f00 	ldrex	r3, [r3]
 800db12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800db14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800db1a:	653b      	str	r3, [r7, #80]	@ 0x50
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	461a      	mov	r2, r3
 800db22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db24:	647b      	str	r3, [r7, #68]	@ 0x44
 800db26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db2c:	e841 2300 	strex	r3, r2, [r1]
 800db30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800db32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db34:	2b00      	cmp	r3, #0
 800db36:	d1e6      	bne.n	800db06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2220      	movs	r2, #32
 800db3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db48:	2303      	movs	r3, #3
 800db4a:	e063      	b.n	800dc14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f003 0304 	and.w	r3, r3, #4
 800db56:	2b04      	cmp	r3, #4
 800db58:	d149      	bne.n	800dbee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db5a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800db5e:	9300      	str	r3, [sp, #0]
 800db60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db62:	2200      	movs	r2, #0
 800db64:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 f857 	bl	800dc1c <UART_WaitOnFlagUntilTimeout>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d03c      	beq.n	800dbee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db7c:	e853 3f00 	ldrex	r3, [r3]
 800db80:	623b      	str	r3, [r7, #32]
   return(result);
 800db82:	6a3b      	ldr	r3, [r7, #32]
 800db84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800db88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	461a      	mov	r2, r3
 800db90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db92:	633b      	str	r3, [r7, #48]	@ 0x30
 800db94:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db9a:	e841 2300 	strex	r3, r2, [r1]
 800db9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d1e6      	bne.n	800db74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	3308      	adds	r3, #8
 800dbac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	e853 3f00 	ldrex	r3, [r3]
 800dbb4:	60fb      	str	r3, [r7, #12]
   return(result);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f023 0301 	bic.w	r3, r3, #1
 800dbbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	3308      	adds	r3, #8
 800dbc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dbc6:	61fa      	str	r2, [r7, #28]
 800dbc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbca:	69b9      	ldr	r1, [r7, #24]
 800dbcc:	69fa      	ldr	r2, [r7, #28]
 800dbce:	e841 2300 	strex	r3, r2, [r1]
 800dbd2:	617b      	str	r3, [r7, #20]
   return(result);
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d1e5      	bne.n	800dba6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2220      	movs	r2, #32
 800dbde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dbea:	2303      	movs	r3, #3
 800dbec:	e012      	b.n	800dc14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2220      	movs	r2, #32
 800dbf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2220      	movs	r2, #32
 800dbfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2200      	movs	r2, #0
 800dc02:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2200      	movs	r2, #0
 800dc08:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc12:	2300      	movs	r3, #0
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3758      	adds	r7, #88	@ 0x58
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	603b      	str	r3, [r7, #0]
 800dc28:	4613      	mov	r3, r2
 800dc2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc2c:	e04f      	b.n	800dcce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc2e:	69bb      	ldr	r3, [r7, #24]
 800dc30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc34:	d04b      	beq.n	800dcce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc36:	f7f4 fa9f 	bl	8002178 <HAL_GetTick>
 800dc3a:	4602      	mov	r2, r0
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	1ad3      	subs	r3, r2, r3
 800dc40:	69ba      	ldr	r2, [r7, #24]
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d302      	bcc.n	800dc4c <UART_WaitOnFlagUntilTimeout+0x30>
 800dc46:	69bb      	ldr	r3, [r7, #24]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d101      	bne.n	800dc50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dc4c:	2303      	movs	r3, #3
 800dc4e:	e04e      	b.n	800dcee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f003 0304 	and.w	r3, r3, #4
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d037      	beq.n	800dcce <UART_WaitOnFlagUntilTimeout+0xb2>
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	2b80      	cmp	r3, #128	@ 0x80
 800dc62:	d034      	beq.n	800dcce <UART_WaitOnFlagUntilTimeout+0xb2>
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	2b40      	cmp	r3, #64	@ 0x40
 800dc68:	d031      	beq.n	800dcce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	69db      	ldr	r3, [r3, #28]
 800dc70:	f003 0308 	and.w	r3, r3, #8
 800dc74:	2b08      	cmp	r3, #8
 800dc76:	d110      	bne.n	800dc9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2208      	movs	r2, #8
 800dc7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dc80:	68f8      	ldr	r0, [r7, #12]
 800dc82:	f000 f838 	bl	800dcf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2208      	movs	r2, #8
 800dc8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2200      	movs	r2, #0
 800dc92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dc96:	2301      	movs	r3, #1
 800dc98:	e029      	b.n	800dcee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	69db      	ldr	r3, [r3, #28]
 800dca0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dca4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dca8:	d111      	bne.n	800dcce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dcb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f000 f81e 	bl	800dcf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2220      	movs	r2, #32
 800dcbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dcca:	2303      	movs	r3, #3
 800dccc:	e00f      	b.n	800dcee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	69da      	ldr	r2, [r3, #28]
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	4013      	ands	r3, r2
 800dcd8:	68ba      	ldr	r2, [r7, #8]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	bf0c      	ite	eq
 800dcde:	2301      	moveq	r3, #1
 800dce0:	2300      	movne	r3, #0
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	461a      	mov	r2, r3
 800dce6:	79fb      	ldrb	r3, [r7, #7]
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d0a0      	beq.n	800dc2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dcec:	2300      	movs	r3, #0
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3710      	adds	r7, #16
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dcf6:	b480      	push	{r7}
 800dcf8:	b095      	sub	sp, #84	@ 0x54
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd06:	e853 3f00 	ldrex	r3, [r3]
 800dd0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dd12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	461a      	mov	r2, r3
 800dd1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd1c:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dd22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dd24:	e841 2300 	strex	r3, r2, [r1]
 800dd28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dd2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d1e6      	bne.n	800dcfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	3308      	adds	r3, #8
 800dd36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd38:	6a3b      	ldr	r3, [r7, #32]
 800dd3a:	e853 3f00 	ldrex	r3, [r3]
 800dd3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dd46:	f023 0301 	bic.w	r3, r3, #1
 800dd4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	3308      	adds	r3, #8
 800dd52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dd56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd5c:	e841 2300 	strex	r3, r2, [r1]
 800dd60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dd62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d1e3      	bne.n	800dd30 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d118      	bne.n	800dda2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	e853 3f00 	ldrex	r3, [r3]
 800dd7c:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	f023 0310 	bic.w	r3, r3, #16
 800dd84:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd8e:	61bb      	str	r3, [r7, #24]
 800dd90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd92:	6979      	ldr	r1, [r7, #20]
 800dd94:	69ba      	ldr	r2, [r7, #24]
 800dd96:	e841 2300 	strex	r3, r2, [r1]
 800dd9a:	613b      	str	r3, [r7, #16]
   return(result);
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1e6      	bne.n	800dd70 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2220      	movs	r2, #32
 800dda6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2200      	movs	r2, #0
 800ddae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ddb6:	bf00      	nop
 800ddb8:	3754      	adds	r7, #84	@ 0x54
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr

0800ddc2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ddc2:	b480      	push	{r7}
 800ddc4:	b085      	sub	sp, #20
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d101      	bne.n	800ddd8 <HAL_UARTEx_DisableFifoMode+0x16>
 800ddd4:	2302      	movs	r3, #2
 800ddd6:	e027      	b.n	800de28 <HAL_UARTEx_DisableFifoMode+0x66>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2201      	movs	r2, #1
 800dddc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2224      	movs	r2, #36	@ 0x24
 800dde4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	681a      	ldr	r2, [r3, #0]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f022 0201 	bic.w	r2, r2, #1
 800ddfe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800de06:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2200      	movs	r2, #0
 800de0c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2220      	movs	r2, #32
 800de1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2200      	movs	r2, #0
 800de22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de26:	2300      	movs	r3, #0
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3714      	adds	r7, #20
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr

0800de34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800de44:	2b01      	cmp	r3, #1
 800de46:	d101      	bne.n	800de4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800de48:	2302      	movs	r3, #2
 800de4a:	e02d      	b.n	800dea8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2201      	movs	r2, #1
 800de50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2224      	movs	r2, #36	@ 0x24
 800de58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	681a      	ldr	r2, [r3, #0]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f022 0201 	bic.w	r2, r2, #1
 800de72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	689b      	ldr	r3, [r3, #8]
 800de7a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	683a      	ldr	r2, [r7, #0]
 800de84:	430a      	orrs	r2, r1
 800de86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 f84f 	bl	800df2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2220      	movs	r2, #32
 800de9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2200      	movs	r2, #0
 800dea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dea6:	2300      	movs	r3, #0
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b084      	sub	sp, #16
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d101      	bne.n	800dec8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dec4:	2302      	movs	r3, #2
 800dec6:	e02d      	b.n	800df24 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2201      	movs	r2, #1
 800decc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2224      	movs	r2, #36	@ 0x24
 800ded4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f022 0201 	bic.w	r2, r2, #1
 800deee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	689b      	ldr	r3, [r3, #8]
 800def6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	683a      	ldr	r2, [r7, #0]
 800df00:	430a      	orrs	r2, r1
 800df02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f000 f811 	bl	800df2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	68fa      	ldr	r2, [r7, #12]
 800df10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2220      	movs	r2, #32
 800df16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2200      	movs	r2, #0
 800df1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800df22:	2300      	movs	r3, #0
}
 800df24:	4618      	mov	r0, r3
 800df26:	3710      	adds	r7, #16
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800df2c:	b480      	push	{r7}
 800df2e:	b085      	sub	sp, #20
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d108      	bne.n	800df4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2201      	movs	r2, #1
 800df40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2201      	movs	r2, #1
 800df48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800df4c:	e031      	b.n	800dfb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800df4e:	2308      	movs	r3, #8
 800df50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800df52:	2308      	movs	r3, #8
 800df54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	689b      	ldr	r3, [r3, #8]
 800df5c:	0e5b      	lsrs	r3, r3, #25
 800df5e:	b2db      	uxtb	r3, r3
 800df60:	f003 0307 	and.w	r3, r3, #7
 800df64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	689b      	ldr	r3, [r3, #8]
 800df6c:	0f5b      	lsrs	r3, r3, #29
 800df6e:	b2db      	uxtb	r3, r3
 800df70:	f003 0307 	and.w	r3, r3, #7
 800df74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df76:	7bbb      	ldrb	r3, [r7, #14]
 800df78:	7b3a      	ldrb	r2, [r7, #12]
 800df7a:	4911      	ldr	r1, [pc, #68]	@ (800dfc0 <UARTEx_SetNbDataToProcess+0x94>)
 800df7c:	5c8a      	ldrb	r2, [r1, r2]
 800df7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800df82:	7b3a      	ldrb	r2, [r7, #12]
 800df84:	490f      	ldr	r1, [pc, #60]	@ (800dfc4 <UARTEx_SetNbDataToProcess+0x98>)
 800df86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df88:	fb93 f3f2 	sdiv	r3, r3, r2
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df94:	7bfb      	ldrb	r3, [r7, #15]
 800df96:	7b7a      	ldrb	r2, [r7, #13]
 800df98:	4909      	ldr	r1, [pc, #36]	@ (800dfc0 <UARTEx_SetNbDataToProcess+0x94>)
 800df9a:	5c8a      	ldrb	r2, [r1, r2]
 800df9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dfa0:	7b7a      	ldrb	r2, [r7, #13]
 800dfa2:	4908      	ldr	r1, [pc, #32]	@ (800dfc4 <UARTEx_SetNbDataToProcess+0x98>)
 800dfa4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dfa6:	fb93 f3f2 	sdiv	r3, r3, r2
 800dfaa:	b29a      	uxth	r2, r3
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dfb2:	bf00      	nop
 800dfb4:	3714      	adds	r7, #20
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr
 800dfbe:	bf00      	nop
 800dfc0:	082b2138 	.word	0x082b2138
 800dfc4:	082b2140 	.word	0x082b2140

0800dfc8 <memset>:
 800dfc8:	4402      	add	r2, r0
 800dfca:	4603      	mov	r3, r0
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d100      	bne.n	800dfd2 <memset+0xa>
 800dfd0:	4770      	bx	lr
 800dfd2:	f803 1b01 	strb.w	r1, [r3], #1
 800dfd6:	e7f9      	b.n	800dfcc <memset+0x4>

0800dfd8 <__libc_init_array>:
 800dfd8:	b570      	push	{r4, r5, r6, lr}
 800dfda:	4d0d      	ldr	r5, [pc, #52]	@ (800e010 <__libc_init_array+0x38>)
 800dfdc:	2600      	movs	r6, #0
 800dfde:	4c0d      	ldr	r4, [pc, #52]	@ (800e014 <__libc_init_array+0x3c>)
 800dfe0:	1b64      	subs	r4, r4, r5
 800dfe2:	10a4      	asrs	r4, r4, #2
 800dfe4:	42a6      	cmp	r6, r4
 800dfe6:	d109      	bne.n	800dffc <__libc_init_array+0x24>
 800dfe8:	4d0b      	ldr	r5, [pc, #44]	@ (800e018 <__libc_init_array+0x40>)
 800dfea:	2600      	movs	r6, #0
 800dfec:	4c0b      	ldr	r4, [pc, #44]	@ (800e01c <__libc_init_array+0x44>)
 800dfee:	f000 f817 	bl	800e020 <_init>
 800dff2:	1b64      	subs	r4, r4, r5
 800dff4:	10a4      	asrs	r4, r4, #2
 800dff6:	42a6      	cmp	r6, r4
 800dff8:	d105      	bne.n	800e006 <__libc_init_array+0x2e>
 800dffa:	bd70      	pop	{r4, r5, r6, pc}
 800dffc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e000:	3601      	adds	r6, #1
 800e002:	4798      	blx	r3
 800e004:	e7ee      	b.n	800dfe4 <__libc_init_array+0xc>
 800e006:	f855 3b04 	ldr.w	r3, [r5], #4
 800e00a:	3601      	adds	r6, #1
 800e00c:	4798      	blx	r3
 800e00e:	e7f2      	b.n	800dff6 <__libc_init_array+0x1e>
 800e010:	082b2150 	.word	0x082b2150
 800e014:	082b2150 	.word	0x082b2150
 800e018:	082b2150 	.word	0x082b2150
 800e01c:	082b2154 	.word	0x082b2154

0800e020 <_init>:
 800e020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e022:	bf00      	nop
 800e024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e026:	bc08      	pop	{r3}
 800e028:	469e      	mov	lr, r3
 800e02a:	4770      	bx	lr

0800e02c <_fini>:
 800e02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e02e:	bf00      	nop
 800e030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e032:	bc08      	pop	{r3}
 800e034:	469e      	mov	lr, r3
 800e036:	4770      	bx	lr
